/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CdashigClassLinks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CdashigClassLinks{}

// CdashigClassLinks struct for CdashigClassLinks
type CdashigClassLinks struct {
	Self *CdashigClassRef `json:"self,omitempty"`
	ModelClass *CdashClassRef `json:"modelClass,omitempty"`
	ParentProduct *CdashigProductRef `json:"parentProduct,omitempty"`
	ParentClass *CdashigClassRef `json:"parentClass,omitempty"`
	Subclasses []CdashigClassRefSubclass `json:"subclasses,omitempty"`
	PriorVersion *CdashigClassRef `json:"priorVersion,omitempty"`
}

// NewCdashigClassLinks instantiates a new CdashigClassLinks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCdashigClassLinks() *CdashigClassLinks {
	this := CdashigClassLinks{}
	return &this
}

// NewCdashigClassLinksWithDefaults instantiates a new CdashigClassLinks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCdashigClassLinksWithDefaults() *CdashigClassLinks {
	this := CdashigClassLinks{}
	return &this
}

// GetSelf returns the Self field value if set, zero value otherwise.
func (o *CdashigClassLinks) GetSelf() CdashigClassRef {
	if o == nil || IsNil(o.Self) {
		var ret CdashigClassRef
		return ret
	}
	return *o.Self
}

// GetSelfOk returns a tuple with the Self field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdashigClassLinks) GetSelfOk() (*CdashigClassRef, bool) {
	if o == nil || IsNil(o.Self) {
		return nil, false
	}
	return o.Self, true
}

// HasSelf returns a boolean if a field has been set.
func (o *CdashigClassLinks) HasSelf() bool {
	if o != nil && !IsNil(o.Self) {
		return true
	}

	return false
}

// SetSelf gets a reference to the given CdashigClassRef and assigns it to the Self field.
func (o *CdashigClassLinks) SetSelf(v CdashigClassRef) {
	o.Self = &v
}

// GetModelClass returns the ModelClass field value if set, zero value otherwise.
func (o *CdashigClassLinks) GetModelClass() CdashClassRef {
	if o == nil || IsNil(o.ModelClass) {
		var ret CdashClassRef
		return ret
	}
	return *o.ModelClass
}

// GetModelClassOk returns a tuple with the ModelClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdashigClassLinks) GetModelClassOk() (*CdashClassRef, bool) {
	if o == nil || IsNil(o.ModelClass) {
		return nil, false
	}
	return o.ModelClass, true
}

// HasModelClass returns a boolean if a field has been set.
func (o *CdashigClassLinks) HasModelClass() bool {
	if o != nil && !IsNil(o.ModelClass) {
		return true
	}

	return false
}

// SetModelClass gets a reference to the given CdashClassRef and assigns it to the ModelClass field.
func (o *CdashigClassLinks) SetModelClass(v CdashClassRef) {
	o.ModelClass = &v
}

// GetParentProduct returns the ParentProduct field value if set, zero value otherwise.
func (o *CdashigClassLinks) GetParentProduct() CdashigProductRef {
	if o == nil || IsNil(o.ParentProduct) {
		var ret CdashigProductRef
		return ret
	}
	return *o.ParentProduct
}

// GetParentProductOk returns a tuple with the ParentProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdashigClassLinks) GetParentProductOk() (*CdashigProductRef, bool) {
	if o == nil || IsNil(o.ParentProduct) {
		return nil, false
	}
	return o.ParentProduct, true
}

// HasParentProduct returns a boolean if a field has been set.
func (o *CdashigClassLinks) HasParentProduct() bool {
	if o != nil && !IsNil(o.ParentProduct) {
		return true
	}

	return false
}

// SetParentProduct gets a reference to the given CdashigProductRef and assigns it to the ParentProduct field.
func (o *CdashigClassLinks) SetParentProduct(v CdashigProductRef) {
	o.ParentProduct = &v
}

// GetParentClass returns the ParentClass field value if set, zero value otherwise.
func (o *CdashigClassLinks) GetParentClass() CdashigClassRef {
	if o == nil || IsNil(o.ParentClass) {
		var ret CdashigClassRef
		return ret
	}
	return *o.ParentClass
}

// GetParentClassOk returns a tuple with the ParentClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdashigClassLinks) GetParentClassOk() (*CdashigClassRef, bool) {
	if o == nil || IsNil(o.ParentClass) {
		return nil, false
	}
	return o.ParentClass, true
}

// HasParentClass returns a boolean if a field has been set.
func (o *CdashigClassLinks) HasParentClass() bool {
	if o != nil && !IsNil(o.ParentClass) {
		return true
	}

	return false
}

// SetParentClass gets a reference to the given CdashigClassRef and assigns it to the ParentClass field.
func (o *CdashigClassLinks) SetParentClass(v CdashigClassRef) {
	o.ParentClass = &v
}

// GetSubclasses returns the Subclasses field value if set, zero value otherwise.
func (o *CdashigClassLinks) GetSubclasses() []CdashigClassRefSubclass {
	if o == nil || IsNil(o.Subclasses) {
		var ret []CdashigClassRefSubclass
		return ret
	}
	return o.Subclasses
}

// GetSubclassesOk returns a tuple with the Subclasses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdashigClassLinks) GetSubclassesOk() ([]CdashigClassRefSubclass, bool) {
	if o == nil || IsNil(o.Subclasses) {
		return nil, false
	}
	return o.Subclasses, true
}

// HasSubclasses returns a boolean if a field has been set.
func (o *CdashigClassLinks) HasSubclasses() bool {
	if o != nil && !IsNil(o.Subclasses) {
		return true
	}

	return false
}

// SetSubclasses gets a reference to the given []CdashigClassRefSubclass and assigns it to the Subclasses field.
func (o *CdashigClassLinks) SetSubclasses(v []CdashigClassRefSubclass) {
	o.Subclasses = v
}

// GetPriorVersion returns the PriorVersion field value if set, zero value otherwise.
func (o *CdashigClassLinks) GetPriorVersion() CdashigClassRef {
	if o == nil || IsNil(o.PriorVersion) {
		var ret CdashigClassRef
		return ret
	}
	return *o.PriorVersion
}

// GetPriorVersionOk returns a tuple with the PriorVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdashigClassLinks) GetPriorVersionOk() (*CdashigClassRef, bool) {
	if o == nil || IsNil(o.PriorVersion) {
		return nil, false
	}
	return o.PriorVersion, true
}

// HasPriorVersion returns a boolean if a field has been set.
func (o *CdashigClassLinks) HasPriorVersion() bool {
	if o != nil && !IsNil(o.PriorVersion) {
		return true
	}

	return false
}

// SetPriorVersion gets a reference to the given CdashigClassRef and assigns it to the PriorVersion field.
func (o *CdashigClassLinks) SetPriorVersion(v CdashigClassRef) {
	o.PriorVersion = &v
}

func (o CdashigClassLinks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CdashigClassLinks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Self) {
		toSerialize["self"] = o.Self
	}
	if !IsNil(o.ModelClass) {
		toSerialize["modelClass"] = o.ModelClass
	}
	if !IsNil(o.ParentProduct) {
		toSerialize["parentProduct"] = o.ParentProduct
	}
	if !IsNil(o.ParentClass) {
		toSerialize["parentClass"] = o.ParentClass
	}
	if !IsNil(o.Subclasses) {
		toSerialize["subclasses"] = o.Subclasses
	}
	if !IsNil(o.PriorVersion) {
		toSerialize["priorVersion"] = o.PriorVersion
	}
	return toSerialize, nil
}

type NullableCdashigClassLinks struct {
	value *CdashigClassLinks
	isSet bool
}

func (v NullableCdashigClassLinks) Get() *CdashigClassLinks {
	return v.value
}

func (v *NullableCdashigClassLinks) Set(val *CdashigClassLinks) {
	v.value = val
	v.isSet = true
}

func (v NullableCdashigClassLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableCdashigClassLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCdashigClassLinks(val *CdashigClassLinks) *NullableCdashigClassLinks {
	return &NullableCdashigClassLinks{value: val, isSet: true}
}

func (v NullableCdashigClassLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCdashigClassLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExportCdashClassVariablesRow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportCdashClassVariablesRow{}

// ExportCdashClassVariablesRow struct for ExportCdashClassVariablesRow
type ExportCdashClassVariablesRow struct {
	Version *string `json:"Version,omitempty"`
	Class *string `json:"Class,omitempty"`
	Domain *string `json:"Domain,omitempty"`
	VariableOrder *string `json:"Variable Order,omitempty"`
	CDASHVariable *string `json:"CDASH Variable,omitempty"`
	CDASHVariableLabel *string `json:"CDASH Variable Label,omitempty"`
	DRAFTCDASHDefinition *string `json:"DRAFT CDASH Definition,omitempty"`
	DomainSpecific *string `json:"Domain Specific,omitempty"`
	QuestionText *string `json:"Question Text,omitempty"`
	Prompt *string `json:"Prompt,omitempty"`
	Type *string `json:"Type,omitempty"`
	SDTMTarget []string `json:"SDTM Target,omitempty"`
	MappingInstructions *string `json:"Mapping Instructions,omitempty"`
	ControlledTerminologyCodelistName *string `json:"Controlled Terminology Codelist Name,omitempty"`
	ImplementationNotes *string `json:"Implementation Notes,omitempty"`
}

// NewExportCdashClassVariablesRow instantiates a new ExportCdashClassVariablesRow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportCdashClassVariablesRow() *ExportCdashClassVariablesRow {
	this := ExportCdashClassVariablesRow{}
	return &this
}

// NewExportCdashClassVariablesRowWithDefaults instantiates a new ExportCdashClassVariablesRow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportCdashClassVariablesRowWithDefaults() *ExportCdashClassVariablesRow {
	this := ExportCdashClassVariablesRow{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ExportCdashClassVariablesRow) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCdashClassVariablesRow) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ExportCdashClassVariablesRow) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ExportCdashClassVariablesRow) SetVersion(v string) {
	o.Version = &v
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *ExportCdashClassVariablesRow) GetClass() string {
	if o == nil || IsNil(o.Class) {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCdashClassVariablesRow) GetClassOk() (*string, bool) {
	if o == nil || IsNil(o.Class) {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *ExportCdashClassVariablesRow) HasClass() bool {
	if o != nil && !IsNil(o.Class) {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *ExportCdashClassVariablesRow) SetClass(v string) {
	o.Class = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *ExportCdashClassVariablesRow) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCdashClassVariablesRow) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *ExportCdashClassVariablesRow) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *ExportCdashClassVariablesRow) SetDomain(v string) {
	o.Domain = &v
}

// GetVariableOrder returns the VariableOrder field value if set, zero value otherwise.
func (o *ExportCdashClassVariablesRow) GetVariableOrder() string {
	if o == nil || IsNil(o.VariableOrder) {
		var ret string
		return ret
	}
	return *o.VariableOrder
}

// GetVariableOrderOk returns a tuple with the VariableOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCdashClassVariablesRow) GetVariableOrderOk() (*string, bool) {
	if o == nil || IsNil(o.VariableOrder) {
		return nil, false
	}
	return o.VariableOrder, true
}

// HasVariableOrder returns a boolean if a field has been set.
func (o *ExportCdashClassVariablesRow) HasVariableOrder() bool {
	if o != nil && !IsNil(o.VariableOrder) {
		return true
	}

	return false
}

// SetVariableOrder gets a reference to the given string and assigns it to the VariableOrder field.
func (o *ExportCdashClassVariablesRow) SetVariableOrder(v string) {
	o.VariableOrder = &v
}

// GetCDASHVariable returns the CDASHVariable field value if set, zero value otherwise.
func (o *ExportCdashClassVariablesRow) GetCDASHVariable() string {
	if o == nil || IsNil(o.CDASHVariable) {
		var ret string
		return ret
	}
	return *o.CDASHVariable
}

// GetCDASHVariableOk returns a tuple with the CDASHVariable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCdashClassVariablesRow) GetCDASHVariableOk() (*string, bool) {
	if o == nil || IsNil(o.CDASHVariable) {
		return nil, false
	}
	return o.CDASHVariable, true
}

// HasCDASHVariable returns a boolean if a field has been set.
func (o *ExportCdashClassVariablesRow) HasCDASHVariable() bool {
	if o != nil && !IsNil(o.CDASHVariable) {
		return true
	}

	return false
}

// SetCDASHVariable gets a reference to the given string and assigns it to the CDASHVariable field.
func (o *ExportCdashClassVariablesRow) SetCDASHVariable(v string) {
	o.CDASHVariable = &v
}

// GetCDASHVariableLabel returns the CDASHVariableLabel field value if set, zero value otherwise.
func (o *ExportCdashClassVariablesRow) GetCDASHVariableLabel() string {
	if o == nil || IsNil(o.CDASHVariableLabel) {
		var ret string
		return ret
	}
	return *o.CDASHVariableLabel
}

// GetCDASHVariableLabelOk returns a tuple with the CDASHVariableLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCdashClassVariablesRow) GetCDASHVariableLabelOk() (*string, bool) {
	if o == nil || IsNil(o.CDASHVariableLabel) {
		return nil, false
	}
	return o.CDASHVariableLabel, true
}

// HasCDASHVariableLabel returns a boolean if a field has been set.
func (o *ExportCdashClassVariablesRow) HasCDASHVariableLabel() bool {
	if o != nil && !IsNil(o.CDASHVariableLabel) {
		return true
	}

	return false
}

// SetCDASHVariableLabel gets a reference to the given string and assigns it to the CDASHVariableLabel field.
func (o *ExportCdashClassVariablesRow) SetCDASHVariableLabel(v string) {
	o.CDASHVariableLabel = &v
}

// GetDRAFTCDASHDefinition returns the DRAFTCDASHDefinition field value if set, zero value otherwise.
func (o *ExportCdashClassVariablesRow) GetDRAFTCDASHDefinition() string {
	if o == nil || IsNil(o.DRAFTCDASHDefinition) {
		var ret string
		return ret
	}
	return *o.DRAFTCDASHDefinition
}

// GetDRAFTCDASHDefinitionOk returns a tuple with the DRAFTCDASHDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCdashClassVariablesRow) GetDRAFTCDASHDefinitionOk() (*string, bool) {
	if o == nil || IsNil(o.DRAFTCDASHDefinition) {
		return nil, false
	}
	return o.DRAFTCDASHDefinition, true
}

// HasDRAFTCDASHDefinition returns a boolean if a field has been set.
func (o *ExportCdashClassVariablesRow) HasDRAFTCDASHDefinition() bool {
	if o != nil && !IsNil(o.DRAFTCDASHDefinition) {
		return true
	}

	return false
}

// SetDRAFTCDASHDefinition gets a reference to the given string and assigns it to the DRAFTCDASHDefinition field.
func (o *ExportCdashClassVariablesRow) SetDRAFTCDASHDefinition(v string) {
	o.DRAFTCDASHDefinition = &v
}

// GetDomainSpecific returns the DomainSpecific field value if set, zero value otherwise.
func (o *ExportCdashClassVariablesRow) GetDomainSpecific() string {
	if o == nil || IsNil(o.DomainSpecific) {
		var ret string
		return ret
	}
	return *o.DomainSpecific
}

// GetDomainSpecificOk returns a tuple with the DomainSpecific field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCdashClassVariablesRow) GetDomainSpecificOk() (*string, bool) {
	if o == nil || IsNil(o.DomainSpecific) {
		return nil, false
	}
	return o.DomainSpecific, true
}

// HasDomainSpecific returns a boolean if a field has been set.
func (o *ExportCdashClassVariablesRow) HasDomainSpecific() bool {
	if o != nil && !IsNil(o.DomainSpecific) {
		return true
	}

	return false
}

// SetDomainSpecific gets a reference to the given string and assigns it to the DomainSpecific field.
func (o *ExportCdashClassVariablesRow) SetDomainSpecific(v string) {
	o.DomainSpecific = &v
}

// GetQuestionText returns the QuestionText field value if set, zero value otherwise.
func (o *ExportCdashClassVariablesRow) GetQuestionText() string {
	if o == nil || IsNil(o.QuestionText) {
		var ret string
		return ret
	}
	return *o.QuestionText
}

// GetQuestionTextOk returns a tuple with the QuestionText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCdashClassVariablesRow) GetQuestionTextOk() (*string, bool) {
	if o == nil || IsNil(o.QuestionText) {
		return nil, false
	}
	return o.QuestionText, true
}

// HasQuestionText returns a boolean if a field has been set.
func (o *ExportCdashClassVariablesRow) HasQuestionText() bool {
	if o != nil && !IsNil(o.QuestionText) {
		return true
	}

	return false
}

// SetQuestionText gets a reference to the given string and assigns it to the QuestionText field.
func (o *ExportCdashClassVariablesRow) SetQuestionText(v string) {
	o.QuestionText = &v
}

// GetPrompt returns the Prompt field value if set, zero value otherwise.
func (o *ExportCdashClassVariablesRow) GetPrompt() string {
	if o == nil || IsNil(o.Prompt) {
		var ret string
		return ret
	}
	return *o.Prompt
}

// GetPromptOk returns a tuple with the Prompt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCdashClassVariablesRow) GetPromptOk() (*string, bool) {
	if o == nil || IsNil(o.Prompt) {
		return nil, false
	}
	return o.Prompt, true
}

// HasPrompt returns a boolean if a field has been set.
func (o *ExportCdashClassVariablesRow) HasPrompt() bool {
	if o != nil && !IsNil(o.Prompt) {
		return true
	}

	return false
}

// SetPrompt gets a reference to the given string and assigns it to the Prompt field.
func (o *ExportCdashClassVariablesRow) SetPrompt(v string) {
	o.Prompt = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ExportCdashClassVariablesRow) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCdashClassVariablesRow) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ExportCdashClassVariablesRow) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ExportCdashClassVariablesRow) SetType(v string) {
	o.Type = &v
}

// GetSDTMTarget returns the SDTMTarget field value if set, zero value otherwise.
func (o *ExportCdashClassVariablesRow) GetSDTMTarget() []string {
	if o == nil || IsNil(o.SDTMTarget) {
		var ret []string
		return ret
	}
	return o.SDTMTarget
}

// GetSDTMTargetOk returns a tuple with the SDTMTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCdashClassVariablesRow) GetSDTMTargetOk() ([]string, bool) {
	if o == nil || IsNil(o.SDTMTarget) {
		return nil, false
	}
	return o.SDTMTarget, true
}

// HasSDTMTarget returns a boolean if a field has been set.
func (o *ExportCdashClassVariablesRow) HasSDTMTarget() bool {
	if o != nil && !IsNil(o.SDTMTarget) {
		return true
	}

	return false
}

// SetSDTMTarget gets a reference to the given []string and assigns it to the SDTMTarget field.
func (o *ExportCdashClassVariablesRow) SetSDTMTarget(v []string) {
	o.SDTMTarget = v
}

// GetMappingInstructions returns the MappingInstructions field value if set, zero value otherwise.
func (o *ExportCdashClassVariablesRow) GetMappingInstructions() string {
	if o == nil || IsNil(o.MappingInstructions) {
		var ret string
		return ret
	}
	return *o.MappingInstructions
}

// GetMappingInstructionsOk returns a tuple with the MappingInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCdashClassVariablesRow) GetMappingInstructionsOk() (*string, bool) {
	if o == nil || IsNil(o.MappingInstructions) {
		return nil, false
	}
	return o.MappingInstructions, true
}

// HasMappingInstructions returns a boolean if a field has been set.
func (o *ExportCdashClassVariablesRow) HasMappingInstructions() bool {
	if o != nil && !IsNil(o.MappingInstructions) {
		return true
	}

	return false
}

// SetMappingInstructions gets a reference to the given string and assigns it to the MappingInstructions field.
func (o *ExportCdashClassVariablesRow) SetMappingInstructions(v string) {
	o.MappingInstructions = &v
}

// GetControlledTerminologyCodelistName returns the ControlledTerminologyCodelistName field value if set, zero value otherwise.
func (o *ExportCdashClassVariablesRow) GetControlledTerminologyCodelistName() string {
	if o == nil || IsNil(o.ControlledTerminologyCodelistName) {
		var ret string
		return ret
	}
	return *o.ControlledTerminologyCodelistName
}

// GetControlledTerminologyCodelistNameOk returns a tuple with the ControlledTerminologyCodelistName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCdashClassVariablesRow) GetControlledTerminologyCodelistNameOk() (*string, bool) {
	if o == nil || IsNil(o.ControlledTerminologyCodelistName) {
		return nil, false
	}
	return o.ControlledTerminologyCodelistName, true
}

// HasControlledTerminologyCodelistName returns a boolean if a field has been set.
func (o *ExportCdashClassVariablesRow) HasControlledTerminologyCodelistName() bool {
	if o != nil && !IsNil(o.ControlledTerminologyCodelistName) {
		return true
	}

	return false
}

// SetControlledTerminologyCodelistName gets a reference to the given string and assigns it to the ControlledTerminologyCodelistName field.
func (o *ExportCdashClassVariablesRow) SetControlledTerminologyCodelistName(v string) {
	o.ControlledTerminologyCodelistName = &v
}

// GetImplementationNotes returns the ImplementationNotes field value if set, zero value otherwise.
func (o *ExportCdashClassVariablesRow) GetImplementationNotes() string {
	if o == nil || IsNil(o.ImplementationNotes) {
		var ret string
		return ret
	}
	return *o.ImplementationNotes
}

// GetImplementationNotesOk returns a tuple with the ImplementationNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCdashClassVariablesRow) GetImplementationNotesOk() (*string, bool) {
	if o == nil || IsNil(o.ImplementationNotes) {
		return nil, false
	}
	return o.ImplementationNotes, true
}

// HasImplementationNotes returns a boolean if a field has been set.
func (o *ExportCdashClassVariablesRow) HasImplementationNotes() bool {
	if o != nil && !IsNil(o.ImplementationNotes) {
		return true
	}

	return false
}

// SetImplementationNotes gets a reference to the given string and assigns it to the ImplementationNotes field.
func (o *ExportCdashClassVariablesRow) SetImplementationNotes(v string) {
	o.ImplementationNotes = &v
}

func (o ExportCdashClassVariablesRow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportCdashClassVariablesRow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	if !IsNil(o.Class) {
		toSerialize["Class"] = o.Class
	}
	if !IsNil(o.Domain) {
		toSerialize["Domain"] = o.Domain
	}
	if !IsNil(o.VariableOrder) {
		toSerialize["Variable Order"] = o.VariableOrder
	}
	if !IsNil(o.CDASHVariable) {
		toSerialize["CDASH Variable"] = o.CDASHVariable
	}
	if !IsNil(o.CDASHVariableLabel) {
		toSerialize["CDASH Variable Label"] = o.CDASHVariableLabel
	}
	if !IsNil(o.DRAFTCDASHDefinition) {
		toSerialize["DRAFT CDASH Definition"] = o.DRAFTCDASHDefinition
	}
	if !IsNil(o.DomainSpecific) {
		toSerialize["Domain Specific"] = o.DomainSpecific
	}
	if !IsNil(o.QuestionText) {
		toSerialize["Question Text"] = o.QuestionText
	}
	if !IsNil(o.Prompt) {
		toSerialize["Prompt"] = o.Prompt
	}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !IsNil(o.SDTMTarget) {
		toSerialize["SDTM Target"] = o.SDTMTarget
	}
	if !IsNil(o.MappingInstructions) {
		toSerialize["Mapping Instructions"] = o.MappingInstructions
	}
	if !IsNil(o.ControlledTerminologyCodelistName) {
		toSerialize["Controlled Terminology Codelist Name"] = o.ControlledTerminologyCodelistName
	}
	if !IsNil(o.ImplementationNotes) {
		toSerialize["Implementation Notes"] = o.ImplementationNotes
	}
	return toSerialize, nil
}

type NullableExportCdashClassVariablesRow struct {
	value *ExportCdashClassVariablesRow
	isSet bool
}

func (v NullableExportCdashClassVariablesRow) Get() *ExportCdashClassVariablesRow {
	return v.value
}

func (v *NullableExportCdashClassVariablesRow) Set(val *ExportCdashClassVariablesRow) {
	v.value = val
	v.isSet = true
}

func (v NullableExportCdashClassVariablesRow) IsSet() bool {
	return v.isSet
}

func (v *NullableExportCdashClassVariablesRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportCdashClassVariablesRow(val *ExportCdashClassVariablesRow) *NullableExportCdashClassVariablesRow {
	return &NullableExportCdashClassVariablesRow{value: val, isSet: true}
}

func (v NullableExportCdashClassVariablesRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportCdashClassVariablesRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



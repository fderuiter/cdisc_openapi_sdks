/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the QrsResponsegroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QrsResponsegroup{}

// QrsResponsegroup struct for QrsResponsegroup
type QrsResponsegroup struct {
	Label *string `json:"label,omitempty"`
	Links *QrsResponsegroupLinks `json:"_links,omitempty"`
}

// NewQrsResponsegroup instantiates a new QrsResponsegroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQrsResponsegroup() *QrsResponsegroup {
	this := QrsResponsegroup{}
	return &this
}

// NewQrsResponsegroupWithDefaults instantiates a new QrsResponsegroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQrsResponsegroupWithDefaults() *QrsResponsegroup {
	this := QrsResponsegroup{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *QrsResponsegroup) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QrsResponsegroup) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *QrsResponsegroup) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *QrsResponsegroup) SetLabel(v string) {
	o.Label = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *QrsResponsegroup) GetLinks() QrsResponsegroupLinks {
	if o == nil || IsNil(o.Links) {
		var ret QrsResponsegroupLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QrsResponsegroup) GetLinksOk() (*QrsResponsegroupLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *QrsResponsegroup) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given QrsResponsegroupLinks and assigns it to the Links field.
func (o *QrsResponsegroup) SetLinks(v QrsResponsegroupLinks) {
	o.Links = &v
}

func (o QrsResponsegroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QrsResponsegroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableQrsResponsegroup struct {
	value *QrsResponsegroup
	isSet bool
}

func (v NullableQrsResponsegroup) Get() *QrsResponsegroup {
	return v.value
}

func (v *NullableQrsResponsegroup) Set(val *QrsResponsegroup) {
	v.value = val
	v.isSet = true
}

func (v NullableQrsResponsegroup) IsSet() bool {
	return v.isSet
}

func (v *NullableQrsResponsegroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQrsResponsegroup(val *QrsResponsegroup) *NullableQrsResponsegroup {
	return &NullableQrsResponsegroup{value: val, isSet: true}
}

func (v NullableQrsResponsegroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQrsResponsegroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



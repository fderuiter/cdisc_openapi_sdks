/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASExportSdtmDatasetVariablesRow
 */
public class OASExportSdtmDatasetVariablesRow implements OAS.MappedProperties {
    /**
     * Get version
     * @return version
     */
    public String version { get; set; }

    /**
     * Get variableOrder
     * @return variableOrder
     */
    public String variableOrder { get; set; }

    /**
     * Get propertyClass
     * @return propertyClass
     */
    public String propertyClass { get; set; }

    /**
     * Get datasetName
     * @return datasetName
     */
    public String datasetName { get; set; }

    /**
     * Get variableName
     * @return variableName
     */
    public String variableName { get; set; }

    /**
     * Get variableLabel
     * @return variableLabel
     */
    public String variableLabel { get; set; }

    /**
     * Get type
     * @return type
     */
    public String type { get; set; }

    /**
     * Get controlledTermsCodelistOrFormat
     * @return controlledTermsCodelistOrFormat
     */
    public String controlledTermsCodelistOrFormat { get; set; }

    /**
     * Get role
     * @return role
     */
    public String role { get; set; }

    /**
     * Get roleDescription
     * @return roleDescription
     */
    public String roleDescription { get; set; }

    /**
     * Get description
     * @return description
     */
    public String description { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Variable Order' => 'variableOrder',
        'Class' => 'propertyClass',
        'Dataset Name' => 'datasetName',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Controlled Terms, Codelist or Format' => 'controlledTermsCodelistOrFormat',
        'Role' => 'role',
        'Role Description' => 'roleDescription',
        'Description' => 'description'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Variable Order' => 'variableOrder',
        'Class' => 'propertyClass',
        'Dataset Name' => 'datasetName',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Controlled Terms, Codelist or Format' => 'controlledTermsCodelistOrFormat',
        'Role' => 'role',
        'Role Description' => 'roleDescription',
        'Description' => 'description'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Variable Order' => 'variableOrder',
        'Class' => 'propertyClass',
        'Dataset Name' => 'datasetName',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Controlled Terms, Codelist or Format' => 'controlledTermsCodelistOrFormat',
        'Role' => 'role',
        'Role Description' => 'roleDescription',
        'Description' => 'description'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Variable Order' => 'variableOrder',
        'Class' => 'propertyClass',
        'Dataset Name' => 'datasetName',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Controlled Terms, Codelist or Format' => 'controlledTermsCodelistOrFormat',
        'Role' => 'role',
        'Role Description' => 'roleDescription',
        'Description' => 'description'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Variable Order' => 'variableOrder',
        'Class' => 'propertyClass',
        'Dataset Name' => 'datasetName',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Controlled Terms, Codelist or Format' => 'controlledTermsCodelistOrFormat',
        'Role' => 'role',
        'Role Description' => 'roleDescription',
        'Description' => 'description'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Variable Order' => 'variableOrder',
        'Class' => 'propertyClass',
        'Dataset Name' => 'datasetName',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Controlled Terms, Codelist or Format' => 'controlledTermsCodelistOrFormat',
        'Role' => 'role',
        'Role Description' => 'roleDescription',
        'Description' => 'description'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Variable Order' => 'variableOrder',
        'Class' => 'propertyClass',
        'Dataset Name' => 'datasetName',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Controlled Terms, Codelist or Format' => 'controlledTermsCodelistOrFormat',
        'Role' => 'role',
        'Role Description' => 'roleDescription',
        'Description' => 'description'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Variable Order' => 'variableOrder',
        'Class' => 'propertyClass',
        'Dataset Name' => 'datasetName',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Controlled Terms, Codelist or Format' => 'controlledTermsCodelistOrFormat',
        'Role' => 'role',
        'Role Description' => 'roleDescription',
        'Description' => 'description'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Variable Order' => 'variableOrder',
        'Class' => 'propertyClass',
        'Dataset Name' => 'datasetName',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Controlled Terms, Codelist or Format' => 'controlledTermsCodelistOrFormat',
        'Role' => 'role',
        'Role Description' => 'roleDescription',
        'Description' => 'description'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Variable Order' => 'variableOrder',
        'Class' => 'propertyClass',
        'Dataset Name' => 'datasetName',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Controlled Terms, Codelist or Format' => 'controlledTermsCodelistOrFormat',
        'Role' => 'role',
        'Role Description' => 'roleDescription',
        'Description' => 'description'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Variable Order' => 'variableOrder',
        'Class' => 'propertyClass',
        'Dataset Name' => 'datasetName',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Controlled Terms, Codelist or Format' => 'controlledTermsCodelistOrFormat',
        'Role' => 'role',
        'Role Description' => 'roleDescription',
        'Description' => 'description'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASExportSdtmDatasetVariablesRow getExample() {
        OASExportSdtmDatasetVariablesRow exportSdtmDatasetVariablesRow = new OASExportSdtmDatasetVariablesRow();
          exportSdtmDatasetVariablesRow.version = '';
          exportSdtmDatasetVariablesRow.variableOrder = '';
          exportSdtmDatasetVariablesRow.propertyClass = '';
          exportSdtmDatasetVariablesRow.datasetName = '';
          exportSdtmDatasetVariablesRow.variableName = '';
          exportSdtmDatasetVariablesRow.variableLabel = '';
          exportSdtmDatasetVariablesRow.type = '';
          exportSdtmDatasetVariablesRow.controlledTermsCodelistOrFormat = '';
          exportSdtmDatasetVariablesRow.role = '';
          exportSdtmDatasetVariablesRow.roleDescription = '';
          exportSdtmDatasetVariablesRow.description = '';
        return exportSdtmDatasetVariablesRow;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASExportSdtmDatasetVariablesRow) {           
            OASExportSdtmDatasetVariablesRow exportSdtmDatasetVariablesRow = (OASExportSdtmDatasetVariablesRow) obj;
            return this.version == exportSdtmDatasetVariablesRow.version
                && this.variableOrder == exportSdtmDatasetVariablesRow.variableOrder
                && this.propertyClass == exportSdtmDatasetVariablesRow.propertyClass
                && this.datasetName == exportSdtmDatasetVariablesRow.datasetName
                && this.variableName == exportSdtmDatasetVariablesRow.variableName
                && this.variableLabel == exportSdtmDatasetVariablesRow.variableLabel
                && this.type == exportSdtmDatasetVariablesRow.type
                && this.controlledTermsCodelistOrFormat == exportSdtmDatasetVariablesRow.controlledTermsCodelistOrFormat
                && this.role == exportSdtmDatasetVariablesRow.role
                && this.roleDescription == exportSdtmDatasetVariablesRow.roleDescription
                && this.description == exportSdtmDatasetVariablesRow.description;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (version == null ? 0 : System.hashCode(version));
        hashCode = (17 * hashCode) + (variableOrder == null ? 0 : System.hashCode(variableOrder));
        hashCode = (17 * hashCode) + (propertyClass == null ? 0 : System.hashCode(propertyClass));
        hashCode = (17 * hashCode) + (datasetName == null ? 0 : System.hashCode(datasetName));
        hashCode = (17 * hashCode) + (variableName == null ? 0 : System.hashCode(variableName));
        hashCode = (17 * hashCode) + (variableLabel == null ? 0 : System.hashCode(variableLabel));
        hashCode = (17 * hashCode) + (type == null ? 0 : System.hashCode(type));
        hashCode = (17 * hashCode) + (controlledTermsCodelistOrFormat == null ? 0 : System.hashCode(controlledTermsCodelistOrFormat));
        hashCode = (17 * hashCode) + (role == null ? 0 : System.hashCode(role));
        hashCode = (17 * hashCode) + (roleDescription == null ? 0 : System.hashCode(roleDescription));
        hashCode = (17 * hashCode) + (description == null ? 0 : System.hashCode(description));
        return hashCode;
    }
}


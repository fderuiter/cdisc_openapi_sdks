/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASCtPackage
 */
public class OASCtPackage implements OAS.MappedProperties {
    /**
     * Get name
     * @return name
     */
    public String name { get; set; }

    /**
     * Get label
     * @return label
     */
    public String label { get; set; }

    /**
     * Get description
     * @return description
     */
    public String description { get; set; }

    /**
     * Get source
     * @return source
     */
    public String source { get; set; }

    /**
     * Get effectiveDate
     * @return effectiveDate
     */
    public String effectiveDate { get; set; }

    /**
     * Get registrationStatus
     * @return registrationStatus
     */
    public String registrationStatus { get; set; }

    /**
     * Get version
     * @return version
     */
    public String version { get; set; }

    /**
     * Get links
     * @return links
     */
    public OASCtPackageLinks links { get; set; }

    /**
     * Get codelists
     * @return codelists
     */
    public List<OASCtPackageCodelists> codelists { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        '_links' => 'links'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public OASCtPackage() {
        codelists = new List<OASCtPackageCodelists>();
    }

    public static OASCtPackage getExample() {
        OASCtPackage ctPackage = new OASCtPackage();
          ctPackage.name = 'SDTM CT 2019-12-20';
          ctPackage.label = 'SDTM Controlled Terminology Package 40 Effective 2019-12-20';
          ctPackage.description = 'CDISC Controlled Terminology for SDTM is the set of CDISC-developed or CDISC-adopted standard expressions (values) used with data items within CDISC-defined SDTM datasets.';
          ctPackage.source = 'SDTM Controlled Terminology developed by the CDISC Terminology Team in collaboration with the National Cancer Institute\'s Enterprise Vocabulary Services (EVS)';
          ctPackage.effectiveDate = '2019-12-20';
          ctPackage.registrationStatus = 'Final';
          ctPackage.version = '2019-12-20';
          ctPackage.links = OASCtPackageLinks.getExample();
          ctPackage.codelists = new List<OASCtPackageCodelists>{OASCtPackageCodelists.getExample()};
        return ctPackage;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASCtPackage) {           
            OASCtPackage ctPackage = (OASCtPackage) obj;
            return this.name == ctPackage.name
                && this.label == ctPackage.label
                && this.description == ctPackage.description
                && this.source == ctPackage.source
                && this.effectiveDate == ctPackage.effectiveDate
                && this.registrationStatus == ctPackage.registrationStatus
                && this.version == ctPackage.version
                && this.links == ctPackage.links
                && this.codelists == ctPackage.codelists;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (name == null ? 0 : System.hashCode(name));
        hashCode = (17 * hashCode) + (label == null ? 0 : System.hashCode(label));
        hashCode = (17 * hashCode) + (description == null ? 0 : System.hashCode(description));
        hashCode = (17 * hashCode) + (source == null ? 0 : System.hashCode(source));
        hashCode = (17 * hashCode) + (effectiveDate == null ? 0 : System.hashCode(effectiveDate));
        hashCode = (17 * hashCode) + (registrationStatus == null ? 0 : System.hashCode(registrationStatus));
        hashCode = (17 * hashCode) + (version == null ? 0 : System.hashCode(version));
        hashCode = (17 * hashCode) + (links == null ? 0 : System.hashCode(links));
        hashCode = (17 * hashCode) + (codelists == null ? 0 : System.hashCode(codelists));
        return hashCode;
    }
}


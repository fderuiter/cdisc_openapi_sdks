/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExportCdashigTable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportCdashigTable{}

// ExportCdashigTable struct for ExportCdashigTable
type ExportCdashigTable struct {
	DomainVariables []ExportCdashigDomainVariablesRow `json:"domain-variables,omitempty"`
	ScenarioVariables []ExportCdashigScenarioVariablesRow `json:"scenario-variables,omitempty"`
}

// NewExportCdashigTable instantiates a new ExportCdashigTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportCdashigTable() *ExportCdashigTable {
	this := ExportCdashigTable{}
	return &this
}

// NewExportCdashigTableWithDefaults instantiates a new ExportCdashigTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportCdashigTableWithDefaults() *ExportCdashigTable {
	this := ExportCdashigTable{}
	return &this
}

// GetDomainVariables returns the DomainVariables field value if set, zero value otherwise.
func (o *ExportCdashigTable) GetDomainVariables() []ExportCdashigDomainVariablesRow {
	if o == nil || IsNil(o.DomainVariables) {
		var ret []ExportCdashigDomainVariablesRow
		return ret
	}
	return o.DomainVariables
}

// GetDomainVariablesOk returns a tuple with the DomainVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCdashigTable) GetDomainVariablesOk() ([]ExportCdashigDomainVariablesRow, bool) {
	if o == nil || IsNil(o.DomainVariables) {
		return nil, false
	}
	return o.DomainVariables, true
}

// HasDomainVariables returns a boolean if a field has been set.
func (o *ExportCdashigTable) HasDomainVariables() bool {
	if o != nil && !IsNil(o.DomainVariables) {
		return true
	}

	return false
}

// SetDomainVariables gets a reference to the given []ExportCdashigDomainVariablesRow and assigns it to the DomainVariables field.
func (o *ExportCdashigTable) SetDomainVariables(v []ExportCdashigDomainVariablesRow) {
	o.DomainVariables = v
}

// GetScenarioVariables returns the ScenarioVariables field value if set, zero value otherwise.
func (o *ExportCdashigTable) GetScenarioVariables() []ExportCdashigScenarioVariablesRow {
	if o == nil || IsNil(o.ScenarioVariables) {
		var ret []ExportCdashigScenarioVariablesRow
		return ret
	}
	return o.ScenarioVariables
}

// GetScenarioVariablesOk returns a tuple with the ScenarioVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCdashigTable) GetScenarioVariablesOk() ([]ExportCdashigScenarioVariablesRow, bool) {
	if o == nil || IsNil(o.ScenarioVariables) {
		return nil, false
	}
	return o.ScenarioVariables, true
}

// HasScenarioVariables returns a boolean if a field has been set.
func (o *ExportCdashigTable) HasScenarioVariables() bool {
	if o != nil && !IsNil(o.ScenarioVariables) {
		return true
	}

	return false
}

// SetScenarioVariables gets a reference to the given []ExportCdashigScenarioVariablesRow and assigns it to the ScenarioVariables field.
func (o *ExportCdashigTable) SetScenarioVariables(v []ExportCdashigScenarioVariablesRow) {
	o.ScenarioVariables = v
}

func (o ExportCdashigTable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportCdashigTable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DomainVariables) {
		toSerialize["domain-variables"] = o.DomainVariables
	}
	if !IsNil(o.ScenarioVariables) {
		toSerialize["scenario-variables"] = o.ScenarioVariables
	}
	return toSerialize, nil
}

type NullableExportCdashigTable struct {
	value *ExportCdashigTable
	isSet bool
}

func (v NullableExportCdashigTable) Get() *ExportCdashigTable {
	return v.value
}

func (v *NullableExportCdashigTable) Set(val *ExportCdashigTable) {
	v.value = val
	v.isSet = true
}

func (v NullableExportCdashigTable) IsSet() bool {
	return v.isSet
}

func (v *NullableExportCdashigTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportCdashigTable(val *ExportCdashigTable) *NullableExportCdashigTable {
	return &NullableExportCdashigTable{value: val, isSet: true}
}

func (v NullableExportCdashigTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportCdashigTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



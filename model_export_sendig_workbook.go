/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExportSendigWorkbook type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportSendigWorkbook{}

// ExportSendigWorkbook struct for ExportSendigWorkbook
type ExportSendigWorkbook struct {
	Variables []ExportSendigVariablesRow `json:"variables,omitempty"`
	Datasets []ExportSendigDatasetsRow `json:"datasets,omitempty"`
}

// NewExportSendigWorkbook instantiates a new ExportSendigWorkbook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportSendigWorkbook() *ExportSendigWorkbook {
	this := ExportSendigWorkbook{}
	return &this
}

// NewExportSendigWorkbookWithDefaults instantiates a new ExportSendigWorkbook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportSendigWorkbookWithDefaults() *ExportSendigWorkbook {
	this := ExportSendigWorkbook{}
	return &this
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *ExportSendigWorkbook) GetVariables() []ExportSendigVariablesRow {
	if o == nil || IsNil(o.Variables) {
		var ret []ExportSendigVariablesRow
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportSendigWorkbook) GetVariablesOk() ([]ExportSendigVariablesRow, bool) {
	if o == nil || IsNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *ExportSendigWorkbook) HasVariables() bool {
	if o != nil && !IsNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []ExportSendigVariablesRow and assigns it to the Variables field.
func (o *ExportSendigWorkbook) SetVariables(v []ExportSendigVariablesRow) {
	o.Variables = v
}

// GetDatasets returns the Datasets field value if set, zero value otherwise.
func (o *ExportSendigWorkbook) GetDatasets() []ExportSendigDatasetsRow {
	if o == nil || IsNil(o.Datasets) {
		var ret []ExportSendigDatasetsRow
		return ret
	}
	return o.Datasets
}

// GetDatasetsOk returns a tuple with the Datasets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportSendigWorkbook) GetDatasetsOk() ([]ExportSendigDatasetsRow, bool) {
	if o == nil || IsNil(o.Datasets) {
		return nil, false
	}
	return o.Datasets, true
}

// HasDatasets returns a boolean if a field has been set.
func (o *ExportSendigWorkbook) HasDatasets() bool {
	if o != nil && !IsNil(o.Datasets) {
		return true
	}

	return false
}

// SetDatasets gets a reference to the given []ExportSendigDatasetsRow and assigns it to the Datasets field.
func (o *ExportSendigWorkbook) SetDatasets(v []ExportSendigDatasetsRow) {
	o.Datasets = v
}

func (o ExportSendigWorkbook) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportSendigWorkbook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	if !IsNil(o.Datasets) {
		toSerialize["datasets"] = o.Datasets
	}
	return toSerialize, nil
}

type NullableExportSendigWorkbook struct {
	value *ExportSendigWorkbook
	isSet bool
}

func (v NullableExportSendigWorkbook) Get() *ExportSendigWorkbook {
	return v.value
}

func (v *NullableExportSendigWorkbook) Set(val *ExportSendigWorkbook) {
	v.value = val
	v.isSet = true
}

func (v NullableExportSendigWorkbook) IsSet() bool {
	return v.isSet
}

func (v *NullableExportSendigWorkbook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportSendigWorkbook(val *ExportSendigWorkbook) *NullableExportSendigWorkbook {
	return &NullableExportSendigWorkbook{value: val, isSet: true}
}

func (v NullableExportSendigWorkbook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportSendigWorkbook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SearchesAPIService SearchesAPI service
type SearchesAPIService service

type ApiMdrSearchGetRequest struct {
	ctx context.Context
	ApiService *SearchesAPIService
	q *string
	highlight *string
	start *float32
	pageSize *float32
	class *string
	codelist *string
	conceptId *string
	core *string
	dataStructure *string
	datasetStructure *string
	definition *string
	description *string
	domain *string
	effectiveDate *string
	extensible *string
	href *string
	label *string
	measureType *string
	name *string
	preferredTerm *string
	product *string
	productGroup *string
	registrationStatus *string
	roleDescription *string
	sdtmTarget *string
	simpleDatatype *string
	submissionValue *string
	synonyms *string
	type_ *string
	uiHref *string
	valueDomain *string
	variableSet *string
	version *string
}

// Search Term Expression
func (r ApiMdrSearchGetRequest) Q(q string) ApiMdrSearchGetRequest {
	r.q = &q
	return r
}

// Search Highlight Expression
func (r ApiMdrSearchGetRequest) Highlight(highlight string) ApiMdrSearchGetRequest {
	r.highlight = &highlight
	return r
}

// Initial Search Result Index
func (r ApiMdrSearchGetRequest) Start(start float32) ApiMdrSearchGetRequest {
	r.start = &start
	return r
}

// Number of Search Results to Return
func (r ApiMdrSearchGetRequest) PageSize(pageSize float32) ApiMdrSearchGetRequest {
	r.pageSize = &pageSize
	return r
}

// Limit Search by Setting Scope to Class
func (r ApiMdrSearchGetRequest) Class(class string) ApiMdrSearchGetRequest {
	r.class = &class
	return r
}

// Limit Search by Setting Scope to Codelist
func (r ApiMdrSearchGetRequest) Codelist(codelist string) ApiMdrSearchGetRequest {
	r.codelist = &codelist
	return r
}

// Limit Search by Setting Scope to Concept ID
func (r ApiMdrSearchGetRequest) ConceptId(conceptId string) ApiMdrSearchGetRequest {
	r.conceptId = &conceptId
	return r
}

// Limit Search by Setting Scope to Core
func (r ApiMdrSearchGetRequest) Core(core string) ApiMdrSearchGetRequest {
	r.core = &core
	return r
}

// Limit Search by Setting Scope to Data Structure
func (r ApiMdrSearchGetRequest) DataStructure(dataStructure string) ApiMdrSearchGetRequest {
	r.dataStructure = &dataStructure
	return r
}

// Limit Search by Setting Scope to Dataset Structure
func (r ApiMdrSearchGetRequest) DatasetStructure(datasetStructure string) ApiMdrSearchGetRequest {
	r.datasetStructure = &datasetStructure
	return r
}

// Limit Search by Setting Scope to Definition
func (r ApiMdrSearchGetRequest) Definition(definition string) ApiMdrSearchGetRequest {
	r.definition = &definition
	return r
}

// Limit Search by Setting Scope to Description
func (r ApiMdrSearchGetRequest) Description(description string) ApiMdrSearchGetRequest {
	r.description = &description
	return r
}

// Limit Search by Setting Scope to Domain
func (r ApiMdrSearchGetRequest) Domain(domain string) ApiMdrSearchGetRequest {
	r.domain = &domain
	return r
}

// Limit Search by Setting Scope to Effective Date
func (r ApiMdrSearchGetRequest) EffectiveDate(effectiveDate string) ApiMdrSearchGetRequest {
	r.effectiveDate = &effectiveDate
	return r
}

// Limit Search by Setting Scope to Extensible
func (r ApiMdrSearchGetRequest) Extensible(extensible string) ApiMdrSearchGetRequest {
	r.extensible = &extensible
	return r
}

// Limit Search by Setting Scope to Href
func (r ApiMdrSearchGetRequest) Href(href string) ApiMdrSearchGetRequest {
	r.href = &href
	return r
}

// Limit Search by Setting Scope to Label
func (r ApiMdrSearchGetRequest) Label(label string) ApiMdrSearchGetRequest {
	r.label = &label
	return r
}

// SLimit Search by Setting Scope to Measure Type
func (r ApiMdrSearchGetRequest) MeasureType(measureType string) ApiMdrSearchGetRequest {
	r.measureType = &measureType
	return r
}

// Limit Search by Setting Scope to Name
func (r ApiMdrSearchGetRequest) Name(name string) ApiMdrSearchGetRequest {
	r.name = &name
	return r
}

// Limit Search by Setting Scope to Preferred Term
func (r ApiMdrSearchGetRequest) PreferredTerm(preferredTerm string) ApiMdrSearchGetRequest {
	r.preferredTerm = &preferredTerm
	return r
}

// Limit Search by Setting Scope to Product
func (r ApiMdrSearchGetRequest) Product(product string) ApiMdrSearchGetRequest {
	r.product = &product
	return r
}

// Limit Search by Setting Scope to Product Group
func (r ApiMdrSearchGetRequest) ProductGroup(productGroup string) ApiMdrSearchGetRequest {
	r.productGroup = &productGroup
	return r
}

// Limit Search by Setting Scope to Registration Status
func (r ApiMdrSearchGetRequest) RegistrationStatus(registrationStatus string) ApiMdrSearchGetRequest {
	r.registrationStatus = &registrationStatus
	return r
}

// Limit Search by Setting Scope to Role Description
func (r ApiMdrSearchGetRequest) RoleDescription(roleDescription string) ApiMdrSearchGetRequest {
	r.roleDescription = &roleDescription
	return r
}

// Limit Search by Setting Scope to SDTM Target
func (r ApiMdrSearchGetRequest) SdtmTarget(sdtmTarget string) ApiMdrSearchGetRequest {
	r.sdtmTarget = &sdtmTarget
	return r
}

// Limit Search by Setting Scope to Simple Datatype
func (r ApiMdrSearchGetRequest) SimpleDatatype(simpleDatatype string) ApiMdrSearchGetRequest {
	r.simpleDatatype = &simpleDatatype
	return r
}

// Limit Search by Setting Scope to Submission Value
func (r ApiMdrSearchGetRequest) SubmissionValue(submissionValue string) ApiMdrSearchGetRequest {
	r.submissionValue = &submissionValue
	return r
}

// Limit Search by Setting Scope to Synonyms
func (r ApiMdrSearchGetRequest) Synonyms(synonyms string) ApiMdrSearchGetRequest {
	r.synonyms = &synonyms
	return r
}

// Limit Search by Setting Scope to Type
func (r ApiMdrSearchGetRequest) Type_(type_ string) ApiMdrSearchGetRequest {
	r.type_ = &type_
	return r
}

// Limit Search by Setting Scope to UI Href
func (r ApiMdrSearchGetRequest) UiHref(uiHref string) ApiMdrSearchGetRequest {
	r.uiHref = &uiHref
	return r
}

// Limit Search by Setting Scope to Value Domain
func (r ApiMdrSearchGetRequest) ValueDomain(valueDomain string) ApiMdrSearchGetRequest {
	r.valueDomain = &valueDomain
	return r
}

// Limit Search by Setting Scope to Variable Set
func (r ApiMdrSearchGetRequest) VariableSet(variableSet string) ApiMdrSearchGetRequest {
	r.variableSet = &variableSet
	return r
}

// Limit Search by Setting Scope to Version
func (r ApiMdrSearchGetRequest) Version(version string) ApiMdrSearchGetRequest {
	r.version = &version
	return r
}

func (r ApiMdrSearchGetRequest) Execute() (*DefaultSearchResponse, *http.Response, error) {
	return r.ApiService.MdrSearchGetExecute(r)
}

/*
MdrSearchGet Method for MdrSearchGet

Get Search Results Across CDISC Library

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMdrSearchGetRequest
*/
func (a *SearchesAPIService) MdrSearchGet(ctx context.Context) ApiMdrSearchGetRequest {
	return ApiMdrSearchGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSearchResponse
func (a *SearchesAPIService) MdrSearchGetExecute(r ApiMdrSearchGetRequest) (*DefaultSearchResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSearchResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchesAPIService.MdrSearchGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/mdr/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.q == nil {
		return localVarReturnValue, nil, reportError("q is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "q", r.q, "form", "")
	if r.highlight != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "highlight", r.highlight, "form", "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "form", "")
	} else {
		var defaultValue float32 = 0
		r.start = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	} else {
		var defaultValue float32 = 100
		r.pageSize = &defaultValue
	}
	if r.class != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "class", r.class, "form", "")
	}
	if r.codelist != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "codelist", r.codelist, "form", "")
	}
	if r.conceptId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conceptId", r.conceptId, "form", "")
	}
	if r.core != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "core", r.core, "form", "")
	}
	if r.dataStructure != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dataStructure", r.dataStructure, "form", "")
	}
	if r.datasetStructure != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "datasetStructure", r.datasetStructure, "form", "")
	}
	if r.definition != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "definition", r.definition, "form", "")
	}
	if r.description != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "description", r.description, "form", "")
	}
	if r.domain != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "domain", r.domain, "form", "")
	}
	if r.effectiveDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "effectiveDate", r.effectiveDate, "form", "")
	}
	if r.extensible != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "extensible", r.extensible, "form", "")
	}
	if r.href != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "href", r.href, "form", "")
	}
	if r.label != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "label", r.label, "form", "")
	}
	if r.measureType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "measureType", r.measureType, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.preferredTerm != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "preferredTerm", r.preferredTerm, "form", "")
	}
	if r.product != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "product", r.product, "form", "")
	}
	if r.productGroup != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "productGroup", r.productGroup, "form", "")
	}
	if r.registrationStatus != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "registrationStatus", r.registrationStatus, "form", "")
	}
	if r.roleDescription != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "roleDescription", r.roleDescription, "form", "")
	}
	if r.sdtmTarget != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sdtmTarget", r.sdtmTarget, "form", "")
	}
	if r.simpleDatatype != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "simpleDatatype", r.simpleDatatype, "form", "")
	}
	if r.submissionValue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "submissionValue", r.submissionValue, "form", "")
	}
	if r.synonyms != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "synonyms", r.synonyms, "form", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "form", "")
	}
	if r.uiHref != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "uiHref", r.uiHref, "form", "")
	}
	if r.valueDomain != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "valueDomain", r.valueDomain, "form", "")
	}
	if r.variableSet != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variableSet", r.variableSet, "form", "")
	}
	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v DefaultErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v DefaultErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v DefaultErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v DefaultErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v DefaultErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 406 {
			var v DefaultErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v DefaultErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v DefaultErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 504 {
			var v DefaultErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMdrSearchScopesGetRequest struct {
	ctx context.Context
	ApiService *SearchesAPIService
}

func (r ApiMdrSearchScopesGetRequest) Execute() (*MdrSearchScopesGet200Response, *http.Response, error) {
	return r.ApiService.MdrSearchScopesGetExecute(r)
}

/*
MdrSearchScopesGet Method for MdrSearchScopesGet

Get Search Results Across CDISC Library

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMdrSearchScopesGetRequest
*/
func (a *SearchesAPIService) MdrSearchScopesGet(ctx context.Context) ApiMdrSearchScopesGetRequest {
	return ApiMdrSearchScopesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MdrSearchScopesGet200Response
func (a *SearchesAPIService) MdrSearchScopesGetExecute(r ApiMdrSearchScopesGetRequest) (*MdrSearchScopesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MdrSearchScopesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchesAPIService.MdrSearchScopesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/mdr/search/scopes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMdrSearchScopesScopeGetRequest struct {
	ctx context.Context
	ApiService *SearchesAPIService
	scope DefaultSearchScopes
}

func (r ApiMdrSearchScopesScopeGetRequest) Execute() (*ScopeValues, *http.Response, error) {
	return r.ApiService.MdrSearchScopesScopeGetExecute(r)
}

/*
MdrSearchScopesScopeGet Method for MdrSearchScopesScopeGet

Get Search Results Limited to Scope

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param scope Search Scope
 @return ApiMdrSearchScopesScopeGetRequest
*/
func (a *SearchesAPIService) MdrSearchScopesScopeGet(ctx context.Context, scope DefaultSearchScopes) ApiMdrSearchScopesScopeGetRequest {
	return ApiMdrSearchScopesScopeGetRequest{
		ApiService: a,
		ctx: ctx,
		scope: scope,
	}
}

// Execute executes the request
//  @return ScopeValues
func (a *SearchesAPIService) MdrSearchScopesScopeGetExecute(r ApiMdrSearchScopesScopeGetRequest) (*ScopeValues, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScopeValues
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchesAPIService.MdrSearchScopesScopeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/mdr/search/scopes/{scope}"
	localVarPath = strings.Replace(localVarPath, "{"+"scope"+"}", url.PathEscape(parameterValueToString(r.scope, "scope")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  SdtmigDatasetVariables,
  SdtmigProduct,
  SdtmigClasses,
  SdtmigClassDatasets,
  SdtmigDatasetVariable,
  SdtmigDatasets,
  SdtmigClass,
  RootSdtmigDatasetVariable,
  SdtmigDataset,
} from './models';

/**
 * mdrRootSdtmigDatasetsDatasetVariablesVarGet - parameters interface
 */
export interface IMdrRootSdtmigDatasetsDatasetVariablesVarGetParams {
  dataset: string;
  _var: string;
}

/**
 * mdrSdtmigVersionClassesClassDatasetsGet - parameters interface
 */
export interface IMdrSdtmigVersionClassesClassDatasetsGetParams {
  version: string;
  _class: string;
}

/**
 * mdrSdtmigVersionClassesClassGet - parameters interface
 */
export interface IMdrSdtmigVersionClassesClassGetParams {
  version: string;
  _class: string;
}

/**
 * mdrSdtmigVersionClassesGet - parameters interface
 */
export interface IMdrSdtmigVersionClassesGetParams {
  version: string;
}

/**
 * mdrSdtmigVersionDatasetsDatasetGet - parameters interface
 */
export interface IMdrSdtmigVersionDatasetsDatasetGetParams {
  version: string;
  dataset: string;
}

/**
 * mdrSdtmigVersionDatasetsDatasetVariablesGet - parameters interface
 */
export interface IMdrSdtmigVersionDatasetsDatasetVariablesGetParams {
  version: string;
  dataset: string;
}

/**
 * mdrSdtmigVersionDatasetsDatasetVariablesVarGet - parameters interface
 */
export interface IMdrSdtmigVersionDatasetsDatasetVariablesVarGetParams {
  version: string;
  dataset: string;
  _var: string;
}

/**
 * mdrSdtmigVersionDatasetsGet - parameters interface
 */
export interface IMdrSdtmigVersionDatasetsGetParams {
  version: string;
}

/**
 * mdrSdtmigVersionGet - parameters interface
 */
export interface IMdrSdtmigVersionGetParams {
  version: string;
}

/**
 * SDTMImplementationGuideSDTMIGApi - API class
 */
@autoinject()
export class SDTMImplementationGuideSDTMIGApi extends Api {

  /**
   * Creates a new SDTMImplementationGuideSDTMIGApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get Root SDTMIG Dataset Variable
   * @param params.dataset SDTMIG Dataset Identifier
   * @param params._var SDTMIG Variable Identifier
   */
  async mdrRootSdtmigDatasetsDatasetVariablesVarGet(params: IMdrRootSdtmigDatasetsDatasetVariablesVarGetParams): Promise<RootSdtmigDatasetVariable> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrRootSdtmigDatasetsDatasetVariablesVarGet', params, 'dataset');
    this.ensureParamIsSet('mdrRootSdtmigDatasetsDatasetVariablesVarGet', params, '_var');

    // Create URL to call
    const url = `${this.basePath}/mdr/root/sdtmig/datasets/{dataset}/variables/{var}`
      .replace(`{${'dataset'}}`, encodeURIComponent(`${params['dataset']}`))
      .replace(`{${'var'}}`, encodeURIComponent(`${params['_var']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SDTMIG Class Dataset List
   * @param params.version CDISC Library Product Version
   * @param params._class SDTMIG Class Identifier
   */
  async mdrSdtmigVersionClassesClassDatasetsGet(params: IMdrSdtmigVersionClassesClassDatasetsGetParams): Promise<SdtmigClassDatasets> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSdtmigVersionClassesClassDatasetsGet', params, 'version');
    this.ensureParamIsSet('mdrSdtmigVersionClassesClassDatasetsGet', params, '_class');

    // Create URL to call
    const url = `${this.basePath}/mdr/sdtmig/{version}/classes/{class}/datasets`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'class'}}`, encodeURIComponent(`${params['_class']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SDTMIG Class
   * @param params.version CDISC Library Product Version
   * @param params._class SDTMIG Class Identifier
   */
  async mdrSdtmigVersionClassesClassGet(params: IMdrSdtmigVersionClassesClassGetParams): Promise<SdtmigClass> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSdtmigVersionClassesClassGet', params, 'version');
    this.ensureParamIsSet('mdrSdtmigVersionClassesClassGet', params, '_class');

    // Create URL to call
    const url = `${this.basePath}/mdr/sdtmig/{version}/classes/{class}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'class'}}`, encodeURIComponent(`${params['_class']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SDTMIG Class List
   * @param params.version CDISC Library Product Version
   */
  async mdrSdtmigVersionClassesGet(params: IMdrSdtmigVersionClassesGetParams): Promise<SdtmigClasses> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSdtmigVersionClassesGet', params, 'version');

    // Create URL to call
    const url = `${this.basePath}/mdr/sdtmig/{version}/classes`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SDTMIG Dataset
   * @param params.version CDISC Library Product Version
   * @param params.dataset SDTMIG Dataset Identifier
   */
  async mdrSdtmigVersionDatasetsDatasetGet(params: IMdrSdtmigVersionDatasetsDatasetGetParams): Promise<SdtmigDataset> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSdtmigVersionDatasetsDatasetGet', params, 'version');
    this.ensureParamIsSet('mdrSdtmigVersionDatasetsDatasetGet', params, 'dataset');

    // Create URL to call
    const url = `${this.basePath}/mdr/sdtmig/{version}/datasets/{dataset}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'dataset'}}`, encodeURIComponent(`${params['dataset']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SDTMIG Dataset Variable List
   * @param params.version CDISC Library Product Version
   * @param params.dataset SDTMIG Dataset Identifier
   */
  async mdrSdtmigVersionDatasetsDatasetVariablesGet(params: IMdrSdtmigVersionDatasetsDatasetVariablesGetParams): Promise<SdtmigDatasetVariables> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSdtmigVersionDatasetsDatasetVariablesGet', params, 'version');
    this.ensureParamIsSet('mdrSdtmigVersionDatasetsDatasetVariablesGet', params, 'dataset');

    // Create URL to call
    const url = `${this.basePath}/mdr/sdtmig/{version}/datasets/{dataset}/variables`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'dataset'}}`, encodeURIComponent(`${params['dataset']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SDTMIG Dataset Variable
   * @param params.version CDISC Library Product Version
   * @param params.dataset SDTMIG Dataset Identifier
   * @param params._var SDTMIG Variable Identifier
   */
  async mdrSdtmigVersionDatasetsDatasetVariablesVarGet(params: IMdrSdtmigVersionDatasetsDatasetVariablesVarGetParams): Promise<SdtmigDatasetVariable> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSdtmigVersionDatasetsDatasetVariablesVarGet', params, 'version');
    this.ensureParamIsSet('mdrSdtmigVersionDatasetsDatasetVariablesVarGet', params, 'dataset');
    this.ensureParamIsSet('mdrSdtmigVersionDatasetsDatasetVariablesVarGet', params, '_var');

    // Create URL to call
    const url = `${this.basePath}/mdr/sdtmig/{version}/datasets/{dataset}/variables/{var}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'dataset'}}`, encodeURIComponent(`${params['dataset']}`))
      .replace(`{${'var'}}`, encodeURIComponent(`${params['_var']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SDTMIG Dataset List
   * @param params.version CDISC Library Product Version
   */
  async mdrSdtmigVersionDatasetsGet(params: IMdrSdtmigVersionDatasetsGetParams): Promise<SdtmigDatasets> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSdtmigVersionDatasetsGet', params, 'version');

    // Create URL to call
    const url = `${this.basePath}/mdr/sdtmig/{version}/datasets`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SDTMIG product
   * @param params.version CDISC Library Product Version
   */
  async mdrSdtmigVersionGet(params: IMdrSdtmigVersionGetParams): Promise<SdtmigProduct> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSdtmigVersionGet', params, 'version');

    // Create URL to call
    const url = `${this.basePath}/mdr/sdtmig/{version}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}


# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class ExportQrsWorkbookItemsRow(BaseModel):
    """
    ExportQrsWorkbookItemsRow
    """
    item_sequence: Optional[StrictStr] = Field(default=None, alias="Item Sequence")
    test_name: Optional[StrictStr] = Field(default=None, alias="Test Name")
    item_text: Optional[StrictStr] = Field(default=None, alias="Item Text")
    tests_codelist_c_code: Optional[StrictStr] = Field(default=None, alias="Test's Codelist C-Code")
    tests_term_c_code: Optional[StrictStr] = Field(default=None, alias="Test's Term C-Code")
    test_codes_codelist_c_code: Optional[StrictStr] = Field(default=None, alias="Test Code's Codelist C-Code")
    test_codes_term_c_code: Optional[StrictStr] = Field(default=None, alias="Test Code's Term C-Code")
    subcategorys_codelist_c_code: Optional[StrictStr] = Field(default=None, alias="Subcategory's Codelist C-Code")
    subcategorys_term_c_code: Optional[StrictStr] = Field(default=None, alias="Subcategory's Term C-Code")
    evaluators_codelist_c_code: Optional[StrictStr] = Field(default=None, alias="Evaluator's Codelist C-Code")
    evaluators_term_c_code: Optional[StrictStr] = Field(default=None, alias="Evaluator's Term C-Code")
    free_form_responses_datatype: Optional[StrictStr] = Field(default=None, alias="Free-form Response's Datatype")
    response_group: Optional[StrictStr] = Field(default=None, alias="Response Group")
    __properties = ["Item Sequence", "Test Name", "Item Text", "Test&#39;s Codelist C-Code", "Test&#39;s Term C-Code", "Test Code&#39;s Codelist C-Code", "Test Code&#39;s Term C-Code", "Subcategory&#39;s Codelist C-Code", "Subcategory&#39;s Term C-Code", "Evaluator&#39;s Codelist C-Code", "Evaluator&#39;s Term C-Code", "Free-form Response&#39;s Datatype", "Response Group"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExportQrsWorkbookItemsRow:
        """Create an instance of ExportQrsWorkbookItemsRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExportQrsWorkbookItemsRow:
        """Create an instance of ExportQrsWorkbookItemsRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExportQrsWorkbookItemsRow.parse_obj(obj)

        _obj = ExportQrsWorkbookItemsRow.parse_obj({
            "item_sequence": obj.get("Item Sequence"),
            "test_name": obj.get("Test Name"),
            "item_text": obj.get("Item Text"),
            "tests_codelist_c_code": obj.get("Test's Codelist C-Code"),
            "tests_term_c_code": obj.get("Test's Term C-Code"),
            "test_codes_codelist_c_code": obj.get("Test Code's Codelist C-Code"),
            "test_codes_term_c_code": obj.get("Test Code's Term C-Code"),
            "subcategorys_codelist_c_code": obj.get("Subcategory's Codelist C-Code"),
            "subcategorys_term_c_code": obj.get("Subcategory's Term C-Code"),
            "evaluators_codelist_c_code": obj.get("Evaluator's Codelist C-Code"),
            "evaluators_term_c_code": obj.get("Evaluator's Term C-Code"),
            "free_form_responses_datatype": obj.get("Free-form Response's Datatype"),
            "response_group": obj.get("Response Group")
        })
        return _obj



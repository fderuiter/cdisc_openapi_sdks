# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.ct_term_links import CtTermLinks

class CtTerm(BaseModel):
    """
    CtTerm
    """
    concept_id: Optional[StrictStr] = Field(default=None, alias="conceptId")
    submission_value: Optional[StrictStr] = Field(default=None, alias="submissionValue")
    definition: Optional[StrictStr] = None
    preferred_term: Optional[StrictStr] = Field(default=None, alias="preferredTerm")
    synonyms: Optional[conlist(StrictStr)] = None
    links: Optional[CtTermLinks] = Field(default=None, alias="_links")
    __properties = ["conceptId", "submissionValue", "definition", "preferredTerm", "synonyms", "_links"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CtTerm:
        """Create an instance of CtTerm from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CtTerm:
        """Create an instance of CtTerm from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CtTerm.parse_obj(obj)

        _obj = CtTerm.parse_obj({
            "concept_id": obj.get("conceptId"),
            "submission_value": obj.get("submissionValue"),
            "definition": obj.get("definition"),
            "preferred_term": obj.get("preferredTerm"),
            "synonyms": obj.get("synonyms"),
            "links": CtTermLinks.from_dict(obj.get("_links")) if obj.get("_links") is not None else None
        })
        return _obj



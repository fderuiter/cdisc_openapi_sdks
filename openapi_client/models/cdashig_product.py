# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.cdashig_class import CdashigClass
from openapi_client.models.cdashig_product_links import CdashigProductLinks

class CdashigProduct(BaseModel):
    """
    CdashigProduct
    """
    name: Optional[StrictStr] = None
    label: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    source: Optional[StrictStr] = None
    effective_date: Optional[StrictStr] = Field(default=None, alias="effectiveDate")
    registration_status: Optional[StrictStr] = Field(default=None, alias="registrationStatus")
    version: Optional[StrictStr] = None
    links: Optional[CdashigProductLinks] = Field(default=None, alias="_links")
    classes: Optional[conlist(CdashigClass)] = None
    __properties = ["name", "label", "description", "source", "effectiveDate", "registrationStatus", "version", "_links", "classes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CdashigProduct:
        """Create an instance of CdashigProduct from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in classes (list)
        _items = []
        if self.classes:
            for _item in self.classes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['classes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CdashigProduct:
        """Create an instance of CdashigProduct from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CdashigProduct.parse_obj(obj)

        _obj = CdashigProduct.parse_obj({
            "name": obj.get("name"),
            "label": obj.get("label"),
            "description": obj.get("description"),
            "source": obj.get("source"),
            "effective_date": obj.get("effectiveDate"),
            "registration_status": obj.get("registrationStatus"),
            "version": obj.get("version"),
            "links": CdashigProductLinks.from_dict(obj.get("_links")) if obj.get("_links") is not None else None,
            "classes": [CdashigClass.from_dict(_item) for _item in obj.get("classes")] if obj.get("classes") is not None else None
        })
        return _obj



# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from openapi_client.models.export_sdtm_class_variables_row import ExportSdtmClassVariablesRow
from openapi_client.models.export_sdtm_dataset_variables_row import ExportSdtmDatasetVariablesRow

class ExportSdtmVariablesTable(BaseModel):
    """
    ExportSdtmVariablesTable
    """
    class_variables: Optional[conlist(ExportSdtmClassVariablesRow)] = Field(default=None, alias="class-variables")
    dataset_variables: Optional[conlist(ExportSdtmDatasetVariablesRow)] = Field(default=None, alias="dataset-variables")
    __properties = ["class-variables", "dataset-variables"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExportSdtmVariablesTable:
        """Create an instance of ExportSdtmVariablesTable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in class_variables (list)
        _items = []
        if self.class_variables:
            for _item in self.class_variables:
                if _item:
                    _items.append(_item.to_dict())
            _dict['class-variables'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dataset_variables (list)
        _items = []
        if self.dataset_variables:
            for _item in self.dataset_variables:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dataset-variables'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExportSdtmVariablesTable:
        """Create an instance of ExportSdtmVariablesTable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExportSdtmVariablesTable.parse_obj(obj)

        _obj = ExportSdtmVariablesTable.parse_obj({
            "class_variables": [ExportSdtmClassVariablesRow.from_dict(_item) for _item in obj.get("class-variables")] if obj.get("class-variables") is not None else None,
            "dataset_variables": [ExportSdtmDatasetVariablesRow.from_dict(_item) for _item in obj.get("dataset-variables")] if obj.get("dataset-variables") is not None else None
        })
        return _obj



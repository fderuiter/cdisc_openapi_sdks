# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cdashig_class_links import CdashigClassLinks
from openapi_client.models.cdashig_domain import CdashigDomain
from openapi_client.models.cdashig_scenario import CdashigScenario
from typing import Optional, Set
from typing_extensions import Self

class CdashigClass(BaseModel):
    """
    CdashigClass
    """ # noqa: E501
    ordinal: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    label: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    links: Optional[CdashigClassLinks] = Field(default=None, alias="_links")
    domains: Optional[List[CdashigDomain]] = None
    scenarios: Optional[List[CdashigScenario]] = None
    __properties: ClassVar[List[str]] = ["ordinal", "name", "label", "description", "_links", "domains", "scenarios"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CdashigClass from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in domains (list)
        _items = []
        if self.domains:
            for _item_domains in self.domains:
                if _item_domains:
                    _items.append(_item_domains.to_dict())
            _dict['domains'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in scenarios (list)
        _items = []
        if self.scenarios:
            for _item_scenarios in self.scenarios:
                if _item_scenarios:
                    _items.append(_item_scenarios.to_dict())
            _dict['scenarios'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CdashigClass from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ordinal": obj.get("ordinal"),
            "name": obj.get("name"),
            "label": obj.get("label"),
            "description": obj.get("description"),
            "_links": CdashigClassLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "domains": [CdashigDomain.from_dict(_item) for _item in obj["domains"]] if obj.get("domains") is not None else None,
            "scenarios": [CdashigScenario.from_dict(_item) for _item in obj["scenarios"]] if obj.get("scenarios") is not None else None
        })
        return _obj



# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.lastupdated_links import LastupdatedLinks

class Lastupdated(BaseModel):
    """
    Lastupdated
    """
    links: Optional[LastupdatedLinks] = Field(default=None, alias="_links")
    overall: Optional[StrictStr] = None
    data_analysis: Optional[StrictStr] = Field(default=None, alias="data-analysis")
    data_collection: Optional[StrictStr] = Field(default=None, alias="data-collection")
    data_tabulation: Optional[StrictStr] = Field(default=None, alias="data-tabulation")
    measure: Optional[StrictStr] = None
    terminology: Optional[StrictStr] = None
    __properties = ["_links", "overall", "data-analysis", "data-collection", "data-tabulation", "measure", "terminology"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Lastupdated:
        """Create an instance of Lastupdated from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Lastupdated:
        """Create an instance of Lastupdated from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Lastupdated.parse_obj(obj)

        _obj = Lastupdated.parse_obj({
            "links": LastupdatedLinks.from_dict(obj.get("_links")) if obj.get("_links") is not None else None,
            "overall": obj.get("overall"),
            "data_analysis": obj.get("data-analysis"),
            "data_collection": obj.get("data-collection"),
            "data_tabulation": obj.get("data-tabulation"),
            "measure": obj.get("measure"),
            "terminology": obj.get("terminology")
        })
        return _obj



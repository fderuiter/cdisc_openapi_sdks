# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.export_ct_term import ExportCtTerm
from typing import Optional, Set
from typing_extensions import Self

class ExportCtCodelist(BaseModel):
    """
    ExportCtCodelist
    """ # noqa: E501
    code: Optional[StrictStr] = Field(default=None, alias="Code")
    codelist_code: Optional[StrictStr] = Field(default=None, alias="Codelist Code")
    codelist_extensible__yes_no: Optional[StrictStr] = Field(default=None, alias="Codelist Extensible (Yes/No)")
    codelist_name: Optional[StrictStr] = Field(default=None, alias="Codelist Name")
    cdisc_submission_value: Optional[StrictStr] = Field(default=None, alias="CDISC Submission Value")
    cdisc_synonym_s: Optional[List[StrictStr]] = Field(default=None, alias="CDISC Synonym(s)")
    cdisc_definition: Optional[StrictStr] = Field(default=None, alias="CDISC Definition")
    nci_preferred_term: Optional[StrictStr] = Field(default=None, alias="NCI Preferred Term")
    standard_and_date: Optional[StrictStr] = Field(default=None, alias="Standard and Date")
    : Optional[List[ExportCtTerm]] = None
    __properties: ClassVar[List[str]] = ["Code", "Codelist Code", "Codelist Extensible (Yes/No)", "Codelist Name", "CDISC Submission Value", "CDISC Synonym(s)", "CDISC Definition", "NCI Preferred Term", "Standard and Date", ""]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportCtCodelist from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in  (list)
        _items = []
        if self.:
            for _item_ in self.:
                if _item_:
                    _items.append(_item_.to_dict())
            _dict[''] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportCtCodelist from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Code": obj.get("Code"),
            "Codelist Code": obj.get("Codelist Code"),
            "Codelist Extensible (Yes/No)": obj.get("Codelist Extensible (Yes/No)"),
            "Codelist Name": obj.get("Codelist Name"),
            "CDISC Submission Value": obj.get("CDISC Submission Value"),
            "CDISC Synonym(s)": obj.get("CDISC Synonym(s)"),
            "CDISC Definition": obj.get("CDISC Definition"),
            "NCI Preferred Term": obj.get("NCI Preferred Term"),
            "Standard and Date": obj.get("Standard and Date"),
            "": [ExportCtTerm.from_dict(_item) for _item in obj[""]] if obj.get("") is not None else None
        })
        return _obj



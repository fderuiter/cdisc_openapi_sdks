# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.qrs_responsegroup import QrsResponsegroup
from openapi_client.models.root_ct_term_ref import RootCtTermRef
from typing import Optional, Set
from typing_extensions import Self

class QrsItemLinks(BaseModel):
    """
    QrsItemLinks
    """ # noqa: E501
    qrs_item_test: Optional[RootCtTermRef] = Field(default=None, alias="qrsItemTEST")
    qrs_item_testcd: Optional[RootCtTermRef] = Field(default=None, alias="qrsItemTESTCD")
    qrs_item_eval: Optional[RootCtTermRef] = Field(default=None, alias="qrsItemEVAL")
    qrs_item_scat: Optional[RootCtTermRef] = Field(default=None, alias="qrsItemSCAT")
    responsegroup: Optional[QrsResponsegroup] = None
    __properties: ClassVar[List[str]] = ["qrsItemTEST", "qrsItemTESTCD", "qrsItemEVAL", "qrsItemSCAT", "responsegroup"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QrsItemLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of qrs_item_test
        if self.qrs_item_test:
            _dict['qrsItemTEST'] = self.qrs_item_test.to_dict()
        # override the default output from pydantic by calling `to_dict()` of qrs_item_testcd
        if self.qrs_item_testcd:
            _dict['qrsItemTESTCD'] = self.qrs_item_testcd.to_dict()
        # override the default output from pydantic by calling `to_dict()` of qrs_item_eval
        if self.qrs_item_eval:
            _dict['qrsItemEVAL'] = self.qrs_item_eval.to_dict()
        # override the default output from pydantic by calling `to_dict()` of qrs_item_scat
        if self.qrs_item_scat:
            _dict['qrsItemSCAT'] = self.qrs_item_scat.to_dict()
        # override the default output from pydantic by calling `to_dict()` of responsegroup
        if self.responsegroup:
            _dict['responsegroup'] = self.responsegroup.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QrsItemLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "qrsItemTEST": RootCtTermRef.from_dict(obj["qrsItemTEST"]) if obj.get("qrsItemTEST") is not None else None,
            "qrsItemTESTCD": RootCtTermRef.from_dict(obj["qrsItemTESTCD"]) if obj.get("qrsItemTESTCD") is not None else None,
            "qrsItemEVAL": RootCtTermRef.from_dict(obj["qrsItemEVAL"]) if obj.get("qrsItemEVAL") is not None else None,
            "qrsItemSCAT": RootCtTermRef.from_dict(obj["qrsItemSCAT"]) if obj.get("qrsItemSCAT") is not None else None,
            "responsegroup": QrsResponsegroup.from_dict(obj["responsegroup"]) if obj.get("responsegroup") is not None else None
        })
        return _obj



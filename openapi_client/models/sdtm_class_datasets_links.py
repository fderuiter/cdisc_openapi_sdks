# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sdtm_class_datasets_ref import SdtmClassDatasetsRef
from openapi_client.models.sdtm_dataset_ref_element import SdtmDatasetRefElement
from openapi_client.models.sdtm_product_ref import SdtmProductRef
from typing import Optional, Set
from typing_extensions import Self

class SdtmClassDatasetsLinks(BaseModel):
    """
    SdtmClassDatasetsLinks
    """ # noqa: E501
    var_self: Optional[SdtmClassDatasetsRef] = Field(default=None, alias="self")
    parent_product: Optional[SdtmProductRef] = Field(default=None, alias="parentProduct")
    prior_version: Optional[SdtmClassDatasetsRef] = Field(default=None, alias="priorVersion")
    datasets: Optional[List[SdtmDatasetRefElement]] = None
    __properties: ClassVar[List[str]] = ["self", "parentProduct", "priorVersion", "datasets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SdtmClassDatasetsLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_self
        if self.var_self:
            _dict['self'] = self.var_self.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_product
        if self.parent_product:
            _dict['parentProduct'] = self.parent_product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prior_version
        if self.prior_version:
            _dict['priorVersion'] = self.prior_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in datasets (list)
        _items = []
        if self.datasets:
            for _item_datasets in self.datasets:
                if _item_datasets:
                    _items.append(_item_datasets.to_dict())
            _dict['datasets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SdtmClassDatasetsLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "self": SdtmClassDatasetsRef.from_dict(obj["self"]) if obj.get("self") is not None else None,
            "parentProduct": SdtmProductRef.from_dict(obj["parentProduct"]) if obj.get("parentProduct") is not None else None,
            "priorVersion": SdtmClassDatasetsRef.from_dict(obj["priorVersion"]) if obj.get("priorVersion") is not None else None,
            "datasets": [SdtmDatasetRefElement.from_dict(_item) for _item in obj["datasets"]] if obj.get("datasets") is not None else None
        })
        return _obj



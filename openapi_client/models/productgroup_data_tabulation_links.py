# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.productgroup_ref import ProductgroupRef
from openapi_client.models.sdtm_product_ref_element import SdtmProductRefElement
from openapi_client.models.sdtmig_product_ref_element import SdtmigProductRefElement
from openapi_client.models.sendig_product_ref_element import SendigProductRefElement
from typing import Optional, Set
from typing_extensions import Self

class ProductgroupDataTabulationLinks(BaseModel):
    """
    ProductgroupDataTabulationLinks
    """ # noqa: E501
    var_self: Optional[ProductgroupRef] = Field(default=None, alias="self")
    sdtm: Optional[List[SdtmProductRefElement]] = None
    sdtmig: Optional[List[SdtmigProductRefElement]] = None
    sendig: Optional[List[SendigProductRefElement]] = None
    __properties: ClassVar[List[str]] = ["self", "sdtm", "sdtmig", "sendig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductgroupDataTabulationLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_self
        if self.var_self:
            _dict['self'] = self.var_self.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sdtm (list)
        _items = []
        if self.sdtm:
            for _item_sdtm in self.sdtm:
                if _item_sdtm:
                    _items.append(_item_sdtm.to_dict())
            _dict['sdtm'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sdtmig (list)
        _items = []
        if self.sdtmig:
            for _item_sdtmig in self.sdtmig:
                if _item_sdtmig:
                    _items.append(_item_sdtmig.to_dict())
            _dict['sdtmig'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sendig (list)
        _items = []
        if self.sendig:
            for _item_sendig in self.sendig:
                if _item_sendig:
                    _items.append(_item_sendig.to_dict())
            _dict['sendig'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductgroupDataTabulationLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "self": ProductgroupRef.from_dict(obj["self"]) if obj.get("self") is not None else None,
            "sdtm": [SdtmProductRefElement.from_dict(_item) for _item in obj["sdtm"]] if obj.get("sdtm") is not None else None,
            "sdtmig": [SdtmigProductRefElement.from_dict(_item) for _item in obj["sdtmig"]] if obj.get("sdtmig") is not None else None,
            "sendig": [SendigProductRefElement.from_dict(_item) for _item in obj["sendig"]] if obj.get("sendig") is not None else None
        })
        return _obj



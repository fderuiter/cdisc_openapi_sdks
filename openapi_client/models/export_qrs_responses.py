# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExportQrsResponses(BaseModel):
    """
    ExportQrsResponses
    """ # noqa: E501
    response_group: Optional[StrictStr] = Field(default=None, alias="Response Group")
    sequence: Optional[StrictStr] = Field(default=None, alias="Sequence")
    responses_original_result_codelist_c_code: Optional[StrictStr] = Field(default=None, alias="Response's Original Result Codelist C-Code")
    responses_original_result_term_c_code: Optional[StrictStr] = Field(default=None, alias="Response's Original Result Term C-Code")
    responses_original_result_unit_codelist_c_code: Optional[StrictStr] = Field(default=None, alias="Response's Original Result Unit Codelist C-Code")
    responses_original_result_unit_term_c_code: Optional[StrictStr] = Field(default=None, alias="Response's Original Result Unit Term C-Code")
    responses_standardized_result_codelist_c_code: Optional[StrictStr] = Field(default=None, alias="Response's Standardized Result Codelist C-Code")
    responses_standardized_result_term_c_code: Optional[StrictStr] = Field(default=None, alias="Response's Standardized Result Term C-Code")
    responses_standardized_result_unit_codelist_c_code: Optional[StrictStr] = Field(default=None, alias="Response's Standardized Result Unit Codelist C-Code")
    responses_standardized_result_unit_term_c_code: Optional[StrictStr] = Field(default=None, alias="Response's Standardized Result Unit Term C-Code")
    __properties: ClassVar[List[str]] = ["Response Group", "Sequence", "Response&#39;s Original Result Codelist C-Code", "Response&#39;s Original Result Term C-Code", "Response&#39;s Original Result Unit Codelist C-Code", "Response&#39;s Original Result Unit Term C-Code", "Response&#39;s Standardized Result Codelist C-Code", "Response&#39;s Standardized Result Term C-Code", "Response&#39;s Standardized Result Unit Codelist C-Code", "Response&#39;s Standardized Result Unit Term C-Code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportQrsResponses from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportQrsResponses from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Response Group": obj.get("Response Group"),
            "Sequence": obj.get("Sequence"),
            "Response's Original Result Codelist C-Code": obj.get("Response's Original Result Codelist C-Code"),
            "Response's Original Result Term C-Code": obj.get("Response's Original Result Term C-Code"),
            "Response's Original Result Unit Codelist C-Code": obj.get("Response's Original Result Unit Codelist C-Code"),
            "Response's Original Result Unit Term C-Code": obj.get("Response's Original Result Unit Term C-Code"),
            "Response's Standardized Result Codelist C-Code": obj.get("Response's Standardized Result Codelist C-Code"),
            "Response's Standardized Result Term C-Code": obj.get("Response's Standardized Result Term C-Code"),
            "Response's Standardized Result Unit Codelist C-Code": obj.get("Response's Standardized Result Unit Codelist C-Code"),
            "Response's Standardized Result Unit Term C-Code": obj.get("Response's Standardized Result Unit Term C-Code")
        })
        return _obj



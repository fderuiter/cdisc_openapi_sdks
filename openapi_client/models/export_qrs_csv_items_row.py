# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExportQrsCsvItemsRow(BaseModel):
    """
    ExportQrsCsvItemsRow
    """ # noqa: E501
    qrs_measure_name: Optional[StrictStr] = Field(default=None, alias="QRS Measure Name")
    qrs_measure_label: Optional[StrictStr] = Field(default=None, alias="QRS Measure Label")
    qrs_measure_type: Optional[StrictStr] = Field(default=None, alias="QRS Measure Type")
    item_sequence: Optional[StrictStr] = Field(default=None, alias="Item Sequence")
    test_name: Optional[StrictStr] = Field(default=None, alias="Test Name")
    item_text: Optional[StrictStr] = Field(default=None, alias="Item Text")
    tests_codelist_c_code: Optional[StrictStr] = Field(default=None, alias="Test's Codelist C-Code")
    tests_term_c_code: Optional[StrictStr] = Field(default=None, alias="Test's Term C-Code")
    test_codes_codelist_c_code: Optional[StrictStr] = Field(default=None, alias="Test Code's Codelist C-Code")
    test_codes_term_c_code: Optional[StrictStr] = Field(default=None, alias="Test Code's Term C-Code")
    subcategorys_codelist_c_code: Optional[StrictStr] = Field(default=None, alias="Subcategory's Codelist C-Code")
    subcategorys_term_c_code: Optional[StrictStr] = Field(default=None, alias="Subcategory's Term C-Code")
    evaluators_codelist_c_code: Optional[StrictStr] = Field(default=None, alias="Evaluator's Codelist C-Code")
    evaluators_term_c_code: Optional[StrictStr] = Field(default=None, alias="Evaluator's Term C-Code")
    free_form_responses_datatype: Optional[StrictStr] = Field(default=None, alias="Free-form Response's Datatype")
    response_group: Optional[StrictStr] = Field(default=None, alias="Response Group")
    __properties: ClassVar[List[str]] = ["QRS Measure Name", "QRS Measure Label", "QRS Measure Type", "Item Sequence", "Test Name", "Item Text", "Test&#39;s Codelist C-Code", "Test&#39;s Term C-Code", "Test Code&#39;s Codelist C-Code", "Test Code&#39;s Term C-Code", "Subcategory&#39;s Codelist C-Code", "Subcategory&#39;s Term C-Code", "Evaluator&#39;s Codelist C-Code", "Evaluator&#39;s Term C-Code", "Free-form Response&#39;s Datatype", "Response Group"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportQrsCsvItemsRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportQrsCsvItemsRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "QRS Measure Name": obj.get("QRS Measure Name"),
            "QRS Measure Label": obj.get("QRS Measure Label"),
            "QRS Measure Type": obj.get("QRS Measure Type"),
            "Item Sequence": obj.get("Item Sequence"),
            "Test Name": obj.get("Test Name"),
            "Item Text": obj.get("Item Text"),
            "Test's Codelist C-Code": obj.get("Test's Codelist C-Code"),
            "Test's Term C-Code": obj.get("Test's Term C-Code"),
            "Test Code's Codelist C-Code": obj.get("Test Code's Codelist C-Code"),
            "Test Code's Term C-Code": obj.get("Test Code's Term C-Code"),
            "Subcategory's Codelist C-Code": obj.get("Subcategory's Codelist C-Code"),
            "Subcategory's Term C-Code": obj.get("Subcategory's Term C-Code"),
            "Evaluator's Codelist C-Code": obj.get("Evaluator's Codelist C-Code"),
            "Evaluator's Term C-Code": obj.get("Evaluator's Term C-Code"),
            "Free-form Response's Datatype": obj.get("Free-form Response's Datatype"),
            "Response Group": obj.get("Response Group")
        })
        return _obj



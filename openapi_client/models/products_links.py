# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from openapi_client.models.productgroup_data_analysis import ProductgroupDataAnalysis
from openapi_client.models.productgroup_data_collection import ProductgroupDataCollection
from openapi_client.models.productgroup_data_tabulation import ProductgroupDataTabulation
from openapi_client.models.productgroup_qrs import ProductgroupQrs
from openapi_client.models.productgroup_terminology import ProductgroupTerminology
from openapi_client.models.products_ref import ProductsRef

class ProductsLinks(BaseModel):
    """
    ProductsLinks
    """
    var_self: Optional[ProductsRef] = Field(default=None, alias="self")
    data_collection: Optional[ProductgroupDataCollection] = Field(default=None, alias="data-collection")
    data_tabulation: Optional[ProductgroupDataTabulation] = Field(default=None, alias="data-tabulation")
    data_analysis: Optional[ProductgroupDataAnalysis] = Field(default=None, alias="data-analysis")
    terminology: Optional[ProductgroupTerminology] = None
    measure: Optional[ProductgroupQrs] = None
    __properties = ["self", "data-collection", "data-tabulation", "data-analysis", "terminology", "measure"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProductsLinks:
        """Create an instance of ProductsLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of var_self
        if self.var_self:
            _dict['self'] = self.var_self.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_collection
        if self.data_collection:
            _dict['data-collection'] = self.data_collection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_tabulation
        if self.data_tabulation:
            _dict['data-tabulation'] = self.data_tabulation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_analysis
        if self.data_analysis:
            _dict['data-analysis'] = self.data_analysis.to_dict()
        # override the default output from pydantic by calling `to_dict()` of terminology
        if self.terminology:
            _dict['terminology'] = self.terminology.to_dict()
        # override the default output from pydantic by calling `to_dict()` of measure
        if self.measure:
            _dict['measure'] = self.measure.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProductsLinks:
        """Create an instance of ProductsLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProductsLinks.parse_obj(obj)

        _obj = ProductsLinks.parse_obj({
            "var_self": ProductsRef.from_dict(obj.get("self")) if obj.get("self") is not None else None,
            "data_collection": ProductgroupDataCollection.from_dict(obj.get("data-collection")) if obj.get("data-collection") is not None else None,
            "data_tabulation": ProductgroupDataTabulation.from_dict(obj.get("data-tabulation")) if obj.get("data-tabulation") is not None else None,
            "data_analysis": ProductgroupDataAnalysis.from_dict(obj.get("data-analysis")) if obj.get("data-analysis") is not None else None,
            "terminology": ProductgroupTerminology.from_dict(obj.get("terminology")) if obj.get("terminology") is not None else None,
            "measure": ProductgroupQrs.from_dict(obj.get("measure")) if obj.get("measure") is not None else None
        })
        return _obj



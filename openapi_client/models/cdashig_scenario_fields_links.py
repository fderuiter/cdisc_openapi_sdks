# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from openapi_client.models.cdashig_class_ref import CdashigClassRef
from openapi_client.models.cdashig_domain_ref import CdashigDomainRef
from openapi_client.models.cdashig_product_ref import CdashigProductRef
from openapi_client.models.cdashig_scenario_field_ref_element import CdashigScenarioFieldRefElement
from openapi_client.models.cdashig_scenario_fields_ref import CdashigScenarioFieldsRef

class CdashigScenarioFieldsLinks(BaseModel):
    """
    CdashigScenarioFieldsLinks
    """
    var_self: Optional[CdashigScenarioFieldsRef] = Field(default=None, alias="self")
    parent_product: Optional[CdashigProductRef] = Field(default=None, alias="parentProduct")
    parent_class: Optional[CdashigClassRef] = Field(default=None, alias="parentClass")
    parent_domain: Optional[CdashigDomainRef] = Field(default=None, alias="parentDomain")
    fields: Optional[conlist(CdashigScenarioFieldRefElement)] = None
    __properties = ["self", "parentProduct", "parentClass", "parentDomain", "fields"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CdashigScenarioFieldsLinks:
        """Create an instance of CdashigScenarioFieldsLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of var_self
        if self.var_self:
            _dict['self'] = self.var_self.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_product
        if self.parent_product:
            _dict['parentProduct'] = self.parent_product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_class
        if self.parent_class:
            _dict['parentClass'] = self.parent_class.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_domain
        if self.parent_domain:
            _dict['parentDomain'] = self.parent_domain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item in self.fields:
                if _item:
                    _items.append(_item.to_dict())
            _dict['fields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CdashigScenarioFieldsLinks:
        """Create an instance of CdashigScenarioFieldsLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CdashigScenarioFieldsLinks.parse_obj(obj)

        _obj = CdashigScenarioFieldsLinks.parse_obj({
            "var_self": CdashigScenarioFieldsRef.from_dict(obj.get("self")) if obj.get("self") is not None else None,
            "parent_product": CdashigProductRef.from_dict(obj.get("parentProduct")) if obj.get("parentProduct") is not None else None,
            "parent_class": CdashigClassRef.from_dict(obj.get("parentClass")) if obj.get("parentClass") is not None else None,
            "parent_domain": CdashigDomainRef.from_dict(obj.get("parentDomain")) if obj.get("parentDomain") is not None else None,
            "fields": [CdashigScenarioFieldRefElement.from_dict(_item) for _item in obj.get("fields")] if obj.get("fields") is not None else None
        })
        return _obj



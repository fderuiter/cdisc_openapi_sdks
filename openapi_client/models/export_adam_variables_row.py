# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class ExportAdamVariablesRow(BaseModel):
    """
    ExportAdamVariablesRow
    """
    version: Optional[StrictStr] = Field(default=None, alias="Version")
    data_structure_name: Optional[StrictStr] = Field(default=None, alias="Data Structure Name")
    dataset_name: Optional[StrictStr] = Field(default=None, alias="Dataset Name")
    variable_group: Optional[StrictStr] = Field(default=None, alias="Variable Group")
    variable_name: Optional[StrictStr] = Field(default=None, alias="Variable Name")
    variable_label: Optional[StrictStr] = Field(default=None, alias="Variable Label")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    codelist_controlled_terms: Optional[StrictStr] = Field(default=None, alias="Codelist/Controlled Terms")
    core: Optional[StrictStr] = Field(default=None, alias="Core")
    cdisc_notes: Optional[StrictStr] = Field(default=None, alias="CDISC Notes")
    __properties = ["Version", "Data Structure Name", "Dataset Name", "Variable Group", "Variable Name", "Variable Label", "Type", "Codelist/Controlled Terms", "Core", "CDISC Notes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExportAdamVariablesRow:
        """Create an instance of ExportAdamVariablesRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExportAdamVariablesRow:
        """Create an instance of ExportAdamVariablesRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExportAdamVariablesRow.parse_obj(obj)

        _obj = ExportAdamVariablesRow.parse_obj({
            "version": obj.get("Version"),
            "data_structure_name": obj.get("Data Structure Name"),
            "dataset_name": obj.get("Dataset Name"),
            "variable_group": obj.get("Variable Group"),
            "variable_name": obj.get("Variable Name"),
            "variable_label": obj.get("Variable Label"),
            "type": obj.get("Type"),
            "codelist_controlled_terms": obj.get("Codelist/Controlled Terms"),
            "core": obj.get("Core"),
            "cdisc_notes": obj.get("CDISC Notes")
        })
        return _obj



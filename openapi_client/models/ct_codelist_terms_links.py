# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from openapi_client.models.ct_codelist_terms_ref import CtCodelistTermsRef
from openapi_client.models.ct_package_ref import CtPackageRef
from openapi_client.models.ct_term_ref_element import CtTermRefElement
from openapi_client.models.root_ct_codelist_ref import RootCtCodelistRef

class CtCodelistTermsLinks(BaseModel):
    """
    CtCodelistTermsLinks
    """
    var_self: Optional[CtCodelistTermsRef] = Field(default=None, alias="self")
    parent_package: Optional[CtPackageRef] = Field(default=None, alias="parentPackage")
    root_item: Optional[RootCtCodelistRef] = Field(default=None, alias="rootItem")
    prior_version: Optional[CtCodelistTermsRef] = Field(default=None, alias="priorVersion")
    terms: Optional[conlist(CtTermRefElement)] = None
    __properties = ["self", "parentPackage", "rootItem", "priorVersion", "terms"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CtCodelistTermsLinks:
        """Create an instance of CtCodelistTermsLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of var_self
        if self.var_self:
            _dict['self'] = self.var_self.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_package
        if self.parent_package:
            _dict['parentPackage'] = self.parent_package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of root_item
        if self.root_item:
            _dict['rootItem'] = self.root_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prior_version
        if self.prior_version:
            _dict['priorVersion'] = self.prior_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in terms (list)
        _items = []
        if self.terms:
            for _item in self.terms:
                if _item:
                    _items.append(_item.to_dict())
            _dict['terms'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CtCodelistTermsLinks:
        """Create an instance of CtCodelistTermsLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CtCodelistTermsLinks.parse_obj(obj)

        _obj = CtCodelistTermsLinks.parse_obj({
            "var_self": CtCodelistTermsRef.from_dict(obj.get("self")) if obj.get("self") is not None else None,
            "parent_package": CtPackageRef.from_dict(obj.get("parentPackage")) if obj.get("parentPackage") is not None else None,
            "root_item": RootCtCodelistRef.from_dict(obj.get("rootItem")) if obj.get("rootItem") is not None else None,
            "prior_version": CtCodelistTermsRef.from_dict(obj.get("priorVersion")) if obj.get("priorVersion") is not None else None,
            "terms": [CtTermRefElement.from_dict(_item) for _item in obj.get("terms")] if obj.get("terms") is not None else None
        })
        return _obj



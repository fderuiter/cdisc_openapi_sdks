# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr
from typing import Optional, Union
from typing_extensions import Annotated
from openapi_client.models.default_search_response import DefaultSearchResponse
from openapi_client.models.default_search_scopes import DefaultSearchScopes
from openapi_client.models.mdr_search_scopes_get200_response import MdrSearchScopesGet200Response
from openapi_client.models.scope_values import ScopeValues

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class SearchesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def mdr_search_get(
        self,
        q: Annotated[StrictStr, Field(description="Search Term Expression")],
        highlight: Annotated[Optional[StrictStr], Field(description="Search Highlight Expression")] = None,
        start: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Initial Search Result Index")] = None,
        page_size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of Search Results to Return")] = None,
        var_class: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Class")] = None,
        codelist: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Codelist")] = None,
        concept_id: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Concept ID")] = None,
        core: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Core")] = None,
        data_structure: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Data Structure")] = None,
        dataset_structure: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Dataset Structure")] = None,
        definition: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Definition")] = None,
        description: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Description")] = None,
        domain: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Domain")] = None,
        effective_date: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Effective Date")] = None,
        extensible: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Extensible")] = None,
        href: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Href")] = None,
        label: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Label")] = None,
        measure_type: Annotated[Optional[StrictStr], Field(description="SLimit Search by Setting Scope to Measure Type")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Name")] = None,
        preferred_term: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Preferred Term")] = None,
        product: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Product")] = None,
        product_group: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Product Group")] = None,
        registration_status: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Registration Status")] = None,
        role_description: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Role Description")] = None,
        sdtm_target: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to SDTM Target")] = None,
        simple_datatype: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Simple Datatype")] = None,
        submission_value: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Submission Value")] = None,
        synonyms: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Synonyms")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Type")] = None,
        ui_href: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to UI Href")] = None,
        value_domain: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Value Domain")] = None,
        variable_set: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Variable Set")] = None,
        version: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Version")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DefaultSearchResponse:
        """mdr_search_get

        Get Search Results Across CDISC Library

        :param q: Search Term Expression (required)
        :type q: str
        :param highlight: Search Highlight Expression
        :type highlight: str
        :param start: Initial Search Result Index
        :type start: float
        :param page_size: Number of Search Results to Return
        :type page_size: float
        :param var_class: Limit Search by Setting Scope to Class
        :type var_class: str
        :param codelist: Limit Search by Setting Scope to Codelist
        :type codelist: str
        :param concept_id: Limit Search by Setting Scope to Concept ID
        :type concept_id: str
        :param core: Limit Search by Setting Scope to Core
        :type core: str
        :param data_structure: Limit Search by Setting Scope to Data Structure
        :type data_structure: str
        :param dataset_structure: Limit Search by Setting Scope to Dataset Structure
        :type dataset_structure: str
        :param definition: Limit Search by Setting Scope to Definition
        :type definition: str
        :param description: Limit Search by Setting Scope to Description
        :type description: str
        :param domain: Limit Search by Setting Scope to Domain
        :type domain: str
        :param effective_date: Limit Search by Setting Scope to Effective Date
        :type effective_date: str
        :param extensible: Limit Search by Setting Scope to Extensible
        :type extensible: str
        :param href: Limit Search by Setting Scope to Href
        :type href: str
        :param label: Limit Search by Setting Scope to Label
        :type label: str
        :param measure_type: SLimit Search by Setting Scope to Measure Type
        :type measure_type: str
        :param name: Limit Search by Setting Scope to Name
        :type name: str
        :param preferred_term: Limit Search by Setting Scope to Preferred Term
        :type preferred_term: str
        :param product: Limit Search by Setting Scope to Product
        :type product: str
        :param product_group: Limit Search by Setting Scope to Product Group
        :type product_group: str
        :param registration_status: Limit Search by Setting Scope to Registration Status
        :type registration_status: str
        :param role_description: Limit Search by Setting Scope to Role Description
        :type role_description: str
        :param sdtm_target: Limit Search by Setting Scope to SDTM Target
        :type sdtm_target: str
        :param simple_datatype: Limit Search by Setting Scope to Simple Datatype
        :type simple_datatype: str
        :param submission_value: Limit Search by Setting Scope to Submission Value
        :type submission_value: str
        :param synonyms: Limit Search by Setting Scope to Synonyms
        :type synonyms: str
        :param type: Limit Search by Setting Scope to Type
        :type type: str
        :param ui_href: Limit Search by Setting Scope to UI Href
        :type ui_href: str
        :param value_domain: Limit Search by Setting Scope to Value Domain
        :type value_domain: str
        :param variable_set: Limit Search by Setting Scope to Variable Set
        :type variable_set: str
        :param version: Limit Search by Setting Scope to Version
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mdr_search_get_serialize(
            q=q,
            highlight=highlight,
            start=start,
            page_size=page_size,
            var_class=var_class,
            codelist=codelist,
            concept_id=concept_id,
            core=core,
            data_structure=data_structure,
            dataset_structure=dataset_structure,
            definition=definition,
            description=description,
            domain=domain,
            effective_date=effective_date,
            extensible=extensible,
            href=href,
            label=label,
            measure_type=measure_type,
            name=name,
            preferred_term=preferred_term,
            product=product,
            product_group=product_group,
            registration_status=registration_status,
            role_description=role_description,
            sdtm_target=sdtm_target,
            simple_datatype=simple_datatype,
            submission_value=submission_value,
            synonyms=synonyms,
            type=type,
            ui_href=ui_href,
            value_domain=value_domain,
            variable_set=variable_set,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSearchResponse",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def mdr_search_get_with_http_info(
        self,
        q: Annotated[StrictStr, Field(description="Search Term Expression")],
        highlight: Annotated[Optional[StrictStr], Field(description="Search Highlight Expression")] = None,
        start: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Initial Search Result Index")] = None,
        page_size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of Search Results to Return")] = None,
        var_class: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Class")] = None,
        codelist: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Codelist")] = None,
        concept_id: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Concept ID")] = None,
        core: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Core")] = None,
        data_structure: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Data Structure")] = None,
        dataset_structure: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Dataset Structure")] = None,
        definition: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Definition")] = None,
        description: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Description")] = None,
        domain: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Domain")] = None,
        effective_date: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Effective Date")] = None,
        extensible: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Extensible")] = None,
        href: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Href")] = None,
        label: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Label")] = None,
        measure_type: Annotated[Optional[StrictStr], Field(description="SLimit Search by Setting Scope to Measure Type")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Name")] = None,
        preferred_term: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Preferred Term")] = None,
        product: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Product")] = None,
        product_group: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Product Group")] = None,
        registration_status: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Registration Status")] = None,
        role_description: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Role Description")] = None,
        sdtm_target: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to SDTM Target")] = None,
        simple_datatype: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Simple Datatype")] = None,
        submission_value: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Submission Value")] = None,
        synonyms: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Synonyms")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Type")] = None,
        ui_href: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to UI Href")] = None,
        value_domain: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Value Domain")] = None,
        variable_set: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Variable Set")] = None,
        version: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Version")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DefaultSearchResponse]:
        """mdr_search_get

        Get Search Results Across CDISC Library

        :param q: Search Term Expression (required)
        :type q: str
        :param highlight: Search Highlight Expression
        :type highlight: str
        :param start: Initial Search Result Index
        :type start: float
        :param page_size: Number of Search Results to Return
        :type page_size: float
        :param var_class: Limit Search by Setting Scope to Class
        :type var_class: str
        :param codelist: Limit Search by Setting Scope to Codelist
        :type codelist: str
        :param concept_id: Limit Search by Setting Scope to Concept ID
        :type concept_id: str
        :param core: Limit Search by Setting Scope to Core
        :type core: str
        :param data_structure: Limit Search by Setting Scope to Data Structure
        :type data_structure: str
        :param dataset_structure: Limit Search by Setting Scope to Dataset Structure
        :type dataset_structure: str
        :param definition: Limit Search by Setting Scope to Definition
        :type definition: str
        :param description: Limit Search by Setting Scope to Description
        :type description: str
        :param domain: Limit Search by Setting Scope to Domain
        :type domain: str
        :param effective_date: Limit Search by Setting Scope to Effective Date
        :type effective_date: str
        :param extensible: Limit Search by Setting Scope to Extensible
        :type extensible: str
        :param href: Limit Search by Setting Scope to Href
        :type href: str
        :param label: Limit Search by Setting Scope to Label
        :type label: str
        :param measure_type: SLimit Search by Setting Scope to Measure Type
        :type measure_type: str
        :param name: Limit Search by Setting Scope to Name
        :type name: str
        :param preferred_term: Limit Search by Setting Scope to Preferred Term
        :type preferred_term: str
        :param product: Limit Search by Setting Scope to Product
        :type product: str
        :param product_group: Limit Search by Setting Scope to Product Group
        :type product_group: str
        :param registration_status: Limit Search by Setting Scope to Registration Status
        :type registration_status: str
        :param role_description: Limit Search by Setting Scope to Role Description
        :type role_description: str
        :param sdtm_target: Limit Search by Setting Scope to SDTM Target
        :type sdtm_target: str
        :param simple_datatype: Limit Search by Setting Scope to Simple Datatype
        :type simple_datatype: str
        :param submission_value: Limit Search by Setting Scope to Submission Value
        :type submission_value: str
        :param synonyms: Limit Search by Setting Scope to Synonyms
        :type synonyms: str
        :param type: Limit Search by Setting Scope to Type
        :type type: str
        :param ui_href: Limit Search by Setting Scope to UI Href
        :type ui_href: str
        :param value_domain: Limit Search by Setting Scope to Value Domain
        :type value_domain: str
        :param variable_set: Limit Search by Setting Scope to Variable Set
        :type variable_set: str
        :param version: Limit Search by Setting Scope to Version
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mdr_search_get_serialize(
            q=q,
            highlight=highlight,
            start=start,
            page_size=page_size,
            var_class=var_class,
            codelist=codelist,
            concept_id=concept_id,
            core=core,
            data_structure=data_structure,
            dataset_structure=dataset_structure,
            definition=definition,
            description=description,
            domain=domain,
            effective_date=effective_date,
            extensible=extensible,
            href=href,
            label=label,
            measure_type=measure_type,
            name=name,
            preferred_term=preferred_term,
            product=product,
            product_group=product_group,
            registration_status=registration_status,
            role_description=role_description,
            sdtm_target=sdtm_target,
            simple_datatype=simple_datatype,
            submission_value=submission_value,
            synonyms=synonyms,
            type=type,
            ui_href=ui_href,
            value_domain=value_domain,
            variable_set=variable_set,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSearchResponse",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def mdr_search_get_without_preload_content(
        self,
        q: Annotated[StrictStr, Field(description="Search Term Expression")],
        highlight: Annotated[Optional[StrictStr], Field(description="Search Highlight Expression")] = None,
        start: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Initial Search Result Index")] = None,
        page_size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of Search Results to Return")] = None,
        var_class: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Class")] = None,
        codelist: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Codelist")] = None,
        concept_id: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Concept ID")] = None,
        core: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Core")] = None,
        data_structure: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Data Structure")] = None,
        dataset_structure: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Dataset Structure")] = None,
        definition: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Definition")] = None,
        description: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Description")] = None,
        domain: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Domain")] = None,
        effective_date: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Effective Date")] = None,
        extensible: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Extensible")] = None,
        href: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Href")] = None,
        label: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Label")] = None,
        measure_type: Annotated[Optional[StrictStr], Field(description="SLimit Search by Setting Scope to Measure Type")] = None,
        name: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Name")] = None,
        preferred_term: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Preferred Term")] = None,
        product: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Product")] = None,
        product_group: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Product Group")] = None,
        registration_status: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Registration Status")] = None,
        role_description: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Role Description")] = None,
        sdtm_target: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to SDTM Target")] = None,
        simple_datatype: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Simple Datatype")] = None,
        submission_value: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Submission Value")] = None,
        synonyms: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Synonyms")] = None,
        type: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Type")] = None,
        ui_href: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to UI Href")] = None,
        value_domain: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Value Domain")] = None,
        variable_set: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Variable Set")] = None,
        version: Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Version")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """mdr_search_get

        Get Search Results Across CDISC Library

        :param q: Search Term Expression (required)
        :type q: str
        :param highlight: Search Highlight Expression
        :type highlight: str
        :param start: Initial Search Result Index
        :type start: float
        :param page_size: Number of Search Results to Return
        :type page_size: float
        :param var_class: Limit Search by Setting Scope to Class
        :type var_class: str
        :param codelist: Limit Search by Setting Scope to Codelist
        :type codelist: str
        :param concept_id: Limit Search by Setting Scope to Concept ID
        :type concept_id: str
        :param core: Limit Search by Setting Scope to Core
        :type core: str
        :param data_structure: Limit Search by Setting Scope to Data Structure
        :type data_structure: str
        :param dataset_structure: Limit Search by Setting Scope to Dataset Structure
        :type dataset_structure: str
        :param definition: Limit Search by Setting Scope to Definition
        :type definition: str
        :param description: Limit Search by Setting Scope to Description
        :type description: str
        :param domain: Limit Search by Setting Scope to Domain
        :type domain: str
        :param effective_date: Limit Search by Setting Scope to Effective Date
        :type effective_date: str
        :param extensible: Limit Search by Setting Scope to Extensible
        :type extensible: str
        :param href: Limit Search by Setting Scope to Href
        :type href: str
        :param label: Limit Search by Setting Scope to Label
        :type label: str
        :param measure_type: SLimit Search by Setting Scope to Measure Type
        :type measure_type: str
        :param name: Limit Search by Setting Scope to Name
        :type name: str
        :param preferred_term: Limit Search by Setting Scope to Preferred Term
        :type preferred_term: str
        :param product: Limit Search by Setting Scope to Product
        :type product: str
        :param product_group: Limit Search by Setting Scope to Product Group
        :type product_group: str
        :param registration_status: Limit Search by Setting Scope to Registration Status
        :type registration_status: str
        :param role_description: Limit Search by Setting Scope to Role Description
        :type role_description: str
        :param sdtm_target: Limit Search by Setting Scope to SDTM Target
        :type sdtm_target: str
        :param simple_datatype: Limit Search by Setting Scope to Simple Datatype
        :type simple_datatype: str
        :param submission_value: Limit Search by Setting Scope to Submission Value
        :type submission_value: str
        :param synonyms: Limit Search by Setting Scope to Synonyms
        :type synonyms: str
        :param type: Limit Search by Setting Scope to Type
        :type type: str
        :param ui_href: Limit Search by Setting Scope to UI Href
        :type ui_href: str
        :param value_domain: Limit Search by Setting Scope to Value Domain
        :type value_domain: str
        :param variable_set: Limit Search by Setting Scope to Variable Set
        :type variable_set: str
        :param version: Limit Search by Setting Scope to Version
        :type version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mdr_search_get_serialize(
            q=q,
            highlight=highlight,
            start=start,
            page_size=page_size,
            var_class=var_class,
            codelist=codelist,
            concept_id=concept_id,
            core=core,
            data_structure=data_structure,
            dataset_structure=dataset_structure,
            definition=definition,
            description=description,
            domain=domain,
            effective_date=effective_date,
            extensible=extensible,
            href=href,
            label=label,
            measure_type=measure_type,
            name=name,
            preferred_term=preferred_term,
            product=product,
            product_group=product_group,
            registration_status=registration_status,
            role_description=role_description,
            sdtm_target=sdtm_target,
            simple_datatype=simple_datatype,
            submission_value=submission_value,
            synonyms=synonyms,
            type=type,
            ui_href=ui_href,
            value_domain=value_domain,
            variable_set=variable_set,
            version=version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DefaultSearchResponse",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _mdr_search_get_serialize(
        self,
        q,
        highlight,
        start,
        page_size,
        var_class,
        codelist,
        concept_id,
        core,
        data_structure,
        dataset_structure,
        definition,
        description,
        domain,
        effective_date,
        extensible,
        href,
        label,
        measure_type,
        name,
        preferred_term,
        product,
        product_group,
        registration_status,
        role_description,
        sdtm_target,
        simple_datatype,
        submission_value,
        synonyms,
        type,
        ui_href,
        value_domain,
        variable_set,
        version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if q is not None:
            
            _query_params.append(('q', q))
            
        if highlight is not None:
            
            _query_params.append(('highlight', highlight))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if var_class is not None:
            
            _query_params.append(('class', var_class))
            
        if codelist is not None:
            
            _query_params.append(('codelist', codelist))
            
        if concept_id is not None:
            
            _query_params.append(('conceptId', concept_id))
            
        if core is not None:
            
            _query_params.append(('core', core))
            
        if data_structure is not None:
            
            _query_params.append(('dataStructure', data_structure))
            
        if dataset_structure is not None:
            
            _query_params.append(('datasetStructure', dataset_structure))
            
        if definition is not None:
            
            _query_params.append(('definition', definition))
            
        if description is not None:
            
            _query_params.append(('description', description))
            
        if domain is not None:
            
            _query_params.append(('domain', domain))
            
        if effective_date is not None:
            
            _query_params.append(('effectiveDate', effective_date))
            
        if extensible is not None:
            
            _query_params.append(('extensible', extensible))
            
        if href is not None:
            
            _query_params.append(('href', href))
            
        if label is not None:
            
            _query_params.append(('label', label))
            
        if measure_type is not None:
            
            _query_params.append(('measureType', measure_type))
            
        if name is not None:
            
            _query_params.append(('name', name))
            
        if preferred_term is not None:
            
            _query_params.append(('preferredTerm', preferred_term))
            
        if product is not None:
            
            _query_params.append(('product', product))
            
        if product_group is not None:
            
            _query_params.append(('productGroup', product_group))
            
        if registration_status is not None:
            
            _query_params.append(('registrationStatus', registration_status))
            
        if role_description is not None:
            
            _query_params.append(('roleDescription', role_description))
            
        if sdtm_target is not None:
            
            _query_params.append(('sdtmTarget', sdtm_target))
            
        if simple_datatype is not None:
            
            _query_params.append(('simpleDatatype', simple_datatype))
            
        if submission_value is not None:
            
            _query_params.append(('submissionValue', submission_value))
            
        if synonyms is not None:
            
            _query_params.append(('synonyms', synonyms))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if ui_href is not None:
            
            _query_params.append(('uiHref', ui_href))
            
        if value_domain is not None:
            
            _query_params.append(('valueDomain', value_domain))
            
        if variable_set is not None:
            
            _query_params.append(('variableSet', variable_set))
            
        if version is not None:
            
            _query_params.append(('version', version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/mdr/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def mdr_search_scopes_get(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> MdrSearchScopesGet200Response:
        """mdr_search_scopes_get

        Get Search Results Across CDISC Library

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mdr_search_scopes_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MdrSearchScopesGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def mdr_search_scopes_get_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[MdrSearchScopesGet200Response]:
        """mdr_search_scopes_get

        Get Search Results Across CDISC Library

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mdr_search_scopes_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MdrSearchScopesGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def mdr_search_scopes_get_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """mdr_search_scopes_get

        Get Search Results Across CDISC Library

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mdr_search_scopes_get_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "MdrSearchScopesGet200Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _mdr_search_scopes_get_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/mdr/search/scopes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def mdr_search_scopes_scope_get(
        self,
        scope: Annotated[DefaultSearchScopes, Field(description="Search Scope")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ScopeValues:
        """mdr_search_scopes_scope_get

        Get Search Results Limited to Scope

        :param scope: Search Scope (required)
        :type scope: DefaultSearchScopes
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mdr_search_scopes_scope_get_serialize(
            scope=scope,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ScopeValues",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def mdr_search_scopes_scope_get_with_http_info(
        self,
        scope: Annotated[DefaultSearchScopes, Field(description="Search Scope")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ScopeValues]:
        """mdr_search_scopes_scope_get

        Get Search Results Limited to Scope

        :param scope: Search Scope (required)
        :type scope: DefaultSearchScopes
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mdr_search_scopes_scope_get_serialize(
            scope=scope,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ScopeValues",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def mdr_search_scopes_scope_get_without_preload_content(
        self,
        scope: Annotated[DefaultSearchScopes, Field(description="Search Scope")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """mdr_search_scopes_scope_get

        Get Search Results Limited to Scope

        :param scope: Search Scope (required)
        :type scope: DefaultSearchScopes
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._mdr_search_scopes_scope_get_serialize(
            scope=scope,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ScopeValues",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _mdr_search_scopes_scope_get_serialize(
        self,
        scope,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if scope is not None:
            _path_params['scope'] = scope.value
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'basicAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/mdr/search/scopes/{scope}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



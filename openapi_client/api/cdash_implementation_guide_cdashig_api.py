# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr

from openapi_client.models.cdashig_class import CdashigClass
from openapi_client.models.cdashig_class_domains import CdashigClassDomains
from openapi_client.models.cdashig_class_scenarios import CdashigClassScenarios
from openapi_client.models.cdashig_domain import CdashigDomain
from openapi_client.models.cdashig_domain_field import CdashigDomainField
from openapi_client.models.cdashig_domain_fields import CdashigDomainFields
from openapi_client.models.cdashig_product import CdashigProduct
from openapi_client.models.cdashig_product_classes import CdashigProductClasses
from openapi_client.models.cdashig_product_domains import CdashigProductDomains
from openapi_client.models.cdashig_product_scenarios import CdashigProductScenarios
from openapi_client.models.cdashig_scenario import CdashigScenario
from openapi_client.models.cdashig_scenario_field import CdashigScenarioField
from openapi_client.models.cdashig_scenario_fields import CdashigScenarioFields
from openapi_client.models.root_cdashig_domain_field import RootCdashigDomainField
from openapi_client.models.root_cdashig_scenario_field import RootCdashigScenarioField

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class CDASHImplementationGuideCDASHIGApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def mdr_cdashig_version_classes_class_domains_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], var_class : Annotated[StrictStr, Field(..., description="CDASHIG Class Identifier")], **kwargs) -> CdashigClassDomains:  # noqa: E501
        """mdr_cdashig_version_classes_class_domains_get  # noqa: E501

        Get CDASHIG Class Domain List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_classes_class_domains_get(version, var_class, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param var_class: CDASHIG Class Identifier (required)
        :type var_class: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CdashigClassDomains
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_cdashig_version_classes_class_domains_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_cdashig_version_classes_class_domains_get_with_http_info(version, var_class, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_cdashig_version_classes_class_domains_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], var_class : Annotated[StrictStr, Field(..., description="CDASHIG Class Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_cdashig_version_classes_class_domains_get  # noqa: E501

        Get CDASHIG Class Domain List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_classes_class_domains_get_with_http_info(version, var_class, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param var_class: CDASHIG Class Identifier (required)
        :type var_class: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CdashigClassDomains, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version',
            'var_class'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_cdashig_version_classes_class_domains_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']

        if _params['var_class'] is not None:
            _path_params['class'] = _params['var_class']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "CdashigClassDomains",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/cdashig/{version}/classes/{class}/domains', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_cdashig_version_classes_class_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], var_class : Annotated[StrictStr, Field(..., description="CDASHIG Class Identifier")], **kwargs) -> CdashigClass:  # noqa: E501
        """mdr_cdashig_version_classes_class_get  # noqa: E501

        Get CDASHIG Class  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_classes_class_get(version, var_class, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param var_class: CDASHIG Class Identifier (required)
        :type var_class: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CdashigClass
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_cdashig_version_classes_class_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_cdashig_version_classes_class_get_with_http_info(version, var_class, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_cdashig_version_classes_class_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], var_class : Annotated[StrictStr, Field(..., description="CDASHIG Class Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_cdashig_version_classes_class_get  # noqa: E501

        Get CDASHIG Class  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_classes_class_get_with_http_info(version, var_class, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param var_class: CDASHIG Class Identifier (required)
        :type var_class: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CdashigClass, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version',
            'var_class'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_cdashig_version_classes_class_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']

        if _params['var_class'] is not None:
            _path_params['class'] = _params['var_class']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "CdashigClass",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/cdashig/{version}/classes/{class}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_cdashig_version_classes_class_scenarios_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], var_class : Annotated[StrictStr, Field(..., description="CDASHIG Class Identifier")], **kwargs) -> CdashigClassScenarios:  # noqa: E501
        """mdr_cdashig_version_classes_class_scenarios_get  # noqa: E501

        Get CDASHIG Class Scenario List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_classes_class_scenarios_get(version, var_class, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param var_class: CDASHIG Class Identifier (required)
        :type var_class: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CdashigClassScenarios
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_cdashig_version_classes_class_scenarios_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_cdashig_version_classes_class_scenarios_get_with_http_info(version, var_class, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_cdashig_version_classes_class_scenarios_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], var_class : Annotated[StrictStr, Field(..., description="CDASHIG Class Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_cdashig_version_classes_class_scenarios_get  # noqa: E501

        Get CDASHIG Class Scenario List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_classes_class_scenarios_get_with_http_info(version, var_class, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param var_class: CDASHIG Class Identifier (required)
        :type var_class: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CdashigClassScenarios, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version',
            'var_class'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_cdashig_version_classes_class_scenarios_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']

        if _params['var_class'] is not None:
            _path_params['class'] = _params['var_class']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "CdashigClassScenarios",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/cdashig/{version}/classes/{class}/scenarios', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_cdashig_version_classes_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], **kwargs) -> CdashigProductClasses:  # noqa: E501
        """mdr_cdashig_version_classes_get  # noqa: E501

        Get CDASHIG Class List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_classes_get(version, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CdashigProductClasses
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_cdashig_version_classes_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_cdashig_version_classes_get_with_http_info(version, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_cdashig_version_classes_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_cdashig_version_classes_get  # noqa: E501

        Get CDASHIG Class List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_classes_get_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CdashigProductClasses, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_cdashig_version_classes_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "CdashigProductClasses",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/cdashig/{version}/classes', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_cdashig_version_domains_domain_fields_field_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], domain : Annotated[StrictStr, Field(..., description="CDASHIG Domain Identifier")], field : Annotated[StrictStr, Field(..., description="CDASHIG Field Identifier")], **kwargs) -> CdashigDomainField:  # noqa: E501
        """mdr_cdashig_version_domains_domain_fields_field_get  # noqa: E501

        Get CDASHIG Domain Field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_domains_domain_fields_field_get(version, domain, field, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param domain: CDASHIG Domain Identifier (required)
        :type domain: str
        :param field: CDASHIG Field Identifier (required)
        :type field: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CdashigDomainField
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_cdashig_version_domains_domain_fields_field_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_cdashig_version_domains_domain_fields_field_get_with_http_info(version, domain, field, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_cdashig_version_domains_domain_fields_field_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], domain : Annotated[StrictStr, Field(..., description="CDASHIG Domain Identifier")], field : Annotated[StrictStr, Field(..., description="CDASHIG Field Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_cdashig_version_domains_domain_fields_field_get  # noqa: E501

        Get CDASHIG Domain Field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_domains_domain_fields_field_get_with_http_info(version, domain, field, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param domain: CDASHIG Domain Identifier (required)
        :type domain: str
        :param field: CDASHIG Field Identifier (required)
        :type field: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CdashigDomainField, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version',
            'domain',
            'field'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_cdashig_version_domains_domain_fields_field_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']

        if _params['domain'] is not None:
            _path_params['domain'] = _params['domain']

        if _params['field'] is not None:
            _path_params['field'] = _params['field']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "CdashigDomainField",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/cdashig/{version}/domains/{domain}/fields/{field}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_cdashig_version_domains_domain_fields_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], domain : Annotated[StrictStr, Field(..., description="CDASHIG Domain Identifier")], **kwargs) -> CdashigDomainFields:  # noqa: E501
        """mdr_cdashig_version_domains_domain_fields_get  # noqa: E501

        Get CDASHIG Domain Field List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_domains_domain_fields_get(version, domain, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param domain: CDASHIG Domain Identifier (required)
        :type domain: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CdashigDomainFields
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_cdashig_version_domains_domain_fields_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_cdashig_version_domains_domain_fields_get_with_http_info(version, domain, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_cdashig_version_domains_domain_fields_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], domain : Annotated[StrictStr, Field(..., description="CDASHIG Domain Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_cdashig_version_domains_domain_fields_get  # noqa: E501

        Get CDASHIG Domain Field List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_domains_domain_fields_get_with_http_info(version, domain, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param domain: CDASHIG Domain Identifier (required)
        :type domain: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CdashigDomainFields, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version',
            'domain'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_cdashig_version_domains_domain_fields_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']

        if _params['domain'] is not None:
            _path_params['domain'] = _params['domain']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "CdashigDomainFields",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/cdashig/{version}/domains/{domain}/fields', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_cdashig_version_domains_domain_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], domain : Annotated[StrictStr, Field(..., description="CDASHIG Domain Identifier")], **kwargs) -> CdashigDomain:  # noqa: E501
        """mdr_cdashig_version_domains_domain_get  # noqa: E501

        Get CDASHIG Domain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_domains_domain_get(version, domain, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param domain: CDASHIG Domain Identifier (required)
        :type domain: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CdashigDomain
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_cdashig_version_domains_domain_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_cdashig_version_domains_domain_get_with_http_info(version, domain, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_cdashig_version_domains_domain_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], domain : Annotated[StrictStr, Field(..., description="CDASHIG Domain Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_cdashig_version_domains_domain_get  # noqa: E501

        Get CDASHIG Domain  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_domains_domain_get_with_http_info(version, domain, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param domain: CDASHIG Domain Identifier (required)
        :type domain: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CdashigDomain, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version',
            'domain'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_cdashig_version_domains_domain_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']

        if _params['domain'] is not None:
            _path_params['domain'] = _params['domain']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "CdashigDomain",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/cdashig/{version}/domains/{domain}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_cdashig_version_domains_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], **kwargs) -> CdashigProductDomains:  # noqa: E501
        """mdr_cdashig_version_domains_get  # noqa: E501

        Get CDASHIG Domain List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_domains_get(version, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CdashigProductDomains
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_cdashig_version_domains_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_cdashig_version_domains_get_with_http_info(version, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_cdashig_version_domains_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_cdashig_version_domains_get  # noqa: E501

        Get CDASHIG Domain List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_domains_get_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CdashigProductDomains, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_cdashig_version_domains_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "CdashigProductDomains",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/cdashig/{version}/domains', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_cdashig_version_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], **kwargs) -> CdashigProduct:  # noqa: E501
        """mdr_cdashig_version_get  # noqa: E501

        Get CDASHIG Product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_get(version, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CdashigProduct
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_cdashig_version_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_cdashig_version_get_with_http_info(version, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_cdashig_version_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_cdashig_version_get  # noqa: E501

        Get CDASHIG Product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_get_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CdashigProduct, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_cdashig_version_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "CdashigProduct",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/cdashig/{version}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_cdashig_version_scenarios_domain_scenario_fields_field_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], domain : Annotated[StrictStr, Field(..., description="CDASHIG Domain Identifier")], scenario : Annotated[StrictStr, Field(..., description="CDASHIG Scenario Identifier")], field : Annotated[StrictStr, Field(..., description="CDASHIG Field Identifier")], **kwargs) -> CdashigScenarioField:  # noqa: E501
        """mdr_cdashig_version_scenarios_domain_scenario_fields_field_get  # noqa: E501

        Get CDASHIG Scenario Field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_scenarios_domain_scenario_fields_field_get(version, domain, scenario, field, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param domain: CDASHIG Domain Identifier (required)
        :type domain: str
        :param scenario: CDASHIG Scenario Identifier (required)
        :type scenario: str
        :param field: CDASHIG Field Identifier (required)
        :type field: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CdashigScenarioField
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_cdashig_version_scenarios_domain_scenario_fields_field_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_cdashig_version_scenarios_domain_scenario_fields_field_get_with_http_info(version, domain, scenario, field, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_cdashig_version_scenarios_domain_scenario_fields_field_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], domain : Annotated[StrictStr, Field(..., description="CDASHIG Domain Identifier")], scenario : Annotated[StrictStr, Field(..., description="CDASHIG Scenario Identifier")], field : Annotated[StrictStr, Field(..., description="CDASHIG Field Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_cdashig_version_scenarios_domain_scenario_fields_field_get  # noqa: E501

        Get CDASHIG Scenario Field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_scenarios_domain_scenario_fields_field_get_with_http_info(version, domain, scenario, field, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param domain: CDASHIG Domain Identifier (required)
        :type domain: str
        :param scenario: CDASHIG Scenario Identifier (required)
        :type scenario: str
        :param field: CDASHIG Field Identifier (required)
        :type field: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CdashigScenarioField, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version',
            'domain',
            'scenario',
            'field'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_cdashig_version_scenarios_domain_scenario_fields_field_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']

        if _params['domain'] is not None:
            _path_params['domain'] = _params['domain']

        if _params['scenario'] is not None:
            _path_params['scenario'] = _params['scenario']

        if _params['field'] is not None:
            _path_params['field'] = _params['field']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "CdashigScenarioField",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields/{field}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_cdashig_version_scenarios_domain_scenario_fields_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], domain : Annotated[StrictStr, Field(..., description="CDASHIG Domain Identifier")], scenario : Annotated[StrictStr, Field(..., description="CDASHIG Scenario Identifier")], **kwargs) -> CdashigScenarioFields:  # noqa: E501
        """mdr_cdashig_version_scenarios_domain_scenario_fields_get  # noqa: E501

        Get CDASHIG Scenario Field List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_scenarios_domain_scenario_fields_get(version, domain, scenario, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param domain: CDASHIG Domain Identifier (required)
        :type domain: str
        :param scenario: CDASHIG Scenario Identifier (required)
        :type scenario: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CdashigScenarioFields
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_cdashig_version_scenarios_domain_scenario_fields_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_cdashig_version_scenarios_domain_scenario_fields_get_with_http_info(version, domain, scenario, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_cdashig_version_scenarios_domain_scenario_fields_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], domain : Annotated[StrictStr, Field(..., description="CDASHIG Domain Identifier")], scenario : Annotated[StrictStr, Field(..., description="CDASHIG Scenario Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_cdashig_version_scenarios_domain_scenario_fields_get  # noqa: E501

        Get CDASHIG Scenario Field List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_scenarios_domain_scenario_fields_get_with_http_info(version, domain, scenario, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param domain: CDASHIG Domain Identifier (required)
        :type domain: str
        :param scenario: CDASHIG Scenario Identifier (required)
        :type scenario: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CdashigScenarioFields, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version',
            'domain',
            'scenario'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_cdashig_version_scenarios_domain_scenario_fields_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']

        if _params['domain'] is not None:
            _path_params['domain'] = _params['domain']

        if _params['scenario'] is not None:
            _path_params['scenario'] = _params['scenario']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "CdashigScenarioFields",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_cdashig_version_scenarios_domain_scenario_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], domain : Annotated[StrictStr, Field(..., description="CDASHIG Domain Identifier")], scenario : Annotated[StrictStr, Field(..., description="CDASHIG Scenario Identifier")], **kwargs) -> CdashigScenario:  # noqa: E501
        """mdr_cdashig_version_scenarios_domain_scenario_get  # noqa: E501

        Get CDASHIG Scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_scenarios_domain_scenario_get(version, domain, scenario, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param domain: CDASHIG Domain Identifier (required)
        :type domain: str
        :param scenario: CDASHIG Scenario Identifier (required)
        :type scenario: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CdashigScenario
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_cdashig_version_scenarios_domain_scenario_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_cdashig_version_scenarios_domain_scenario_get_with_http_info(version, domain, scenario, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_cdashig_version_scenarios_domain_scenario_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], domain : Annotated[StrictStr, Field(..., description="CDASHIG Domain Identifier")], scenario : Annotated[StrictStr, Field(..., description="CDASHIG Scenario Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_cdashig_version_scenarios_domain_scenario_get  # noqa: E501

        Get CDASHIG Scenario  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_scenarios_domain_scenario_get_with_http_info(version, domain, scenario, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param domain: CDASHIG Domain Identifier (required)
        :type domain: str
        :param scenario: CDASHIG Scenario Identifier (required)
        :type scenario: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CdashigScenario, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version',
            'domain',
            'scenario'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_cdashig_version_scenarios_domain_scenario_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']

        if _params['domain'] is not None:
            _path_params['domain'] = _params['domain']

        if _params['scenario'] is not None:
            _path_params['scenario'] = _params['scenario']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "CdashigScenario",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/cdashig/{version}/scenarios/{domain}.{scenario}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_cdashig_version_scenarios_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], **kwargs) -> CdashigProductScenarios:  # noqa: E501
        """mdr_cdashig_version_scenarios_get  # noqa: E501

        Get CDASHIG Scenario List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_scenarios_get(version, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CdashigProductScenarios
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_cdashig_version_scenarios_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_cdashig_version_scenarios_get_with_http_info(version, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_cdashig_version_scenarios_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_cdashig_version_scenarios_get  # noqa: E501

        Get CDASHIG Scenario List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_cdashig_version_scenarios_get_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CdashigProductScenarios, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_cdashig_version_scenarios_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "CdashigProductScenarios",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/cdashig/{version}/scenarios', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_root_cdashig_domains_domain_fields_field_get(self, domain : Annotated[StrictStr, Field(..., description="CDASHIG Domain Identifier")], field : Annotated[StrictStr, Field(..., description="CDASHIG Field Identifier")], **kwargs) -> RootCdashigDomainField:  # noqa: E501
        """mdr_root_cdashig_domains_domain_fields_field_get  # noqa: E501

        Get Root CDASHIG Domain Field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_root_cdashig_domains_domain_fields_field_get(domain, field, async_req=True)
        >>> result = thread.get()

        :param domain: CDASHIG Domain Identifier (required)
        :type domain: str
        :param field: CDASHIG Field Identifier (required)
        :type field: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RootCdashigDomainField
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_root_cdashig_domains_domain_fields_field_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_root_cdashig_domains_domain_fields_field_get_with_http_info(domain, field, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_root_cdashig_domains_domain_fields_field_get_with_http_info(self, domain : Annotated[StrictStr, Field(..., description="CDASHIG Domain Identifier")], field : Annotated[StrictStr, Field(..., description="CDASHIG Field Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_root_cdashig_domains_domain_fields_field_get  # noqa: E501

        Get Root CDASHIG Domain Field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_root_cdashig_domains_domain_fields_field_get_with_http_info(domain, field, async_req=True)
        >>> result = thread.get()

        :param domain: CDASHIG Domain Identifier (required)
        :type domain: str
        :param field: CDASHIG Field Identifier (required)
        :type field: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RootCdashigDomainField, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'domain',
            'field'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_root_cdashig_domains_domain_fields_field_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['domain'] is not None:
            _path_params['domain'] = _params['domain']

        if _params['field'] is not None:
            _path_params['field'] = _params['field']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "RootCdashigDomainField",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/root/cdashig/domains/{domain}/fields/{field}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_root_cdashig_scenarios_domain_scenario_fields_field_get(self, domain : Annotated[StrictStr, Field(..., description="CDASHIG Domain Identifier")], scenario : Annotated[StrictStr, Field(..., description="CDASHIG Scenario Identifier")], field : Annotated[StrictStr, Field(..., description="CDASHIG Field Identifier")], **kwargs) -> RootCdashigScenarioField:  # noqa: E501
        """mdr_root_cdashig_scenarios_domain_scenario_fields_field_get  # noqa: E501

        Get Root CDASHIG Scenario Field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_root_cdashig_scenarios_domain_scenario_fields_field_get(domain, scenario, field, async_req=True)
        >>> result = thread.get()

        :param domain: CDASHIG Domain Identifier (required)
        :type domain: str
        :param scenario: CDASHIG Scenario Identifier (required)
        :type scenario: str
        :param field: CDASHIG Field Identifier (required)
        :type field: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RootCdashigScenarioField
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_root_cdashig_scenarios_domain_scenario_fields_field_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_root_cdashig_scenarios_domain_scenario_fields_field_get_with_http_info(domain, scenario, field, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_root_cdashig_scenarios_domain_scenario_fields_field_get_with_http_info(self, domain : Annotated[StrictStr, Field(..., description="CDASHIG Domain Identifier")], scenario : Annotated[StrictStr, Field(..., description="CDASHIG Scenario Identifier")], field : Annotated[StrictStr, Field(..., description="CDASHIG Field Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_root_cdashig_scenarios_domain_scenario_fields_field_get  # noqa: E501

        Get Root CDASHIG Scenario Field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_root_cdashig_scenarios_domain_scenario_fields_field_get_with_http_info(domain, scenario, field, async_req=True)
        >>> result = thread.get()

        :param domain: CDASHIG Domain Identifier (required)
        :type domain: str
        :param scenario: CDASHIG Scenario Identifier (required)
        :type scenario: str
        :param field: CDASHIG Field Identifier (required)
        :type field: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RootCdashigScenarioField, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'domain',
            'scenario',
            'field'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_root_cdashig_scenarios_domain_scenario_fields_field_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['domain'] is not None:
            _path_params['domain'] = _params['domain']

        if _params['scenario'] is not None:
            _path_params['scenario'] = _params['scenario']

        if _params['field'] is not None:
            _path_params['field'] = _params['field']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "RootCdashigScenarioField",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/root/cdashig/scenarios/{domain}.{scenario}/fields/{field}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr

from openapi_client.models.ct_codelist import CtCodelist
from openapi_client.models.ct_codelist_terms import CtCodelistTerms
from openapi_client.models.ct_package import CtPackage
from openapi_client.models.ct_package_codelists import CtPackageCodelists
from openapi_client.models.ct_packages import CtPackages
from openapi_client.models.ct_term import CtTerm
from openapi_client.models.root_ct_codelist import RootCtCodelist
from openapi_client.models.root_ct_term import RootCtTerm

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ControlledTerminologyCTApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def mdr_ct_packages_get(self, **kwargs) -> CtPackages:  # noqa: E501
        """mdr_ct_packages_get  # noqa: E501

        Get CDISC Library CT Package List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_ct_packages_get(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CtPackages
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_ct_packages_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_ct_packages_get_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def mdr_ct_packages_get_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_ct_packages_get  # noqa: E501

        Get CDISC Library CT Package List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_ct_packages_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CtPackages, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_ct_packages_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "CtPackages",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/ct/packages', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_ct_packages_package_codelists_codelist_get(self, package : Annotated[StrictStr, Field(..., description="CT Package Identifier")], codelist : Annotated[StrictStr, Field(..., description="CT Codelist Identifier")], **kwargs) -> CtCodelist:  # noqa: E501
        """mdr_ct_packages_package_codelists_codelist_get  # noqa: E501

        Get CDISC Library CT Package Codelist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_ct_packages_package_codelists_codelist_get(package, codelist, async_req=True)
        >>> result = thread.get()

        :param package: CT Package Identifier (required)
        :type package: str
        :param codelist: CT Codelist Identifier (required)
        :type codelist: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CtCodelist
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_ct_packages_package_codelists_codelist_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_ct_packages_package_codelists_codelist_get_with_http_info(package, codelist, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_ct_packages_package_codelists_codelist_get_with_http_info(self, package : Annotated[StrictStr, Field(..., description="CT Package Identifier")], codelist : Annotated[StrictStr, Field(..., description="CT Codelist Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_ct_packages_package_codelists_codelist_get  # noqa: E501

        Get CDISC Library CT Package Codelist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_ct_packages_package_codelists_codelist_get_with_http_info(package, codelist, async_req=True)
        >>> result = thread.get()

        :param package: CT Package Identifier (required)
        :type package: str
        :param codelist: CT Codelist Identifier (required)
        :type codelist: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CtCodelist, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'package',
            'codelist'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_ct_packages_package_codelists_codelist_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['package'] is not None:
            _path_params['package'] = _params['package']

        if _params['codelist'] is not None:
            _path_params['codelist'] = _params['codelist']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "CtCodelist",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/ct/packages/{package}/codelists/{codelist}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_ct_packages_package_codelists_codelist_terms_get(self, package : Annotated[StrictStr, Field(..., description="CT Package Identifier")], codelist : Annotated[StrictStr, Field(..., description="CT Codelist Identifier")], **kwargs) -> CtCodelistTerms:  # noqa: E501
        """mdr_ct_packages_package_codelists_codelist_terms_get  # noqa: E501

        Get CDISC Library CT Package Codelist Term List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_ct_packages_package_codelists_codelist_terms_get(package, codelist, async_req=True)
        >>> result = thread.get()

        :param package: CT Package Identifier (required)
        :type package: str
        :param codelist: CT Codelist Identifier (required)
        :type codelist: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CtCodelistTerms
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_ct_packages_package_codelists_codelist_terms_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_ct_packages_package_codelists_codelist_terms_get_with_http_info(package, codelist, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_ct_packages_package_codelists_codelist_terms_get_with_http_info(self, package : Annotated[StrictStr, Field(..., description="CT Package Identifier")], codelist : Annotated[StrictStr, Field(..., description="CT Codelist Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_ct_packages_package_codelists_codelist_terms_get  # noqa: E501

        Get CDISC Library CT Package Codelist Term List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_ct_packages_package_codelists_codelist_terms_get_with_http_info(package, codelist, async_req=True)
        >>> result = thread.get()

        :param package: CT Package Identifier (required)
        :type package: str
        :param codelist: CT Codelist Identifier (required)
        :type codelist: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CtCodelistTerms, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'package',
            'codelist'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_ct_packages_package_codelists_codelist_terms_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['package'] is not None:
            _path_params['package'] = _params['package']

        if _params['codelist'] is not None:
            _path_params['codelist'] = _params['codelist']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "CtCodelistTerms",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/ct/packages/{package}/codelists/{codelist}/terms', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_ct_packages_package_codelists_codelist_terms_term_get(self, package : Annotated[StrictStr, Field(..., description="CT Package Product Identifier")], codelist : Annotated[StrictStr, Field(..., description="CT Codelist Identifier")], term : Annotated[StrictStr, Field(..., description="CT Codelist Term Identifier")], **kwargs) -> CtTerm:  # noqa: E501
        """mdr_ct_packages_package_codelists_codelist_terms_term_get  # noqa: E501

        Get CDISC Library CT Package Codelist Term  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_ct_packages_package_codelists_codelist_terms_term_get(package, codelist, term, async_req=True)
        >>> result = thread.get()

        :param package: CT Package Product Identifier (required)
        :type package: str
        :param codelist: CT Codelist Identifier (required)
        :type codelist: str
        :param term: CT Codelist Term Identifier (required)
        :type term: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CtTerm
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_ct_packages_package_codelists_codelist_terms_term_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_ct_packages_package_codelists_codelist_terms_term_get_with_http_info(package, codelist, term, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_ct_packages_package_codelists_codelist_terms_term_get_with_http_info(self, package : Annotated[StrictStr, Field(..., description="CT Package Product Identifier")], codelist : Annotated[StrictStr, Field(..., description="CT Codelist Identifier")], term : Annotated[StrictStr, Field(..., description="CT Codelist Term Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_ct_packages_package_codelists_codelist_terms_term_get  # noqa: E501

        Get CDISC Library CT Package Codelist Term  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_ct_packages_package_codelists_codelist_terms_term_get_with_http_info(package, codelist, term, async_req=True)
        >>> result = thread.get()

        :param package: CT Package Product Identifier (required)
        :type package: str
        :param codelist: CT Codelist Identifier (required)
        :type codelist: str
        :param term: CT Codelist Term Identifier (required)
        :type term: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CtTerm, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'package',
            'codelist',
            'term'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_ct_packages_package_codelists_codelist_terms_term_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['package'] is not None:
            _path_params['package'] = _params['package']

        if _params['codelist'] is not None:
            _path_params['codelist'] = _params['codelist']

        if _params['term'] is not None:
            _path_params['term'] = _params['term']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "CtTerm",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/ct/packages/{package}/codelists/{codelist}/terms/{term}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_ct_packages_package_codelists_get(self, package : Annotated[StrictStr, Field(..., description="CT Package Identifier")], **kwargs) -> CtPackageCodelists:  # noqa: E501
        """mdr_ct_packages_package_codelists_get  # noqa: E501

        Get CDISC Library CT Package Codelist List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_ct_packages_package_codelists_get(package, async_req=True)
        >>> result = thread.get()

        :param package: CT Package Identifier (required)
        :type package: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CtPackageCodelists
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_ct_packages_package_codelists_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_ct_packages_package_codelists_get_with_http_info(package, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_ct_packages_package_codelists_get_with_http_info(self, package : Annotated[StrictStr, Field(..., description="CT Package Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_ct_packages_package_codelists_get  # noqa: E501

        Get CDISC Library CT Package Codelist List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_ct_packages_package_codelists_get_with_http_info(package, async_req=True)
        >>> result = thread.get()

        :param package: CT Package Identifier (required)
        :type package: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CtPackageCodelists, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'package'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_ct_packages_package_codelists_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['package'] is not None:
            _path_params['package'] = _params['package']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "CtPackageCodelists",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/ct/packages/{package}/codelists', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_ct_packages_product_get(self, product : Annotated[StrictStr, Field(..., description="CT Package Product Identifier")], **kwargs) -> CtPackage:  # noqa: E501
        """mdr_ct_packages_product_get  # noqa: E501

        Get CDISC Library CT Package  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_ct_packages_product_get(product, async_req=True)
        >>> result = thread.get()

        :param product: CT Package Product Identifier (required)
        :type product: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CtPackage
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_ct_packages_product_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_ct_packages_product_get_with_http_info(product, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_ct_packages_product_get_with_http_info(self, product : Annotated[StrictStr, Field(..., description="CT Package Product Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_ct_packages_product_get  # noqa: E501

        Get CDISC Library CT Package  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_ct_packages_product_get_with_http_info(product, async_req=True)
        >>> result = thread.get()

        :param product: CT Package Product Identifier (required)
        :type product: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CtPackage, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'product'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_ct_packages_product_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['product'] is not None:
            _path_params['product'] = _params['product']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "CtPackage",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/ct/packages/{product}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_root_ct_product_group_codelists_codelist_get(self, product_group : Annotated[StrictStr, Field(..., description="CT Product Group Identifier")], codelist : Annotated[StrictStr, Field(..., description="CT Codelist Identifier")], **kwargs) -> RootCtCodelist:  # noqa: E501
        """mdr_root_ct_product_group_codelists_codelist_get  # noqa: E501

        Get CDISC Library Root CT Codelist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_root_ct_product_group_codelists_codelist_get(product_group, codelist, async_req=True)
        >>> result = thread.get()

        :param product_group: CT Product Group Identifier (required)
        :type product_group: str
        :param codelist: CT Codelist Identifier (required)
        :type codelist: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RootCtCodelist
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_root_ct_product_group_codelists_codelist_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_root_ct_product_group_codelists_codelist_get_with_http_info(product_group, codelist, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_root_ct_product_group_codelists_codelist_get_with_http_info(self, product_group : Annotated[StrictStr, Field(..., description="CT Product Group Identifier")], codelist : Annotated[StrictStr, Field(..., description="CT Codelist Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_root_ct_product_group_codelists_codelist_get  # noqa: E501

        Get CDISC Library Root CT Codelist  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_root_ct_product_group_codelists_codelist_get_with_http_info(product_group, codelist, async_req=True)
        >>> result = thread.get()

        :param product_group: CT Product Group Identifier (required)
        :type product_group: str
        :param codelist: CT Codelist Identifier (required)
        :type codelist: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RootCtCodelist, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'product_group',
            'codelist'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_root_ct_product_group_codelists_codelist_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['product_group'] is not None:
            _path_params['productGroup'] = _params['product_group']

        if _params['codelist'] is not None:
            _path_params['codelist'] = _params['codelist']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "RootCtCodelist",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/root/ct/{productGroup}/codelists/{codelist}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_root_ct_product_group_codelists_codelist_terms_term_get(self, product_group : Annotated[StrictStr, Field(..., description="CT Product Group Identifier")], codelist : Annotated[StrictStr, Field(..., description="CT Codelist Identifier")], term : Annotated[StrictStr, Field(..., description="CT Codelist Term Identifier")], **kwargs) -> RootCtTerm:  # noqa: E501
        """mdr_root_ct_product_group_codelists_codelist_terms_term_get  # noqa: E501

        Get CDISC Library Root CT Term  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_root_ct_product_group_codelists_codelist_terms_term_get(product_group, codelist, term, async_req=True)
        >>> result = thread.get()

        :param product_group: CT Product Group Identifier (required)
        :type product_group: str
        :param codelist: CT Codelist Identifier (required)
        :type codelist: str
        :param term: CT Codelist Term Identifier (required)
        :type term: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RootCtTerm
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_root_ct_product_group_codelists_codelist_terms_term_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_root_ct_product_group_codelists_codelist_terms_term_get_with_http_info(product_group, codelist, term, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_root_ct_product_group_codelists_codelist_terms_term_get_with_http_info(self, product_group : Annotated[StrictStr, Field(..., description="CT Product Group Identifier")], codelist : Annotated[StrictStr, Field(..., description="CT Codelist Identifier")], term : Annotated[StrictStr, Field(..., description="CT Codelist Term Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_root_ct_product_group_codelists_codelist_terms_term_get  # noqa: E501

        Get CDISC Library Root CT Term  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_root_ct_product_group_codelists_codelist_terms_term_get_with_http_info(product_group, codelist, term, async_req=True)
        >>> result = thread.get()

        :param product_group: CT Product Group Identifier (required)
        :type product_group: str
        :param codelist: CT Codelist Identifier (required)
        :type codelist: str
        :param term: CT Codelist Term Identifier (required)
        :type term: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RootCtTerm, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'product_group',
            'codelist',
            'term'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_root_ct_product_group_codelists_codelist_terms_term_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['product_group'] is not None:
            _path_params['productGroup'] = _params['product_group']

        if _params['codelist'] is not None:
            _path_params['codelist'] = _params['codelist']

        if _params['term'] is not None:
            _path_params['term'] = _params['term']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "RootCtTerm",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/root/ct/{productGroup}/codelists/{codelist}/terms/{term}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

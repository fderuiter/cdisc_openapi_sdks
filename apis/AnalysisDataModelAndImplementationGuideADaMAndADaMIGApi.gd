extends ApiBee
class_name AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, © Public Domain, 2022

# API AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi
# Instantiate this object and use it to make requests to the API.

func _bzz_get_api_name() -> String:
	return "AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi"


# Operation mdrAdamProductDatastructuresGet → GET /mdr/adam/{product}/datastructures
#
# Get ADaM Data Structure List
func mdr_adam_product_datastructures_get(
	# product: String = ""   Eg: adamig-1-1
	# CDISC Library Product
	product: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/adam/{product}/datastructures".replace("{" + "product" + "}", _bzz_urlize_path_param(product))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml', 'text/csv']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = AdamProductDatastructures.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_adam_product_datastructures_get_threaded(
	# product: String = ""   Eg: adamig-1-1
	# CDISC Library Product
	product: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_adam_product_datastructures_get")
	bzz_callable.bind(
		product,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrAdamProductDatastructuresStructureGet → GET /mdr/adam/{product}/datastructures/{structure}
#
# Get ADaM Data Structure
func mdr_adam_product_datastructures_structure_get(
	# product: String = ""   Eg: adamig-1-1
	# CDISC Library Product
	product: String,
	# structure: String = ""   Eg: ADSL
	# Data structure Identifier
	structure: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/adam/{product}/datastructures/{structure}".replace("{" + "product" + "}", _bzz_urlize_path_param(product)).replace("{" + "structure" + "}", _bzz_urlize_path_param(structure))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = AdamDatastructure.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_adam_product_datastructures_structure_get_threaded(
	# product: String = ""   Eg: adamig-1-1
	# CDISC Library Product
	product: String,
	# structure: String = ""   Eg: ADSL
	# Data structure Identifier
	structure: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_adam_product_datastructures_structure_get")
	bzz_callable.bind(
		product,
		structure,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrAdamProductDatastructuresStructureVariablesGet → GET /mdr/adam/{product}/datastructures/{structure}/variables
#
# Get ADaM Variable List
func mdr_adam_product_datastructures_structure_variables_get(
	# product: String = ""   Eg: adamig-1-1
	# CDISC Library Product
	product: String,
	# structure: String = ""   Eg: ADSL
	# ADaM Data Structure Identifier
	structure: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/adam/{product}/datastructures/{structure}/variables".replace("{" + "product" + "}", _bzz_urlize_path_param(product)).replace("{" + "structure" + "}", _bzz_urlize_path_param(structure))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = AdamDatastructureVariables.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_adam_product_datastructures_structure_variables_get_threaded(
	# product: String = ""   Eg: adamig-1-1
	# CDISC Library Product
	product: String,
	# structure: String = ""   Eg: ADSL
	# ADaM Data Structure Identifier
	structure: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_adam_product_datastructures_structure_variables_get")
	bzz_callable.bind(
		product,
		structure,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrAdamProductDatastructuresStructureVariablesVarGet → GET /mdr/adam/{product}/datastructures/{structure}/variables/{var}
#
# Get ADaM Variable
func mdr_adam_product_datastructures_structure_variables_var_get(
	# product: String = ""   Eg: adamig-1-1
	# CDISC Library Product
	product: String,
	# structure: String = ""   Eg: ADSL
	# ADaM Data Structure Identifier
	structure: String,
	# some_var: String = ""   Eg: SITEGRy
	# ADaM Variable Identifier
	some_var: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/adam/{product}/datastructures/{structure}/variables/{var}".replace("{" + "product" + "}", _bzz_urlize_path_param(product)).replace("{" + "structure" + "}", _bzz_urlize_path_param(structure)).replace("{" + "var" + "}", _bzz_urlize_path_param(some_var))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = AdamVariable.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_adam_product_datastructures_structure_variables_var_get_threaded(
	# product: String = ""   Eg: adamig-1-1
	# CDISC Library Product
	product: String,
	# structure: String = ""   Eg: ADSL
	# ADaM Data Structure Identifier
	structure: String,
	# some_var: String = ""   Eg: SITEGRy
	# ADaM Variable Identifier
	some_var: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_adam_product_datastructures_structure_variables_var_get")
	bzz_callable.bind(
		product,
		structure,
		some_var,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrAdamProductDatastructuresStructureVarsetsGet → GET /mdr/adam/{product}/datastructures/{structure}/varsets
#
# Get ADaM Variable Set List
func mdr_adam_product_datastructures_structure_varsets_get(
	# product: String = ""   Eg: adamig-1-1
	# CDISC Library Product
	product: String,
	# structure: String = ""   Eg: ADSL
	# ADaM Data Structure Identifier
	structure: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/adam/{product}/datastructures/{structure}/varsets".replace("{" + "product" + "}", _bzz_urlize_path_param(product)).replace("{" + "structure" + "}", _bzz_urlize_path_param(structure))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = AdamDatastructureVarsets.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_adam_product_datastructures_structure_varsets_get_threaded(
	# product: String = ""   Eg: adamig-1-1
	# CDISC Library Product
	product: String,
	# structure: String = ""   Eg: ADSL
	# ADaM Data Structure Identifier
	structure: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_adam_product_datastructures_structure_varsets_get")
	bzz_callable.bind(
		product,
		structure,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrAdamProductDatastructuresStructureVarsetsVarsetGet → GET /mdr/adam/{product}/datastructures/{structure}/varsets/{varset}
#
# Get ADaM Variable Set
func mdr_adam_product_datastructures_structure_varsets_varset_get(
	# product: String = ""   Eg: adamig-1-1
	# CDISC Library Product
	product: String,
	# structure: String = ""   Eg: ADSL
	# ADaM Data Structure Identifier
	structure: String,
	# varset: String = ""   Eg: Identifier
	# ADaM Variable Set Identifier
	varset: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/adam/{product}/datastructures/{structure}/varsets/{varset}".replace("{" + "product" + "}", _bzz_urlize_path_param(product)).replace("{" + "structure" + "}", _bzz_urlize_path_param(structure)).replace("{" + "varset" + "}", _bzz_urlize_path_param(varset))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = AdamVarset.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_adam_product_datastructures_structure_varsets_varset_get_threaded(
	# product: String = ""   Eg: adamig-1-1
	# CDISC Library Product
	product: String,
	# structure: String = ""   Eg: ADSL
	# ADaM Data Structure Identifier
	structure: String,
	# varset: String = ""   Eg: Identifier
	# ADaM Variable Set Identifier
	varset: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_adam_product_datastructures_structure_varsets_varset_get")
	bzz_callable.bind(
		product,
		structure,
		varset,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrAdamProductGet → GET /mdr/adam/{product}
#
# Get ADaM Product
func mdr_adam_product_get(
	# product: String = ""   Eg: adamig-1-1
	# CDISC Library Product
	product: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/adam/{product}".replace("{" + "product" + "}", _bzz_urlize_path_param(product))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = AdamProduct.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_adam_product_get_threaded(
	# product: String = ""   Eg: adamig-1-1
	# CDISC Library Product
	product: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_adam_product_get")
	bzz_callable.bind(
		product,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread



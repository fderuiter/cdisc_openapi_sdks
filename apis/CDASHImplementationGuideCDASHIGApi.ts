/* tslint:disable */
/* eslint-disable */
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdashigClass,
  CdashigClassDomains,
  CdashigClassScenarios,
  CdashigDomain,
  CdashigDomainField,
  CdashigDomainFields,
  CdashigProduct,
  CdashigProductClasses,
  CdashigProductDomains,
  CdashigProductScenarios,
  CdashigScenario,
  CdashigScenarioField,
  CdashigScenarioFields,
  DefaultErrorResponse,
  ExportCdashigTable,
  RootCdashigDomainField,
  RootCdashigScenarioField,
  XmlCdashigClass,
  XmlCdashigClassDomains,
  XmlCdashigClassScenarios,
  XmlCdashigDomain,
  XmlCdashigDomainField,
  XmlCdashigDomainFields,
  XmlCdashigProduct,
  XmlCdashigProductClasses,
  XmlCdashigProductDomains,
  XmlCdashigProductScenarios,
  XmlCdashigScenario,
  XmlCdashigScenarioField,
  XmlCdashigScenarioFields,
  XmlRootCdashigDomainField,
  XmlRootCdashigScenarioField,
} from '../models/index';
import {
    CdashigClassFromJSON,
    CdashigClassToJSON,
    CdashigClassDomainsFromJSON,
    CdashigClassDomainsToJSON,
    CdashigClassScenariosFromJSON,
    CdashigClassScenariosToJSON,
    CdashigDomainFromJSON,
    CdashigDomainToJSON,
    CdashigDomainFieldFromJSON,
    CdashigDomainFieldToJSON,
    CdashigDomainFieldsFromJSON,
    CdashigDomainFieldsToJSON,
    CdashigProductFromJSON,
    CdashigProductToJSON,
    CdashigProductClassesFromJSON,
    CdashigProductClassesToJSON,
    CdashigProductDomainsFromJSON,
    CdashigProductDomainsToJSON,
    CdashigProductScenariosFromJSON,
    CdashigProductScenariosToJSON,
    CdashigScenarioFromJSON,
    CdashigScenarioToJSON,
    CdashigScenarioFieldFromJSON,
    CdashigScenarioFieldToJSON,
    CdashigScenarioFieldsFromJSON,
    CdashigScenarioFieldsToJSON,
    DefaultErrorResponseFromJSON,
    DefaultErrorResponseToJSON,
    ExportCdashigTableFromJSON,
    ExportCdashigTableToJSON,
    RootCdashigDomainFieldFromJSON,
    RootCdashigDomainFieldToJSON,
    RootCdashigScenarioFieldFromJSON,
    RootCdashigScenarioFieldToJSON,
    XmlCdashigClassFromJSON,
    XmlCdashigClassToJSON,
    XmlCdashigClassDomainsFromJSON,
    XmlCdashigClassDomainsToJSON,
    XmlCdashigClassScenariosFromJSON,
    XmlCdashigClassScenariosToJSON,
    XmlCdashigDomainFromJSON,
    XmlCdashigDomainToJSON,
    XmlCdashigDomainFieldFromJSON,
    XmlCdashigDomainFieldToJSON,
    XmlCdashigDomainFieldsFromJSON,
    XmlCdashigDomainFieldsToJSON,
    XmlCdashigProductFromJSON,
    XmlCdashigProductToJSON,
    XmlCdashigProductClassesFromJSON,
    XmlCdashigProductClassesToJSON,
    XmlCdashigProductDomainsFromJSON,
    XmlCdashigProductDomainsToJSON,
    XmlCdashigProductScenariosFromJSON,
    XmlCdashigProductScenariosToJSON,
    XmlCdashigScenarioFromJSON,
    XmlCdashigScenarioToJSON,
    XmlCdashigScenarioFieldFromJSON,
    XmlCdashigScenarioFieldToJSON,
    XmlCdashigScenarioFieldsFromJSON,
    XmlCdashigScenarioFieldsToJSON,
    XmlRootCdashigDomainFieldFromJSON,
    XmlRootCdashigDomainFieldToJSON,
    XmlRootCdashigScenarioFieldFromJSON,
    XmlRootCdashigScenarioFieldToJSON,
} from '../models/index';

export interface MdrCdashigVersionClassesClassDomainsGetRequest {
    version: string;
    _class: string;
}

export interface MdrCdashigVersionClassesClassGetRequest {
    version: string;
    _class: string;
}

export interface MdrCdashigVersionClassesClassScenariosGetRequest {
    version: string;
    _class: string;
}

export interface MdrCdashigVersionClassesGetRequest {
    version: string;
}

export interface MdrCdashigVersionDomainsDomainFieldsFieldGetRequest {
    version: string;
    domain: string;
    field: string;
}

export interface MdrCdashigVersionDomainsDomainFieldsGetRequest {
    version: string;
    domain: string;
}

export interface MdrCdashigVersionDomainsDomainGetRequest {
    version: string;
    domain: string;
}

export interface MdrCdashigVersionDomainsGetRequest {
    version: string;
}

export interface MdrCdashigVersionGetRequest {
    version: string;
}

export interface MdrCdashigVersionScenariosDomainScenarioFieldsFieldGetRequest {
    version: string;
    domain: string;
    scenario: string;
    field: string;
}

export interface MdrCdashigVersionScenariosDomainScenarioFieldsGetRequest {
    version: string;
    domain: string;
    scenario: string;
}

export interface MdrCdashigVersionScenariosDomainScenarioGetRequest {
    version: string;
    domain: string;
    scenario: string;
}

export interface MdrCdashigVersionScenariosGetRequest {
    version: string;
}

export interface MdrRootCdashigDomainsDomainFieldsFieldGetRequest {
    domain: string;
    field: string;
}

export interface MdrRootCdashigScenariosDomainScenarioFieldsFieldGetRequest {
    domain: string;
    scenario: string;
    field: string;
}

/**
 * 
 */
export class CDASHImplementationGuideCDASHIGApi extends runtime.BaseAPI {

    /**
     * Get CDASHIG Class Domain List
     */
    async mdrCdashigVersionClassesClassDomainsGetRaw(requestParameters: MdrCdashigVersionClassesClassDomainsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CdashigClassDomains>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrCdashigVersionClassesClassDomainsGet().'
            );
        }

        if (requestParameters['_class'] == null) {
            throw new runtime.RequiredError(
                '_class',
                'Required parameter "_class" was null or undefined when calling mdrCdashigVersionClassesClassDomainsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/cdashig/{version}/classes/{class}/domains`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"class"}}`, encodeURIComponent(String(requestParameters['_class'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CdashigClassDomainsFromJSON(jsonValue));
    }

    /**
     * Get CDASHIG Class Domain List
     */
    async mdrCdashigVersionClassesClassDomainsGet(requestParameters: MdrCdashigVersionClassesClassDomainsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CdashigClassDomains> {
        const response = await this.mdrCdashigVersionClassesClassDomainsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDASHIG Class
     */
    async mdrCdashigVersionClassesClassGetRaw(requestParameters: MdrCdashigVersionClassesClassGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CdashigClass>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrCdashigVersionClassesClassGet().'
            );
        }

        if (requestParameters['_class'] == null) {
            throw new runtime.RequiredError(
                '_class',
                'Required parameter "_class" was null or undefined when calling mdrCdashigVersionClassesClassGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/cdashig/{version}/classes/{class}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"class"}}`, encodeURIComponent(String(requestParameters['_class'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CdashigClassFromJSON(jsonValue));
    }

    /**
     * Get CDASHIG Class
     */
    async mdrCdashigVersionClassesClassGet(requestParameters: MdrCdashigVersionClassesClassGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CdashigClass> {
        const response = await this.mdrCdashigVersionClassesClassGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDASHIG Class Scenario List
     */
    async mdrCdashigVersionClassesClassScenariosGetRaw(requestParameters: MdrCdashigVersionClassesClassScenariosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CdashigClassScenarios>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrCdashigVersionClassesClassScenariosGet().'
            );
        }

        if (requestParameters['_class'] == null) {
            throw new runtime.RequiredError(
                '_class',
                'Required parameter "_class" was null or undefined when calling mdrCdashigVersionClassesClassScenariosGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/cdashig/{version}/classes/{class}/scenarios`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"class"}}`, encodeURIComponent(String(requestParameters['_class'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CdashigClassScenariosFromJSON(jsonValue));
    }

    /**
     * Get CDASHIG Class Scenario List
     */
    async mdrCdashigVersionClassesClassScenariosGet(requestParameters: MdrCdashigVersionClassesClassScenariosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CdashigClassScenarios> {
        const response = await this.mdrCdashigVersionClassesClassScenariosGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDASHIG Class List
     */
    async mdrCdashigVersionClassesGetRaw(requestParameters: MdrCdashigVersionClassesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CdashigProductClasses>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrCdashigVersionClassesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/cdashig/{version}/classes`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CdashigProductClassesFromJSON(jsonValue));
    }

    /**
     * Get CDASHIG Class List
     */
    async mdrCdashigVersionClassesGet(requestParameters: MdrCdashigVersionClassesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CdashigProductClasses> {
        const response = await this.mdrCdashigVersionClassesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDASHIG Domain Field
     */
    async mdrCdashigVersionDomainsDomainFieldsFieldGetRaw(requestParameters: MdrCdashigVersionDomainsDomainFieldsFieldGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CdashigDomainField>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrCdashigVersionDomainsDomainFieldsFieldGet().'
            );
        }

        if (requestParameters['domain'] == null) {
            throw new runtime.RequiredError(
                'domain',
                'Required parameter "domain" was null or undefined when calling mdrCdashigVersionDomainsDomainFieldsFieldGet().'
            );
        }

        if (requestParameters['field'] == null) {
            throw new runtime.RequiredError(
                'field',
                'Required parameter "field" was null or undefined when calling mdrCdashigVersionDomainsDomainFieldsFieldGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/cdashig/{version}/domains/{domain}/fields/{field}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters['domain'])));
        urlPath = urlPath.replace(`{${"field"}}`, encodeURIComponent(String(requestParameters['field'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CdashigDomainFieldFromJSON(jsonValue));
    }

    /**
     * Get CDASHIG Domain Field
     */
    async mdrCdashigVersionDomainsDomainFieldsFieldGet(requestParameters: MdrCdashigVersionDomainsDomainFieldsFieldGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CdashigDomainField> {
        const response = await this.mdrCdashigVersionDomainsDomainFieldsFieldGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDASHIG Domain Field List
     */
    async mdrCdashigVersionDomainsDomainFieldsGetRaw(requestParameters: MdrCdashigVersionDomainsDomainFieldsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CdashigDomainFields>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrCdashigVersionDomainsDomainFieldsGet().'
            );
        }

        if (requestParameters['domain'] == null) {
            throw new runtime.RequiredError(
                'domain',
                'Required parameter "domain" was null or undefined when calling mdrCdashigVersionDomainsDomainFieldsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/cdashig/{version}/domains/{domain}/fields`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters['domain'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CdashigDomainFieldsFromJSON(jsonValue));
    }

    /**
     * Get CDASHIG Domain Field List
     */
    async mdrCdashigVersionDomainsDomainFieldsGet(requestParameters: MdrCdashigVersionDomainsDomainFieldsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CdashigDomainFields> {
        const response = await this.mdrCdashigVersionDomainsDomainFieldsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDASHIG Domain
     */
    async mdrCdashigVersionDomainsDomainGetRaw(requestParameters: MdrCdashigVersionDomainsDomainGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CdashigDomain>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrCdashigVersionDomainsDomainGet().'
            );
        }

        if (requestParameters['domain'] == null) {
            throw new runtime.RequiredError(
                'domain',
                'Required parameter "domain" was null or undefined when calling mdrCdashigVersionDomainsDomainGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/cdashig/{version}/domains/{domain}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters['domain'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CdashigDomainFromJSON(jsonValue));
    }

    /**
     * Get CDASHIG Domain
     */
    async mdrCdashigVersionDomainsDomainGet(requestParameters: MdrCdashigVersionDomainsDomainGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CdashigDomain> {
        const response = await this.mdrCdashigVersionDomainsDomainGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDASHIG Domain List
     */
    async mdrCdashigVersionDomainsGetRaw(requestParameters: MdrCdashigVersionDomainsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CdashigProductDomains>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrCdashigVersionDomainsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/cdashig/{version}/domains`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CdashigProductDomainsFromJSON(jsonValue));
    }

    /**
     * Get CDASHIG Domain List
     */
    async mdrCdashigVersionDomainsGet(requestParameters: MdrCdashigVersionDomainsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CdashigProductDomains> {
        const response = await this.mdrCdashigVersionDomainsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDASHIG Product
     */
    async mdrCdashigVersionGetRaw(requestParameters: MdrCdashigVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CdashigProduct>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrCdashigVersionGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/cdashig/{version}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CdashigProductFromJSON(jsonValue));
    }

    /**
     * Get CDASHIG Product
     */
    async mdrCdashigVersionGet(requestParameters: MdrCdashigVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CdashigProduct> {
        const response = await this.mdrCdashigVersionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDASHIG Scenario Field
     */
    async mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetRaw(requestParameters: MdrCdashigVersionScenariosDomainScenarioFieldsFieldGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CdashigScenarioField>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet().'
            );
        }

        if (requestParameters['domain'] == null) {
            throw new runtime.RequiredError(
                'domain',
                'Required parameter "domain" was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet().'
            );
        }

        if (requestParameters['scenario'] == null) {
            throw new runtime.RequiredError(
                'scenario',
                'Required parameter "scenario" was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet().'
            );
        }

        if (requestParameters['field'] == null) {
            throw new runtime.RequiredError(
                'field',
                'Required parameter "field" was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields/{field}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters['domain'])));
        urlPath = urlPath.replace(`{${"scenario"}}`, encodeURIComponent(String(requestParameters['scenario'])));
        urlPath = urlPath.replace(`{${"field"}}`, encodeURIComponent(String(requestParameters['field'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CdashigScenarioFieldFromJSON(jsonValue));
    }

    /**
     * Get CDASHIG Scenario Field
     */
    async mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet(requestParameters: MdrCdashigVersionScenariosDomainScenarioFieldsFieldGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CdashigScenarioField> {
        const response = await this.mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDASHIG Scenario Field List
     */
    async mdrCdashigVersionScenariosDomainScenarioFieldsGetRaw(requestParameters: MdrCdashigVersionScenariosDomainScenarioFieldsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CdashigScenarioFields>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet().'
            );
        }

        if (requestParameters['domain'] == null) {
            throw new runtime.RequiredError(
                'domain',
                'Required parameter "domain" was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet().'
            );
        }

        if (requestParameters['scenario'] == null) {
            throw new runtime.RequiredError(
                'scenario',
                'Required parameter "scenario" was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters['domain'])));
        urlPath = urlPath.replace(`{${"scenario"}}`, encodeURIComponent(String(requestParameters['scenario'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CdashigScenarioFieldsFromJSON(jsonValue));
    }

    /**
     * Get CDASHIG Scenario Field List
     */
    async mdrCdashigVersionScenariosDomainScenarioFieldsGet(requestParameters: MdrCdashigVersionScenariosDomainScenarioFieldsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CdashigScenarioFields> {
        const response = await this.mdrCdashigVersionScenariosDomainScenarioFieldsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDASHIG Scenario
     */
    async mdrCdashigVersionScenariosDomainScenarioGetRaw(requestParameters: MdrCdashigVersionScenariosDomainScenarioGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CdashigScenario>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioGet().'
            );
        }

        if (requestParameters['domain'] == null) {
            throw new runtime.RequiredError(
                'domain',
                'Required parameter "domain" was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioGet().'
            );
        }

        if (requestParameters['scenario'] == null) {
            throw new runtime.RequiredError(
                'scenario',
                'Required parameter "scenario" was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/cdashig/{version}/scenarios/{domain}.{scenario}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters['domain'])));
        urlPath = urlPath.replace(`{${"scenario"}}`, encodeURIComponent(String(requestParameters['scenario'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CdashigScenarioFromJSON(jsonValue));
    }

    /**
     * Get CDASHIG Scenario
     */
    async mdrCdashigVersionScenariosDomainScenarioGet(requestParameters: MdrCdashigVersionScenariosDomainScenarioGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CdashigScenario> {
        const response = await this.mdrCdashigVersionScenariosDomainScenarioGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDASHIG Scenario List
     */
    async mdrCdashigVersionScenariosGetRaw(requestParameters: MdrCdashigVersionScenariosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CdashigProductScenarios>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrCdashigVersionScenariosGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/cdashig/{version}/scenarios`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CdashigProductScenariosFromJSON(jsonValue));
    }

    /**
     * Get CDASHIG Scenario List
     */
    async mdrCdashigVersionScenariosGet(requestParameters: MdrCdashigVersionScenariosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CdashigProductScenarios> {
        const response = await this.mdrCdashigVersionScenariosGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Root CDASHIG Domain Field
     */
    async mdrRootCdashigDomainsDomainFieldsFieldGetRaw(requestParameters: MdrRootCdashigDomainsDomainFieldsFieldGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootCdashigDomainField>> {
        if (requestParameters['domain'] == null) {
            throw new runtime.RequiredError(
                'domain',
                'Required parameter "domain" was null or undefined when calling mdrRootCdashigDomainsDomainFieldsFieldGet().'
            );
        }

        if (requestParameters['field'] == null) {
            throw new runtime.RequiredError(
                'field',
                'Required parameter "field" was null or undefined when calling mdrRootCdashigDomainsDomainFieldsFieldGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/root/cdashig/domains/{domain}/fields/{field}`;
        urlPath = urlPath.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters['domain'])));
        urlPath = urlPath.replace(`{${"field"}}`, encodeURIComponent(String(requestParameters['field'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RootCdashigDomainFieldFromJSON(jsonValue));
    }

    /**
     * Get Root CDASHIG Domain Field
     */
    async mdrRootCdashigDomainsDomainFieldsFieldGet(requestParameters: MdrRootCdashigDomainsDomainFieldsFieldGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootCdashigDomainField> {
        const response = await this.mdrRootCdashigDomainsDomainFieldsFieldGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Root CDASHIG Scenario Field
     */
    async mdrRootCdashigScenariosDomainScenarioFieldsFieldGetRaw(requestParameters: MdrRootCdashigScenariosDomainScenarioFieldsFieldGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootCdashigScenarioField>> {
        if (requestParameters['domain'] == null) {
            throw new runtime.RequiredError(
                'domain',
                'Required parameter "domain" was null or undefined when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet().'
            );
        }

        if (requestParameters['scenario'] == null) {
            throw new runtime.RequiredError(
                'scenario',
                'Required parameter "scenario" was null or undefined when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet().'
            );
        }

        if (requestParameters['field'] == null) {
            throw new runtime.RequiredError(
                'field',
                'Required parameter "field" was null or undefined when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/root/cdashig/scenarios/{domain}.{scenario}/fields/{field}`;
        urlPath = urlPath.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters['domain'])));
        urlPath = urlPath.replace(`{${"scenario"}}`, encodeURIComponent(String(requestParameters['scenario'])));
        urlPath = urlPath.replace(`{${"field"}}`, encodeURIComponent(String(requestParameters['field'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RootCdashigScenarioFieldFromJSON(jsonValue));
    }

    /**
     * Get Root CDASHIG Scenario Field
     */
    async mdrRootCdashigScenariosDomainScenarioFieldsFieldGet(requestParameters: MdrRootCdashigScenariosDomainScenarioFieldsFieldGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootCdashigScenarioField> {
        const response = await this.mdrRootCdashigScenariosDomainScenarioFieldsFieldGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

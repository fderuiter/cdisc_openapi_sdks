/* tslint:disable */
/* eslint-disable */
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DefaultErrorResponse,
  ExportSendigDatasetsTable,
  ExportSendigVariablesTable,
  ExportSendigWorkbook,
  RootSendigDatasetVariable,
  SendigClass,
  SendigClassDatasets,
  SendigClasses,
  SendigDataset,
  SendigDatasetVariable,
  SendigDatasetVariables,
  SendigDatasets,
  SendigProduct,
  XmlRootSendigDatasetVariable,
  XmlSendigClass,
  XmlSendigClassDatasets,
  XmlSendigClasses,
  XmlSendigDataset,
  XmlSendigDatasetVariable,
  XmlSendigDatasetVariables,
  XmlSendigDatasets,
  XmlSendigProduct,
} from '../models/index';
import {
    DefaultErrorResponseFromJSON,
    DefaultErrorResponseToJSON,
    ExportSendigDatasetsTableFromJSON,
    ExportSendigDatasetsTableToJSON,
    ExportSendigVariablesTableFromJSON,
    ExportSendigVariablesTableToJSON,
    ExportSendigWorkbookFromJSON,
    ExportSendigWorkbookToJSON,
    RootSendigDatasetVariableFromJSON,
    RootSendigDatasetVariableToJSON,
    SendigClassFromJSON,
    SendigClassToJSON,
    SendigClassDatasetsFromJSON,
    SendigClassDatasetsToJSON,
    SendigClassesFromJSON,
    SendigClassesToJSON,
    SendigDatasetFromJSON,
    SendigDatasetToJSON,
    SendigDatasetVariableFromJSON,
    SendigDatasetVariableToJSON,
    SendigDatasetVariablesFromJSON,
    SendigDatasetVariablesToJSON,
    SendigDatasetsFromJSON,
    SendigDatasetsToJSON,
    SendigProductFromJSON,
    SendigProductToJSON,
    XmlRootSendigDatasetVariableFromJSON,
    XmlRootSendigDatasetVariableToJSON,
    XmlSendigClassFromJSON,
    XmlSendigClassToJSON,
    XmlSendigClassDatasetsFromJSON,
    XmlSendigClassDatasetsToJSON,
    XmlSendigClassesFromJSON,
    XmlSendigClassesToJSON,
    XmlSendigDatasetFromJSON,
    XmlSendigDatasetToJSON,
    XmlSendigDatasetVariableFromJSON,
    XmlSendigDatasetVariableToJSON,
    XmlSendigDatasetVariablesFromJSON,
    XmlSendigDatasetVariablesToJSON,
    XmlSendigDatasetsFromJSON,
    XmlSendigDatasetsToJSON,
    XmlSendigProductFromJSON,
    XmlSendigProductToJSON,
} from '../models/index';

export interface MdrRootSendigDatasetsDatasetVariablesVarGetRequest {
    dataset: string;
    _var: string;
}

export interface MdrSendigVersionClassesClassDatasetsGetRequest {
    version: string;
    _class: string;
}

export interface MdrSendigVersionClassesClassGetRequest {
    version: string;
    _class: string;
}

export interface MdrSendigVersionClassesGetRequest {
    version: string;
}

export interface MdrSendigVersionDatasetsDatasetGetRequest {
    version: string;
    dataset: string;
}

export interface MdrSendigVersionDatasetsDatasetVariablesGetRequest {
    version: string;
    dataset: string;
}

export interface MdrSendigVersionDatasetsDatasetVariablesVarGetRequest {
    version: string;
    dataset: string;
    _var: string;
}

export interface MdrSendigVersionDatasetsGetRequest {
    version: string;
}

export interface MdrSendigVersionGetRequest {
    version: string;
}

/**
 * 
 */
export class SENDImplementationGuideSENDIGApi extends runtime.BaseAPI {

    /**
     * Get Root SENDIG Dataset Variable
     */
    async mdrRootSendigDatasetsDatasetVariablesVarGetRaw(requestParameters: MdrRootSendigDatasetsDatasetVariablesVarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootSendigDatasetVariable>> {
        if (requestParameters['dataset'] == null) {
            throw new runtime.RequiredError(
                'dataset',
                'Required parameter "dataset" was null or undefined when calling mdrRootSendigDatasetsDatasetVariablesVarGet().'
            );
        }

        if (requestParameters['_var'] == null) {
            throw new runtime.RequiredError(
                '_var',
                'Required parameter "_var" was null or undefined when calling mdrRootSendigDatasetsDatasetVariablesVarGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/root/sendig/datasets/{dataset}/variables/{var}`;
        urlPath = urlPath.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters['dataset'])));
        urlPath = urlPath.replace(`{${"var"}}`, encodeURIComponent(String(requestParameters['_var'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RootSendigDatasetVariableFromJSON(jsonValue));
    }

    /**
     * Get Root SENDIG Dataset Variable
     */
    async mdrRootSendigDatasetsDatasetVariablesVarGet(requestParameters: MdrRootSendigDatasetsDatasetVariablesVarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootSendigDatasetVariable> {
        const response = await this.mdrRootSendigDatasetsDatasetVariablesVarGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SENDIG Class Dataset List
     */
    async mdrSendigVersionClassesClassDatasetsGetRaw(requestParameters: MdrSendigVersionClassesClassDatasetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendigClassDatasets>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSendigVersionClassesClassDatasetsGet().'
            );
        }

        if (requestParameters['_class'] == null) {
            throw new runtime.RequiredError(
                '_class',
                'Required parameter "_class" was null or undefined when calling mdrSendigVersionClassesClassDatasetsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sendig/{version}/classes/{class}/datasets`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"class"}}`, encodeURIComponent(String(requestParameters['_class'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SendigClassDatasetsFromJSON(jsonValue));
    }

    /**
     * Get SENDIG Class Dataset List
     */
    async mdrSendigVersionClassesClassDatasetsGet(requestParameters: MdrSendigVersionClassesClassDatasetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendigClassDatasets> {
        const response = await this.mdrSendigVersionClassesClassDatasetsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SENDIG Class
     */
    async mdrSendigVersionClassesClassGetRaw(requestParameters: MdrSendigVersionClassesClassGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendigClass>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSendigVersionClassesClassGet().'
            );
        }

        if (requestParameters['_class'] == null) {
            throw new runtime.RequiredError(
                '_class',
                'Required parameter "_class" was null or undefined when calling mdrSendigVersionClassesClassGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sendig/{version}/classes/{class}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"class"}}`, encodeURIComponent(String(requestParameters['_class'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SendigClassFromJSON(jsonValue));
    }

    /**
     * Get SENDIG Class
     */
    async mdrSendigVersionClassesClassGet(requestParameters: MdrSendigVersionClassesClassGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendigClass> {
        const response = await this.mdrSendigVersionClassesClassGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SENDIG Class List
     */
    async mdrSendigVersionClassesGetRaw(requestParameters: MdrSendigVersionClassesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendigClasses>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSendigVersionClassesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sendig/{version}/classes`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SendigClassesFromJSON(jsonValue));
    }

    /**
     * Get SENDIG Class List
     */
    async mdrSendigVersionClassesGet(requestParameters: MdrSendigVersionClassesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendigClasses> {
        const response = await this.mdrSendigVersionClassesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SENDIG Dataset
     */
    async mdrSendigVersionDatasetsDatasetGetRaw(requestParameters: MdrSendigVersionDatasetsDatasetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendigDataset>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSendigVersionDatasetsDatasetGet().'
            );
        }

        if (requestParameters['dataset'] == null) {
            throw new runtime.RequiredError(
                'dataset',
                'Required parameter "dataset" was null or undefined when calling mdrSendigVersionDatasetsDatasetGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sendig/{version}/datasets/{dataset}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters['dataset'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SendigDatasetFromJSON(jsonValue));
    }

    /**
     * Get SENDIG Dataset
     */
    async mdrSendigVersionDatasetsDatasetGet(requestParameters: MdrSendigVersionDatasetsDatasetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendigDataset> {
        const response = await this.mdrSendigVersionDatasetsDatasetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SENDIG Dataset Variable List
     */
    async mdrSendigVersionDatasetsDatasetVariablesGetRaw(requestParameters: MdrSendigVersionDatasetsDatasetVariablesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendigDatasetVariables>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSendigVersionDatasetsDatasetVariablesGet().'
            );
        }

        if (requestParameters['dataset'] == null) {
            throw new runtime.RequiredError(
                'dataset',
                'Required parameter "dataset" was null or undefined when calling mdrSendigVersionDatasetsDatasetVariablesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sendig/{version}/datasets/{dataset}/variables`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters['dataset'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SendigDatasetVariablesFromJSON(jsonValue));
    }

    /**
     * Get SENDIG Dataset Variable List
     */
    async mdrSendigVersionDatasetsDatasetVariablesGet(requestParameters: MdrSendigVersionDatasetsDatasetVariablesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendigDatasetVariables> {
        const response = await this.mdrSendigVersionDatasetsDatasetVariablesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SENDIG Dataset Variable
     */
    async mdrSendigVersionDatasetsDatasetVariablesVarGetRaw(requestParameters: MdrSendigVersionDatasetsDatasetVariablesVarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendigDatasetVariable>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSendigVersionDatasetsDatasetVariablesVarGet().'
            );
        }

        if (requestParameters['dataset'] == null) {
            throw new runtime.RequiredError(
                'dataset',
                'Required parameter "dataset" was null or undefined when calling mdrSendigVersionDatasetsDatasetVariablesVarGet().'
            );
        }

        if (requestParameters['_var'] == null) {
            throw new runtime.RequiredError(
                '_var',
                'Required parameter "_var" was null or undefined when calling mdrSendigVersionDatasetsDatasetVariablesVarGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sendig/{version}/datasets/{dataset}/variables/{var}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters['dataset'])));
        urlPath = urlPath.replace(`{${"var"}}`, encodeURIComponent(String(requestParameters['_var'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SendigDatasetVariableFromJSON(jsonValue));
    }

    /**
     * Get SENDIG Dataset Variable
     */
    async mdrSendigVersionDatasetsDatasetVariablesVarGet(requestParameters: MdrSendigVersionDatasetsDatasetVariablesVarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendigDatasetVariable> {
        const response = await this.mdrSendigVersionDatasetsDatasetVariablesVarGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SENDIG Dataset List
     */
    async mdrSendigVersionDatasetsGetRaw(requestParameters: MdrSendigVersionDatasetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendigDatasets>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSendigVersionDatasetsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sendig/{version}/datasets`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SendigDatasetsFromJSON(jsonValue));
    }

    /**
     * Get SENDIG Dataset List
     */
    async mdrSendigVersionDatasetsGet(requestParameters: MdrSendigVersionDatasetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendigDatasets> {
        const response = await this.mdrSendigVersionDatasetsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SENDIG product
     */
    async mdrSendigVersionGetRaw(requestParameters: MdrSendigVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SendigProduct>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSendigVersionGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sendig/{version}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SendigProductFromJSON(jsonValue));
    }

    /**
     * Get SENDIG product
     */
    async mdrSendigVersionGet(requestParameters: MdrSendigVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SendigProduct> {
        const response = await this.mdrSendigVersionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

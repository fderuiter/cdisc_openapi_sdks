/* tslint:disable */
/* eslint-disable */
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DefaultErrorResponse,
  ExportSdtmigDatasetsTable,
  ExportSdtmigVariablesTable,
  ExportSdtmigWorkbook,
  RootSdtmigDatasetVariable,
  SdtmigClass,
  SdtmigClassDatasets,
  SdtmigClasses,
  SdtmigDataset,
  SdtmigDatasetVariable,
  SdtmigDatasetVariables,
  SdtmigDatasets,
  SdtmigProduct,
  XmlRootSdtmigDatasetVariable,
  XmlSdtmigClass,
  XmlSdtmigClassDatasets,
  XmlSdtmigClasses,
  XmlSdtmigDataset,
  XmlSdtmigDatasetVariable,
  XmlSdtmigDatasetVariables,
  XmlSdtmigDatasets,
  XmlSdtmigProduct,
} from '../models/index';
import {
    DefaultErrorResponseFromJSON,
    DefaultErrorResponseToJSON,
    ExportSdtmigDatasetsTableFromJSON,
    ExportSdtmigDatasetsTableToJSON,
    ExportSdtmigVariablesTableFromJSON,
    ExportSdtmigVariablesTableToJSON,
    ExportSdtmigWorkbookFromJSON,
    ExportSdtmigWorkbookToJSON,
    RootSdtmigDatasetVariableFromJSON,
    RootSdtmigDatasetVariableToJSON,
    SdtmigClassFromJSON,
    SdtmigClassToJSON,
    SdtmigClassDatasetsFromJSON,
    SdtmigClassDatasetsToJSON,
    SdtmigClassesFromJSON,
    SdtmigClassesToJSON,
    SdtmigDatasetFromJSON,
    SdtmigDatasetToJSON,
    SdtmigDatasetVariableFromJSON,
    SdtmigDatasetVariableToJSON,
    SdtmigDatasetVariablesFromJSON,
    SdtmigDatasetVariablesToJSON,
    SdtmigDatasetsFromJSON,
    SdtmigDatasetsToJSON,
    SdtmigProductFromJSON,
    SdtmigProductToJSON,
    XmlRootSdtmigDatasetVariableFromJSON,
    XmlRootSdtmigDatasetVariableToJSON,
    XmlSdtmigClassFromJSON,
    XmlSdtmigClassToJSON,
    XmlSdtmigClassDatasetsFromJSON,
    XmlSdtmigClassDatasetsToJSON,
    XmlSdtmigClassesFromJSON,
    XmlSdtmigClassesToJSON,
    XmlSdtmigDatasetFromJSON,
    XmlSdtmigDatasetToJSON,
    XmlSdtmigDatasetVariableFromJSON,
    XmlSdtmigDatasetVariableToJSON,
    XmlSdtmigDatasetVariablesFromJSON,
    XmlSdtmigDatasetVariablesToJSON,
    XmlSdtmigDatasetsFromJSON,
    XmlSdtmigDatasetsToJSON,
    XmlSdtmigProductFromJSON,
    XmlSdtmigProductToJSON,
} from '../models/index';

export interface MdrRootSdtmigDatasetsDatasetVariablesVarGetRequest {
    dataset: string;
    _var: string;
}

export interface MdrSdtmigVersionClassesClassDatasetsGetRequest {
    version: string;
    _class: string;
}

export interface MdrSdtmigVersionClassesClassGetRequest {
    version: string;
    _class: string;
}

export interface MdrSdtmigVersionClassesGetRequest {
    version: string;
}

export interface MdrSdtmigVersionDatasetsDatasetGetRequest {
    version: string;
    dataset: string;
}

export interface MdrSdtmigVersionDatasetsDatasetVariablesGetRequest {
    version: string;
    dataset: string;
}

export interface MdrSdtmigVersionDatasetsDatasetVariablesVarGetRequest {
    version: string;
    dataset: string;
    _var: string;
}

export interface MdrSdtmigVersionDatasetsGetRequest {
    version: string;
}

export interface MdrSdtmigVersionGetRequest {
    version: string;
}

/**
 * 
 */
export class SDTMImplementationGuideSDTMIGApi extends runtime.BaseAPI {

    /**
     * Get Root SDTMIG Dataset Variable
     */
    async mdrRootSdtmigDatasetsDatasetVariablesVarGetRaw(requestParameters: MdrRootSdtmigDatasetsDatasetVariablesVarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootSdtmigDatasetVariable>> {
        if (requestParameters['dataset'] == null) {
            throw new runtime.RequiredError(
                'dataset',
                'Required parameter "dataset" was null or undefined when calling mdrRootSdtmigDatasetsDatasetVariablesVarGet().'
            );
        }

        if (requestParameters['_var'] == null) {
            throw new runtime.RequiredError(
                '_var',
                'Required parameter "_var" was null or undefined when calling mdrRootSdtmigDatasetsDatasetVariablesVarGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/root/sdtmig/datasets/{dataset}/variables/{var}`;
        urlPath = urlPath.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters['dataset'])));
        urlPath = urlPath.replace(`{${"var"}}`, encodeURIComponent(String(requestParameters['_var'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RootSdtmigDatasetVariableFromJSON(jsonValue));
    }

    /**
     * Get Root SDTMIG Dataset Variable
     */
    async mdrRootSdtmigDatasetsDatasetVariablesVarGet(requestParameters: MdrRootSdtmigDatasetsDatasetVariablesVarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootSdtmigDatasetVariable> {
        const response = await this.mdrRootSdtmigDatasetsDatasetVariablesVarGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SDTMIG Class Dataset List
     */
    async mdrSdtmigVersionClassesClassDatasetsGetRaw(requestParameters: MdrSdtmigVersionClassesClassDatasetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SdtmigClassDatasets>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSdtmigVersionClassesClassDatasetsGet().'
            );
        }

        if (requestParameters['_class'] == null) {
            throw new runtime.RequiredError(
                '_class',
                'Required parameter "_class" was null or undefined when calling mdrSdtmigVersionClassesClassDatasetsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sdtmig/{version}/classes/{class}/datasets`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"class"}}`, encodeURIComponent(String(requestParameters['_class'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SdtmigClassDatasetsFromJSON(jsonValue));
    }

    /**
     * Get SDTMIG Class Dataset List
     */
    async mdrSdtmigVersionClassesClassDatasetsGet(requestParameters: MdrSdtmigVersionClassesClassDatasetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SdtmigClassDatasets> {
        const response = await this.mdrSdtmigVersionClassesClassDatasetsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SDTMIG Class
     */
    async mdrSdtmigVersionClassesClassGetRaw(requestParameters: MdrSdtmigVersionClassesClassGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SdtmigClass>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSdtmigVersionClassesClassGet().'
            );
        }

        if (requestParameters['_class'] == null) {
            throw new runtime.RequiredError(
                '_class',
                'Required parameter "_class" was null or undefined when calling mdrSdtmigVersionClassesClassGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sdtmig/{version}/classes/{class}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"class"}}`, encodeURIComponent(String(requestParameters['_class'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SdtmigClassFromJSON(jsonValue));
    }

    /**
     * Get SDTMIG Class
     */
    async mdrSdtmigVersionClassesClassGet(requestParameters: MdrSdtmigVersionClassesClassGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SdtmigClass> {
        const response = await this.mdrSdtmigVersionClassesClassGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SDTMIG Class List
     */
    async mdrSdtmigVersionClassesGetRaw(requestParameters: MdrSdtmigVersionClassesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SdtmigClasses>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSdtmigVersionClassesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sdtmig/{version}/classes`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SdtmigClassesFromJSON(jsonValue));
    }

    /**
     * Get SDTMIG Class List
     */
    async mdrSdtmigVersionClassesGet(requestParameters: MdrSdtmigVersionClassesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SdtmigClasses> {
        const response = await this.mdrSdtmigVersionClassesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SDTMIG Dataset
     */
    async mdrSdtmigVersionDatasetsDatasetGetRaw(requestParameters: MdrSdtmigVersionDatasetsDatasetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SdtmigDataset>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSdtmigVersionDatasetsDatasetGet().'
            );
        }

        if (requestParameters['dataset'] == null) {
            throw new runtime.RequiredError(
                'dataset',
                'Required parameter "dataset" was null or undefined when calling mdrSdtmigVersionDatasetsDatasetGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sdtmig/{version}/datasets/{dataset}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters['dataset'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SdtmigDatasetFromJSON(jsonValue));
    }

    /**
     * Get SDTMIG Dataset
     */
    async mdrSdtmigVersionDatasetsDatasetGet(requestParameters: MdrSdtmigVersionDatasetsDatasetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SdtmigDataset> {
        const response = await this.mdrSdtmigVersionDatasetsDatasetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SDTMIG Dataset Variable List
     */
    async mdrSdtmigVersionDatasetsDatasetVariablesGetRaw(requestParameters: MdrSdtmigVersionDatasetsDatasetVariablesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SdtmigDatasetVariables>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSdtmigVersionDatasetsDatasetVariablesGet().'
            );
        }

        if (requestParameters['dataset'] == null) {
            throw new runtime.RequiredError(
                'dataset',
                'Required parameter "dataset" was null or undefined when calling mdrSdtmigVersionDatasetsDatasetVariablesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sdtmig/{version}/datasets/{dataset}/variables`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters['dataset'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SdtmigDatasetVariablesFromJSON(jsonValue));
    }

    /**
     * Get SDTMIG Dataset Variable List
     */
    async mdrSdtmigVersionDatasetsDatasetVariablesGet(requestParameters: MdrSdtmigVersionDatasetsDatasetVariablesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SdtmigDatasetVariables> {
        const response = await this.mdrSdtmigVersionDatasetsDatasetVariablesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SDTMIG Dataset Variable
     */
    async mdrSdtmigVersionDatasetsDatasetVariablesVarGetRaw(requestParameters: MdrSdtmigVersionDatasetsDatasetVariablesVarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SdtmigDatasetVariable>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet().'
            );
        }

        if (requestParameters['dataset'] == null) {
            throw new runtime.RequiredError(
                'dataset',
                'Required parameter "dataset" was null or undefined when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet().'
            );
        }

        if (requestParameters['_var'] == null) {
            throw new runtime.RequiredError(
                '_var',
                'Required parameter "_var" was null or undefined when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sdtmig/{version}/datasets/{dataset}/variables/{var}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters['dataset'])));
        urlPath = urlPath.replace(`{${"var"}}`, encodeURIComponent(String(requestParameters['_var'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SdtmigDatasetVariableFromJSON(jsonValue));
    }

    /**
     * Get SDTMIG Dataset Variable
     */
    async mdrSdtmigVersionDatasetsDatasetVariablesVarGet(requestParameters: MdrSdtmigVersionDatasetsDatasetVariablesVarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SdtmigDatasetVariable> {
        const response = await this.mdrSdtmigVersionDatasetsDatasetVariablesVarGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SDTMIG Dataset List
     */
    async mdrSdtmigVersionDatasetsGetRaw(requestParameters: MdrSdtmigVersionDatasetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SdtmigDatasets>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSdtmigVersionDatasetsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sdtmig/{version}/datasets`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SdtmigDatasetsFromJSON(jsonValue));
    }

    /**
     * Get SDTMIG Dataset List
     */
    async mdrSdtmigVersionDatasetsGet(requestParameters: MdrSdtmigVersionDatasetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SdtmigDatasets> {
        const response = await this.mdrSdtmigVersionDatasetsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SDTMIG product
     */
    async mdrSdtmigVersionGetRaw(requestParameters: MdrSdtmigVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SdtmigProduct>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSdtmigVersionGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sdtmig/{version}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SdtmigProductFromJSON(jsonValue));
    }

    /**
     * Get SDTMIG product
     */
    async mdrSdtmigVersionGet(requestParameters: MdrSdtmigVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SdtmigProduct> {
        const response = await this.mdrSdtmigVersionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

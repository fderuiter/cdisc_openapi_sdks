extends ApiBee
class_name SearchesApi

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, © Public Domain, 2022

# API SearchesApi
# Instantiate this object and use it to make requests to the API.

func _bzz_get_api_name() -> String:
	return "SearchesApi"


# Operation mdrSearchGet → GET /mdr/search
#
# Get Search Results Across CDISC Library
func mdr_search_get(
	# q: String = ""   Eg: q_example
	# Search Term Expression
	q: String,
	# highlight: String = ""   Eg: highlight_example
	# Search Highlight Expression
	highlight = "",
	# start: float = 0   Eg: 8.14
	# Initial Search Result Index
	start = 0,
	# pageSize: float = 100   Eg: 8.14
	# Number of Search Results to Return
	pageSize = 100,
	# some_class: String = ""   Eg: some_class_example
	# Limit Search by Setting Scope to Class
	some_class = "",
	# codelist: String = ""   Eg: codelist_example
	# Limit Search by Setting Scope to Codelist
	codelist = "",
	# conceptId: String = ""   Eg: conceptId_example
	# Limit Search by Setting Scope to Concept ID
	conceptId = "",
	# core: String = ""   Eg: core_example
	# Limit Search by Setting Scope to Core
	core = "",
	# dataStructure: String = ""   Eg: dataStructure_example
	# Limit Search by Setting Scope to Data Structure
	dataStructure = "",
	# datasetStructure: String = ""   Eg: datasetStructure_example
	# Limit Search by Setting Scope to Dataset Structure
	datasetStructure = "",
	# definition: String = ""   Eg: definition_example
	# Limit Search by Setting Scope to Definition
	definition = "",
	# description: String = ""   Eg: description_example
	# Limit Search by Setting Scope to Description
	description = "",
	# domain: String = ""   Eg: domain_example
	# Limit Search by Setting Scope to Domain
	domain = "",
	# effectiveDate: String = ""   Eg: effectiveDate_example
	# Limit Search by Setting Scope to Effective Date
	effectiveDate = "",
	# extensible: String = ""   Eg: extensible_example
	# Limit Search by Setting Scope to Extensible
	extensible = "",
	# href: String = ""   Eg: href_example
	# Limit Search by Setting Scope to Href
	href = "",
	# some_label: String = ""   Eg: some_label_example
	# Limit Search by Setting Scope to Label
	some_label = "",
	# measureType: String = ""   Eg: measureType_example
	# SLimit Search by Setting Scope to Measure Type
	measureType = "",
	# name: String = ""   Eg: name_example
	# Limit Search by Setting Scope to Name
	name = "",
	# preferredTerm: String = ""   Eg: preferredTerm_example
	# Limit Search by Setting Scope to Preferred Term
	preferredTerm = "",
	# product: String = ""   Eg: product_example
	# Limit Search by Setting Scope to Product
	product = "",
	# productGroup: String = ""   Eg: productGroup_example
	# Limit Search by Setting Scope to Product Group
	productGroup = "",
	# registrationStatus: String = ""   Eg: registrationStatus_example
	# Limit Search by Setting Scope to Registration Status
	registrationStatus = "",
	# roleDescription: String = ""   Eg: roleDescription_example
	# Limit Search by Setting Scope to Role Description
	roleDescription = "",
	# sdtmTarget: String = ""   Eg: sdtmTarget_example
	# Limit Search by Setting Scope to SDTM Target
	sdtmTarget = "",
	# simpleDatatype: String = ""   Eg: simpleDatatype_example
	# Limit Search by Setting Scope to Simple Datatype
	simpleDatatype = "",
	# submissionValue: String = ""   Eg: submissionValue_example
	# Limit Search by Setting Scope to Submission Value
	submissionValue = "",
	# synonyms: String = ""   Eg: synonyms_example
	# Limit Search by Setting Scope to Synonyms
	synonyms = "",
	# type: String = ""   Eg: type_example
	# Limit Search by Setting Scope to Type
	type = "",
	# uiHref: String = ""   Eg: uiHref_example
	# Limit Search by Setting Scope to UI Href
	uiHref = "",
	# valueDomain: String = ""   Eg: valueDomain_example
	# Limit Search by Setting Scope to Value Domain
	valueDomain = "",
	# variableSet: String = ""   Eg: variableSet_example
	# Limit Search by Setting Scope to Variable Set
	variableSet = "",
	# version: String = ""   Eg: version_example
	# Limit Search by Setting Scope to Version
	version = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/search"

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["q"] = q
	bzz_query["highlight"] = highlight
	bzz_query["start"] = start
	bzz_query["pageSize"] = pageSize
	bzz_query["class"] = some_class
	bzz_query["codelist"] = codelist
	bzz_query["conceptId"] = conceptId
	bzz_query["core"] = core
	bzz_query["dataStructure"] = dataStructure
	bzz_query["datasetStructure"] = datasetStructure
	bzz_query["definition"] = definition
	bzz_query["description"] = description
	bzz_query["domain"] = domain
	bzz_query["effectiveDate"] = effectiveDate
	bzz_query["extensible"] = extensible
	bzz_query["href"] = href
	bzz_query["label"] = some_label
	bzz_query["measureType"] = measureType
	bzz_query["name"] = name
	bzz_query["preferredTerm"] = preferredTerm
	bzz_query["product"] = product
	bzz_query["productGroup"] = productGroup
	bzz_query["registrationStatus"] = registrationStatus
	bzz_query["roleDescription"] = roleDescription
	bzz_query["sdtmTarget"] = sdtmTarget
	bzz_query["simpleDatatype"] = simpleDatatype
	bzz_query["submissionValue"] = submissionValue
	bzz_query["synonyms"] = synonyms
	bzz_query["type"] = type
	bzz_query["uiHref"] = uiHref
	bzz_query["valueDomain"] = valueDomain
	bzz_query["variableSet"] = variableSet
	bzz_query["version"] = version

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = DefaultSearchResponse.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_search_get_threaded(
	# q: String = ""   Eg: q_example
	# Search Term Expression
	q: String,
	# highlight: String = ""   Eg: highlight_example
	# Search Highlight Expression
	highlight = "",
	# start: float = 0   Eg: 8.14
	# Initial Search Result Index
	start = 0,
	# pageSize: float = 100   Eg: 8.14
	# Number of Search Results to Return
	pageSize = 100,
	# some_class: String = ""   Eg: some_class_example
	# Limit Search by Setting Scope to Class
	some_class = "",
	# codelist: String = ""   Eg: codelist_example
	# Limit Search by Setting Scope to Codelist
	codelist = "",
	# conceptId: String = ""   Eg: conceptId_example
	# Limit Search by Setting Scope to Concept ID
	conceptId = "",
	# core: String = ""   Eg: core_example
	# Limit Search by Setting Scope to Core
	core = "",
	# dataStructure: String = ""   Eg: dataStructure_example
	# Limit Search by Setting Scope to Data Structure
	dataStructure = "",
	# datasetStructure: String = ""   Eg: datasetStructure_example
	# Limit Search by Setting Scope to Dataset Structure
	datasetStructure = "",
	# definition: String = ""   Eg: definition_example
	# Limit Search by Setting Scope to Definition
	definition = "",
	# description: String = ""   Eg: description_example
	# Limit Search by Setting Scope to Description
	description = "",
	# domain: String = ""   Eg: domain_example
	# Limit Search by Setting Scope to Domain
	domain = "",
	# effectiveDate: String = ""   Eg: effectiveDate_example
	# Limit Search by Setting Scope to Effective Date
	effectiveDate = "",
	# extensible: String = ""   Eg: extensible_example
	# Limit Search by Setting Scope to Extensible
	extensible = "",
	# href: String = ""   Eg: href_example
	# Limit Search by Setting Scope to Href
	href = "",
	# some_label: String = ""   Eg: some_label_example
	# Limit Search by Setting Scope to Label
	some_label = "",
	# measureType: String = ""   Eg: measureType_example
	# SLimit Search by Setting Scope to Measure Type
	measureType = "",
	# name: String = ""   Eg: name_example
	# Limit Search by Setting Scope to Name
	name = "",
	# preferredTerm: String = ""   Eg: preferredTerm_example
	# Limit Search by Setting Scope to Preferred Term
	preferredTerm = "",
	# product: String = ""   Eg: product_example
	# Limit Search by Setting Scope to Product
	product = "",
	# productGroup: String = ""   Eg: productGroup_example
	# Limit Search by Setting Scope to Product Group
	productGroup = "",
	# registrationStatus: String = ""   Eg: registrationStatus_example
	# Limit Search by Setting Scope to Registration Status
	registrationStatus = "",
	# roleDescription: String = ""   Eg: roleDescription_example
	# Limit Search by Setting Scope to Role Description
	roleDescription = "",
	# sdtmTarget: String = ""   Eg: sdtmTarget_example
	# Limit Search by Setting Scope to SDTM Target
	sdtmTarget = "",
	# simpleDatatype: String = ""   Eg: simpleDatatype_example
	# Limit Search by Setting Scope to Simple Datatype
	simpleDatatype = "",
	# submissionValue: String = ""   Eg: submissionValue_example
	# Limit Search by Setting Scope to Submission Value
	submissionValue = "",
	# synonyms: String = ""   Eg: synonyms_example
	# Limit Search by Setting Scope to Synonyms
	synonyms = "",
	# type: String = ""   Eg: type_example
	# Limit Search by Setting Scope to Type
	type = "",
	# uiHref: String = ""   Eg: uiHref_example
	# Limit Search by Setting Scope to UI Href
	uiHref = "",
	# valueDomain: String = ""   Eg: valueDomain_example
	# Limit Search by Setting Scope to Value Domain
	valueDomain = "",
	# variableSet: String = ""   Eg: variableSet_example
	# Limit Search by Setting Scope to Variable Set
	variableSet = "",
	# version: String = ""   Eg: version_example
	# Limit Search by Setting Scope to Version
	version = "",
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_search_get")
	bzz_callable.bind(
		q,
		highlight,
		start,
		pageSize,
		some_class,
		codelist,
		conceptId,
		core,
		dataStructure,
		datasetStructure,
		definition,
		description,
		domain,
		effectiveDate,
		extensible,
		href,
		some_label,
		measureType,
		name,
		preferredTerm,
		product,
		productGroup,
		registrationStatus,
		roleDescription,
		sdtmTarget,
		simpleDatatype,
		submissionValue,
		synonyms,
		type,
		uiHref,
		valueDomain,
		variableSet,
		version,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrSearchScopesGet → GET /mdr/search/scopes
#
# Get Search Results Across CDISC Library
func mdr_search_scopes_get(
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/search/scopes"

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = MdrSearchScopesGet200Response.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_search_scopes_get_threaded(
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_search_scopes_get")
	bzz_callable.bind(
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrSearchScopesScopeGet → GET /mdr/search/scopes/{scope}
#
# Get Search Results Limited to Scope
func mdr_search_scopes_scope_get(
	# scope: DefaultSearchScopes
	# Search Scope
	scope: DefaultSearchScopes,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/search/scopes/{scope}".replace("{" + "scope" + "}", _bzz_urlize_path_param(scope))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = ScopeValues.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_search_scopes_scope_get_threaded(
	# scope: DefaultSearchScopes
	# Search Scope
	scope: DefaultSearchScopes,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_search_scopes_scope_get")
	bzz_callable.bind(
		scope,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread



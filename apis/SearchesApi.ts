/* tslint:disable */
/* eslint-disable */
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DefaultErrorResponse,
  DefaultSearchResponse,
  DefaultSearchScopes,
  MdrSearchScopesGet200Response,
  ScopeValues,
} from '../models/index';
import {
    DefaultErrorResponseFromJSON,
    DefaultErrorResponseToJSON,
    DefaultSearchResponseFromJSON,
    DefaultSearchResponseToJSON,
    DefaultSearchScopesFromJSON,
    DefaultSearchScopesToJSON,
    MdrSearchScopesGet200ResponseFromJSON,
    MdrSearchScopesGet200ResponseToJSON,
    ScopeValuesFromJSON,
    ScopeValuesToJSON,
} from '../models/index';

export interface MdrSearchGetRequest {
    q: string;
    highlight?: string;
    start?: number;
    pageSize?: number;
    _class?: string;
    codelist?: string;
    conceptId?: string;
    core?: string;
    dataStructure?: string;
    datasetStructure?: string;
    definition?: string;
    description?: string;
    domain?: string;
    effectiveDate?: string;
    extensible?: string;
    href?: string;
    label?: string;
    measureType?: string;
    name?: string;
    preferredTerm?: string;
    product?: string;
    productGroup?: string;
    registrationStatus?: string;
    roleDescription?: string;
    sdtmTarget?: string;
    simpleDatatype?: string;
    submissionValue?: string;
    synonyms?: string;
    type?: string;
    uiHref?: string;
    valueDomain?: string;
    variableSet?: string;
    version?: string;
}

export interface MdrSearchScopesScopeGetRequest {
    scope: DefaultSearchScopes;
}

/**
 * 
 */
export class SearchesApi extends runtime.BaseAPI {

    /**
     * Get Search Results Across CDISC Library
     */
    async mdrSearchGetRaw(requestParameters: MdrSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DefaultSearchResponse>> {
        if (requestParameters['q'] == null) {
            throw new runtime.RequiredError(
                'q',
                'Required parameter "q" was null or undefined when calling mdrSearchGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        if (requestParameters['highlight'] != null) {
            queryParameters['highlight'] = requestParameters['highlight'];
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['_class'] != null) {
            queryParameters['class'] = requestParameters['_class'];
        }

        if (requestParameters['codelist'] != null) {
            queryParameters['codelist'] = requestParameters['codelist'];
        }

        if (requestParameters['conceptId'] != null) {
            queryParameters['conceptId'] = requestParameters['conceptId'];
        }

        if (requestParameters['core'] != null) {
            queryParameters['core'] = requestParameters['core'];
        }

        if (requestParameters['dataStructure'] != null) {
            queryParameters['dataStructure'] = requestParameters['dataStructure'];
        }

        if (requestParameters['datasetStructure'] != null) {
            queryParameters['datasetStructure'] = requestParameters['datasetStructure'];
        }

        if (requestParameters['definition'] != null) {
            queryParameters['definition'] = requestParameters['definition'];
        }

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['domain'] != null) {
            queryParameters['domain'] = requestParameters['domain'];
        }

        if (requestParameters['effectiveDate'] != null) {
            queryParameters['effectiveDate'] = requestParameters['effectiveDate'];
        }

        if (requestParameters['extensible'] != null) {
            queryParameters['extensible'] = requestParameters['extensible'];
        }

        if (requestParameters['href'] != null) {
            queryParameters['href'] = requestParameters['href'];
        }

        if (requestParameters['label'] != null) {
            queryParameters['label'] = requestParameters['label'];
        }

        if (requestParameters['measureType'] != null) {
            queryParameters['measureType'] = requestParameters['measureType'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['preferredTerm'] != null) {
            queryParameters['preferredTerm'] = requestParameters['preferredTerm'];
        }

        if (requestParameters['product'] != null) {
            queryParameters['product'] = requestParameters['product'];
        }

        if (requestParameters['productGroup'] != null) {
            queryParameters['productGroup'] = requestParameters['productGroup'];
        }

        if (requestParameters['registrationStatus'] != null) {
            queryParameters['registrationStatus'] = requestParameters['registrationStatus'];
        }

        if (requestParameters['roleDescription'] != null) {
            queryParameters['roleDescription'] = requestParameters['roleDescription'];
        }

        if (requestParameters['sdtmTarget'] != null) {
            queryParameters['sdtmTarget'] = requestParameters['sdtmTarget'];
        }

        if (requestParameters['simpleDatatype'] != null) {
            queryParameters['simpleDatatype'] = requestParameters['simpleDatatype'];
        }

        if (requestParameters['submissionValue'] != null) {
            queryParameters['submissionValue'] = requestParameters['submissionValue'];
        }

        if (requestParameters['synonyms'] != null) {
            queryParameters['synonyms'] = requestParameters['synonyms'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['uiHref'] != null) {
            queryParameters['uiHref'] = requestParameters['uiHref'];
        }

        if (requestParameters['valueDomain'] != null) {
            queryParameters['valueDomain'] = requestParameters['valueDomain'];
        }

        if (requestParameters['variableSet'] != null) {
            queryParameters['variableSet'] = requestParameters['variableSet'];
        }

        if (requestParameters['version'] != null) {
            queryParameters['version'] = requestParameters['version'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/search`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DefaultSearchResponseFromJSON(jsonValue));
    }

    /**
     * Get Search Results Across CDISC Library
     */
    async mdrSearchGet(requestParameters: MdrSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DefaultSearchResponse> {
        const response = await this.mdrSearchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Search Results Across CDISC Library
     */
    async mdrSearchScopesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MdrSearchScopesGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/search/scopes`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MdrSearchScopesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get Search Results Across CDISC Library
     */
    async mdrSearchScopesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MdrSearchScopesGet200Response> {
        const response = await this.mdrSearchScopesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Search Results Limited to Scope
     */
    async mdrSearchScopesScopeGetRaw(requestParameters: MdrSearchScopesScopeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScopeValues>> {
        if (requestParameters['scope'] == null) {
            throw new runtime.RequiredError(
                'scope',
                'Required parameter "scope" was null or undefined when calling mdrSearchScopesScopeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/search/scopes/{scope}`;
        urlPath = urlPath.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters['scope'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScopeValuesFromJSON(jsonValue));
    }

    /**
     * Get Search Results Limited to Scope
     */
    async mdrSearchScopesScopeGet(requestParameters: MdrSearchScopesScopeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScopeValues> {
        const response = await this.mdrSearchScopesScopeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

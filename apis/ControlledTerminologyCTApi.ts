// tslint:disable
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    CtCodelist,
    CtCodelistTerms,
    CtPackage,
    CtPackageCodelists,
    CtPackages,
    CtTerm,
    DefaultErrorResponse,
    ExportCtTable,
    RootCtCodelist,
    RootCtTerm,
    XmlCtCodelist,
    XmlCtCodelistTerms,
    XmlCtPackage,
    XmlCtPackageCodelists,
    XmlCtPackages,
    XmlCtTerm,
    XmlRootCtCodelist,
    XmlRootCtTerm,
} from '../models';

export interface MdrCtPackagesPackageCodelistsCodelistGetRequest {
    _package: string;
    codelist: string;
}

export interface MdrCtPackagesPackageCodelistsCodelistTermsGetRequest {
    _package: string;
    codelist: string;
}

export interface MdrCtPackagesPackageCodelistsCodelistTermsTermGetRequest {
    _package: string;
    codelist: string;
    term: string;
}

export interface MdrCtPackagesPackageCodelistsGetRequest {
    _package: string;
}

export interface MdrCtPackagesProductGetRequest {
    product: string;
}

export interface MdrRootCtProductGroupCodelistsCodelistGetRequest {
    productGroup: string;
    codelist: string;
}

export interface MdrRootCtProductGroupCodelistsCodelistTermsTermGetRequest {
    productGroup: string;
    codelist: string;
    term: string;
}

/**
 * no description
 */
export class ControlledTerminologyCTApi extends BaseAPI {

    /**
     * Get CDISC Library CT Package List
     */
    mdrCtPackagesGet(): Observable<CtPackages>
    mdrCtPackagesGet(opts?: OperationOpts): Observable<AjaxResponse<CtPackages>>
    mdrCtPackagesGet(opts?: OperationOpts): Observable<CtPackages | AjaxResponse<CtPackages>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CtPackages>({
            url: '/mdr/ct/packages',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDISC Library CT Package Codelist
     */
    mdrCtPackagesPackageCodelistsCodelistGet({ _package, codelist }: MdrCtPackagesPackageCodelistsCodelistGetRequest): Observable<CtCodelist>
    mdrCtPackagesPackageCodelistsCodelistGet({ _package, codelist }: MdrCtPackagesPackageCodelistsCodelistGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CtCodelist>>
    mdrCtPackagesPackageCodelistsCodelistGet({ _package, codelist }: MdrCtPackagesPackageCodelistsCodelistGetRequest, opts?: OperationOpts): Observable<CtCodelist | AjaxResponse<CtCodelist>> {
        throwIfNullOrUndefined(_package, '_package', 'mdrCtPackagesPackageCodelistsCodelistGet');
        throwIfNullOrUndefined(codelist, 'codelist', 'mdrCtPackagesPackageCodelistsCodelistGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CtCodelist>({
            url: '/mdr/ct/packages/{package}/codelists/{codelist}'.replace('{package}', encodeURI(_package)).replace('{codelist}', encodeURI(codelist)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDISC Library CT Package Codelist Term List
     */
    mdrCtPackagesPackageCodelistsCodelistTermsGet({ _package, codelist }: MdrCtPackagesPackageCodelistsCodelistTermsGetRequest): Observable<CtCodelistTerms>
    mdrCtPackagesPackageCodelistsCodelistTermsGet({ _package, codelist }: MdrCtPackagesPackageCodelistsCodelistTermsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CtCodelistTerms>>
    mdrCtPackagesPackageCodelistsCodelistTermsGet({ _package, codelist }: MdrCtPackagesPackageCodelistsCodelistTermsGetRequest, opts?: OperationOpts): Observable<CtCodelistTerms | AjaxResponse<CtCodelistTerms>> {
        throwIfNullOrUndefined(_package, '_package', 'mdrCtPackagesPackageCodelistsCodelistTermsGet');
        throwIfNullOrUndefined(codelist, 'codelist', 'mdrCtPackagesPackageCodelistsCodelistTermsGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CtCodelistTerms>({
            url: '/mdr/ct/packages/{package}/codelists/{codelist}/terms'.replace('{package}', encodeURI(_package)).replace('{codelist}', encodeURI(codelist)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDISC Library CT Package Codelist Term
     */
    mdrCtPackagesPackageCodelistsCodelistTermsTermGet({ _package, codelist, term }: MdrCtPackagesPackageCodelistsCodelistTermsTermGetRequest): Observable<CtTerm>
    mdrCtPackagesPackageCodelistsCodelistTermsTermGet({ _package, codelist, term }: MdrCtPackagesPackageCodelistsCodelistTermsTermGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CtTerm>>
    mdrCtPackagesPackageCodelistsCodelistTermsTermGet({ _package, codelist, term }: MdrCtPackagesPackageCodelistsCodelistTermsTermGetRequest, opts?: OperationOpts): Observable<CtTerm | AjaxResponse<CtTerm>> {
        throwIfNullOrUndefined(_package, '_package', 'mdrCtPackagesPackageCodelistsCodelistTermsTermGet');
        throwIfNullOrUndefined(codelist, 'codelist', 'mdrCtPackagesPackageCodelistsCodelistTermsTermGet');
        throwIfNullOrUndefined(term, 'term', 'mdrCtPackagesPackageCodelistsCodelistTermsTermGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CtTerm>({
            url: '/mdr/ct/packages/{package}/codelists/{codelist}/terms/{term}'.replace('{package}', encodeURI(_package)).replace('{codelist}', encodeURI(codelist)).replace('{term}', encodeURI(term)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDISC Library CT Package Codelist List
     */
    mdrCtPackagesPackageCodelistsGet({ _package }: MdrCtPackagesPackageCodelistsGetRequest): Observable<CtPackageCodelists>
    mdrCtPackagesPackageCodelistsGet({ _package }: MdrCtPackagesPackageCodelistsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CtPackageCodelists>>
    mdrCtPackagesPackageCodelistsGet({ _package }: MdrCtPackagesPackageCodelistsGetRequest, opts?: OperationOpts): Observable<CtPackageCodelists | AjaxResponse<CtPackageCodelists>> {
        throwIfNullOrUndefined(_package, '_package', 'mdrCtPackagesPackageCodelistsGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CtPackageCodelists>({
            url: '/mdr/ct/packages/{package}/codelists'.replace('{package}', encodeURI(_package)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDISC Library CT Package
     */
    mdrCtPackagesProductGet({ product }: MdrCtPackagesProductGetRequest): Observable<CtPackage>
    mdrCtPackagesProductGet({ product }: MdrCtPackagesProductGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CtPackage>>
    mdrCtPackagesProductGet({ product }: MdrCtPackagesProductGetRequest, opts?: OperationOpts): Observable<CtPackage | AjaxResponse<CtPackage>> {
        throwIfNullOrUndefined(product, 'product', 'mdrCtPackagesProductGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CtPackage>({
            url: '/mdr/ct/packages/{product}'.replace('{product}', encodeURI(product)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDISC Library Root CT Codelist
     */
    mdrRootCtProductGroupCodelistsCodelistGet({ productGroup, codelist }: MdrRootCtProductGroupCodelistsCodelistGetRequest): Observable<RootCtCodelist>
    mdrRootCtProductGroupCodelistsCodelistGet({ productGroup, codelist }: MdrRootCtProductGroupCodelistsCodelistGetRequest, opts?: OperationOpts): Observable<AjaxResponse<RootCtCodelist>>
    mdrRootCtProductGroupCodelistsCodelistGet({ productGroup, codelist }: MdrRootCtProductGroupCodelistsCodelistGetRequest, opts?: OperationOpts): Observable<RootCtCodelist | AjaxResponse<RootCtCodelist>> {
        throwIfNullOrUndefined(productGroup, 'productGroup', 'mdrRootCtProductGroupCodelistsCodelistGet');
        throwIfNullOrUndefined(codelist, 'codelist', 'mdrRootCtProductGroupCodelistsCodelistGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<RootCtCodelist>({
            url: '/mdr/root/ct/{productGroup}/codelists/{codelist}'.replace('{productGroup}', encodeURI(productGroup)).replace('{codelist}', encodeURI(codelist)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDISC Library Root CT Term
     */
    mdrRootCtProductGroupCodelistsCodelistTermsTermGet({ productGroup, codelist, term }: MdrRootCtProductGroupCodelistsCodelistTermsTermGetRequest): Observable<RootCtTerm>
    mdrRootCtProductGroupCodelistsCodelistTermsTermGet({ productGroup, codelist, term }: MdrRootCtProductGroupCodelistsCodelistTermsTermGetRequest, opts?: OperationOpts): Observable<AjaxResponse<RootCtTerm>>
    mdrRootCtProductGroupCodelistsCodelistTermsTermGet({ productGroup, codelist, term }: MdrRootCtProductGroupCodelistsCodelistTermsTermGetRequest, opts?: OperationOpts): Observable<RootCtTerm | AjaxResponse<RootCtTerm>> {
        throwIfNullOrUndefined(productGroup, 'productGroup', 'mdrRootCtProductGroupCodelistsCodelistTermsTermGet');
        throwIfNullOrUndefined(codelist, 'codelist', 'mdrRootCtProductGroupCodelistsCodelistTermsTermGet');
        throwIfNullOrUndefined(term, 'term', 'mdrRootCtProductGroupCodelistsCodelistTermsTermGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<RootCtTerm>({
            url: '/mdr/root/ct/{productGroup}/codelists/{codelist}/terms/{term}'.replace('{productGroup}', encodeURI(productGroup)).replace('{codelist}', encodeURI(codelist)).replace('{term}', encodeURI(term)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}

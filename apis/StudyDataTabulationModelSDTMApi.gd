extends ApiBee
class_name StudyDataTabulationModelSDTMApi

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, © Public Domain, 2022

# API StudyDataTabulationModelSDTMApi
# Instantiate this object and use it to make requests to the API.

func _bzz_get_api_name() -> String:
	return "StudyDataTabulationModelSDTMApi"


# Operation mdrRootSdtmClassesClassVariablesVarGet → GET /mdr/root/sdtm/classes/{class}/variables/{var}
#
# Get Root of SDTM Class Variable
func mdr_root_sdtm_classes_class_variables_var_get(
	# some_class: String = ""   Eg: GeneralObservations
	# SDTM Class Identifier
	some_class: String,
	# some_var: String = ""   Eg: --DTC
	# SDTM Variable Identifier
	some_var: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/root/sdtm/classes/{class}/variables/{var}".replace("{" + "class" + "}", _bzz_urlize_path_param(some_class)).replace("{" + "var" + "}", _bzz_urlize_path_param(some_var))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = RootSdtmClassVariable.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_root_sdtm_classes_class_variables_var_get_threaded(
	# some_class: String = ""   Eg: GeneralObservations
	# SDTM Class Identifier
	some_class: String,
	# some_var: String = ""   Eg: --DTC
	# SDTM Variable Identifier
	some_var: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_root_sdtm_classes_class_variables_var_get")
	bzz_callable.bind(
		some_class,
		some_var,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrRootSdtmDatasetsDatasetVariablesVarGet → GET /mdr/root/sdtm/datasets/{dataset}/variables/{var}
#
# Get Root SDTM Dataset Variable
func mdr_root_sdtm_datasets_dataset_variables_var_get(
	# dataset: String = ""   Eg: DM
	# SDTM Dataset Identifier
	dataset: String,
	# some_var: String = ""   Eg: SUBJID
	# SDTM Variable Identifier
	some_var: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/root/sdtm/datasets/{dataset}/variables/{var}".replace("{" + "dataset" + "}", _bzz_urlize_path_param(dataset)).replace("{" + "var" + "}", _bzz_urlize_path_param(some_var))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = RootSdtmDatasetVariable.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_root_sdtm_datasets_dataset_variables_var_get_threaded(
	# dataset: String = ""   Eg: DM
	# SDTM Dataset Identifier
	dataset: String,
	# some_var: String = ""   Eg: SUBJID
	# SDTM Variable Identifier
	some_var: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_root_sdtm_datasets_dataset_variables_var_get")
	bzz_callable.bind(
		dataset,
		some_var,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrSdtmVersionClassesClassDatasetsGet → GET /mdr/sdtm/{version}/classes/{class}/datasets
#
# Get SDTM Class Dataset List
func mdr_sdtm_version_classes_class_datasets_get(
	# version: String = ""   Eg: 1-8
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: SpecialPurpose
	# SDTM Class Identifier
	some_class: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/sdtm/{version}/classes/{class}/datasets".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "class" + "}", _bzz_urlize_path_param(some_class))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = SdtmClassDatasets.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_sdtm_version_classes_class_datasets_get_threaded(
	# version: String = ""   Eg: 1-8
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: SpecialPurpose
	# SDTM Class Identifier
	some_class: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_sdtm_version_classes_class_datasets_get")
	bzz_callable.bind(
		version,
		some_class,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrSdtmVersionClassesClassGet → GET /mdr/sdtm/{version}/classes/{class}
#
# Get SDTM Class
func mdr_sdtm_version_classes_class_get(
	# version: String = ""   Eg: 1-8
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: Findings
	# SDTM Class Identifier
	some_class: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/sdtm/{version}/classes/{class}".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "class" + "}", _bzz_urlize_path_param(some_class))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = SdtmClass.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_sdtm_version_classes_class_get_threaded(
	# version: String = ""   Eg: 1-8
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: Findings
	# SDTM Class Identifier
	some_class: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_sdtm_version_classes_class_get")
	bzz_callable.bind(
		version,
		some_class,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrSdtmVersionClassesClassVariablesGet → GET /mdr/sdtm/{version}/classes/{class}/variables
#
# Get SDTM Class Variable List
func mdr_sdtm_version_classes_class_variables_get(
	# version: String = ""   Eg: 1-8
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: GeneralObservations
	# SDTM Class Identifier
	some_class: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/sdtm/{version}/classes/{class}/variables".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "class" + "}", _bzz_urlize_path_param(some_class))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = SdtmClassVariables.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_sdtm_version_classes_class_variables_get_threaded(
	# version: String = ""   Eg: 1-8
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: GeneralObservations
	# SDTM Class Identifier
	some_class: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_sdtm_version_classes_class_variables_get")
	bzz_callable.bind(
		version,
		some_class,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrSdtmVersionClassesClassVariablesVarGet → GET /mdr/sdtm/{version}/classes/{class}/variables/{var}
#
# Get SDTM Class Variable
func mdr_sdtm_version_classes_class_variables_var_get(
	# version: String = ""   Eg: 1-8
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: GeneralObservations
	# SDTM Class Identifier
	some_class: String,
	# some_var: String = ""   Eg: --DTC
	# SDTM Variable Identifier
	some_var: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/sdtm/{version}/classes/{class}/variables/{var}".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "class" + "}", _bzz_urlize_path_param(some_class)).replace("{" + "var" + "}", _bzz_urlize_path_param(some_var))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = SdtmClassVariable.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_sdtm_version_classes_class_variables_var_get_threaded(
	# version: String = ""   Eg: 1-8
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: GeneralObservations
	# SDTM Class Identifier
	some_class: String,
	# some_var: String = ""   Eg: --DTC
	# SDTM Variable Identifier
	some_var: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_sdtm_version_classes_class_variables_var_get")
	bzz_callable.bind(
		version,
		some_class,
		some_var,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrSdtmVersionClassesGet → GET /mdr/sdtm/{version}/classes
#
# Get SDTM Class List
func mdr_sdtm_version_classes_get(
	# version: String = ""   Eg: 1-8
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/sdtm/{version}/classes".replace("{" + "version" + "}", _bzz_urlize_path_param(version))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = SdtmClasses.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_sdtm_version_classes_get_threaded(
	# version: String = ""   Eg: 1-8
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_sdtm_version_classes_get")
	bzz_callable.bind(
		version,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrSdtmVersionDatasetsDatasetGet → GET /mdr/sdtm/{version}/datasets/{dataset}
#
# Get SDTM Dataset
func mdr_sdtm_version_datasets_dataset_get(
	# version: String = ""   Eg: 1-8
	# CDISC Library Product Version
	version: String,
	# dataset: String = ""   Eg: DM
	# SDTM Dataset Identifier
	dataset: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/sdtm/{version}/datasets/{dataset}".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "dataset" + "}", _bzz_urlize_path_param(dataset))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = SdtmDataset.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_sdtm_version_datasets_dataset_get_threaded(
	# version: String = ""   Eg: 1-8
	# CDISC Library Product Version
	version: String,
	# dataset: String = ""   Eg: DM
	# SDTM Dataset Identifier
	dataset: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_sdtm_version_datasets_dataset_get")
	bzz_callable.bind(
		version,
		dataset,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrSdtmVersionDatasetsDatasetVariablesGet → GET /mdr/sdtm/{version}/datasets/{dataset}/variables
#
# Get SDTM Dataset Variable List
func mdr_sdtm_version_datasets_dataset_variables_get(
	# version: String = ""   Eg: 1-8
	# CDISC Library Product Version
	version: String,
	# dataset: String = ""   Eg: DM
	# SDTM Dataset Identifier
	dataset: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/sdtm/{version}/datasets/{dataset}/variables".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "dataset" + "}", _bzz_urlize_path_param(dataset))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = SdtmDatasetVariables.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_sdtm_version_datasets_dataset_variables_get_threaded(
	# version: String = ""   Eg: 1-8
	# CDISC Library Product Version
	version: String,
	# dataset: String = ""   Eg: DM
	# SDTM Dataset Identifier
	dataset: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_sdtm_version_datasets_dataset_variables_get")
	bzz_callable.bind(
		version,
		dataset,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrSdtmVersionDatasetsDatasetVariablesVarGet → GET /mdr/sdtm/{version}/datasets/{dataset}/variables/{var}
#
# Get SDTM Dataset Variable
func mdr_sdtm_version_datasets_dataset_variables_var_get(
	# version: String = ""   Eg: 1-8
	# CDISC Library Product Version
	version: String,
	# dataset: String = ""   Eg: DM
	# SDTM Dataset Identifier
	dataset: String,
	# some_var: String = ""   Eg: SUBJID
	# SDTM Variable Identifier
	some_var: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/sdtm/{version}/datasets/{dataset}/variables/{var}".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "dataset" + "}", _bzz_urlize_path_param(dataset)).replace("{" + "var" + "}", _bzz_urlize_path_param(some_var))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = SdtmDatasetVariable.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_sdtm_version_datasets_dataset_variables_var_get_threaded(
	# version: String = ""   Eg: 1-8
	# CDISC Library Product Version
	version: String,
	# dataset: String = ""   Eg: DM
	# SDTM Dataset Identifier
	dataset: String,
	# some_var: String = ""   Eg: SUBJID
	# SDTM Variable Identifier
	some_var: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_sdtm_version_datasets_dataset_variables_var_get")
	bzz_callable.bind(
		version,
		dataset,
		some_var,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrSdtmVersionDatasetsGet → GET /mdr/sdtm/{version}/datasets
#
# Get SDTM Dataset List
func mdr_sdtm_version_datasets_get(
	# version: String = ""   Eg: 1-8
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/sdtm/{version}/datasets".replace("{" + "version" + "}", _bzz_urlize_path_param(version))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml', 'text/csv']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = SdtmDatasets.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_sdtm_version_datasets_get_threaded(
	# version: String = ""   Eg: 1-8
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_sdtm_version_datasets_get")
	bzz_callable.bind(
		version,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrSdtmVersionGet → GET /mdr/sdtm/{version}
#
# Get SDTM product
func mdr_sdtm_version_get(
	# version: String = ""   Eg: 1-8
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/sdtm/{version}".replace("{" + "version" + "}", _bzz_urlize_path_param(version))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = SdtmProduct.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_sdtm_version_get_threaded(
	# version: String = ""   Eg: 1-8
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_sdtm_version_get")
	bzz_callable.bind(
		version,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread



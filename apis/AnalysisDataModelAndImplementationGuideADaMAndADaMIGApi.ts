// tslint:disable
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    AdamDatastructure,
    AdamDatastructureVariables,
    AdamDatastructureVarsets,
    AdamProduct,
    AdamProductDatastructures,
    AdamVariable,
    AdamVarset,
    DefaultErrorResponse,
    ExportAdamDatastructuresTable,
    ExportAdamVariablesTable,
    ExportAdamWorkbook,
    XmlAdamDatastructure,
    XmlAdamDatastructureVariables,
    XmlAdamDatastructureVarsets,
    XmlAdamProduct,
    XmlAdamProductDatastructures,
    XmlAdamVariable,
    XmlAdamVarset,
} from '../models';

export interface MdrAdamProductDatastructuresGetRequest {
    product: string;
}

export interface MdrAdamProductDatastructuresStructureGetRequest {
    product: string;
    structure: string;
}

export interface MdrAdamProductDatastructuresStructureVariablesGetRequest {
    product: string;
    structure: string;
}

export interface MdrAdamProductDatastructuresStructureVariablesVarGetRequest {
    product: string;
    structure: string;
    _var: string;
}

export interface MdrAdamProductDatastructuresStructureVarsetsGetRequest {
    product: string;
    structure: string;
}

export interface MdrAdamProductDatastructuresStructureVarsetsVarsetGetRequest {
    product: string;
    structure: string;
    varset: string;
}

export interface MdrAdamProductGetRequest {
    product: string;
}

/**
 * no description
 */
export class AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi extends BaseAPI {

    /**
     * Get ADaM Data Structure List
     */
    mdrAdamProductDatastructuresGet({ product }: MdrAdamProductDatastructuresGetRequest): Observable<AdamProductDatastructures>
    mdrAdamProductDatastructuresGet({ product }: MdrAdamProductDatastructuresGetRequest, opts?: OperationOpts): Observable<AjaxResponse<AdamProductDatastructures>>
    mdrAdamProductDatastructuresGet({ product }: MdrAdamProductDatastructuresGetRequest, opts?: OperationOpts): Observable<AdamProductDatastructures | AjaxResponse<AdamProductDatastructures>> {
        throwIfNullOrUndefined(product, 'product', 'mdrAdamProductDatastructuresGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<AdamProductDatastructures>({
            url: '/mdr/adam/{product}/datastructures'.replace('{product}', encodeURI(product)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get ADaM Data Structure
     */
    mdrAdamProductDatastructuresStructureGet({ product, structure }: MdrAdamProductDatastructuresStructureGetRequest): Observable<AdamDatastructure>
    mdrAdamProductDatastructuresStructureGet({ product, structure }: MdrAdamProductDatastructuresStructureGetRequest, opts?: OperationOpts): Observable<AjaxResponse<AdamDatastructure>>
    mdrAdamProductDatastructuresStructureGet({ product, structure }: MdrAdamProductDatastructuresStructureGetRequest, opts?: OperationOpts): Observable<AdamDatastructure | AjaxResponse<AdamDatastructure>> {
        throwIfNullOrUndefined(product, 'product', 'mdrAdamProductDatastructuresStructureGet');
        throwIfNullOrUndefined(structure, 'structure', 'mdrAdamProductDatastructuresStructureGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<AdamDatastructure>({
            url: '/mdr/adam/{product}/datastructures/{structure}'.replace('{product}', encodeURI(product)).replace('{structure}', encodeURI(structure)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get ADaM Variable List
     */
    mdrAdamProductDatastructuresStructureVariablesGet({ product, structure }: MdrAdamProductDatastructuresStructureVariablesGetRequest): Observable<AdamDatastructureVariables>
    mdrAdamProductDatastructuresStructureVariablesGet({ product, structure }: MdrAdamProductDatastructuresStructureVariablesGetRequest, opts?: OperationOpts): Observable<AjaxResponse<AdamDatastructureVariables>>
    mdrAdamProductDatastructuresStructureVariablesGet({ product, structure }: MdrAdamProductDatastructuresStructureVariablesGetRequest, opts?: OperationOpts): Observable<AdamDatastructureVariables | AjaxResponse<AdamDatastructureVariables>> {
        throwIfNullOrUndefined(product, 'product', 'mdrAdamProductDatastructuresStructureVariablesGet');
        throwIfNullOrUndefined(structure, 'structure', 'mdrAdamProductDatastructuresStructureVariablesGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<AdamDatastructureVariables>({
            url: '/mdr/adam/{product}/datastructures/{structure}/variables'.replace('{product}', encodeURI(product)).replace('{structure}', encodeURI(structure)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get ADaM Variable
     */
    mdrAdamProductDatastructuresStructureVariablesVarGet({ product, structure, _var }: MdrAdamProductDatastructuresStructureVariablesVarGetRequest): Observable<AdamVariable>
    mdrAdamProductDatastructuresStructureVariablesVarGet({ product, structure, _var }: MdrAdamProductDatastructuresStructureVariablesVarGetRequest, opts?: OperationOpts): Observable<AjaxResponse<AdamVariable>>
    mdrAdamProductDatastructuresStructureVariablesVarGet({ product, structure, _var }: MdrAdamProductDatastructuresStructureVariablesVarGetRequest, opts?: OperationOpts): Observable<AdamVariable | AjaxResponse<AdamVariable>> {
        throwIfNullOrUndefined(product, 'product', 'mdrAdamProductDatastructuresStructureVariablesVarGet');
        throwIfNullOrUndefined(structure, 'structure', 'mdrAdamProductDatastructuresStructureVariablesVarGet');
        throwIfNullOrUndefined(_var, '_var', 'mdrAdamProductDatastructuresStructureVariablesVarGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<AdamVariable>({
            url: '/mdr/adam/{product}/datastructures/{structure}/variables/{var}'.replace('{product}', encodeURI(product)).replace('{structure}', encodeURI(structure)).replace('{var}', encodeURI(_var)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get ADaM Variable Set List
     */
    mdrAdamProductDatastructuresStructureVarsetsGet({ product, structure }: MdrAdamProductDatastructuresStructureVarsetsGetRequest): Observable<AdamDatastructureVarsets>
    mdrAdamProductDatastructuresStructureVarsetsGet({ product, structure }: MdrAdamProductDatastructuresStructureVarsetsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<AdamDatastructureVarsets>>
    mdrAdamProductDatastructuresStructureVarsetsGet({ product, structure }: MdrAdamProductDatastructuresStructureVarsetsGetRequest, opts?: OperationOpts): Observable<AdamDatastructureVarsets | AjaxResponse<AdamDatastructureVarsets>> {
        throwIfNullOrUndefined(product, 'product', 'mdrAdamProductDatastructuresStructureVarsetsGet');
        throwIfNullOrUndefined(structure, 'structure', 'mdrAdamProductDatastructuresStructureVarsetsGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<AdamDatastructureVarsets>({
            url: '/mdr/adam/{product}/datastructures/{structure}/varsets'.replace('{product}', encodeURI(product)).replace('{structure}', encodeURI(structure)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get ADaM Variable Set
     */
    mdrAdamProductDatastructuresStructureVarsetsVarsetGet({ product, structure, varset }: MdrAdamProductDatastructuresStructureVarsetsVarsetGetRequest): Observable<AdamVarset>
    mdrAdamProductDatastructuresStructureVarsetsVarsetGet({ product, structure, varset }: MdrAdamProductDatastructuresStructureVarsetsVarsetGetRequest, opts?: OperationOpts): Observable<AjaxResponse<AdamVarset>>
    mdrAdamProductDatastructuresStructureVarsetsVarsetGet({ product, structure, varset }: MdrAdamProductDatastructuresStructureVarsetsVarsetGetRequest, opts?: OperationOpts): Observable<AdamVarset | AjaxResponse<AdamVarset>> {
        throwIfNullOrUndefined(product, 'product', 'mdrAdamProductDatastructuresStructureVarsetsVarsetGet');
        throwIfNullOrUndefined(structure, 'structure', 'mdrAdamProductDatastructuresStructureVarsetsVarsetGet');
        throwIfNullOrUndefined(varset, 'varset', 'mdrAdamProductDatastructuresStructureVarsetsVarsetGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<AdamVarset>({
            url: '/mdr/adam/{product}/datastructures/{structure}/varsets/{varset}'.replace('{product}', encodeURI(product)).replace('{structure}', encodeURI(structure)).replace('{varset}', encodeURI(varset)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get ADaM Product
     */
    mdrAdamProductGet({ product }: MdrAdamProductGetRequest): Observable<AdamProduct>
    mdrAdamProductGet({ product }: MdrAdamProductGetRequest, opts?: OperationOpts): Observable<AjaxResponse<AdamProduct>>
    mdrAdamProductGet({ product }: MdrAdamProductGetRequest, opts?: OperationOpts): Observable<AdamProduct | AjaxResponse<AdamProduct>> {
        throwIfNullOrUndefined(product, 'product', 'mdrAdamProductGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<AdamProduct>({
            url: '/mdr/adam/{product}'.replace('{product}', encodeURI(product)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}

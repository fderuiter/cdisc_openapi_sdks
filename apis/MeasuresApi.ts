/* tslint:disable */
/* eslint-disable */
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DefaultErrorResponse,
  ExportQrsItemsTable,
  ExportQrsWorkbook,
  QrsItem,
  QrsItems,
  QrsProduct,
  QrsResponsegroup,
  QrsResponsegroups,
  XmlQrsItem,
  XmlQrsItems,
  XmlQrsProduct,
  XmlQrsResponsegroup,
  XmlQrsResponsegroups,
} from '../models/index';
import {
    DefaultErrorResponseFromJSON,
    DefaultErrorResponseToJSON,
    ExportQrsItemsTableFromJSON,
    ExportQrsItemsTableToJSON,
    ExportQrsWorkbookFromJSON,
    ExportQrsWorkbookToJSON,
    QrsItemFromJSON,
    QrsItemToJSON,
    QrsItemsFromJSON,
    QrsItemsToJSON,
    QrsProductFromJSON,
    QrsProductToJSON,
    QrsResponsegroupFromJSON,
    QrsResponsegroupToJSON,
    QrsResponsegroupsFromJSON,
    QrsResponsegroupsToJSON,
    XmlQrsItemFromJSON,
    XmlQrsItemToJSON,
    XmlQrsItemsFromJSON,
    XmlQrsItemsToJSON,
    XmlQrsProductFromJSON,
    XmlQrsProductToJSON,
    XmlQrsResponsegroupFromJSON,
    XmlQrsResponsegroupToJSON,
    XmlQrsResponsegroupsFromJSON,
    XmlQrsResponsegroupsToJSON,
} from '../models/index';

export interface MdrQrsMeasureVersionGetRequest {
    measure: string;
    version: string;
}

export interface MdrQrsMeasureVersionItemsGetRequest {
    measure: string;
    version: string;
}

export interface MdrQrsMeasureVersionItemsItemGetRequest {
    measure: string;
    version: string;
    item: string;
}

export interface MdrQrsMeasureVersionResponsegroupsGetRequest {
    measure: string;
    version: string;
}

export interface MdrQrsMeasureVersionResponsegroupsResponsegroupGetRequest {
    measure: string;
    version: string;
    responsegroup: string;
}

/**
 * 
 */
export class MeasuresApi extends runtime.BaseAPI {

    /**
     * Get QRS Product
     */
    async mdrQrsMeasureVersionGetRaw(requestParameters: MdrQrsMeasureVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QrsProduct>> {
        if (requestParameters['measure'] == null) {
            throw new runtime.RequiredError(
                'measure',
                'Required parameter "measure" was null or undefined when calling mdrQrsMeasureVersionGet().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrQrsMeasureVersionGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/qrs/{measure}/{version}`;
        urlPath = urlPath.replace(`{${"measure"}}`, encodeURIComponent(String(requestParameters['measure'])));
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QrsProductFromJSON(jsonValue));
    }

    /**
     * Get QRS Product
     */
    async mdrQrsMeasureVersionGet(requestParameters: MdrQrsMeasureVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QrsProduct> {
        const response = await this.mdrQrsMeasureVersionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get QRS Item List
     */
    async mdrQrsMeasureVersionItemsGetRaw(requestParameters: MdrQrsMeasureVersionItemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QrsItems>> {
        if (requestParameters['measure'] == null) {
            throw new runtime.RequiredError(
                'measure',
                'Required parameter "measure" was null or undefined when calling mdrQrsMeasureVersionItemsGet().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrQrsMeasureVersionItemsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/qrs/{measure}/{version}/items`;
        urlPath = urlPath.replace(`{${"measure"}}`, encodeURIComponent(String(requestParameters['measure'])));
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QrsItemsFromJSON(jsonValue));
    }

    /**
     * Get QRS Item List
     */
    async mdrQrsMeasureVersionItemsGet(requestParameters: MdrQrsMeasureVersionItemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QrsItems> {
        const response = await this.mdrQrsMeasureVersionItemsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get QRS Item
     */
    async mdrQrsMeasureVersionItemsItemGetRaw(requestParameters: MdrQrsMeasureVersionItemsItemGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QrsItem>> {
        if (requestParameters['measure'] == null) {
            throw new runtime.RequiredError(
                'measure',
                'Required parameter "measure" was null or undefined when calling mdrQrsMeasureVersionItemsItemGet().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrQrsMeasureVersionItemsItemGet().'
            );
        }

        if (requestParameters['item'] == null) {
            throw new runtime.RequiredError(
                'item',
                'Required parameter "item" was null or undefined when calling mdrQrsMeasureVersionItemsItemGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/qrs/{measure}/{version}/items/{item}`;
        urlPath = urlPath.replace(`{${"measure"}}`, encodeURIComponent(String(requestParameters['measure'])));
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"item"}}`, encodeURIComponent(String(requestParameters['item'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QrsItemFromJSON(jsonValue));
    }

    /**
     * Get QRS Item
     */
    async mdrQrsMeasureVersionItemsItemGet(requestParameters: MdrQrsMeasureVersionItemsItemGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QrsItem> {
        const response = await this.mdrQrsMeasureVersionItemsItemGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get QRS Response Group List
     */
    async mdrQrsMeasureVersionResponsegroupsGetRaw(requestParameters: MdrQrsMeasureVersionResponsegroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QrsResponsegroups>> {
        if (requestParameters['measure'] == null) {
            throw new runtime.RequiredError(
                'measure',
                'Required parameter "measure" was null or undefined when calling mdrQrsMeasureVersionResponsegroupsGet().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrQrsMeasureVersionResponsegroupsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/qrs/{measure}/{version}/responsegroups`;
        urlPath = urlPath.replace(`{${"measure"}}`, encodeURIComponent(String(requestParameters['measure'])));
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QrsResponsegroupsFromJSON(jsonValue));
    }

    /**
     * Get QRS Response Group List
     */
    async mdrQrsMeasureVersionResponsegroupsGet(requestParameters: MdrQrsMeasureVersionResponsegroupsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QrsResponsegroups> {
        const response = await this.mdrQrsMeasureVersionResponsegroupsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get QRS Response Group
     */
    async mdrQrsMeasureVersionResponsegroupsResponsegroupGetRaw(requestParameters: MdrQrsMeasureVersionResponsegroupsResponsegroupGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QrsResponsegroup>> {
        if (requestParameters['measure'] == null) {
            throw new runtime.RequiredError(
                'measure',
                'Required parameter "measure" was null or undefined when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet().'
            );
        }

        if (requestParameters['responsegroup'] == null) {
            throw new runtime.RequiredError(
                'responsegroup',
                'Required parameter "responsegroup" was null or undefined when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/qrs/{measure}/{version}/responsegroups/{responsegroup}`;
        urlPath = urlPath.replace(`{${"measure"}}`, encodeURIComponent(String(requestParameters['measure'])));
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"responsegroup"}}`, encodeURIComponent(String(requestParameters['responsegroup'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QrsResponsegroupFromJSON(jsonValue));
    }

    /**
     * Get QRS Response Group
     */
    async mdrQrsMeasureVersionResponsegroupsResponsegroupGet(requestParameters: MdrQrsMeasureVersionResponsegroupsResponsegroupGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QrsResponsegroup> {
        const response = await this.mdrQrsMeasureVersionResponsegroupsResponsegroupGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

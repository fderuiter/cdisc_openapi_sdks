extends ApiBee
class_name CDASHImplementationGuideCDASHIGApi

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, © Public Domain, 2022

# API CDASHImplementationGuideCDASHIGApi
# Instantiate this object and use it to make requests to the API.

func _bzz_get_api_name() -> String:
	return "CDASHImplementationGuideCDASHIGApi"


# Operation mdrCdashigVersionClassesClassDomainsGet → GET /mdr/cdashig/{version}/classes/{class}/domains
#
# Get CDASHIG Class Domain List
func mdr_cdashig_version_classes_class_domains_get(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: Findings
	# CDASHIG Class Identifier
	some_class: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/cdashig/{version}/classes/{class}/domains".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "class" + "}", _bzz_urlize_path_param(some_class))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = CdashigClassDomains.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_cdashig_version_classes_class_domains_get_threaded(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: Findings
	# CDASHIG Class Identifier
	some_class: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_cdashig_version_classes_class_domains_get")
	bzz_callable.bind(
		version,
		some_class,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrCdashigVersionClassesClassGet → GET /mdr/cdashig/{version}/classes/{class}
#
# Get CDASHIG Class
func mdr_cdashig_version_classes_class_get(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: Findings
	# CDASHIG Class Identifier
	some_class: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/cdashig/{version}/classes/{class}".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "class" + "}", _bzz_urlize_path_param(some_class))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = CdashigClass.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_cdashig_version_classes_class_get_threaded(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: Findings
	# CDASHIG Class Identifier
	some_class: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_cdashig_version_classes_class_get")
	bzz_callable.bind(
		version,
		some_class,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrCdashigVersionClassesClassScenariosGet → GET /mdr/cdashig/{version}/classes/{class}/scenarios
#
# Get CDASHIG Class Scenario List
func mdr_cdashig_version_classes_class_scenarios_get(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: Findings
	# CDASHIG Class Identifier
	some_class: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/cdashig/{version}/classes/{class}/scenarios".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "class" + "}", _bzz_urlize_path_param(some_class))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = CdashigClassScenarios.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_cdashig_version_classes_class_scenarios_get_threaded(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: Findings
	# CDASHIG Class Identifier
	some_class: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_cdashig_version_classes_class_scenarios_get")
	bzz_callable.bind(
		version,
		some_class,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrCdashigVersionClassesGet → GET /mdr/cdashig/{version}/classes
#
# Get CDASHIG Class List
func mdr_cdashig_version_classes_get(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/cdashig/{version}/classes".replace("{" + "version" + "}", _bzz_urlize_path_param(version))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = CdashigProductClasses.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_cdashig_version_classes_get_threaded(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_cdashig_version_classes_get")
	bzz_callable.bind(
		version,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrCdashigVersionDomainsDomainFieldsFieldGet → GET /mdr/cdashig/{version}/domains/{domain}/fields/{field}
#
# Get CDASHIG Domain Field
func mdr_cdashig_version_domains_domain_fields_field_get(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	# domain: String = ""   Eg: VS
	# CDASHIG Domain Identifier
	domain: String,
	# field: String = ""   Eg: VSDAT
	# CDASHIG Field Identifier
	field: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/cdashig/{version}/domains/{domain}/fields/{field}".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "domain" + "}", _bzz_urlize_path_param(domain)).replace("{" + "field" + "}", _bzz_urlize_path_param(field))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = CdashigDomainField.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_cdashig_version_domains_domain_fields_field_get_threaded(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	# domain: String = ""   Eg: VS
	# CDASHIG Domain Identifier
	domain: String,
	# field: String = ""   Eg: VSDAT
	# CDASHIG Field Identifier
	field: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_cdashig_version_domains_domain_fields_field_get")
	bzz_callable.bind(
		version,
		domain,
		field,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrCdashigVersionDomainsDomainFieldsGet → GET /mdr/cdashig/{version}/domains/{domain}/fields
#
# Get CDASHIG Domain Field List
func mdr_cdashig_version_domains_domain_fields_get(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	# domain: String = ""   Eg: VS
	# CDASHIG Domain Identifier
	domain: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/cdashig/{version}/domains/{domain}/fields".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "domain" + "}", _bzz_urlize_path_param(domain))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = CdashigDomainFields.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_cdashig_version_domains_domain_fields_get_threaded(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	# domain: String = ""   Eg: VS
	# CDASHIG Domain Identifier
	domain: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_cdashig_version_domains_domain_fields_get")
	bzz_callable.bind(
		version,
		domain,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrCdashigVersionDomainsDomainGet → GET /mdr/cdashig/{version}/domains/{domain}
#
# Get CDASHIG Domain
func mdr_cdashig_version_domains_domain_get(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	# domain: String = ""   Eg: VS
	# CDASHIG Domain Identifier
	domain: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/cdashig/{version}/domains/{domain}".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "domain" + "}", _bzz_urlize_path_param(domain))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = CdashigDomain.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_cdashig_version_domains_domain_get_threaded(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	# domain: String = ""   Eg: VS
	# CDASHIG Domain Identifier
	domain: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_cdashig_version_domains_domain_get")
	bzz_callable.bind(
		version,
		domain,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrCdashigVersionDomainsGet → GET /mdr/cdashig/{version}/domains
#
# Get CDASHIG Domain List
func mdr_cdashig_version_domains_get(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/cdashig/{version}/domains".replace("{" + "version" + "}", _bzz_urlize_path_param(version))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = CdashigProductDomains.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_cdashig_version_domains_get_threaded(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_cdashig_version_domains_get")
	bzz_callable.bind(
		version,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrCdashigVersionGet → GET /mdr/cdashig/{version}
#
# Get CDASHIG Product
func mdr_cdashig_version_get(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/cdashig/{version}".replace("{" + "version" + "}", _bzz_urlize_path_param(version))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = CdashigProduct.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_cdashig_version_get_threaded(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_cdashig_version_get")
	bzz_callable.bind(
		version,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet → GET /mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields/{field}
#
# Get CDASHIG Scenario Field
func mdr_cdashig_version_scenarios_domain_scenario_fields_field_get(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	# domain: String = ""   Eg: VS
	# CDASHIG Domain Identifier
	domain: String,
	# scenario: String = ""   Eg: Generic
	# CDASHIG Scenario Identifier
	scenario: String,
	# field: String = ""   Eg: VSDAT
	# CDASHIG Field Identifier
	field: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields/{field}".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "domain" + "}", _bzz_urlize_path_param(domain)).replace("{" + "scenario" + "}", _bzz_urlize_path_param(scenario)).replace("{" + "field" + "}", _bzz_urlize_path_param(field))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = CdashigScenarioField.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_cdashig_version_scenarios_domain_scenario_fields_field_get_threaded(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	# domain: String = ""   Eg: VS
	# CDASHIG Domain Identifier
	domain: String,
	# scenario: String = ""   Eg: Generic
	# CDASHIG Scenario Identifier
	scenario: String,
	# field: String = ""   Eg: VSDAT
	# CDASHIG Field Identifier
	field: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_cdashig_version_scenarios_domain_scenario_fields_field_get")
	bzz_callable.bind(
		version,
		domain,
		scenario,
		field,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrCdashigVersionScenariosDomainScenarioFieldsGet → GET /mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields
#
# Get CDASHIG Scenario Field List
func mdr_cdashig_version_scenarios_domain_scenario_fields_get(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	# domain: String = ""   Eg: VS
	# CDASHIG Domain Identifier
	domain: String,
	# scenario: String = ""   Eg: HorizontalGeneric
	# CDASHIG Scenario Identifier
	scenario: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "domain" + "}", _bzz_urlize_path_param(domain)).replace("{" + "scenario" + "}", _bzz_urlize_path_param(scenario))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = CdashigScenarioFields.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_cdashig_version_scenarios_domain_scenario_fields_get_threaded(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	# domain: String = ""   Eg: VS
	# CDASHIG Domain Identifier
	domain: String,
	# scenario: String = ""   Eg: HorizontalGeneric
	# CDASHIG Scenario Identifier
	scenario: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_cdashig_version_scenarios_domain_scenario_fields_get")
	bzz_callable.bind(
		version,
		domain,
		scenario,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrCdashigVersionScenariosDomainScenarioGet → GET /mdr/cdashig/{version}/scenarios/{domain}.{scenario}
#
# Get CDASHIG Scenario
func mdr_cdashig_version_scenarios_domain_scenario_get(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	# domain: String = ""   Eg: VS
	# CDASHIG Domain Identifier
	domain: String,
	# scenario: String = ""   Eg: HorizontalGeneric
	# CDASHIG Scenario Identifier
	scenario: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/cdashig/{version}/scenarios/{domain}.{scenario}".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "domain" + "}", _bzz_urlize_path_param(domain)).replace("{" + "scenario" + "}", _bzz_urlize_path_param(scenario))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = CdashigScenario.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_cdashig_version_scenarios_domain_scenario_get_threaded(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	# domain: String = ""   Eg: VS
	# CDASHIG Domain Identifier
	domain: String,
	# scenario: String = ""   Eg: HorizontalGeneric
	# CDASHIG Scenario Identifier
	scenario: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_cdashig_version_scenarios_domain_scenario_get")
	bzz_callable.bind(
		version,
		domain,
		scenario,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrCdashigVersionScenariosGet → GET /mdr/cdashig/{version}/scenarios
#
# Get CDASHIG Scenario List
func mdr_cdashig_version_scenarios_get(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/cdashig/{version}/scenarios".replace("{" + "version" + "}", _bzz_urlize_path_param(version))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = CdashigProductScenarios.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_cdashig_version_scenarios_get_threaded(
	# version: String = ""   Eg: 2-1
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_cdashig_version_scenarios_get")
	bzz_callable.bind(
		version,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrRootCdashigDomainsDomainFieldsFieldGet → GET /mdr/root/cdashig/domains/{domain}/fields/{field}
#
# Get Root CDASHIG Domain Field
func mdr_root_cdashig_domains_domain_fields_field_get(
	# domain: String = ""   Eg: VS
	# CDASHIG Domain Identifier
	domain: String,
	# field: String = ""   Eg: VSDAT
	# CDASHIG Field Identifier
	field: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/root/cdashig/domains/{domain}/fields/{field}".replace("{" + "domain" + "}", _bzz_urlize_path_param(domain)).replace("{" + "field" + "}", _bzz_urlize_path_param(field))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = RootCdashigDomainField.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_root_cdashig_domains_domain_fields_field_get_threaded(
	# domain: String = ""   Eg: VS
	# CDASHIG Domain Identifier
	domain: String,
	# field: String = ""   Eg: VSDAT
	# CDASHIG Field Identifier
	field: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_root_cdashig_domains_domain_fields_field_get")
	bzz_callable.bind(
		domain,
		field,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrRootCdashigScenariosDomainScenarioFieldsFieldGet → GET /mdr/root/cdashig/scenarios/{domain}.{scenario}/fields/{field}
#
# Get Root CDASHIG Scenario Field
func mdr_root_cdashig_scenarios_domain_scenario_fields_field_get(
	# domain: String = ""   Eg: VS
	# CDASHIG Domain Identifier
	domain: String,
	# scenario: String = ""   Eg: Generic
	# CDASHIG Scenario Identifier
	scenario: String,
	# field: String = ""   Eg: VSDAT
	# CDASHIG Field Identifier
	field: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/root/cdashig/scenarios/{domain}.{scenario}/fields/{field}".replace("{" + "domain" + "}", _bzz_urlize_path_param(domain)).replace("{" + "scenario" + "}", _bzz_urlize_path_param(scenario)).replace("{" + "field" + "}", _bzz_urlize_path_param(field))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = RootCdashigScenarioField.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_root_cdashig_scenarios_domain_scenario_fields_field_get_threaded(
	# domain: String = ""   Eg: VS
	# CDASHIG Domain Identifier
	domain: String,
	# scenario: String = ""   Eg: Generic
	# CDASHIG Scenario Identifier
	scenario: String,
	# field: String = ""   Eg: VSDAT
	# CDASHIG Field Identifier
	field: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_root_cdashig_scenarios_domain_scenario_fields_field_get")
	bzz_callable.bind(
		domain,
		scenario,
		field,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread



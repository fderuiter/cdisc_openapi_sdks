/* tslint:disable */
/* eslint-disable */
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DefaultErrorResponse,
  ExportSdtmDatasetsTable,
  ExportSdtmVariablesTable,
  ExportSdtmWorkbook,
  RootSdtmClassVariable,
  RootSdtmDatasetVariable,
  SdtmClass,
  SdtmClassDatasets,
  SdtmClassVariable,
  SdtmClassVariables,
  SdtmClasses,
  SdtmDataset,
  SdtmDatasetVariable,
  SdtmDatasetVariables,
  SdtmDatasets,
  SdtmProduct,
  XmlRootSdtmClassVariable,
  XmlRootSdtmDatasetVariable,
  XmlSdtmClass,
  XmlSdtmClassDatasets,
  XmlSdtmClassVariable,
  XmlSdtmClassVariables,
  XmlSdtmClasses,
  XmlSdtmDataset,
  XmlSdtmDatasetVariable,
  XmlSdtmDatasetVariables,
  XmlSdtmDatasets,
  XmlSdtmProduct,
} from '../models/index';
import {
    DefaultErrorResponseFromJSON,
    DefaultErrorResponseToJSON,
    ExportSdtmDatasetsTableFromJSON,
    ExportSdtmDatasetsTableToJSON,
    ExportSdtmVariablesTableFromJSON,
    ExportSdtmVariablesTableToJSON,
    ExportSdtmWorkbookFromJSON,
    ExportSdtmWorkbookToJSON,
    RootSdtmClassVariableFromJSON,
    RootSdtmClassVariableToJSON,
    RootSdtmDatasetVariableFromJSON,
    RootSdtmDatasetVariableToJSON,
    SdtmClassFromJSON,
    SdtmClassToJSON,
    SdtmClassDatasetsFromJSON,
    SdtmClassDatasetsToJSON,
    SdtmClassVariableFromJSON,
    SdtmClassVariableToJSON,
    SdtmClassVariablesFromJSON,
    SdtmClassVariablesToJSON,
    SdtmClassesFromJSON,
    SdtmClassesToJSON,
    SdtmDatasetFromJSON,
    SdtmDatasetToJSON,
    SdtmDatasetVariableFromJSON,
    SdtmDatasetVariableToJSON,
    SdtmDatasetVariablesFromJSON,
    SdtmDatasetVariablesToJSON,
    SdtmDatasetsFromJSON,
    SdtmDatasetsToJSON,
    SdtmProductFromJSON,
    SdtmProductToJSON,
    XmlRootSdtmClassVariableFromJSON,
    XmlRootSdtmClassVariableToJSON,
    XmlRootSdtmDatasetVariableFromJSON,
    XmlRootSdtmDatasetVariableToJSON,
    XmlSdtmClassFromJSON,
    XmlSdtmClassToJSON,
    XmlSdtmClassDatasetsFromJSON,
    XmlSdtmClassDatasetsToJSON,
    XmlSdtmClassVariableFromJSON,
    XmlSdtmClassVariableToJSON,
    XmlSdtmClassVariablesFromJSON,
    XmlSdtmClassVariablesToJSON,
    XmlSdtmClassesFromJSON,
    XmlSdtmClassesToJSON,
    XmlSdtmDatasetFromJSON,
    XmlSdtmDatasetToJSON,
    XmlSdtmDatasetVariableFromJSON,
    XmlSdtmDatasetVariableToJSON,
    XmlSdtmDatasetVariablesFromJSON,
    XmlSdtmDatasetVariablesToJSON,
    XmlSdtmDatasetsFromJSON,
    XmlSdtmDatasetsToJSON,
    XmlSdtmProductFromJSON,
    XmlSdtmProductToJSON,
} from '../models/index';

export interface MdrRootSdtmClassesClassVariablesVarGetRequest {
    _class: string;
    _var: string;
}

export interface MdrRootSdtmDatasetsDatasetVariablesVarGetRequest {
    dataset: string;
    _var: string;
}

export interface MdrSdtmVersionClassesClassDatasetsGetRequest {
    version: string;
    _class: string;
}

export interface MdrSdtmVersionClassesClassGetRequest {
    version: string;
    _class: string;
}

export interface MdrSdtmVersionClassesClassVariablesGetRequest {
    version: string;
    _class: string;
}

export interface MdrSdtmVersionClassesClassVariablesVarGetRequest {
    version: string;
    _class: string;
    _var: string;
}

export interface MdrSdtmVersionClassesGetRequest {
    version: string;
}

export interface MdrSdtmVersionDatasetsDatasetGetRequest {
    version: string;
    dataset: string;
}

export interface MdrSdtmVersionDatasetsDatasetVariablesGetRequest {
    version: string;
    dataset: string;
}

export interface MdrSdtmVersionDatasetsDatasetVariablesVarGetRequest {
    version: string;
    dataset: string;
    _var: string;
}

export interface MdrSdtmVersionDatasetsGetRequest {
    version: string;
}

export interface MdrSdtmVersionGetRequest {
    version: string;
}

/**
 * 
 */
export class StudyDataTabulationModelSDTMApi extends runtime.BaseAPI {

    /**
     * Get Root of SDTM Class Variable
     */
    async mdrRootSdtmClassesClassVariablesVarGetRaw(requestParameters: MdrRootSdtmClassesClassVariablesVarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootSdtmClassVariable>> {
        if (requestParameters['_class'] == null) {
            throw new runtime.RequiredError(
                '_class',
                'Required parameter "_class" was null or undefined when calling mdrRootSdtmClassesClassVariablesVarGet().'
            );
        }

        if (requestParameters['_var'] == null) {
            throw new runtime.RequiredError(
                '_var',
                'Required parameter "_var" was null or undefined when calling mdrRootSdtmClassesClassVariablesVarGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/root/sdtm/classes/{class}/variables/{var}`;
        urlPath = urlPath.replace(`{${"class"}}`, encodeURIComponent(String(requestParameters['_class'])));
        urlPath = urlPath.replace(`{${"var"}}`, encodeURIComponent(String(requestParameters['_var'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RootSdtmClassVariableFromJSON(jsonValue));
    }

    /**
     * Get Root of SDTM Class Variable
     */
    async mdrRootSdtmClassesClassVariablesVarGet(requestParameters: MdrRootSdtmClassesClassVariablesVarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootSdtmClassVariable> {
        const response = await this.mdrRootSdtmClassesClassVariablesVarGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Root SDTM Dataset Variable
     */
    async mdrRootSdtmDatasetsDatasetVariablesVarGetRaw(requestParameters: MdrRootSdtmDatasetsDatasetVariablesVarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootSdtmDatasetVariable>> {
        if (requestParameters['dataset'] == null) {
            throw new runtime.RequiredError(
                'dataset',
                'Required parameter "dataset" was null or undefined when calling mdrRootSdtmDatasetsDatasetVariablesVarGet().'
            );
        }

        if (requestParameters['_var'] == null) {
            throw new runtime.RequiredError(
                '_var',
                'Required parameter "_var" was null or undefined when calling mdrRootSdtmDatasetsDatasetVariablesVarGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/root/sdtm/datasets/{dataset}/variables/{var}`;
        urlPath = urlPath.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters['dataset'])));
        urlPath = urlPath.replace(`{${"var"}}`, encodeURIComponent(String(requestParameters['_var'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RootSdtmDatasetVariableFromJSON(jsonValue));
    }

    /**
     * Get Root SDTM Dataset Variable
     */
    async mdrRootSdtmDatasetsDatasetVariablesVarGet(requestParameters: MdrRootSdtmDatasetsDatasetVariablesVarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootSdtmDatasetVariable> {
        const response = await this.mdrRootSdtmDatasetsDatasetVariablesVarGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SDTM Class Dataset List
     */
    async mdrSdtmVersionClassesClassDatasetsGetRaw(requestParameters: MdrSdtmVersionClassesClassDatasetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SdtmClassDatasets>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSdtmVersionClassesClassDatasetsGet().'
            );
        }

        if (requestParameters['_class'] == null) {
            throw new runtime.RequiredError(
                '_class',
                'Required parameter "_class" was null or undefined when calling mdrSdtmVersionClassesClassDatasetsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sdtm/{version}/classes/{class}/datasets`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"class"}}`, encodeURIComponent(String(requestParameters['_class'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SdtmClassDatasetsFromJSON(jsonValue));
    }

    /**
     * Get SDTM Class Dataset List
     */
    async mdrSdtmVersionClassesClassDatasetsGet(requestParameters: MdrSdtmVersionClassesClassDatasetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SdtmClassDatasets> {
        const response = await this.mdrSdtmVersionClassesClassDatasetsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SDTM Class
     */
    async mdrSdtmVersionClassesClassGetRaw(requestParameters: MdrSdtmVersionClassesClassGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SdtmClass>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSdtmVersionClassesClassGet().'
            );
        }

        if (requestParameters['_class'] == null) {
            throw new runtime.RequiredError(
                '_class',
                'Required parameter "_class" was null or undefined when calling mdrSdtmVersionClassesClassGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sdtm/{version}/classes/{class}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"class"}}`, encodeURIComponent(String(requestParameters['_class'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SdtmClassFromJSON(jsonValue));
    }

    /**
     * Get SDTM Class
     */
    async mdrSdtmVersionClassesClassGet(requestParameters: MdrSdtmVersionClassesClassGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SdtmClass> {
        const response = await this.mdrSdtmVersionClassesClassGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SDTM Class Variable List
     */
    async mdrSdtmVersionClassesClassVariablesGetRaw(requestParameters: MdrSdtmVersionClassesClassVariablesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SdtmClassVariables>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSdtmVersionClassesClassVariablesGet().'
            );
        }

        if (requestParameters['_class'] == null) {
            throw new runtime.RequiredError(
                '_class',
                'Required parameter "_class" was null or undefined when calling mdrSdtmVersionClassesClassVariablesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sdtm/{version}/classes/{class}/variables`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"class"}}`, encodeURIComponent(String(requestParameters['_class'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SdtmClassVariablesFromJSON(jsonValue));
    }

    /**
     * Get SDTM Class Variable List
     */
    async mdrSdtmVersionClassesClassVariablesGet(requestParameters: MdrSdtmVersionClassesClassVariablesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SdtmClassVariables> {
        const response = await this.mdrSdtmVersionClassesClassVariablesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SDTM Class Variable
     */
    async mdrSdtmVersionClassesClassVariablesVarGetRaw(requestParameters: MdrSdtmVersionClassesClassVariablesVarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SdtmClassVariable>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSdtmVersionClassesClassVariablesVarGet().'
            );
        }

        if (requestParameters['_class'] == null) {
            throw new runtime.RequiredError(
                '_class',
                'Required parameter "_class" was null or undefined when calling mdrSdtmVersionClassesClassVariablesVarGet().'
            );
        }

        if (requestParameters['_var'] == null) {
            throw new runtime.RequiredError(
                '_var',
                'Required parameter "_var" was null or undefined when calling mdrSdtmVersionClassesClassVariablesVarGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sdtm/{version}/classes/{class}/variables/{var}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"class"}}`, encodeURIComponent(String(requestParameters['_class'])));
        urlPath = urlPath.replace(`{${"var"}}`, encodeURIComponent(String(requestParameters['_var'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SdtmClassVariableFromJSON(jsonValue));
    }

    /**
     * Get SDTM Class Variable
     */
    async mdrSdtmVersionClassesClassVariablesVarGet(requestParameters: MdrSdtmVersionClassesClassVariablesVarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SdtmClassVariable> {
        const response = await this.mdrSdtmVersionClassesClassVariablesVarGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SDTM Class List
     */
    async mdrSdtmVersionClassesGetRaw(requestParameters: MdrSdtmVersionClassesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SdtmClasses>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSdtmVersionClassesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sdtm/{version}/classes`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SdtmClassesFromJSON(jsonValue));
    }

    /**
     * Get SDTM Class List
     */
    async mdrSdtmVersionClassesGet(requestParameters: MdrSdtmVersionClassesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SdtmClasses> {
        const response = await this.mdrSdtmVersionClassesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SDTM Dataset
     */
    async mdrSdtmVersionDatasetsDatasetGetRaw(requestParameters: MdrSdtmVersionDatasetsDatasetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SdtmDataset>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSdtmVersionDatasetsDatasetGet().'
            );
        }

        if (requestParameters['dataset'] == null) {
            throw new runtime.RequiredError(
                'dataset',
                'Required parameter "dataset" was null or undefined when calling mdrSdtmVersionDatasetsDatasetGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sdtm/{version}/datasets/{dataset}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters['dataset'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SdtmDatasetFromJSON(jsonValue));
    }

    /**
     * Get SDTM Dataset
     */
    async mdrSdtmVersionDatasetsDatasetGet(requestParameters: MdrSdtmVersionDatasetsDatasetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SdtmDataset> {
        const response = await this.mdrSdtmVersionDatasetsDatasetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SDTM Dataset Variable List
     */
    async mdrSdtmVersionDatasetsDatasetVariablesGetRaw(requestParameters: MdrSdtmVersionDatasetsDatasetVariablesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SdtmDatasetVariables>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesGet().'
            );
        }

        if (requestParameters['dataset'] == null) {
            throw new runtime.RequiredError(
                'dataset',
                'Required parameter "dataset" was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sdtm/{version}/datasets/{dataset}/variables`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters['dataset'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SdtmDatasetVariablesFromJSON(jsonValue));
    }

    /**
     * Get SDTM Dataset Variable List
     */
    async mdrSdtmVersionDatasetsDatasetVariablesGet(requestParameters: MdrSdtmVersionDatasetsDatasetVariablesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SdtmDatasetVariables> {
        const response = await this.mdrSdtmVersionDatasetsDatasetVariablesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SDTM Dataset Variable
     */
    async mdrSdtmVersionDatasetsDatasetVariablesVarGetRaw(requestParameters: MdrSdtmVersionDatasetsDatasetVariablesVarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SdtmDatasetVariable>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet().'
            );
        }

        if (requestParameters['dataset'] == null) {
            throw new runtime.RequiredError(
                'dataset',
                'Required parameter "dataset" was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet().'
            );
        }

        if (requestParameters['_var'] == null) {
            throw new runtime.RequiredError(
                '_var',
                'Required parameter "_var" was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sdtm/{version}/datasets/{dataset}/variables/{var}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters['dataset'])));
        urlPath = urlPath.replace(`{${"var"}}`, encodeURIComponent(String(requestParameters['_var'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SdtmDatasetVariableFromJSON(jsonValue));
    }

    /**
     * Get SDTM Dataset Variable
     */
    async mdrSdtmVersionDatasetsDatasetVariablesVarGet(requestParameters: MdrSdtmVersionDatasetsDatasetVariablesVarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SdtmDatasetVariable> {
        const response = await this.mdrSdtmVersionDatasetsDatasetVariablesVarGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SDTM Dataset List
     */
    async mdrSdtmVersionDatasetsGetRaw(requestParameters: MdrSdtmVersionDatasetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SdtmDatasets>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSdtmVersionDatasetsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sdtm/{version}/datasets`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SdtmDatasetsFromJSON(jsonValue));
    }

    /**
     * Get SDTM Dataset List
     */
    async mdrSdtmVersionDatasetsGet(requestParameters: MdrSdtmVersionDatasetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SdtmDatasets> {
        const response = await this.mdrSdtmVersionDatasetsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get SDTM product
     */
    async mdrSdtmVersionGetRaw(requestParameters: MdrSdtmVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SdtmProduct>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrSdtmVersionGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/sdtm/{version}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SdtmProductFromJSON(jsonValue));
    }

    /**
     * Get SDTM product
     */
    async mdrSdtmVersionGet(requestParameters: MdrSdtmVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SdtmProduct> {
        const response = await this.mdrSdtmVersionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

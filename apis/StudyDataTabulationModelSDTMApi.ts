// tslint:disable
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    DefaultErrorResponse,
    ExportSdtmDatasetsTable,
    ExportSdtmVariablesTable,
    ExportSdtmWorkbook,
    RootSdtmClassVariable,
    RootSdtmDatasetVariable,
    SdtmClass,
    SdtmClassDatasets,
    SdtmClassVariable,
    SdtmClassVariables,
    SdtmClasses,
    SdtmDataset,
    SdtmDatasetVariable,
    SdtmDatasetVariables,
    SdtmDatasets,
    SdtmProduct,
    XmlRootSdtmClassVariable,
    XmlRootSdtmDatasetVariable,
    XmlSdtmClass,
    XmlSdtmClassDatasets,
    XmlSdtmClassVariable,
    XmlSdtmClassVariables,
    XmlSdtmClasses,
    XmlSdtmDataset,
    XmlSdtmDatasetVariable,
    XmlSdtmDatasetVariables,
    XmlSdtmDatasets,
    XmlSdtmProduct,
} from '../models';

export interface MdrRootSdtmClassesClassVariablesVarGetRequest {
    _class: string;
    _var: string;
}

export interface MdrRootSdtmDatasetsDatasetVariablesVarGetRequest {
    dataset: string;
    _var: string;
}

export interface MdrSdtmVersionClassesClassDatasetsGetRequest {
    version: string;
    _class: string;
}

export interface MdrSdtmVersionClassesClassGetRequest {
    version: string;
    _class: string;
}

export interface MdrSdtmVersionClassesClassVariablesGetRequest {
    version: string;
    _class: string;
}

export interface MdrSdtmVersionClassesClassVariablesVarGetRequest {
    version: string;
    _class: string;
    _var: string;
}

export interface MdrSdtmVersionClassesGetRequest {
    version: string;
}

export interface MdrSdtmVersionDatasetsDatasetGetRequest {
    version: string;
    dataset: string;
}

export interface MdrSdtmVersionDatasetsDatasetVariablesGetRequest {
    version: string;
    dataset: string;
}

export interface MdrSdtmVersionDatasetsDatasetVariablesVarGetRequest {
    version: string;
    dataset: string;
    _var: string;
}

export interface MdrSdtmVersionDatasetsGetRequest {
    version: string;
}

export interface MdrSdtmVersionGetRequest {
    version: string;
}

/**
 * no description
 */
export class StudyDataTabulationModelSDTMApi extends BaseAPI {

    /**
     * Get Root of SDTM Class Variable
     */
    mdrRootSdtmClassesClassVariablesVarGet({ _class, _var }: MdrRootSdtmClassesClassVariablesVarGetRequest): Observable<RootSdtmClassVariable>
    mdrRootSdtmClassesClassVariablesVarGet({ _class, _var }: MdrRootSdtmClassesClassVariablesVarGetRequest, opts?: OperationOpts): Observable<AjaxResponse<RootSdtmClassVariable>>
    mdrRootSdtmClassesClassVariablesVarGet({ _class, _var }: MdrRootSdtmClassesClassVariablesVarGetRequest, opts?: OperationOpts): Observable<RootSdtmClassVariable | AjaxResponse<RootSdtmClassVariable>> {
        throwIfNullOrUndefined(_class, '_class', 'mdrRootSdtmClassesClassVariablesVarGet');
        throwIfNullOrUndefined(_var, '_var', 'mdrRootSdtmClassesClassVariablesVarGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<RootSdtmClassVariable>({
            url: '/mdr/root/sdtm/classes/{class}/variables/{var}'.replace('{class}', encodeURI(_class)).replace('{var}', encodeURI(_var)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get Root SDTM Dataset Variable
     */
    mdrRootSdtmDatasetsDatasetVariablesVarGet({ dataset, _var }: MdrRootSdtmDatasetsDatasetVariablesVarGetRequest): Observable<RootSdtmDatasetVariable>
    mdrRootSdtmDatasetsDatasetVariablesVarGet({ dataset, _var }: MdrRootSdtmDatasetsDatasetVariablesVarGetRequest, opts?: OperationOpts): Observable<AjaxResponse<RootSdtmDatasetVariable>>
    mdrRootSdtmDatasetsDatasetVariablesVarGet({ dataset, _var }: MdrRootSdtmDatasetsDatasetVariablesVarGetRequest, opts?: OperationOpts): Observable<RootSdtmDatasetVariable | AjaxResponse<RootSdtmDatasetVariable>> {
        throwIfNullOrUndefined(dataset, 'dataset', 'mdrRootSdtmDatasetsDatasetVariablesVarGet');
        throwIfNullOrUndefined(_var, '_var', 'mdrRootSdtmDatasetsDatasetVariablesVarGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<RootSdtmDatasetVariable>({
            url: '/mdr/root/sdtm/datasets/{dataset}/variables/{var}'.replace('{dataset}', encodeURI(dataset)).replace('{var}', encodeURI(_var)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get SDTM Class Dataset List
     */
    mdrSdtmVersionClassesClassDatasetsGet({ version, _class }: MdrSdtmVersionClassesClassDatasetsGetRequest): Observable<SdtmClassDatasets>
    mdrSdtmVersionClassesClassDatasetsGet({ version, _class }: MdrSdtmVersionClassesClassDatasetsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<SdtmClassDatasets>>
    mdrSdtmVersionClassesClassDatasetsGet({ version, _class }: MdrSdtmVersionClassesClassDatasetsGetRequest, opts?: OperationOpts): Observable<SdtmClassDatasets | AjaxResponse<SdtmClassDatasets>> {
        throwIfNullOrUndefined(version, 'version', 'mdrSdtmVersionClassesClassDatasetsGet');
        throwIfNullOrUndefined(_class, '_class', 'mdrSdtmVersionClassesClassDatasetsGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<SdtmClassDatasets>({
            url: '/mdr/sdtm/{version}/classes/{class}/datasets'.replace('{version}', encodeURI(version)).replace('{class}', encodeURI(_class)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get SDTM Class
     */
    mdrSdtmVersionClassesClassGet({ version, _class }: MdrSdtmVersionClassesClassGetRequest): Observable<SdtmClass>
    mdrSdtmVersionClassesClassGet({ version, _class }: MdrSdtmVersionClassesClassGetRequest, opts?: OperationOpts): Observable<AjaxResponse<SdtmClass>>
    mdrSdtmVersionClassesClassGet({ version, _class }: MdrSdtmVersionClassesClassGetRequest, opts?: OperationOpts): Observable<SdtmClass | AjaxResponse<SdtmClass>> {
        throwIfNullOrUndefined(version, 'version', 'mdrSdtmVersionClassesClassGet');
        throwIfNullOrUndefined(_class, '_class', 'mdrSdtmVersionClassesClassGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<SdtmClass>({
            url: '/mdr/sdtm/{version}/classes/{class}'.replace('{version}', encodeURI(version)).replace('{class}', encodeURI(_class)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get SDTM Class Variable List
     */
    mdrSdtmVersionClassesClassVariablesGet({ version, _class }: MdrSdtmVersionClassesClassVariablesGetRequest): Observable<SdtmClassVariables>
    mdrSdtmVersionClassesClassVariablesGet({ version, _class }: MdrSdtmVersionClassesClassVariablesGetRequest, opts?: OperationOpts): Observable<AjaxResponse<SdtmClassVariables>>
    mdrSdtmVersionClassesClassVariablesGet({ version, _class }: MdrSdtmVersionClassesClassVariablesGetRequest, opts?: OperationOpts): Observable<SdtmClassVariables | AjaxResponse<SdtmClassVariables>> {
        throwIfNullOrUndefined(version, 'version', 'mdrSdtmVersionClassesClassVariablesGet');
        throwIfNullOrUndefined(_class, '_class', 'mdrSdtmVersionClassesClassVariablesGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<SdtmClassVariables>({
            url: '/mdr/sdtm/{version}/classes/{class}/variables'.replace('{version}', encodeURI(version)).replace('{class}', encodeURI(_class)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get SDTM Class Variable
     */
    mdrSdtmVersionClassesClassVariablesVarGet({ version, _class, _var }: MdrSdtmVersionClassesClassVariablesVarGetRequest): Observable<SdtmClassVariable>
    mdrSdtmVersionClassesClassVariablesVarGet({ version, _class, _var }: MdrSdtmVersionClassesClassVariablesVarGetRequest, opts?: OperationOpts): Observable<AjaxResponse<SdtmClassVariable>>
    mdrSdtmVersionClassesClassVariablesVarGet({ version, _class, _var }: MdrSdtmVersionClassesClassVariablesVarGetRequest, opts?: OperationOpts): Observable<SdtmClassVariable | AjaxResponse<SdtmClassVariable>> {
        throwIfNullOrUndefined(version, 'version', 'mdrSdtmVersionClassesClassVariablesVarGet');
        throwIfNullOrUndefined(_class, '_class', 'mdrSdtmVersionClassesClassVariablesVarGet');
        throwIfNullOrUndefined(_var, '_var', 'mdrSdtmVersionClassesClassVariablesVarGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<SdtmClassVariable>({
            url: '/mdr/sdtm/{version}/classes/{class}/variables/{var}'.replace('{version}', encodeURI(version)).replace('{class}', encodeURI(_class)).replace('{var}', encodeURI(_var)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get SDTM Class List
     */
    mdrSdtmVersionClassesGet({ version }: MdrSdtmVersionClassesGetRequest): Observable<SdtmClasses>
    mdrSdtmVersionClassesGet({ version }: MdrSdtmVersionClassesGetRequest, opts?: OperationOpts): Observable<AjaxResponse<SdtmClasses>>
    mdrSdtmVersionClassesGet({ version }: MdrSdtmVersionClassesGetRequest, opts?: OperationOpts): Observable<SdtmClasses | AjaxResponse<SdtmClasses>> {
        throwIfNullOrUndefined(version, 'version', 'mdrSdtmVersionClassesGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<SdtmClasses>({
            url: '/mdr/sdtm/{version}/classes'.replace('{version}', encodeURI(version)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get SDTM Dataset
     */
    mdrSdtmVersionDatasetsDatasetGet({ version, dataset }: MdrSdtmVersionDatasetsDatasetGetRequest): Observable<SdtmDataset>
    mdrSdtmVersionDatasetsDatasetGet({ version, dataset }: MdrSdtmVersionDatasetsDatasetGetRequest, opts?: OperationOpts): Observable<AjaxResponse<SdtmDataset>>
    mdrSdtmVersionDatasetsDatasetGet({ version, dataset }: MdrSdtmVersionDatasetsDatasetGetRequest, opts?: OperationOpts): Observable<SdtmDataset | AjaxResponse<SdtmDataset>> {
        throwIfNullOrUndefined(version, 'version', 'mdrSdtmVersionDatasetsDatasetGet');
        throwIfNullOrUndefined(dataset, 'dataset', 'mdrSdtmVersionDatasetsDatasetGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<SdtmDataset>({
            url: '/mdr/sdtm/{version}/datasets/{dataset}'.replace('{version}', encodeURI(version)).replace('{dataset}', encodeURI(dataset)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get SDTM Dataset Variable List
     */
    mdrSdtmVersionDatasetsDatasetVariablesGet({ version, dataset }: MdrSdtmVersionDatasetsDatasetVariablesGetRequest): Observable<SdtmDatasetVariables>
    mdrSdtmVersionDatasetsDatasetVariablesGet({ version, dataset }: MdrSdtmVersionDatasetsDatasetVariablesGetRequest, opts?: OperationOpts): Observable<AjaxResponse<SdtmDatasetVariables>>
    mdrSdtmVersionDatasetsDatasetVariablesGet({ version, dataset }: MdrSdtmVersionDatasetsDatasetVariablesGetRequest, opts?: OperationOpts): Observable<SdtmDatasetVariables | AjaxResponse<SdtmDatasetVariables>> {
        throwIfNullOrUndefined(version, 'version', 'mdrSdtmVersionDatasetsDatasetVariablesGet');
        throwIfNullOrUndefined(dataset, 'dataset', 'mdrSdtmVersionDatasetsDatasetVariablesGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<SdtmDatasetVariables>({
            url: '/mdr/sdtm/{version}/datasets/{dataset}/variables'.replace('{version}', encodeURI(version)).replace('{dataset}', encodeURI(dataset)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get SDTM Dataset Variable
     */
    mdrSdtmVersionDatasetsDatasetVariablesVarGet({ version, dataset, _var }: MdrSdtmVersionDatasetsDatasetVariablesVarGetRequest): Observable<SdtmDatasetVariable>
    mdrSdtmVersionDatasetsDatasetVariablesVarGet({ version, dataset, _var }: MdrSdtmVersionDatasetsDatasetVariablesVarGetRequest, opts?: OperationOpts): Observable<AjaxResponse<SdtmDatasetVariable>>
    mdrSdtmVersionDatasetsDatasetVariablesVarGet({ version, dataset, _var }: MdrSdtmVersionDatasetsDatasetVariablesVarGetRequest, opts?: OperationOpts): Observable<SdtmDatasetVariable | AjaxResponse<SdtmDatasetVariable>> {
        throwIfNullOrUndefined(version, 'version', 'mdrSdtmVersionDatasetsDatasetVariablesVarGet');
        throwIfNullOrUndefined(dataset, 'dataset', 'mdrSdtmVersionDatasetsDatasetVariablesVarGet');
        throwIfNullOrUndefined(_var, '_var', 'mdrSdtmVersionDatasetsDatasetVariablesVarGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<SdtmDatasetVariable>({
            url: '/mdr/sdtm/{version}/datasets/{dataset}/variables/{var}'.replace('{version}', encodeURI(version)).replace('{dataset}', encodeURI(dataset)).replace('{var}', encodeURI(_var)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get SDTM Dataset List
     */
    mdrSdtmVersionDatasetsGet({ version }: MdrSdtmVersionDatasetsGetRequest): Observable<SdtmDatasets>
    mdrSdtmVersionDatasetsGet({ version }: MdrSdtmVersionDatasetsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<SdtmDatasets>>
    mdrSdtmVersionDatasetsGet({ version }: MdrSdtmVersionDatasetsGetRequest, opts?: OperationOpts): Observable<SdtmDatasets | AjaxResponse<SdtmDatasets>> {
        throwIfNullOrUndefined(version, 'version', 'mdrSdtmVersionDatasetsGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<SdtmDatasets>({
            url: '/mdr/sdtm/{version}/datasets'.replace('{version}', encodeURI(version)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get SDTM product
     */
    mdrSdtmVersionGet({ version }: MdrSdtmVersionGetRequest): Observable<SdtmProduct>
    mdrSdtmVersionGet({ version }: MdrSdtmVersionGetRequest, opts?: OperationOpts): Observable<AjaxResponse<SdtmProduct>>
    mdrSdtmVersionGet({ version }: MdrSdtmVersionGetRequest, opts?: OperationOpts): Observable<SdtmProduct | AjaxResponse<SdtmProduct>> {
        throwIfNullOrUndefined(version, 'version', 'mdrSdtmVersionGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<SdtmProduct>({
            url: '/mdr/sdtm/{version}'.replace('{version}', encodeURI(version)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}

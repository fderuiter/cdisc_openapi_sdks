/* tslint:disable */
/* eslint-disable */
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CdashClass,
  CdashClassDomains,
  CdashClassField,
  CdashDomain,
  CdashDomainField,
  CdashDomainFields,
  CdashProduct,
  CdashProductClasses,
  CdashProductDomains,
  DefaultErrorResponse,
  ExportCdashTable,
  RootCdashClassField,
  RootCdashDomainField,
  XmlCdashClass,
  XmlCdashClassDomains,
  XmlCdashClassField,
  XmlCdashDomain,
  XmlCdashDomainField,
  XmlCdashDomainFields,
  XmlCdashProduct,
  XmlCdashProductClasses,
  XmlCdashProductDomains,
  XmlRootCdashClassField,
  XmlRootCdashDomainField,
} from '../models/index';
import {
    CdashClassFromJSON,
    CdashClassToJSON,
    CdashClassDomainsFromJSON,
    CdashClassDomainsToJSON,
    CdashClassFieldFromJSON,
    CdashClassFieldToJSON,
    CdashDomainFromJSON,
    CdashDomainToJSON,
    CdashDomainFieldFromJSON,
    CdashDomainFieldToJSON,
    CdashDomainFieldsFromJSON,
    CdashDomainFieldsToJSON,
    CdashProductFromJSON,
    CdashProductToJSON,
    CdashProductClassesFromJSON,
    CdashProductClassesToJSON,
    CdashProductDomainsFromJSON,
    CdashProductDomainsToJSON,
    DefaultErrorResponseFromJSON,
    DefaultErrorResponseToJSON,
    ExportCdashTableFromJSON,
    ExportCdashTableToJSON,
    RootCdashClassFieldFromJSON,
    RootCdashClassFieldToJSON,
    RootCdashDomainFieldFromJSON,
    RootCdashDomainFieldToJSON,
    XmlCdashClassFromJSON,
    XmlCdashClassToJSON,
    XmlCdashClassDomainsFromJSON,
    XmlCdashClassDomainsToJSON,
    XmlCdashClassFieldFromJSON,
    XmlCdashClassFieldToJSON,
    XmlCdashDomainFromJSON,
    XmlCdashDomainToJSON,
    XmlCdashDomainFieldFromJSON,
    XmlCdashDomainFieldToJSON,
    XmlCdashDomainFieldsFromJSON,
    XmlCdashDomainFieldsToJSON,
    XmlCdashProductFromJSON,
    XmlCdashProductToJSON,
    XmlCdashProductClassesFromJSON,
    XmlCdashProductClassesToJSON,
    XmlCdashProductDomainsFromJSON,
    XmlCdashProductDomainsToJSON,
    XmlRootCdashClassFieldFromJSON,
    XmlRootCdashClassFieldToJSON,
    XmlRootCdashDomainFieldFromJSON,
    XmlRootCdashDomainFieldToJSON,
} from '../models/index';

export interface MdrCdashVersionClassesClassDomainsGetRequest {
    version: string;
    _class: string;
}

export interface MdrCdashVersionClassesClassFieldsFieldGetRequest {
    version: string;
    _class: string;
    field: string;
}

export interface MdrCdashVersionClassesClassGetRequest {
    version: string;
    _class: string;
}

export interface MdrCdashVersionClassesGetRequest {
    version: string;
}

export interface MdrCdashVersionDomainsDomainFieldsFieldGetRequest {
    version: string;
    domain: string;
    field: string;
}

export interface MdrCdashVersionDomainsDomainFieldsGetRequest {
    version: string;
    domain: string;
}

export interface MdrCdashVersionDomainsDomainGetRequest {
    version: string;
    domain: string;
}

export interface MdrCdashVersionDomainsGetRequest {
    version: string;
}

export interface MdrCdashVersionGetRequest {
    version: string;
}

export interface MdrRootCdashClassesClassFieldsFieldGetRequest {
    _class: string;
    field: string;
}

export interface MdrRootCdashDomainsDomainFieldsFieldGetRequest {
    domain: string;
    field: string;
}

/**
 * 
 */
export class ClinicalDataAcquisitionStandardsHarmonizationCDASHApi extends runtime.BaseAPI {

    /**
     * Get CDASH Class Domain List
     */
    async mdrCdashVersionClassesClassDomainsGetRaw(requestParameters: MdrCdashVersionClassesClassDomainsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CdashClassDomains>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrCdashVersionClassesClassDomainsGet().'
            );
        }

        if (requestParameters['_class'] == null) {
            throw new runtime.RequiredError(
                '_class',
                'Required parameter "_class" was null or undefined when calling mdrCdashVersionClassesClassDomainsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/cdash/{version}/classes/{class}/domains`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"class"}}`, encodeURIComponent(String(requestParameters['_class'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CdashClassDomainsFromJSON(jsonValue));
    }

    /**
     * Get CDASH Class Domain List
     */
    async mdrCdashVersionClassesClassDomainsGet(requestParameters: MdrCdashVersionClassesClassDomainsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CdashClassDomains> {
        const response = await this.mdrCdashVersionClassesClassDomainsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDASH Class Field
     */
    async mdrCdashVersionClassesClassFieldsFieldGetRaw(requestParameters: MdrCdashVersionClassesClassFieldsFieldGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CdashClassField>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrCdashVersionClassesClassFieldsFieldGet().'
            );
        }

        if (requestParameters['_class'] == null) {
            throw new runtime.RequiredError(
                '_class',
                'Required parameter "_class" was null or undefined when calling mdrCdashVersionClassesClassFieldsFieldGet().'
            );
        }

        if (requestParameters['field'] == null) {
            throw new runtime.RequiredError(
                'field',
                'Required parameter "field" was null or undefined when calling mdrCdashVersionClassesClassFieldsFieldGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/cdash/{version}/classes/{class}/fields/{field}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"class"}}`, encodeURIComponent(String(requestParameters['_class'])));
        urlPath = urlPath.replace(`{${"field"}}`, encodeURIComponent(String(requestParameters['field'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CdashClassFieldFromJSON(jsonValue));
    }

    /**
     * Get CDASH Class Field
     */
    async mdrCdashVersionClassesClassFieldsFieldGet(requestParameters: MdrCdashVersionClassesClassFieldsFieldGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CdashClassField> {
        const response = await this.mdrCdashVersionClassesClassFieldsFieldGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDASH Class
     */
    async mdrCdashVersionClassesClassGetRaw(requestParameters: MdrCdashVersionClassesClassGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CdashClass>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrCdashVersionClassesClassGet().'
            );
        }

        if (requestParameters['_class'] == null) {
            throw new runtime.RequiredError(
                '_class',
                'Required parameter "_class" was null or undefined when calling mdrCdashVersionClassesClassGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/cdash/{version}/classes/{class}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"class"}}`, encodeURIComponent(String(requestParameters['_class'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CdashClassFromJSON(jsonValue));
    }

    /**
     * Get CDASH Class
     */
    async mdrCdashVersionClassesClassGet(requestParameters: MdrCdashVersionClassesClassGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CdashClass> {
        const response = await this.mdrCdashVersionClassesClassGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDASH Class List
     */
    async mdrCdashVersionClassesGetRaw(requestParameters: MdrCdashVersionClassesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CdashProductClasses>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrCdashVersionClassesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/cdash/{version}/classes`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CdashProductClassesFromJSON(jsonValue));
    }

    /**
     * Get CDASH Class List
     */
    async mdrCdashVersionClassesGet(requestParameters: MdrCdashVersionClassesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CdashProductClasses> {
        const response = await this.mdrCdashVersionClassesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDASH Domain Field
     */
    async mdrCdashVersionDomainsDomainFieldsFieldGetRaw(requestParameters: MdrCdashVersionDomainsDomainFieldsFieldGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CdashDomainField>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrCdashVersionDomainsDomainFieldsFieldGet().'
            );
        }

        if (requestParameters['domain'] == null) {
            throw new runtime.RequiredError(
                'domain',
                'Required parameter "domain" was null or undefined when calling mdrCdashVersionDomainsDomainFieldsFieldGet().'
            );
        }

        if (requestParameters['field'] == null) {
            throw new runtime.RequiredError(
                'field',
                'Required parameter "field" was null or undefined when calling mdrCdashVersionDomainsDomainFieldsFieldGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/cdash/{version}/domains/{domain}/fields/{field}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters['domain'])));
        urlPath = urlPath.replace(`{${"field"}}`, encodeURIComponent(String(requestParameters['field'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CdashDomainFieldFromJSON(jsonValue));
    }

    /**
     * Get CDASH Domain Field
     */
    async mdrCdashVersionDomainsDomainFieldsFieldGet(requestParameters: MdrCdashVersionDomainsDomainFieldsFieldGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CdashDomainField> {
        const response = await this.mdrCdashVersionDomainsDomainFieldsFieldGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDASH Domain Field List
     */
    async mdrCdashVersionDomainsDomainFieldsGetRaw(requestParameters: MdrCdashVersionDomainsDomainFieldsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CdashDomainFields>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrCdashVersionDomainsDomainFieldsGet().'
            );
        }

        if (requestParameters['domain'] == null) {
            throw new runtime.RequiredError(
                'domain',
                'Required parameter "domain" was null or undefined when calling mdrCdashVersionDomainsDomainFieldsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/cdash/{version}/domains/{domain}/fields`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters['domain'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CdashDomainFieldsFromJSON(jsonValue));
    }

    /**
     * Get CDASH Domain Field List
     */
    async mdrCdashVersionDomainsDomainFieldsGet(requestParameters: MdrCdashVersionDomainsDomainFieldsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CdashDomainFields> {
        const response = await this.mdrCdashVersionDomainsDomainFieldsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDASH Domain
     */
    async mdrCdashVersionDomainsDomainGetRaw(requestParameters: MdrCdashVersionDomainsDomainGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CdashDomain>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrCdashVersionDomainsDomainGet().'
            );
        }

        if (requestParameters['domain'] == null) {
            throw new runtime.RequiredError(
                'domain',
                'Required parameter "domain" was null or undefined when calling mdrCdashVersionDomainsDomainGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/cdash/{version}/domains/{domain}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));
        urlPath = urlPath.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters['domain'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CdashDomainFromJSON(jsonValue));
    }

    /**
     * Get CDASH Domain
     */
    async mdrCdashVersionDomainsDomainGet(requestParameters: MdrCdashVersionDomainsDomainGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CdashDomain> {
        const response = await this.mdrCdashVersionDomainsDomainGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDASH Domain List
     */
    async mdrCdashVersionDomainsGetRaw(requestParameters: MdrCdashVersionDomainsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CdashProductDomains>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrCdashVersionDomainsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/cdash/{version}/domains`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CdashProductDomainsFromJSON(jsonValue));
    }

    /**
     * Get CDASH Domain List
     */
    async mdrCdashVersionDomainsGet(requestParameters: MdrCdashVersionDomainsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CdashProductDomains> {
        const response = await this.mdrCdashVersionDomainsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDASH Product
     */
    async mdrCdashVersionGetRaw(requestParameters: MdrCdashVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CdashProduct>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling mdrCdashVersionGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/cdash/{version}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CdashProductFromJSON(jsonValue));
    }

    /**
     * Get CDASH Product
     */
    async mdrCdashVersionGet(requestParameters: MdrCdashVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CdashProduct> {
        const response = await this.mdrCdashVersionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Root CDASH Class Field
     */
    async mdrRootCdashClassesClassFieldsFieldGetRaw(requestParameters: MdrRootCdashClassesClassFieldsFieldGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootCdashClassField>> {
        if (requestParameters['_class'] == null) {
            throw new runtime.RequiredError(
                '_class',
                'Required parameter "_class" was null or undefined when calling mdrRootCdashClassesClassFieldsFieldGet().'
            );
        }

        if (requestParameters['field'] == null) {
            throw new runtime.RequiredError(
                'field',
                'Required parameter "field" was null or undefined when calling mdrRootCdashClassesClassFieldsFieldGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/root/cdash/classes/{class}/fields/{field}`;
        urlPath = urlPath.replace(`{${"class"}}`, encodeURIComponent(String(requestParameters['_class'])));
        urlPath = urlPath.replace(`{${"field"}}`, encodeURIComponent(String(requestParameters['field'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RootCdashClassFieldFromJSON(jsonValue));
    }

    /**
     * Get Root CDASH Class Field
     */
    async mdrRootCdashClassesClassFieldsFieldGet(requestParameters: MdrRootCdashClassesClassFieldsFieldGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootCdashClassField> {
        const response = await this.mdrRootCdashClassesClassFieldsFieldGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Root CDASH Domain Field
     */
    async mdrRootCdashDomainsDomainFieldsFieldGetRaw(requestParameters: MdrRootCdashDomainsDomainFieldsFieldGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootCdashDomainField>> {
        if (requestParameters['domain'] == null) {
            throw new runtime.RequiredError(
                'domain',
                'Required parameter "domain" was null or undefined when calling mdrRootCdashDomainsDomainFieldsFieldGet().'
            );
        }

        if (requestParameters['field'] == null) {
            throw new runtime.RequiredError(
                'field',
                'Required parameter "field" was null or undefined when calling mdrRootCdashDomainsDomainFieldsFieldGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/root/cdash/domains/{domain}/fields/{field}`;
        urlPath = urlPath.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters['domain'])));
        urlPath = urlPath.replace(`{${"field"}}`, encodeURIComponent(String(requestParameters['field'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RootCdashDomainFieldFromJSON(jsonValue));
    }

    /**
     * Get Root CDASH Domain Field
     */
    async mdrRootCdashDomainsDomainFieldsFieldGet(requestParameters: MdrRootCdashDomainsDomainFieldsFieldGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootCdashDomainField> {
        const response = await this.mdrRootCdashDomainsDomainFieldsFieldGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

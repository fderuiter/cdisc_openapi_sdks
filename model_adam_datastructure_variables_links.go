/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AdamDatastructureVariablesLinks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdamDatastructureVariablesLinks{}

// AdamDatastructureVariablesLinks struct for AdamDatastructureVariablesLinks
type AdamDatastructureVariablesLinks struct {
	Self *AdamDatastructureVariablesRef `json:"self,omitempty"`
	ParentProduct *AdamProductRef `json:"parentProduct,omitempty"`
	PriorVersion *AdamDatastructureVariablesRef `json:"priorVersion,omitempty"`
	AnalysisVariables []AdamVariableRefElement `json:"analysisVariables,omitempty"`
}

// NewAdamDatastructureVariablesLinks instantiates a new AdamDatastructureVariablesLinks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdamDatastructureVariablesLinks() *AdamDatastructureVariablesLinks {
	this := AdamDatastructureVariablesLinks{}
	return &this
}

// NewAdamDatastructureVariablesLinksWithDefaults instantiates a new AdamDatastructureVariablesLinks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdamDatastructureVariablesLinksWithDefaults() *AdamDatastructureVariablesLinks {
	this := AdamDatastructureVariablesLinks{}
	return &this
}

// GetSelf returns the Self field value if set, zero value otherwise.
func (o *AdamDatastructureVariablesLinks) GetSelf() AdamDatastructureVariablesRef {
	if o == nil || IsNil(o.Self) {
		var ret AdamDatastructureVariablesRef
		return ret
	}
	return *o.Self
}

// GetSelfOk returns a tuple with the Self field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdamDatastructureVariablesLinks) GetSelfOk() (*AdamDatastructureVariablesRef, bool) {
	if o == nil || IsNil(o.Self) {
		return nil, false
	}
	return o.Self, true
}

// HasSelf returns a boolean if a field has been set.
func (o *AdamDatastructureVariablesLinks) HasSelf() bool {
	if o != nil && !IsNil(o.Self) {
		return true
	}

	return false
}

// SetSelf gets a reference to the given AdamDatastructureVariablesRef and assigns it to the Self field.
func (o *AdamDatastructureVariablesLinks) SetSelf(v AdamDatastructureVariablesRef) {
	o.Self = &v
}

// GetParentProduct returns the ParentProduct field value if set, zero value otherwise.
func (o *AdamDatastructureVariablesLinks) GetParentProduct() AdamProductRef {
	if o == nil || IsNil(o.ParentProduct) {
		var ret AdamProductRef
		return ret
	}
	return *o.ParentProduct
}

// GetParentProductOk returns a tuple with the ParentProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdamDatastructureVariablesLinks) GetParentProductOk() (*AdamProductRef, bool) {
	if o == nil || IsNil(o.ParentProduct) {
		return nil, false
	}
	return o.ParentProduct, true
}

// HasParentProduct returns a boolean if a field has been set.
func (o *AdamDatastructureVariablesLinks) HasParentProduct() bool {
	if o != nil && !IsNil(o.ParentProduct) {
		return true
	}

	return false
}

// SetParentProduct gets a reference to the given AdamProductRef and assigns it to the ParentProduct field.
func (o *AdamDatastructureVariablesLinks) SetParentProduct(v AdamProductRef) {
	o.ParentProduct = &v
}

// GetPriorVersion returns the PriorVersion field value if set, zero value otherwise.
func (o *AdamDatastructureVariablesLinks) GetPriorVersion() AdamDatastructureVariablesRef {
	if o == nil || IsNil(o.PriorVersion) {
		var ret AdamDatastructureVariablesRef
		return ret
	}
	return *o.PriorVersion
}

// GetPriorVersionOk returns a tuple with the PriorVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdamDatastructureVariablesLinks) GetPriorVersionOk() (*AdamDatastructureVariablesRef, bool) {
	if o == nil || IsNil(o.PriorVersion) {
		return nil, false
	}
	return o.PriorVersion, true
}

// HasPriorVersion returns a boolean if a field has been set.
func (o *AdamDatastructureVariablesLinks) HasPriorVersion() bool {
	if o != nil && !IsNil(o.PriorVersion) {
		return true
	}

	return false
}

// SetPriorVersion gets a reference to the given AdamDatastructureVariablesRef and assigns it to the PriorVersion field.
func (o *AdamDatastructureVariablesLinks) SetPriorVersion(v AdamDatastructureVariablesRef) {
	o.PriorVersion = &v
}

// GetAnalysisVariables returns the AnalysisVariables field value if set, zero value otherwise.
func (o *AdamDatastructureVariablesLinks) GetAnalysisVariables() []AdamVariableRefElement {
	if o == nil || IsNil(o.AnalysisVariables) {
		var ret []AdamVariableRefElement
		return ret
	}
	return o.AnalysisVariables
}

// GetAnalysisVariablesOk returns a tuple with the AnalysisVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdamDatastructureVariablesLinks) GetAnalysisVariablesOk() ([]AdamVariableRefElement, bool) {
	if o == nil || IsNil(o.AnalysisVariables) {
		return nil, false
	}
	return o.AnalysisVariables, true
}

// HasAnalysisVariables returns a boolean if a field has been set.
func (o *AdamDatastructureVariablesLinks) HasAnalysisVariables() bool {
	if o != nil && !IsNil(o.AnalysisVariables) {
		return true
	}

	return false
}

// SetAnalysisVariables gets a reference to the given []AdamVariableRefElement and assigns it to the AnalysisVariables field.
func (o *AdamDatastructureVariablesLinks) SetAnalysisVariables(v []AdamVariableRefElement) {
	o.AnalysisVariables = v
}

func (o AdamDatastructureVariablesLinks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdamDatastructureVariablesLinks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Self) {
		toSerialize["self"] = o.Self
	}
	if !IsNil(o.ParentProduct) {
		toSerialize["parentProduct"] = o.ParentProduct
	}
	if !IsNil(o.PriorVersion) {
		toSerialize["priorVersion"] = o.PriorVersion
	}
	if !IsNil(o.AnalysisVariables) {
		toSerialize["analysisVariables"] = o.AnalysisVariables
	}
	return toSerialize, nil
}

type NullableAdamDatastructureVariablesLinks struct {
	value *AdamDatastructureVariablesLinks
	isSet bool
}

func (v NullableAdamDatastructureVariablesLinks) Get() *AdamDatastructureVariablesLinks {
	return v.value
}

func (v *NullableAdamDatastructureVariablesLinks) Set(val *AdamDatastructureVariablesLinks) {
	v.value = val
	v.isSet = true
}

func (v NullableAdamDatastructureVariablesLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableAdamDatastructureVariablesLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdamDatastructureVariablesLinks(val *AdamDatastructureVariablesLinks) *NullableAdamDatastructureVariablesLinks {
	return &NullableAdamDatastructureVariablesLinks{value: val, isSet: true}
}

func (v NullableAdamDatastructureVariablesLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdamDatastructureVariablesLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



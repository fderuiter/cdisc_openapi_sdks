{-
   CDISC Library API

   REST API Documentation for CDISC Library in production server

   OpenAPI Version: 3.0.0
   CDISC Library API API version: 1.1.0
   Contact: cdisc_library_support@cdisc.org
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : CDISCLibrary.API.ControlledTerminologyCT
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module CDISCLibrary.API.ControlledTerminologyCT where

import CDISCLibrary.Core
import CDISCLibrary.MimeTypes
import CDISCLibrary.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** ControlledTerminologyCT

-- *** mdrCtPackagesGet

-- | @GET \/mdr\/ct\/packages@
-- 
-- Get CDISC Library CT Package List
-- 
-- AuthMethod: 'AuthBasicBasicAuth'
-- 
mdrCtPackagesGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> CDISCLibraryRequest MdrCtPackagesGet MimeNoContent CtPackages accept
mdrCtPackagesGet  _ =
  _mkRequest "GET" ["/mdr/ct/packages"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicBasicAuth)

data MdrCtPackagesGet  
-- | @application/xml@
instance Produces MdrCtPackagesGet MimeXML
-- | @application/json@
instance Produces MdrCtPackagesGet MimeJSON


-- *** mdrCtPackagesPackageCodelistsCodelistGet

-- | @GET \/mdr\/ct\/packages\/{package}\/codelists\/{codelist}@
-- 
-- Get CDISC Library CT Package Codelist
-- 
-- AuthMethod: 'AuthBasicBasicAuth'
-- 
mdrCtPackagesPackageCodelistsCodelistGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> Package -- ^ "package" -  CT Package Identifier
  -> Codelist -- ^ "codelist" -  CT Codelist Identifier
  -> CDISCLibraryRequest MdrCtPackagesPackageCodelistsCodelistGet MimeNoContent CtCodelist accept
mdrCtPackagesPackageCodelistsCodelistGet  _ (Package package) (Codelist codelist) =
  _mkRequest "GET" ["/mdr/ct/packages/",toPath package,"/codelists/",toPath codelist]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicBasicAuth)

data MdrCtPackagesPackageCodelistsCodelistGet  
-- | @application/xml@
instance Produces MdrCtPackagesPackageCodelistsCodelistGet MimeXML
-- | @application/json@
instance Produces MdrCtPackagesPackageCodelistsCodelistGet MimeJSON


-- *** mdrCtPackagesPackageCodelistsCodelistTermsGet

-- | @GET \/mdr\/ct\/packages\/{package}\/codelists\/{codelist}\/terms@
-- 
-- Get CDISC Library CT Package Codelist Term List
-- 
-- AuthMethod: 'AuthBasicBasicAuth'
-- 
mdrCtPackagesPackageCodelistsCodelistTermsGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> Package -- ^ "package" -  CT Package Identifier
  -> Codelist -- ^ "codelist" -  CT Codelist Identifier
  -> CDISCLibraryRequest MdrCtPackagesPackageCodelistsCodelistTermsGet MimeNoContent CtCodelistTerms accept
mdrCtPackagesPackageCodelistsCodelistTermsGet  _ (Package package) (Codelist codelist) =
  _mkRequest "GET" ["/mdr/ct/packages/",toPath package,"/codelists/",toPath codelist,"/terms"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicBasicAuth)

data MdrCtPackagesPackageCodelistsCodelistTermsGet  
-- | @application/xml@
instance Produces MdrCtPackagesPackageCodelistsCodelistTermsGet MimeXML
-- | @application/json@
instance Produces MdrCtPackagesPackageCodelistsCodelistTermsGet MimeJSON


-- *** mdrCtPackagesPackageCodelistsCodelistTermsTermGet

-- | @GET \/mdr\/ct\/packages\/{package}\/codelists\/{codelist}\/terms\/{term}@
-- 
-- Get CDISC Library CT Package Codelist Term
-- 
-- AuthMethod: 'AuthBasicBasicAuth'
-- 
mdrCtPackagesPackageCodelistsCodelistTermsTermGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> Package -- ^ "package" -  CT Package Product Identifier
  -> Codelist -- ^ "codelist" -  CT Codelist Identifier
  -> Term -- ^ "term" -  CT Codelist Term Identifier
  -> CDISCLibraryRequest MdrCtPackagesPackageCodelistsCodelistTermsTermGet MimeNoContent CtTerm accept
mdrCtPackagesPackageCodelistsCodelistTermsTermGet  _ (Package package) (Codelist codelist) (Term term) =
  _mkRequest "GET" ["/mdr/ct/packages/",toPath package,"/codelists/",toPath codelist,"/terms/",toPath term]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicBasicAuth)

data MdrCtPackagesPackageCodelistsCodelistTermsTermGet  
-- | @application/xml@
instance Produces MdrCtPackagesPackageCodelistsCodelistTermsTermGet MimeXML
-- | @application/json@
instance Produces MdrCtPackagesPackageCodelistsCodelistTermsTermGet MimeJSON


-- *** mdrCtPackagesPackageCodelistsGet

-- | @GET \/mdr\/ct\/packages\/{package}\/codelists@
-- 
-- Get CDISC Library CT Package Codelist List
-- 
-- AuthMethod: 'AuthBasicBasicAuth'
-- 
mdrCtPackagesPackageCodelistsGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> Package -- ^ "package" -  CT Package Identifier
  -> CDISCLibraryRequest MdrCtPackagesPackageCodelistsGet MimeNoContent CtPackageCodelists accept
mdrCtPackagesPackageCodelistsGet  _ (Package package) =
  _mkRequest "GET" ["/mdr/ct/packages/",toPath package,"/codelists"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicBasicAuth)

data MdrCtPackagesPackageCodelistsGet  
-- | @application/xml@
instance Produces MdrCtPackagesPackageCodelistsGet MimeXML
-- | @application/json@
instance Produces MdrCtPackagesPackageCodelistsGet MimeJSON


-- *** mdrCtPackagesProductGet

-- | @GET \/mdr\/ct\/packages\/{product}@
-- 
-- Get CDISC Library CT Package
-- 
-- AuthMethod: 'AuthBasicBasicAuth'
-- 
mdrCtPackagesProductGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> Product -- ^ "product" -  CT Package Product Identifier
  -> CDISCLibraryRequest MdrCtPackagesProductGet MimeNoContent CtPackage accept
mdrCtPackagesProductGet  _ (Product product) =
  _mkRequest "GET" ["/mdr/ct/packages/",toPath product]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicBasicAuth)

data MdrCtPackagesProductGet  
-- | @application/xml@
instance Produces MdrCtPackagesProductGet MimeXML
-- | @application/json@
instance Produces MdrCtPackagesProductGet MimeJSON
-- | @application/vnd.openxmlformats-officedocument.spreadsheetml.sheet@
instance Produces MdrCtPackagesProductGet MimeVndOpenxmlformatsOfficedocumentSpreadsheetmlSheet
-- | @text/csv@
instance Produces MdrCtPackagesProductGet MimeTextCsv
-- | @application/vnd.ms-excel@
instance Produces MdrCtPackagesProductGet MimeVndMsExcel


-- *** mdrRootCtProductGroupCodelistsCodelistGet

-- | @GET \/mdr\/root\/ct\/{productGroup}\/codelists\/{codelist}@
-- 
-- Get CDISC Library Root CT Codelist
-- 
-- AuthMethod: 'AuthBasicBasicAuth'
-- 
mdrRootCtProductGroupCodelistsCodelistGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ProductGroup -- ^ "productGroup" -  CT Product Group Identifier
  -> Codelist -- ^ "codelist" -  CT Codelist Identifier
  -> CDISCLibraryRequest MdrRootCtProductGroupCodelistsCodelistGet MimeNoContent RootCtCodelist accept
mdrRootCtProductGroupCodelistsCodelistGet  _ (ProductGroup productGroup) (Codelist codelist) =
  _mkRequest "GET" ["/mdr/root/ct/",toPath productGroup,"/codelists/",toPath codelist]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicBasicAuth)

data MdrRootCtProductGroupCodelistsCodelistGet  
-- | @application/xml@
instance Produces MdrRootCtProductGroupCodelistsCodelistGet MimeXML
-- | @application/json@
instance Produces MdrRootCtProductGroupCodelistsCodelistGet MimeJSON


-- *** mdrRootCtProductGroupCodelistsCodelistTermsTermGet

-- | @GET \/mdr\/root\/ct\/{productGroup}\/codelists\/{codelist}\/terms\/{term}@
-- 
-- Get CDISC Library Root CT Term
-- 
-- AuthMethod: 'AuthBasicBasicAuth'
-- 
mdrRootCtProductGroupCodelistsCodelistTermsTermGet
  :: Accept accept -- ^ request accept ('MimeType')
  -> ProductGroup -- ^ "productGroup" -  CT Product Group Identifier
  -> Codelist -- ^ "codelist" -  CT Codelist Identifier
  -> Term -- ^ "term" -  CT Codelist Term Identifier
  -> CDISCLibraryRequest MdrRootCtProductGroupCodelistsCodelistTermsTermGet MimeNoContent RootCtTerm accept
mdrRootCtProductGroupCodelistsCodelistTermsTermGet  _ (ProductGroup productGroup) (Codelist codelist) (Term term) =
  _mkRequest "GET" ["/mdr/root/ct/",toPath productGroup,"/codelists/",toPath codelist,"/terms/",toPath term]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicBasicAuth)

data MdrRootCtProductGroupCodelistsCodelistTermsTermGet  
-- | @application/xml@
instance Produces MdrRootCtProductGroupCodelistsCodelistTermsTermGet MimeXML
-- | @application/json@
instance Produces MdrRootCtProductGroupCodelistsCodelistTermsTermGet MimeJSON


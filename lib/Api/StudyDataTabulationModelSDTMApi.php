<?php
/**
 * StudyDataTabulationModelSDTMApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CDISC Library API
 *
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * StudyDataTabulationModelSDTMApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StudyDataTabulationModelSDTMApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'mdrRootSdtmClassesClassVariablesVarGet' => [
            'application/json',
        ],
        'mdrRootSdtmDatasetsDatasetVariablesVarGet' => [
            'application/json',
        ],
        'mdrSdtmVersionClassesClassDatasetsGet' => [
            'application/json',
        ],
        'mdrSdtmVersionClassesClassGet' => [
            'application/json',
        ],
        'mdrSdtmVersionClassesClassVariablesGet' => [
            'application/json',
        ],
        'mdrSdtmVersionClassesClassVariablesVarGet' => [
            'application/json',
        ],
        'mdrSdtmVersionClassesGet' => [
            'application/json',
        ],
        'mdrSdtmVersionDatasetsDatasetGet' => [
            'application/json',
        ],
        'mdrSdtmVersionDatasetsDatasetVariablesGet' => [
            'application/json',
        ],
        'mdrSdtmVersionDatasetsDatasetVariablesVarGet' => [
            'application/json',
        ],
        'mdrSdtmVersionDatasetsGet' => [
            'application/json',
        ],
        'mdrSdtmVersionGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation mdrRootSdtmClassesClassVariablesVarGet
     *
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $var SDTM Variable Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrRootSdtmClassesClassVariablesVarGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RootSdtmClassVariable|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrRootSdtmClassesClassVariablesVarGet($class, $var, string $contentType = self::contentTypes['mdrRootSdtmClassesClassVariablesVarGet'][0])
    {
        list($response) = $this->mdrRootSdtmClassesClassVariablesVarGetWithHttpInfo($class, $var, $contentType);
        return $response;
    }

    /**
     * Operation mdrRootSdtmClassesClassVariablesVarGetWithHttpInfo
     *
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $var SDTM Variable Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrRootSdtmClassesClassVariablesVarGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RootSdtmClassVariable|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrRootSdtmClassesClassVariablesVarGetWithHttpInfo($class, $var, string $contentType = self::contentTypes['mdrRootSdtmClassesClassVariablesVarGet'][0])
    {
        $request = $this->mdrRootSdtmClassesClassVariablesVarGetRequest($class, $var, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\RootSdtmClassVariable',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\RootSdtmClassVariable',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RootSdtmClassVariable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrRootSdtmClassesClassVariablesVarGetAsync
     *
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $var SDTM Variable Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrRootSdtmClassesClassVariablesVarGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrRootSdtmClassesClassVariablesVarGetAsync($class, $var, string $contentType = self::contentTypes['mdrRootSdtmClassesClassVariablesVarGet'][0])
    {
        return $this->mdrRootSdtmClassesClassVariablesVarGetAsyncWithHttpInfo($class, $var, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrRootSdtmClassesClassVariablesVarGetAsyncWithHttpInfo
     *
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $var SDTM Variable Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrRootSdtmClassesClassVariablesVarGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrRootSdtmClassesClassVariablesVarGetAsyncWithHttpInfo($class, $var, string $contentType = self::contentTypes['mdrRootSdtmClassesClassVariablesVarGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RootSdtmClassVariable';
        $request = $this->mdrRootSdtmClassesClassVariablesVarGetRequest($class, $var, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrRootSdtmClassesClassVariablesVarGet'
     *
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $var SDTM Variable Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrRootSdtmClassesClassVariablesVarGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrRootSdtmClassesClassVariablesVarGetRequest($class, $var, string $contentType = self::contentTypes['mdrRootSdtmClassesClassVariablesVarGet'][0])
    {

        // verify the required parameter 'class' is set
        if ($class === null || (is_array($class) && count($class) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $class when calling mdrRootSdtmClassesClassVariablesVarGet'
            );
        }

        // verify the required parameter 'var' is set
        if ($var === null || (is_array($var) && count($var) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $var when calling mdrRootSdtmClassesClassVariablesVarGet'
            );
        }


        $resourcePath = '/mdr/root/sdtm/classes/{class}/variables/{var}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                '{' . 'class' . '}',
                ObjectSerializer::toPathValue($class),
                $resourcePath
            );
        }
        // path params
        if ($var !== null) {
            $resourcePath = str_replace(
                '{' . 'var' . '}',
                ObjectSerializer::toPathValue($var),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrRootSdtmDatasetsDatasetVariablesVarGet
     *
     * @param  string $dataset SDTM Dataset Identifier (required)
     * @param  string $var SDTM Variable Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrRootSdtmDatasetsDatasetVariablesVarGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RootSdtmDatasetVariable|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrRootSdtmDatasetsDatasetVariablesVarGet($dataset, $var, string $contentType = self::contentTypes['mdrRootSdtmDatasetsDatasetVariablesVarGet'][0])
    {
        list($response) = $this->mdrRootSdtmDatasetsDatasetVariablesVarGetWithHttpInfo($dataset, $var, $contentType);
        return $response;
    }

    /**
     * Operation mdrRootSdtmDatasetsDatasetVariablesVarGetWithHttpInfo
     *
     * @param  string $dataset SDTM Dataset Identifier (required)
     * @param  string $var SDTM Variable Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrRootSdtmDatasetsDatasetVariablesVarGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RootSdtmDatasetVariable|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrRootSdtmDatasetsDatasetVariablesVarGetWithHttpInfo($dataset, $var, string $contentType = self::contentTypes['mdrRootSdtmDatasetsDatasetVariablesVarGet'][0])
    {
        $request = $this->mdrRootSdtmDatasetsDatasetVariablesVarGetRequest($dataset, $var, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\RootSdtmDatasetVariable',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\RootSdtmDatasetVariable',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RootSdtmDatasetVariable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrRootSdtmDatasetsDatasetVariablesVarGetAsync
     *
     * @param  string $dataset SDTM Dataset Identifier (required)
     * @param  string $var SDTM Variable Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrRootSdtmDatasetsDatasetVariablesVarGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrRootSdtmDatasetsDatasetVariablesVarGetAsync($dataset, $var, string $contentType = self::contentTypes['mdrRootSdtmDatasetsDatasetVariablesVarGet'][0])
    {
        return $this->mdrRootSdtmDatasetsDatasetVariablesVarGetAsyncWithHttpInfo($dataset, $var, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrRootSdtmDatasetsDatasetVariablesVarGetAsyncWithHttpInfo
     *
     * @param  string $dataset SDTM Dataset Identifier (required)
     * @param  string $var SDTM Variable Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrRootSdtmDatasetsDatasetVariablesVarGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrRootSdtmDatasetsDatasetVariablesVarGetAsyncWithHttpInfo($dataset, $var, string $contentType = self::contentTypes['mdrRootSdtmDatasetsDatasetVariablesVarGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RootSdtmDatasetVariable';
        $request = $this->mdrRootSdtmDatasetsDatasetVariablesVarGetRequest($dataset, $var, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrRootSdtmDatasetsDatasetVariablesVarGet'
     *
     * @param  string $dataset SDTM Dataset Identifier (required)
     * @param  string $var SDTM Variable Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrRootSdtmDatasetsDatasetVariablesVarGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrRootSdtmDatasetsDatasetVariablesVarGetRequest($dataset, $var, string $contentType = self::contentTypes['mdrRootSdtmDatasetsDatasetVariablesVarGet'][0])
    {

        // verify the required parameter 'dataset' is set
        if ($dataset === null || (is_array($dataset) && count($dataset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dataset when calling mdrRootSdtmDatasetsDatasetVariablesVarGet'
            );
        }

        // verify the required parameter 'var' is set
        if ($var === null || (is_array($var) && count($var) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $var when calling mdrRootSdtmDatasetsDatasetVariablesVarGet'
            );
        }


        $resourcePath = '/mdr/root/sdtm/datasets/{dataset}/variables/{var}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($dataset !== null) {
            $resourcePath = str_replace(
                '{' . 'dataset' . '}',
                ObjectSerializer::toPathValue($dataset),
                $resourcePath
            );
        }
        // path params
        if ($var !== null) {
            $resourcePath = str_replace(
                '{' . 'var' . '}',
                ObjectSerializer::toPathValue($var),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrSdtmVersionClassesClassDatasetsGet
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesClassDatasetsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SdtmClassDatasets|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrSdtmVersionClassesClassDatasetsGet($version, $class, string $contentType = self::contentTypes['mdrSdtmVersionClassesClassDatasetsGet'][0])
    {
        list($response) = $this->mdrSdtmVersionClassesClassDatasetsGetWithHttpInfo($version, $class, $contentType);
        return $response;
    }

    /**
     * Operation mdrSdtmVersionClassesClassDatasetsGetWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesClassDatasetsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SdtmClassDatasets|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrSdtmVersionClassesClassDatasetsGetWithHttpInfo($version, $class, string $contentType = self::contentTypes['mdrSdtmVersionClassesClassDatasetsGet'][0])
    {
        $request = $this->mdrSdtmVersionClassesClassDatasetsGetRequest($version, $class, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SdtmClassDatasets',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SdtmClassDatasets',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SdtmClassDatasets',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrSdtmVersionClassesClassDatasetsGetAsync
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesClassDatasetsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSdtmVersionClassesClassDatasetsGetAsync($version, $class, string $contentType = self::contentTypes['mdrSdtmVersionClassesClassDatasetsGet'][0])
    {
        return $this->mdrSdtmVersionClassesClassDatasetsGetAsyncWithHttpInfo($version, $class, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrSdtmVersionClassesClassDatasetsGetAsyncWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesClassDatasetsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSdtmVersionClassesClassDatasetsGetAsyncWithHttpInfo($version, $class, string $contentType = self::contentTypes['mdrSdtmVersionClassesClassDatasetsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SdtmClassDatasets';
        $request = $this->mdrSdtmVersionClassesClassDatasetsGetRequest($version, $class, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrSdtmVersionClassesClassDatasetsGet'
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesClassDatasetsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrSdtmVersionClassesClassDatasetsGetRequest($version, $class, string $contentType = self::contentTypes['mdrSdtmVersionClassesClassDatasetsGet'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling mdrSdtmVersionClassesClassDatasetsGet'
            );
        }

        // verify the required parameter 'class' is set
        if ($class === null || (is_array($class) && count($class) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $class when calling mdrSdtmVersionClassesClassDatasetsGet'
            );
        }


        $resourcePath = '/mdr/sdtm/{version}/classes/{class}/datasets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                '{' . 'class' . '}',
                ObjectSerializer::toPathValue($class),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrSdtmVersionClassesClassGet
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesClassGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SdtmClass|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrSdtmVersionClassesClassGet($version, $class, string $contentType = self::contentTypes['mdrSdtmVersionClassesClassGet'][0])
    {
        list($response) = $this->mdrSdtmVersionClassesClassGetWithHttpInfo($version, $class, $contentType);
        return $response;
    }

    /**
     * Operation mdrSdtmVersionClassesClassGetWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesClassGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SdtmClass|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrSdtmVersionClassesClassGetWithHttpInfo($version, $class, string $contentType = self::contentTypes['mdrSdtmVersionClassesClassGet'][0])
    {
        $request = $this->mdrSdtmVersionClassesClassGetRequest($version, $class, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SdtmClass',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SdtmClass',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SdtmClass',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrSdtmVersionClassesClassGetAsync
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesClassGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSdtmVersionClassesClassGetAsync($version, $class, string $contentType = self::contentTypes['mdrSdtmVersionClassesClassGet'][0])
    {
        return $this->mdrSdtmVersionClassesClassGetAsyncWithHttpInfo($version, $class, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrSdtmVersionClassesClassGetAsyncWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesClassGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSdtmVersionClassesClassGetAsyncWithHttpInfo($version, $class, string $contentType = self::contentTypes['mdrSdtmVersionClassesClassGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SdtmClass';
        $request = $this->mdrSdtmVersionClassesClassGetRequest($version, $class, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrSdtmVersionClassesClassGet'
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesClassGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrSdtmVersionClassesClassGetRequest($version, $class, string $contentType = self::contentTypes['mdrSdtmVersionClassesClassGet'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling mdrSdtmVersionClassesClassGet'
            );
        }

        // verify the required parameter 'class' is set
        if ($class === null || (is_array($class) && count($class) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $class when calling mdrSdtmVersionClassesClassGet'
            );
        }


        $resourcePath = '/mdr/sdtm/{version}/classes/{class}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                '{' . 'class' . '}',
                ObjectSerializer::toPathValue($class),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrSdtmVersionClassesClassVariablesGet
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesClassVariablesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SdtmClassVariables|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrSdtmVersionClassesClassVariablesGet($version, $class, string $contentType = self::contentTypes['mdrSdtmVersionClassesClassVariablesGet'][0])
    {
        list($response) = $this->mdrSdtmVersionClassesClassVariablesGetWithHttpInfo($version, $class, $contentType);
        return $response;
    }

    /**
     * Operation mdrSdtmVersionClassesClassVariablesGetWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesClassVariablesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SdtmClassVariables|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrSdtmVersionClassesClassVariablesGetWithHttpInfo($version, $class, string $contentType = self::contentTypes['mdrSdtmVersionClassesClassVariablesGet'][0])
    {
        $request = $this->mdrSdtmVersionClassesClassVariablesGetRequest($version, $class, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SdtmClassVariables',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SdtmClassVariables',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SdtmClassVariables',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrSdtmVersionClassesClassVariablesGetAsync
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesClassVariablesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSdtmVersionClassesClassVariablesGetAsync($version, $class, string $contentType = self::contentTypes['mdrSdtmVersionClassesClassVariablesGet'][0])
    {
        return $this->mdrSdtmVersionClassesClassVariablesGetAsyncWithHttpInfo($version, $class, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrSdtmVersionClassesClassVariablesGetAsyncWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesClassVariablesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSdtmVersionClassesClassVariablesGetAsyncWithHttpInfo($version, $class, string $contentType = self::contentTypes['mdrSdtmVersionClassesClassVariablesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SdtmClassVariables';
        $request = $this->mdrSdtmVersionClassesClassVariablesGetRequest($version, $class, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrSdtmVersionClassesClassVariablesGet'
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesClassVariablesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrSdtmVersionClassesClassVariablesGetRequest($version, $class, string $contentType = self::contentTypes['mdrSdtmVersionClassesClassVariablesGet'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling mdrSdtmVersionClassesClassVariablesGet'
            );
        }

        // verify the required parameter 'class' is set
        if ($class === null || (is_array($class) && count($class) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $class when calling mdrSdtmVersionClassesClassVariablesGet'
            );
        }


        $resourcePath = '/mdr/sdtm/{version}/classes/{class}/variables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                '{' . 'class' . '}',
                ObjectSerializer::toPathValue($class),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrSdtmVersionClassesClassVariablesVarGet
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $var SDTM Variable Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesClassVariablesVarGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SdtmClassVariable|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrSdtmVersionClassesClassVariablesVarGet($version, $class, $var, string $contentType = self::contentTypes['mdrSdtmVersionClassesClassVariablesVarGet'][0])
    {
        list($response) = $this->mdrSdtmVersionClassesClassVariablesVarGetWithHttpInfo($version, $class, $var, $contentType);
        return $response;
    }

    /**
     * Operation mdrSdtmVersionClassesClassVariablesVarGetWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $var SDTM Variable Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesClassVariablesVarGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SdtmClassVariable|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrSdtmVersionClassesClassVariablesVarGetWithHttpInfo($version, $class, $var, string $contentType = self::contentTypes['mdrSdtmVersionClassesClassVariablesVarGet'][0])
    {
        $request = $this->mdrSdtmVersionClassesClassVariablesVarGetRequest($version, $class, $var, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SdtmClassVariable',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SdtmClassVariable',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SdtmClassVariable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrSdtmVersionClassesClassVariablesVarGetAsync
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $var SDTM Variable Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesClassVariablesVarGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSdtmVersionClassesClassVariablesVarGetAsync($version, $class, $var, string $contentType = self::contentTypes['mdrSdtmVersionClassesClassVariablesVarGet'][0])
    {
        return $this->mdrSdtmVersionClassesClassVariablesVarGetAsyncWithHttpInfo($version, $class, $var, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrSdtmVersionClassesClassVariablesVarGetAsyncWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $var SDTM Variable Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesClassVariablesVarGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSdtmVersionClassesClassVariablesVarGetAsyncWithHttpInfo($version, $class, $var, string $contentType = self::contentTypes['mdrSdtmVersionClassesClassVariablesVarGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SdtmClassVariable';
        $request = $this->mdrSdtmVersionClassesClassVariablesVarGetRequest($version, $class, $var, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrSdtmVersionClassesClassVariablesVarGet'
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class SDTM Class Identifier (required)
     * @param  string $var SDTM Variable Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesClassVariablesVarGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrSdtmVersionClassesClassVariablesVarGetRequest($version, $class, $var, string $contentType = self::contentTypes['mdrSdtmVersionClassesClassVariablesVarGet'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling mdrSdtmVersionClassesClassVariablesVarGet'
            );
        }

        // verify the required parameter 'class' is set
        if ($class === null || (is_array($class) && count($class) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $class when calling mdrSdtmVersionClassesClassVariablesVarGet'
            );
        }

        // verify the required parameter 'var' is set
        if ($var === null || (is_array($var) && count($var) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $var when calling mdrSdtmVersionClassesClassVariablesVarGet'
            );
        }


        $resourcePath = '/mdr/sdtm/{version}/classes/{class}/variables/{var}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                '{' . 'class' . '}',
                ObjectSerializer::toPathValue($class),
                $resourcePath
            );
        }
        // path params
        if ($var !== null) {
            $resourcePath = str_replace(
                '{' . 'var' . '}',
                ObjectSerializer::toPathValue($var),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrSdtmVersionClassesGet
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SdtmClasses|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrSdtmVersionClassesGet($version, string $contentType = self::contentTypes['mdrSdtmVersionClassesGet'][0])
    {
        list($response) = $this->mdrSdtmVersionClassesGetWithHttpInfo($version, $contentType);
        return $response;
    }

    /**
     * Operation mdrSdtmVersionClassesGetWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SdtmClasses|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrSdtmVersionClassesGetWithHttpInfo($version, string $contentType = self::contentTypes['mdrSdtmVersionClassesGet'][0])
    {
        $request = $this->mdrSdtmVersionClassesGetRequest($version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SdtmClasses',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SdtmClasses',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SdtmClasses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrSdtmVersionClassesGetAsync
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSdtmVersionClassesGetAsync($version, string $contentType = self::contentTypes['mdrSdtmVersionClassesGet'][0])
    {
        return $this->mdrSdtmVersionClassesGetAsyncWithHttpInfo($version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrSdtmVersionClassesGetAsyncWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSdtmVersionClassesGetAsyncWithHttpInfo($version, string $contentType = self::contentTypes['mdrSdtmVersionClassesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SdtmClasses';
        $request = $this->mdrSdtmVersionClassesGetRequest($version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrSdtmVersionClassesGet'
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionClassesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrSdtmVersionClassesGetRequest($version, string $contentType = self::contentTypes['mdrSdtmVersionClassesGet'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling mdrSdtmVersionClassesGet'
            );
        }


        $resourcePath = '/mdr/sdtm/{version}/classes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrSdtmVersionDatasetsDatasetGet
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $dataset SDTM Dataset Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionDatasetsDatasetGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SdtmDataset|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrSdtmVersionDatasetsDatasetGet($version, $dataset, string $contentType = self::contentTypes['mdrSdtmVersionDatasetsDatasetGet'][0])
    {
        list($response) = $this->mdrSdtmVersionDatasetsDatasetGetWithHttpInfo($version, $dataset, $contentType);
        return $response;
    }

    /**
     * Operation mdrSdtmVersionDatasetsDatasetGetWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $dataset SDTM Dataset Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionDatasetsDatasetGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SdtmDataset|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrSdtmVersionDatasetsDatasetGetWithHttpInfo($version, $dataset, string $contentType = self::contentTypes['mdrSdtmVersionDatasetsDatasetGet'][0])
    {
        $request = $this->mdrSdtmVersionDatasetsDatasetGetRequest($version, $dataset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SdtmDataset',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SdtmDataset',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SdtmDataset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrSdtmVersionDatasetsDatasetGetAsync
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $dataset SDTM Dataset Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionDatasetsDatasetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSdtmVersionDatasetsDatasetGetAsync($version, $dataset, string $contentType = self::contentTypes['mdrSdtmVersionDatasetsDatasetGet'][0])
    {
        return $this->mdrSdtmVersionDatasetsDatasetGetAsyncWithHttpInfo($version, $dataset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrSdtmVersionDatasetsDatasetGetAsyncWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $dataset SDTM Dataset Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionDatasetsDatasetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSdtmVersionDatasetsDatasetGetAsyncWithHttpInfo($version, $dataset, string $contentType = self::contentTypes['mdrSdtmVersionDatasetsDatasetGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SdtmDataset';
        $request = $this->mdrSdtmVersionDatasetsDatasetGetRequest($version, $dataset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrSdtmVersionDatasetsDatasetGet'
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $dataset SDTM Dataset Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionDatasetsDatasetGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrSdtmVersionDatasetsDatasetGetRequest($version, $dataset, string $contentType = self::contentTypes['mdrSdtmVersionDatasetsDatasetGet'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling mdrSdtmVersionDatasetsDatasetGet'
            );
        }

        // verify the required parameter 'dataset' is set
        if ($dataset === null || (is_array($dataset) && count($dataset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dataset when calling mdrSdtmVersionDatasetsDatasetGet'
            );
        }


        $resourcePath = '/mdr/sdtm/{version}/datasets/{dataset}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($dataset !== null) {
            $resourcePath = str_replace(
                '{' . 'dataset' . '}',
                ObjectSerializer::toPathValue($dataset),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrSdtmVersionDatasetsDatasetVariablesGet
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $dataset SDTM Dataset Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionDatasetsDatasetVariablesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SdtmDatasetVariables|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrSdtmVersionDatasetsDatasetVariablesGet($version, $dataset, string $contentType = self::contentTypes['mdrSdtmVersionDatasetsDatasetVariablesGet'][0])
    {
        list($response) = $this->mdrSdtmVersionDatasetsDatasetVariablesGetWithHttpInfo($version, $dataset, $contentType);
        return $response;
    }

    /**
     * Operation mdrSdtmVersionDatasetsDatasetVariablesGetWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $dataset SDTM Dataset Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionDatasetsDatasetVariablesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SdtmDatasetVariables|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrSdtmVersionDatasetsDatasetVariablesGetWithHttpInfo($version, $dataset, string $contentType = self::contentTypes['mdrSdtmVersionDatasetsDatasetVariablesGet'][0])
    {
        $request = $this->mdrSdtmVersionDatasetsDatasetVariablesGetRequest($version, $dataset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SdtmDatasetVariables',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SdtmDatasetVariables',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SdtmDatasetVariables',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrSdtmVersionDatasetsDatasetVariablesGetAsync
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $dataset SDTM Dataset Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionDatasetsDatasetVariablesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSdtmVersionDatasetsDatasetVariablesGetAsync($version, $dataset, string $contentType = self::contentTypes['mdrSdtmVersionDatasetsDatasetVariablesGet'][0])
    {
        return $this->mdrSdtmVersionDatasetsDatasetVariablesGetAsyncWithHttpInfo($version, $dataset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrSdtmVersionDatasetsDatasetVariablesGetAsyncWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $dataset SDTM Dataset Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionDatasetsDatasetVariablesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSdtmVersionDatasetsDatasetVariablesGetAsyncWithHttpInfo($version, $dataset, string $contentType = self::contentTypes['mdrSdtmVersionDatasetsDatasetVariablesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SdtmDatasetVariables';
        $request = $this->mdrSdtmVersionDatasetsDatasetVariablesGetRequest($version, $dataset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrSdtmVersionDatasetsDatasetVariablesGet'
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $dataset SDTM Dataset Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionDatasetsDatasetVariablesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrSdtmVersionDatasetsDatasetVariablesGetRequest($version, $dataset, string $contentType = self::contentTypes['mdrSdtmVersionDatasetsDatasetVariablesGet'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling mdrSdtmVersionDatasetsDatasetVariablesGet'
            );
        }

        // verify the required parameter 'dataset' is set
        if ($dataset === null || (is_array($dataset) && count($dataset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dataset when calling mdrSdtmVersionDatasetsDatasetVariablesGet'
            );
        }


        $resourcePath = '/mdr/sdtm/{version}/datasets/{dataset}/variables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($dataset !== null) {
            $resourcePath = str_replace(
                '{' . 'dataset' . '}',
                ObjectSerializer::toPathValue($dataset),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrSdtmVersionDatasetsDatasetVariablesVarGet
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $dataset SDTM Dataset Identifier (required)
     * @param  string $var SDTM Variable Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionDatasetsDatasetVariablesVarGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SdtmDatasetVariable|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrSdtmVersionDatasetsDatasetVariablesVarGet($version, $dataset, $var, string $contentType = self::contentTypes['mdrSdtmVersionDatasetsDatasetVariablesVarGet'][0])
    {
        list($response) = $this->mdrSdtmVersionDatasetsDatasetVariablesVarGetWithHttpInfo($version, $dataset, $var, $contentType);
        return $response;
    }

    /**
     * Operation mdrSdtmVersionDatasetsDatasetVariablesVarGetWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $dataset SDTM Dataset Identifier (required)
     * @param  string $var SDTM Variable Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionDatasetsDatasetVariablesVarGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SdtmDatasetVariable|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrSdtmVersionDatasetsDatasetVariablesVarGetWithHttpInfo($version, $dataset, $var, string $contentType = self::contentTypes['mdrSdtmVersionDatasetsDatasetVariablesVarGet'][0])
    {
        $request = $this->mdrSdtmVersionDatasetsDatasetVariablesVarGetRequest($version, $dataset, $var, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SdtmDatasetVariable',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SdtmDatasetVariable',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SdtmDatasetVariable',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrSdtmVersionDatasetsDatasetVariablesVarGetAsync
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $dataset SDTM Dataset Identifier (required)
     * @param  string $var SDTM Variable Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionDatasetsDatasetVariablesVarGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSdtmVersionDatasetsDatasetVariablesVarGetAsync($version, $dataset, $var, string $contentType = self::contentTypes['mdrSdtmVersionDatasetsDatasetVariablesVarGet'][0])
    {
        return $this->mdrSdtmVersionDatasetsDatasetVariablesVarGetAsyncWithHttpInfo($version, $dataset, $var, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrSdtmVersionDatasetsDatasetVariablesVarGetAsyncWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $dataset SDTM Dataset Identifier (required)
     * @param  string $var SDTM Variable Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionDatasetsDatasetVariablesVarGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSdtmVersionDatasetsDatasetVariablesVarGetAsyncWithHttpInfo($version, $dataset, $var, string $contentType = self::contentTypes['mdrSdtmVersionDatasetsDatasetVariablesVarGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SdtmDatasetVariable';
        $request = $this->mdrSdtmVersionDatasetsDatasetVariablesVarGetRequest($version, $dataset, $var, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrSdtmVersionDatasetsDatasetVariablesVarGet'
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $dataset SDTM Dataset Identifier (required)
     * @param  string $var SDTM Variable Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionDatasetsDatasetVariablesVarGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrSdtmVersionDatasetsDatasetVariablesVarGetRequest($version, $dataset, $var, string $contentType = self::contentTypes['mdrSdtmVersionDatasetsDatasetVariablesVarGet'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet'
            );
        }

        // verify the required parameter 'dataset' is set
        if ($dataset === null || (is_array($dataset) && count($dataset) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dataset when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet'
            );
        }

        // verify the required parameter 'var' is set
        if ($var === null || (is_array($var) && count($var) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $var when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet'
            );
        }


        $resourcePath = '/mdr/sdtm/{version}/datasets/{dataset}/variables/{var}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($dataset !== null) {
            $resourcePath = str_replace(
                '{' . 'dataset' . '}',
                ObjectSerializer::toPathValue($dataset),
                $resourcePath
            );
        }
        // path params
        if ($var !== null) {
            $resourcePath = str_replace(
                '{' . 'var' . '}',
                ObjectSerializer::toPathValue($var),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrSdtmVersionDatasetsGet
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionDatasetsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SdtmDatasets|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrSdtmVersionDatasetsGet($version, string $contentType = self::contentTypes['mdrSdtmVersionDatasetsGet'][0])
    {
        list($response) = $this->mdrSdtmVersionDatasetsGetWithHttpInfo($version, $contentType);
        return $response;
    }

    /**
     * Operation mdrSdtmVersionDatasetsGetWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionDatasetsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SdtmDatasets|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrSdtmVersionDatasetsGetWithHttpInfo($version, string $contentType = self::contentTypes['mdrSdtmVersionDatasetsGet'][0])
    {
        $request = $this->mdrSdtmVersionDatasetsGetRequest($version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SdtmDatasets',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SdtmDatasets',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SdtmDatasets',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrSdtmVersionDatasetsGetAsync
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionDatasetsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSdtmVersionDatasetsGetAsync($version, string $contentType = self::contentTypes['mdrSdtmVersionDatasetsGet'][0])
    {
        return $this->mdrSdtmVersionDatasetsGetAsyncWithHttpInfo($version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrSdtmVersionDatasetsGetAsyncWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionDatasetsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSdtmVersionDatasetsGetAsyncWithHttpInfo($version, string $contentType = self::contentTypes['mdrSdtmVersionDatasetsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SdtmDatasets';
        $request = $this->mdrSdtmVersionDatasetsGetRequest($version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrSdtmVersionDatasetsGet'
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionDatasetsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrSdtmVersionDatasetsGetRequest($version, string $contentType = self::contentTypes['mdrSdtmVersionDatasetsGet'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling mdrSdtmVersionDatasetsGet'
            );
        }


        $resourcePath = '/mdr/sdtm/{version}/datasets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', 'text/csv', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrSdtmVersionGet
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SdtmProduct|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrSdtmVersionGet($version, string $contentType = self::contentTypes['mdrSdtmVersionGet'][0])
    {
        list($response) = $this->mdrSdtmVersionGetWithHttpInfo($version, $contentType);
        return $response;
    }

    /**
     * Operation mdrSdtmVersionGetWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SdtmProduct|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrSdtmVersionGetWithHttpInfo($version, string $contentType = self::contentTypes['mdrSdtmVersionGet'][0])
    {
        $request = $this->mdrSdtmVersionGetRequest($version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SdtmProduct',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SdtmProduct',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SdtmProduct',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrSdtmVersionGetAsync
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSdtmVersionGetAsync($version, string $contentType = self::contentTypes['mdrSdtmVersionGet'][0])
    {
        return $this->mdrSdtmVersionGetAsyncWithHttpInfo($version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrSdtmVersionGetAsyncWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSdtmVersionGetAsyncWithHttpInfo($version, string $contentType = self::contentTypes['mdrSdtmVersionGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SdtmProduct';
        $request = $this->mdrSdtmVersionGetRequest($version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrSdtmVersionGet'
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSdtmVersionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrSdtmVersionGetRequest($version, string $contentType = self::contentTypes['mdrSdtmVersionGet'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling mdrSdtmVersionGet'
            );
        }


        $resourcePath = '/mdr/sdtm/{version}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}

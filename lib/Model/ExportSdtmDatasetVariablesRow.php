<?php
/**
 * ExportSdtmDatasetVariablesRow
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CDISC Library API
 *
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ExportSdtmDatasetVariablesRow Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ExportSdtmDatasetVariablesRow implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ExportSdtmDatasetVariablesRow';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'version' => 'string',
        'variable_order' => 'string',
        'class' => 'string',
        'dataset_name' => 'string',
        'variable_name' => 'string',
        'variable_label' => 'string',
        'type' => 'string',
        'controlled_terms_codelist_or_format' => 'string',
        'role' => 'string',
        'role_description' => 'string',
        'description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'version' => null,
        'variable_order' => null,
        'class' => null,
        'dataset_name' => null,
        'variable_name' => null,
        'variable_label' => null,
        'type' => null,
        'controlled_terms_codelist_or_format' => null,
        'role' => null,
        'role_description' => null,
        'description' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'version' => false,
        'variable_order' => false,
        'class' => false,
        'dataset_name' => false,
        'variable_name' => false,
        'variable_label' => false,
        'type' => false,
        'controlled_terms_codelist_or_format' => false,
        'role' => false,
        'role_description' => false,
        'description' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'version' => 'Version',
        'variable_order' => 'Variable Order',
        'class' => 'Class',
        'dataset_name' => 'Dataset Name',
        'variable_name' => 'Variable Name',
        'variable_label' => 'Variable Label',
        'type' => 'Type',
        'controlled_terms_codelist_or_format' => 'Controlled Terms, Codelist or Format',
        'role' => 'Role',
        'role_description' => 'Role Description',
        'description' => 'Description'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'version' => 'setVersion',
        'variable_order' => 'setVariableOrder',
        'class' => 'setClass',
        'dataset_name' => 'setDatasetName',
        'variable_name' => 'setVariableName',
        'variable_label' => 'setVariableLabel',
        'type' => 'setType',
        'controlled_terms_codelist_or_format' => 'setControlledTermsCodelistOrFormat',
        'role' => 'setRole',
        'role_description' => 'setRoleDescription',
        'description' => 'setDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'version' => 'getVersion',
        'variable_order' => 'getVariableOrder',
        'class' => 'getClass',
        'dataset_name' => 'getDatasetName',
        'variable_name' => 'getVariableName',
        'variable_label' => 'getVariableLabel',
        'type' => 'getType',
        'controlled_terms_codelist_or_format' => 'getControlledTermsCodelistOrFormat',
        'role' => 'getRole',
        'role_description' => 'getRoleDescription',
        'description' => 'getDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('variable_order', $data ?? [], null);
        $this->setIfExists('class', $data ?? [], null);
        $this->setIfExists('dataset_name', $data ?? [], null);
        $this->setIfExists('variable_name', $data ?? [], null);
        $this->setIfExists('variable_label', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('controlled_terms_codelist_or_format', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('role_description', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets variable_order
     *
     * @return string|null
     */
    public function getVariableOrder()
    {
        return $this->container['variable_order'];
    }

    /**
     * Sets variable_order
     *
     * @param string|null $variable_order variable_order
     *
     * @return self
     */
    public function setVariableOrder($variable_order)
    {
        if (is_null($variable_order)) {
            throw new \InvalidArgumentException('non-nullable variable_order cannot be null');
        }
        $this->container['variable_order'] = $variable_order;

        return $this;
    }

    /**
     * Gets class
     *
     * @return string|null
     */
    public function getClass()
    {
        return $this->container['class'];
    }

    /**
     * Sets class
     *
     * @param string|null $class class
     *
     * @return self
     */
    public function setClass($class)
    {
        if (is_null($class)) {
            throw new \InvalidArgumentException('non-nullable class cannot be null');
        }
        $this->container['class'] = $class;

        return $this;
    }

    /**
     * Gets dataset_name
     *
     * @return string|null
     */
    public function getDatasetName()
    {
        return $this->container['dataset_name'];
    }

    /**
     * Sets dataset_name
     *
     * @param string|null $dataset_name dataset_name
     *
     * @return self
     */
    public function setDatasetName($dataset_name)
    {
        if (is_null($dataset_name)) {
            throw new \InvalidArgumentException('non-nullable dataset_name cannot be null');
        }
        $this->container['dataset_name'] = $dataset_name;

        return $this;
    }

    /**
     * Gets variable_name
     *
     * @return string|null
     */
    public function getVariableName()
    {
        return $this->container['variable_name'];
    }

    /**
     * Sets variable_name
     *
     * @param string|null $variable_name variable_name
     *
     * @return self
     */
    public function setVariableName($variable_name)
    {
        if (is_null($variable_name)) {
            throw new \InvalidArgumentException('non-nullable variable_name cannot be null');
        }
        $this->container['variable_name'] = $variable_name;

        return $this;
    }

    /**
     * Gets variable_label
     *
     * @return string|null
     */
    public function getVariableLabel()
    {
        return $this->container['variable_label'];
    }

    /**
     * Sets variable_label
     *
     * @param string|null $variable_label variable_label
     *
     * @return self
     */
    public function setVariableLabel($variable_label)
    {
        if (is_null($variable_label)) {
            throw new \InvalidArgumentException('non-nullable variable_label cannot be null');
        }
        $this->container['variable_label'] = $variable_label;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets controlled_terms_codelist_or_format
     *
     * @return string|null
     */
    public function getControlledTermsCodelistOrFormat()
    {
        return $this->container['controlled_terms_codelist_or_format'];
    }

    /**
     * Sets controlled_terms_codelist_or_format
     *
     * @param string|null $controlled_terms_codelist_or_format controlled_terms_codelist_or_format
     *
     * @return self
     */
    public function setControlledTermsCodelistOrFormat($controlled_terms_codelist_or_format)
    {
        if (is_null($controlled_terms_codelist_or_format)) {
            throw new \InvalidArgumentException('non-nullable controlled_terms_codelist_or_format cannot be null');
        }
        $this->container['controlled_terms_codelist_or_format'] = $controlled_terms_codelist_or_format;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string|null $role role
     *
     * @return self
     */
    public function setRole($role)
    {
        if (is_null($role)) {
            throw new \InvalidArgumentException('non-nullable role cannot be null');
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets role_description
     *
     * @return string|null
     */
    public function getRoleDescription()
    {
        return $this->container['role_description'];
    }

    /**
     * Sets role_description
     *
     * @param string|null $role_description role_description
     *
     * @return self
     */
    public function setRoleDescription($role_description)
    {
        if (is_null($role_description)) {
            throw new \InvalidArgumentException('non-nullable role_description cannot be null');
        }
        $this->container['role_description'] = $role_description;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



# NOTE: This file is auto generated by OpenAPI Generator 7.16.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule CDISCLibraryAPI.Api.Statuses do
  @moduledoc """
  API calls for all endpoints tagged `Statuses`.
  """

  alias CDISCLibraryAPI.Connection
  import CDISCLibraryAPI.RequestBuilder

  @doc """
  Check health of system components

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.Health.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec health_get(Tesla.Env.client, keyword()) :: {:ok, CDISCLibraryAPI.Model.Health.t} | {:error, Tesla.Env.t}
  def health_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/health")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.Health}
    ])
  end

  @doc """
  Set maintenance mode and message

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.MaintenanceBody.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_maintenance_get(Tesla.Env.client, keyword()) :: {:ok, CDISCLibraryAPI.Model.MaintenanceBody.t} | {:error, Tesla.Env.t}
  def mdr_maintenance_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/maintenance")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.MaintenanceBody}
    ])
  end
end

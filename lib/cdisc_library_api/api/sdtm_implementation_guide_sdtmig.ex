# NOTE: This file is auto generated by OpenAPI Generator 7.16.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule CDISCLibraryAPI.Api.SDTMImplementationGuideSDTMIG do
  @moduledoc """
  API calls for all endpoints tagged `SDTMImplementationGuideSDTMIG`.
  """

  alias CDISCLibraryAPI.Connection
  import CDISCLibraryAPI.RequestBuilder

  @doc """
  Get Root SDTMIG Dataset Variable

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `dataset` (String.t): SDTMIG Dataset Identifier
  - `var` (String.t): SDTMIG Variable Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.RootSdtmigDatasetVariable.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_root_sdtmig_datasets_dataset_variables_var_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.RootSdtmigDatasetVariable.t} | {:error, Tesla.Env.t}
  def mdr_root_sdtmig_datasets_dataset_variables_var_get(connection, dataset, var, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/root/sdtmig/datasets/#{dataset}/variables/#{var}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.RootSdtmigDatasetVariable},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SDTMIG Class Dataset List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `class` (String.t): SDTMIG Class Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SdtmigClassDatasets.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sdtmig_version_classes_class_datasets_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.SdtmigClassDatasets.t} | {:error, Tesla.Env.t}
  def mdr_sdtmig_version_classes_class_datasets_get(connection, version, class, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sdtmig/#{version}/classes/#{class}/datasets")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SdtmigClassDatasets},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SDTMIG Class

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `class` (String.t): SDTMIG Class Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SdtmigClass.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sdtmig_version_classes_class_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.SdtmigClass.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_sdtmig_version_classes_class_get(connection, version, class, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sdtmig/#{version}/classes/#{class}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SdtmigClass},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SDTMIG Class List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SdtmigClasses.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sdtmig_version_classes_get(Tesla.Env.client, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.SdtmigClasses.t} | {:error, Tesla.Env.t}
  def mdr_sdtmig_version_classes_get(connection, version, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sdtmig/#{version}/classes")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SdtmigClasses},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SDTMIG Dataset

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `dataset` (String.t): SDTMIG Dataset Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SdtmigDataset.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sdtmig_version_datasets_dataset_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.SdtmigDataset.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_sdtmig_version_datasets_dataset_get(connection, version, dataset, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sdtmig/#{version}/datasets/#{dataset}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SdtmigDataset},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SDTMIG Dataset Variable List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `dataset` (String.t): SDTMIG Dataset Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SdtmigDatasetVariables.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sdtmig_version_datasets_dataset_variables_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.SdtmigDatasetVariables.t} | {:error, Tesla.Env.t}
  def mdr_sdtmig_version_datasets_dataset_variables_get(connection, version, dataset, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sdtmig/#{version}/datasets/#{dataset}/variables")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SdtmigDatasetVariables},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SDTMIG Dataset Variable

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `dataset` (String.t): SDTMIG Dataset Identifier
  - `var` (String.t): SDTMIG Variable Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SdtmigDatasetVariable.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sdtmig_version_datasets_dataset_variables_var_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.SdtmigDatasetVariable.t} | {:error, Tesla.Env.t}
  def mdr_sdtmig_version_datasets_dataset_variables_var_get(connection, version, dataset, var, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sdtmig/#{version}/datasets/#{dataset}/variables/#{var}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SdtmigDatasetVariable},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SDTMIG Dataset List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SdtmigDatasets.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sdtmig_version_datasets_get(Tesla.Env.client, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.SdtmigDatasets.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_sdtmig_version_datasets_get(connection, version, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sdtmig/#{version}/datasets")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SdtmigDatasets},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SDTMIG product

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SdtmigProduct.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sdtmig_version_get(Tesla.Env.client, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.SdtmigProduct.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_sdtmig_version_get(connection, version, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sdtmig/#{version}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SdtmigProduct},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end
end

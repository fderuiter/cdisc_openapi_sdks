# NOTE: This file is auto generated by OpenAPI Generator 7.16.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule CDISCLibraryAPI.Api.Measures do
  @moduledoc """
  API calls for all endpoints tagged `Measures`.
  """

  alias CDISCLibraryAPI.Connection
  import CDISCLibraryAPI.RequestBuilder

  @doc """
  Get QRS Product

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `measure` (String.t): QRS Measure Identifier
  - `version` (String.t): CDISC Library Product Version
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.QrsProduct.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_qrs_measure_version_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.QrsProduct.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_qrs_measure_version_get(connection, measure, version, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/qrs/#{measure}/#{version}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.QrsProduct},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get QRS Item List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `measure` (String.t): QRS Measure Identifier
  - `version` (String.t): CDISC Library Product Version
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.QrsItems.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_qrs_measure_version_items_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.QrsItems.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_qrs_measure_version_items_get(connection, measure, version, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/qrs/#{measure}/#{version}/items")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.QrsItems},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get QRS Item

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `measure` (String.t): QRS Measure Identifier
  - `version` (String.t): CDISC Library Product Version
  - `item` (String.t): QRS Measure Item Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.QrsItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_qrs_measure_version_items_item_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.QrsItem.t} | {:error, Tesla.Env.t}
  def mdr_qrs_measure_version_items_item_get(connection, measure, version, item, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/qrs/#{measure}/#{version}/items/#{item}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.QrsItem},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get QRS Response Group List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `measure` (String.t): QRS Measure Identifier
  - `version` (String.t): CDISC Library Product Version
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.QrsResponsegroups.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_qrs_measure_version_responsegroups_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.QrsResponsegroups.t} | {:error, Tesla.Env.t}
  def mdr_qrs_measure_version_responsegroups_get(connection, measure, version, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/qrs/#{measure}/#{version}/responsegroups")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.QrsResponsegroups},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get QRS Response Group

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `measure` (String.t): QRS Measure Identifier
  - `version` (String.t): CDISC Library Product Version
  - `responsegroup` (String.t): QRS Measure's Response Group Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.QrsResponsegroup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_qrs_measure_version_responsegroups_responsegroup_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.QrsResponsegroup.t} | {:error, Tesla.Env.t}
  def mdr_qrs_measure_version_responsegroups_responsegroup_get(connection, measure, version, responsegroup, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/qrs/#{measure}/#{version}/responsegroups/#{responsegroup}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.QrsResponsegroup},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end
end

# NOTE: This file is auto generated by OpenAPI Generator 7.16.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule CDISCLibraryAPI.Api.Default do
  @moduledoc """
  API calls for all endpoints tagged `Default`.
  """

  alias CDISCLibraryAPI.Connection
  import CDISCLibraryAPI.RequestBuilder

  @doc """
  Get Information About CDISC Library

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.About.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_about_get(Tesla.Env.client, keyword()) :: {:ok, CDISCLibraryAPI.Model.About.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_about_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/about")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.About},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDISC Library Last Updated

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.Lastupdated.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_lastupdated_get(Tesla.Env.client, keyword()) :: {:ok, CDISCLibraryAPI.Model.Lastupdated.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_lastupdated_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/lastupdated")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.Lastupdated},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDISC Library Product Group Data Analysis

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.ProductgroupDataAnalysis.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_products_data_analysis_get(Tesla.Env.client, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.ProductgroupDataAnalysis.t} | {:error, Tesla.Env.t}
  def mdr_products_data_analysis_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/products/DataAnalysis")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.ProductgroupDataAnalysis},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDISC Library Product Group Data Collection

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.ProductgroupDataCollection.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_products_data_collection_get(Tesla.Env.client, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.ProductgroupDataCollection.t} | {:error, Tesla.Env.t}
  def mdr_products_data_collection_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/products/DataCollection")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.ProductgroupDataCollection},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDISC Library Product Group Data Tabulation

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.ProductgroupDataTabulation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_products_data_tabulation_get(Tesla.Env.client, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.ProductgroupDataTabulation.t} | {:error, Tesla.Env.t}
  def mdr_products_data_tabulation_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/products/DataTabulation")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.ProductgroupDataTabulation},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDISC Library Products

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.Products.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_products_get(Tesla.Env.client, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.Products.t} | {:error, Tesla.Env.t}
  def mdr_products_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/products")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.Products},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDISC Library Product Group QRS

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.ProductgroupQrs.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_products_measures_get(Tesla.Env.client, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.ProductgroupQrs.t} | {:error, Tesla.Env.t}
  def mdr_products_measures_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/products/Measures")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.ProductgroupQrs},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDISC Library Product Group Terminology

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.ProductgroupTerminology.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_products_terminology_get(Tesla.Env.client, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.ProductgroupTerminology.t} | {:error, Tesla.Env.t}
  def mdr_products_terminology_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/products/Terminology")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.ProductgroupTerminology},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end
end

# NOTE: This file is auto generated by OpenAPI Generator 7.16.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule CDISCLibraryAPI.Api.SENDImplementationGuideSENDIG do
  @moduledoc """
  API calls for all endpoints tagged `SENDImplementationGuideSENDIG`.
  """

  alias CDISCLibraryAPI.Connection
  import CDISCLibraryAPI.RequestBuilder

  @doc """
  Get Root SENDIG Dataset Variable

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `dataset` (String.t): SENDIG Dataset Identifier
  - `var` (String.t): SENDIG Variable Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.RootSendigDatasetVariable.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_root_sendig_datasets_dataset_variables_var_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.RootSendigDatasetVariable.t} | {:error, Tesla.Env.t}
  def mdr_root_sendig_datasets_dataset_variables_var_get(connection, dataset, var, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/root/sendig/datasets/#{dataset}/variables/#{var}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.RootSendigDatasetVariable},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SENDIG Class Dataset List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `class` (String.t): SENDIG Class Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SendigClassDatasets.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sendig_version_classes_class_datasets_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.SendigClassDatasets.t} | {:error, Tesla.Env.t}
  def mdr_sendig_version_classes_class_datasets_get(connection, version, class, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sendig/#{version}/classes/#{class}/datasets")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SendigClassDatasets},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SENDIG Class

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `class` (String.t): SENDIG Class Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SendigClass.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sendig_version_classes_class_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.SendigClass.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_sendig_version_classes_class_get(connection, version, class, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sendig/#{version}/classes/#{class}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SendigClass},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SENDIG Class List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SendigClasses.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sendig_version_classes_get(Tesla.Env.client, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.SendigClasses.t} | {:error, Tesla.Env.t}
  def mdr_sendig_version_classes_get(connection, version, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sendig/#{version}/classes")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SendigClasses},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SENDIG Dataset

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `dataset` (String.t): SENDIG Class Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SendigDataset.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sendig_version_datasets_dataset_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.SendigDataset.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_sendig_version_datasets_dataset_get(connection, version, dataset, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sendig/#{version}/datasets/#{dataset}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SendigDataset},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SENDIG Dataset Variable List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `dataset` (String.t): SENDIG Class Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SendigDatasetVariables.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sendig_version_datasets_dataset_variables_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.SendigDatasetVariables.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_sendig_version_datasets_dataset_variables_get(connection, version, dataset, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sendig/#{version}/datasets/#{dataset}/variables")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SendigDatasetVariables},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SENDIG Dataset Variable

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `dataset` (String.t): SENDIG Class Identifier
  - `var` (String.t): SENDIG Variable Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SendigDatasetVariable.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sendig_version_datasets_dataset_variables_var_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.SendigDatasetVariable.t} | {:error, Tesla.Env.t}
  def mdr_sendig_version_datasets_dataset_variables_var_get(connection, version, dataset, var, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sendig/#{version}/datasets/#{dataset}/variables/#{var}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SendigDatasetVariable},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SENDIG Dataset List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SendigDatasets.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sendig_version_datasets_get(Tesla.Env.client, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.SendigDatasets.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_sendig_version_datasets_get(connection, version, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sendig/#{version}/datasets")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SendigDatasets},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SENDIG product

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SendigProduct.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sendig_version_get(Tesla.Env.client, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.SendigProduct.t} | {:error, Tesla.Env.t}
  def mdr_sendig_version_get(connection, version, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sendig/#{version}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SendigProduct},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end
end

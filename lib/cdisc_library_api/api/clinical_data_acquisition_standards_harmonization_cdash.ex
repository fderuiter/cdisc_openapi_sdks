# NOTE: This file is auto generated by OpenAPI Generator 7.16.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule CDISCLibraryAPI.Api.ClinicalDataAcquisitionStandardsHarmonizationCDASH do
  @moduledoc """
  API calls for all endpoints tagged `ClinicalDataAcquisitionStandardsHarmonizationCDASH`.
  """

  alias CDISCLibraryAPI.Connection
  import CDISCLibraryAPI.RequestBuilder

  @doc """
  Get CDASH Class Domain List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `class` (String.t): CDASH Class Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CdashClassDomains.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_cdash_version_classes_class_domains_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.CdashClassDomains.t} | {:error, Tesla.Env.t}
  def mdr_cdash_version_classes_class_domains_get(connection, version, class, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/cdash/#{version}/classes/#{class}/domains")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CdashClassDomains},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDASH Class Field

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `class` (String.t): CDASH Class Identifier
  - `field` (String.t): CDASH Field Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CdashClassField.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_cdash_version_classes_class_fields_field_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.CdashClassField.t} | {:error, Tesla.Env.t}
  def mdr_cdash_version_classes_class_fields_field_get(connection, version, class, field, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/cdash/#{version}/classes/#{class}/fields/#{field}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CdashClassField},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDASH Class

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `class` (String.t): CDASH Class Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CdashClass.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_cdash_version_classes_class_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.CdashClass.t} | {:error, Tesla.Env.t}
  def mdr_cdash_version_classes_class_get(connection, version, class, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/cdash/#{version}/classes/#{class}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CdashClass},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDASH Class List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CdashProductClasses.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_cdash_version_classes_get(Tesla.Env.client, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.CdashProductClasses.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_cdash_version_classes_get(connection, version, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/cdash/#{version}/classes")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CdashProductClasses},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDASH Domain Field

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `domain` (String.t): CDASH Domain Identifier
  - `field` (String.t): CDASH Field Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CdashDomainField.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_cdash_version_domains_domain_fields_field_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.CdashDomainField.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_cdash_version_domains_domain_fields_field_get(connection, version, domain, field, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/cdash/#{version}/domains/#{domain}/fields/#{field}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CdashDomainField},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDASH Domain Field List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `domain` (String.t): CDASH Domain Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CdashDomainFields.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_cdash_version_domains_domain_fields_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.CdashDomainFields.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_cdash_version_domains_domain_fields_get(connection, version, domain, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/cdash/#{version}/domains/#{domain}/fields")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CdashDomainFields},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDASH Domain

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `domain` (String.t): CDASH Domain Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CdashDomain.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_cdash_version_domains_domain_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.CdashDomain.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_cdash_version_domains_domain_get(connection, version, domain, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/cdash/#{version}/domains/#{domain}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CdashDomain},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDASH Domain List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CdashProductDomains.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_cdash_version_domains_get(Tesla.Env.client, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.CdashProductDomains.t} | {:error, Tesla.Env.t}
  def mdr_cdash_version_domains_get(connection, version, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/cdash/#{version}/domains")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CdashProductDomains},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDASH Product

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CdashProduct.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_cdash_version_get(Tesla.Env.client, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.CdashProduct.t} | {:error, Tesla.Env.t}
  def mdr_cdash_version_get(connection, version, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/cdash/#{version}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CdashProduct},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get Root CDASH Class Field

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `class` (String.t): CDASH Class Identifier
  - `field` (String.t): CDASH Field Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.RootCdashClassField.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_root_cdash_classes_class_fields_field_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.RootCdashClassField.t} | {:error, Tesla.Env.t}
  def mdr_root_cdash_classes_class_fields_field_get(connection, class, field, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/root/cdash/classes/#{class}/fields/#{field}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.RootCdashClassField},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get Root CDASH Domain Field

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `domain` (String.t): CDASH Domain Identifier
  - `field` (String.t): CDASH Field Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.RootCdashDomainField.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_root_cdash_domains_domain_fields_field_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.RootCdashDomainField.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_root_cdash_domains_domain_fields_field_get(connection, domain, field, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/root/cdash/domains/#{domain}/fields/#{field}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.RootCdashDomainField},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end
end

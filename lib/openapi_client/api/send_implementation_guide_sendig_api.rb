=begin
#CDISC Library API

#REST API Documentation for CDISC Library in production server

The version of the OpenAPI document: 1.1.0
Contact: cdisc_library_support@cdisc.org
Generated by: https://openapi-generator.tech
Generator version: 7.16.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class SENDImplementationGuideSENDIGApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Root SENDIG Dataset Variable
    # @param dataset [String] SENDIG Dataset Identifier
    # @param var [String] SENDIG Variable Identifier
    # @param [Hash] opts the optional parameters
    # @return [RootSendigDatasetVariable]
    def mdr_root_sendig_datasets_dataset_variables_var_get(dataset, var, opts = {})
      data, _status_code, _headers = mdr_root_sendig_datasets_dataset_variables_var_get_with_http_info(dataset, var, opts)
      data
    end

    # Get Root SENDIG Dataset Variable
    # @param dataset [String] SENDIG Dataset Identifier
    # @param var [String] SENDIG Variable Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(RootSendigDatasetVariable, Integer, Hash)>] RootSendigDatasetVariable data, response status code and response headers
    def mdr_root_sendig_datasets_dataset_variables_var_get_with_http_info(dataset, var, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SENDImplementationGuideSENDIGApi.mdr_root_sendig_datasets_dataset_variables_var_get ...'
      end
      # verify the required parameter 'dataset' is set
      if @api_client.config.client_side_validation && dataset.nil?
        fail ArgumentError, "Missing the required parameter 'dataset' when calling SENDImplementationGuideSENDIGApi.mdr_root_sendig_datasets_dataset_variables_var_get"
      end
      # verify the required parameter 'var' is set
      if @api_client.config.client_side_validation && var.nil?
        fail ArgumentError, "Missing the required parameter 'var' when calling SENDImplementationGuideSENDIGApi.mdr_root_sendig_datasets_dataset_variables_var_get"
      end
      # resource path
      local_var_path = '/mdr/root/sendig/datasets/{dataset}/variables/{var}'.sub('{' + 'dataset' + '}', CGI.escape(dataset.to_s)).sub('{' + 'var' + '}', CGI.escape(var.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RootSendigDatasetVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SENDImplementationGuideSENDIGApi.mdr_root_sendig_datasets_dataset_variables_var_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SENDImplementationGuideSENDIGApi#mdr_root_sendig_datasets_dataset_variables_var_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SENDIG Class Dataset List
    # @param version [String] CDISC Library Product Version
    # @param _class [String] SENDIG Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [SendigClassDatasets]
    def mdr_sendig_version_classes_class_datasets_get(version, _class, opts = {})
      data, _status_code, _headers = mdr_sendig_version_classes_class_datasets_get_with_http_info(version, _class, opts)
      data
    end

    # Get SENDIG Class Dataset List
    # @param version [String] CDISC Library Product Version
    # @param _class [String] SENDIG Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(SendigClassDatasets, Integer, Hash)>] SendigClassDatasets data, response status code and response headers
    def mdr_sendig_version_classes_class_datasets_get_with_http_info(version, _class, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SENDImplementationGuideSENDIGApi.mdr_sendig_version_classes_class_datasets_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling SENDImplementationGuideSENDIGApi.mdr_sendig_version_classes_class_datasets_get"
      end
      # verify the required parameter '_class' is set
      if @api_client.config.client_side_validation && _class.nil?
        fail ArgumentError, "Missing the required parameter '_class' when calling SENDImplementationGuideSENDIGApi.mdr_sendig_version_classes_class_datasets_get"
      end
      # resource path
      local_var_path = '/mdr/sendig/{version}/classes/{class}/datasets'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'class' + '}', CGI.escape(_class.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendigClassDatasets'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SENDImplementationGuideSENDIGApi.mdr_sendig_version_classes_class_datasets_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SENDImplementationGuideSENDIGApi#mdr_sendig_version_classes_class_datasets_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SENDIG Class
    # @param version [String] CDISC Library Product Version
    # @param _class [String] SENDIG Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [SendigClass]
    def mdr_sendig_version_classes_class_get(version, _class, opts = {})
      data, _status_code, _headers = mdr_sendig_version_classes_class_get_with_http_info(version, _class, opts)
      data
    end

    # Get SENDIG Class
    # @param version [String] CDISC Library Product Version
    # @param _class [String] SENDIG Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(SendigClass, Integer, Hash)>] SendigClass data, response status code and response headers
    def mdr_sendig_version_classes_class_get_with_http_info(version, _class, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SENDImplementationGuideSENDIGApi.mdr_sendig_version_classes_class_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling SENDImplementationGuideSENDIGApi.mdr_sendig_version_classes_class_get"
      end
      # verify the required parameter '_class' is set
      if @api_client.config.client_side_validation && _class.nil?
        fail ArgumentError, "Missing the required parameter '_class' when calling SENDImplementationGuideSENDIGApi.mdr_sendig_version_classes_class_get"
      end
      # resource path
      local_var_path = '/mdr/sendig/{version}/classes/{class}'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'class' + '}', CGI.escape(_class.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendigClass'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SENDImplementationGuideSENDIGApi.mdr_sendig_version_classes_class_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SENDImplementationGuideSENDIGApi#mdr_sendig_version_classes_class_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SENDIG Class List
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [SendigClasses]
    def mdr_sendig_version_classes_get(version, opts = {})
      data, _status_code, _headers = mdr_sendig_version_classes_get_with_http_info(version, opts)
      data
    end

    # Get SENDIG Class List
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [Array<(SendigClasses, Integer, Hash)>] SendigClasses data, response status code and response headers
    def mdr_sendig_version_classes_get_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SENDImplementationGuideSENDIGApi.mdr_sendig_version_classes_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling SENDImplementationGuideSENDIGApi.mdr_sendig_version_classes_get"
      end
      # resource path
      local_var_path = '/mdr/sendig/{version}/classes'.sub('{' + 'version' + '}', CGI.escape(version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendigClasses'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SENDImplementationGuideSENDIGApi.mdr_sendig_version_classes_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SENDImplementationGuideSENDIGApi#mdr_sendig_version_classes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SENDIG Dataset
    # @param version [String] CDISC Library Product Version
    # @param dataset [String] SENDIG Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [SendigDataset]
    def mdr_sendig_version_datasets_dataset_get(version, dataset, opts = {})
      data, _status_code, _headers = mdr_sendig_version_datasets_dataset_get_with_http_info(version, dataset, opts)
      data
    end

    # Get SENDIG Dataset
    # @param version [String] CDISC Library Product Version
    # @param dataset [String] SENDIG Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(SendigDataset, Integer, Hash)>] SendigDataset data, response status code and response headers
    def mdr_sendig_version_datasets_dataset_get_with_http_info(version, dataset, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SENDImplementationGuideSENDIGApi.mdr_sendig_version_datasets_dataset_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling SENDImplementationGuideSENDIGApi.mdr_sendig_version_datasets_dataset_get"
      end
      # verify the required parameter 'dataset' is set
      if @api_client.config.client_side_validation && dataset.nil?
        fail ArgumentError, "Missing the required parameter 'dataset' when calling SENDImplementationGuideSENDIGApi.mdr_sendig_version_datasets_dataset_get"
      end
      # resource path
      local_var_path = '/mdr/sendig/{version}/datasets/{dataset}'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'dataset' + '}', CGI.escape(dataset.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendigDataset'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SENDImplementationGuideSENDIGApi.mdr_sendig_version_datasets_dataset_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SENDImplementationGuideSENDIGApi#mdr_sendig_version_datasets_dataset_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SENDIG Dataset Variable List
    # @param version [String] CDISC Library Product Version
    # @param dataset [String] SENDIG Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [SendigDatasetVariables]
    def mdr_sendig_version_datasets_dataset_variables_get(version, dataset, opts = {})
      data, _status_code, _headers = mdr_sendig_version_datasets_dataset_variables_get_with_http_info(version, dataset, opts)
      data
    end

    # Get SENDIG Dataset Variable List
    # @param version [String] CDISC Library Product Version
    # @param dataset [String] SENDIG Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(SendigDatasetVariables, Integer, Hash)>] SendigDatasetVariables data, response status code and response headers
    def mdr_sendig_version_datasets_dataset_variables_get_with_http_info(version, dataset, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SENDImplementationGuideSENDIGApi.mdr_sendig_version_datasets_dataset_variables_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling SENDImplementationGuideSENDIGApi.mdr_sendig_version_datasets_dataset_variables_get"
      end
      # verify the required parameter 'dataset' is set
      if @api_client.config.client_side_validation && dataset.nil?
        fail ArgumentError, "Missing the required parameter 'dataset' when calling SENDImplementationGuideSENDIGApi.mdr_sendig_version_datasets_dataset_variables_get"
      end
      # resource path
      local_var_path = '/mdr/sendig/{version}/datasets/{dataset}/variables'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'dataset' + '}', CGI.escape(dataset.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendigDatasetVariables'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SENDImplementationGuideSENDIGApi.mdr_sendig_version_datasets_dataset_variables_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SENDImplementationGuideSENDIGApi#mdr_sendig_version_datasets_dataset_variables_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SENDIG Dataset Variable
    # @param version [String] CDISC Library Product Version
    # @param dataset [String] SENDIG Class Identifier
    # @param var [String] SENDIG Variable Identifier
    # @param [Hash] opts the optional parameters
    # @return [SendigDatasetVariable]
    def mdr_sendig_version_datasets_dataset_variables_var_get(version, dataset, var, opts = {})
      data, _status_code, _headers = mdr_sendig_version_datasets_dataset_variables_var_get_with_http_info(version, dataset, var, opts)
      data
    end

    # Get SENDIG Dataset Variable
    # @param version [String] CDISC Library Product Version
    # @param dataset [String] SENDIG Class Identifier
    # @param var [String] SENDIG Variable Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(SendigDatasetVariable, Integer, Hash)>] SendigDatasetVariable data, response status code and response headers
    def mdr_sendig_version_datasets_dataset_variables_var_get_with_http_info(version, dataset, var, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SENDImplementationGuideSENDIGApi.mdr_sendig_version_datasets_dataset_variables_var_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling SENDImplementationGuideSENDIGApi.mdr_sendig_version_datasets_dataset_variables_var_get"
      end
      # verify the required parameter 'dataset' is set
      if @api_client.config.client_side_validation && dataset.nil?
        fail ArgumentError, "Missing the required parameter 'dataset' when calling SENDImplementationGuideSENDIGApi.mdr_sendig_version_datasets_dataset_variables_var_get"
      end
      # verify the required parameter 'var' is set
      if @api_client.config.client_side_validation && var.nil?
        fail ArgumentError, "Missing the required parameter 'var' when calling SENDImplementationGuideSENDIGApi.mdr_sendig_version_datasets_dataset_variables_var_get"
      end
      # resource path
      local_var_path = '/mdr/sendig/{version}/datasets/{dataset}/variables/{var}'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'dataset' + '}', CGI.escape(dataset.to_s)).sub('{' + 'var' + '}', CGI.escape(var.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendigDatasetVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SENDImplementationGuideSENDIGApi.mdr_sendig_version_datasets_dataset_variables_var_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SENDImplementationGuideSENDIGApi#mdr_sendig_version_datasets_dataset_variables_var_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SENDIG Dataset List
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [SendigDatasets]
    def mdr_sendig_version_datasets_get(version, opts = {})
      data, _status_code, _headers = mdr_sendig_version_datasets_get_with_http_info(version, opts)
      data
    end

    # Get SENDIG Dataset List
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [Array<(SendigDatasets, Integer, Hash)>] SendigDatasets data, response status code and response headers
    def mdr_sendig_version_datasets_get_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SENDImplementationGuideSENDIGApi.mdr_sendig_version_datasets_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling SENDImplementationGuideSENDIGApi.mdr_sendig_version_datasets_get"
      end
      # resource path
      local_var_path = '/mdr/sendig/{version}/datasets'.sub('{' + 'version' + '}', CGI.escape(version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/csv']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendigDatasets'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SENDImplementationGuideSENDIGApi.mdr_sendig_version_datasets_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SENDImplementationGuideSENDIGApi#mdr_sendig_version_datasets_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SENDIG product
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [SendigProduct]
    def mdr_sendig_version_get(version, opts = {})
      data, _status_code, _headers = mdr_sendig_version_get_with_http_info(version, opts)
      data
    end

    # Get SENDIG product
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [Array<(SendigProduct, Integer, Hash)>] SendigProduct data, response status code and response headers
    def mdr_sendig_version_get_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SENDImplementationGuideSENDIGApi.mdr_sendig_version_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling SENDImplementationGuideSENDIGApi.mdr_sendig_version_get"
      end
      # resource path
      local_var_path = '/mdr/sendig/{version}'.sub('{' + 'version' + '}', CGI.escape(version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SendigProduct'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SENDImplementationGuideSENDIGApi.mdr_sendig_version_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SENDImplementationGuideSENDIGApi#mdr_sendig_version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

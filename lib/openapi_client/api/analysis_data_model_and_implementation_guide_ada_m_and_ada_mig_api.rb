=begin
#CDISC Library API

#REST API Documentation for CDISC Library in production server

The version of the OpenAPI document: 1.1.0
Contact: cdisc_library_support@cdisc.org
Generated by: https://openapi-generator.tech
Generator version: 7.16.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get ADaM Data Structure List
    # @param product [String] CDISC Library Product
    # @param [Hash] opts the optional parameters
    # @return [AdamProductDatastructures]
    def mdr_adam_product_datastructures_get(product, opts = {})
      data, _status_code, _headers = mdr_adam_product_datastructures_get_with_http_info(product, opts)
      data
    end

    # Get ADaM Data Structure List
    # @param product [String] CDISC Library Product
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdamProductDatastructures, Integer, Hash)>] AdamProductDatastructures data, response status code and response headers
    def mdr_adam_product_datastructures_get_with_http_info(product, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_get ...'
      end
      # verify the required parameter 'product' is set
      if @api_client.config.client_side_validation && product.nil?
        fail ArgumentError, "Missing the required parameter 'product' when calling AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_get"
      end
      # resource path
      local_var_path = '/mdr/adam/{product}/datastructures'.sub('{' + 'product' + '}', CGI.escape(product.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/csv']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdamProductDatastructures'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi#mdr_adam_product_datastructures_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ADaM Data Structure
    # @param product [String] CDISC Library Product
    # @param structure [String] Data structure Identifier
    # @param [Hash] opts the optional parameters
    # @return [AdamDatastructure]
    def mdr_adam_product_datastructures_structure_get(product, structure, opts = {})
      data, _status_code, _headers = mdr_adam_product_datastructures_structure_get_with_http_info(product, structure, opts)
      data
    end

    # Get ADaM Data Structure
    # @param product [String] CDISC Library Product
    # @param structure [String] Data structure Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdamDatastructure, Integer, Hash)>] AdamDatastructure data, response status code and response headers
    def mdr_adam_product_datastructures_structure_get_with_http_info(product, structure, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_structure_get ...'
      end
      # verify the required parameter 'product' is set
      if @api_client.config.client_side_validation && product.nil?
        fail ArgumentError, "Missing the required parameter 'product' when calling AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_structure_get"
      end
      # verify the required parameter 'structure' is set
      if @api_client.config.client_side_validation && structure.nil?
        fail ArgumentError, "Missing the required parameter 'structure' when calling AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_structure_get"
      end
      # resource path
      local_var_path = '/mdr/adam/{product}/datastructures/{structure}'.sub('{' + 'product' + '}', CGI.escape(product.to_s)).sub('{' + 'structure' + '}', CGI.escape(structure.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdamDatastructure'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_structure_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi#mdr_adam_product_datastructures_structure_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ADaM Variable List
    # @param product [String] CDISC Library Product
    # @param structure [String] ADaM Data Structure Identifier
    # @param [Hash] opts the optional parameters
    # @return [AdamDatastructureVariables]
    def mdr_adam_product_datastructures_structure_variables_get(product, structure, opts = {})
      data, _status_code, _headers = mdr_adam_product_datastructures_structure_variables_get_with_http_info(product, structure, opts)
      data
    end

    # Get ADaM Variable List
    # @param product [String] CDISC Library Product
    # @param structure [String] ADaM Data Structure Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdamDatastructureVariables, Integer, Hash)>] AdamDatastructureVariables data, response status code and response headers
    def mdr_adam_product_datastructures_structure_variables_get_with_http_info(product, structure, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_structure_variables_get ...'
      end
      # verify the required parameter 'product' is set
      if @api_client.config.client_side_validation && product.nil?
        fail ArgumentError, "Missing the required parameter 'product' when calling AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_structure_variables_get"
      end
      # verify the required parameter 'structure' is set
      if @api_client.config.client_side_validation && structure.nil?
        fail ArgumentError, "Missing the required parameter 'structure' when calling AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_structure_variables_get"
      end
      # resource path
      local_var_path = '/mdr/adam/{product}/datastructures/{structure}/variables'.sub('{' + 'product' + '}', CGI.escape(product.to_s)).sub('{' + 'structure' + '}', CGI.escape(structure.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdamDatastructureVariables'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_structure_variables_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi#mdr_adam_product_datastructures_structure_variables_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ADaM Variable
    # @param product [String] CDISC Library Product
    # @param structure [String] ADaM Data Structure Identifier
    # @param var [String] ADaM Variable Identifier
    # @param [Hash] opts the optional parameters
    # @return [AdamVariable]
    def mdr_adam_product_datastructures_structure_variables_var_get(product, structure, var, opts = {})
      data, _status_code, _headers = mdr_adam_product_datastructures_structure_variables_var_get_with_http_info(product, structure, var, opts)
      data
    end

    # Get ADaM Variable
    # @param product [String] CDISC Library Product
    # @param structure [String] ADaM Data Structure Identifier
    # @param var [String] ADaM Variable Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdamVariable, Integer, Hash)>] AdamVariable data, response status code and response headers
    def mdr_adam_product_datastructures_structure_variables_var_get_with_http_info(product, structure, var, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_structure_variables_var_get ...'
      end
      # verify the required parameter 'product' is set
      if @api_client.config.client_side_validation && product.nil?
        fail ArgumentError, "Missing the required parameter 'product' when calling AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_structure_variables_var_get"
      end
      # verify the required parameter 'structure' is set
      if @api_client.config.client_side_validation && structure.nil?
        fail ArgumentError, "Missing the required parameter 'structure' when calling AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_structure_variables_var_get"
      end
      # verify the required parameter 'var' is set
      if @api_client.config.client_side_validation && var.nil?
        fail ArgumentError, "Missing the required parameter 'var' when calling AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_structure_variables_var_get"
      end
      # resource path
      local_var_path = '/mdr/adam/{product}/datastructures/{structure}/variables/{var}'.sub('{' + 'product' + '}', CGI.escape(product.to_s)).sub('{' + 'structure' + '}', CGI.escape(structure.to_s)).sub('{' + 'var' + '}', CGI.escape(var.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdamVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_structure_variables_var_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi#mdr_adam_product_datastructures_structure_variables_var_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ADaM Variable Set List
    # @param product [String] CDISC Library Product
    # @param structure [String] ADaM Data Structure Identifier
    # @param [Hash] opts the optional parameters
    # @return [AdamDatastructureVarsets]
    def mdr_adam_product_datastructures_structure_varsets_get(product, structure, opts = {})
      data, _status_code, _headers = mdr_adam_product_datastructures_structure_varsets_get_with_http_info(product, structure, opts)
      data
    end

    # Get ADaM Variable Set List
    # @param product [String] CDISC Library Product
    # @param structure [String] ADaM Data Structure Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdamDatastructureVarsets, Integer, Hash)>] AdamDatastructureVarsets data, response status code and response headers
    def mdr_adam_product_datastructures_structure_varsets_get_with_http_info(product, structure, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_structure_varsets_get ...'
      end
      # verify the required parameter 'product' is set
      if @api_client.config.client_side_validation && product.nil?
        fail ArgumentError, "Missing the required parameter 'product' when calling AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_structure_varsets_get"
      end
      # verify the required parameter 'structure' is set
      if @api_client.config.client_side_validation && structure.nil?
        fail ArgumentError, "Missing the required parameter 'structure' when calling AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_structure_varsets_get"
      end
      # resource path
      local_var_path = '/mdr/adam/{product}/datastructures/{structure}/varsets'.sub('{' + 'product' + '}', CGI.escape(product.to_s)).sub('{' + 'structure' + '}', CGI.escape(structure.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdamDatastructureVarsets'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_structure_varsets_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi#mdr_adam_product_datastructures_structure_varsets_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ADaM Variable Set
    # @param product [String] CDISC Library Product
    # @param structure [String] ADaM Data Structure Identifier
    # @param varset [String] ADaM Variable Set Identifier
    # @param [Hash] opts the optional parameters
    # @return [AdamVarset]
    def mdr_adam_product_datastructures_structure_varsets_varset_get(product, structure, varset, opts = {})
      data, _status_code, _headers = mdr_adam_product_datastructures_structure_varsets_varset_get_with_http_info(product, structure, varset, opts)
      data
    end

    # Get ADaM Variable Set
    # @param product [String] CDISC Library Product
    # @param structure [String] ADaM Data Structure Identifier
    # @param varset [String] ADaM Variable Set Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdamVarset, Integer, Hash)>] AdamVarset data, response status code and response headers
    def mdr_adam_product_datastructures_structure_varsets_varset_get_with_http_info(product, structure, varset, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_structure_varsets_varset_get ...'
      end
      # verify the required parameter 'product' is set
      if @api_client.config.client_side_validation && product.nil?
        fail ArgumentError, "Missing the required parameter 'product' when calling AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_structure_varsets_varset_get"
      end
      # verify the required parameter 'structure' is set
      if @api_client.config.client_side_validation && structure.nil?
        fail ArgumentError, "Missing the required parameter 'structure' when calling AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_structure_varsets_varset_get"
      end
      # verify the required parameter 'varset' is set
      if @api_client.config.client_side_validation && varset.nil?
        fail ArgumentError, "Missing the required parameter 'varset' when calling AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_structure_varsets_varset_get"
      end
      # resource path
      local_var_path = '/mdr/adam/{product}/datastructures/{structure}/varsets/{varset}'.sub('{' + 'product' + '}', CGI.escape(product.to_s)).sub('{' + 'structure' + '}', CGI.escape(structure.to_s)).sub('{' + 'varset' + '}', CGI.escape(varset.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdamVarset'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_datastructures_structure_varsets_varset_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi#mdr_adam_product_datastructures_structure_varsets_varset_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get ADaM Product
    # @param product [String] CDISC Library Product
    # @param [Hash] opts the optional parameters
    # @return [AdamProduct]
    def mdr_adam_product_get(product, opts = {})
      data, _status_code, _headers = mdr_adam_product_get_with_http_info(product, opts)
      data
    end

    # Get ADaM Product
    # @param product [String] CDISC Library Product
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdamProduct, Integer, Hash)>] AdamProduct data, response status code and response headers
    def mdr_adam_product_get_with_http_info(product, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_get ...'
      end
      # verify the required parameter 'product' is set
      if @api_client.config.client_side_validation && product.nil?
        fail ArgumentError, "Missing the required parameter 'product' when calling AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_get"
      end
      # resource path
      local_var_path = '/mdr/adam/{product}'.sub('{' + 'product' + '}', CGI.escape(product.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdamProduct'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.mdr_adam_product_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi#mdr_adam_product_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

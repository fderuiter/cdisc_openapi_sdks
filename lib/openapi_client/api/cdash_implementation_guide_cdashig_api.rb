=begin
#CDISC Library API

#REST API Documentation for CDISC Library in production server

The version of the OpenAPI document: 1.1.0
Contact: cdisc_library_support@cdisc.org
Generated by: https://openapi-generator.tech
Generator version: 7.16.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class CDASHImplementationGuideCDASHIGApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get CDASHIG Class Domain List
    # @param version [String] CDISC Library Product Version
    # @param _class [String] CDASHIG Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [CdashigClassDomains]
    def mdr_cdashig_version_classes_class_domains_get(version, _class, opts = {})
      data, _status_code, _headers = mdr_cdashig_version_classes_class_domains_get_with_http_info(version, _class, opts)
      data
    end

    # Get CDASHIG Class Domain List
    # @param version [String] CDISC Library Product Version
    # @param _class [String] CDASHIG Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CdashigClassDomains, Integer, Hash)>] CdashigClassDomains data, response status code and response headers
    def mdr_cdashig_version_classes_class_domains_get_with_http_info(version, _class, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_classes_class_domains_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_classes_class_domains_get"
      end
      # verify the required parameter '_class' is set
      if @api_client.config.client_side_validation && _class.nil?
        fail ArgumentError, "Missing the required parameter '_class' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_classes_class_domains_get"
      end
      # resource path
      local_var_path = '/mdr/cdashig/{version}/classes/{class}/domains'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'class' + '}', CGI.escape(_class.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CdashigClassDomains'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_classes_class_domains_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CDASHImplementationGuideCDASHIGApi#mdr_cdashig_version_classes_class_domains_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDASHIG Class
    # @param version [String] CDISC Library Product Version
    # @param _class [String] CDASHIG Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [CdashigClass]
    def mdr_cdashig_version_classes_class_get(version, _class, opts = {})
      data, _status_code, _headers = mdr_cdashig_version_classes_class_get_with_http_info(version, _class, opts)
      data
    end

    # Get CDASHIG Class
    # @param version [String] CDISC Library Product Version
    # @param _class [String] CDASHIG Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CdashigClass, Integer, Hash)>] CdashigClass data, response status code and response headers
    def mdr_cdashig_version_classes_class_get_with_http_info(version, _class, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_classes_class_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_classes_class_get"
      end
      # verify the required parameter '_class' is set
      if @api_client.config.client_side_validation && _class.nil?
        fail ArgumentError, "Missing the required parameter '_class' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_classes_class_get"
      end
      # resource path
      local_var_path = '/mdr/cdashig/{version}/classes/{class}'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'class' + '}', CGI.escape(_class.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CdashigClass'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_classes_class_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CDASHImplementationGuideCDASHIGApi#mdr_cdashig_version_classes_class_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDASHIG Class Scenario List
    # @param version [String] CDISC Library Product Version
    # @param _class [String] CDASHIG Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [CdashigClassScenarios]
    def mdr_cdashig_version_classes_class_scenarios_get(version, _class, opts = {})
      data, _status_code, _headers = mdr_cdashig_version_classes_class_scenarios_get_with_http_info(version, _class, opts)
      data
    end

    # Get CDASHIG Class Scenario List
    # @param version [String] CDISC Library Product Version
    # @param _class [String] CDASHIG Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CdashigClassScenarios, Integer, Hash)>] CdashigClassScenarios data, response status code and response headers
    def mdr_cdashig_version_classes_class_scenarios_get_with_http_info(version, _class, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_classes_class_scenarios_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_classes_class_scenarios_get"
      end
      # verify the required parameter '_class' is set
      if @api_client.config.client_side_validation && _class.nil?
        fail ArgumentError, "Missing the required parameter '_class' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_classes_class_scenarios_get"
      end
      # resource path
      local_var_path = '/mdr/cdashig/{version}/classes/{class}/scenarios'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'class' + '}', CGI.escape(_class.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CdashigClassScenarios'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_classes_class_scenarios_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CDASHImplementationGuideCDASHIGApi#mdr_cdashig_version_classes_class_scenarios_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDASHIG Class List
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [CdashigProductClasses]
    def mdr_cdashig_version_classes_get(version, opts = {})
      data, _status_code, _headers = mdr_cdashig_version_classes_get_with_http_info(version, opts)
      data
    end

    # Get CDASHIG Class List
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [Array<(CdashigProductClasses, Integer, Hash)>] CdashigProductClasses data, response status code and response headers
    def mdr_cdashig_version_classes_get_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_classes_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_classes_get"
      end
      # resource path
      local_var_path = '/mdr/cdashig/{version}/classes'.sub('{' + 'version' + '}', CGI.escape(version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CdashigProductClasses'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_classes_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CDASHImplementationGuideCDASHIGApi#mdr_cdashig_version_classes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDASHIG Domain Field
    # @param version [String] CDISC Library Product Version
    # @param domain [String] CDASHIG Domain Identifier
    # @param field [String] CDASHIG Field Identifier
    # @param [Hash] opts the optional parameters
    # @return [CdashigDomainField]
    def mdr_cdashig_version_domains_domain_fields_field_get(version, domain, field, opts = {})
      data, _status_code, _headers = mdr_cdashig_version_domains_domain_fields_field_get_with_http_info(version, domain, field, opts)
      data
    end

    # Get CDASHIG Domain Field
    # @param version [String] CDISC Library Product Version
    # @param domain [String] CDASHIG Domain Identifier
    # @param field [String] CDASHIG Field Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CdashigDomainField, Integer, Hash)>] CdashigDomainField data, response status code and response headers
    def mdr_cdashig_version_domains_domain_fields_field_get_with_http_info(version, domain, field, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_domains_domain_fields_field_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_domains_domain_fields_field_get"
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_domains_domain_fields_field_get"
      end
      # verify the required parameter 'field' is set
      if @api_client.config.client_side_validation && field.nil?
        fail ArgumentError, "Missing the required parameter 'field' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_domains_domain_fields_field_get"
      end
      # resource path
      local_var_path = '/mdr/cdashig/{version}/domains/{domain}/fields/{field}'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'domain' + '}', CGI.escape(domain.to_s)).sub('{' + 'field' + '}', CGI.escape(field.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CdashigDomainField'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_domains_domain_fields_field_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CDASHImplementationGuideCDASHIGApi#mdr_cdashig_version_domains_domain_fields_field_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDASHIG Domain Field List
    # @param version [String] CDISC Library Product Version
    # @param domain [String] CDASHIG Domain Identifier
    # @param [Hash] opts the optional parameters
    # @return [CdashigDomainFields]
    def mdr_cdashig_version_domains_domain_fields_get(version, domain, opts = {})
      data, _status_code, _headers = mdr_cdashig_version_domains_domain_fields_get_with_http_info(version, domain, opts)
      data
    end

    # Get CDASHIG Domain Field List
    # @param version [String] CDISC Library Product Version
    # @param domain [String] CDASHIG Domain Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CdashigDomainFields, Integer, Hash)>] CdashigDomainFields data, response status code and response headers
    def mdr_cdashig_version_domains_domain_fields_get_with_http_info(version, domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_domains_domain_fields_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_domains_domain_fields_get"
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_domains_domain_fields_get"
      end
      # resource path
      local_var_path = '/mdr/cdashig/{version}/domains/{domain}/fields'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'domain' + '}', CGI.escape(domain.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CdashigDomainFields'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_domains_domain_fields_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CDASHImplementationGuideCDASHIGApi#mdr_cdashig_version_domains_domain_fields_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDASHIG Domain
    # @param version [String] CDISC Library Product Version
    # @param domain [String] CDASHIG Domain Identifier
    # @param [Hash] opts the optional parameters
    # @return [CdashigDomain]
    def mdr_cdashig_version_domains_domain_get(version, domain, opts = {})
      data, _status_code, _headers = mdr_cdashig_version_domains_domain_get_with_http_info(version, domain, opts)
      data
    end

    # Get CDASHIG Domain
    # @param version [String] CDISC Library Product Version
    # @param domain [String] CDASHIG Domain Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CdashigDomain, Integer, Hash)>] CdashigDomain data, response status code and response headers
    def mdr_cdashig_version_domains_domain_get_with_http_info(version, domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_domains_domain_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_domains_domain_get"
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_domains_domain_get"
      end
      # resource path
      local_var_path = '/mdr/cdashig/{version}/domains/{domain}'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'domain' + '}', CGI.escape(domain.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CdashigDomain'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_domains_domain_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CDASHImplementationGuideCDASHIGApi#mdr_cdashig_version_domains_domain_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDASHIG Domain List
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [CdashigProductDomains]
    def mdr_cdashig_version_domains_get(version, opts = {})
      data, _status_code, _headers = mdr_cdashig_version_domains_get_with_http_info(version, opts)
      data
    end

    # Get CDASHIG Domain List
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [Array<(CdashigProductDomains, Integer, Hash)>] CdashigProductDomains data, response status code and response headers
    def mdr_cdashig_version_domains_get_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_domains_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_domains_get"
      end
      # resource path
      local_var_path = '/mdr/cdashig/{version}/domains'.sub('{' + 'version' + '}', CGI.escape(version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CdashigProductDomains'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_domains_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CDASHImplementationGuideCDASHIGApi#mdr_cdashig_version_domains_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDASHIG Product
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [CdashigProduct]
    def mdr_cdashig_version_get(version, opts = {})
      data, _status_code, _headers = mdr_cdashig_version_get_with_http_info(version, opts)
      data
    end

    # Get CDASHIG Product
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [Array<(CdashigProduct, Integer, Hash)>] CdashigProduct data, response status code and response headers
    def mdr_cdashig_version_get_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_get"
      end
      # resource path
      local_var_path = '/mdr/cdashig/{version}'.sub('{' + 'version' + '}', CGI.escape(version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CdashigProduct'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CDASHImplementationGuideCDASHIGApi#mdr_cdashig_version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDASHIG Scenario Field
    # @param version [String] CDISC Library Product Version
    # @param domain [String] CDASHIG Domain Identifier
    # @param scenario [String] CDASHIG Scenario Identifier
    # @param field [String] CDASHIG Field Identifier
    # @param [Hash] opts the optional parameters
    # @return [CdashigScenarioField]
    def mdr_cdashig_version_scenarios_domain_scenario_fields_field_get(version, domain, scenario, field, opts = {})
      data, _status_code, _headers = mdr_cdashig_version_scenarios_domain_scenario_fields_field_get_with_http_info(version, domain, scenario, field, opts)
      data
    end

    # Get CDASHIG Scenario Field
    # @param version [String] CDISC Library Product Version
    # @param domain [String] CDASHIG Domain Identifier
    # @param scenario [String] CDASHIG Scenario Identifier
    # @param field [String] CDASHIG Field Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CdashigScenarioField, Integer, Hash)>] CdashigScenarioField data, response status code and response headers
    def mdr_cdashig_version_scenarios_domain_scenario_fields_field_get_with_http_info(version, domain, scenario, field, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_scenarios_domain_scenario_fields_field_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_scenarios_domain_scenario_fields_field_get"
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_scenarios_domain_scenario_fields_field_get"
      end
      # verify the required parameter 'scenario' is set
      if @api_client.config.client_side_validation && scenario.nil?
        fail ArgumentError, "Missing the required parameter 'scenario' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_scenarios_domain_scenario_fields_field_get"
      end
      # verify the required parameter 'field' is set
      if @api_client.config.client_side_validation && field.nil?
        fail ArgumentError, "Missing the required parameter 'field' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_scenarios_domain_scenario_fields_field_get"
      end
      # resource path
      local_var_path = '/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields/{field}'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'domain' + '}', CGI.escape(domain.to_s)).sub('{' + 'scenario' + '}', CGI.escape(scenario.to_s)).sub('{' + 'field' + '}', CGI.escape(field.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CdashigScenarioField'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_scenarios_domain_scenario_fields_field_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CDASHImplementationGuideCDASHIGApi#mdr_cdashig_version_scenarios_domain_scenario_fields_field_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDASHIG Scenario Field List
    # @param version [String] CDISC Library Product Version
    # @param domain [String] CDASHIG Domain Identifier
    # @param scenario [String] CDASHIG Scenario Identifier
    # @param [Hash] opts the optional parameters
    # @return [CdashigScenarioFields]
    def mdr_cdashig_version_scenarios_domain_scenario_fields_get(version, domain, scenario, opts = {})
      data, _status_code, _headers = mdr_cdashig_version_scenarios_domain_scenario_fields_get_with_http_info(version, domain, scenario, opts)
      data
    end

    # Get CDASHIG Scenario Field List
    # @param version [String] CDISC Library Product Version
    # @param domain [String] CDASHIG Domain Identifier
    # @param scenario [String] CDASHIG Scenario Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CdashigScenarioFields, Integer, Hash)>] CdashigScenarioFields data, response status code and response headers
    def mdr_cdashig_version_scenarios_domain_scenario_fields_get_with_http_info(version, domain, scenario, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_scenarios_domain_scenario_fields_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_scenarios_domain_scenario_fields_get"
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_scenarios_domain_scenario_fields_get"
      end
      # verify the required parameter 'scenario' is set
      if @api_client.config.client_side_validation && scenario.nil?
        fail ArgumentError, "Missing the required parameter 'scenario' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_scenarios_domain_scenario_fields_get"
      end
      # resource path
      local_var_path = '/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'domain' + '}', CGI.escape(domain.to_s)).sub('{' + 'scenario' + '}', CGI.escape(scenario.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CdashigScenarioFields'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_scenarios_domain_scenario_fields_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CDASHImplementationGuideCDASHIGApi#mdr_cdashig_version_scenarios_domain_scenario_fields_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDASHIG Scenario
    # @param version [String] CDISC Library Product Version
    # @param domain [String] CDASHIG Domain Identifier
    # @param scenario [String] CDASHIG Scenario Identifier
    # @param [Hash] opts the optional parameters
    # @return [CdashigScenario]
    def mdr_cdashig_version_scenarios_domain_scenario_get(version, domain, scenario, opts = {})
      data, _status_code, _headers = mdr_cdashig_version_scenarios_domain_scenario_get_with_http_info(version, domain, scenario, opts)
      data
    end

    # Get CDASHIG Scenario
    # @param version [String] CDISC Library Product Version
    # @param domain [String] CDASHIG Domain Identifier
    # @param scenario [String] CDASHIG Scenario Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CdashigScenario, Integer, Hash)>] CdashigScenario data, response status code and response headers
    def mdr_cdashig_version_scenarios_domain_scenario_get_with_http_info(version, domain, scenario, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_scenarios_domain_scenario_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_scenarios_domain_scenario_get"
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_scenarios_domain_scenario_get"
      end
      # verify the required parameter 'scenario' is set
      if @api_client.config.client_side_validation && scenario.nil?
        fail ArgumentError, "Missing the required parameter 'scenario' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_scenarios_domain_scenario_get"
      end
      # resource path
      local_var_path = '/mdr/cdashig/{version}/scenarios/{domain}.{scenario}'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'domain' + '}', CGI.escape(domain.to_s)).sub('{' + 'scenario' + '}', CGI.escape(scenario.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CdashigScenario'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_scenarios_domain_scenario_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CDASHImplementationGuideCDASHIGApi#mdr_cdashig_version_scenarios_domain_scenario_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDASHIG Scenario List
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [CdashigProductScenarios]
    def mdr_cdashig_version_scenarios_get(version, opts = {})
      data, _status_code, _headers = mdr_cdashig_version_scenarios_get_with_http_info(version, opts)
      data
    end

    # Get CDASHIG Scenario List
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [Array<(CdashigProductScenarios, Integer, Hash)>] CdashigProductScenarios data, response status code and response headers
    def mdr_cdashig_version_scenarios_get_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_scenarios_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_scenarios_get"
      end
      # resource path
      local_var_path = '/mdr/cdashig/{version}/scenarios'.sub('{' + 'version' + '}', CGI.escape(version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CdashigProductScenarios'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CDASHImplementationGuideCDASHIGApi.mdr_cdashig_version_scenarios_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CDASHImplementationGuideCDASHIGApi#mdr_cdashig_version_scenarios_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Root CDASHIG Domain Field
    # @param domain [String] CDASHIG Domain Identifier
    # @param field [String] CDASHIG Field Identifier
    # @param [Hash] opts the optional parameters
    # @return [RootCdashigDomainField]
    def mdr_root_cdashig_domains_domain_fields_field_get(domain, field, opts = {})
      data, _status_code, _headers = mdr_root_cdashig_domains_domain_fields_field_get_with_http_info(domain, field, opts)
      data
    end

    # Get Root CDASHIG Domain Field
    # @param domain [String] CDASHIG Domain Identifier
    # @param field [String] CDASHIG Field Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(RootCdashigDomainField, Integer, Hash)>] RootCdashigDomainField data, response status code and response headers
    def mdr_root_cdashig_domains_domain_fields_field_get_with_http_info(domain, field, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CDASHImplementationGuideCDASHIGApi.mdr_root_cdashig_domains_domain_fields_field_get ...'
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling CDASHImplementationGuideCDASHIGApi.mdr_root_cdashig_domains_domain_fields_field_get"
      end
      # verify the required parameter 'field' is set
      if @api_client.config.client_side_validation && field.nil?
        fail ArgumentError, "Missing the required parameter 'field' when calling CDASHImplementationGuideCDASHIGApi.mdr_root_cdashig_domains_domain_fields_field_get"
      end
      # resource path
      local_var_path = '/mdr/root/cdashig/domains/{domain}/fields/{field}'.sub('{' + 'domain' + '}', CGI.escape(domain.to_s)).sub('{' + 'field' + '}', CGI.escape(field.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RootCdashigDomainField'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CDASHImplementationGuideCDASHIGApi.mdr_root_cdashig_domains_domain_fields_field_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CDASHImplementationGuideCDASHIGApi#mdr_root_cdashig_domains_domain_fields_field_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Root CDASHIG Scenario Field
    # @param domain [String] CDASHIG Domain Identifier
    # @param scenario [String] CDASHIG Scenario Identifier
    # @param field [String] CDASHIG Field Identifier
    # @param [Hash] opts the optional parameters
    # @return [RootCdashigScenarioField]
    def mdr_root_cdashig_scenarios_domain_scenario_fields_field_get(domain, scenario, field, opts = {})
      data, _status_code, _headers = mdr_root_cdashig_scenarios_domain_scenario_fields_field_get_with_http_info(domain, scenario, field, opts)
      data
    end

    # Get Root CDASHIG Scenario Field
    # @param domain [String] CDASHIG Domain Identifier
    # @param scenario [String] CDASHIG Scenario Identifier
    # @param field [String] CDASHIG Field Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(RootCdashigScenarioField, Integer, Hash)>] RootCdashigScenarioField data, response status code and response headers
    def mdr_root_cdashig_scenarios_domain_scenario_fields_field_get_with_http_info(domain, scenario, field, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CDASHImplementationGuideCDASHIGApi.mdr_root_cdashig_scenarios_domain_scenario_fields_field_get ...'
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling CDASHImplementationGuideCDASHIGApi.mdr_root_cdashig_scenarios_domain_scenario_fields_field_get"
      end
      # verify the required parameter 'scenario' is set
      if @api_client.config.client_side_validation && scenario.nil?
        fail ArgumentError, "Missing the required parameter 'scenario' when calling CDASHImplementationGuideCDASHIGApi.mdr_root_cdashig_scenarios_domain_scenario_fields_field_get"
      end
      # verify the required parameter 'field' is set
      if @api_client.config.client_side_validation && field.nil?
        fail ArgumentError, "Missing the required parameter 'field' when calling CDASHImplementationGuideCDASHIGApi.mdr_root_cdashig_scenarios_domain_scenario_fields_field_get"
      end
      # resource path
      local_var_path = '/mdr/root/cdashig/scenarios/{domain}.{scenario}/fields/{field}'.sub('{' + 'domain' + '}', CGI.escape(domain.to_s)).sub('{' + 'scenario' + '}', CGI.escape(scenario.to_s)).sub('{' + 'field' + '}', CGI.escape(field.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RootCdashigScenarioField'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"CDASHImplementationGuideCDASHIGApi.mdr_root_cdashig_scenarios_domain_scenario_fields_field_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CDASHImplementationGuideCDASHIGApi#mdr_root_cdashig_scenarios_domain_scenario_fields_field_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

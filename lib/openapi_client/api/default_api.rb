=begin
#CDISC Library API

#REST API Documentation for CDISC Library in production server

The version of the OpenAPI document: 1.1.0
Contact: cdisc_library_support@cdisc.org
Generated by: https://openapi-generator.tech
Generator version: 7.16.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Information About CDISC Library
    # @param [Hash] opts the optional parameters
    # @return [About]
    def mdr_about_get(opts = {})
      data, _status_code, _headers = mdr_about_get_with_http_info(opts)
      data
    end

    # Get Information About CDISC Library
    # @param [Hash] opts the optional parameters
    # @return [Array<(About, Integer, Hash)>] About data, response status code and response headers
    def mdr_about_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mdr_about_get ...'
      end
      # resource path
      local_var_path = '/mdr/about'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'About'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.mdr_about_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mdr_about_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDISC Library Last Updated
    # @param [Hash] opts the optional parameters
    # @return [Lastupdated]
    def mdr_lastupdated_get(opts = {})
      data, _status_code, _headers = mdr_lastupdated_get_with_http_info(opts)
      data
    end

    # Get CDISC Library Last Updated
    # @param [Hash] opts the optional parameters
    # @return [Array<(Lastupdated, Integer, Hash)>] Lastupdated data, response status code and response headers
    def mdr_lastupdated_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mdr_lastupdated_get ...'
      end
      # resource path
      local_var_path = '/mdr/lastupdated'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Lastupdated'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.mdr_lastupdated_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mdr_lastupdated_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDISC Library Product Group Data Analysis
    # @param [Hash] opts the optional parameters
    # @return [ProductgroupDataAnalysis]
    def mdr_products_data_analysis_get(opts = {})
      data, _status_code, _headers = mdr_products_data_analysis_get_with_http_info(opts)
      data
    end

    # Get CDISC Library Product Group Data Analysis
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProductgroupDataAnalysis, Integer, Hash)>] ProductgroupDataAnalysis data, response status code and response headers
    def mdr_products_data_analysis_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mdr_products_data_analysis_get ...'
      end
      # resource path
      local_var_path = '/mdr/products/DataAnalysis'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductgroupDataAnalysis'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.mdr_products_data_analysis_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mdr_products_data_analysis_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDISC Library Product Group Data Collection
    # @param [Hash] opts the optional parameters
    # @return [ProductgroupDataCollection]
    def mdr_products_data_collection_get(opts = {})
      data, _status_code, _headers = mdr_products_data_collection_get_with_http_info(opts)
      data
    end

    # Get CDISC Library Product Group Data Collection
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProductgroupDataCollection, Integer, Hash)>] ProductgroupDataCollection data, response status code and response headers
    def mdr_products_data_collection_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mdr_products_data_collection_get ...'
      end
      # resource path
      local_var_path = '/mdr/products/DataCollection'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductgroupDataCollection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.mdr_products_data_collection_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mdr_products_data_collection_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDISC Library Product Group Data Tabulation
    # @param [Hash] opts the optional parameters
    # @return [ProductgroupDataTabulation]
    def mdr_products_data_tabulation_get(opts = {})
      data, _status_code, _headers = mdr_products_data_tabulation_get_with_http_info(opts)
      data
    end

    # Get CDISC Library Product Group Data Tabulation
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProductgroupDataTabulation, Integer, Hash)>] ProductgroupDataTabulation data, response status code and response headers
    def mdr_products_data_tabulation_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mdr_products_data_tabulation_get ...'
      end
      # resource path
      local_var_path = '/mdr/products/DataTabulation'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductgroupDataTabulation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.mdr_products_data_tabulation_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mdr_products_data_tabulation_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDISC Library Products
    # @param [Hash] opts the optional parameters
    # @return [Products]
    def mdr_products_get(opts = {})
      data, _status_code, _headers = mdr_products_get_with_http_info(opts)
      data
    end

    # Get CDISC Library Products
    # @param [Hash] opts the optional parameters
    # @return [Array<(Products, Integer, Hash)>] Products data, response status code and response headers
    def mdr_products_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mdr_products_get ...'
      end
      # resource path
      local_var_path = '/mdr/products'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Products'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.mdr_products_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mdr_products_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDISC Library Product Group QRS
    # @param [Hash] opts the optional parameters
    # @return [ProductgroupQrs]
    def mdr_products_measures_get(opts = {})
      data, _status_code, _headers = mdr_products_measures_get_with_http_info(opts)
      data
    end

    # Get CDISC Library Product Group QRS
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProductgroupQrs, Integer, Hash)>] ProductgroupQrs data, response status code and response headers
    def mdr_products_measures_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mdr_products_measures_get ...'
      end
      # resource path
      local_var_path = '/mdr/products/Measures'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductgroupQrs'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.mdr_products_measures_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mdr_products_measures_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDISC Library Product Group Terminology
    # @param [Hash] opts the optional parameters
    # @return [ProductgroupTerminology]
    def mdr_products_terminology_get(opts = {})
      data, _status_code, _headers = mdr_products_terminology_get_with_http_info(opts)
      data
    end

    # Get CDISC Library Product Group Terminology
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProductgroupTerminology, Integer, Hash)>] ProductgroupTerminology data, response status code and response headers
    def mdr_products_terminology_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.mdr_products_terminology_get ...'
      end
      # resource path
      local_var_path = '/mdr/products/Terminology'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProductgroupTerminology'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"DefaultApi.mdr_products_terminology_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#mdr_products_terminology_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

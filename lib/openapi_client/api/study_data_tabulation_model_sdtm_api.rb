=begin
#CDISC Library API

#REST API Documentation for CDISC Library in production server

The version of the OpenAPI document: 1.1.0
Contact: cdisc_library_support@cdisc.org
Generated by: https://openapi-generator.tech
Generator version: 7.16.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class StudyDataTabulationModelSDTMApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Root of SDTM Class Variable
    # @param _class [String] SDTM Class Identifier
    # @param var [String] SDTM Variable Identifier
    # @param [Hash] opts the optional parameters
    # @return [RootSdtmClassVariable]
    def mdr_root_sdtm_classes_class_variables_var_get(_class, var, opts = {})
      data, _status_code, _headers = mdr_root_sdtm_classes_class_variables_var_get_with_http_info(_class, var, opts)
      data
    end

    # Get Root of SDTM Class Variable
    # @param _class [String] SDTM Class Identifier
    # @param var [String] SDTM Variable Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(RootSdtmClassVariable, Integer, Hash)>] RootSdtmClassVariable data, response status code and response headers
    def mdr_root_sdtm_classes_class_variables_var_get_with_http_info(_class, var, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StudyDataTabulationModelSDTMApi.mdr_root_sdtm_classes_class_variables_var_get ...'
      end
      # verify the required parameter '_class' is set
      if @api_client.config.client_side_validation && _class.nil?
        fail ArgumentError, "Missing the required parameter '_class' when calling StudyDataTabulationModelSDTMApi.mdr_root_sdtm_classes_class_variables_var_get"
      end
      # verify the required parameter 'var' is set
      if @api_client.config.client_side_validation && var.nil?
        fail ArgumentError, "Missing the required parameter 'var' when calling StudyDataTabulationModelSDTMApi.mdr_root_sdtm_classes_class_variables_var_get"
      end
      # resource path
      local_var_path = '/mdr/root/sdtm/classes/{class}/variables/{var}'.sub('{' + 'class' + '}', CGI.escape(_class.to_s)).sub('{' + 'var' + '}', CGI.escape(var.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RootSdtmClassVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StudyDataTabulationModelSDTMApi.mdr_root_sdtm_classes_class_variables_var_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StudyDataTabulationModelSDTMApi#mdr_root_sdtm_classes_class_variables_var_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Root SDTM Dataset Variable
    # @param dataset [String] SDTM Dataset Identifier
    # @param var [String] SDTM Variable Identifier
    # @param [Hash] opts the optional parameters
    # @return [RootSdtmDatasetVariable]
    def mdr_root_sdtm_datasets_dataset_variables_var_get(dataset, var, opts = {})
      data, _status_code, _headers = mdr_root_sdtm_datasets_dataset_variables_var_get_with_http_info(dataset, var, opts)
      data
    end

    # Get Root SDTM Dataset Variable
    # @param dataset [String] SDTM Dataset Identifier
    # @param var [String] SDTM Variable Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(RootSdtmDatasetVariable, Integer, Hash)>] RootSdtmDatasetVariable data, response status code and response headers
    def mdr_root_sdtm_datasets_dataset_variables_var_get_with_http_info(dataset, var, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StudyDataTabulationModelSDTMApi.mdr_root_sdtm_datasets_dataset_variables_var_get ...'
      end
      # verify the required parameter 'dataset' is set
      if @api_client.config.client_side_validation && dataset.nil?
        fail ArgumentError, "Missing the required parameter 'dataset' when calling StudyDataTabulationModelSDTMApi.mdr_root_sdtm_datasets_dataset_variables_var_get"
      end
      # verify the required parameter 'var' is set
      if @api_client.config.client_side_validation && var.nil?
        fail ArgumentError, "Missing the required parameter 'var' when calling StudyDataTabulationModelSDTMApi.mdr_root_sdtm_datasets_dataset_variables_var_get"
      end
      # resource path
      local_var_path = '/mdr/root/sdtm/datasets/{dataset}/variables/{var}'.sub('{' + 'dataset' + '}', CGI.escape(dataset.to_s)).sub('{' + 'var' + '}', CGI.escape(var.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RootSdtmDatasetVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StudyDataTabulationModelSDTMApi.mdr_root_sdtm_datasets_dataset_variables_var_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StudyDataTabulationModelSDTMApi#mdr_root_sdtm_datasets_dataset_variables_var_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SDTM Class Dataset List
    # @param version [String] CDISC Library Product Version
    # @param _class [String] SDTM Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [SdtmClassDatasets]
    def mdr_sdtm_version_classes_class_datasets_get(version, _class, opts = {})
      data, _status_code, _headers = mdr_sdtm_version_classes_class_datasets_get_with_http_info(version, _class, opts)
      data
    end

    # Get SDTM Class Dataset List
    # @param version [String] CDISC Library Product Version
    # @param _class [String] SDTM Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(SdtmClassDatasets, Integer, Hash)>] SdtmClassDatasets data, response status code and response headers
    def mdr_sdtm_version_classes_class_datasets_get_with_http_info(version, _class, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StudyDataTabulationModelSDTMApi.mdr_sdtm_version_classes_class_datasets_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling StudyDataTabulationModelSDTMApi.mdr_sdtm_version_classes_class_datasets_get"
      end
      # verify the required parameter '_class' is set
      if @api_client.config.client_side_validation && _class.nil?
        fail ArgumentError, "Missing the required parameter '_class' when calling StudyDataTabulationModelSDTMApi.mdr_sdtm_version_classes_class_datasets_get"
      end
      # resource path
      local_var_path = '/mdr/sdtm/{version}/classes/{class}/datasets'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'class' + '}', CGI.escape(_class.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SdtmClassDatasets'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StudyDataTabulationModelSDTMApi.mdr_sdtm_version_classes_class_datasets_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StudyDataTabulationModelSDTMApi#mdr_sdtm_version_classes_class_datasets_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SDTM Class
    # @param version [String] CDISC Library Product Version
    # @param _class [String] SDTM Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [SdtmClass]
    def mdr_sdtm_version_classes_class_get(version, _class, opts = {})
      data, _status_code, _headers = mdr_sdtm_version_classes_class_get_with_http_info(version, _class, opts)
      data
    end

    # Get SDTM Class
    # @param version [String] CDISC Library Product Version
    # @param _class [String] SDTM Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(SdtmClass, Integer, Hash)>] SdtmClass data, response status code and response headers
    def mdr_sdtm_version_classes_class_get_with_http_info(version, _class, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StudyDataTabulationModelSDTMApi.mdr_sdtm_version_classes_class_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling StudyDataTabulationModelSDTMApi.mdr_sdtm_version_classes_class_get"
      end
      # verify the required parameter '_class' is set
      if @api_client.config.client_side_validation && _class.nil?
        fail ArgumentError, "Missing the required parameter '_class' when calling StudyDataTabulationModelSDTMApi.mdr_sdtm_version_classes_class_get"
      end
      # resource path
      local_var_path = '/mdr/sdtm/{version}/classes/{class}'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'class' + '}', CGI.escape(_class.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SdtmClass'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StudyDataTabulationModelSDTMApi.mdr_sdtm_version_classes_class_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StudyDataTabulationModelSDTMApi#mdr_sdtm_version_classes_class_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SDTM Class Variable List
    # @param version [String] CDISC Library Product Version
    # @param _class [String] SDTM Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [SdtmClassVariables]
    def mdr_sdtm_version_classes_class_variables_get(version, _class, opts = {})
      data, _status_code, _headers = mdr_sdtm_version_classes_class_variables_get_with_http_info(version, _class, opts)
      data
    end

    # Get SDTM Class Variable List
    # @param version [String] CDISC Library Product Version
    # @param _class [String] SDTM Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(SdtmClassVariables, Integer, Hash)>] SdtmClassVariables data, response status code and response headers
    def mdr_sdtm_version_classes_class_variables_get_with_http_info(version, _class, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StudyDataTabulationModelSDTMApi.mdr_sdtm_version_classes_class_variables_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling StudyDataTabulationModelSDTMApi.mdr_sdtm_version_classes_class_variables_get"
      end
      # verify the required parameter '_class' is set
      if @api_client.config.client_side_validation && _class.nil?
        fail ArgumentError, "Missing the required parameter '_class' when calling StudyDataTabulationModelSDTMApi.mdr_sdtm_version_classes_class_variables_get"
      end
      # resource path
      local_var_path = '/mdr/sdtm/{version}/classes/{class}/variables'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'class' + '}', CGI.escape(_class.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SdtmClassVariables'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StudyDataTabulationModelSDTMApi.mdr_sdtm_version_classes_class_variables_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StudyDataTabulationModelSDTMApi#mdr_sdtm_version_classes_class_variables_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SDTM Class Variable
    # @param version [String] CDISC Library Product Version
    # @param _class [String] SDTM Class Identifier
    # @param var [String] SDTM Variable Identifier
    # @param [Hash] opts the optional parameters
    # @return [SdtmClassVariable]
    def mdr_sdtm_version_classes_class_variables_var_get(version, _class, var, opts = {})
      data, _status_code, _headers = mdr_sdtm_version_classes_class_variables_var_get_with_http_info(version, _class, var, opts)
      data
    end

    # Get SDTM Class Variable
    # @param version [String] CDISC Library Product Version
    # @param _class [String] SDTM Class Identifier
    # @param var [String] SDTM Variable Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(SdtmClassVariable, Integer, Hash)>] SdtmClassVariable data, response status code and response headers
    def mdr_sdtm_version_classes_class_variables_var_get_with_http_info(version, _class, var, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StudyDataTabulationModelSDTMApi.mdr_sdtm_version_classes_class_variables_var_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling StudyDataTabulationModelSDTMApi.mdr_sdtm_version_classes_class_variables_var_get"
      end
      # verify the required parameter '_class' is set
      if @api_client.config.client_side_validation && _class.nil?
        fail ArgumentError, "Missing the required parameter '_class' when calling StudyDataTabulationModelSDTMApi.mdr_sdtm_version_classes_class_variables_var_get"
      end
      # verify the required parameter 'var' is set
      if @api_client.config.client_side_validation && var.nil?
        fail ArgumentError, "Missing the required parameter 'var' when calling StudyDataTabulationModelSDTMApi.mdr_sdtm_version_classes_class_variables_var_get"
      end
      # resource path
      local_var_path = '/mdr/sdtm/{version}/classes/{class}/variables/{var}'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'class' + '}', CGI.escape(_class.to_s)).sub('{' + 'var' + '}', CGI.escape(var.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SdtmClassVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StudyDataTabulationModelSDTMApi.mdr_sdtm_version_classes_class_variables_var_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StudyDataTabulationModelSDTMApi#mdr_sdtm_version_classes_class_variables_var_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SDTM Class List
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [SdtmClasses]
    def mdr_sdtm_version_classes_get(version, opts = {})
      data, _status_code, _headers = mdr_sdtm_version_classes_get_with_http_info(version, opts)
      data
    end

    # Get SDTM Class List
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [Array<(SdtmClasses, Integer, Hash)>] SdtmClasses data, response status code and response headers
    def mdr_sdtm_version_classes_get_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StudyDataTabulationModelSDTMApi.mdr_sdtm_version_classes_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling StudyDataTabulationModelSDTMApi.mdr_sdtm_version_classes_get"
      end
      # resource path
      local_var_path = '/mdr/sdtm/{version}/classes'.sub('{' + 'version' + '}', CGI.escape(version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SdtmClasses'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StudyDataTabulationModelSDTMApi.mdr_sdtm_version_classes_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StudyDataTabulationModelSDTMApi#mdr_sdtm_version_classes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SDTM Dataset
    # @param version [String] CDISC Library Product Version
    # @param dataset [String] SDTM Dataset Identifier
    # @param [Hash] opts the optional parameters
    # @return [SdtmDataset]
    def mdr_sdtm_version_datasets_dataset_get(version, dataset, opts = {})
      data, _status_code, _headers = mdr_sdtm_version_datasets_dataset_get_with_http_info(version, dataset, opts)
      data
    end

    # Get SDTM Dataset
    # @param version [String] CDISC Library Product Version
    # @param dataset [String] SDTM Dataset Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(SdtmDataset, Integer, Hash)>] SdtmDataset data, response status code and response headers
    def mdr_sdtm_version_datasets_dataset_get_with_http_info(version, dataset, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StudyDataTabulationModelSDTMApi.mdr_sdtm_version_datasets_dataset_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling StudyDataTabulationModelSDTMApi.mdr_sdtm_version_datasets_dataset_get"
      end
      # verify the required parameter 'dataset' is set
      if @api_client.config.client_side_validation && dataset.nil?
        fail ArgumentError, "Missing the required parameter 'dataset' when calling StudyDataTabulationModelSDTMApi.mdr_sdtm_version_datasets_dataset_get"
      end
      # resource path
      local_var_path = '/mdr/sdtm/{version}/datasets/{dataset}'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'dataset' + '}', CGI.escape(dataset.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SdtmDataset'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StudyDataTabulationModelSDTMApi.mdr_sdtm_version_datasets_dataset_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StudyDataTabulationModelSDTMApi#mdr_sdtm_version_datasets_dataset_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SDTM Dataset Variable List
    # @param version [String] CDISC Library Product Version
    # @param dataset [String] SDTM Dataset Identifier
    # @param [Hash] opts the optional parameters
    # @return [SdtmDatasetVariables]
    def mdr_sdtm_version_datasets_dataset_variables_get(version, dataset, opts = {})
      data, _status_code, _headers = mdr_sdtm_version_datasets_dataset_variables_get_with_http_info(version, dataset, opts)
      data
    end

    # Get SDTM Dataset Variable List
    # @param version [String] CDISC Library Product Version
    # @param dataset [String] SDTM Dataset Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(SdtmDatasetVariables, Integer, Hash)>] SdtmDatasetVariables data, response status code and response headers
    def mdr_sdtm_version_datasets_dataset_variables_get_with_http_info(version, dataset, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StudyDataTabulationModelSDTMApi.mdr_sdtm_version_datasets_dataset_variables_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling StudyDataTabulationModelSDTMApi.mdr_sdtm_version_datasets_dataset_variables_get"
      end
      # verify the required parameter 'dataset' is set
      if @api_client.config.client_side_validation && dataset.nil?
        fail ArgumentError, "Missing the required parameter 'dataset' when calling StudyDataTabulationModelSDTMApi.mdr_sdtm_version_datasets_dataset_variables_get"
      end
      # resource path
      local_var_path = '/mdr/sdtm/{version}/datasets/{dataset}/variables'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'dataset' + '}', CGI.escape(dataset.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SdtmDatasetVariables'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StudyDataTabulationModelSDTMApi.mdr_sdtm_version_datasets_dataset_variables_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StudyDataTabulationModelSDTMApi#mdr_sdtm_version_datasets_dataset_variables_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SDTM Dataset Variable
    # @param version [String] CDISC Library Product Version
    # @param dataset [String] SDTM Dataset Identifier
    # @param var [String] SDTM Variable Identifier
    # @param [Hash] opts the optional parameters
    # @return [SdtmDatasetVariable]
    def mdr_sdtm_version_datasets_dataset_variables_var_get(version, dataset, var, opts = {})
      data, _status_code, _headers = mdr_sdtm_version_datasets_dataset_variables_var_get_with_http_info(version, dataset, var, opts)
      data
    end

    # Get SDTM Dataset Variable
    # @param version [String] CDISC Library Product Version
    # @param dataset [String] SDTM Dataset Identifier
    # @param var [String] SDTM Variable Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(SdtmDatasetVariable, Integer, Hash)>] SdtmDatasetVariable data, response status code and response headers
    def mdr_sdtm_version_datasets_dataset_variables_var_get_with_http_info(version, dataset, var, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StudyDataTabulationModelSDTMApi.mdr_sdtm_version_datasets_dataset_variables_var_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling StudyDataTabulationModelSDTMApi.mdr_sdtm_version_datasets_dataset_variables_var_get"
      end
      # verify the required parameter 'dataset' is set
      if @api_client.config.client_side_validation && dataset.nil?
        fail ArgumentError, "Missing the required parameter 'dataset' when calling StudyDataTabulationModelSDTMApi.mdr_sdtm_version_datasets_dataset_variables_var_get"
      end
      # verify the required parameter 'var' is set
      if @api_client.config.client_side_validation && var.nil?
        fail ArgumentError, "Missing the required parameter 'var' when calling StudyDataTabulationModelSDTMApi.mdr_sdtm_version_datasets_dataset_variables_var_get"
      end
      # resource path
      local_var_path = '/mdr/sdtm/{version}/datasets/{dataset}/variables/{var}'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'dataset' + '}', CGI.escape(dataset.to_s)).sub('{' + 'var' + '}', CGI.escape(var.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SdtmDatasetVariable'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StudyDataTabulationModelSDTMApi.mdr_sdtm_version_datasets_dataset_variables_var_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StudyDataTabulationModelSDTMApi#mdr_sdtm_version_datasets_dataset_variables_var_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SDTM Dataset List
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [SdtmDatasets]
    def mdr_sdtm_version_datasets_get(version, opts = {})
      data, _status_code, _headers = mdr_sdtm_version_datasets_get_with_http_info(version, opts)
      data
    end

    # Get SDTM Dataset List
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [Array<(SdtmDatasets, Integer, Hash)>] SdtmDatasets data, response status code and response headers
    def mdr_sdtm_version_datasets_get_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StudyDataTabulationModelSDTMApi.mdr_sdtm_version_datasets_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling StudyDataTabulationModelSDTMApi.mdr_sdtm_version_datasets_get"
      end
      # resource path
      local_var_path = '/mdr/sdtm/{version}/datasets'.sub('{' + 'version' + '}', CGI.escape(version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/csv']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SdtmDatasets'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StudyDataTabulationModelSDTMApi.mdr_sdtm_version_datasets_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StudyDataTabulationModelSDTMApi#mdr_sdtm_version_datasets_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SDTM product
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [SdtmProduct]
    def mdr_sdtm_version_get(version, opts = {})
      data, _status_code, _headers = mdr_sdtm_version_get_with_http_info(version, opts)
      data
    end

    # Get SDTM product
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [Array<(SdtmProduct, Integer, Hash)>] SdtmProduct data, response status code and response headers
    def mdr_sdtm_version_get_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StudyDataTabulationModelSDTMApi.mdr_sdtm_version_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling StudyDataTabulationModelSDTMApi.mdr_sdtm_version_get"
      end
      # resource path
      local_var_path = '/mdr/sdtm/{version}'.sub('{' + 'version' + '}', CGI.escape(version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SdtmProduct'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"StudyDataTabulationModelSDTMApi.mdr_sdtm_version_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StudyDataTabulationModelSDTMApi#mdr_sdtm_version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

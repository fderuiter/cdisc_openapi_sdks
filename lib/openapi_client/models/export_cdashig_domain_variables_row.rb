=begin
#CDISC Library API

#REST API Documentation for CDISC Library in production server

The version of the OpenAPI document: 1.1.0
Contact: cdisc_library_support@cdisc.org
Generated by: https://openapi-generator.tech
Generator version: 7.16.0-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  class ExportCdashigDomainVariablesRow
    attr_accessor :version

    attr_accessor :_class

    attr_accessor :domain

    attr_accessor :data_collection_scenario

    attr_accessor :variable_order

    attr_accessor :cdashig_variable

    attr_accessor :cdashig_variable_label

    attr_accessor :draft_cdashig_definition

    attr_accessor :question_text

    attr_accessor :prompt

    attr_accessor :type

    attr_accessor :cdashig_core

    attr_accessor :case_report_form_completion_instructions

    attr_accessor :sdtmig_target

    attr_accessor :mapping_instructions

    attr_accessor :controlled_terminology_codelist_name

    attr_accessor :implementation_notes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'version' => :'Version',
        :'_class' => :'Class',
        :'domain' => :'Domain',
        :'data_collection_scenario' => :'Data Collection Scenario',
        :'variable_order' => :'Variable Order',
        :'cdashig_variable' => :'CDASHIG Variable',
        :'cdashig_variable_label' => :'CDASHIG Variable Label',
        :'draft_cdashig_definition' => :'DRAFT CDASHIG Definition',
        :'question_text' => :'Question Text',
        :'prompt' => :'Prompt',
        :'type' => :'Type',
        :'cdashig_core' => :'CDASHIG Core',
        :'case_report_form_completion_instructions' => :'Case Report Form Completion Instructions',
        :'sdtmig_target' => :'SDTMIG Target',
        :'mapping_instructions' => :'Mapping Instructions',
        :'controlled_terminology_codelist_name' => :'Controlled Terminology Codelist Name',
        :'implementation_notes' => :'Implementation Notes'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'version' => :'String',
        :'_class' => :'String',
        :'domain' => :'String',
        :'data_collection_scenario' => :'String',
        :'variable_order' => :'String',
        :'cdashig_variable' => :'String',
        :'cdashig_variable_label' => :'String',
        :'draft_cdashig_definition' => :'String',
        :'question_text' => :'String',
        :'prompt' => :'String',
        :'type' => :'String',
        :'cdashig_core' => :'String',
        :'case_report_form_completion_instructions' => :'String',
        :'sdtmig_target' => :'Array<String>',
        :'mapping_instructions' => :'String',
        :'controlled_terminology_codelist_name' => :'String',
        :'implementation_notes' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ExportCdashigDomainVariablesRow` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ExportCdashigDomainVariablesRow`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      end

      if attributes.key?(:'_class')
        self._class = attributes[:'_class']
      end

      if attributes.key?(:'domain')
        self.domain = attributes[:'domain']
      end

      if attributes.key?(:'data_collection_scenario')
        self.data_collection_scenario = attributes[:'data_collection_scenario']
      end

      if attributes.key?(:'variable_order')
        self.variable_order = attributes[:'variable_order']
      end

      if attributes.key?(:'cdashig_variable')
        self.cdashig_variable = attributes[:'cdashig_variable']
      end

      if attributes.key?(:'cdashig_variable_label')
        self.cdashig_variable_label = attributes[:'cdashig_variable_label']
      end

      if attributes.key?(:'draft_cdashig_definition')
        self.draft_cdashig_definition = attributes[:'draft_cdashig_definition']
      end

      if attributes.key?(:'question_text')
        self.question_text = attributes[:'question_text']
      end

      if attributes.key?(:'prompt')
        self.prompt = attributes[:'prompt']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'cdashig_core')
        self.cdashig_core = attributes[:'cdashig_core']
      end

      if attributes.key?(:'case_report_form_completion_instructions')
        self.case_report_form_completion_instructions = attributes[:'case_report_form_completion_instructions']
      end

      if attributes.key?(:'sdtmig_target')
        if (value = attributes[:'sdtmig_target']).is_a?(Array)
          self.sdtmig_target = value
        end
      end

      if attributes.key?(:'mapping_instructions')
        self.mapping_instructions = attributes[:'mapping_instructions']
      end

      if attributes.key?(:'controlled_terminology_codelist_name')
        self.controlled_terminology_codelist_name = attributes[:'controlled_terminology_codelist_name']
      end

      if attributes.key?(:'implementation_notes')
        self.implementation_notes = attributes[:'implementation_notes']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          version == o.version &&
          _class == o._class &&
          domain == o.domain &&
          data_collection_scenario == o.data_collection_scenario &&
          variable_order == o.variable_order &&
          cdashig_variable == o.cdashig_variable &&
          cdashig_variable_label == o.cdashig_variable_label &&
          draft_cdashig_definition == o.draft_cdashig_definition &&
          question_text == o.question_text &&
          prompt == o.prompt &&
          type == o.type &&
          cdashig_core == o.cdashig_core &&
          case_report_form_completion_instructions == o.case_report_form_completion_instructions &&
          sdtmig_target == o.sdtmig_target &&
          mapping_instructions == o.mapping_instructions &&
          controlled_terminology_codelist_name == o.controlled_terminology_codelist_name &&
          implementation_notes == o.implementation_notes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [version, _class, domain, data_collection_scenario, variable_order, cdashig_variable, cdashig_variable_label, draft_cdashig_definition, question_text, prompt, type, cdashig_core, case_report_form_completion_instructions, sdtmig_target, mapping_instructions, controlled_terminology_codelist_name, implementation_notes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end

/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  QrsResponsegroups,
  QrsResponsegroup,
  QrsItems,
  QrsItem,
  QrsProduct,
} from './models';

/**
 * mdrQrsMeasureVersionGet - parameters interface
 */
export interface IMdrQrsMeasureVersionGetParams {
  measure: string;
  version: string;
}

/**
 * mdrQrsMeasureVersionItemsGet - parameters interface
 */
export interface IMdrQrsMeasureVersionItemsGetParams {
  measure: string;
  version: string;
}

/**
 * mdrQrsMeasureVersionItemsItemGet - parameters interface
 */
export interface IMdrQrsMeasureVersionItemsItemGetParams {
  measure: string;
  version: string;
  item: string;
}

/**
 * mdrQrsMeasureVersionResponsegroupsGet - parameters interface
 */
export interface IMdrQrsMeasureVersionResponsegroupsGetParams {
  measure: string;
  version: string;
}

/**
 * mdrQrsMeasureVersionResponsegroupsResponsegroupGet - parameters interface
 */
export interface IMdrQrsMeasureVersionResponsegroupsResponsegroupGetParams {
  measure: string;
  version: string;
  responsegroup: string;
}

/**
 * MeasuresApi - API class
 */
@autoinject()
export class MeasuresApi extends Api {

  /**
   * Creates a new MeasuresApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get QRS Product
   * @param params.measure QRS Measure Identifier
   * @param params.version CDISC Library Product Version
   */
  async mdrQrsMeasureVersionGet(params: IMdrQrsMeasureVersionGetParams): Promise<QrsProduct> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrQrsMeasureVersionGet', params, 'measure');
    this.ensureParamIsSet('mdrQrsMeasureVersionGet', params, 'version');

    // Create URL to call
    const url = `${this.basePath}/mdr/qrs/{measure}/{version}`
      .replace(`{${'measure'}}`, encodeURIComponent(`${params['measure']}`))
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get QRS Item List
   * @param params.measure QRS Measure Identifier
   * @param params.version CDISC Library Product Version
   */
  async mdrQrsMeasureVersionItemsGet(params: IMdrQrsMeasureVersionItemsGetParams): Promise<QrsItems> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrQrsMeasureVersionItemsGet', params, 'measure');
    this.ensureParamIsSet('mdrQrsMeasureVersionItemsGet', params, 'version');

    // Create URL to call
    const url = `${this.basePath}/mdr/qrs/{measure}/{version}/items`
      .replace(`{${'measure'}}`, encodeURIComponent(`${params['measure']}`))
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get QRS Item
   * @param params.measure QRS Measure Identifier
   * @param params.version CDISC Library Product Version
   * @param params.item QRS Measure Item Identifier
   */
  async mdrQrsMeasureVersionItemsItemGet(params: IMdrQrsMeasureVersionItemsItemGetParams): Promise<QrsItem> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrQrsMeasureVersionItemsItemGet', params, 'measure');
    this.ensureParamIsSet('mdrQrsMeasureVersionItemsItemGet', params, 'version');
    this.ensureParamIsSet('mdrQrsMeasureVersionItemsItemGet', params, 'item');

    // Create URL to call
    const url = `${this.basePath}/mdr/qrs/{measure}/{version}/items/{item}`
      .replace(`{${'measure'}}`, encodeURIComponent(`${params['measure']}`))
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'item'}}`, encodeURIComponent(`${params['item']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get QRS Response Group List
   * @param params.measure QRS Measure Identifier
   * @param params.version CDISC Library Product Version
   */
  async mdrQrsMeasureVersionResponsegroupsGet(params: IMdrQrsMeasureVersionResponsegroupsGetParams): Promise<QrsResponsegroups> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrQrsMeasureVersionResponsegroupsGet', params, 'measure');
    this.ensureParamIsSet('mdrQrsMeasureVersionResponsegroupsGet', params, 'version');

    // Create URL to call
    const url = `${this.basePath}/mdr/qrs/{measure}/{version}/responsegroups`
      .replace(`{${'measure'}}`, encodeURIComponent(`${params['measure']}`))
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get QRS Response Group
   * @param params.measure QRS Measure Identifier
   * @param params.version CDISC Library Product Version
   * @param params.responsegroup QRS Measure\&#39;s Response Group Identifier
   */
  async mdrQrsMeasureVersionResponsegroupsResponsegroupGet(params: IMdrQrsMeasureVersionResponsegroupsResponsegroupGetParams): Promise<QrsResponsegroup> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrQrsMeasureVersionResponsegroupsResponsegroupGet', params, 'measure');
    this.ensureParamIsSet('mdrQrsMeasureVersionResponsegroupsResponsegroupGet', params, 'version');
    this.ensureParamIsSet('mdrQrsMeasureVersionResponsegroupsResponsegroupGet', params, 'responsegroup');

    // Create URL to call
    const url = `${this.basePath}/mdr/qrs/{measure}/{version}/responsegroups/{responsegroup}`
      .replace(`{${'measure'}}`, encodeURIComponent(`${params['measure']}`))
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'responsegroup'}}`, encodeURIComponent(`${params['responsegroup']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}


/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RootCdashDomainField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RootCdashDomainField{}

// RootCdashDomainField struct for RootCdashDomainField
type RootCdashDomainField struct {
	Links *RootCdashDomainFieldLinks `json:"_links,omitempty"`
}

// NewRootCdashDomainField instantiates a new RootCdashDomainField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRootCdashDomainField() *RootCdashDomainField {
	this := RootCdashDomainField{}
	return &this
}

// NewRootCdashDomainFieldWithDefaults instantiates a new RootCdashDomainField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRootCdashDomainFieldWithDefaults() *RootCdashDomainField {
	this := RootCdashDomainField{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *RootCdashDomainField) GetLinks() RootCdashDomainFieldLinks {
	if o == nil || IsNil(o.Links) {
		var ret RootCdashDomainFieldLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RootCdashDomainField) GetLinksOk() (*RootCdashDomainFieldLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *RootCdashDomainField) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given RootCdashDomainFieldLinks and assigns it to the Links field.
func (o *RootCdashDomainField) SetLinks(v RootCdashDomainFieldLinks) {
	o.Links = &v
}

func (o RootCdashDomainField) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RootCdashDomainField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableRootCdashDomainField struct {
	value *RootCdashDomainField
	isSet bool
}

func (v NullableRootCdashDomainField) Get() *RootCdashDomainField {
	return v.value
}

func (v *NullableRootCdashDomainField) Set(val *RootCdashDomainField) {
	v.value = val
	v.isSet = true
}

func (v NullableRootCdashDomainField) IsSet() bool {
	return v.isSet
}

func (v *NullableRootCdashDomainField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRootCdashDomainField(val *RootCdashDomainField) *NullableRootCdashDomainField {
	return &NullableRootCdashDomainField{value: val, isSet: true}
}

func (v NullableRootCdashDomainField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRootCdashDomainField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



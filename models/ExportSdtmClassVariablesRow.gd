extends Resource
class_name ExportSdtmClassVariablesRow

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# ExportSdtmClassVariablesRow Model


# Required: False
# isArray: false
@export var Version: String = "":
	set(value):
		__Version__was__set = true
		Version = value
var __Version__was__set := false

# Required: False
# isArray: false
@export var Variable Order: String = "":
	set(value):
		__Variable Order__was__set = true
		Variable Order = value
var __Variable Order__was__set := false

# Required: False
# isArray: false
@export var Class: String = "":
	set(value):
		__Class__was__set = true
		Class = value
var __Class__was__set := false

# Required: False
# isArray: false
@export var Dataset Name: String = "":
	set(value):
		__Dataset Name__was__set = true
		Dataset Name = value
var __Dataset Name__was__set := false

# Required: False
# isArray: false
@export var Variable Name: String = "":
	set(value):
		__Variable Name__was__set = true
		Variable Name = value
var __Variable Name__was__set := false

# Required: False
# isArray: false
@export var Variable Label: String = "":
	set(value):
		__Variable Label__was__set = true
		Variable Label = value
var __Variable Label__was__set := false

# Required: False
# isArray: false
@export var Type: String = "":
	set(value):
		__Type__was__set = true
		Type = value
var __Type__was__set := false

# Required: False
# isArray: false
@export var Controlled TermsComma Codelist or Format: String = "":
	set(value):
		__Controlled TermsComma Codelist or Format__was__set = true
		Controlled TermsComma Codelist or Format = value
var __Controlled TermsComma Codelist or Format__was__set := false

# Required: False
# isArray: false
@export var Role: String = "":
	set(value):
		__Role__was__set = true
		Role = value
var __Role__was__set := false

# Required: False
# isArray: false
@export var Role Description: String = "":
	set(value):
		__Role Description__was__set = true
		Role Description = value
var __Role Description__was__set := false

# Required: False
# isArray: false
@export var Description: String = "":
	set(value):
		__Description__was__set = true
		Description = value
var __Description__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__Version__was__set:
		bzz_dictionary["Version"] = self.Version
	if self.__Variable Order__was__set:
		bzz_dictionary["Variable Order"] = self.Variable Order
	if self.__Class__was__set:
		bzz_dictionary["Class"] = self.Class
	if self.__Dataset Name__was__set:
		bzz_dictionary["Dataset Name"] = self.Dataset Name
	if self.__Variable Name__was__set:
		bzz_dictionary["Variable Name"] = self.Variable Name
	if self.__Variable Label__was__set:
		bzz_dictionary["Variable Label"] = self.Variable Label
	if self.__Type__was__set:
		bzz_dictionary["Type"] = self.Type
	if self.__Controlled TermsComma Codelist or Format__was__set:
		bzz_dictionary["Controlled TermsComma Codelist or Format"] = self.Controlled TermsComma Codelist or Format
	if self.__Role__was__set:
		bzz_dictionary["Role"] = self.Role
	if self.__Role Description__was__set:
		bzz_dictionary["Role Description"] = self.Role Description
	if self.__Description__was__set:
		bzz_dictionary["Description"] = self.Description
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("Version"):
		me.Version = from_dict["Version"]
	if from_dict.has("Variable Order"):
		me.Variable Order = from_dict["Variable Order"]
	if from_dict.has("Class"):
		me.Class = from_dict["Class"]
	if from_dict.has("Dataset Name"):
		me.Dataset Name = from_dict["Dataset Name"]
	if from_dict.has("Variable Name"):
		me.Variable Name = from_dict["Variable Name"]
	if from_dict.has("Variable Label"):
		me.Variable Label = from_dict["Variable Label"]
	if from_dict.has("Type"):
		me.Type = from_dict["Type"]
	if from_dict.has("Controlled TermsComma Codelist or Format"):
		me.Controlled TermsComma Codelist or Format = from_dict["Controlled TermsComma Codelist or Format"]
	if from_dict.has("Role"):
		me.Role = from_dict["Role"]
	if from_dict.has("Role Description"):
		me.Role Description = from_dict["Role Description"]
	if from_dict.has("Description"):
		me.Description = from_dict["Description"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes


extends Resource
class_name CtCodelistTerms

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# CtCodelistTerms Model


# Required: False
# Example: C67154
# isArray: false
@export var conceptId: String = "":
	set(value):
		__conceptId__was__set = true
		conceptId = value
var __conceptId__was__set := false

# Required: False
# Example: true
# isArray: false
@export var extensible: String = "":
	set(value):
		__extensible__was__set = true
		extensible = value
var __extensible__was__set := false

# Required: False
# Example: Laboratory Test Name
# isArray: false
@export var name: String = "":
	set(value):
		__name__was__set = true
		name = value
var __name__was__set := false

# Required: False
# Example: LBTEST
# isArray: false
@export var submissionValue: String = "":
	set(value):
		__submissionValue__was__set = true
		submissionValue = value
var __submissionValue__was__set := false

# Required: False
# Example: Terminology used for laboratory test names of the CDISC Study Data Tabulation Model.
# isArray: false
@export var definition: String = "":
	set(value):
		__definition__was__set = true
		definition = value
var __definition__was__set := false

# Required: False
# Example: CDISC SDTM Laboratory Test Name Terminology
# isArray: false
@export var preferredTerm: String = "":
	set(value):
		__preferredTerm__was__set = true
		preferredTerm = value
var __preferredTerm__was__set := false

# Required: False
# Example: [\"Laboratory Test Name\"]
# isArray: true
@export var synonyms: Array:
	set(value):
		__synonyms__was__set = true
		synonyms = value
var __synonyms__was__set := false

# Required: False
# isArray: false
@export var Underscorelinks: CtCodelistTermsLinks:
	set(value):
		__Underscorelinks__was__set = true
		Underscorelinks = value
var __Underscorelinks__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__conceptId__was__set:
		bzz_dictionary["conceptId"] = self.conceptId
	if self.__extensible__was__set:
		bzz_dictionary["extensible"] = self.extensible
	if self.__name__was__set:
		bzz_dictionary["name"] = self.name
	if self.__submissionValue__was__set:
		bzz_dictionary["submissionValue"] = self.submissionValue
	if self.__definition__was__set:
		bzz_dictionary["definition"] = self.definition
	if self.__preferredTerm__was__set:
		bzz_dictionary["preferredTerm"] = self.preferredTerm
	if self.__synonyms__was__set:
		bzz_dictionary["synonyms"] = self.synonyms
	if self.__Underscorelinks__was__set:
		bzz_dictionary["Underscorelinks"] = self.Underscorelinks
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("conceptId"):
		me.conceptId = from_dict["conceptId"]
	if from_dict.has("extensible"):
		me.extensible = from_dict["extensible"]
	if from_dict.has("name"):
		me.name = from_dict["name"]
	if from_dict.has("submissionValue"):
		me.submissionValue = from_dict["submissionValue"]
	if from_dict.has("definition"):
		me.definition = from_dict["definition"]
	if from_dict.has("preferredTerm"):
		me.preferredTerm = from_dict["preferredTerm"]
	if from_dict.has("synonyms"):
		me.synonyms = from_dict["synonyms"]
	if from_dict.has("Underscorelinks"):
		me.Underscorelinks = CtCodelistTermsLinks.bzz_denormalize_single(from_dict["Underscorelinks"])
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes


/* tslint:disable */
/* eslint-disable */
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RootCtCodelistRef } from './RootCtCodelistRef';
import {
    RootCtCodelistRefFromJSON,
    RootCtCodelistRefFromJSONTyped,
    RootCtCodelistRefToJSON,
    RootCtCodelistRefToJSONTyped,
} from './RootCtCodelistRef';
import type { CtCodelistRefVersion } from './CtCodelistRefVersion';
import {
    CtCodelistRefVersionFromJSON,
    CtCodelistRefVersionFromJSONTyped,
    CtCodelistRefVersionToJSON,
    CtCodelistRefVersionToJSONTyped,
} from './CtCodelistRefVersion';

/**
 * 
 * @export
 * @interface RootCtCodelistLinks
 */
export interface RootCtCodelistLinks {
    /**
     * 
     * @type {RootCtCodelistRef}
     * @memberof RootCtCodelistLinks
     */
    self?: RootCtCodelistRef;
    /**
     * 
     * @type {Array<CtCodelistRefVersion>}
     * @memberof RootCtCodelistLinks
     */
    versions?: Array<CtCodelistRefVersion>;
}

/**
 * Check if a given object implements the RootCtCodelistLinks interface.
 */
export function instanceOfRootCtCodelistLinks(value: object): value is RootCtCodelistLinks {
    return true;
}

export function RootCtCodelistLinksFromJSON(json: any): RootCtCodelistLinks {
    return RootCtCodelistLinksFromJSONTyped(json, false);
}

export function RootCtCodelistLinksFromJSONTyped(json: any, ignoreDiscriminator: boolean): RootCtCodelistLinks {
    if (json == null) {
        return json;
    }
    return {
        
        'self': json['self'] == null ? undefined : RootCtCodelistRefFromJSON(json['self']),
        'versions': json['versions'] == null ? undefined : ((json['versions'] as Array<any>).map(CtCodelistRefVersionFromJSON)),
    };
}

export function RootCtCodelistLinksToJSON(json: any): RootCtCodelistLinks {
    return RootCtCodelistLinksToJSONTyped(json, false);
}

export function RootCtCodelistLinksToJSONTyped(value?: RootCtCodelistLinks | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'self': RootCtCodelistRefToJSON(value['self']),
        'versions': value['versions'] == null ? undefined : ((value['versions'] as Array<any>).map(CtCodelistRefVersionToJSON)),
    };
}


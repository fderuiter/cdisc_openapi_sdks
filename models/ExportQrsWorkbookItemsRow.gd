extends Resource
class_name ExportQrsWorkbookItemsRow

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# ExportQrsWorkbookItemsRow Model


# Required: False
# isArray: false
@export var Item Sequence: String = "":
	set(value):
		__Item Sequence__was__set = true
		Item Sequence = value
var __Item Sequence__was__set := false

# Required: False
# isArray: false
@export var Test Name: String = "":
	set(value):
		__Test Name__was__set = true
		Test Name = value
var __Test Name__was__set := false

# Required: False
# isArray: false
@export var Item Text: String = "":
	set(value):
		__Item Text__was__set = true
		Item Text = value
var __Item Text__was__set := false

# Required: False
# isArray: false
@export var TestQuotes Codelist CMinusCode: String = "":
	set(value):
		__TestQuotes Codelist CMinusCode__was__set = true
		TestQuotes Codelist CMinusCode = value
var __TestQuotes Codelist CMinusCode__was__set := false

# Required: False
# isArray: false
@export var TestQuotes Term CMinusCode: String = "":
	set(value):
		__TestQuotes Term CMinusCode__was__set = true
		TestQuotes Term CMinusCode = value
var __TestQuotes Term CMinusCode__was__set := false

# Required: False
# isArray: false
@export var Test CodeQuotes Codelist CMinusCode: String = "":
	set(value):
		__Test CodeQuotes Codelist CMinusCode__was__set = true
		Test CodeQuotes Codelist CMinusCode = value
var __Test CodeQuotes Codelist CMinusCode__was__set := false

# Required: False
# isArray: false
@export var Test CodeQuotes Term CMinusCode: String = "":
	set(value):
		__Test CodeQuotes Term CMinusCode__was__set = true
		Test CodeQuotes Term CMinusCode = value
var __Test CodeQuotes Term CMinusCode__was__set := false

# Required: False
# isArray: false
@export var SubcategoryQuotes Codelist CMinusCode: String = "":
	set(value):
		__SubcategoryQuotes Codelist CMinusCode__was__set = true
		SubcategoryQuotes Codelist CMinusCode = value
var __SubcategoryQuotes Codelist CMinusCode__was__set := false

# Required: False
# isArray: false
@export var SubcategoryQuotes Term CMinusCode: String = "":
	set(value):
		__SubcategoryQuotes Term CMinusCode__was__set = true
		SubcategoryQuotes Term CMinusCode = value
var __SubcategoryQuotes Term CMinusCode__was__set := false

# Required: False
# isArray: false
@export var EvaluatorQuotes Codelist CMinusCode: String = "":
	set(value):
		__EvaluatorQuotes Codelist CMinusCode__was__set = true
		EvaluatorQuotes Codelist CMinusCode = value
var __EvaluatorQuotes Codelist CMinusCode__was__set := false

# Required: False
# isArray: false
@export var EvaluatorQuotes Term CMinusCode: String = "":
	set(value):
		__EvaluatorQuotes Term CMinusCode__was__set = true
		EvaluatorQuotes Term CMinusCode = value
var __EvaluatorQuotes Term CMinusCode__was__set := false

# Required: False
# isArray: false
@export var FreeMinusform ResponseQuotes Datatype: String = "":
	set(value):
		__FreeMinusform ResponseQuotes Datatype__was__set = true
		FreeMinusform ResponseQuotes Datatype = value
var __FreeMinusform ResponseQuotes Datatype__was__set := false

# Required: False
# isArray: false
@export var Response Group: String = "":
	set(value):
		__Response Group__was__set = true
		Response Group = value
var __Response Group__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__Item Sequence__was__set:
		bzz_dictionary["Item Sequence"] = self.Item Sequence
	if self.__Test Name__was__set:
		bzz_dictionary["Test Name"] = self.Test Name
	if self.__Item Text__was__set:
		bzz_dictionary["Item Text"] = self.Item Text
	if self.__TestQuotes Codelist CMinusCode__was__set:
		bzz_dictionary["TestQuotes Codelist CMinusCode"] = self.TestQuotes Codelist CMinusCode
	if self.__TestQuotes Term CMinusCode__was__set:
		bzz_dictionary["TestQuotes Term CMinusCode"] = self.TestQuotes Term CMinusCode
	if self.__Test CodeQuotes Codelist CMinusCode__was__set:
		bzz_dictionary["Test CodeQuotes Codelist CMinusCode"] = self.Test CodeQuotes Codelist CMinusCode
	if self.__Test CodeQuotes Term CMinusCode__was__set:
		bzz_dictionary["Test CodeQuotes Term CMinusCode"] = self.Test CodeQuotes Term CMinusCode
	if self.__SubcategoryQuotes Codelist CMinusCode__was__set:
		bzz_dictionary["SubcategoryQuotes Codelist CMinusCode"] = self.SubcategoryQuotes Codelist CMinusCode
	if self.__SubcategoryQuotes Term CMinusCode__was__set:
		bzz_dictionary["SubcategoryQuotes Term CMinusCode"] = self.SubcategoryQuotes Term CMinusCode
	if self.__EvaluatorQuotes Codelist CMinusCode__was__set:
		bzz_dictionary["EvaluatorQuotes Codelist CMinusCode"] = self.EvaluatorQuotes Codelist CMinusCode
	if self.__EvaluatorQuotes Term CMinusCode__was__set:
		bzz_dictionary["EvaluatorQuotes Term CMinusCode"] = self.EvaluatorQuotes Term CMinusCode
	if self.__FreeMinusform ResponseQuotes Datatype__was__set:
		bzz_dictionary["FreeMinusform ResponseQuotes Datatype"] = self.FreeMinusform ResponseQuotes Datatype
	if self.__Response Group__was__set:
		bzz_dictionary["Response Group"] = self.Response Group
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("Item Sequence"):
		me.Item Sequence = from_dict["Item Sequence"]
	if from_dict.has("Test Name"):
		me.Test Name = from_dict["Test Name"]
	if from_dict.has("Item Text"):
		me.Item Text = from_dict["Item Text"]
	if from_dict.has("TestQuotes Codelist CMinusCode"):
		me.TestQuotes Codelist CMinusCode = from_dict["TestQuotes Codelist CMinusCode"]
	if from_dict.has("TestQuotes Term CMinusCode"):
		me.TestQuotes Term CMinusCode = from_dict["TestQuotes Term CMinusCode"]
	if from_dict.has("Test CodeQuotes Codelist CMinusCode"):
		me.Test CodeQuotes Codelist CMinusCode = from_dict["Test CodeQuotes Codelist CMinusCode"]
	if from_dict.has("Test CodeQuotes Term CMinusCode"):
		me.Test CodeQuotes Term CMinusCode = from_dict["Test CodeQuotes Term CMinusCode"]
	if from_dict.has("SubcategoryQuotes Codelist CMinusCode"):
		me.SubcategoryQuotes Codelist CMinusCode = from_dict["SubcategoryQuotes Codelist CMinusCode"]
	if from_dict.has("SubcategoryQuotes Term CMinusCode"):
		me.SubcategoryQuotes Term CMinusCode = from_dict["SubcategoryQuotes Term CMinusCode"]
	if from_dict.has("EvaluatorQuotes Codelist CMinusCode"):
		me.EvaluatorQuotes Codelist CMinusCode = from_dict["EvaluatorQuotes Codelist CMinusCode"]
	if from_dict.has("EvaluatorQuotes Term CMinusCode"):
		me.EvaluatorQuotes Term CMinusCode = from_dict["EvaluatorQuotes Term CMinusCode"]
	if from_dict.has("FreeMinusform ResponseQuotes Datatype"):
		me.FreeMinusform ResponseQuotes Datatype = from_dict["FreeMinusform ResponseQuotes Datatype"]
	if from_dict.has("Response Group"):
		me.Response Group = from_dict["Response Group"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes


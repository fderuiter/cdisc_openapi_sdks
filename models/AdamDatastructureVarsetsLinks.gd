extends Resource
class_name AdamDatastructureVarsetsLinks

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# AdamDatastructureVarsetsLinks Model


# Required: False
# isArray: false
@export var some_self: AdamDatastructureVarsetsRef:
	set(value):
		__some_self__was__set = true
		some_self = value
var __some_self__was__set := false

# Required: False
# isArray: false
@export var parentProduct: AdamProductRef:
	set(value):
		__parentProduct__was__set = true
		parentProduct = value
var __parentProduct__was__set := false

# Required: False
# isArray: false
@export var priorVersion: AdamDatastructureVarsetsRef:
	set(value):
		__priorVersion__was__set = true
		priorVersion = value
var __priorVersion__was__set := false

# Required: False
# isArray: true
@export var analysisVariableSets: Array:
	set(value):
		__analysisVariableSets__was__set = true
		analysisVariableSets = value
var __analysisVariableSets__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__some_self__was__set:
		bzz_dictionary["some_self"] = self.some_self
	if self.__parentProduct__was__set:
		bzz_dictionary["parentProduct"] = self.parentProduct
	if self.__priorVersion__was__set:
		bzz_dictionary["priorVersion"] = self.priorVersion
	if self.__analysisVariableSets__was__set:
		bzz_dictionary["analysisVariableSets"] = self.analysisVariableSets
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("some_self"):
		me.some_self = AdamDatastructureVarsetsRef.bzz_denormalize_single(from_dict["some_self"])
	if from_dict.has("parentProduct"):
		me.parentProduct = AdamProductRef.bzz_denormalize_single(from_dict["parentProduct"])
	if from_dict.has("priorVersion"):
		me.priorVersion = AdamDatastructureVarsetsRef.bzz_denormalize_single(from_dict["priorVersion"])
	if from_dict.has("analysisVariableSets"):
		me.analysisVariableSets = AdamVarsetRefElement.bzz_denormalize_multiple(from_dict["analysisVariableSets"])
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes


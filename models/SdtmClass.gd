extends Resource
class_name SdtmClass

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# SdtmClass Model


# Required: False
# Example: 1
# isArray: false
@export var ordinal: String = "":
	set(value):
		__ordinal__was__set = true
		ordinal = value
var __ordinal__was__set := false

# Required: False
# Example: General Observations
# isArray: false
@export var name: String = "":
	set(value):
		__name__was__set = true
		name = value
var __name__was__set := false

# Required: False
# Example: General Observation Class
# isArray: false
@export var some_label: String = "":
	set(value):
		__some_label__was__set = true
		some_label = value
var __some_label__was__set := false

# Required: False
# Example: The majority of observations collected during a study can be divided among three general classes: Interventions, Events, or Findings.  Datasets based on any of the general observation classes share a set of common Identifier and Timing variables. As a general rule, any valid Identifier or Timing variable is permissible for use in any submission dataset based on a general observation class. (Source: SDTM v1.8, Section 2.2)
# isArray: false
@export var description: String = "":
	set(value):
		__description__was__set = true
		description = value
var __description__was__set := false

# Required: False
# isArray: false
@export var Underscorelinks: SdtmClassLinks:
	set(value):
		__Underscorelinks__was__set = true
		Underscorelinks = value
var __Underscorelinks__was__set := false

# Required: False
# isArray: true
@export var classVariables: Array:
	set(value):
		__classVariables__was__set = true
		classVariables = value
var __classVariables__was__set := false

# Required: False
# isArray: true
@export var datasets: Array:
	set(value):
		__datasets__was__set = true
		datasets = value
var __datasets__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__ordinal__was__set:
		bzz_dictionary["ordinal"] = self.ordinal
	if self.__name__was__set:
		bzz_dictionary["name"] = self.name
	if self.__some_label__was__set:
		bzz_dictionary["some_label"] = self.some_label
	if self.__description__was__set:
		bzz_dictionary["description"] = self.description
	if self.__Underscorelinks__was__set:
		bzz_dictionary["Underscorelinks"] = self.Underscorelinks
	if self.__classVariables__was__set:
		bzz_dictionary["classVariables"] = self.classVariables
	if self.__datasets__was__set:
		bzz_dictionary["datasets"] = self.datasets
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("ordinal"):
		me.ordinal = from_dict["ordinal"]
	if from_dict.has("name"):
		me.name = from_dict["name"]
	if from_dict.has("some_label"):
		me.some_label = from_dict["some_label"]
	if from_dict.has("description"):
		me.description = from_dict["description"]
	if from_dict.has("Underscorelinks"):
		me.Underscorelinks = SdtmClassLinks.bzz_denormalize_single(from_dict["Underscorelinks"])
	if from_dict.has("classVariables"):
		me.classVariables = SdtmClassVariable.bzz_denormalize_multiple(from_dict["classVariables"])
	if from_dict.has("datasets"):
		me.datasets = SdtmDataset.bzz_denormalize_multiple(from_dict["datasets"])
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes


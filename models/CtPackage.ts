/* tslint:disable */
/* eslint-disable */
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CtPackageLinks } from './CtPackageLinks';
import {
    CtPackageLinksFromJSON,
    CtPackageLinksFromJSONTyped,
    CtPackageLinksToJSON,
    CtPackageLinksToJSONTyped,
} from './CtPackageLinks';
import type { CtPackageCodelists } from './CtPackageCodelists';
import {
    CtPackageCodelistsFromJSON,
    CtPackageCodelistsFromJSONTyped,
    CtPackageCodelistsToJSON,
    CtPackageCodelistsToJSONTyped,
} from './CtPackageCodelists';

/**
 * 
 * @export
 * @interface CtPackage
 */
export interface CtPackage {
    /**
     * 
     * @type {string}
     * @memberof CtPackage
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackage
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackage
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackage
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackage
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackage
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackage
     */
    version?: string;
    /**
     * 
     * @type {CtPackageLinks}
     * @memberof CtPackage
     */
    links?: CtPackageLinks;
    /**
     * 
     * @type {Array<CtPackageCodelists>}
     * @memberof CtPackage
     */
    codelists?: Array<CtPackageCodelists>;
}

/**
 * Check if a given object implements the CtPackage interface.
 */
export function instanceOfCtPackage(value: object): value is CtPackage {
    return true;
}

export function CtPackageFromJSON(json: any): CtPackage {
    return CtPackageFromJSONTyped(json, false);
}

export function CtPackageFromJSONTyped(json: any, ignoreDiscriminator: boolean): CtPackage {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'] == null ? undefined : json['name'],
        'label': json['label'] == null ? undefined : json['label'],
        'description': json['description'] == null ? undefined : json['description'],
        'source': json['source'] == null ? undefined : json['source'],
        'effectiveDate': json['effectiveDate'] == null ? undefined : json['effectiveDate'],
        'registrationStatus': json['registrationStatus'] == null ? undefined : json['registrationStatus'],
        'version': json['version'] == null ? undefined : json['version'],
        'links': json['_links'] == null ? undefined : CtPackageLinksFromJSON(json['_links']),
        'codelists': json['codelists'] == null ? undefined : ((json['codelists'] as Array<any>).map(CtPackageCodelistsFromJSON)),
    };
}

export function CtPackageToJSON(json: any): CtPackage {
    return CtPackageToJSONTyped(json, false);
}

export function CtPackageToJSONTyped(value?: CtPackage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'label': value['label'],
        'description': value['description'],
        'source': value['source'],
        'effectiveDate': value['effectiveDate'],
        'registrationStatus': value['registrationStatus'],
        'version': value['version'],
        '_links': CtPackageLinksToJSON(value['links']),
        'codelists': value['codelists'] == null ? undefined : ((value['codelists'] as Array<any>).map(CtPackageCodelistsToJSON)),
    };
}


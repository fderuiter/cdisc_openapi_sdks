extends Resource
class_name CdashClassField

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# CdashClassField Model


# Required: False
# Example: 8
# isArray: false
@export var ordinal: String = "":
	set(value):
		__ordinal__was__set = true
		ordinal = value
var __ordinal__was__set := false

# Required: False
# Example: --DAT
# isArray: false
@export var name: String = "":
	set(value):
		__name__was__set = true
		name = value
var __name__was__set := false

# Required: False
# Example: Collection Date
# isArray: false
@export var some_label: String = "":
	set(value):
		__some_label__was__set = true
		some_label = value
var __some_label__was__set := false

# Required: False
# Example: Collection date of an observation.
# isArray: false
@export var definition: String = "":
	set(value):
		__definition__was__set = true
		definition = value
var __definition__was__set := false

# Required: False
# Example: What [is/was] the date the [event or intervention] [is/was] collected?; What [is/was] the (start) date (of the [Finding])?
# isArray: false
@export var questionText: String = "":
	set(value):
		__questionText__was__set = true
		questionText = value
var __questionText__was__set := false

# Required: False
# Example: [Event/Intervention] Collection Date; [Finding] (Start) Date
# isArray: false
@export var prompt: String = "":
	set(value):
		__prompt__was__set = true
		prompt = value
var __prompt__was__set := false

# Required: False
# Example: Char
# isArray: false
@export var simpleDatatype: String = "":
	set(value):
		__simpleDatatype__was__set = true
		simpleDatatype = value
var __simpleDatatype__was__set := false

# Required: False
# Example: This is a generic DATE field that can be implemented in a system that will store partial dates. Use this for: 1. Date of data collection, 2. Visit date, 3. Visit start date, 4. Point in time collection (e.g., vital signs measurements, lab sample collection date), 5. Start date for interval collection of measurements or tests (e.g., start date of a 24-hour urine collection). Refer to the FDA Study Data Technical Conformance Guide v2.2 (June 12, 2015) Section 4.1.4.1 which indicates that when dates have the role of a timing variable, the matching Study Day variables (--DY, --STDY, or --ENDY, respectively) are included in the SDTM
# isArray: false
@export var implementationNotes: String = "":
	set(value):
		__implementationNotes__was__set = true
		implementationNotes = value
var __implementationNotes__was__set := false

# Required: False
# Example: This field does not map directly to an SDTM variable. For the SDTM dataset, concatenate all collected CDASH DATE and TIME components and populate the SDTM variable --DTC in ISO 8601 format. Refer to the FDA Study Data Technical Conformance Guide v2.2 (June 12, 2015) Section 4.1.4.1 which indicates that when dates have the role of a timing variable, the matching Study Day variables (--DY, --STDY, or --ENDY, respectively) should be included in the SDTM dataset.
# isArray: false
@export var mappingInstructions: String = "":
	set(value):
		__mappingInstructions__was__set = true
		mappingInstructions = value
var __mappingInstructions__was__set := false

# Required: False
# isArray: false
@export var Underscorelinks: CdashClassFieldLinks:
	set(value):
		__Underscorelinks__was__set = true
		Underscorelinks = value
var __Underscorelinks__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__ordinal__was__set:
		bzz_dictionary["ordinal"] = self.ordinal
	if self.__name__was__set:
		bzz_dictionary["name"] = self.name
	if self.__some_label__was__set:
		bzz_dictionary["some_label"] = self.some_label
	if self.__definition__was__set:
		bzz_dictionary["definition"] = self.definition
	if self.__questionText__was__set:
		bzz_dictionary["questionText"] = self.questionText
	if self.__prompt__was__set:
		bzz_dictionary["prompt"] = self.prompt
	if self.__simpleDatatype__was__set:
		bzz_dictionary["simpleDatatype"] = self.simpleDatatype
	if self.__implementationNotes__was__set:
		bzz_dictionary["implementationNotes"] = self.implementationNotes
	if self.__mappingInstructions__was__set:
		bzz_dictionary["mappingInstructions"] = self.mappingInstructions
	if self.__Underscorelinks__was__set:
		bzz_dictionary["Underscorelinks"] = self.Underscorelinks
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("ordinal"):
		me.ordinal = from_dict["ordinal"]
	if from_dict.has("name"):
		me.name = from_dict["name"]
	if from_dict.has("some_label"):
		me.some_label = from_dict["some_label"]
	if from_dict.has("definition"):
		me.definition = from_dict["definition"]
	if from_dict.has("questionText"):
		me.questionText = from_dict["questionText"]
	if from_dict.has("prompt"):
		me.prompt = from_dict["prompt"]
	if from_dict.has("simpleDatatype"):
		me.simpleDatatype = from_dict["simpleDatatype"]
	if from_dict.has("implementationNotes"):
		me.implementationNotes = from_dict["implementationNotes"]
	if from_dict.has("mappingInstructions"):
		me.mappingInstructions = from_dict["mappingInstructions"]
	if from_dict.has("Underscorelinks"):
		me.Underscorelinks = CdashClassFieldLinks.bzz_denormalize_single(from_dict["Underscorelinks"])
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes


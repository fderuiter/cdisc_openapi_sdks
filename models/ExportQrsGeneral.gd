extends Resource
class_name ExportQrsGeneral

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# ExportQrsGeneral Model


# Required: False
# isArray: false
@export var Name: String = "":
	set(value):
		__Name__was__set = true
		Name = value
var __Name__was__set := false

# Required: False
# isArray: false
@export var Label: String = "":
	set(value):
		__Label__was__set = true
		Label = value
var __Label__was__set := false

# Required: False
# isArray: false
@export var Effective Date: String = "":
	set(value):
		__Effective Date__was__set = true
		Effective Date = value
var __Effective Date__was__set := false

# Required: False
# isArray: false
@export var Description: String = "":
	set(value):
		__Description__was__set = true
		Description = value
var __Description__was__set := false

# Required: False
# isArray: false
@export var Type: String = "":
	set(value):
		__Type__was__set = true
		Type = value
var __Type__was__set := false

# Required: False
# isArray: false
@export var CategoryQuotes Codelist CMinusCode: String = "":
	set(value):
		__CategoryQuotes Codelist CMinusCode__was__set = true
		CategoryQuotes Codelist CMinusCode = value
var __CategoryQuotes Codelist CMinusCode__was__set := false

# Required: False
# isArray: false
@export var CategoryQuotes Term CMinusCode: String = "":
	set(value):
		__CategoryQuotes Term CMinusCode__was__set = true
		CategoryQuotes Term CMinusCode = value
var __CategoryQuotes Term CMinusCode__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__Name__was__set:
		bzz_dictionary["Name"] = self.Name
	if self.__Label__was__set:
		bzz_dictionary["Label"] = self.Label
	if self.__Effective Date__was__set:
		bzz_dictionary["Effective Date"] = self.Effective Date
	if self.__Description__was__set:
		bzz_dictionary["Description"] = self.Description
	if self.__Type__was__set:
		bzz_dictionary["Type"] = self.Type
	if self.__CategoryQuotes Codelist CMinusCode__was__set:
		bzz_dictionary["CategoryQuotes Codelist CMinusCode"] = self.CategoryQuotes Codelist CMinusCode
	if self.__CategoryQuotes Term CMinusCode__was__set:
		bzz_dictionary["CategoryQuotes Term CMinusCode"] = self.CategoryQuotes Term CMinusCode
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("Name"):
		me.Name = from_dict["Name"]
	if from_dict.has("Label"):
		me.Label = from_dict["Label"]
	if from_dict.has("Effective Date"):
		me.Effective Date = from_dict["Effective Date"]
	if from_dict.has("Description"):
		me.Description = from_dict["Description"]
	if from_dict.has("Type"):
		me.Type = from_dict["Type"]
	if from_dict.has("CategoryQuotes Codelist CMinusCode"):
		me.CategoryQuotes Codelist CMinusCode = from_dict["CategoryQuotes Codelist CMinusCode"]
	if from_dict.has("CategoryQuotes Term CMinusCode"):
		me.CategoryQuotes Term CMinusCode = from_dict["CategoryQuotes Term CMinusCode"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes


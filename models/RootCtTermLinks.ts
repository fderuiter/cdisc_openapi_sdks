/* tslint:disable */
/* eslint-disable */
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CtTermRefVersion } from './CtTermRefVersion';
import {
    CtTermRefVersionFromJSON,
    CtTermRefVersionFromJSONTyped,
    CtTermRefVersionToJSON,
    CtTermRefVersionToJSONTyped,
} from './CtTermRefVersion';
import type { RootCtTermRef } from './RootCtTermRef';
import {
    RootCtTermRefFromJSON,
    RootCtTermRefFromJSONTyped,
    RootCtTermRefToJSON,
    RootCtTermRefToJSONTyped,
} from './RootCtTermRef';

/**
 * 
 * @export
 * @interface RootCtTermLinks
 */
export interface RootCtTermLinks {
    /**
     * 
     * @type {RootCtTermRef}
     * @memberof RootCtTermLinks
     */
    self?: RootCtTermRef;
    /**
     * 
     * @type {Array<CtTermRefVersion>}
     * @memberof RootCtTermLinks
     */
    versions?: Array<CtTermRefVersion>;
}

/**
 * Check if a given object implements the RootCtTermLinks interface.
 */
export function instanceOfRootCtTermLinks(value: object): value is RootCtTermLinks {
    return true;
}

export function RootCtTermLinksFromJSON(json: any): RootCtTermLinks {
    return RootCtTermLinksFromJSONTyped(json, false);
}

export function RootCtTermLinksFromJSONTyped(json: any, ignoreDiscriminator: boolean): RootCtTermLinks {
    if (json == null) {
        return json;
    }
    return {
        
        'self': json['self'] == null ? undefined : RootCtTermRefFromJSON(json['self']),
        'versions': json['versions'] == null ? undefined : ((json['versions'] as Array<any>).map(CtTermRefVersionFromJSON)),
    };
}

export function RootCtTermLinksToJSON(json: any): RootCtTermLinks {
    return RootCtTermLinksToJSONTyped(json, false);
}

export function RootCtTermLinksToJSONTyped(value?: RootCtTermLinks | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'self': RootCtTermRefToJSON(value['self']),
        'versions': value['versions'] == null ? undefined : ((value['versions'] as Array<any>).map(CtTermRefVersionToJSON)),
    };
}


extends Resource
class_name ProductgroupDataCollectionLinks

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# ProductgroupDataCollectionLinks Model


# Required: False
# isArray: false
@export var some_self: ProductgroupRef:
	set(value):
		__some_self__was__set = true
		some_self = value
var __some_self__was__set := false

# Required: False
# isArray: true
@export var cdash: Array:
	set(value):
		__cdash__was__set = true
		cdash = value
var __cdash__was__set := false

# Required: False
# isArray: true
@export var cdashig: Array:
	set(value):
		__cdashig__was__set = true
		cdashig = value
var __cdashig__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__some_self__was__set:
		bzz_dictionary["some_self"] = self.some_self
	if self.__cdash__was__set:
		bzz_dictionary["cdash"] = self.cdash
	if self.__cdashig__was__set:
		bzz_dictionary["cdashig"] = self.cdashig
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("some_self"):
		me.some_self = ProductgroupRef.bzz_denormalize_single(from_dict["some_self"])
	if from_dict.has("cdash"):
		me.cdash = CdashProductRefElement.bzz_denormalize_multiple(from_dict["cdash"])
	if from_dict.has("cdashig"):
		me.cdashig = CdashigProductRefElement.bzz_denormalize_multiple(from_dict["cdashig"])
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes


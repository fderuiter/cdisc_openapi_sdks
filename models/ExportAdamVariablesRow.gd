extends Resource
class_name ExportAdamVariablesRow

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# ExportAdamVariablesRow Model


# Required: False
# isArray: false
@export var Version: String = "":
	set(value):
		__Version__was__set = true
		Version = value
var __Version__was__set := false

# Required: False
# isArray: false
@export var Data Structure Name: String = "":
	set(value):
		__Data Structure Name__was__set = true
		Data Structure Name = value
var __Data Structure Name__was__set := false

# Required: False
# isArray: false
@export var Dataset Name: String = "":
	set(value):
		__Dataset Name__was__set = true
		Dataset Name = value
var __Dataset Name__was__set := false

# Required: False
# isArray: false
@export var Variable Group: String = "":
	set(value):
		__Variable Group__was__set = true
		Variable Group = value
var __Variable Group__was__set := false

# Required: False
# isArray: false
@export var Variable Name: String = "":
	set(value):
		__Variable Name__was__set = true
		Variable Name = value
var __Variable Name__was__set := false

# Required: False
# isArray: false
@export var Variable Label: String = "":
	set(value):
		__Variable Label__was__set = true
		Variable Label = value
var __Variable Label__was__set := false

# Required: False
# isArray: false
@export var Type: String = "":
	set(value):
		__Type__was__set = true
		Type = value
var __Type__was__set := false

# Required: False
# isArray: false
@export var CodelistSlashControlled Terms: String = "":
	set(value):
		__CodelistSlashControlled Terms__was__set = true
		CodelistSlashControlled Terms = value
var __CodelistSlashControlled Terms__was__set := false

# Required: False
# isArray: false
@export var Core: String = "":
	set(value):
		__Core__was__set = true
		Core = value
var __Core__was__set := false

# Required: False
# isArray: false
@export var CDISC Notes: String = "":
	set(value):
		__CDISC Notes__was__set = true
		CDISC Notes = value
var __CDISC Notes__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__Version__was__set:
		bzz_dictionary["Version"] = self.Version
	if self.__Data Structure Name__was__set:
		bzz_dictionary["Data Structure Name"] = self.Data Structure Name
	if self.__Dataset Name__was__set:
		bzz_dictionary["Dataset Name"] = self.Dataset Name
	if self.__Variable Group__was__set:
		bzz_dictionary["Variable Group"] = self.Variable Group
	if self.__Variable Name__was__set:
		bzz_dictionary["Variable Name"] = self.Variable Name
	if self.__Variable Label__was__set:
		bzz_dictionary["Variable Label"] = self.Variable Label
	if self.__Type__was__set:
		bzz_dictionary["Type"] = self.Type
	if self.__CodelistSlashControlled Terms__was__set:
		bzz_dictionary["CodelistSlashControlled Terms"] = self.CodelistSlashControlled Terms
	if self.__Core__was__set:
		bzz_dictionary["Core"] = self.Core
	if self.__CDISC Notes__was__set:
		bzz_dictionary["CDISC Notes"] = self.CDISC Notes
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("Version"):
		me.Version = from_dict["Version"]
	if from_dict.has("Data Structure Name"):
		me.Data Structure Name = from_dict["Data Structure Name"]
	if from_dict.has("Dataset Name"):
		me.Dataset Name = from_dict["Dataset Name"]
	if from_dict.has("Variable Group"):
		me.Variable Group = from_dict["Variable Group"]
	if from_dict.has("Variable Name"):
		me.Variable Name = from_dict["Variable Name"]
	if from_dict.has("Variable Label"):
		me.Variable Label = from_dict["Variable Label"]
	if from_dict.has("Type"):
		me.Type = from_dict["Type"]
	if from_dict.has("CodelistSlashControlled Terms"):
		me.CodelistSlashControlled Terms = from_dict["CodelistSlashControlled Terms"]
	if from_dict.has("Core"):
		me.Core = from_dict["Core"]
	if from_dict.has("CDISC Notes"):
		me.CDISC Notes = from_dict["CDISC Notes"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes


extends Resource
class_name CdashigScenarioField

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# CdashigScenarioField Model


# Required: False
# Example: 7
# isArray: false
@export var ordinal: String = "":
	set(value):
		__ordinal__was__set = true
		ordinal = value
var __ordinal__was__set := false

# Required: False
# Example: [VSTESTCD]_VSDAT
# isArray: false
@export var name: String = "":
	set(value):
		__name__was__set = true
		name = value
var __name__was__set := false

# Required: False
# Example: Vital Signs Date
# isArray: false
@export var some_label: String = "":
	set(value):
		__some_label__was__set = true
		some_label = value
var __some_label__was__set := false

# Required: False
# Example: The date of the vital signs measurement, represented in an unambiguous date format (e.g., DD-MON-YYYY).
# isArray: false
@export var definition: String = "":
	set(value):
		__definition__was__set = true
		definition = value
var __definition__was__set := false

# Required: False
# Example: What was the date of the measurement(s)?
# isArray: false
@export var questionText: String = "":
	set(value):
		__questionText__was__set = true
		questionText = value
var __questionText__was__set := false

# Required: False
# Example: [VSTEST] Date
# isArray: false
@export var prompt: String = "":
	set(value):
		__prompt__was__set = true
		prompt = value
var __prompt__was__set := false

# Required: False
# Example: Record date of measurements using this format (DD-MON-YYYY).
# isArray: false
@export var completionInstructions: String = "":
	set(value):
		__completionInstructions__was__set = true
		completionInstructions = value
var __completionInstructions__was__set := false

# Required: False
# Example: A single date may be collected for all the vital sign measurements when they are performed on the same date. The date of each measurement can also be collected for each measurement using a CDASH variable [VSTESTCD]_VSDAT. The date of the measurements may be determined from a collected date of visit and in such cases a separate measurement date field is not required.
# isArray: false
@export var implementationNotes: String = "":
	set(value):
		__implementationNotes__was__set = true
		implementationNotes = value
var __implementationNotes__was__set := false

# Required: False
# Example: Char
# isArray: false
@export var simpleDatatype: String = "":
	set(value):
		__simpleDatatype__was__set = true
		simpleDatatype = value
var __simpleDatatype__was__set := false

# Required: False
# Example: This does not map directly to an SDTMIG variable. For the SDTM submission dataset, concatenate all collected CDASH DATE and TIME components and populate the SDTMIG variable VSDTC in ISO 8601 format.
# isArray: false
@export var mappingInstructions: String = "":
	set(value):
		__mappingInstructions__was__set = true
		mappingInstructions = value
var __mappingInstructions__was__set := false

# Required: False
# Example: R/C
# isArray: false
@export var core: String = "":
	set(value):
		__core__was__set = true
		core = value
var __core__was__set := false

# Required: False
# isArray: false
@export var Underscorelinks: CdashigScenarioFieldLinks:
	set(value):
		__Underscorelinks__was__set = true
		Underscorelinks = value
var __Underscorelinks__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__ordinal__was__set:
		bzz_dictionary["ordinal"] = self.ordinal
	if self.__name__was__set:
		bzz_dictionary["name"] = self.name
	if self.__some_label__was__set:
		bzz_dictionary["some_label"] = self.some_label
	if self.__definition__was__set:
		bzz_dictionary["definition"] = self.definition
	if self.__questionText__was__set:
		bzz_dictionary["questionText"] = self.questionText
	if self.__prompt__was__set:
		bzz_dictionary["prompt"] = self.prompt
	if self.__completionInstructions__was__set:
		bzz_dictionary["completionInstructions"] = self.completionInstructions
	if self.__implementationNotes__was__set:
		bzz_dictionary["implementationNotes"] = self.implementationNotes
	if self.__simpleDatatype__was__set:
		bzz_dictionary["simpleDatatype"] = self.simpleDatatype
	if self.__mappingInstructions__was__set:
		bzz_dictionary["mappingInstructions"] = self.mappingInstructions
	if self.__core__was__set:
		bzz_dictionary["core"] = self.core
	if self.__Underscorelinks__was__set:
		bzz_dictionary["Underscorelinks"] = self.Underscorelinks
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("ordinal"):
		me.ordinal = from_dict["ordinal"]
	if from_dict.has("name"):
		me.name = from_dict["name"]
	if from_dict.has("some_label"):
		me.some_label = from_dict["some_label"]
	if from_dict.has("definition"):
		me.definition = from_dict["definition"]
	if from_dict.has("questionText"):
		me.questionText = from_dict["questionText"]
	if from_dict.has("prompt"):
		me.prompt = from_dict["prompt"]
	if from_dict.has("completionInstructions"):
		me.completionInstructions = from_dict["completionInstructions"]
	if from_dict.has("implementationNotes"):
		me.implementationNotes = from_dict["implementationNotes"]
	if from_dict.has("simpleDatatype"):
		me.simpleDatatype = from_dict["simpleDatatype"]
	if from_dict.has("mappingInstructions"):
		me.mappingInstructions = from_dict["mappingInstructions"]
	if from_dict.has("core"):
		me.core = from_dict["core"]
	if from_dict.has("Underscorelinks"):
		me.Underscorelinks = CdashigScenarioFieldLinks.bzz_denormalize_single(from_dict["Underscorelinks"])
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes


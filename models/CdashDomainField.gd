extends Resource
class_name CdashDomainField

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# CdashDomainField Model


# Required: False
# Example: 18
# isArray: false
@export var ordinal: String = "":
	set(value):
		__ordinal__was__set = true
		ordinal = value
var __ordinal__was__set := false

# Required: False
# Example: AGE
# isArray: false
@export var name: String = "":
	set(value):
		__name__was__set = true
		name = value
var __name__was__set := false

# Required: False
# Example: Age
# isArray: false
@export var some_label: String = "":
	set(value):
		__some_label__was__set = true
		some_label = value
var __some_label__was__set := false

# Required: False
# Example: The age of the subject expressed in AGEU.
# isArray: false
@export var definition: String = "":
	set(value):
		__definition__was__set = true
		definition = value
var __definition__was__set := false

# Required: False
# isArray: false
@export var domainSpecific: String = "":
	set(value):
		__domainSpecific__was__set = true
		domainSpecific = value
var __domainSpecific__was__set := false

# Required: False
# Example: What [is/was] the subject's age?
# isArray: false
@export var questionText: String = "":
	set(value):
		__questionText__was__set = true
		questionText = value
var __questionText__was__set := false

# Required: False
# Example: Age
# isArray: false
@export var prompt: String = "":
	set(value):
		__prompt__was__set = true
		prompt = value
var __prompt__was__set := false

# Required: False
# Example: Num
# isArray: false
@export var simpleDatatype: String = "":
	set(value):
		__simpleDatatype__was__set = true
		simpleDatatype = value
var __simpleDatatype__was__set := false

# Required: False
# Example: If Age is collected, it should be collected as a number and, to be correctly interpreted, the age value should be associated to a variable for the Age Unit. It may be necessary to know when the age was collected as an age may need to be recalculated for analysis, such as deriving age at a reference start time (RFSTDTC for SDTM). BRTHDTC may not be available in all cases (due to subject privacy concerns). If AGE is collected, then it is recommended that the date of collection also be recorded, either separately or by association to the date of the visit.
# isArray: false
@export var implementationNotes: String = "":
	set(value):
		__implementationNotes__was__set = true
		implementationNotes = value
var __implementationNotes__was__set := false

# Required: False
# Example: Maps directly to the SDTM variable listed in the column with the heading \"SDTM Target\".
# isArray: false
@export var mappingInstructions: String = "":
	set(value):
		__mappingInstructions__was__set = true
		mappingInstructions = value
var __mappingInstructions__was__set := false

# Required: False
# isArray: false
@export var Underscorelinks: CdashDomainFieldLinks:
	set(value):
		__Underscorelinks__was__set = true
		Underscorelinks = value
var __Underscorelinks__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__ordinal__was__set:
		bzz_dictionary["ordinal"] = self.ordinal
	if self.__name__was__set:
		bzz_dictionary["name"] = self.name
	if self.__some_label__was__set:
		bzz_dictionary["some_label"] = self.some_label
	if self.__definition__was__set:
		bzz_dictionary["definition"] = self.definition
	if self.__domainSpecific__was__set:
		bzz_dictionary["domainSpecific"] = self.domainSpecific
	if self.__questionText__was__set:
		bzz_dictionary["questionText"] = self.questionText
	if self.__prompt__was__set:
		bzz_dictionary["prompt"] = self.prompt
	if self.__simpleDatatype__was__set:
		bzz_dictionary["simpleDatatype"] = self.simpleDatatype
	if self.__implementationNotes__was__set:
		bzz_dictionary["implementationNotes"] = self.implementationNotes
	if self.__mappingInstructions__was__set:
		bzz_dictionary["mappingInstructions"] = self.mappingInstructions
	if self.__Underscorelinks__was__set:
		bzz_dictionary["Underscorelinks"] = self.Underscorelinks
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("ordinal"):
		me.ordinal = from_dict["ordinal"]
	if from_dict.has("name"):
		me.name = from_dict["name"]
	if from_dict.has("some_label"):
		me.some_label = from_dict["some_label"]
	if from_dict.has("definition"):
		me.definition = from_dict["definition"]
	if from_dict.has("domainSpecific"):
		me.domainSpecific = from_dict["domainSpecific"]
	if from_dict.has("questionText"):
		me.questionText = from_dict["questionText"]
	if from_dict.has("prompt"):
		me.prompt = from_dict["prompt"]
	if from_dict.has("simpleDatatype"):
		me.simpleDatatype = from_dict["simpleDatatype"]
	if from_dict.has("implementationNotes"):
		me.implementationNotes = from_dict["implementationNotes"]
	if from_dict.has("mappingInstructions"):
		me.mappingInstructions = from_dict["mappingInstructions"]
	if from_dict.has("Underscorelinks"):
		me.Underscorelinks = CdashDomainFieldLinks.bzz_denormalize_single(from_dict["Underscorelinks"])
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes


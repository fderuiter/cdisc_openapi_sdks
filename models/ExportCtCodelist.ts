/* tslint:disable */
/* eslint-disable */
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ExportCtTerm } from './ExportCtTerm';
import {
    ExportCtTermFromJSON,
    ExportCtTermFromJSONTyped,
    ExportCtTermToJSON,
    ExportCtTermToJSONTyped,
} from './ExportCtTerm';

/**
 * 
 * @export
 * @interface ExportCtCodelist
 */
export interface ExportCtCodelist {
    /**
     * 
     * @type {string}
     * @memberof ExportCtCodelist
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCtCodelist
     */
    codelistCode?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCtCodelist
     */
    codelistExtensibleYesNo?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCtCodelist
     */
    codelistName?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCtCodelist
     */
    cDISCSubmissionValue?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ExportCtCodelist
     */
    cDISCSynonymS?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ExportCtCodelist
     */
    cDISCDefinition?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCtCodelist
     */
    nCIPreferredTerm?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCtCodelist
     */
    standardAndDate?: string;
    /**
     * 
     * @type {Array<ExportCtTerm>}
     * @memberof ExportCtCodelist
     */
    ?: Array<ExportCtTerm>;
}

/**
 * Check if a given object implements the ExportCtCodelist interface.
 */
export function instanceOfExportCtCodelist(value: object): value is ExportCtCodelist {
    return true;
}

export function ExportCtCodelistFromJSON(json: any): ExportCtCodelist {
    return ExportCtCodelistFromJSONTyped(json, false);
}

export function ExportCtCodelistFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExportCtCodelist {
    if (json == null) {
        return json;
    }
    return {
        
        'code': json['Code'] == null ? undefined : json['Code'],
        'codelistCode': json['Codelist Code'] == null ? undefined : json['Codelist Code'],
        'codelistExtensibleYesNo': json['Codelist Extensible (Yes/No)'] == null ? undefined : json['Codelist Extensible (Yes/No)'],
        'codelistName': json['Codelist Name'] == null ? undefined : json['Codelist Name'],
        'cDISCSubmissionValue': json['CDISC Submission Value'] == null ? undefined : json['CDISC Submission Value'],
        'cDISCSynonymS': json['CDISC Synonym(s)'] == null ? undefined : json['CDISC Synonym(s)'],
        'cDISCDefinition': json['CDISC Definition'] == null ? undefined : json['CDISC Definition'],
        'nCIPreferredTerm': json['NCI Preferred Term'] == null ? undefined : json['NCI Preferred Term'],
        'standardAndDate': json['Standard and Date'] == null ? undefined : json['Standard and Date'],
        '': json[''] == null ? undefined : ((json[''] as Array<any>).map(ExportCtTermFromJSON)),
    };
}

export function ExportCtCodelistToJSON(json: any): ExportCtCodelist {
    return ExportCtCodelistToJSONTyped(json, false);
}

export function ExportCtCodelistToJSONTyped(value?: ExportCtCodelist | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Code': value['code'],
        'Codelist Code': value['codelistCode'],
        'Codelist Extensible (Yes/No)': value['codelistExtensibleYesNo'],
        'Codelist Name': value['codelistName'],
        'CDISC Submission Value': value['cDISCSubmissionValue'],
        'CDISC Synonym(s)': value['cDISCSynonymS'],
        'CDISC Definition': value['cDISCDefinition'],
        'NCI Preferred Term': value['nCIPreferredTerm'],
        'Standard and Date': value['standardAndDate'],
        '': value[''] == null ? undefined : ((value[''] as Array<any>).map(ExportCtTermToJSON)),
    };
}


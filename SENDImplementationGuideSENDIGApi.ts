/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  SendigClass,
  SendigClassDatasets,
  SendigDatasetVariable,
  SendigDatasets,
  SendigClasses,
  RootSendigDatasetVariable,
  SendigDataset,
  SendigDatasetVariables,
  SendigProduct,
} from './models';

/**
 * mdrRootSendigDatasetsDatasetVariablesVarGet - parameters interface
 */
export interface IMdrRootSendigDatasetsDatasetVariablesVarGetParams {
  dataset: string;
  _var: string;
}

/**
 * mdrSendigVersionClassesClassDatasetsGet - parameters interface
 */
export interface IMdrSendigVersionClassesClassDatasetsGetParams {
  version: string;
  _class: string;
}

/**
 * mdrSendigVersionClassesClassGet - parameters interface
 */
export interface IMdrSendigVersionClassesClassGetParams {
  version: string;
  _class: string;
}

/**
 * mdrSendigVersionClassesGet - parameters interface
 */
export interface IMdrSendigVersionClassesGetParams {
  version: string;
}

/**
 * mdrSendigVersionDatasetsDatasetGet - parameters interface
 */
export interface IMdrSendigVersionDatasetsDatasetGetParams {
  version: string;
  dataset: string;
}

/**
 * mdrSendigVersionDatasetsDatasetVariablesGet - parameters interface
 */
export interface IMdrSendigVersionDatasetsDatasetVariablesGetParams {
  version: string;
  dataset: string;
}

/**
 * mdrSendigVersionDatasetsDatasetVariablesVarGet - parameters interface
 */
export interface IMdrSendigVersionDatasetsDatasetVariablesVarGetParams {
  version: string;
  dataset: string;
  _var: string;
}

/**
 * mdrSendigVersionDatasetsGet - parameters interface
 */
export interface IMdrSendigVersionDatasetsGetParams {
  version: string;
}

/**
 * mdrSendigVersionGet - parameters interface
 */
export interface IMdrSendigVersionGetParams {
  version: string;
}

/**
 * SENDImplementationGuideSENDIGApi - API class
 */
@autoinject()
export class SENDImplementationGuideSENDIGApi extends Api {

  /**
   * Creates a new SENDImplementationGuideSENDIGApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get Root SENDIG Dataset Variable
   * @param params.dataset SENDIG Dataset Identifier
   * @param params._var SENDIG Variable Identifier
   */
  async mdrRootSendigDatasetsDatasetVariablesVarGet(params: IMdrRootSendigDatasetsDatasetVariablesVarGetParams): Promise<RootSendigDatasetVariable> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrRootSendigDatasetsDatasetVariablesVarGet', params, 'dataset');
    this.ensureParamIsSet('mdrRootSendigDatasetsDatasetVariablesVarGet', params, '_var');

    // Create URL to call
    const url = `${this.basePath}/mdr/root/sendig/datasets/{dataset}/variables/{var}`
      .replace(`{${'dataset'}}`, encodeURIComponent(`${params['dataset']}`))
      .replace(`{${'var'}}`, encodeURIComponent(`${params['_var']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SENDIG Class Dataset List
   * @param params.version CDISC Library Product Version
   * @param params._class SENDIG Class Identifier
   */
  async mdrSendigVersionClassesClassDatasetsGet(params: IMdrSendigVersionClassesClassDatasetsGetParams): Promise<SendigClassDatasets> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSendigVersionClassesClassDatasetsGet', params, 'version');
    this.ensureParamIsSet('mdrSendigVersionClassesClassDatasetsGet', params, '_class');

    // Create URL to call
    const url = `${this.basePath}/mdr/sendig/{version}/classes/{class}/datasets`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'class'}}`, encodeURIComponent(`${params['_class']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SENDIG Class
   * @param params.version CDISC Library Product Version
   * @param params._class SENDIG Class Identifier
   */
  async mdrSendigVersionClassesClassGet(params: IMdrSendigVersionClassesClassGetParams): Promise<SendigClass> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSendigVersionClassesClassGet', params, 'version');
    this.ensureParamIsSet('mdrSendigVersionClassesClassGet', params, '_class');

    // Create URL to call
    const url = `${this.basePath}/mdr/sendig/{version}/classes/{class}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'class'}}`, encodeURIComponent(`${params['_class']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SENDIG Class List
   * @param params.version CDISC Library Product Version
   */
  async mdrSendigVersionClassesGet(params: IMdrSendigVersionClassesGetParams): Promise<SendigClasses> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSendigVersionClassesGet', params, 'version');

    // Create URL to call
    const url = `${this.basePath}/mdr/sendig/{version}/classes`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SENDIG Dataset
   * @param params.version CDISC Library Product Version
   * @param params.dataset SENDIG Class Identifier
   */
  async mdrSendigVersionDatasetsDatasetGet(params: IMdrSendigVersionDatasetsDatasetGetParams): Promise<SendigDataset> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSendigVersionDatasetsDatasetGet', params, 'version');
    this.ensureParamIsSet('mdrSendigVersionDatasetsDatasetGet', params, 'dataset');

    // Create URL to call
    const url = `${this.basePath}/mdr/sendig/{version}/datasets/{dataset}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'dataset'}}`, encodeURIComponent(`${params['dataset']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SENDIG Dataset Variable List
   * @param params.version CDISC Library Product Version
   * @param params.dataset SENDIG Class Identifier
   */
  async mdrSendigVersionDatasetsDatasetVariablesGet(params: IMdrSendigVersionDatasetsDatasetVariablesGetParams): Promise<SendigDatasetVariables> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSendigVersionDatasetsDatasetVariablesGet', params, 'version');
    this.ensureParamIsSet('mdrSendigVersionDatasetsDatasetVariablesGet', params, 'dataset');

    // Create URL to call
    const url = `${this.basePath}/mdr/sendig/{version}/datasets/{dataset}/variables`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'dataset'}}`, encodeURIComponent(`${params['dataset']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SENDIG Dataset Variable
   * @param params.version CDISC Library Product Version
   * @param params.dataset SENDIG Class Identifier
   * @param params._var SENDIG Variable Identifier
   */
  async mdrSendigVersionDatasetsDatasetVariablesVarGet(params: IMdrSendigVersionDatasetsDatasetVariablesVarGetParams): Promise<SendigDatasetVariable> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSendigVersionDatasetsDatasetVariablesVarGet', params, 'version');
    this.ensureParamIsSet('mdrSendigVersionDatasetsDatasetVariablesVarGet', params, 'dataset');
    this.ensureParamIsSet('mdrSendigVersionDatasetsDatasetVariablesVarGet', params, '_var');

    // Create URL to call
    const url = `${this.basePath}/mdr/sendig/{version}/datasets/{dataset}/variables/{var}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'dataset'}}`, encodeURIComponent(`${params['dataset']}`))
      .replace(`{${'var'}}`, encodeURIComponent(`${params['_var']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SENDIG Dataset List
   * @param params.version CDISC Library Product Version
   */
  async mdrSendigVersionDatasetsGet(params: IMdrSendigVersionDatasetsGetParams): Promise<SendigDatasets> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSendigVersionDatasetsGet', params, 'version');

    // Create URL to call
    const url = `${this.basePath}/mdr/sendig/{version}/datasets`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SENDIG product
   * @param params.version CDISC Library Product Version
   */
  async mdrSendigVersionGet(params: IMdrSendigVersionGetParams): Promise<SendigProduct> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSendigVersionGet', params, 'version');

    // Create URL to call
    const url = `${this.basePath}/mdr/sendig/{version}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}


/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/QrsProduct.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

QrsProduct::QrsProduct()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Label = utility::conversions::to_string_t("");
    m_LabelIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_EffectiveDate = utility::conversions::to_string_t("");
    m_EffectiveDateIsSet = false;
    m_UntilDate = utility::conversions::to_string_t("");
    m_UntilDateIsSet = false;
    m_RegistrationStatus = utility::conversions::to_string_t("");
    m_RegistrationStatusIsSet = false;
    m_Version = utility::conversions::to_string_t("");
    m_VersionIsSet = false;
    m_QrsType = utility::conversions::to_string_t("");
    m_QrsTypeIsSet = false;
    m__linksIsSet = false;
    m_ItemsIsSet = false;
}

QrsProduct::~QrsProduct()
{
}

void QrsProduct::validate()
{
    // TODO: implement validation
}

web::json::value QrsProduct::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_LabelIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("label"))] = ModelBase::toJson(m_Label);
    }
    if(m_DescriptionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_EffectiveDateIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("effectiveDate"))] = ModelBase::toJson(m_EffectiveDate);
    }
    if(m_UntilDateIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("untilDate"))] = ModelBase::toJson(m_UntilDate);
    }
    if(m_RegistrationStatusIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("registrationStatus"))] = ModelBase::toJson(m_RegistrationStatus);
    }
    if(m_VersionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("version"))] = ModelBase::toJson(m_Version);
    }
    if(m_QrsTypeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("qrsType"))] = ModelBase::toJson(m_QrsType);
    }
    if(m__linksIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("_links"))] = ModelBase::toJson(m__links);
    }
    if(m_ItemsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("items"))] = ModelBase::toJson(m_Items);
    }

    return val;
}

bool QrsProduct::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLabel);
            setLabel(refVal_setLabel);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("effectiveDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("effectiveDate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEffectiveDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEffectiveDate);
            setEffectiveDate(refVal_setEffectiveDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("untilDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("untilDate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUntilDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUntilDate);
            setUntilDate(refVal_setUntilDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("registrationStatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("registrationStatus")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRegistrationStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRegistrationStatus);
            setRegistrationStatus(refVal_setRegistrationStatus);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("qrsType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("qrsType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setQrsType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQrsType);
            setQrsType(refVal_setQrsType);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("_links"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("_links")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<QrsProductLinks> refVal_setLinks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLinks);
            setLinks(refVal_setLinks);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("items"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("items")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<QrsItem>> refVal_setItems;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItems);
            setItems(refVal_setItems);
            
        }
    }
    return ok;
}

void QrsProduct::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("name")), m_Name));
    }
    if(m_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("label")), m_Label));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("description")), m_Description));
    }
    if(m_EffectiveDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("effectiveDate")), m_EffectiveDate));
    }
    if(m_UntilDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("untilDate")), m_UntilDate));
    }
    if(m_RegistrationStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("registrationStatus")), m_RegistrationStatus));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("version")), m_Version));
    }
    if(m_QrsTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("qrsType")), m_QrsType));
    }
    if(m__linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("_links")), m__links));
    }
    if(m_ItemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("items")), m_Items));
    }
}

bool QrsProduct::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("label"))))
    {
        utility::string_t refVal_setLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("label"))), refVal_setLabel );
        setLabel(refVal_setLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("effectiveDate"))))
    {
        utility::string_t refVal_setEffectiveDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("effectiveDate"))), refVal_setEffectiveDate );
        setEffectiveDate(refVal_setEffectiveDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("untilDate"))))
    {
        utility::string_t refVal_setUntilDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("untilDate"))), refVal_setUntilDate );
        setUntilDate(refVal_setUntilDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("registrationStatus"))))
    {
        utility::string_t refVal_setRegistrationStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("registrationStatus"))), refVal_setRegistrationStatus );
        setRegistrationStatus(refVal_setRegistrationStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("version"))))
    {
        utility::string_t refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("qrsType"))))
    {
        utility::string_t refVal_setQrsType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("qrsType"))), refVal_setQrsType );
        setQrsType(refVal_setQrsType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("_links"))))
    {
        std::shared_ptr<QrsProductLinks> refVal_setLinks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("_links"))), refVal_setLinks );
        setLinks(refVal_setLinks);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("items"))))
    {
        std::vector<std::shared_ptr<QrsItem>> refVal_setItems;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("items"))), refVal_setItems );
        setItems(refVal_setItems);
    }
    return ok;
}


utility::string_t QrsProduct::getName() const
{
    return m_Name;
}


void QrsProduct::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool QrsProduct::nameIsSet() const
{
    return m_NameIsSet;
}

void QrsProduct::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t QrsProduct::getLabel() const
{
    return m_Label;
}


void QrsProduct::setLabel(const utility::string_t& value)
{
    m_Label = value;
    m_LabelIsSet = true;
}

bool QrsProduct::labelIsSet() const
{
    return m_LabelIsSet;
}

void QrsProduct::unsetLabel()
{
    m_LabelIsSet = false;
}
utility::string_t QrsProduct::getDescription() const
{
    return m_Description;
}


void QrsProduct::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool QrsProduct::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void QrsProduct::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t QrsProduct::getEffectiveDate() const
{
    return m_EffectiveDate;
}


void QrsProduct::setEffectiveDate(const utility::string_t& value)
{
    m_EffectiveDate = value;
    m_EffectiveDateIsSet = true;
}

bool QrsProduct::effectiveDateIsSet() const
{
    return m_EffectiveDateIsSet;
}

void QrsProduct::unsetEffectiveDate()
{
    m_EffectiveDateIsSet = false;
}
utility::string_t QrsProduct::getUntilDate() const
{
    return m_UntilDate;
}


void QrsProduct::setUntilDate(const utility::string_t& value)
{
    m_UntilDate = value;
    m_UntilDateIsSet = true;
}

bool QrsProduct::untilDateIsSet() const
{
    return m_UntilDateIsSet;
}

void QrsProduct::unsetUntilDate()
{
    m_UntilDateIsSet = false;
}
utility::string_t QrsProduct::getRegistrationStatus() const
{
    return m_RegistrationStatus;
}


void QrsProduct::setRegistrationStatus(const utility::string_t& value)
{
    m_RegistrationStatus = value;
    m_RegistrationStatusIsSet = true;
}

bool QrsProduct::registrationStatusIsSet() const
{
    return m_RegistrationStatusIsSet;
}

void QrsProduct::unsetRegistrationStatus()
{
    m_RegistrationStatusIsSet = false;
}
utility::string_t QrsProduct::getVersion() const
{
    return m_Version;
}


void QrsProduct::setVersion(const utility::string_t& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool QrsProduct::versionIsSet() const
{
    return m_VersionIsSet;
}

void QrsProduct::unsetVersion()
{
    m_VersionIsSet = false;
}
utility::string_t QrsProduct::getQrsType() const
{
    return m_QrsType;
}


void QrsProduct::setQrsType(const utility::string_t& value)
{
    m_QrsType = value;
    m_QrsTypeIsSet = true;
}

bool QrsProduct::qrsTypeIsSet() const
{
    return m_QrsTypeIsSet;
}

void QrsProduct::unsetQrsType()
{
    m_QrsTypeIsSet = false;
}
std::shared_ptr<QrsProductLinks> QrsProduct::getLinks() const
{
    return m__links;
}


void QrsProduct::setLinks(const std::shared_ptr<QrsProductLinks>& value)
{
    m__links = value;
    m__linksIsSet = true;
}

bool QrsProduct::linksIsSet() const
{
    return m__linksIsSet;
}

void QrsProduct::unset_links()
{
    m__linksIsSet = false;
}
std::vector<std::shared_ptr<QrsItem>> QrsProduct::getItems() const
{
    return m_Items;
}


void QrsProduct::setItems(const std::vector<std::shared_ptr<QrsItem>>& value)
{
    m_Items = value;
    m_ItemsIsSet = true;
}

bool QrsProduct::itemsIsSet() const
{
    return m_ItemsIsSet;
}

void QrsProduct::unsetItems()
{
    m_ItemsIsSet = false;
}

}
}
}
}



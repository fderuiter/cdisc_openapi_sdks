/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExportCtTerm model module.
 * @module model/ExportCtTerm
 * @version 1.1.0
 */
class ExportCtTerm {
    /**
     * Constructs a new <code>ExportCtTerm</code>.
     * @alias module:model/ExportCtTerm
     */
    constructor() { 
        
        ExportCtTerm.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExportCtTerm</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExportCtTerm} obj Optional instance to populate.
     * @return {module:model/ExportCtTerm} The populated <code>ExportCtTerm</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExportCtTerm();

            if (data.hasOwnProperty('bundle-1')) {
                obj['bundle-1'] = ApiClient.convertToType(data['bundle-1'], 'String');
            }
            if (data.hasOwnProperty('CDISC Synonym(s)')) {
                obj['CDISC Synonym(s)'] = ApiClient.convertToType(data['CDISC Synonym(s)'], ['String']);
            }
            if (data.hasOwnProperty('bundle-2')) {
                obj['bundle-2'] = ApiClient.convertToType(data['bundle-2'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExportCtTerm</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExportCtTerm</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bundle-1'] && !(typeof data['bundle-1'] === 'string' || data['bundle-1'] instanceof String)) {
            throw new Error("Expected the field `bundle-1` to be a primitive type in the JSON string but got " + data['bundle-1']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['CDISC Synonym(s)'])) {
            throw new Error("Expected the field `CDISC Synonym(s)` to be an array in the JSON data but got " + data['CDISC Synonym(s)']);
        }
        // ensure the json data is a string
        if (data['bundle-2'] && !(typeof data['bundle-2'] === 'string' || data['bundle-2'] instanceof String)) {
            throw new Error("Expected the field `bundle-2` to be a primitive type in the JSON string but got " + data['bundle-2']);
        }

        return true;
    }


}



/**
 * @member {String} bundle-1
 */
ExportCtTerm.prototype['bundle-1'] = undefined;

/**
 * @member {Array.<String>} CDISC Synonym(s)
 */
ExportCtTerm.prototype['CDISC Synonym(s)'] = undefined;

/**
 * @member {String} bundle-2
 */
ExportCtTerm.prototype['bundle-2'] = undefined;






export default ExportCtTerm;


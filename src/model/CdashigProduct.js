/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CdashigClass from './CdashigClass';
import CdashigProductLinks from './CdashigProductLinks';

/**
 * The CdashigProduct model module.
 * @module model/CdashigProduct
 * @version 1.1.0
 */
class CdashigProduct {
    /**
     * Constructs a new <code>CdashigProduct</code>.
     * @alias module:model/CdashigProduct
     */
    constructor() { 
        
        CdashigProduct.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CdashigProduct</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CdashigProduct} obj Optional instance to populate.
     * @return {module:model/CdashigProduct} The populated <code>CdashigProduct</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CdashigProduct();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('effectiveDate')) {
                obj['effectiveDate'] = ApiClient.convertToType(data['effectiveDate'], 'String');
            }
            if (data.hasOwnProperty('registrationStatus')) {
                obj['registrationStatus'] = ApiClient.convertToType(data['registrationStatus'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('_links')) {
                obj['_links'] = CdashigProductLinks.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('classes')) {
                obj['classes'] = ApiClient.convertToType(data['classes'], [CdashigClass]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CdashigProduct</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CdashigProduct</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['effectiveDate'] && !(typeof data['effectiveDate'] === 'string' || data['effectiveDate'] instanceof String)) {
            throw new Error("Expected the field `effectiveDate` to be a primitive type in the JSON string but got " + data['effectiveDate']);
        }
        // ensure the json data is a string
        if (data['registrationStatus'] && !(typeof data['registrationStatus'] === 'string' || data['registrationStatus'] instanceof String)) {
            throw new Error("Expected the field `registrationStatus` to be a primitive type in the JSON string but got " + data['registrationStatus']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          CdashigProductLinks.validateJSON(data['_links']);
        }
        if (data['classes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['classes'])) {
                throw new Error("Expected the field `classes` to be an array in the JSON data but got " + data['classes']);
            }
            // validate the optional field `classes` (array)
            for (const item of data['classes']) {
                CdashigClass.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} name
 */
CdashigProduct.prototype['name'] = undefined;

/**
 * @member {String} label
 */
CdashigProduct.prototype['label'] = undefined;

/**
 * @member {String} description
 */
CdashigProduct.prototype['description'] = undefined;

/**
 * @member {String} source
 */
CdashigProduct.prototype['source'] = undefined;

/**
 * @member {String} effectiveDate
 */
CdashigProduct.prototype['effectiveDate'] = undefined;

/**
 * @member {String} registrationStatus
 */
CdashigProduct.prototype['registrationStatus'] = undefined;

/**
 * @member {String} version
 */
CdashigProduct.prototype['version'] = undefined;

/**
 * @member {module:model/CdashigProductLinks} _links
 */
CdashigProduct.prototype['_links'] = undefined;

/**
 * @member {Array.<module:model/CdashigClass>} classes
 */
CdashigProduct.prototype['classes'] = undefined;






export default CdashigProduct;


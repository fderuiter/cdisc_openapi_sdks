/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/MaintenanceBody.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

MaintenanceBody::MaintenanceBody()
{
    m_MaintenanceMode = false;
    m_MaintenanceModeIsSet = false;
    m_MaintenanceMessage = utility::conversions::to_string_t("");
    m_MaintenanceMessageIsSet = false;
}

MaintenanceBody::~MaintenanceBody()
{
}

void MaintenanceBody::validate()
{
    // TODO: implement validation
}

web::json::value MaintenanceBody::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_MaintenanceModeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("maintenanceMode"))] = ModelBase::toJson(m_MaintenanceMode);
    }
    if(m_MaintenanceMessageIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("maintenanceMessage"))] = ModelBase::toJson(m_MaintenanceMessage);
    }

    return val;
}

bool MaintenanceBody::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("maintenanceMode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("maintenanceMode")));
        if(!fieldValue.is_null())
        {
            bool refVal_setMaintenanceMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaintenanceMode);
            setMaintenanceMode(refVal_setMaintenanceMode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("maintenanceMessage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("maintenanceMessage")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMaintenanceMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaintenanceMessage);
            setMaintenanceMessage(refVal_setMaintenanceMessage);
            
        }
    }
    return ok;
}

void MaintenanceBody::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_MaintenanceModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("maintenanceMode")), m_MaintenanceMode));
    }
    if(m_MaintenanceMessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("maintenanceMessage")), m_MaintenanceMessage));
    }
}

bool MaintenanceBody::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("maintenanceMode"))))
    {
        bool refVal_setMaintenanceMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("maintenanceMode"))), refVal_setMaintenanceMode );
        setMaintenanceMode(refVal_setMaintenanceMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("maintenanceMessage"))))
    {
        utility::string_t refVal_setMaintenanceMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("maintenanceMessage"))), refVal_setMaintenanceMessage );
        setMaintenanceMessage(refVal_setMaintenanceMessage);
    }
    return ok;
}


bool MaintenanceBody::isMaintenanceMode() const
{
    return m_MaintenanceMode;
}

void MaintenanceBody::setMaintenanceMode(bool value)
{
    m_MaintenanceMode = value;
    m_MaintenanceModeIsSet = true;
}

bool MaintenanceBody::maintenanceModeIsSet() const
{
    return m_MaintenanceModeIsSet;
}

void MaintenanceBody::unsetMaintenanceMode()
{
    m_MaintenanceModeIsSet = false;
}
utility::string_t MaintenanceBody::getMaintenanceMessage() const
{
    return m_MaintenanceMessage;
}


void MaintenanceBody::setMaintenanceMessage(const utility::string_t& value)
{
    m_MaintenanceMessage = value;
    m_MaintenanceMessageIsSet = true;
}

bool MaintenanceBody::maintenanceMessageIsSet() const
{
    return m_MaintenanceMessageIsSet;
}

void MaintenanceBody::unsetMaintenanceMessage()
{
    m_MaintenanceMessageIsSet = false;
}

}
}
}
}



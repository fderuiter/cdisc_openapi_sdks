/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ExportCtTerm.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ExportCtTerm::ExportCtTerm()
{
    m_Bundle_1 = utility::conversions::to_string_t("");
    m_Bundle_1IsSet = false;
    m_CDISC_Synonym_sIsSet = false;
    m_Bundle_2 = utility::conversions::to_string_t("");
    m_Bundle_2IsSet = false;
}

ExportCtTerm::~ExportCtTerm()
{
}

void ExportCtTerm::validate()
{
    // TODO: implement validation
}

web::json::value ExportCtTerm::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Bundle_1IsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("bundle-1"))] = ModelBase::toJson(m_Bundle_1);
    }
    if(m_CDISC_Synonym_sIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("CDISC Synonym(s)"))] = ModelBase::toJson(m_CDISC_Synonym_s);
    }
    if(m_Bundle_2IsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("bundle-2"))] = ModelBase::toJson(m_Bundle_2);
    }

    return val;
}

bool ExportCtTerm::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("bundle-1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("bundle-1")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBundle1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBundle1);
            setBundle1(refVal_setBundle1);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("CDISC Synonym(s)"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("CDISC Synonym(s)")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCDISCSynonymS;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCDISCSynonymS);
            setCDISCSynonymS(refVal_setCDISCSynonymS);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("bundle-2"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("bundle-2")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBundle2;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBundle2);
            setBundle2(refVal_setBundle2);
            
        }
    }
    return ok;
}

void ExportCtTerm::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Bundle_1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("bundle-1")), m_Bundle_1));
    }
    if(m_CDISC_Synonym_sIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("CDISC Synonym(s)")), m_CDISC_Synonym_s));
    }
    if(m_Bundle_2IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("bundle-2")), m_Bundle_2));
    }
}

bool ExportCtTerm::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("bundle-1"))))
    {
        utility::string_t refVal_setBundle1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("bundle-1"))), refVal_setBundle1 );
        setBundle1(refVal_setBundle1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("CDISC Synonym(s)"))))
    {
        std::vector<utility::string_t> refVal_setCDISCSynonymS;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("CDISC Synonym(s)"))), refVal_setCDISCSynonymS );
        setCDISCSynonymS(refVal_setCDISCSynonymS);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("bundle-2"))))
    {
        utility::string_t refVal_setBundle2;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("bundle-2"))), refVal_setBundle2 );
        setBundle2(refVal_setBundle2);
    }
    return ok;
}


utility::string_t ExportCtTerm::getBundle1() const
{
    return m_Bundle_1;
}


void ExportCtTerm::setBundle1(const utility::string_t& value)
{
    m_Bundle_1 = value;
    m_Bundle_1IsSet = true;
}

bool ExportCtTerm::bundle1IsSet() const
{
    return m_Bundle_1IsSet;
}

void ExportCtTerm::unsetBundle_1()
{
    m_Bundle_1IsSet = false;
}
std::vector<utility::string_t> ExportCtTerm::getCDISCSynonymS() const
{
    return m_CDISC_Synonym_s;
}


void ExportCtTerm::setCDISCSynonymS(const std::vector<utility::string_t>& value)
{
    m_CDISC_Synonym_s = value;
    m_CDISC_Synonym_sIsSet = true;
}

bool ExportCtTerm::cDISCSynonymSIsSet() const
{
    return m_CDISC_Synonym_sIsSet;
}

void ExportCtTerm::unsetCDISC_Synonym_s()
{
    m_CDISC_Synonym_sIsSet = false;
}
utility::string_t ExportCtTerm::getBundle2() const
{
    return m_Bundle_2;
}


void ExportCtTerm::setBundle2(const utility::string_t& value)
{
    m_Bundle_2 = value;
    m_Bundle_2IsSet = true;
}

bool ExportCtTerm::bundle2IsSet() const
{
    return m_Bundle_2IsSet;
}

void ExportCtTerm::unsetBundle_2()
{
    m_Bundle_2IsSet = false;
}

}
}
}
}



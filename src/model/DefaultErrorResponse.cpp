/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DefaultErrorResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

DefaultErrorResponse::DefaultErrorResponse()
{
    m_StatusCode = utility::conversions::to_string_t("");
    m_StatusCodeIsSet = false;
    m_ReasonPhrase = utility::conversions::to_string_t("");
    m_ReasonPhraseIsSet = false;
    m_UserMessage = utility::conversions::to_string_t("");
    m_UserMessageIsSet = false;
    m_AdminMessage = utility::conversions::to_string_t("");
    m_AdminMessageIsSet = false;
}

DefaultErrorResponse::~DefaultErrorResponse()
{
}

void DefaultErrorResponse::validate()
{
    // TODO: implement validation
}

web::json::value DefaultErrorResponse::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_StatusCodeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("statusCode"))] = ModelBase::toJson(m_StatusCode);
    }
    if(m_ReasonPhraseIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("reasonPhrase"))] = ModelBase::toJson(m_ReasonPhrase);
    }
    if(m_UserMessageIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("userMessage"))] = ModelBase::toJson(m_UserMessage);
    }
    if(m_AdminMessageIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("adminMessage"))] = ModelBase::toJson(m_AdminMessage);
    }

    return val;
}

bool DefaultErrorResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("statusCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("statusCode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatusCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatusCode);
            setStatusCode(refVal_setStatusCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("reasonPhrase"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("reasonPhrase")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReasonPhrase;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReasonPhrase);
            setReasonPhrase(refVal_setReasonPhrase);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("userMessage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("userMessage")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserMessage);
            setUserMessage(refVal_setUserMessage);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("adminMessage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("adminMessage")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdminMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdminMessage);
            setAdminMessage(refVal_setAdminMessage);
            
        }
    }
    return ok;
}

void DefaultErrorResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_StatusCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("statusCode")), m_StatusCode));
    }
    if(m_ReasonPhraseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("reasonPhrase")), m_ReasonPhrase));
    }
    if(m_UserMessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("userMessage")), m_UserMessage));
    }
    if(m_AdminMessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("adminMessage")), m_AdminMessage));
    }
}

bool DefaultErrorResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("statusCode"))))
    {
        utility::string_t refVal_setStatusCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("statusCode"))), refVal_setStatusCode );
        setStatusCode(refVal_setStatusCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("reasonPhrase"))))
    {
        utility::string_t refVal_setReasonPhrase;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("reasonPhrase"))), refVal_setReasonPhrase );
        setReasonPhrase(refVal_setReasonPhrase);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("userMessage"))))
    {
        utility::string_t refVal_setUserMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("userMessage"))), refVal_setUserMessage );
        setUserMessage(refVal_setUserMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("adminMessage"))))
    {
        utility::string_t refVal_setAdminMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("adminMessage"))), refVal_setAdminMessage );
        setAdminMessage(refVal_setAdminMessage);
    }
    return ok;
}


utility::string_t DefaultErrorResponse::getStatusCode() const
{
    return m_StatusCode;
}


void DefaultErrorResponse::setStatusCode(const utility::string_t& value)
{
    m_StatusCode = value;
    m_StatusCodeIsSet = true;
}

bool DefaultErrorResponse::statusCodeIsSet() const
{
    return m_StatusCodeIsSet;
}

void DefaultErrorResponse::unsetStatusCode()
{
    m_StatusCodeIsSet = false;
}
utility::string_t DefaultErrorResponse::getReasonPhrase() const
{
    return m_ReasonPhrase;
}


void DefaultErrorResponse::setReasonPhrase(const utility::string_t& value)
{
    m_ReasonPhrase = value;
    m_ReasonPhraseIsSet = true;
}

bool DefaultErrorResponse::reasonPhraseIsSet() const
{
    return m_ReasonPhraseIsSet;
}

void DefaultErrorResponse::unsetReasonPhrase()
{
    m_ReasonPhraseIsSet = false;
}
utility::string_t DefaultErrorResponse::getUserMessage() const
{
    return m_UserMessage;
}


void DefaultErrorResponse::setUserMessage(const utility::string_t& value)
{
    m_UserMessage = value;
    m_UserMessageIsSet = true;
}

bool DefaultErrorResponse::userMessageIsSet() const
{
    return m_UserMessageIsSet;
}

void DefaultErrorResponse::unsetUserMessage()
{
    m_UserMessageIsSet = false;
}
utility::string_t DefaultErrorResponse::getAdminMessage() const
{
    return m_AdminMessage;
}


void DefaultErrorResponse::setAdminMessage(const utility::string_t& value)
{
    m_AdminMessage = value;
    m_AdminMessageIsSet = true;
}

bool DefaultErrorResponse::adminMessageIsSet() const
{
    return m_AdminMessageIsSet;
}

void DefaultErrorResponse::unsetAdminMessage()
{
    m_AdminMessageIsSet = false;
}

}
}
}
}



/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExportCdashClassVariablesRow from './ExportCdashClassVariablesRow';
import ExportCdashDomainVariablesRow from './ExportCdashDomainVariablesRow';

/**
 * The ExportCdashTable model module.
 * @module model/ExportCdashTable
 * @version 1.1.0
 */
class ExportCdashTable {
    /**
     * Constructs a new <code>ExportCdashTable</code>.
     * @alias module:model/ExportCdashTable
     */
    constructor() { 
        
        ExportCdashTable.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExportCdashTable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExportCdashTable} obj Optional instance to populate.
     * @return {module:model/ExportCdashTable} The populated <code>ExportCdashTable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExportCdashTable();

            if (data.hasOwnProperty('class-variables')) {
                obj['class-variables'] = ApiClient.convertToType(data['class-variables'], [ExportCdashClassVariablesRow]);
            }
            if (data.hasOwnProperty('domain-variables')) {
                obj['domain-variables'] = ApiClient.convertToType(data['domain-variables'], [ExportCdashDomainVariablesRow]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExportCdashTable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExportCdashTable</code>.
     */
    static validateJSON(data) {
        if (data['class-variables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['class-variables'])) {
                throw new Error("Expected the field `class-variables` to be an array in the JSON data but got " + data['class-variables']);
            }
            // validate the optional field `class-variables` (array)
            for (const item of data['class-variables']) {
                ExportCdashClassVariablesRow.validateJSON(item);
            };
        }
        if (data['domain-variables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['domain-variables'])) {
                throw new Error("Expected the field `domain-variables` to be an array in the JSON data but got " + data['domain-variables']);
            }
            // validate the optional field `domain-variables` (array)
            for (const item of data['domain-variables']) {
                ExportCdashDomainVariablesRow.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/ExportCdashClassVariablesRow>} class-variables
 */
ExportCdashTable.prototype['class-variables'] = undefined;

/**
 * @member {Array.<module:model/ExportCdashDomainVariablesRow>} domain-variables
 */
ExportCdashTable.prototype['domain-variables'] = undefined;






export default ExportCdashTable;


/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ExportAdamVariablesRow.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ExportAdamVariablesRow::ExportAdamVariablesRow()
{
    m_Version = utility::conversions::to_string_t("");
    m_VersionIsSet = false;
    m_Data_Structure_Name = utility::conversions::to_string_t("");
    m_Data_Structure_NameIsSet = false;
    m_Dataset_Name = utility::conversions::to_string_t("");
    m_Dataset_NameIsSet = false;
    m_Variable_Group = utility::conversions::to_string_t("");
    m_Variable_GroupIsSet = false;
    m_Variable_Name = utility::conversions::to_string_t("");
    m_Variable_NameIsSet = false;
    m_Variable_Label = utility::conversions::to_string_t("");
    m_Variable_LabelIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Codelist_Controlled_Terms = utility::conversions::to_string_t("");
    m_Codelist_Controlled_TermsIsSet = false;
    m_Core = utility::conversions::to_string_t("");
    m_CoreIsSet = false;
    m_CDISC_Notes = utility::conversions::to_string_t("");
    m_CDISC_NotesIsSet = false;
}

ExportAdamVariablesRow::~ExportAdamVariablesRow()
{
}

void ExportAdamVariablesRow::validate()
{
    // TODO: implement validation
}

web::json::value ExportAdamVariablesRow::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_VersionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Version"))] = ModelBase::toJson(m_Version);
    }
    if(m_Data_Structure_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Data Structure Name"))] = ModelBase::toJson(m_Data_Structure_Name);
    }
    if(m_Dataset_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Dataset Name"))] = ModelBase::toJson(m_Dataset_Name);
    }
    if(m_Variable_GroupIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Variable Group"))] = ModelBase::toJson(m_Variable_Group);
    }
    if(m_Variable_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Variable Name"))] = ModelBase::toJson(m_Variable_Name);
    }
    if(m_Variable_LabelIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Variable Label"))] = ModelBase::toJson(m_Variable_Label);
    }
    if(m_TypeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Type"))] = ModelBase::toJson(m_Type);
    }
    if(m_Codelist_Controlled_TermsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Codelist/Controlled Terms"))] = ModelBase::toJson(m_Codelist_Controlled_Terms);
    }
    if(m_CoreIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Core"))] = ModelBase::toJson(m_Core);
    }
    if(m_CDISC_NotesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("CDISC Notes"))] = ModelBase::toJson(m_CDISC_Notes);
    }

    return val;
}

bool ExportAdamVariablesRow::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Data Structure Name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Data Structure Name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDataStructureName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataStructureName);
            setDataStructureName(refVal_setDataStructureName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Dataset Name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Dataset Name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDatasetName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDatasetName);
            setDatasetName(refVal_setDatasetName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Variable Group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Variable Group")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVariableGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariableGroup);
            setVariableGroup(refVal_setVariableGroup);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Variable Name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Variable Name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVariableName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariableName);
            setVariableName(refVal_setVariableName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Variable Label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Variable Label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVariableLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariableLabel);
            setVariableLabel(refVal_setVariableLabel);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Codelist/Controlled Terms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Codelist/Controlled Terms")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCodelistControlledTerms;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCodelistControlledTerms);
            setCodelistControlledTerms(refVal_setCodelistControlledTerms);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Core"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Core")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCore);
            setCore(refVal_setCore);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("CDISC Notes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("CDISC Notes")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCDISCNotes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCDISCNotes);
            setCDISCNotes(refVal_setCDISCNotes);
            
        }
    }
    return ok;
}

void ExportAdamVariablesRow::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Version")), m_Version));
    }
    if(m_Data_Structure_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Data Structure Name")), m_Data_Structure_Name));
    }
    if(m_Dataset_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Dataset Name")), m_Dataset_Name));
    }
    if(m_Variable_GroupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Variable Group")), m_Variable_Group));
    }
    if(m_Variable_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Variable Name")), m_Variable_Name));
    }
    if(m_Variable_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Variable Label")), m_Variable_Label));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Type")), m_Type));
    }
    if(m_Codelist_Controlled_TermsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Codelist/Controlled Terms")), m_Codelist_Controlled_Terms));
    }
    if(m_CoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Core")), m_Core));
    }
    if(m_CDISC_NotesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("CDISC Notes")), m_CDISC_Notes));
    }
}

bool ExportAdamVariablesRow::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Version"))))
    {
        utility::string_t refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Data Structure Name"))))
    {
        utility::string_t refVal_setDataStructureName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Data Structure Name"))), refVal_setDataStructureName );
        setDataStructureName(refVal_setDataStructureName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Dataset Name"))))
    {
        utility::string_t refVal_setDatasetName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Dataset Name"))), refVal_setDatasetName );
        setDatasetName(refVal_setDatasetName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Variable Group"))))
    {
        utility::string_t refVal_setVariableGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Variable Group"))), refVal_setVariableGroup );
        setVariableGroup(refVal_setVariableGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Variable Name"))))
    {
        utility::string_t refVal_setVariableName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Variable Name"))), refVal_setVariableName );
        setVariableName(refVal_setVariableName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Variable Label"))))
    {
        utility::string_t refVal_setVariableLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Variable Label"))), refVal_setVariableLabel );
        setVariableLabel(refVal_setVariableLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Codelist/Controlled Terms"))))
    {
        utility::string_t refVal_setCodelistControlledTerms;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Codelist/Controlled Terms"))), refVal_setCodelistControlledTerms );
        setCodelistControlledTerms(refVal_setCodelistControlledTerms);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Core"))))
    {
        utility::string_t refVal_setCore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Core"))), refVal_setCore );
        setCore(refVal_setCore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("CDISC Notes"))))
    {
        utility::string_t refVal_setCDISCNotes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("CDISC Notes"))), refVal_setCDISCNotes );
        setCDISCNotes(refVal_setCDISCNotes);
    }
    return ok;
}


utility::string_t ExportAdamVariablesRow::getVersion() const
{
    return m_Version;
}


void ExportAdamVariablesRow::setVersion(const utility::string_t& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool ExportAdamVariablesRow::versionIsSet() const
{
    return m_VersionIsSet;
}

void ExportAdamVariablesRow::unsetVersion()
{
    m_VersionIsSet = false;
}
utility::string_t ExportAdamVariablesRow::getDataStructureName() const
{
    return m_Data_Structure_Name;
}


void ExportAdamVariablesRow::setDataStructureName(const utility::string_t& value)
{
    m_Data_Structure_Name = value;
    m_Data_Structure_NameIsSet = true;
}

bool ExportAdamVariablesRow::dataStructureNameIsSet() const
{
    return m_Data_Structure_NameIsSet;
}

void ExportAdamVariablesRow::unsetData_Structure_Name()
{
    m_Data_Structure_NameIsSet = false;
}
utility::string_t ExportAdamVariablesRow::getDatasetName() const
{
    return m_Dataset_Name;
}


void ExportAdamVariablesRow::setDatasetName(const utility::string_t& value)
{
    m_Dataset_Name = value;
    m_Dataset_NameIsSet = true;
}

bool ExportAdamVariablesRow::datasetNameIsSet() const
{
    return m_Dataset_NameIsSet;
}

void ExportAdamVariablesRow::unsetDataset_Name()
{
    m_Dataset_NameIsSet = false;
}
utility::string_t ExportAdamVariablesRow::getVariableGroup() const
{
    return m_Variable_Group;
}


void ExportAdamVariablesRow::setVariableGroup(const utility::string_t& value)
{
    m_Variable_Group = value;
    m_Variable_GroupIsSet = true;
}

bool ExportAdamVariablesRow::variableGroupIsSet() const
{
    return m_Variable_GroupIsSet;
}

void ExportAdamVariablesRow::unsetVariable_Group()
{
    m_Variable_GroupIsSet = false;
}
utility::string_t ExportAdamVariablesRow::getVariableName() const
{
    return m_Variable_Name;
}


void ExportAdamVariablesRow::setVariableName(const utility::string_t& value)
{
    m_Variable_Name = value;
    m_Variable_NameIsSet = true;
}

bool ExportAdamVariablesRow::variableNameIsSet() const
{
    return m_Variable_NameIsSet;
}

void ExportAdamVariablesRow::unsetVariable_Name()
{
    m_Variable_NameIsSet = false;
}
utility::string_t ExportAdamVariablesRow::getVariableLabel() const
{
    return m_Variable_Label;
}


void ExportAdamVariablesRow::setVariableLabel(const utility::string_t& value)
{
    m_Variable_Label = value;
    m_Variable_LabelIsSet = true;
}

bool ExportAdamVariablesRow::variableLabelIsSet() const
{
    return m_Variable_LabelIsSet;
}

void ExportAdamVariablesRow::unsetVariable_Label()
{
    m_Variable_LabelIsSet = false;
}
utility::string_t ExportAdamVariablesRow::getType() const
{
    return m_Type;
}


void ExportAdamVariablesRow::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool ExportAdamVariablesRow::typeIsSet() const
{
    return m_TypeIsSet;
}

void ExportAdamVariablesRow::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t ExportAdamVariablesRow::getCodelistControlledTerms() const
{
    return m_Codelist_Controlled_Terms;
}


void ExportAdamVariablesRow::setCodelistControlledTerms(const utility::string_t& value)
{
    m_Codelist_Controlled_Terms = value;
    m_Codelist_Controlled_TermsIsSet = true;
}

bool ExportAdamVariablesRow::codelistControlledTermsIsSet() const
{
    return m_Codelist_Controlled_TermsIsSet;
}

void ExportAdamVariablesRow::unsetCodelist_Controlled_Terms()
{
    m_Codelist_Controlled_TermsIsSet = false;
}
utility::string_t ExportAdamVariablesRow::getCore() const
{
    return m_Core;
}


void ExportAdamVariablesRow::setCore(const utility::string_t& value)
{
    m_Core = value;
    m_CoreIsSet = true;
}

bool ExportAdamVariablesRow::coreIsSet() const
{
    return m_CoreIsSet;
}

void ExportAdamVariablesRow::unsetCore()
{
    m_CoreIsSet = false;
}
utility::string_t ExportAdamVariablesRow::getCDISCNotes() const
{
    return m_CDISC_Notes;
}


void ExportAdamVariablesRow::setCDISCNotes(const utility::string_t& value)
{
    m_CDISC_Notes = value;
    m_CDISC_NotesIsSet = true;
}

bool ExportAdamVariablesRow::cDISCNotesIsSet() const
{
    return m_CDISC_NotesIsSet;
}

void ExportAdamVariablesRow::unsetCDISC_Notes()
{
    m_CDISC_NotesIsSet = false;
}

}
}
}
}



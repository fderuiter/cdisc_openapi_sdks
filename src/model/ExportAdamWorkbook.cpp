/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ExportAdamWorkbook.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ExportAdamWorkbook::ExportAdamWorkbook()
{
    m_VariablesIsSet = false;
    m_DatastructuresIsSet = false;
}

ExportAdamWorkbook::~ExportAdamWorkbook()
{
}

void ExportAdamWorkbook::validate()
{
    // TODO: implement validation
}

web::json::value ExportAdamWorkbook::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_VariablesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("variables"))] = ModelBase::toJson(m_Variables);
    }
    if(m_DatastructuresIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("datastructures"))] = ModelBase::toJson(m_Datastructures);
    }

    return val;
}

bool ExportAdamWorkbook::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("variables"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("variables")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ExportAdamVariablesRow>> refVal_setVariables;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariables);
            setVariables(refVal_setVariables);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("datastructures"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("datastructures")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ExportAdamDatastructuresRow>> refVal_setDatastructures;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDatastructures);
            setDatastructures(refVal_setDatastructures);
            
        }
    }
    return ok;
}

void ExportAdamWorkbook::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_VariablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("variables")), m_Variables));
    }
    if(m_DatastructuresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("datastructures")), m_Datastructures));
    }
}

bool ExportAdamWorkbook::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("variables"))))
    {
        std::vector<std::shared_ptr<ExportAdamVariablesRow>> refVal_setVariables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("variables"))), refVal_setVariables );
        setVariables(refVal_setVariables);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("datastructures"))))
    {
        std::vector<std::shared_ptr<ExportAdamDatastructuresRow>> refVal_setDatastructures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("datastructures"))), refVal_setDatastructures );
        setDatastructures(refVal_setDatastructures);
    }
    return ok;
}


std::vector<std::shared_ptr<ExportAdamVariablesRow>> ExportAdamWorkbook::getVariables() const
{
    return m_Variables;
}


void ExportAdamWorkbook::setVariables(const std::vector<std::shared_ptr<ExportAdamVariablesRow>>& value)
{
    m_Variables = value;
    m_VariablesIsSet = true;
}

bool ExportAdamWorkbook::variablesIsSet() const
{
    return m_VariablesIsSet;
}

void ExportAdamWorkbook::unsetVariables()
{
    m_VariablesIsSet = false;
}
std::vector<std::shared_ptr<ExportAdamDatastructuresRow>> ExportAdamWorkbook::getDatastructures() const
{
    return m_Datastructures;
}


void ExportAdamWorkbook::setDatastructures(const std::vector<std::shared_ptr<ExportAdamDatastructuresRow>>& value)
{
    m_Datastructures = value;
    m_DatastructuresIsSet = true;
}

bool ExportAdamWorkbook::datastructuresIsSet() const
{
    return m_DatastructuresIsSet;
}

void ExportAdamWorkbook::unsetDatastructures()
{
    m_DatastructuresIsSet = false;
}

}
}
}
}



/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SdtmigDatasetVariablesLinks.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SdtmigDatasetVariablesLinks::SdtmigDatasetVariablesLinks()
{
    m_SelfIsSet = false;
    m_ModelDatasetIsSet = false;
    m_ParentProductIsSet = false;
    m_ParentClassIsSet = false;
    m_PriorVersionIsSet = false;
    m_DatasetVariablesIsSet = false;
}

SdtmigDatasetVariablesLinks::~SdtmigDatasetVariablesLinks()
{
}

void SdtmigDatasetVariablesLinks::validate()
{
    // TODO: implement validation
}

web::json::value SdtmigDatasetVariablesLinks::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SelfIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("self"))] = ModelBase::toJson(m_Self);
    }
    if(m_ModelDatasetIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("modelDataset"))] = ModelBase::toJson(m_ModelDataset);
    }
    if(m_ParentProductIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("parentProduct"))] = ModelBase::toJson(m_ParentProduct);
    }
    if(m_ParentClassIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("parentClass"))] = ModelBase::toJson(m_ParentClass);
    }
    if(m_PriorVersionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("priorVersion"))] = ModelBase::toJson(m_PriorVersion);
    }
    if(m_DatasetVariablesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("datasetVariables"))] = ModelBase::toJson(m_DatasetVariables);
    }

    return val;
}

bool SdtmigDatasetVariablesLinks::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("self")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SdtmigDatasetVariablesRef> refVal_setSelf;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSelf);
            setSelf(refVal_setSelf);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("modelDataset"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("modelDataset")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SdtmDatasetRef> refVal_setModelDataset;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModelDataset);
            setModelDataset(refVal_setModelDataset);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("parentProduct"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("parentProduct")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SdtmigProductRef> refVal_setParentProduct;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParentProduct);
            setParentProduct(refVal_setParentProduct);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("parentClass"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("parentClass")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SdtmigClassRef> refVal_setParentClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParentClass);
            setParentClass(refVal_setParentClass);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("priorVersion")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SdtmigDatasetVariablesRef> refVal_setPriorVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriorVersion);
            setPriorVersion(refVal_setPriorVersion);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("datasetVariables"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("datasetVariables")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SdtmigDatasetVariableRefElement>> refVal_setDatasetVariables;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDatasetVariables);
            setDatasetVariables(refVal_setDatasetVariables);
            
        }
    }
    return ok;
}

void SdtmigDatasetVariablesLinks::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_SelfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("self")), m_Self));
    }
    if(m_ModelDatasetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("modelDataset")), m_ModelDataset));
    }
    if(m_ParentProductIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("parentProduct")), m_ParentProduct));
    }
    if(m_ParentClassIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("parentClass")), m_ParentClass));
    }
    if(m_PriorVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("priorVersion")), m_PriorVersion));
    }
    if(m_DatasetVariablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("datasetVariables")), m_DatasetVariables));
    }
}

bool SdtmigDatasetVariablesLinks::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        std::shared_ptr<SdtmigDatasetVariablesRef> refVal_setSelf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("self"))), refVal_setSelf );
        setSelf(refVal_setSelf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("modelDataset"))))
    {
        std::shared_ptr<SdtmDatasetRef> refVal_setModelDataset;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("modelDataset"))), refVal_setModelDataset );
        setModelDataset(refVal_setModelDataset);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("parentProduct"))))
    {
        std::shared_ptr<SdtmigProductRef> refVal_setParentProduct;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("parentProduct"))), refVal_setParentProduct );
        setParentProduct(refVal_setParentProduct);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("parentClass"))))
    {
        std::shared_ptr<SdtmigClassRef> refVal_setParentClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("parentClass"))), refVal_setParentClass );
        setParentClass(refVal_setParentClass);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))))
    {
        std::shared_ptr<SdtmigDatasetVariablesRef> refVal_setPriorVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))), refVal_setPriorVersion );
        setPriorVersion(refVal_setPriorVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("datasetVariables"))))
    {
        std::vector<std::shared_ptr<SdtmigDatasetVariableRefElement>> refVal_setDatasetVariables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("datasetVariables"))), refVal_setDatasetVariables );
        setDatasetVariables(refVal_setDatasetVariables);
    }
    return ok;
}


std::shared_ptr<SdtmigDatasetVariablesRef> SdtmigDatasetVariablesLinks::getSelf() const
{
    return m_Self;
}


void SdtmigDatasetVariablesLinks::setSelf(const std::shared_ptr<SdtmigDatasetVariablesRef>& value)
{
    m_Self = value;
    m_SelfIsSet = true;
}

bool SdtmigDatasetVariablesLinks::selfIsSet() const
{
    return m_SelfIsSet;
}

void SdtmigDatasetVariablesLinks::unsetSelf()
{
    m_SelfIsSet = false;
}
std::shared_ptr<SdtmDatasetRef> SdtmigDatasetVariablesLinks::getModelDataset() const
{
    return m_ModelDataset;
}


void SdtmigDatasetVariablesLinks::setModelDataset(const std::shared_ptr<SdtmDatasetRef>& value)
{
    m_ModelDataset = value;
    m_ModelDatasetIsSet = true;
}

bool SdtmigDatasetVariablesLinks::modelDatasetIsSet() const
{
    return m_ModelDatasetIsSet;
}

void SdtmigDatasetVariablesLinks::unsetModelDataset()
{
    m_ModelDatasetIsSet = false;
}
std::shared_ptr<SdtmigProductRef> SdtmigDatasetVariablesLinks::getParentProduct() const
{
    return m_ParentProduct;
}


void SdtmigDatasetVariablesLinks::setParentProduct(const std::shared_ptr<SdtmigProductRef>& value)
{
    m_ParentProduct = value;
    m_ParentProductIsSet = true;
}

bool SdtmigDatasetVariablesLinks::parentProductIsSet() const
{
    return m_ParentProductIsSet;
}

void SdtmigDatasetVariablesLinks::unsetParentProduct()
{
    m_ParentProductIsSet = false;
}
std::shared_ptr<SdtmigClassRef> SdtmigDatasetVariablesLinks::getParentClass() const
{
    return m_ParentClass;
}


void SdtmigDatasetVariablesLinks::setParentClass(const std::shared_ptr<SdtmigClassRef>& value)
{
    m_ParentClass = value;
    m_ParentClassIsSet = true;
}

bool SdtmigDatasetVariablesLinks::parentClassIsSet() const
{
    return m_ParentClassIsSet;
}

void SdtmigDatasetVariablesLinks::unsetParentClass()
{
    m_ParentClassIsSet = false;
}
std::shared_ptr<SdtmigDatasetVariablesRef> SdtmigDatasetVariablesLinks::getPriorVersion() const
{
    return m_PriorVersion;
}


void SdtmigDatasetVariablesLinks::setPriorVersion(const std::shared_ptr<SdtmigDatasetVariablesRef>& value)
{
    m_PriorVersion = value;
    m_PriorVersionIsSet = true;
}

bool SdtmigDatasetVariablesLinks::priorVersionIsSet() const
{
    return m_PriorVersionIsSet;
}

void SdtmigDatasetVariablesLinks::unsetPriorVersion()
{
    m_PriorVersionIsSet = false;
}
std::vector<std::shared_ptr<SdtmigDatasetVariableRefElement>> SdtmigDatasetVariablesLinks::getDatasetVariables() const
{
    return m_DatasetVariables;
}


void SdtmigDatasetVariablesLinks::setDatasetVariables(const std::vector<std::shared_ptr<SdtmigDatasetVariableRefElement>>& value)
{
    m_DatasetVariables = value;
    m_DatasetVariablesIsSet = true;
}

bool SdtmigDatasetVariablesLinks::datasetVariablesIsSet() const
{
    return m_DatasetVariablesIsSet;
}

void SdtmigDatasetVariablesLinks::unsetDatasetVariables()
{
    m_DatasetVariablesIsSet = false;
}

}
}
}
}



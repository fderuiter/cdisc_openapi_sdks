/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SendigDatasetVariableLinks.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SendigDatasetVariableLinks::SendigDatasetVariableLinks()
{
    m_SelfIsSet = false;
    m_CodelistIsSet = false;
    m_ModelClassVariableIsSet = false;
    m_ModelDatasetVariableIsSet = false;
    m_ParentProductIsSet = false;
    m_ParentDatasetIsSet = false;
    m_RootItemIsSet = false;
    m_PriorVersionIsSet = false;
}

SendigDatasetVariableLinks::~SendigDatasetVariableLinks()
{
}

void SendigDatasetVariableLinks::validate()
{
    // TODO: implement validation
}

web::json::value SendigDatasetVariableLinks::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SelfIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("self"))] = ModelBase::toJson(m_Self);
    }
    if(m_CodelistIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("codelist"))] = ModelBase::toJson(m_Codelist);
    }
    if(m_ModelClassVariableIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("modelClassVariable"))] = ModelBase::toJson(m_ModelClassVariable);
    }
    if(m_ModelDatasetVariableIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("modelDatasetVariable"))] = ModelBase::toJson(m_ModelDatasetVariable);
    }
    if(m_ParentProductIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("parentProduct"))] = ModelBase::toJson(m_ParentProduct);
    }
    if(m_ParentDatasetIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("parentDataset"))] = ModelBase::toJson(m_ParentDataset);
    }
    if(m_RootItemIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("rootItem"))] = ModelBase::toJson(m_RootItem);
    }
    if(m_PriorVersionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("priorVersion"))] = ModelBase::toJson(m_PriorVersion);
    }

    return val;
}

bool SendigDatasetVariableLinks::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("self")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SendigDatasetVariableRef> refVal_setSelf;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSelf);
            setSelf(refVal_setSelf);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("codelist"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("codelist")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<RootCtCodelistRefElement>> refVal_setCodelist;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCodelist);
            setCodelist(refVal_setCodelist);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("modelClassVariable"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("modelClassVariable")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SdtmClassVariableRef> refVal_setModelClassVariable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModelClassVariable);
            setModelClassVariable(refVal_setModelClassVariable);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("modelDatasetVariable"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("modelDatasetVariable")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SdtmDatasetVariableRef> refVal_setModelDatasetVariable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModelDatasetVariable);
            setModelDatasetVariable(refVal_setModelDatasetVariable);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("parentProduct"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("parentProduct")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SendigProductRef> refVal_setParentProduct;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParentProduct);
            setParentProduct(refVal_setParentProduct);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("parentDataset"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("parentDataset")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SendigDatasetRef> refVal_setParentDataset;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParentDataset);
            setParentDataset(refVal_setParentDataset);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("rootItem"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("rootItem")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RootSendigDatasetVariableRef> refVal_setRootItem;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRootItem);
            setRootItem(refVal_setRootItem);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("priorVersion")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SendigDatasetVariableRef> refVal_setPriorVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriorVersion);
            setPriorVersion(refVal_setPriorVersion);
            
        }
    }
    return ok;
}

void SendigDatasetVariableLinks::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_SelfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("self")), m_Self));
    }
    if(m_CodelistIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("codelist")), m_Codelist));
    }
    if(m_ModelClassVariableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("modelClassVariable")), m_ModelClassVariable));
    }
    if(m_ModelDatasetVariableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("modelDatasetVariable")), m_ModelDatasetVariable));
    }
    if(m_ParentProductIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("parentProduct")), m_ParentProduct));
    }
    if(m_ParentDatasetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("parentDataset")), m_ParentDataset));
    }
    if(m_RootItemIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("rootItem")), m_RootItem));
    }
    if(m_PriorVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("priorVersion")), m_PriorVersion));
    }
}

bool SendigDatasetVariableLinks::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        std::shared_ptr<SendigDatasetVariableRef> refVal_setSelf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("self"))), refVal_setSelf );
        setSelf(refVal_setSelf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("codelist"))))
    {
        std::vector<std::shared_ptr<RootCtCodelistRefElement>> refVal_setCodelist;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("codelist"))), refVal_setCodelist );
        setCodelist(refVal_setCodelist);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("modelClassVariable"))))
    {
        std::shared_ptr<SdtmClassVariableRef> refVal_setModelClassVariable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("modelClassVariable"))), refVal_setModelClassVariable );
        setModelClassVariable(refVal_setModelClassVariable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("modelDatasetVariable"))))
    {
        std::shared_ptr<SdtmDatasetVariableRef> refVal_setModelDatasetVariable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("modelDatasetVariable"))), refVal_setModelDatasetVariable );
        setModelDatasetVariable(refVal_setModelDatasetVariable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("parentProduct"))))
    {
        std::shared_ptr<SendigProductRef> refVal_setParentProduct;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("parentProduct"))), refVal_setParentProduct );
        setParentProduct(refVal_setParentProduct);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("parentDataset"))))
    {
        std::shared_ptr<SendigDatasetRef> refVal_setParentDataset;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("parentDataset"))), refVal_setParentDataset );
        setParentDataset(refVal_setParentDataset);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("rootItem"))))
    {
        std::shared_ptr<RootSendigDatasetVariableRef> refVal_setRootItem;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("rootItem"))), refVal_setRootItem );
        setRootItem(refVal_setRootItem);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))))
    {
        std::shared_ptr<SendigDatasetVariableRef> refVal_setPriorVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))), refVal_setPriorVersion );
        setPriorVersion(refVal_setPriorVersion);
    }
    return ok;
}


std::shared_ptr<SendigDatasetVariableRef> SendigDatasetVariableLinks::getSelf() const
{
    return m_Self;
}


void SendigDatasetVariableLinks::setSelf(const std::shared_ptr<SendigDatasetVariableRef>& value)
{
    m_Self = value;
    m_SelfIsSet = true;
}

bool SendigDatasetVariableLinks::selfIsSet() const
{
    return m_SelfIsSet;
}

void SendigDatasetVariableLinks::unsetSelf()
{
    m_SelfIsSet = false;
}
std::vector<std::shared_ptr<RootCtCodelistRefElement>> SendigDatasetVariableLinks::getCodelist() const
{
    return m_Codelist;
}


void SendigDatasetVariableLinks::setCodelist(const std::vector<std::shared_ptr<RootCtCodelistRefElement>>& value)
{
    m_Codelist = value;
    m_CodelistIsSet = true;
}

bool SendigDatasetVariableLinks::codelistIsSet() const
{
    return m_CodelistIsSet;
}

void SendigDatasetVariableLinks::unsetCodelist()
{
    m_CodelistIsSet = false;
}
std::shared_ptr<SdtmClassVariableRef> SendigDatasetVariableLinks::getModelClassVariable() const
{
    return m_ModelClassVariable;
}


void SendigDatasetVariableLinks::setModelClassVariable(const std::shared_ptr<SdtmClassVariableRef>& value)
{
    m_ModelClassVariable = value;
    m_ModelClassVariableIsSet = true;
}

bool SendigDatasetVariableLinks::modelClassVariableIsSet() const
{
    return m_ModelClassVariableIsSet;
}

void SendigDatasetVariableLinks::unsetModelClassVariable()
{
    m_ModelClassVariableIsSet = false;
}
std::shared_ptr<SdtmDatasetVariableRef> SendigDatasetVariableLinks::getModelDatasetVariable() const
{
    return m_ModelDatasetVariable;
}


void SendigDatasetVariableLinks::setModelDatasetVariable(const std::shared_ptr<SdtmDatasetVariableRef>& value)
{
    m_ModelDatasetVariable = value;
    m_ModelDatasetVariableIsSet = true;
}

bool SendigDatasetVariableLinks::modelDatasetVariableIsSet() const
{
    return m_ModelDatasetVariableIsSet;
}

void SendigDatasetVariableLinks::unsetModelDatasetVariable()
{
    m_ModelDatasetVariableIsSet = false;
}
std::shared_ptr<SendigProductRef> SendigDatasetVariableLinks::getParentProduct() const
{
    return m_ParentProduct;
}


void SendigDatasetVariableLinks::setParentProduct(const std::shared_ptr<SendigProductRef>& value)
{
    m_ParentProduct = value;
    m_ParentProductIsSet = true;
}

bool SendigDatasetVariableLinks::parentProductIsSet() const
{
    return m_ParentProductIsSet;
}

void SendigDatasetVariableLinks::unsetParentProduct()
{
    m_ParentProductIsSet = false;
}
std::shared_ptr<SendigDatasetRef> SendigDatasetVariableLinks::getParentDataset() const
{
    return m_ParentDataset;
}


void SendigDatasetVariableLinks::setParentDataset(const std::shared_ptr<SendigDatasetRef>& value)
{
    m_ParentDataset = value;
    m_ParentDatasetIsSet = true;
}

bool SendigDatasetVariableLinks::parentDatasetIsSet() const
{
    return m_ParentDatasetIsSet;
}

void SendigDatasetVariableLinks::unsetParentDataset()
{
    m_ParentDatasetIsSet = false;
}
std::shared_ptr<RootSendigDatasetVariableRef> SendigDatasetVariableLinks::getRootItem() const
{
    return m_RootItem;
}


void SendigDatasetVariableLinks::setRootItem(const std::shared_ptr<RootSendigDatasetVariableRef>& value)
{
    m_RootItem = value;
    m_RootItemIsSet = true;
}

bool SendigDatasetVariableLinks::rootItemIsSet() const
{
    return m_RootItemIsSet;
}

void SendigDatasetVariableLinks::unsetRootItem()
{
    m_RootItemIsSet = false;
}
std::shared_ptr<SendigDatasetVariableRef> SendigDatasetVariableLinks::getPriorVersion() const
{
    return m_PriorVersion;
}


void SendigDatasetVariableLinks::setPriorVersion(const std::shared_ptr<SendigDatasetVariableRef>& value)
{
    m_PriorVersion = value;
    m_PriorVersionIsSet = true;
}

bool SendigDatasetVariableLinks::priorVersionIsSet() const
{
    return m_PriorVersionIsSet;
}

void SendigDatasetVariableLinks::unsetPriorVersion()
{
    m_PriorVersionIsSet = false;
}

}
}
}
}



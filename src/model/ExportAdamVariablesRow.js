/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExportAdamVariablesRow model module.
 * @module model/ExportAdamVariablesRow
 * @version 1.1.0
 */
class ExportAdamVariablesRow {
    /**
     * Constructs a new <code>ExportAdamVariablesRow</code>.
     * @alias module:model/ExportAdamVariablesRow
     */
    constructor() { 
        
        ExportAdamVariablesRow.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExportAdamVariablesRow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExportAdamVariablesRow} obj Optional instance to populate.
     * @return {module:model/ExportAdamVariablesRow} The populated <code>ExportAdamVariablesRow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExportAdamVariablesRow();

            if (data.hasOwnProperty('Version')) {
                obj['Version'] = ApiClient.convertToType(data['Version'], 'String');
            }
            if (data.hasOwnProperty('Data Structure Name')) {
                obj['Data Structure Name'] = ApiClient.convertToType(data['Data Structure Name'], 'String');
            }
            if (data.hasOwnProperty('Dataset Name')) {
                obj['Dataset Name'] = ApiClient.convertToType(data['Dataset Name'], 'String');
            }
            if (data.hasOwnProperty('Variable Group')) {
                obj['Variable Group'] = ApiClient.convertToType(data['Variable Group'], 'String');
            }
            if (data.hasOwnProperty('Variable Name')) {
                obj['Variable Name'] = ApiClient.convertToType(data['Variable Name'], 'String');
            }
            if (data.hasOwnProperty('Variable Label')) {
                obj['Variable Label'] = ApiClient.convertToType(data['Variable Label'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('Codelist/Controlled Terms')) {
                obj['Codelist/Controlled Terms'] = ApiClient.convertToType(data['Codelist/Controlled Terms'], 'String');
            }
            if (data.hasOwnProperty('Core')) {
                obj['Core'] = ApiClient.convertToType(data['Core'], 'String');
            }
            if (data.hasOwnProperty('CDISC Notes')) {
                obj['CDISC Notes'] = ApiClient.convertToType(data['CDISC Notes'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExportAdamVariablesRow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExportAdamVariablesRow</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Version'] && !(typeof data['Version'] === 'string' || data['Version'] instanceof String)) {
            throw new Error("Expected the field `Version` to be a primitive type in the JSON string but got " + data['Version']);
        }
        // ensure the json data is a string
        if (data['Data Structure Name'] && !(typeof data['Data Structure Name'] === 'string' || data['Data Structure Name'] instanceof String)) {
            throw new Error("Expected the field `Data Structure Name` to be a primitive type in the JSON string but got " + data['Data Structure Name']);
        }
        // ensure the json data is a string
        if (data['Dataset Name'] && !(typeof data['Dataset Name'] === 'string' || data['Dataset Name'] instanceof String)) {
            throw new Error("Expected the field `Dataset Name` to be a primitive type in the JSON string but got " + data['Dataset Name']);
        }
        // ensure the json data is a string
        if (data['Variable Group'] && !(typeof data['Variable Group'] === 'string' || data['Variable Group'] instanceof String)) {
            throw new Error("Expected the field `Variable Group` to be a primitive type in the JSON string but got " + data['Variable Group']);
        }
        // ensure the json data is a string
        if (data['Variable Name'] && !(typeof data['Variable Name'] === 'string' || data['Variable Name'] instanceof String)) {
            throw new Error("Expected the field `Variable Name` to be a primitive type in the JSON string but got " + data['Variable Name']);
        }
        // ensure the json data is a string
        if (data['Variable Label'] && !(typeof data['Variable Label'] === 'string' || data['Variable Label'] instanceof String)) {
            throw new Error("Expected the field `Variable Label` to be a primitive type in the JSON string but got " + data['Variable Label']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }
        // ensure the json data is a string
        if (data['Codelist/Controlled Terms'] && !(typeof data['Codelist/Controlled Terms'] === 'string' || data['Codelist/Controlled Terms'] instanceof String)) {
            throw new Error("Expected the field `Codelist/Controlled Terms` to be a primitive type in the JSON string but got " + data['Codelist/Controlled Terms']);
        }
        // ensure the json data is a string
        if (data['Core'] && !(typeof data['Core'] === 'string' || data['Core'] instanceof String)) {
            throw new Error("Expected the field `Core` to be a primitive type in the JSON string but got " + data['Core']);
        }
        // ensure the json data is a string
        if (data['CDISC Notes'] && !(typeof data['CDISC Notes'] === 'string' || data['CDISC Notes'] instanceof String)) {
            throw new Error("Expected the field `CDISC Notes` to be a primitive type in the JSON string but got " + data['CDISC Notes']);
        }

        return true;
    }


}



/**
 * @member {String} Version
 */
ExportAdamVariablesRow.prototype['Version'] = undefined;

/**
 * @member {String} Data Structure Name
 */
ExportAdamVariablesRow.prototype['Data Structure Name'] = undefined;

/**
 * @member {String} Dataset Name
 */
ExportAdamVariablesRow.prototype['Dataset Name'] = undefined;

/**
 * @member {String} Variable Group
 */
ExportAdamVariablesRow.prototype['Variable Group'] = undefined;

/**
 * @member {String} Variable Name
 */
ExportAdamVariablesRow.prototype['Variable Name'] = undefined;

/**
 * @member {String} Variable Label
 */
ExportAdamVariablesRow.prototype['Variable Label'] = undefined;

/**
 * @member {String} Type
 */
ExportAdamVariablesRow.prototype['Type'] = undefined;

/**
 * @member {String} Codelist/Controlled Terms
 */
ExportAdamVariablesRow.prototype['Codelist/Controlled Terms'] = undefined;

/**
 * @member {String} Core
 */
ExportAdamVariablesRow.prototype['Core'] = undefined;

/**
 * @member {String} CDISC Notes
 */
ExportAdamVariablesRow.prototype['CDISC Notes'] = undefined;






export default ExportAdamVariablesRow;


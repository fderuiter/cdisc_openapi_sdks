/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Health.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Health::Health()
{
    m_Healthy = false;
    m_HealthyIsSet = false;
    m_LdapAuthenticationHealthy = false;
    m_LdapAuthenticationHealthyIsSet = false;
    m_LdapAuthorizationHealthy = false;
    m_LdapAuthorizationHealthyIsSet = false;
    m_DatabaseHealthy = false;
    m_DatabaseHealthyIsSet = false;
    m_EsHealthy = false;
    m_EsHealthyIsSet = false;
}

Health::~Health()
{
}

void Health::validate()
{
    // TODO: implement validation
}

web::json::value Health::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_HealthyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("healthy"))] = ModelBase::toJson(m_Healthy);
    }
    if(m_LdapAuthenticationHealthyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("ldapAuthenticationHealthy"))] = ModelBase::toJson(m_LdapAuthenticationHealthy);
    }
    if(m_LdapAuthorizationHealthyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("ldapAuthorizationHealthy"))] = ModelBase::toJson(m_LdapAuthorizationHealthy);
    }
    if(m_DatabaseHealthyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("databaseHealthy"))] = ModelBase::toJson(m_DatabaseHealthy);
    }
    if(m_EsHealthyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("esHealthy"))] = ModelBase::toJson(m_EsHealthy);
    }

    return val;
}

bool Health::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("healthy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("healthy")));
        if(!fieldValue.is_null())
        {
            bool refVal_setHealthy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHealthy);
            setHealthy(refVal_setHealthy);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("ldapAuthenticationHealthy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("ldapAuthenticationHealthy")));
        if(!fieldValue.is_null())
        {
            bool refVal_setLdapAuthenticationHealthy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLdapAuthenticationHealthy);
            setLdapAuthenticationHealthy(refVal_setLdapAuthenticationHealthy);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("ldapAuthorizationHealthy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("ldapAuthorizationHealthy")));
        if(!fieldValue.is_null())
        {
            bool refVal_setLdapAuthorizationHealthy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLdapAuthorizationHealthy);
            setLdapAuthorizationHealthy(refVal_setLdapAuthorizationHealthy);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("databaseHealthy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("databaseHealthy")));
        if(!fieldValue.is_null())
        {
            bool refVal_setDatabaseHealthy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDatabaseHealthy);
            setDatabaseHealthy(refVal_setDatabaseHealthy);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("esHealthy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("esHealthy")));
        if(!fieldValue.is_null())
        {
            bool refVal_setEsHealthy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEsHealthy);
            setEsHealthy(refVal_setEsHealthy);
            
        }
    }
    return ok;
}

void Health::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_HealthyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("healthy")), m_Healthy));
    }
    if(m_LdapAuthenticationHealthyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("ldapAuthenticationHealthy")), m_LdapAuthenticationHealthy));
    }
    if(m_LdapAuthorizationHealthyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("ldapAuthorizationHealthy")), m_LdapAuthorizationHealthy));
    }
    if(m_DatabaseHealthyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("databaseHealthy")), m_DatabaseHealthy));
    }
    if(m_EsHealthyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("esHealthy")), m_EsHealthy));
    }
}

bool Health::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("healthy"))))
    {
        bool refVal_setHealthy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("healthy"))), refVal_setHealthy );
        setHealthy(refVal_setHealthy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("ldapAuthenticationHealthy"))))
    {
        bool refVal_setLdapAuthenticationHealthy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("ldapAuthenticationHealthy"))), refVal_setLdapAuthenticationHealthy );
        setLdapAuthenticationHealthy(refVal_setLdapAuthenticationHealthy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("ldapAuthorizationHealthy"))))
    {
        bool refVal_setLdapAuthorizationHealthy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("ldapAuthorizationHealthy"))), refVal_setLdapAuthorizationHealthy );
        setLdapAuthorizationHealthy(refVal_setLdapAuthorizationHealthy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("databaseHealthy"))))
    {
        bool refVal_setDatabaseHealthy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("databaseHealthy"))), refVal_setDatabaseHealthy );
        setDatabaseHealthy(refVal_setDatabaseHealthy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("esHealthy"))))
    {
        bool refVal_setEsHealthy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("esHealthy"))), refVal_setEsHealthy );
        setEsHealthy(refVal_setEsHealthy);
    }
    return ok;
}


bool Health::isHealthy() const
{
    return m_Healthy;
}

void Health::setHealthy(bool value)
{
    m_Healthy = value;
    m_HealthyIsSet = true;
}

bool Health::healthyIsSet() const
{
    return m_HealthyIsSet;
}

void Health::unsetHealthy()
{
    m_HealthyIsSet = false;
}
bool Health::isLdapAuthenticationHealthy() const
{
    return m_LdapAuthenticationHealthy;
}

void Health::setLdapAuthenticationHealthy(bool value)
{
    m_LdapAuthenticationHealthy = value;
    m_LdapAuthenticationHealthyIsSet = true;
}

bool Health::ldapAuthenticationHealthyIsSet() const
{
    return m_LdapAuthenticationHealthyIsSet;
}

void Health::unsetLdapAuthenticationHealthy()
{
    m_LdapAuthenticationHealthyIsSet = false;
}
bool Health::isLdapAuthorizationHealthy() const
{
    return m_LdapAuthorizationHealthy;
}

void Health::setLdapAuthorizationHealthy(bool value)
{
    m_LdapAuthorizationHealthy = value;
    m_LdapAuthorizationHealthyIsSet = true;
}

bool Health::ldapAuthorizationHealthyIsSet() const
{
    return m_LdapAuthorizationHealthyIsSet;
}

void Health::unsetLdapAuthorizationHealthy()
{
    m_LdapAuthorizationHealthyIsSet = false;
}
bool Health::isDatabaseHealthy() const
{
    return m_DatabaseHealthy;
}

void Health::setDatabaseHealthy(bool value)
{
    m_DatabaseHealthy = value;
    m_DatabaseHealthyIsSet = true;
}

bool Health::databaseHealthyIsSet() const
{
    return m_DatabaseHealthyIsSet;
}

void Health::unsetDatabaseHealthy()
{
    m_DatabaseHealthyIsSet = false;
}
bool Health::isEsHealthy() const
{
    return m_EsHealthy;
}

void Health::setEsHealthy(bool value)
{
    m_EsHealthy = value;
    m_EsHealthyIsSet = true;
}

bool Health::esHealthyIsSet() const
{
    return m_EsHealthyIsSet;
}

void Health::unsetEsHealthy()
{
    m_EsHealthyIsSet = false;
}

}
}
}
}



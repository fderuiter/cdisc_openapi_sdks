/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/QrsItemLinks.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

QrsItemLinks::QrsItemLinks()
{
    m_QrsItemTESTIsSet = false;
    m_QrsItemTESTCDIsSet = false;
    m_QrsItemEVALIsSet = false;
    m_QrsItemSCATIsSet = false;
    m_ResponsegroupIsSet = false;
}

QrsItemLinks::~QrsItemLinks()
{
}

void QrsItemLinks::validate()
{
    // TODO: implement validation
}

web::json::value QrsItemLinks::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_QrsItemTESTIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("qrsItemTEST"))] = ModelBase::toJson(m_QrsItemTEST);
    }
    if(m_QrsItemTESTCDIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("qrsItemTESTCD"))] = ModelBase::toJson(m_QrsItemTESTCD);
    }
    if(m_QrsItemEVALIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("qrsItemEVAL"))] = ModelBase::toJson(m_QrsItemEVAL);
    }
    if(m_QrsItemSCATIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("qrsItemSCAT"))] = ModelBase::toJson(m_QrsItemSCAT);
    }
    if(m_ResponsegroupIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("responsegroup"))] = ModelBase::toJson(m_Responsegroup);
    }

    return val;
}

bool QrsItemLinks::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("qrsItemTEST"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("qrsItemTEST")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RootCtTermRef> refVal_setQrsItemTEST;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQrsItemTEST);
            setQrsItemTEST(refVal_setQrsItemTEST);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("qrsItemTESTCD"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("qrsItemTESTCD")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RootCtTermRef> refVal_setQrsItemTESTCD;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQrsItemTESTCD);
            setQrsItemTESTCD(refVal_setQrsItemTESTCD);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("qrsItemEVAL"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("qrsItemEVAL")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RootCtTermRef> refVal_setQrsItemEVAL;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQrsItemEVAL);
            setQrsItemEVAL(refVal_setQrsItemEVAL);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("qrsItemSCAT"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("qrsItemSCAT")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RootCtTermRef> refVal_setQrsItemSCAT;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQrsItemSCAT);
            setQrsItemSCAT(refVal_setQrsItemSCAT);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("responsegroup"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("responsegroup")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<QrsResponsegroup> refVal_setResponsegroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResponsegroup);
            setResponsegroup(refVal_setResponsegroup);
            
        }
    }
    return ok;
}

void QrsItemLinks::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_QrsItemTESTIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("qrsItemTEST")), m_QrsItemTEST));
    }
    if(m_QrsItemTESTCDIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("qrsItemTESTCD")), m_QrsItemTESTCD));
    }
    if(m_QrsItemEVALIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("qrsItemEVAL")), m_QrsItemEVAL));
    }
    if(m_QrsItemSCATIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("qrsItemSCAT")), m_QrsItemSCAT));
    }
    if(m_ResponsegroupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("responsegroup")), m_Responsegroup));
    }
}

bool QrsItemLinks::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("qrsItemTEST"))))
    {
        std::shared_ptr<RootCtTermRef> refVal_setQrsItemTEST;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("qrsItemTEST"))), refVal_setQrsItemTEST );
        setQrsItemTEST(refVal_setQrsItemTEST);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("qrsItemTESTCD"))))
    {
        std::shared_ptr<RootCtTermRef> refVal_setQrsItemTESTCD;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("qrsItemTESTCD"))), refVal_setQrsItemTESTCD );
        setQrsItemTESTCD(refVal_setQrsItemTESTCD);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("qrsItemEVAL"))))
    {
        std::shared_ptr<RootCtTermRef> refVal_setQrsItemEVAL;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("qrsItemEVAL"))), refVal_setQrsItemEVAL );
        setQrsItemEVAL(refVal_setQrsItemEVAL);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("qrsItemSCAT"))))
    {
        std::shared_ptr<RootCtTermRef> refVal_setQrsItemSCAT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("qrsItemSCAT"))), refVal_setQrsItemSCAT );
        setQrsItemSCAT(refVal_setQrsItemSCAT);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("responsegroup"))))
    {
        std::shared_ptr<QrsResponsegroup> refVal_setResponsegroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("responsegroup"))), refVal_setResponsegroup );
        setResponsegroup(refVal_setResponsegroup);
    }
    return ok;
}


std::shared_ptr<RootCtTermRef> QrsItemLinks::getQrsItemTEST() const
{
    return m_QrsItemTEST;
}


void QrsItemLinks::setQrsItemTEST(const std::shared_ptr<RootCtTermRef>& value)
{
    m_QrsItemTEST = value;
    m_QrsItemTESTIsSet = true;
}

bool QrsItemLinks::qrsItemTESTIsSet() const
{
    return m_QrsItemTESTIsSet;
}

void QrsItemLinks::unsetQrsItemTEST()
{
    m_QrsItemTESTIsSet = false;
}
std::shared_ptr<RootCtTermRef> QrsItemLinks::getQrsItemTESTCD() const
{
    return m_QrsItemTESTCD;
}


void QrsItemLinks::setQrsItemTESTCD(const std::shared_ptr<RootCtTermRef>& value)
{
    m_QrsItemTESTCD = value;
    m_QrsItemTESTCDIsSet = true;
}

bool QrsItemLinks::qrsItemTESTCDIsSet() const
{
    return m_QrsItemTESTCDIsSet;
}

void QrsItemLinks::unsetQrsItemTESTCD()
{
    m_QrsItemTESTCDIsSet = false;
}
std::shared_ptr<RootCtTermRef> QrsItemLinks::getQrsItemEVAL() const
{
    return m_QrsItemEVAL;
}


void QrsItemLinks::setQrsItemEVAL(const std::shared_ptr<RootCtTermRef>& value)
{
    m_QrsItemEVAL = value;
    m_QrsItemEVALIsSet = true;
}

bool QrsItemLinks::qrsItemEVALIsSet() const
{
    return m_QrsItemEVALIsSet;
}

void QrsItemLinks::unsetQrsItemEVAL()
{
    m_QrsItemEVALIsSet = false;
}
std::shared_ptr<RootCtTermRef> QrsItemLinks::getQrsItemSCAT() const
{
    return m_QrsItemSCAT;
}


void QrsItemLinks::setQrsItemSCAT(const std::shared_ptr<RootCtTermRef>& value)
{
    m_QrsItemSCAT = value;
    m_QrsItemSCATIsSet = true;
}

bool QrsItemLinks::qrsItemSCATIsSet() const
{
    return m_QrsItemSCATIsSet;
}

void QrsItemLinks::unsetQrsItemSCAT()
{
    m_QrsItemSCATIsSet = false;
}
std::shared_ptr<QrsResponsegroup> QrsItemLinks::getResponsegroup() const
{
    return m_Responsegroup;
}


void QrsItemLinks::setResponsegroup(const std::shared_ptr<QrsResponsegroup>& value)
{
    m_Responsegroup = value;
    m_ResponsegroupIsSet = true;
}

bool QrsItemLinks::responsegroupIsSet() const
{
    return m_ResponsegroupIsSet;
}

void QrsItemLinks::unsetResponsegroup()
{
    m_ResponsegroupIsSet = false;
}

}
}
}
}



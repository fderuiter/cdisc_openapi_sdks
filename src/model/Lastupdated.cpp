/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Lastupdated.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Lastupdated::Lastupdated()
{
    m__linksIsSet = false;
    m_Overall = utility::conversions::to_string_t("");
    m_OverallIsSet = false;
    m_Data_analysis = utility::conversions::to_string_t("");
    m_Data_analysisIsSet = false;
    m_Data_collection = utility::conversions::to_string_t("");
    m_Data_collectionIsSet = false;
    m_Data_tabulation = utility::conversions::to_string_t("");
    m_Data_tabulationIsSet = false;
    m_Measure = utility::conversions::to_string_t("");
    m_MeasureIsSet = false;
    m_Terminology = utility::conversions::to_string_t("");
    m_TerminologyIsSet = false;
}

Lastupdated::~Lastupdated()
{
}

void Lastupdated::validate()
{
    // TODO: implement validation
}

web::json::value Lastupdated::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m__linksIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("_links"))] = ModelBase::toJson(m__links);
    }
    if(m_OverallIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("overall"))] = ModelBase::toJson(m_Overall);
    }
    if(m_Data_analysisIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data-analysis"))] = ModelBase::toJson(m_Data_analysis);
    }
    if(m_Data_collectionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data-collection"))] = ModelBase::toJson(m_Data_collection);
    }
    if(m_Data_tabulationIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data-tabulation"))] = ModelBase::toJson(m_Data_tabulation);
    }
    if(m_MeasureIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("measure"))] = ModelBase::toJson(m_Measure);
    }
    if(m_TerminologyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("terminology"))] = ModelBase::toJson(m_Terminology);
    }

    return val;
}

bool Lastupdated::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("_links"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("_links")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LastupdatedLinks> refVal_setLinks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLinks);
            setLinks(refVal_setLinks);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("overall"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("overall")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOverall;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOverall);
            setOverall(refVal_setOverall);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data-analysis"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data-analysis")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDataAnalysis;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataAnalysis);
            setDataAnalysis(refVal_setDataAnalysis);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data-collection"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data-collection")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDataCollection;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataCollection);
            setDataCollection(refVal_setDataCollection);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data-tabulation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data-tabulation")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDataTabulation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataTabulation);
            setDataTabulation(refVal_setDataTabulation);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("measure"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("measure")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMeasure;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMeasure);
            setMeasure(refVal_setMeasure);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("terminology"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("terminology")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTerminology;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTerminology);
            setTerminology(refVal_setTerminology);
            
        }
    }
    return ok;
}

void Lastupdated::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m__linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("_links")), m__links));
    }
    if(m_OverallIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("overall")), m_Overall));
    }
    if(m_Data_analysisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data-analysis")), m_Data_analysis));
    }
    if(m_Data_collectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data-collection")), m_Data_collection));
    }
    if(m_Data_tabulationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data-tabulation")), m_Data_tabulation));
    }
    if(m_MeasureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("measure")), m_Measure));
    }
    if(m_TerminologyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("terminology")), m_Terminology));
    }
}

bool Lastupdated::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("_links"))))
    {
        std::shared_ptr<LastupdatedLinks> refVal_setLinks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("_links"))), refVal_setLinks );
        setLinks(refVal_setLinks);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("overall"))))
    {
        utility::string_t refVal_setOverall;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("overall"))), refVal_setOverall );
        setOverall(refVal_setOverall);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data-analysis"))))
    {
        utility::string_t refVal_setDataAnalysis;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data-analysis"))), refVal_setDataAnalysis );
        setDataAnalysis(refVal_setDataAnalysis);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data-collection"))))
    {
        utility::string_t refVal_setDataCollection;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data-collection"))), refVal_setDataCollection );
        setDataCollection(refVal_setDataCollection);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data-tabulation"))))
    {
        utility::string_t refVal_setDataTabulation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data-tabulation"))), refVal_setDataTabulation );
        setDataTabulation(refVal_setDataTabulation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("measure"))))
    {
        utility::string_t refVal_setMeasure;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("measure"))), refVal_setMeasure );
        setMeasure(refVal_setMeasure);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("terminology"))))
    {
        utility::string_t refVal_setTerminology;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("terminology"))), refVal_setTerminology );
        setTerminology(refVal_setTerminology);
    }
    return ok;
}


std::shared_ptr<LastupdatedLinks> Lastupdated::getLinks() const
{
    return m__links;
}


void Lastupdated::setLinks(const std::shared_ptr<LastupdatedLinks>& value)
{
    m__links = value;
    m__linksIsSet = true;
}

bool Lastupdated::linksIsSet() const
{
    return m__linksIsSet;
}

void Lastupdated::unset_links()
{
    m__linksIsSet = false;
}
utility::string_t Lastupdated::getOverall() const
{
    return m_Overall;
}


void Lastupdated::setOverall(const utility::string_t& value)
{
    m_Overall = value;
    m_OverallIsSet = true;
}

bool Lastupdated::overallIsSet() const
{
    return m_OverallIsSet;
}

void Lastupdated::unsetOverall()
{
    m_OverallIsSet = false;
}
utility::string_t Lastupdated::getDataAnalysis() const
{
    return m_Data_analysis;
}


void Lastupdated::setDataAnalysis(const utility::string_t& value)
{
    m_Data_analysis = value;
    m_Data_analysisIsSet = true;
}

bool Lastupdated::dataAnalysisIsSet() const
{
    return m_Data_analysisIsSet;
}

void Lastupdated::unsetData_analysis()
{
    m_Data_analysisIsSet = false;
}
utility::string_t Lastupdated::getDataCollection() const
{
    return m_Data_collection;
}


void Lastupdated::setDataCollection(const utility::string_t& value)
{
    m_Data_collection = value;
    m_Data_collectionIsSet = true;
}

bool Lastupdated::dataCollectionIsSet() const
{
    return m_Data_collectionIsSet;
}

void Lastupdated::unsetData_collection()
{
    m_Data_collectionIsSet = false;
}
utility::string_t Lastupdated::getDataTabulation() const
{
    return m_Data_tabulation;
}


void Lastupdated::setDataTabulation(const utility::string_t& value)
{
    m_Data_tabulation = value;
    m_Data_tabulationIsSet = true;
}

bool Lastupdated::dataTabulationIsSet() const
{
    return m_Data_tabulationIsSet;
}

void Lastupdated::unsetData_tabulation()
{
    m_Data_tabulationIsSet = false;
}
utility::string_t Lastupdated::getMeasure() const
{
    return m_Measure;
}


void Lastupdated::setMeasure(const utility::string_t& value)
{
    m_Measure = value;
    m_MeasureIsSet = true;
}

bool Lastupdated::measureIsSet() const
{
    return m_MeasureIsSet;
}

void Lastupdated::unsetMeasure()
{
    m_MeasureIsSet = false;
}
utility::string_t Lastupdated::getTerminology() const
{
    return m_Terminology;
}


void Lastupdated::setTerminology(const utility::string_t& value)
{
    m_Terminology = value;
    m_TerminologyIsSet = true;
}

bool Lastupdated::terminologyIsSet() const
{
    return m_TerminologyIsSet;
}

void Lastupdated::unsetTerminology()
{
    m_TerminologyIsSet = false;
}

}
}
}
}



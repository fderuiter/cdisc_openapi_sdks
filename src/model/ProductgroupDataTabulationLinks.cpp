/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ProductgroupDataTabulationLinks.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ProductgroupDataTabulationLinks::ProductgroupDataTabulationLinks()
{
    m_SelfIsSet = false;
    m_SdtmIsSet = false;
    m_SdtmigIsSet = false;
    m_SendigIsSet = false;
}

ProductgroupDataTabulationLinks::~ProductgroupDataTabulationLinks()
{
}

void ProductgroupDataTabulationLinks::validate()
{
    // TODO: implement validation
}

web::json::value ProductgroupDataTabulationLinks::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SelfIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("self"))] = ModelBase::toJson(m_Self);
    }
    if(m_SdtmIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("sdtm"))] = ModelBase::toJson(m_Sdtm);
    }
    if(m_SdtmigIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("sdtmig"))] = ModelBase::toJson(m_Sdtmig);
    }
    if(m_SendigIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("sendig"))] = ModelBase::toJson(m_Sendig);
    }

    return val;
}

bool ProductgroupDataTabulationLinks::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("self")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ProductgroupRef> refVal_setSelf;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSelf);
            setSelf(refVal_setSelf);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("sdtm"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("sdtm")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SdtmProductRefElement>> refVal_setSdtm;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSdtm);
            setSdtm(refVal_setSdtm);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("sdtmig"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("sdtmig")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SdtmigProductRefElement>> refVal_setSdtmig;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSdtmig);
            setSdtmig(refVal_setSdtmig);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("sendig"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("sendig")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SendigProductRefElement>> refVal_setSendig;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSendig);
            setSendig(refVal_setSendig);
            
        }
    }
    return ok;
}

void ProductgroupDataTabulationLinks::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_SelfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("self")), m_Self));
    }
    if(m_SdtmIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("sdtm")), m_Sdtm));
    }
    if(m_SdtmigIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("sdtmig")), m_Sdtmig));
    }
    if(m_SendigIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("sendig")), m_Sendig));
    }
}

bool ProductgroupDataTabulationLinks::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        std::shared_ptr<ProductgroupRef> refVal_setSelf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("self"))), refVal_setSelf );
        setSelf(refVal_setSelf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("sdtm"))))
    {
        std::vector<std::shared_ptr<SdtmProductRefElement>> refVal_setSdtm;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("sdtm"))), refVal_setSdtm );
        setSdtm(refVal_setSdtm);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("sdtmig"))))
    {
        std::vector<std::shared_ptr<SdtmigProductRefElement>> refVal_setSdtmig;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("sdtmig"))), refVal_setSdtmig );
        setSdtmig(refVal_setSdtmig);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("sendig"))))
    {
        std::vector<std::shared_ptr<SendigProductRefElement>> refVal_setSendig;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("sendig"))), refVal_setSendig );
        setSendig(refVal_setSendig);
    }
    return ok;
}


std::shared_ptr<ProductgroupRef> ProductgroupDataTabulationLinks::getSelf() const
{
    return m_Self;
}


void ProductgroupDataTabulationLinks::setSelf(const std::shared_ptr<ProductgroupRef>& value)
{
    m_Self = value;
    m_SelfIsSet = true;
}

bool ProductgroupDataTabulationLinks::selfIsSet() const
{
    return m_SelfIsSet;
}

void ProductgroupDataTabulationLinks::unsetSelf()
{
    m_SelfIsSet = false;
}
std::vector<std::shared_ptr<SdtmProductRefElement>> ProductgroupDataTabulationLinks::getSdtm() const
{
    return m_Sdtm;
}


void ProductgroupDataTabulationLinks::setSdtm(const std::vector<std::shared_ptr<SdtmProductRefElement>>& value)
{
    m_Sdtm = value;
    m_SdtmIsSet = true;
}

bool ProductgroupDataTabulationLinks::sdtmIsSet() const
{
    return m_SdtmIsSet;
}

void ProductgroupDataTabulationLinks::unsetSdtm()
{
    m_SdtmIsSet = false;
}
std::vector<std::shared_ptr<SdtmigProductRefElement>> ProductgroupDataTabulationLinks::getSdtmig() const
{
    return m_Sdtmig;
}


void ProductgroupDataTabulationLinks::setSdtmig(const std::vector<std::shared_ptr<SdtmigProductRefElement>>& value)
{
    m_Sdtmig = value;
    m_SdtmigIsSet = true;
}

bool ProductgroupDataTabulationLinks::sdtmigIsSet() const
{
    return m_SdtmigIsSet;
}

void ProductgroupDataTabulationLinks::unsetSdtmig()
{
    m_SdtmigIsSet = false;
}
std::vector<std::shared_ptr<SendigProductRefElement>> ProductgroupDataTabulationLinks::getSendig() const
{
    return m_Sendig;
}


void ProductgroupDataTabulationLinks::setSendig(const std::vector<std::shared_ptr<SendigProductRefElement>>& value)
{
    m_Sendig = value;
    m_SendigIsSet = true;
}

bool ProductgroupDataTabulationLinks::sendigIsSet() const
{
    return m_SendigIsSet;
}

void ProductgroupDataTabulationLinks::unsetSendig()
{
    m_SendigIsSet = false;
}

}
}
}
}



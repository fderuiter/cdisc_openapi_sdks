/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CtCodelistTerms.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

CtCodelistTerms::CtCodelistTerms()
{
    m_ConceptId = utility::conversions::to_string_t("");
    m_ConceptIdIsSet = false;
    m_Extensible = utility::conversions::to_string_t("");
    m_ExtensibleIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_SubmissionValue = utility::conversions::to_string_t("");
    m_SubmissionValueIsSet = false;
    m_Definition = utility::conversions::to_string_t("");
    m_DefinitionIsSet = false;
    m_PreferredTerm = utility::conversions::to_string_t("");
    m_PreferredTermIsSet = false;
    m_SynonymsIsSet = false;
    m__linksIsSet = false;
}

CtCodelistTerms::~CtCodelistTerms()
{
}

void CtCodelistTerms::validate()
{
    // TODO: implement validation
}

web::json::value CtCodelistTerms::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_ConceptIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("conceptId"))] = ModelBase::toJson(m_ConceptId);
    }
    if(m_ExtensibleIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("extensible"))] = ModelBase::toJson(m_Extensible);
    }
    if(m_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_SubmissionValueIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("submissionValue"))] = ModelBase::toJson(m_SubmissionValue);
    }
    if(m_DefinitionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("definition"))] = ModelBase::toJson(m_Definition);
    }
    if(m_PreferredTermIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("preferredTerm"))] = ModelBase::toJson(m_PreferredTerm);
    }
    if(m_SynonymsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("synonyms"))] = ModelBase::toJson(m_Synonyms);
    }
    if(m__linksIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("_links"))] = ModelBase::toJson(m__links);
    }

    return val;
}

bool CtCodelistTerms::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("conceptId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("conceptId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setConceptId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConceptId);
            setConceptId(refVal_setConceptId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("extensible"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("extensible")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExtensible;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExtensible);
            setExtensible(refVal_setExtensible);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("submissionValue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("submissionValue")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubmissionValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubmissionValue);
            setSubmissionValue(refVal_setSubmissionValue);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("definition"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("definition")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDefinition;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDefinition);
            setDefinition(refVal_setDefinition);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("preferredTerm"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("preferredTerm")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPreferredTerm;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPreferredTerm);
            setPreferredTerm(refVal_setPreferredTerm);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("synonyms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("synonyms")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setSynonyms;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSynonyms);
            setSynonyms(refVal_setSynonyms);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("_links"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("_links")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CtCodelistTermsLinks> refVal_setLinks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLinks);
            setLinks(refVal_setLinks);
            
        }
    }
    return ok;
}

void CtCodelistTerms::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_ConceptIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("conceptId")), m_ConceptId));
    }
    if(m_ExtensibleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("extensible")), m_Extensible));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("name")), m_Name));
    }
    if(m_SubmissionValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("submissionValue")), m_SubmissionValue));
    }
    if(m_DefinitionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("definition")), m_Definition));
    }
    if(m_PreferredTermIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("preferredTerm")), m_PreferredTerm));
    }
    if(m_SynonymsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("synonyms")), m_Synonyms));
    }
    if(m__linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("_links")), m__links));
    }
}

bool CtCodelistTerms::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("conceptId"))))
    {
        utility::string_t refVal_setConceptId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("conceptId"))), refVal_setConceptId );
        setConceptId(refVal_setConceptId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("extensible"))))
    {
        utility::string_t refVal_setExtensible;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("extensible"))), refVal_setExtensible );
        setExtensible(refVal_setExtensible);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("submissionValue"))))
    {
        utility::string_t refVal_setSubmissionValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("submissionValue"))), refVal_setSubmissionValue );
        setSubmissionValue(refVal_setSubmissionValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("definition"))))
    {
        utility::string_t refVal_setDefinition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("definition"))), refVal_setDefinition );
        setDefinition(refVal_setDefinition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("preferredTerm"))))
    {
        utility::string_t refVal_setPreferredTerm;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("preferredTerm"))), refVal_setPreferredTerm );
        setPreferredTerm(refVal_setPreferredTerm);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("synonyms"))))
    {
        std::vector<utility::string_t> refVal_setSynonyms;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("synonyms"))), refVal_setSynonyms );
        setSynonyms(refVal_setSynonyms);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("_links"))))
    {
        std::shared_ptr<CtCodelistTermsLinks> refVal_setLinks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("_links"))), refVal_setLinks );
        setLinks(refVal_setLinks);
    }
    return ok;
}


utility::string_t CtCodelistTerms::getConceptId() const
{
    return m_ConceptId;
}


void CtCodelistTerms::setConceptId(const utility::string_t& value)
{
    m_ConceptId = value;
    m_ConceptIdIsSet = true;
}

bool CtCodelistTerms::conceptIdIsSet() const
{
    return m_ConceptIdIsSet;
}

void CtCodelistTerms::unsetConceptId()
{
    m_ConceptIdIsSet = false;
}
utility::string_t CtCodelistTerms::getExtensible() const
{
    return m_Extensible;
}


void CtCodelistTerms::setExtensible(const utility::string_t& value)
{
    m_Extensible = value;
    m_ExtensibleIsSet = true;
}

bool CtCodelistTerms::extensibleIsSet() const
{
    return m_ExtensibleIsSet;
}

void CtCodelistTerms::unsetExtensible()
{
    m_ExtensibleIsSet = false;
}
utility::string_t CtCodelistTerms::getName() const
{
    return m_Name;
}


void CtCodelistTerms::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool CtCodelistTerms::nameIsSet() const
{
    return m_NameIsSet;
}

void CtCodelistTerms::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t CtCodelistTerms::getSubmissionValue() const
{
    return m_SubmissionValue;
}


void CtCodelistTerms::setSubmissionValue(const utility::string_t& value)
{
    m_SubmissionValue = value;
    m_SubmissionValueIsSet = true;
}

bool CtCodelistTerms::submissionValueIsSet() const
{
    return m_SubmissionValueIsSet;
}

void CtCodelistTerms::unsetSubmissionValue()
{
    m_SubmissionValueIsSet = false;
}
utility::string_t CtCodelistTerms::getDefinition() const
{
    return m_Definition;
}


void CtCodelistTerms::setDefinition(const utility::string_t& value)
{
    m_Definition = value;
    m_DefinitionIsSet = true;
}

bool CtCodelistTerms::definitionIsSet() const
{
    return m_DefinitionIsSet;
}

void CtCodelistTerms::unsetDefinition()
{
    m_DefinitionIsSet = false;
}
utility::string_t CtCodelistTerms::getPreferredTerm() const
{
    return m_PreferredTerm;
}


void CtCodelistTerms::setPreferredTerm(const utility::string_t& value)
{
    m_PreferredTerm = value;
    m_PreferredTermIsSet = true;
}

bool CtCodelistTerms::preferredTermIsSet() const
{
    return m_PreferredTermIsSet;
}

void CtCodelistTerms::unsetPreferredTerm()
{
    m_PreferredTermIsSet = false;
}
std::vector<utility::string_t> CtCodelistTerms::getSynonyms() const
{
    return m_Synonyms;
}


void CtCodelistTerms::setSynonyms(const std::vector<utility::string_t>& value)
{
    m_Synonyms = value;
    m_SynonymsIsSet = true;
}

bool CtCodelistTerms::synonymsIsSet() const
{
    return m_SynonymsIsSet;
}

void CtCodelistTerms::unsetSynonyms()
{
    m_SynonymsIsSet = false;
}
std::shared_ptr<CtCodelistTermsLinks> CtCodelistTerms::getLinks() const
{
    return m__links;
}


void CtCodelistTerms::setLinks(const std::shared_ptr<CtCodelistTermsLinks>& value)
{
    m__links = value;
    m__linksIsSet = true;
}

bool CtCodelistTerms::linksIsSet() const
{
    return m__linksIsSet;
}

void CtCodelistTerms::unset_links()
{
    m__linksIsSet = false;
}

}
}
}
}



/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ExportCdashClassVariablesRow.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ExportCdashClassVariablesRow::ExportCdashClassVariablesRow()
{
    m_Version = utility::conversions::to_string_t("");
    m_VersionIsSet = false;
    m_r_Class = utility::conversions::to_string_t("");
    m_r_ClassIsSet = false;
    m_Domain = utility::conversions::to_string_t("");
    m_DomainIsSet = false;
    m_Variable_Order = utility::conversions::to_string_t("");
    m_Variable_OrderIsSet = false;
    m_CDASH_Variable = utility::conversions::to_string_t("");
    m_CDASH_VariableIsSet = false;
    m_CDASH_Variable_Label = utility::conversions::to_string_t("");
    m_CDASH_Variable_LabelIsSet = false;
    m_DRAFT_CDASH_Definition = utility::conversions::to_string_t("");
    m_DRAFT_CDASH_DefinitionIsSet = false;
    m_Domain_Specific = utility::conversions::to_string_t("");
    m_Domain_SpecificIsSet = false;
    m_Question_Text = utility::conversions::to_string_t("");
    m_Question_TextIsSet = false;
    m_Prompt = utility::conversions::to_string_t("");
    m_PromptIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_SDTM_TargetIsSet = false;
    m_Mapping_Instructions = utility::conversions::to_string_t("");
    m_Mapping_InstructionsIsSet = false;
    m_Controlled_Terminology_Codelist_Name = utility::conversions::to_string_t("");
    m_Controlled_Terminology_Codelist_NameIsSet = false;
    m_Implementation_Notes = utility::conversions::to_string_t("");
    m_Implementation_NotesIsSet = false;
}

ExportCdashClassVariablesRow::~ExportCdashClassVariablesRow()
{
}

void ExportCdashClassVariablesRow::validate()
{
    // TODO: implement validation
}

web::json::value ExportCdashClassVariablesRow::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_VersionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Version"))] = ModelBase::toJson(m_Version);
    }
    if(m_r_ClassIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Class"))] = ModelBase::toJson(m_r_Class);
    }
    if(m_DomainIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Domain"))] = ModelBase::toJson(m_Domain);
    }
    if(m_Variable_OrderIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Variable Order"))] = ModelBase::toJson(m_Variable_Order);
    }
    if(m_CDASH_VariableIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("CDASH Variable"))] = ModelBase::toJson(m_CDASH_Variable);
    }
    if(m_CDASH_Variable_LabelIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("CDASH Variable Label"))] = ModelBase::toJson(m_CDASH_Variable_Label);
    }
    if(m_DRAFT_CDASH_DefinitionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("DRAFT CDASH Definition"))] = ModelBase::toJson(m_DRAFT_CDASH_Definition);
    }
    if(m_Domain_SpecificIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Domain Specific"))] = ModelBase::toJson(m_Domain_Specific);
    }
    if(m_Question_TextIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Question Text"))] = ModelBase::toJson(m_Question_Text);
    }
    if(m_PromptIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Prompt"))] = ModelBase::toJson(m_Prompt);
    }
    if(m_TypeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Type"))] = ModelBase::toJson(m_Type);
    }
    if(m_SDTM_TargetIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("SDTM Target"))] = ModelBase::toJson(m_SDTM_Target);
    }
    if(m_Mapping_InstructionsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Mapping Instructions"))] = ModelBase::toJson(m_Mapping_Instructions);
    }
    if(m_Controlled_Terminology_Codelist_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Controlled Terminology Codelist Name"))] = ModelBase::toJson(m_Controlled_Terminology_Codelist_Name);
    }
    if(m_Implementation_NotesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Implementation Notes"))] = ModelBase::toJson(m_Implementation_Notes);
    }

    return val;
}

bool ExportCdashClassVariablesRow::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRClass);
            setRClass(refVal_setRClass);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Domain"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Domain")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDomain;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomain);
            setDomain(refVal_setDomain);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Variable Order"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Variable Order")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVariableOrder;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariableOrder);
            setVariableOrder(refVal_setVariableOrder);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("CDASH Variable"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("CDASH Variable")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCDASHVariable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCDASHVariable);
            setCDASHVariable(refVal_setCDASHVariable);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("CDASH Variable Label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("CDASH Variable Label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCDASHVariableLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCDASHVariableLabel);
            setCDASHVariableLabel(refVal_setCDASHVariableLabel);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("DRAFT CDASH Definition"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("DRAFT CDASH Definition")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDRAFTCDASHDefinition;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDRAFTCDASHDefinition);
            setDRAFTCDASHDefinition(refVal_setDRAFTCDASHDefinition);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Domain Specific"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Domain Specific")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDomainSpecific;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomainSpecific);
            setDomainSpecific(refVal_setDomainSpecific);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Question Text"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Question Text")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setQuestionText;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQuestionText);
            setQuestionText(refVal_setQuestionText);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Prompt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Prompt")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPrompt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrompt);
            setPrompt(refVal_setPrompt);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("SDTM Target"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("SDTM Target")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setSDTMTarget;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSDTMTarget);
            setSDTMTarget(refVal_setSDTMTarget);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Mapping Instructions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Mapping Instructions")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMappingInstructions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMappingInstructions);
            setMappingInstructions(refVal_setMappingInstructions);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Controlled Terminology Codelist Name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Controlled Terminology Codelist Name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setControlledTerminologyCodelistName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setControlledTerminologyCodelistName);
            setControlledTerminologyCodelistName(refVal_setControlledTerminologyCodelistName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Implementation Notes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Implementation Notes")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImplementationNotes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImplementationNotes);
            setImplementationNotes(refVal_setImplementationNotes);
            
        }
    }
    return ok;
}

void ExportCdashClassVariablesRow::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Version")), m_Version));
    }
    if(m_r_ClassIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Class")), m_r_Class));
    }
    if(m_DomainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Domain")), m_Domain));
    }
    if(m_Variable_OrderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Variable Order")), m_Variable_Order));
    }
    if(m_CDASH_VariableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("CDASH Variable")), m_CDASH_Variable));
    }
    if(m_CDASH_Variable_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("CDASH Variable Label")), m_CDASH_Variable_Label));
    }
    if(m_DRAFT_CDASH_DefinitionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("DRAFT CDASH Definition")), m_DRAFT_CDASH_Definition));
    }
    if(m_Domain_SpecificIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Domain Specific")), m_Domain_Specific));
    }
    if(m_Question_TextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Question Text")), m_Question_Text));
    }
    if(m_PromptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Prompt")), m_Prompt));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Type")), m_Type));
    }
    if(m_SDTM_TargetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("SDTM Target")), m_SDTM_Target));
    }
    if(m_Mapping_InstructionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Mapping Instructions")), m_Mapping_Instructions));
    }
    if(m_Controlled_Terminology_Codelist_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Controlled Terminology Codelist Name")), m_Controlled_Terminology_Codelist_Name));
    }
    if(m_Implementation_NotesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Implementation Notes")), m_Implementation_Notes));
    }
}

bool ExportCdashClassVariablesRow::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Version"))))
    {
        utility::string_t refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Class"))))
    {
        utility::string_t refVal_setRClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Class"))), refVal_setRClass );
        setRClass(refVal_setRClass);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Domain"))))
    {
        utility::string_t refVal_setDomain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Domain"))), refVal_setDomain );
        setDomain(refVal_setDomain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Variable Order"))))
    {
        utility::string_t refVal_setVariableOrder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Variable Order"))), refVal_setVariableOrder );
        setVariableOrder(refVal_setVariableOrder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("CDASH Variable"))))
    {
        utility::string_t refVal_setCDASHVariable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("CDASH Variable"))), refVal_setCDASHVariable );
        setCDASHVariable(refVal_setCDASHVariable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("CDASH Variable Label"))))
    {
        utility::string_t refVal_setCDASHVariableLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("CDASH Variable Label"))), refVal_setCDASHVariableLabel );
        setCDASHVariableLabel(refVal_setCDASHVariableLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("DRAFT CDASH Definition"))))
    {
        utility::string_t refVal_setDRAFTCDASHDefinition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("DRAFT CDASH Definition"))), refVal_setDRAFTCDASHDefinition );
        setDRAFTCDASHDefinition(refVal_setDRAFTCDASHDefinition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Domain Specific"))))
    {
        utility::string_t refVal_setDomainSpecific;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Domain Specific"))), refVal_setDomainSpecific );
        setDomainSpecific(refVal_setDomainSpecific);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Question Text"))))
    {
        utility::string_t refVal_setQuestionText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Question Text"))), refVal_setQuestionText );
        setQuestionText(refVal_setQuestionText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Prompt"))))
    {
        utility::string_t refVal_setPrompt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Prompt"))), refVal_setPrompt );
        setPrompt(refVal_setPrompt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("SDTM Target"))))
    {
        std::vector<utility::string_t> refVal_setSDTMTarget;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("SDTM Target"))), refVal_setSDTMTarget );
        setSDTMTarget(refVal_setSDTMTarget);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Mapping Instructions"))))
    {
        utility::string_t refVal_setMappingInstructions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Mapping Instructions"))), refVal_setMappingInstructions );
        setMappingInstructions(refVal_setMappingInstructions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Controlled Terminology Codelist Name"))))
    {
        utility::string_t refVal_setControlledTerminologyCodelistName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Controlled Terminology Codelist Name"))), refVal_setControlledTerminologyCodelistName );
        setControlledTerminologyCodelistName(refVal_setControlledTerminologyCodelistName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Implementation Notes"))))
    {
        utility::string_t refVal_setImplementationNotes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Implementation Notes"))), refVal_setImplementationNotes );
        setImplementationNotes(refVal_setImplementationNotes);
    }
    return ok;
}


utility::string_t ExportCdashClassVariablesRow::getVersion() const
{
    return m_Version;
}


void ExportCdashClassVariablesRow::setVersion(const utility::string_t& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool ExportCdashClassVariablesRow::versionIsSet() const
{
    return m_VersionIsSet;
}

void ExportCdashClassVariablesRow::unsetVersion()
{
    m_VersionIsSet = false;
}
utility::string_t ExportCdashClassVariablesRow::getRClass() const
{
    return m_r_Class;
}


void ExportCdashClassVariablesRow::setRClass(const utility::string_t& value)
{
    m_r_Class = value;
    m_r_ClassIsSet = true;
}

bool ExportCdashClassVariablesRow::rClassIsSet() const
{
    return m_r_ClassIsSet;
}

void ExportCdashClassVariablesRow::unsetr_Class()
{
    m_r_ClassIsSet = false;
}
utility::string_t ExportCdashClassVariablesRow::getDomain() const
{
    return m_Domain;
}


void ExportCdashClassVariablesRow::setDomain(const utility::string_t& value)
{
    m_Domain = value;
    m_DomainIsSet = true;
}

bool ExportCdashClassVariablesRow::domainIsSet() const
{
    return m_DomainIsSet;
}

void ExportCdashClassVariablesRow::unsetDomain()
{
    m_DomainIsSet = false;
}
utility::string_t ExportCdashClassVariablesRow::getVariableOrder() const
{
    return m_Variable_Order;
}


void ExportCdashClassVariablesRow::setVariableOrder(const utility::string_t& value)
{
    m_Variable_Order = value;
    m_Variable_OrderIsSet = true;
}

bool ExportCdashClassVariablesRow::variableOrderIsSet() const
{
    return m_Variable_OrderIsSet;
}

void ExportCdashClassVariablesRow::unsetVariable_Order()
{
    m_Variable_OrderIsSet = false;
}
utility::string_t ExportCdashClassVariablesRow::getCDASHVariable() const
{
    return m_CDASH_Variable;
}


void ExportCdashClassVariablesRow::setCDASHVariable(const utility::string_t& value)
{
    m_CDASH_Variable = value;
    m_CDASH_VariableIsSet = true;
}

bool ExportCdashClassVariablesRow::cDASHVariableIsSet() const
{
    return m_CDASH_VariableIsSet;
}

void ExportCdashClassVariablesRow::unsetCDASH_Variable()
{
    m_CDASH_VariableIsSet = false;
}
utility::string_t ExportCdashClassVariablesRow::getCDASHVariableLabel() const
{
    return m_CDASH_Variable_Label;
}


void ExportCdashClassVariablesRow::setCDASHVariableLabel(const utility::string_t& value)
{
    m_CDASH_Variable_Label = value;
    m_CDASH_Variable_LabelIsSet = true;
}

bool ExportCdashClassVariablesRow::cDASHVariableLabelIsSet() const
{
    return m_CDASH_Variable_LabelIsSet;
}

void ExportCdashClassVariablesRow::unsetCDASH_Variable_Label()
{
    m_CDASH_Variable_LabelIsSet = false;
}
utility::string_t ExportCdashClassVariablesRow::getDRAFTCDASHDefinition() const
{
    return m_DRAFT_CDASH_Definition;
}


void ExportCdashClassVariablesRow::setDRAFTCDASHDefinition(const utility::string_t& value)
{
    m_DRAFT_CDASH_Definition = value;
    m_DRAFT_CDASH_DefinitionIsSet = true;
}

bool ExportCdashClassVariablesRow::dRAFTCDASHDefinitionIsSet() const
{
    return m_DRAFT_CDASH_DefinitionIsSet;
}

void ExportCdashClassVariablesRow::unsetDRAFT_CDASH_Definition()
{
    m_DRAFT_CDASH_DefinitionIsSet = false;
}
utility::string_t ExportCdashClassVariablesRow::getDomainSpecific() const
{
    return m_Domain_Specific;
}


void ExportCdashClassVariablesRow::setDomainSpecific(const utility::string_t& value)
{
    m_Domain_Specific = value;
    m_Domain_SpecificIsSet = true;
}

bool ExportCdashClassVariablesRow::domainSpecificIsSet() const
{
    return m_Domain_SpecificIsSet;
}

void ExportCdashClassVariablesRow::unsetDomain_Specific()
{
    m_Domain_SpecificIsSet = false;
}
utility::string_t ExportCdashClassVariablesRow::getQuestionText() const
{
    return m_Question_Text;
}


void ExportCdashClassVariablesRow::setQuestionText(const utility::string_t& value)
{
    m_Question_Text = value;
    m_Question_TextIsSet = true;
}

bool ExportCdashClassVariablesRow::questionTextIsSet() const
{
    return m_Question_TextIsSet;
}

void ExportCdashClassVariablesRow::unsetQuestion_Text()
{
    m_Question_TextIsSet = false;
}
utility::string_t ExportCdashClassVariablesRow::getPrompt() const
{
    return m_Prompt;
}


void ExportCdashClassVariablesRow::setPrompt(const utility::string_t& value)
{
    m_Prompt = value;
    m_PromptIsSet = true;
}

bool ExportCdashClassVariablesRow::promptIsSet() const
{
    return m_PromptIsSet;
}

void ExportCdashClassVariablesRow::unsetPrompt()
{
    m_PromptIsSet = false;
}
utility::string_t ExportCdashClassVariablesRow::getType() const
{
    return m_Type;
}


void ExportCdashClassVariablesRow::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool ExportCdashClassVariablesRow::typeIsSet() const
{
    return m_TypeIsSet;
}

void ExportCdashClassVariablesRow::unsetType()
{
    m_TypeIsSet = false;
}
std::vector<utility::string_t> ExportCdashClassVariablesRow::getSDTMTarget() const
{
    return m_SDTM_Target;
}


void ExportCdashClassVariablesRow::setSDTMTarget(const std::vector<utility::string_t>& value)
{
    m_SDTM_Target = value;
    m_SDTM_TargetIsSet = true;
}

bool ExportCdashClassVariablesRow::sDTMTargetIsSet() const
{
    return m_SDTM_TargetIsSet;
}

void ExportCdashClassVariablesRow::unsetSDTM_Target()
{
    m_SDTM_TargetIsSet = false;
}
utility::string_t ExportCdashClassVariablesRow::getMappingInstructions() const
{
    return m_Mapping_Instructions;
}


void ExportCdashClassVariablesRow::setMappingInstructions(const utility::string_t& value)
{
    m_Mapping_Instructions = value;
    m_Mapping_InstructionsIsSet = true;
}

bool ExportCdashClassVariablesRow::mappingInstructionsIsSet() const
{
    return m_Mapping_InstructionsIsSet;
}

void ExportCdashClassVariablesRow::unsetMapping_Instructions()
{
    m_Mapping_InstructionsIsSet = false;
}
utility::string_t ExportCdashClassVariablesRow::getControlledTerminologyCodelistName() const
{
    return m_Controlled_Terminology_Codelist_Name;
}


void ExportCdashClassVariablesRow::setControlledTerminologyCodelistName(const utility::string_t& value)
{
    m_Controlled_Terminology_Codelist_Name = value;
    m_Controlled_Terminology_Codelist_NameIsSet = true;
}

bool ExportCdashClassVariablesRow::controlledTerminologyCodelistNameIsSet() const
{
    return m_Controlled_Terminology_Codelist_NameIsSet;
}

void ExportCdashClassVariablesRow::unsetControlled_Terminology_Codelist_Name()
{
    m_Controlled_Terminology_Codelist_NameIsSet = false;
}
utility::string_t ExportCdashClassVariablesRow::getImplementationNotes() const
{
    return m_Implementation_Notes;
}


void ExportCdashClassVariablesRow::setImplementationNotes(const utility::string_t& value)
{
    m_Implementation_Notes = value;
    m_Implementation_NotesIsSet = true;
}

bool ExportCdashClassVariablesRow::implementationNotesIsSet() const
{
    return m_Implementation_NotesIsSet;
}

void ExportCdashClassVariablesRow::unsetImplementation_Notes()
{
    m_Implementation_NotesIsSet = false;
}

}
}
}
}



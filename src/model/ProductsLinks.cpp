/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ProductsLinks.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ProductsLinks::ProductsLinks()
{
    m_SelfIsSet = false;
    m_Data_collectionIsSet = false;
    m_Data_tabulationIsSet = false;
    m_Data_analysisIsSet = false;
    m_TerminologyIsSet = false;
    m_MeasureIsSet = false;
}

ProductsLinks::~ProductsLinks()
{
}

void ProductsLinks::validate()
{
    // TODO: implement validation
}

web::json::value ProductsLinks::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SelfIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("self"))] = ModelBase::toJson(m_Self);
    }
    if(m_Data_collectionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data-collection"))] = ModelBase::toJson(m_Data_collection);
    }
    if(m_Data_tabulationIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data-tabulation"))] = ModelBase::toJson(m_Data_tabulation);
    }
    if(m_Data_analysisIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data-analysis"))] = ModelBase::toJson(m_Data_analysis);
    }
    if(m_TerminologyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("terminology"))] = ModelBase::toJson(m_Terminology);
    }
    if(m_MeasureIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("measure"))] = ModelBase::toJson(m_Measure);
    }

    return val;
}

bool ProductsLinks::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("self")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ProductsRef> refVal_setSelf;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSelf);
            setSelf(refVal_setSelf);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data-collection"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data-collection")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ProductgroupDataCollection> refVal_setDataCollection;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataCollection);
            setDataCollection(refVal_setDataCollection);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data-tabulation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data-tabulation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ProductgroupDataTabulation> refVal_setDataTabulation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataTabulation);
            setDataTabulation(refVal_setDataTabulation);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data-analysis"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data-analysis")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ProductgroupDataAnalysis> refVal_setDataAnalysis;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataAnalysis);
            setDataAnalysis(refVal_setDataAnalysis);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("terminology"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("terminology")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ProductgroupTerminology> refVal_setTerminology;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTerminology);
            setTerminology(refVal_setTerminology);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("measure"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("measure")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ProductgroupQrs> refVal_setMeasure;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMeasure);
            setMeasure(refVal_setMeasure);
            
        }
    }
    return ok;
}

void ProductsLinks::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_SelfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("self")), m_Self));
    }
    if(m_Data_collectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data-collection")), m_Data_collection));
    }
    if(m_Data_tabulationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data-tabulation")), m_Data_tabulation));
    }
    if(m_Data_analysisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data-analysis")), m_Data_analysis));
    }
    if(m_TerminologyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("terminology")), m_Terminology));
    }
    if(m_MeasureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("measure")), m_Measure));
    }
}

bool ProductsLinks::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        std::shared_ptr<ProductsRef> refVal_setSelf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("self"))), refVal_setSelf );
        setSelf(refVal_setSelf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data-collection"))))
    {
        std::shared_ptr<ProductgroupDataCollection> refVal_setDataCollection;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data-collection"))), refVal_setDataCollection );
        setDataCollection(refVal_setDataCollection);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data-tabulation"))))
    {
        std::shared_ptr<ProductgroupDataTabulation> refVal_setDataTabulation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data-tabulation"))), refVal_setDataTabulation );
        setDataTabulation(refVal_setDataTabulation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data-analysis"))))
    {
        std::shared_ptr<ProductgroupDataAnalysis> refVal_setDataAnalysis;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data-analysis"))), refVal_setDataAnalysis );
        setDataAnalysis(refVal_setDataAnalysis);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("terminology"))))
    {
        std::shared_ptr<ProductgroupTerminology> refVal_setTerminology;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("terminology"))), refVal_setTerminology );
        setTerminology(refVal_setTerminology);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("measure"))))
    {
        std::shared_ptr<ProductgroupQrs> refVal_setMeasure;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("measure"))), refVal_setMeasure );
        setMeasure(refVal_setMeasure);
    }
    return ok;
}


std::shared_ptr<ProductsRef> ProductsLinks::getSelf() const
{
    return m_Self;
}


void ProductsLinks::setSelf(const std::shared_ptr<ProductsRef>& value)
{
    m_Self = value;
    m_SelfIsSet = true;
}

bool ProductsLinks::selfIsSet() const
{
    return m_SelfIsSet;
}

void ProductsLinks::unsetSelf()
{
    m_SelfIsSet = false;
}
std::shared_ptr<ProductgroupDataCollection> ProductsLinks::getDataCollection() const
{
    return m_Data_collection;
}


void ProductsLinks::setDataCollection(const std::shared_ptr<ProductgroupDataCollection>& value)
{
    m_Data_collection = value;
    m_Data_collectionIsSet = true;
}

bool ProductsLinks::dataCollectionIsSet() const
{
    return m_Data_collectionIsSet;
}

void ProductsLinks::unsetData_collection()
{
    m_Data_collectionIsSet = false;
}
std::shared_ptr<ProductgroupDataTabulation> ProductsLinks::getDataTabulation() const
{
    return m_Data_tabulation;
}


void ProductsLinks::setDataTabulation(const std::shared_ptr<ProductgroupDataTabulation>& value)
{
    m_Data_tabulation = value;
    m_Data_tabulationIsSet = true;
}

bool ProductsLinks::dataTabulationIsSet() const
{
    return m_Data_tabulationIsSet;
}

void ProductsLinks::unsetData_tabulation()
{
    m_Data_tabulationIsSet = false;
}
std::shared_ptr<ProductgroupDataAnalysis> ProductsLinks::getDataAnalysis() const
{
    return m_Data_analysis;
}


void ProductsLinks::setDataAnalysis(const std::shared_ptr<ProductgroupDataAnalysis>& value)
{
    m_Data_analysis = value;
    m_Data_analysisIsSet = true;
}

bool ProductsLinks::dataAnalysisIsSet() const
{
    return m_Data_analysisIsSet;
}

void ProductsLinks::unsetData_analysis()
{
    m_Data_analysisIsSet = false;
}
std::shared_ptr<ProductgroupTerminology> ProductsLinks::getTerminology() const
{
    return m_Terminology;
}


void ProductsLinks::setTerminology(const std::shared_ptr<ProductgroupTerminology>& value)
{
    m_Terminology = value;
    m_TerminologyIsSet = true;
}

bool ProductsLinks::terminologyIsSet() const
{
    return m_TerminologyIsSet;
}

void ProductsLinks::unsetTerminology()
{
    m_TerminologyIsSet = false;
}
std::shared_ptr<ProductgroupQrs> ProductsLinks::getMeasure() const
{
    return m_Measure;
}


void ProductsLinks::setMeasure(const std::shared_ptr<ProductgroupQrs>& value)
{
    m_Measure = value;
    m_MeasureIsSet = true;
}

bool ProductsLinks::measureIsSet() const
{
    return m_MeasureIsSet;
}

void ProductsLinks::unsetMeasure()
{
    m_MeasureIsSet = false;
}

}
}
}
}



/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CdashigScenarioFieldLinks.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

CdashigScenarioFieldLinks::CdashigScenarioFieldLinks()
{
    m_SelfIsSet = false;
    m_CodelistIsSet = false;
    m_ParentProductIsSet = false;
    m_ParentDomainIsSet = false;
    m_ParentScenarioIsSet = false;
    m_RootItemIsSet = false;
    m_PriorVersionIsSet = false;
    m_SdtmigDatasetMappingTargetsIsSet = false;
}

CdashigScenarioFieldLinks::~CdashigScenarioFieldLinks()
{
}

void CdashigScenarioFieldLinks::validate()
{
    // TODO: implement validation
}

web::json::value CdashigScenarioFieldLinks::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SelfIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("self"))] = ModelBase::toJson(m_Self);
    }
    if(m_CodelistIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("codelist"))] = ModelBase::toJson(m_Codelist);
    }
    if(m_ParentProductIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("parentProduct"))] = ModelBase::toJson(m_ParentProduct);
    }
    if(m_ParentDomainIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("parentDomain"))] = ModelBase::toJson(m_ParentDomain);
    }
    if(m_ParentScenarioIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("parentScenario"))] = ModelBase::toJson(m_ParentScenario);
    }
    if(m_RootItemIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("rootItem"))] = ModelBase::toJson(m_RootItem);
    }
    if(m_PriorVersionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("priorVersion"))] = ModelBase::toJson(m_PriorVersion);
    }
    if(m_SdtmigDatasetMappingTargetsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("sdtmigDatasetMappingTargets"))] = ModelBase::toJson(m_SdtmigDatasetMappingTargets);
    }

    return val;
}

bool CdashigScenarioFieldLinks::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("self")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CdashigScenarioFieldRef> refVal_setSelf;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSelf);
            setSelf(refVal_setSelf);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("codelist"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("codelist")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<RootCtCodelistRefElement>> refVal_setCodelist;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCodelist);
            setCodelist(refVal_setCodelist);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("parentProduct"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("parentProduct")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CdashigProductRef> refVal_setParentProduct;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParentProduct);
            setParentProduct(refVal_setParentProduct);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("parentDomain"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("parentDomain")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CdashigDomainRef> refVal_setParentDomain;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParentDomain);
            setParentDomain(refVal_setParentDomain);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("parentScenario"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("parentScenario")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CdashigScenarioRef> refVal_setParentScenario;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParentScenario);
            setParentScenario(refVal_setParentScenario);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("rootItem"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("rootItem")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RootCdashigScenarioFieldRef> refVal_setRootItem;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRootItem);
            setRootItem(refVal_setRootItem);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("priorVersion")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CdashigScenarioFieldRef> refVal_setPriorVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriorVersion);
            setPriorVersion(refVal_setPriorVersion);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("sdtmigDatasetMappingTargets"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("sdtmigDatasetMappingTargets")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SdtmigDatasetVariableRefTarget>> refVal_setSdtmigDatasetMappingTargets;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSdtmigDatasetMappingTargets);
            setSdtmigDatasetMappingTargets(refVal_setSdtmigDatasetMappingTargets);
            
        }
    }
    return ok;
}

void CdashigScenarioFieldLinks::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_SelfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("self")), m_Self));
    }
    if(m_CodelistIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("codelist")), m_Codelist));
    }
    if(m_ParentProductIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("parentProduct")), m_ParentProduct));
    }
    if(m_ParentDomainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("parentDomain")), m_ParentDomain));
    }
    if(m_ParentScenarioIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("parentScenario")), m_ParentScenario));
    }
    if(m_RootItemIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("rootItem")), m_RootItem));
    }
    if(m_PriorVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("priorVersion")), m_PriorVersion));
    }
    if(m_SdtmigDatasetMappingTargetsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("sdtmigDatasetMappingTargets")), m_SdtmigDatasetMappingTargets));
    }
}

bool CdashigScenarioFieldLinks::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        std::shared_ptr<CdashigScenarioFieldRef> refVal_setSelf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("self"))), refVal_setSelf );
        setSelf(refVal_setSelf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("codelist"))))
    {
        std::vector<std::shared_ptr<RootCtCodelistRefElement>> refVal_setCodelist;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("codelist"))), refVal_setCodelist );
        setCodelist(refVal_setCodelist);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("parentProduct"))))
    {
        std::shared_ptr<CdashigProductRef> refVal_setParentProduct;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("parentProduct"))), refVal_setParentProduct );
        setParentProduct(refVal_setParentProduct);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("parentDomain"))))
    {
        std::shared_ptr<CdashigDomainRef> refVal_setParentDomain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("parentDomain"))), refVal_setParentDomain );
        setParentDomain(refVal_setParentDomain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("parentScenario"))))
    {
        std::shared_ptr<CdashigScenarioRef> refVal_setParentScenario;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("parentScenario"))), refVal_setParentScenario );
        setParentScenario(refVal_setParentScenario);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("rootItem"))))
    {
        std::shared_ptr<RootCdashigScenarioFieldRef> refVal_setRootItem;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("rootItem"))), refVal_setRootItem );
        setRootItem(refVal_setRootItem);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))))
    {
        std::shared_ptr<CdashigScenarioFieldRef> refVal_setPriorVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))), refVal_setPriorVersion );
        setPriorVersion(refVal_setPriorVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("sdtmigDatasetMappingTargets"))))
    {
        std::vector<std::shared_ptr<SdtmigDatasetVariableRefTarget>> refVal_setSdtmigDatasetMappingTargets;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("sdtmigDatasetMappingTargets"))), refVal_setSdtmigDatasetMappingTargets );
        setSdtmigDatasetMappingTargets(refVal_setSdtmigDatasetMappingTargets);
    }
    return ok;
}


std::shared_ptr<CdashigScenarioFieldRef> CdashigScenarioFieldLinks::getSelf() const
{
    return m_Self;
}


void CdashigScenarioFieldLinks::setSelf(const std::shared_ptr<CdashigScenarioFieldRef>& value)
{
    m_Self = value;
    m_SelfIsSet = true;
}

bool CdashigScenarioFieldLinks::selfIsSet() const
{
    return m_SelfIsSet;
}

void CdashigScenarioFieldLinks::unsetSelf()
{
    m_SelfIsSet = false;
}
std::vector<std::shared_ptr<RootCtCodelistRefElement>> CdashigScenarioFieldLinks::getCodelist() const
{
    return m_Codelist;
}


void CdashigScenarioFieldLinks::setCodelist(const std::vector<std::shared_ptr<RootCtCodelistRefElement>>& value)
{
    m_Codelist = value;
    m_CodelistIsSet = true;
}

bool CdashigScenarioFieldLinks::codelistIsSet() const
{
    return m_CodelistIsSet;
}

void CdashigScenarioFieldLinks::unsetCodelist()
{
    m_CodelistIsSet = false;
}
std::shared_ptr<CdashigProductRef> CdashigScenarioFieldLinks::getParentProduct() const
{
    return m_ParentProduct;
}


void CdashigScenarioFieldLinks::setParentProduct(const std::shared_ptr<CdashigProductRef>& value)
{
    m_ParentProduct = value;
    m_ParentProductIsSet = true;
}

bool CdashigScenarioFieldLinks::parentProductIsSet() const
{
    return m_ParentProductIsSet;
}

void CdashigScenarioFieldLinks::unsetParentProduct()
{
    m_ParentProductIsSet = false;
}
std::shared_ptr<CdashigDomainRef> CdashigScenarioFieldLinks::getParentDomain() const
{
    return m_ParentDomain;
}


void CdashigScenarioFieldLinks::setParentDomain(const std::shared_ptr<CdashigDomainRef>& value)
{
    m_ParentDomain = value;
    m_ParentDomainIsSet = true;
}

bool CdashigScenarioFieldLinks::parentDomainIsSet() const
{
    return m_ParentDomainIsSet;
}

void CdashigScenarioFieldLinks::unsetParentDomain()
{
    m_ParentDomainIsSet = false;
}
std::shared_ptr<CdashigScenarioRef> CdashigScenarioFieldLinks::getParentScenario() const
{
    return m_ParentScenario;
}


void CdashigScenarioFieldLinks::setParentScenario(const std::shared_ptr<CdashigScenarioRef>& value)
{
    m_ParentScenario = value;
    m_ParentScenarioIsSet = true;
}

bool CdashigScenarioFieldLinks::parentScenarioIsSet() const
{
    return m_ParentScenarioIsSet;
}

void CdashigScenarioFieldLinks::unsetParentScenario()
{
    m_ParentScenarioIsSet = false;
}
std::shared_ptr<RootCdashigScenarioFieldRef> CdashigScenarioFieldLinks::getRootItem() const
{
    return m_RootItem;
}


void CdashigScenarioFieldLinks::setRootItem(const std::shared_ptr<RootCdashigScenarioFieldRef>& value)
{
    m_RootItem = value;
    m_RootItemIsSet = true;
}

bool CdashigScenarioFieldLinks::rootItemIsSet() const
{
    return m_RootItemIsSet;
}

void CdashigScenarioFieldLinks::unsetRootItem()
{
    m_RootItemIsSet = false;
}
std::shared_ptr<CdashigScenarioFieldRef> CdashigScenarioFieldLinks::getPriorVersion() const
{
    return m_PriorVersion;
}


void CdashigScenarioFieldLinks::setPriorVersion(const std::shared_ptr<CdashigScenarioFieldRef>& value)
{
    m_PriorVersion = value;
    m_PriorVersionIsSet = true;
}

bool CdashigScenarioFieldLinks::priorVersionIsSet() const
{
    return m_PriorVersionIsSet;
}

void CdashigScenarioFieldLinks::unsetPriorVersion()
{
    m_PriorVersionIsSet = false;
}
std::vector<std::shared_ptr<SdtmigDatasetVariableRefTarget>> CdashigScenarioFieldLinks::getSdtmigDatasetMappingTargets() const
{
    return m_SdtmigDatasetMappingTargets;
}


void CdashigScenarioFieldLinks::setSdtmigDatasetMappingTargets(const std::vector<std::shared_ptr<SdtmigDatasetVariableRefTarget>>& value)
{
    m_SdtmigDatasetMappingTargets = value;
    m_SdtmigDatasetMappingTargetsIsSet = true;
}

bool CdashigScenarioFieldLinks::sdtmigDatasetMappingTargetsIsSet() const
{
    return m_SdtmigDatasetMappingTargetsIsSet;
}

void CdashigScenarioFieldLinks::unsetSdtmigDatasetMappingTargets()
{
    m_SdtmigDatasetMappingTargetsIsSet = false;
}

}
}
}
}



/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdamVarsetRefElement.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

AdamVarsetRefElement::AdamVarsetRefElement()
{
    m_Href = utility::conversions::to_string_t("");
    m_HrefIsSet = false;
    m_Title = utility::conversions::to_string_t("");
    m_TitleIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
}

AdamVarsetRefElement::~AdamVarsetRefElement()
{
}

void AdamVarsetRefElement::validate()
{
    // TODO: implement validation
}

web::json::value AdamVarsetRefElement::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_HrefIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("href"))] = ModelBase::toJson(m_Href);
    }
    if(m_TitleIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("title"))] = ModelBase::toJson(m_Title);
    }
    if(m_TypeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("type"))] = ModelBase::toJson(m_Type);
    }

    return val;
}

bool AdamVarsetRefElement::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("href"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("href")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHref;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHref);
            setHref(refVal_setHref);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("title"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("title")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTitle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTitle);
            setTitle(refVal_setTitle);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
            
        }
    }
    return ok;
}

void AdamVarsetRefElement::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_HrefIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("href")), m_Href));
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("title")), m_Title));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("type")), m_Type));
    }
}

bool AdamVarsetRefElement::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("href"))))
    {
        utility::string_t refVal_setHref;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("href"))), refVal_setHref );
        setHref(refVal_setHref);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("title"))))
    {
        utility::string_t refVal_setTitle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("title"))), refVal_setTitle );
        setTitle(refVal_setTitle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("type"))), refVal_setType );
        setType(refVal_setType);
    }
    return ok;
}


utility::string_t AdamVarsetRefElement::getHref() const
{
    return m_Href;
}


void AdamVarsetRefElement::setHref(const utility::string_t& value)
{
    m_Href = value;
    m_HrefIsSet = true;
}

bool AdamVarsetRefElement::hrefIsSet() const
{
    return m_HrefIsSet;
}

void AdamVarsetRefElement::unsetHref()
{
    m_HrefIsSet = false;
}
utility::string_t AdamVarsetRefElement::getTitle() const
{
    return m_Title;
}


void AdamVarsetRefElement::setTitle(const utility::string_t& value)
{
    m_Title = value;
    m_TitleIsSet = true;
}

bool AdamVarsetRefElement::titleIsSet() const
{
    return m_TitleIsSet;
}

void AdamVarsetRefElement::unsetTitle()
{
    m_TitleIsSet = false;
}
utility::string_t AdamVarsetRefElement::getType() const
{
    return m_Type;
}


void AdamVarsetRefElement::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool AdamVarsetRefElement::typeIsSet() const
{
    return m_TypeIsSet;
}

void AdamVarsetRefElement::unsetType()
{
    m_TypeIsSet = false;
}

}
}
}
}



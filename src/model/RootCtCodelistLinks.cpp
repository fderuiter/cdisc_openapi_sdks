/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/RootCtCodelistLinks.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

RootCtCodelistLinks::RootCtCodelistLinks()
{
    m_SelfIsSet = false;
    m_VersionsIsSet = false;
}

RootCtCodelistLinks::~RootCtCodelistLinks()
{
}

void RootCtCodelistLinks::validate()
{
    // TODO: implement validation
}

web::json::value RootCtCodelistLinks::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SelfIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("self"))] = ModelBase::toJson(m_Self);
    }
    if(m_VersionsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("versions"))] = ModelBase::toJson(m_Versions);
    }

    return val;
}

bool RootCtCodelistLinks::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("self")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RootCtCodelistRef> refVal_setSelf;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSelf);
            setSelf(refVal_setSelf);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("versions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("versions")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<CtCodelistRefVersion>> refVal_setVersions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersions);
            setVersions(refVal_setVersions);
            
        }
    }
    return ok;
}

void RootCtCodelistLinks::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_SelfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("self")), m_Self));
    }
    if(m_VersionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("versions")), m_Versions));
    }
}

bool RootCtCodelistLinks::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        std::shared_ptr<RootCtCodelistRef> refVal_setSelf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("self"))), refVal_setSelf );
        setSelf(refVal_setSelf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("versions"))))
    {
        std::vector<std::shared_ptr<CtCodelistRefVersion>> refVal_setVersions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("versions"))), refVal_setVersions );
        setVersions(refVal_setVersions);
    }
    return ok;
}


std::shared_ptr<RootCtCodelistRef> RootCtCodelistLinks::getSelf() const
{
    return m_Self;
}


void RootCtCodelistLinks::setSelf(const std::shared_ptr<RootCtCodelistRef>& value)
{
    m_Self = value;
    m_SelfIsSet = true;
}

bool RootCtCodelistLinks::selfIsSet() const
{
    return m_SelfIsSet;
}

void RootCtCodelistLinks::unsetSelf()
{
    m_SelfIsSet = false;
}
std::vector<std::shared_ptr<CtCodelistRefVersion>> RootCtCodelistLinks::getVersions() const
{
    return m_Versions;
}


void RootCtCodelistLinks::setVersions(const std::vector<std::shared_ptr<CtCodelistRefVersion>>& value)
{
    m_Versions = value;
    m_VersionsIsSet = true;
}

bool RootCtCodelistLinks::versionsIsSet() const
{
    return m_VersionsIsSet;
}

void RootCtCodelistLinks::unsetVersions()
{
    m_VersionsIsSet = false;
}

}
}
}
}



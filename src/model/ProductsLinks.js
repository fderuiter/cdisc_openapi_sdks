/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProductgroupDataAnalysis from './ProductgroupDataAnalysis';
import ProductgroupDataCollection from './ProductgroupDataCollection';
import ProductgroupDataTabulation from './ProductgroupDataTabulation';
import ProductgroupQrs from './ProductgroupQrs';
import ProductgroupTerminology from './ProductgroupTerminology';
import ProductsRef from './ProductsRef';

/**
 * The ProductsLinks model module.
 * @module model/ProductsLinks
 * @version 1.1.0
 */
class ProductsLinks {
    /**
     * Constructs a new <code>ProductsLinks</code>.
     * @alias module:model/ProductsLinks
     */
    constructor() { 
        
        ProductsLinks.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductsLinks</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductsLinks} obj Optional instance to populate.
     * @return {module:model/ProductsLinks} The populated <code>ProductsLinks</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductsLinks();

            if (data.hasOwnProperty('self')) {
                obj['self'] = ProductsRef.constructFromObject(data['self']);
            }
            if (data.hasOwnProperty('data-collection')) {
                obj['data-collection'] = ProductgroupDataCollection.constructFromObject(data['data-collection']);
            }
            if (data.hasOwnProperty('data-tabulation')) {
                obj['data-tabulation'] = ProductgroupDataTabulation.constructFromObject(data['data-tabulation']);
            }
            if (data.hasOwnProperty('data-analysis')) {
                obj['data-analysis'] = ProductgroupDataAnalysis.constructFromObject(data['data-analysis']);
            }
            if (data.hasOwnProperty('terminology')) {
                obj['terminology'] = ProductgroupTerminology.constructFromObject(data['terminology']);
            }
            if (data.hasOwnProperty('measure')) {
                obj['measure'] = ProductgroupQrs.constructFromObject(data['measure']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductsLinks</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductsLinks</code>.
     */
    static validateJSON(data) {
        // validate the optional field `self`
        if (data['self']) { // data not null
          ProductsRef.validateJSON(data['self']);
        }
        // validate the optional field `data-collection`
        if (data['data-collection']) { // data not null
          ProductgroupDataCollection.validateJSON(data['data-collection']);
        }
        // validate the optional field `data-tabulation`
        if (data['data-tabulation']) { // data not null
          ProductgroupDataTabulation.validateJSON(data['data-tabulation']);
        }
        // validate the optional field `data-analysis`
        if (data['data-analysis']) { // data not null
          ProductgroupDataAnalysis.validateJSON(data['data-analysis']);
        }
        // validate the optional field `terminology`
        if (data['terminology']) { // data not null
          ProductgroupTerminology.validateJSON(data['terminology']);
        }
        // validate the optional field `measure`
        if (data['measure']) { // data not null
          ProductgroupQrs.validateJSON(data['measure']);
        }

        return true;
    }


}



/**
 * @member {module:model/ProductsRef} self
 */
ProductsLinks.prototype['self'] = undefined;

/**
 * @member {module:model/ProductgroupDataCollection} data-collection
 */
ProductsLinks.prototype['data-collection'] = undefined;

/**
 * @member {module:model/ProductgroupDataTabulation} data-tabulation
 */
ProductsLinks.prototype['data-tabulation'] = undefined;

/**
 * @member {module:model/ProductgroupDataAnalysis} data-analysis
 */
ProductsLinks.prototype['data-analysis'] = undefined;

/**
 * @member {module:model/ProductgroupTerminology} terminology
 */
ProductsLinks.prototype['terminology'] = undefined;

/**
 * @member {module:model/ProductgroupQrs} measure
 */
ProductsLinks.prototype['measure'] = undefined;






export default ProductsLinks;


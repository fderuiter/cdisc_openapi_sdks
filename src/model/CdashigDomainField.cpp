/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CdashigDomainField.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

CdashigDomainField::CdashigDomainField()
{
    m_Ordinal = utility::conversions::to_string_t("");
    m_OrdinalIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Label = utility::conversions::to_string_t("");
    m_LabelIsSet = false;
    m_Definition = utility::conversions::to_string_t("");
    m_DefinitionIsSet = false;
    m_QuestionText = utility::conversions::to_string_t("");
    m_QuestionTextIsSet = false;
    m_Prompt = utility::conversions::to_string_t("");
    m_PromptIsSet = false;
    m_CompletionInstructions = utility::conversions::to_string_t("");
    m_CompletionInstructionsIsSet = false;
    m_ImplementationNotes = utility::conversions::to_string_t("");
    m_ImplementationNotesIsSet = false;
    m_SimpleDatatype = utility::conversions::to_string_t("");
    m_SimpleDatatypeIsSet = false;
    m_MappingInstructions = utility::conversions::to_string_t("");
    m_MappingInstructionsIsSet = false;
    m_Core = utility::conversions::to_string_t("");
    m_CoreIsSet = false;
    m__linksIsSet = false;
}

CdashigDomainField::~CdashigDomainField()
{
}

void CdashigDomainField::validate()
{
    // TODO: implement validation
}

web::json::value CdashigDomainField::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_OrdinalIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("ordinal"))] = ModelBase::toJson(m_Ordinal);
    }
    if(m_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_LabelIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("label"))] = ModelBase::toJson(m_Label);
    }
    if(m_DefinitionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("definition"))] = ModelBase::toJson(m_Definition);
    }
    if(m_QuestionTextIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("questionText"))] = ModelBase::toJson(m_QuestionText);
    }
    if(m_PromptIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("prompt"))] = ModelBase::toJson(m_Prompt);
    }
    if(m_CompletionInstructionsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("completionInstructions"))] = ModelBase::toJson(m_CompletionInstructions);
    }
    if(m_ImplementationNotesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("implementationNotes"))] = ModelBase::toJson(m_ImplementationNotes);
    }
    if(m_SimpleDatatypeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("simpleDatatype"))] = ModelBase::toJson(m_SimpleDatatype);
    }
    if(m_MappingInstructionsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("mappingInstructions"))] = ModelBase::toJson(m_MappingInstructions);
    }
    if(m_CoreIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("core"))] = ModelBase::toJson(m_Core);
    }
    if(m__linksIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("_links"))] = ModelBase::toJson(m__links);
    }

    return val;
}

bool CdashigDomainField::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("ordinal"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("ordinal")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOrdinal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrdinal);
            setOrdinal(refVal_setOrdinal);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLabel);
            setLabel(refVal_setLabel);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("definition"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("definition")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDefinition;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDefinition);
            setDefinition(refVal_setDefinition);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("questionText"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("questionText")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setQuestionText;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQuestionText);
            setQuestionText(refVal_setQuestionText);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("prompt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("prompt")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPrompt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrompt);
            setPrompt(refVal_setPrompt);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("completionInstructions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("completionInstructions")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCompletionInstructions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCompletionInstructions);
            setCompletionInstructions(refVal_setCompletionInstructions);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("implementationNotes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("implementationNotes")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImplementationNotes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImplementationNotes);
            setImplementationNotes(refVal_setImplementationNotes);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("simpleDatatype"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("simpleDatatype")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSimpleDatatype;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSimpleDatatype);
            setSimpleDatatype(refVal_setSimpleDatatype);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("mappingInstructions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("mappingInstructions")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMappingInstructions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMappingInstructions);
            setMappingInstructions(refVal_setMappingInstructions);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("core"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("core")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCore);
            setCore(refVal_setCore);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("_links"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("_links")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CdashigDomainFieldLinks> refVal_setLinks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLinks);
            setLinks(refVal_setLinks);
            
        }
    }
    return ok;
}

void CdashigDomainField::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_OrdinalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("ordinal")), m_Ordinal));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("name")), m_Name));
    }
    if(m_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("label")), m_Label));
    }
    if(m_DefinitionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("definition")), m_Definition));
    }
    if(m_QuestionTextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("questionText")), m_QuestionText));
    }
    if(m_PromptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("prompt")), m_Prompt));
    }
    if(m_CompletionInstructionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("completionInstructions")), m_CompletionInstructions));
    }
    if(m_ImplementationNotesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("implementationNotes")), m_ImplementationNotes));
    }
    if(m_SimpleDatatypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("simpleDatatype")), m_SimpleDatatype));
    }
    if(m_MappingInstructionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("mappingInstructions")), m_MappingInstructions));
    }
    if(m_CoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("core")), m_Core));
    }
    if(m__linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("_links")), m__links));
    }
}

bool CdashigDomainField::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("ordinal"))))
    {
        utility::string_t refVal_setOrdinal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("ordinal"))), refVal_setOrdinal );
        setOrdinal(refVal_setOrdinal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("label"))))
    {
        utility::string_t refVal_setLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("label"))), refVal_setLabel );
        setLabel(refVal_setLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("definition"))))
    {
        utility::string_t refVal_setDefinition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("definition"))), refVal_setDefinition );
        setDefinition(refVal_setDefinition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("questionText"))))
    {
        utility::string_t refVal_setQuestionText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("questionText"))), refVal_setQuestionText );
        setQuestionText(refVal_setQuestionText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("prompt"))))
    {
        utility::string_t refVal_setPrompt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("prompt"))), refVal_setPrompt );
        setPrompt(refVal_setPrompt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("completionInstructions"))))
    {
        utility::string_t refVal_setCompletionInstructions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("completionInstructions"))), refVal_setCompletionInstructions );
        setCompletionInstructions(refVal_setCompletionInstructions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("implementationNotes"))))
    {
        utility::string_t refVal_setImplementationNotes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("implementationNotes"))), refVal_setImplementationNotes );
        setImplementationNotes(refVal_setImplementationNotes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("simpleDatatype"))))
    {
        utility::string_t refVal_setSimpleDatatype;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("simpleDatatype"))), refVal_setSimpleDatatype );
        setSimpleDatatype(refVal_setSimpleDatatype);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("mappingInstructions"))))
    {
        utility::string_t refVal_setMappingInstructions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("mappingInstructions"))), refVal_setMappingInstructions );
        setMappingInstructions(refVal_setMappingInstructions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("core"))))
    {
        utility::string_t refVal_setCore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("core"))), refVal_setCore );
        setCore(refVal_setCore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("_links"))))
    {
        std::shared_ptr<CdashigDomainFieldLinks> refVal_setLinks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("_links"))), refVal_setLinks );
        setLinks(refVal_setLinks);
    }
    return ok;
}


utility::string_t CdashigDomainField::getOrdinal() const
{
    return m_Ordinal;
}


void CdashigDomainField::setOrdinal(const utility::string_t& value)
{
    m_Ordinal = value;
    m_OrdinalIsSet = true;
}

bool CdashigDomainField::ordinalIsSet() const
{
    return m_OrdinalIsSet;
}

void CdashigDomainField::unsetOrdinal()
{
    m_OrdinalIsSet = false;
}
utility::string_t CdashigDomainField::getName() const
{
    return m_Name;
}


void CdashigDomainField::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool CdashigDomainField::nameIsSet() const
{
    return m_NameIsSet;
}

void CdashigDomainField::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t CdashigDomainField::getLabel() const
{
    return m_Label;
}


void CdashigDomainField::setLabel(const utility::string_t& value)
{
    m_Label = value;
    m_LabelIsSet = true;
}

bool CdashigDomainField::labelIsSet() const
{
    return m_LabelIsSet;
}

void CdashigDomainField::unsetLabel()
{
    m_LabelIsSet = false;
}
utility::string_t CdashigDomainField::getDefinition() const
{
    return m_Definition;
}


void CdashigDomainField::setDefinition(const utility::string_t& value)
{
    m_Definition = value;
    m_DefinitionIsSet = true;
}

bool CdashigDomainField::definitionIsSet() const
{
    return m_DefinitionIsSet;
}

void CdashigDomainField::unsetDefinition()
{
    m_DefinitionIsSet = false;
}
utility::string_t CdashigDomainField::getQuestionText() const
{
    return m_QuestionText;
}


void CdashigDomainField::setQuestionText(const utility::string_t& value)
{
    m_QuestionText = value;
    m_QuestionTextIsSet = true;
}

bool CdashigDomainField::questionTextIsSet() const
{
    return m_QuestionTextIsSet;
}

void CdashigDomainField::unsetQuestionText()
{
    m_QuestionTextIsSet = false;
}
utility::string_t CdashigDomainField::getPrompt() const
{
    return m_Prompt;
}


void CdashigDomainField::setPrompt(const utility::string_t& value)
{
    m_Prompt = value;
    m_PromptIsSet = true;
}

bool CdashigDomainField::promptIsSet() const
{
    return m_PromptIsSet;
}

void CdashigDomainField::unsetPrompt()
{
    m_PromptIsSet = false;
}
utility::string_t CdashigDomainField::getCompletionInstructions() const
{
    return m_CompletionInstructions;
}


void CdashigDomainField::setCompletionInstructions(const utility::string_t& value)
{
    m_CompletionInstructions = value;
    m_CompletionInstructionsIsSet = true;
}

bool CdashigDomainField::completionInstructionsIsSet() const
{
    return m_CompletionInstructionsIsSet;
}

void CdashigDomainField::unsetCompletionInstructions()
{
    m_CompletionInstructionsIsSet = false;
}
utility::string_t CdashigDomainField::getImplementationNotes() const
{
    return m_ImplementationNotes;
}


void CdashigDomainField::setImplementationNotes(const utility::string_t& value)
{
    m_ImplementationNotes = value;
    m_ImplementationNotesIsSet = true;
}

bool CdashigDomainField::implementationNotesIsSet() const
{
    return m_ImplementationNotesIsSet;
}

void CdashigDomainField::unsetImplementationNotes()
{
    m_ImplementationNotesIsSet = false;
}
utility::string_t CdashigDomainField::getSimpleDatatype() const
{
    return m_SimpleDatatype;
}


void CdashigDomainField::setSimpleDatatype(const utility::string_t& value)
{
    m_SimpleDatatype = value;
    m_SimpleDatatypeIsSet = true;
}

bool CdashigDomainField::simpleDatatypeIsSet() const
{
    return m_SimpleDatatypeIsSet;
}

void CdashigDomainField::unsetSimpleDatatype()
{
    m_SimpleDatatypeIsSet = false;
}
utility::string_t CdashigDomainField::getMappingInstructions() const
{
    return m_MappingInstructions;
}


void CdashigDomainField::setMappingInstructions(const utility::string_t& value)
{
    m_MappingInstructions = value;
    m_MappingInstructionsIsSet = true;
}

bool CdashigDomainField::mappingInstructionsIsSet() const
{
    return m_MappingInstructionsIsSet;
}

void CdashigDomainField::unsetMappingInstructions()
{
    m_MappingInstructionsIsSet = false;
}
utility::string_t CdashigDomainField::getCore() const
{
    return m_Core;
}


void CdashigDomainField::setCore(const utility::string_t& value)
{
    m_Core = value;
    m_CoreIsSet = true;
}

bool CdashigDomainField::coreIsSet() const
{
    return m_CoreIsSet;
}

void CdashigDomainField::unsetCore()
{
    m_CoreIsSet = false;
}
std::shared_ptr<CdashigDomainFieldLinks> CdashigDomainField::getLinks() const
{
    return m__links;
}


void CdashigDomainField::setLinks(const std::shared_ptr<CdashigDomainFieldLinks>& value)
{
    m__links = value;
    m__linksIsSet = true;
}

bool CdashigDomainField::linksIsSet() const
{
    return m__linksIsSet;
}

void CdashigDomainField::unset_links()
{
    m__linksIsSet = false;
}

}
}
}
}



note
 description:"[
		CDISC Library API
 		REST API Documentation for CDISC Library in production server
  		The version of the OpenAPI document: 1.1.0
 	    Contact: cdisc_library_support@cdisc.org

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class EXPORT_ADAM_VARIABLES_ROW




feature --Access

    version: detachable STRING_32
      
    data__structure__name: detachable STRING_32
      
    dataset__name: detachable STRING_32
      
    variable__group: detachable STRING_32
      
    variable__name: detachable STRING_32
      
    variable__label: detachable STRING_32
      
    type: detachable STRING_32
      
    codelist__controlled__terms: detachable STRING_32
      
    core: detachable STRING_32
      
    c_di_sc__notes: detachable STRING_32
      

feature -- Change Element

    set_version (a_name: like version)
        -- Set 'version' with 'a_name'.
      do
        version := a_name
      ensure
        version_set: version = a_name
      end

    set_data__structure__name (a_name: like data__structure__name)
        -- Set 'data__structure__name' with 'a_name'.
      do
        data__structure__name := a_name
      ensure
        data__structure__name_set: data__structure__name = a_name
      end

    set_dataset__name (a_name: like dataset__name)
        -- Set 'dataset__name' with 'a_name'.
      do
        dataset__name := a_name
      ensure
        dataset__name_set: dataset__name = a_name
      end

    set_variable__group (a_name: like variable__group)
        -- Set 'variable__group' with 'a_name'.
      do
        variable__group := a_name
      ensure
        variable__group_set: variable__group = a_name
      end

    set_variable__name (a_name: like variable__name)
        -- Set 'variable__name' with 'a_name'.
      do
        variable__name := a_name
      ensure
        variable__name_set: variable__name = a_name
      end

    set_variable__label (a_name: like variable__label)
        -- Set 'variable__label' with 'a_name'.
      do
        variable__label := a_name
      ensure
        variable__label_set: variable__label = a_name
      end

    set_type (a_name: like type)
        -- Set 'type' with 'a_name'.
      do
        type := a_name
      ensure
        type_set: type = a_name
      end

    set_codelist__controlled__terms (a_name: like codelist__controlled__terms)
        -- Set 'codelist__controlled__terms' with 'a_name'.
      do
        codelist__controlled__terms := a_name
      ensure
        codelist__controlled__terms_set: codelist__controlled__terms = a_name
      end

    set_core (a_name: like core)
        -- Set 'core' with 'a_name'.
      do
        core := a_name
      ensure
        core_set: core = a_name
      end

    set_c_di_sc__notes (a_name: like c_di_sc__notes)
        -- Set 'c_di_sc__notes' with 'a_name'.
      do
        c_di_sc__notes := a_name
      ensure
        c_di_sc__notes_set: c_di_sc__notes = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass EXPORT_ADAM_VARIABLES_ROW%N")
        if attached version as l_version then
          Result.append ("%Nversion:")
          Result.append (l_version.out)
          Result.append ("%N")
        end
        if attached data__structure__name as l_data__structure__name then
          Result.append ("%Ndata__structure__name:")
          Result.append (l_data__structure__name.out)
          Result.append ("%N")
        end
        if attached dataset__name as l_dataset__name then
          Result.append ("%Ndataset__name:")
          Result.append (l_dataset__name.out)
          Result.append ("%N")
        end
        if attached variable__group as l_variable__group then
          Result.append ("%Nvariable__group:")
          Result.append (l_variable__group.out)
          Result.append ("%N")
        end
        if attached variable__name as l_variable__name then
          Result.append ("%Nvariable__name:")
          Result.append (l_variable__name.out)
          Result.append ("%N")
        end
        if attached variable__label as l_variable__label then
          Result.append ("%Nvariable__label:")
          Result.append (l_variable__label.out)
          Result.append ("%N")
        end
        if attached type as l_type then
          Result.append ("%Ntype:")
          Result.append (l_type.out)
          Result.append ("%N")
        end
        if attached codelist__controlled__terms as l_codelist__controlled__terms then
          Result.append ("%Ncodelist__controlled__terms:")
          Result.append (l_codelist__controlled__terms.out)
          Result.append ("%N")
        end
        if attached core as l_core then
          Result.append ("%Ncore:")
          Result.append (l_core.out)
          Result.append ("%N")
        end
        if attached c_di_sc__notes as l_c_di_sc__notes then
          Result.append ("%Nc_di_sc__notes:")
          Result.append (l_c_di_sc__notes.out)
          Result.append ("%N")
        end
      end
end


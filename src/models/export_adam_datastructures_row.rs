/*
 * CDISC Library API
 *
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExportAdamDatastructuresRow {
    #[serde(rename = "Version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "Data Structure Name", skip_serializing_if = "Option::is_none")]
    pub data_structure_name: Option<String>,
    #[serde(rename = "Dataset Name", skip_serializing_if = "Option::is_none")]
    pub dataset_name: Option<String>,
    #[serde(rename = "Dataset Label", skip_serializing_if = "Option::is_none")]
    pub dataset_label: Option<String>,
    #[serde(rename = "Dataset Description", skip_serializing_if = "Option::is_none")]
    pub dataset_description: Option<String>,
    #[serde(rename = "Class", skip_serializing_if = "Option::is_none")]
    pub class: Option<String>,
}

impl ExportAdamDatastructuresRow {
    pub fn new() -> ExportAdamDatastructuresRow {
        ExportAdamDatastructuresRow {
            version: None,
            data_structure_name: None,
            dataset_name: None,
            dataset_label: None,
            dataset_description: None,
            class: None,
        }
    }
}


/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CdashClass from '../model/CdashClass';
import CdashClassDomains from '../model/CdashClassDomains';
import CdashClassField from '../model/CdashClassField';
import CdashDomain from '../model/CdashDomain';
import CdashDomainField from '../model/CdashDomainField';
import CdashDomainFields from '../model/CdashDomainFields';
import CdashProduct from '../model/CdashProduct';
import CdashProductClasses from '../model/CdashProductClasses';
import CdashProductDomains from '../model/CdashProductDomains';
import DefaultErrorResponse from '../model/DefaultErrorResponse';
import ExportCdashTable from '../model/ExportCdashTable';
import RootCdashClassField from '../model/RootCdashClassField';
import RootCdashDomainField from '../model/RootCdashDomainField';
import XmlCdashClass from '../model/XmlCdashClass';
import XmlCdashClassDomains from '../model/XmlCdashClassDomains';
import XmlCdashClassField from '../model/XmlCdashClassField';
import XmlCdashDomain from '../model/XmlCdashDomain';
import XmlCdashDomainField from '../model/XmlCdashDomainField';
import XmlCdashDomainFields from '../model/XmlCdashDomainFields';
import XmlCdashProduct from '../model/XmlCdashProduct';
import XmlCdashProductClasses from '../model/XmlCdashProductClasses';
import XmlCdashProductDomains from '../model/XmlCdashProductDomains';
import XmlRootCdashClassField from '../model/XmlRootCdashClassField';
import XmlRootCdashDomainField from '../model/XmlRootCdashDomainField';

/**
* ClinicalDataAcquisitionStandardsHarmonizationCDASH service.
* @module api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi
* @version 1.1.0
*/
export default class ClinicalDataAcquisitionStandardsHarmonizationCDASHApi {

    /**
    * Constructs a new ClinicalDataAcquisitionStandardsHarmonizationCDASHApi. 
    * @alias module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mdrCdashVersionClassesClassDomainsGet operation.
     * @callback module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi~mdrCdashVersionClassesClassDomainsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CdashClassDomains} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CDASH Class Domain List
     * @param {String} version CDISC Library Product Version
     * @param {String} _class CDASH Class Identifier
     * @param {module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi~mdrCdashVersionClassesClassDomainsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CdashClassDomains}
     */
    mdrCdashVersionClassesClassDomainsGet(version, _class, callback) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling mdrCdashVersionClassesClassDomainsGet");
      }
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling mdrCdashVersionClassesClassDomainsGet");
      }

      let pathParams = {
        'version': version,
        'class': _class
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = CdashClassDomains;
      return this.apiClient.callApi(
        '/mdr/cdash/{version}/classes/{class}/domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mdrCdashVersionClassesClassFieldsFieldGet operation.
     * @callback module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi~mdrCdashVersionClassesClassFieldsFieldGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CdashClassField} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CDASH Class Field
     * @param {String} version CDISC Library Product Version
     * @param {String} _class CDASH Class Identifier
     * @param {String} field CDASH Field Identifier
     * @param {module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi~mdrCdashVersionClassesClassFieldsFieldGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CdashClassField}
     */
    mdrCdashVersionClassesClassFieldsFieldGet(version, _class, field, callback) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling mdrCdashVersionClassesClassFieldsFieldGet");
      }
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling mdrCdashVersionClassesClassFieldsFieldGet");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling mdrCdashVersionClassesClassFieldsFieldGet");
      }

      let pathParams = {
        'version': version,
        'class': _class,
        'field': field
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = CdashClassField;
      return this.apiClient.callApi(
        '/mdr/cdash/{version}/classes/{class}/fields/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mdrCdashVersionClassesClassGet operation.
     * @callback module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi~mdrCdashVersionClassesClassGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CdashClass} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CDASH Class
     * @param {String} version CDISC Library Product Version
     * @param {String} _class CDASH Class Identifier
     * @param {module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi~mdrCdashVersionClassesClassGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CdashClass}
     */
    mdrCdashVersionClassesClassGet(version, _class, callback) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling mdrCdashVersionClassesClassGet");
      }
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling mdrCdashVersionClassesClassGet");
      }

      let pathParams = {
        'version': version,
        'class': _class
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = CdashClass;
      return this.apiClient.callApi(
        '/mdr/cdash/{version}/classes/{class}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mdrCdashVersionClassesGet operation.
     * @callback module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi~mdrCdashVersionClassesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CdashProductClasses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CDASH Class List
     * @param {String} version CDISC Library Product Version
     * @param {module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi~mdrCdashVersionClassesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CdashProductClasses}
     */
    mdrCdashVersionClassesGet(version, callback) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling mdrCdashVersionClassesGet");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = CdashProductClasses;
      return this.apiClient.callApi(
        '/mdr/cdash/{version}/classes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mdrCdashVersionDomainsDomainFieldsFieldGet operation.
     * @callback module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi~mdrCdashVersionDomainsDomainFieldsFieldGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CdashDomainField} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CDASH Domain Field
     * @param {String} version CDISC Library Product Version
     * @param {String} domain CDASH Domain Identifier
     * @param {String} field CDASH Field Identifier
     * @param {module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi~mdrCdashVersionDomainsDomainFieldsFieldGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CdashDomainField}
     */
    mdrCdashVersionDomainsDomainFieldsFieldGet(version, domain, field, callback) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling mdrCdashVersionDomainsDomainFieldsFieldGet");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling mdrCdashVersionDomainsDomainFieldsFieldGet");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling mdrCdashVersionDomainsDomainFieldsFieldGet");
      }

      let pathParams = {
        'version': version,
        'domain': domain,
        'field': field
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = CdashDomainField;
      return this.apiClient.callApi(
        '/mdr/cdash/{version}/domains/{domain}/fields/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mdrCdashVersionDomainsDomainFieldsGet operation.
     * @callback module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi~mdrCdashVersionDomainsDomainFieldsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CdashDomainFields} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CDASH Domain Field List
     * @param {String} version CDISC Library Product Version
     * @param {String} domain CDASH Domain Identifier
     * @param {module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi~mdrCdashVersionDomainsDomainFieldsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CdashDomainFields}
     */
    mdrCdashVersionDomainsDomainFieldsGet(version, domain, callback) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling mdrCdashVersionDomainsDomainFieldsGet");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling mdrCdashVersionDomainsDomainFieldsGet");
      }

      let pathParams = {
        'version': version,
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = CdashDomainFields;
      return this.apiClient.callApi(
        '/mdr/cdash/{version}/domains/{domain}/fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mdrCdashVersionDomainsDomainGet operation.
     * @callback module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi~mdrCdashVersionDomainsDomainGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CdashDomain} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CDASH Domain
     * @param {String} version CDISC Library Product Version
     * @param {String} domain CDASH Domain Identifier
     * @param {module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi~mdrCdashVersionDomainsDomainGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CdashDomain}
     */
    mdrCdashVersionDomainsDomainGet(version, domain, callback) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling mdrCdashVersionDomainsDomainGet");
      }
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling mdrCdashVersionDomainsDomainGet");
      }

      let pathParams = {
        'version': version,
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = CdashDomain;
      return this.apiClient.callApi(
        '/mdr/cdash/{version}/domains/{domain}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mdrCdashVersionDomainsGet operation.
     * @callback module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi~mdrCdashVersionDomainsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CdashProductDomains} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CDASH Domain List
     * @param {String} version CDISC Library Product Version
     * @param {module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi~mdrCdashVersionDomainsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CdashProductDomains}
     */
    mdrCdashVersionDomainsGet(version, callback) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling mdrCdashVersionDomainsGet");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = CdashProductDomains;
      return this.apiClient.callApi(
        '/mdr/cdash/{version}/domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mdrCdashVersionGet operation.
     * @callback module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi~mdrCdashVersionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CdashProduct} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CDASH Product
     * @param {String} version CDISC Library Product Version
     * @param {module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi~mdrCdashVersionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CdashProduct}
     */
    mdrCdashVersionGet(version, callback) {
      let postBody = null;
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling mdrCdashVersionGet");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
      let returnType = CdashProduct;
      return this.apiClient.callApi(
        '/mdr/cdash/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mdrRootCdashClassesClassFieldsFieldGet operation.
     * @callback module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi~mdrRootCdashClassesClassFieldsFieldGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RootCdashClassField} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Root CDASH Class Field
     * @param {String} _class CDASH Class Identifier
     * @param {String} field CDASH Field Identifier
     * @param {module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi~mdrRootCdashClassesClassFieldsFieldGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RootCdashClassField}
     */
    mdrRootCdashClassesClassFieldsFieldGet(_class, field, callback) {
      let postBody = null;
      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling mdrRootCdashClassesClassFieldsFieldGet");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling mdrRootCdashClassesClassFieldsFieldGet");
      }

      let pathParams = {
        'class': _class,
        'field': field
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RootCdashClassField;
      return this.apiClient.callApi(
        '/mdr/root/cdash/classes/{class}/fields/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mdrRootCdashDomainsDomainFieldsFieldGet operation.
     * @callback module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi~mdrRootCdashDomainsDomainFieldsFieldGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RootCdashDomainField} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Root CDASH Domain Field
     * @param {String} domain CDASH Domain Identifier
     * @param {String} field CDASH Field Identifier
     * @param {module:api/ClinicalDataAcquisitionStandardsHarmonizationCDASHApi~mdrRootCdashDomainsDomainFieldsFieldGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RootCdashDomainField}
     */
    mdrRootCdashDomainsDomainFieldsFieldGet(domain, field, callback) {
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling mdrRootCdashDomainsDomainFieldsFieldGet");
      }
      // verify the required parameter 'field' is set
      if (field === undefined || field === null) {
        throw new Error("Missing the required parameter 'field' when calling mdrRootCdashDomainsDomainFieldsFieldGet");
      }

      let pathParams = {
        'domain': domain,
        'field': field
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RootCdashDomainField;
      return this.apiClient.callApi(
        '/mdr/root/cdash/domains/{domain}/fields/{field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}

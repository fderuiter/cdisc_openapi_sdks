/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CtCodelist from '../model/CtCodelist';
import CtCodelistTerms from '../model/CtCodelistTerms';
import CtPackage from '../model/CtPackage';
import CtPackageCodelists from '../model/CtPackageCodelists';
import CtPackages from '../model/CtPackages';
import CtTerm from '../model/CtTerm';
import DefaultErrorResponse from '../model/DefaultErrorResponse';
import ExportCtTable from '../model/ExportCtTable';
import RootCtCodelist from '../model/RootCtCodelist';
import RootCtTerm from '../model/RootCtTerm';
import XmlCtCodelist from '../model/XmlCtCodelist';
import XmlCtCodelistTerms from '../model/XmlCtCodelistTerms';
import XmlCtPackage from '../model/XmlCtPackage';
import XmlCtPackageCodelists from '../model/XmlCtPackageCodelists';
import XmlCtPackages from '../model/XmlCtPackages';
import XmlCtTerm from '../model/XmlCtTerm';
import XmlRootCtCodelist from '../model/XmlRootCtCodelist';
import XmlRootCtTerm from '../model/XmlRootCtTerm';

/**
* ControlledTerminologyCT service.
* @module api/ControlledTerminologyCTApi
* @version 1.1.0
*/
export default class ControlledTerminologyCTApi {

    /**
    * Constructs a new ControlledTerminologyCTApi. 
    * @alias module:api/ControlledTerminologyCTApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mdrCtPackagesGet operation.
     * @callback module:api/ControlledTerminologyCTApi~mdrCtPackagesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CtPackages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CDISC Library CT Package List
     * @param {module:api/ControlledTerminologyCTApi~mdrCtPackagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CtPackages}
     */
    mdrCtPackagesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = CtPackages;
      return this.apiClient.callApi(
        '/mdr/ct/packages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mdrCtPackagesPackageCodelistsCodelistGet operation.
     * @callback module:api/ControlledTerminologyCTApi~mdrCtPackagesPackageCodelistsCodelistGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CtCodelist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CDISC Library CT Package Codelist
     * @param {String} _package CT Package Identifier
     * @param {String} codelist CT Codelist Identifier
     * @param {module:api/ControlledTerminologyCTApi~mdrCtPackagesPackageCodelistsCodelistGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CtCodelist}
     */
    mdrCtPackagesPackageCodelistsCodelistGet(_package, codelist, callback) {
      let postBody = null;
      // verify the required parameter '_package' is set
      if (_package === undefined || _package === null) {
        throw new Error("Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsCodelistGet");
      }
      // verify the required parameter 'codelist' is set
      if (codelist === undefined || codelist === null) {
        throw new Error("Missing the required parameter 'codelist' when calling mdrCtPackagesPackageCodelistsCodelistGet");
      }

      let pathParams = {
        'package': _package,
        'codelist': codelist
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = CtCodelist;
      return this.apiClient.callApi(
        '/mdr/ct/packages/{package}/codelists/{codelist}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mdrCtPackagesPackageCodelistsCodelistTermsGet operation.
     * @callback module:api/ControlledTerminologyCTApi~mdrCtPackagesPackageCodelistsCodelistTermsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CtCodelistTerms} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CDISC Library CT Package Codelist Term List
     * @param {String} _package CT Package Identifier
     * @param {String} codelist CT Codelist Identifier
     * @param {module:api/ControlledTerminologyCTApi~mdrCtPackagesPackageCodelistsCodelistTermsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CtCodelistTerms}
     */
    mdrCtPackagesPackageCodelistsCodelistTermsGet(_package, codelist, callback) {
      let postBody = null;
      // verify the required parameter '_package' is set
      if (_package === undefined || _package === null) {
        throw new Error("Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsCodelistTermsGet");
      }
      // verify the required parameter 'codelist' is set
      if (codelist === undefined || codelist === null) {
        throw new Error("Missing the required parameter 'codelist' when calling mdrCtPackagesPackageCodelistsCodelistTermsGet");
      }

      let pathParams = {
        'package': _package,
        'codelist': codelist
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = CtCodelistTerms;
      return this.apiClient.callApi(
        '/mdr/ct/packages/{package}/codelists/{codelist}/terms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mdrCtPackagesPackageCodelistsCodelistTermsTermGet operation.
     * @callback module:api/ControlledTerminologyCTApi~mdrCtPackagesPackageCodelistsCodelistTermsTermGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CtTerm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CDISC Library CT Package Codelist Term
     * @param {String} _package CT Package Product Identifier
     * @param {String} codelist CT Codelist Identifier
     * @param {String} term CT Codelist Term Identifier
     * @param {module:api/ControlledTerminologyCTApi~mdrCtPackagesPackageCodelistsCodelistTermsTermGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CtTerm}
     */
    mdrCtPackagesPackageCodelistsCodelistTermsTermGet(_package, codelist, term, callback) {
      let postBody = null;
      // verify the required parameter '_package' is set
      if (_package === undefined || _package === null) {
        throw new Error("Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet");
      }
      // verify the required parameter 'codelist' is set
      if (codelist === undefined || codelist === null) {
        throw new Error("Missing the required parameter 'codelist' when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet");
      }
      // verify the required parameter 'term' is set
      if (term === undefined || term === null) {
        throw new Error("Missing the required parameter 'term' when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet");
      }

      let pathParams = {
        'package': _package,
        'codelist': codelist,
        'term': term
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = CtTerm;
      return this.apiClient.callApi(
        '/mdr/ct/packages/{package}/codelists/{codelist}/terms/{term}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mdrCtPackagesPackageCodelistsGet operation.
     * @callback module:api/ControlledTerminologyCTApi~mdrCtPackagesPackageCodelistsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CtPackageCodelists} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CDISC Library CT Package Codelist List
     * @param {String} _package CT Package Identifier
     * @param {module:api/ControlledTerminologyCTApi~mdrCtPackagesPackageCodelistsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CtPackageCodelists}
     */
    mdrCtPackagesPackageCodelistsGet(_package, callback) {
      let postBody = null;
      // verify the required parameter '_package' is set
      if (_package === undefined || _package === null) {
        throw new Error("Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsGet");
      }

      let pathParams = {
        'package': _package
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = CtPackageCodelists;
      return this.apiClient.callApi(
        '/mdr/ct/packages/{package}/codelists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mdrCtPackagesProductGet operation.
     * @callback module:api/ControlledTerminologyCTApi~mdrCtPackagesProductGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CtPackage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CDISC Library CT Package
     * @param {String} product CT Package Product Identifier
     * @param {module:api/ControlledTerminologyCTApi~mdrCtPackagesProductGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CtPackage}
     */
    mdrCtPackagesProductGet(product, callback) {
      let postBody = null;
      // verify the required parameter 'product' is set
      if (product === undefined || product === null) {
        throw new Error("Missing the required parameter 'product' when calling mdrCtPackagesProductGet");
      }

      let pathParams = {
        'product': product
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
      let returnType = CtPackage;
      return this.apiClient.callApi(
        '/mdr/ct/packages/{product}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mdrRootCtProductGroupCodelistsCodelistGet operation.
     * @callback module:api/ControlledTerminologyCTApi~mdrRootCtProductGroupCodelistsCodelistGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RootCtCodelist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CDISC Library Root CT Codelist
     * @param {String} productGroup CT Product Group Identifier
     * @param {String} codelist CT Codelist Identifier
     * @param {module:api/ControlledTerminologyCTApi~mdrRootCtProductGroupCodelistsCodelistGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RootCtCodelist}
     */
    mdrRootCtProductGroupCodelistsCodelistGet(productGroup, codelist, callback) {
      let postBody = null;
      // verify the required parameter 'productGroup' is set
      if (productGroup === undefined || productGroup === null) {
        throw new Error("Missing the required parameter 'productGroup' when calling mdrRootCtProductGroupCodelistsCodelistGet");
      }
      // verify the required parameter 'codelist' is set
      if (codelist === undefined || codelist === null) {
        throw new Error("Missing the required parameter 'codelist' when calling mdrRootCtProductGroupCodelistsCodelistGet");
      }

      let pathParams = {
        'productGroup': productGroup,
        'codelist': codelist
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RootCtCodelist;
      return this.apiClient.callApi(
        '/mdr/root/ct/{productGroup}/codelists/{codelist}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mdrRootCtProductGroupCodelistsCodelistTermsTermGet operation.
     * @callback module:api/ControlledTerminologyCTApi~mdrRootCtProductGroupCodelistsCodelistTermsTermGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RootCtTerm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get CDISC Library Root CT Term
     * @param {String} productGroup CT Product Group Identifier
     * @param {String} codelist CT Codelist Identifier
     * @param {String} term CT Codelist Term Identifier
     * @param {module:api/ControlledTerminologyCTApi~mdrRootCtProductGroupCodelistsCodelistTermsTermGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RootCtTerm}
     */
    mdrRootCtProductGroupCodelistsCodelistTermsTermGet(productGroup, codelist, term, callback) {
      let postBody = null;
      // verify the required parameter 'productGroup' is set
      if (productGroup === undefined || productGroup === null) {
        throw new Error("Missing the required parameter 'productGroup' when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet");
      }
      // verify the required parameter 'codelist' is set
      if (codelist === undefined || codelist === null) {
        throw new Error("Missing the required parameter 'codelist' when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet");
      }
      // verify the required parameter 'term' is set
      if (term === undefined || term === null) {
        throw new Error("Missing the required parameter 'term' when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet");
      }

      let pathParams = {
        'productGroup': productGroup,
        'codelist': codelist,
        'term': term
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = RootCtTerm;
      return this.apiClient.callApi(
        '/mdr/root/ct/{productGroup}/codelists/{codelist}/terms/{term}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}

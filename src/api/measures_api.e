note
 description:"[
		CDISC Library API
 		REST API Documentation for CDISC Library in production server
  		The version of the OpenAPI document: 1.1.0
 	    Contact: cdisc_library_support@cdisc.org

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	MEASURES_API

inherit

    API_I


feature -- API Access


	mdr_qrs_measure_version_get (measure: STRING_32; version: STRING_32): detachable QRS_PRODUCT
			-- 
			-- Get QRS Product
			-- 
			-- argument: measure QRS Measure Identifier (required)
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- 
			-- Result QRS_PRODUCT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/qrs/{measure}/{version}"
			l_path.replace_substring_all ("{"+"measure"+"}", api_client.url_encode (measure.out))
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml", "text/csv", "application/vnd.ms-excel">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { QRS_PRODUCT } l_response.data ({ QRS_PRODUCT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_qrs_measure_version_items_get (measure: STRING_32; version: STRING_32): detachable QRS_ITEMS
			-- 
			-- Get QRS Item List
			-- 
			-- argument: measure QRS Measure Identifier (required)
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- 
			-- Result QRS_ITEMS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/qrs/{measure}/{version}/items"
			l_path.replace_substring_all ("{"+"measure"+"}", api_client.url_encode (measure.out))
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { QRS_ITEMS } l_response.data ({ QRS_ITEMS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_qrs_measure_version_items_item_get (measure: STRING_32; version: STRING_32; item: STRING_32): detachable QRS_ITEM
			-- 
			-- Get QRS Item
			-- 
			-- argument: measure QRS Measure Identifier (required)
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: item QRS Measure Item Identifier (required)
			-- 
			-- 
			-- Result QRS_ITEM
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/qrs/{measure}/{version}/items/{item}"
			l_path.replace_substring_all ("{"+"measure"+"}", api_client.url_encode (measure.out))
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"item"+"}", api_client.url_encode (item.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { QRS_ITEM } l_response.data ({ QRS_ITEM }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_qrs_measure_version_responsegroups_get (measure: STRING_32; version: STRING_32): detachable QRS_RESPONSEGROUPS
			-- 
			-- Get QRS Response Group List
			-- 
			-- argument: measure QRS Measure Identifier (required)
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- 
			-- Result QRS_RESPONSEGROUPS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/qrs/{measure}/{version}/responsegroups"
			l_path.replace_substring_all ("{"+"measure"+"}", api_client.url_encode (measure.out))
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { QRS_RESPONSEGROUPS } l_response.data ({ QRS_RESPONSEGROUPS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_qrs_measure_version_responsegroups_responsegroup_get (measure: STRING_32; version: STRING_32; responsegroup: STRING_32): detachable QRS_RESPONSEGROUP
			-- 
			-- Get QRS Response Group
			-- 
			-- argument: measure QRS Measure Identifier (required)
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: responsegroup QRS Measure&#39;s Response Group Identifier (required)
			-- 
			-- 
			-- Result QRS_RESPONSEGROUP
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/qrs/{measure}/{version}/responsegroups/{responsegroup}"
			l_path.replace_substring_all ("{"+"measure"+"}", api_client.url_encode (measure.out))
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"responsegroup"+"}", api_client.url_encode (responsegroup.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { QRS_RESPONSEGROUP } l_response.data ({ QRS_RESPONSEGROUP }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end

note
 description:"[
		CDISC Library API
 		REST API Documentation for CDISC Library in production server
  		The version of the OpenAPI document: 1.1.0
 	    Contact: cdisc_library_support@cdisc.org

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	CLINICALDATAACQUISITIONSTANDARDSHARMONIZATIONCDASH_API

inherit

    API_I


feature -- API Access


	mdr_cdash_version_classes_class_domains_get (version: STRING_32; var_class: STRING_32): detachable CDASH_CLASS_DOMAINS
			-- 
			-- Get CDASH Class Domain List
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: var_class CDASH Class Identifier (required)
			-- 
			-- 
			-- Result CDASH_CLASS_DOMAINS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/cdash/{version}/classes/{class}/domains"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"class"+"}", api_client.url_encode (var_class.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CDASH_CLASS_DOMAINS } l_response.data ({ CDASH_CLASS_DOMAINS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_cdash_version_classes_class_fields_field_get (version: STRING_32; var_class: STRING_32; field: STRING_32): detachable CDASH_CLASS_FIELD
			-- 
			-- Get CDASH Class Field
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: var_class CDASH Class Identifier (required)
			-- 
			-- argument: field CDASH Field Identifier (required)
			-- 
			-- 
			-- Result CDASH_CLASS_FIELD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/cdash/{version}/classes/{class}/fields/{field}"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"class"+"}", api_client.url_encode (var_class.out))
			l_path.replace_substring_all ("{"+"field"+"}", api_client.url_encode (field.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CDASH_CLASS_FIELD } l_response.data ({ CDASH_CLASS_FIELD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_cdash_version_classes_class_get (version: STRING_32; var_class: STRING_32): detachable CDASH_CLASS
			-- 
			-- Get CDASH Class
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: var_class CDASH Class Identifier (required)
			-- 
			-- 
			-- Result CDASH_CLASS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/cdash/{version}/classes/{class}"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"class"+"}", api_client.url_encode (var_class.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CDASH_CLASS } l_response.data ({ CDASH_CLASS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_cdash_version_classes_get (version: STRING_32): detachable CDASH_PRODUCT_CLASSES
			-- 
			-- Get CDASH Class List
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- 
			-- Result CDASH_PRODUCT_CLASSES
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/cdash/{version}/classes"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CDASH_PRODUCT_CLASSES } l_response.data ({ CDASH_PRODUCT_CLASSES }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_cdash_version_domains_domain_fields_field_get (version: STRING_32; domain: STRING_32; field: STRING_32): detachable CDASH_DOMAIN_FIELD
			-- 
			-- Get CDASH Domain Field
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: domain CDASH Domain Identifier (required)
			-- 
			-- argument: field CDASH Field Identifier (required)
			-- 
			-- 
			-- Result CDASH_DOMAIN_FIELD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/cdash/{version}/domains/{domain}/fields/{field}"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"domain"+"}", api_client.url_encode (domain.out))
			l_path.replace_substring_all ("{"+"field"+"}", api_client.url_encode (field.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CDASH_DOMAIN_FIELD } l_response.data ({ CDASH_DOMAIN_FIELD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_cdash_version_domains_domain_fields_get (version: STRING_32; domain: STRING_32): detachable CDASH_DOMAIN_FIELDS
			-- 
			-- Get CDASH Domain Field List
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: domain CDASH Domain Identifier (required)
			-- 
			-- 
			-- Result CDASH_DOMAIN_FIELDS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/cdash/{version}/domains/{domain}/fields"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"domain"+"}", api_client.url_encode (domain.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CDASH_DOMAIN_FIELDS } l_response.data ({ CDASH_DOMAIN_FIELDS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_cdash_version_domains_domain_get (version: STRING_32; domain: STRING_32): detachable CDASH_DOMAIN
			-- 
			-- Get CDASH Domain
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: domain CDASH Domain Identifier (required)
			-- 
			-- 
			-- Result CDASH_DOMAIN
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/cdash/{version}/domains/{domain}"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"domain"+"}", api_client.url_encode (domain.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CDASH_DOMAIN } l_response.data ({ CDASH_DOMAIN }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_cdash_version_domains_get (version: STRING_32): detachable CDASH_PRODUCT_DOMAINS
			-- 
			-- Get CDASH Domain List
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- 
			-- Result CDASH_PRODUCT_DOMAINS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/cdash/{version}/domains"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CDASH_PRODUCT_DOMAINS } l_response.data ({ CDASH_PRODUCT_DOMAINS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_cdash_version_get (version: STRING_32): detachable CDASH_PRODUCT
			-- 
			-- Get CDASH Product
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- 
			-- Result CDASH_PRODUCT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/cdash/{version}"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CDASH_PRODUCT } l_response.data ({ CDASH_PRODUCT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_root_cdash_classes_class_fields_field_get (var_class: STRING_32; field: STRING_32): detachable ROOT_CDASH_CLASS_FIELD
			-- 
			-- Get Root CDASH Class Field
			-- 
			-- argument: var_class CDASH Class Identifier (required)
			-- 
			-- argument: field CDASH Field Identifier (required)
			-- 
			-- 
			-- Result ROOT_CDASH_CLASS_FIELD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/root/cdash/classes/{class}/fields/{field}"
			l_path.replace_substring_all ("{"+"class"+"}", api_client.url_encode (var_class.out))
			l_path.replace_substring_all ("{"+"field"+"}", api_client.url_encode (field.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ROOT_CDASH_CLASS_FIELD } l_response.data ({ ROOT_CDASH_CLASS_FIELD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_root_cdash_domains_domain_fields_field_get (domain: STRING_32; field: STRING_32): detachable ROOT_CDASH_DOMAIN_FIELD
			-- 
			-- Get Root CDASH Domain Field
			-- 
			-- argument: domain CDASH Domain Identifier (required)
			-- 
			-- argument: field CDASH Field Identifier (required)
			-- 
			-- 
			-- Result ROOT_CDASH_DOMAIN_FIELD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/root/cdash/domains/{domain}/fields/{field}"
			l_path.replace_substring_all ("{"+"domain"+"}", api_client.url_encode (domain.out))
			l_path.replace_substring_all ("{"+"field"+"}", api_client.url_encode (field.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ROOT_CDASH_DOMAIN_FIELD } l_response.data ({ ROOT_CDASH_DOMAIN_FIELD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end

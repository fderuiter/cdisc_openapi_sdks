note
 description:"[
		CDISC Library API
 		REST API Documentation for CDISC Library in production server
  		The version of the OpenAPI document: 1.1.0
 	    Contact: cdisc_library_support@cdisc.org

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	STUDYDATATABULATIONMODELSDTM_API

inherit

    API_I


feature -- API Access


	mdr_root_sdtm_classes_class_variables_var_get (var_class: STRING_32; var: STRING_32): detachable ROOT_SDTM_CLASS_VARIABLE
			-- 
			-- Get Root of SDTM Class Variable
			-- 
			-- argument: var_class SDTM Class Identifier (required)
			-- 
			-- argument: var SDTM Variable Identifier (required)
			-- 
			-- 
			-- Result ROOT_SDTM_CLASS_VARIABLE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/root/sdtm/classes/{class}/variables/{var}"
			l_path.replace_substring_all ("{"+"class"+"}", api_client.url_encode (var_class.out))
			l_path.replace_substring_all ("{"+"var"+"}", api_client.url_encode (var.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ROOT_SDTM_CLASS_VARIABLE } l_response.data ({ ROOT_SDTM_CLASS_VARIABLE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_root_sdtm_datasets_dataset_variables_var_get (dataset: STRING_32; var: STRING_32): detachable ROOT_SDTM_DATASET_VARIABLE
			-- 
			-- Get Root SDTM Dataset Variable
			-- 
			-- argument: dataset SDTM Dataset Identifier (required)
			-- 
			-- argument: var SDTM Variable Identifier (required)
			-- 
			-- 
			-- Result ROOT_SDTM_DATASET_VARIABLE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/root/sdtm/datasets/{dataset}/variables/{var}"
			l_path.replace_substring_all ("{"+"dataset"+"}", api_client.url_encode (dataset.out))
			l_path.replace_substring_all ("{"+"var"+"}", api_client.url_encode (var.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ROOT_SDTM_DATASET_VARIABLE } l_response.data ({ ROOT_SDTM_DATASET_VARIABLE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_sdtm_version_classes_class_datasets_get (version: STRING_32; var_class: STRING_32): detachable SDTM_CLASS_DATASETS
			-- 
			-- Get SDTM Class Dataset List
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: var_class SDTM Class Identifier (required)
			-- 
			-- 
			-- Result SDTM_CLASS_DATASETS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/sdtm/{version}/classes/{class}/datasets"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"class"+"}", api_client.url_encode (var_class.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { SDTM_CLASS_DATASETS } l_response.data ({ SDTM_CLASS_DATASETS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_sdtm_version_classes_class_get (version: STRING_32; var_class: STRING_32): detachable SDTM_CLASS
			-- 
			-- Get SDTM Class
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: var_class SDTM Class Identifier (required)
			-- 
			-- 
			-- Result SDTM_CLASS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/sdtm/{version}/classes/{class}"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"class"+"}", api_client.url_encode (var_class.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { SDTM_CLASS } l_response.data ({ SDTM_CLASS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_sdtm_version_classes_class_variables_get (version: STRING_32; var_class: STRING_32): detachable SDTM_CLASS_VARIABLES
			-- 
			-- Get SDTM Class Variable List
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: var_class SDTM Class Identifier (required)
			-- 
			-- 
			-- Result SDTM_CLASS_VARIABLES
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/sdtm/{version}/classes/{class}/variables"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"class"+"}", api_client.url_encode (var_class.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { SDTM_CLASS_VARIABLES } l_response.data ({ SDTM_CLASS_VARIABLES }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_sdtm_version_classes_class_variables_var_get (version: STRING_32; var_class: STRING_32; var: STRING_32): detachable SDTM_CLASS_VARIABLE
			-- 
			-- Get SDTM Class Variable
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: var_class SDTM Class Identifier (required)
			-- 
			-- argument: var SDTM Variable Identifier (required)
			-- 
			-- 
			-- Result SDTM_CLASS_VARIABLE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/sdtm/{version}/classes/{class}/variables/{var}"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"class"+"}", api_client.url_encode (var_class.out))
			l_path.replace_substring_all ("{"+"var"+"}", api_client.url_encode (var.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { SDTM_CLASS_VARIABLE } l_response.data ({ SDTM_CLASS_VARIABLE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_sdtm_version_classes_get (version: STRING_32): detachable SDTM_CLASSES
			-- 
			-- Get SDTM Class List
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- 
			-- Result SDTM_CLASSES
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/sdtm/{version}/classes"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { SDTM_CLASSES } l_response.data ({ SDTM_CLASSES }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_sdtm_version_datasets_dataset_get (version: STRING_32; dataset: STRING_32): detachable SDTM_DATASET
			-- 
			-- Get SDTM Dataset
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: dataset SDTM Dataset Identifier (required)
			-- 
			-- 
			-- Result SDTM_DATASET
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/sdtm/{version}/datasets/{dataset}"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"dataset"+"}", api_client.url_encode (dataset.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { SDTM_DATASET } l_response.data ({ SDTM_DATASET }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_sdtm_version_datasets_dataset_variables_get (version: STRING_32; dataset: STRING_32): detachable SDTM_DATASET_VARIABLES
			-- 
			-- Get SDTM Dataset Variable List
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: dataset SDTM Dataset Identifier (required)
			-- 
			-- 
			-- Result SDTM_DATASET_VARIABLES
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/sdtm/{version}/datasets/{dataset}/variables"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"dataset"+"}", api_client.url_encode (dataset.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { SDTM_DATASET_VARIABLES } l_response.data ({ SDTM_DATASET_VARIABLES }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_sdtm_version_datasets_dataset_variables_var_get (version: STRING_32; dataset: STRING_32; var: STRING_32): detachable SDTM_DATASET_VARIABLE
			-- 
			-- Get SDTM Dataset Variable
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: dataset SDTM Dataset Identifier (required)
			-- 
			-- argument: var SDTM Variable Identifier (required)
			-- 
			-- 
			-- Result SDTM_DATASET_VARIABLE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/sdtm/{version}/datasets/{dataset}/variables/{var}"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"dataset"+"}", api_client.url_encode (dataset.out))
			l_path.replace_substring_all ("{"+"var"+"}", api_client.url_encode (var.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { SDTM_DATASET_VARIABLE } l_response.data ({ SDTM_DATASET_VARIABLE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_sdtm_version_datasets_get (version: STRING_32): detachable SDTM_DATASETS
			-- 
			-- Get SDTM Dataset List
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- 
			-- Result SDTM_DATASETS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/sdtm/{version}/datasets"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml", "text/csv">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { SDTM_DATASETS } l_response.data ({ SDTM_DATASETS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_sdtm_version_get (version: STRING_32): detachable SDTM_PRODUCT
			-- 
			-- Get SDTM product
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- 
			-- Result SDTM_PRODUCT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/sdtm/{version}"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { SDTM_PRODUCT } l_response.data ({ SDTM_PRODUCT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end

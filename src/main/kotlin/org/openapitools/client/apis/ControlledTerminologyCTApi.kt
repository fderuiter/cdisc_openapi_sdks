/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.CtCodelist
import org.openapitools.client.models.CtCodelistTerms
import org.openapitools.client.models.CtPackage
import org.openapitools.client.models.CtPackageCodelists
import org.openapitools.client.models.CtPackages
import org.openapitools.client.models.CtTerm
import org.openapitools.client.models.DefaultErrorResponse
import org.openapitools.client.models.ExportCtTable
import org.openapitools.client.models.RootCtCodelist
import org.openapitools.client.models.RootCtTerm
import org.openapitools.client.models.XmlCtCodelist
import org.openapitools.client.models.XmlCtCodelistTerms
import org.openapitools.client.models.XmlCtPackage
import org.openapitools.client.models.XmlCtPackageCodelists
import org.openapitools.client.models.XmlCtPackages
import org.openapitools.client.models.XmlCtTerm
import org.openapitools.client.models.XmlRootCtCodelist
import org.openapitools.client.models.XmlRootCtTerm

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ControlledTerminologyCTApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://library.cdisc.org/api")
        }
    }

    /**
     * GET /mdr/ct/packages
     * 
     * Get CDISC Library CT Package List
     * @return CtPackages
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCtPackagesGet() : CtPackages {
        val localVarResponse = mdrCtPackagesGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CtPackages
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/ct/packages
     * 
     * Get CDISC Library CT Package List
     * @return ApiResponse<CtPackages?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCtPackagesGetWithHttpInfo() : ApiResponse<CtPackages?> {
        val localVariableConfig = mdrCtPackagesGetRequestConfig()

        return request<Unit, CtPackages>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCtPackagesGet
     *
     * @return RequestConfig
     */
    fun mdrCtPackagesGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/ct/packages",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/ct/packages/{package}/codelists/{codelist}
     * 
     * Get CDISC Library CT Package Codelist
     * @param `package` CT Package Identifier
     * @param codelist CT Codelist Identifier
     * @return CtCodelist
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCtPackagesPackageCodelistsCodelistGet(`package`: kotlin.String, codelist: kotlin.String) : CtCodelist {
        val localVarResponse = mdrCtPackagesPackageCodelistsCodelistGetWithHttpInfo(`package` = `package`, codelist = codelist)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CtCodelist
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/ct/packages/{package}/codelists/{codelist}
     * 
     * Get CDISC Library CT Package Codelist
     * @param `package` CT Package Identifier
     * @param codelist CT Codelist Identifier
     * @return ApiResponse<CtCodelist?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCtPackagesPackageCodelistsCodelistGetWithHttpInfo(`package`: kotlin.String, codelist: kotlin.String) : ApiResponse<CtCodelist?> {
        val localVariableConfig = mdrCtPackagesPackageCodelistsCodelistGetRequestConfig(`package` = `package`, codelist = codelist)

        return request<Unit, CtCodelist>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCtPackagesPackageCodelistsCodelistGet
     *
     * @param `package` CT Package Identifier
     * @param codelist CT Codelist Identifier
     * @return RequestConfig
     */
    fun mdrCtPackagesPackageCodelistsCodelistGetRequestConfig(`package`: kotlin.String, codelist: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/ct/packages/{package}/codelists/{codelist}".replace("{"+"package"+"}", encodeURIComponent(`package`.toString())).replace("{"+"codelist"+"}", encodeURIComponent(codelist.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/ct/packages/{package}/codelists/{codelist}/terms
     * 
     * Get CDISC Library CT Package Codelist Term List
     * @param `package` CT Package Identifier
     * @param codelist CT Codelist Identifier
     * @return CtCodelistTerms
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCtPackagesPackageCodelistsCodelistTermsGet(`package`: kotlin.String, codelist: kotlin.String) : CtCodelistTerms {
        val localVarResponse = mdrCtPackagesPackageCodelistsCodelistTermsGetWithHttpInfo(`package` = `package`, codelist = codelist)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CtCodelistTerms
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/ct/packages/{package}/codelists/{codelist}/terms
     * 
     * Get CDISC Library CT Package Codelist Term List
     * @param `package` CT Package Identifier
     * @param codelist CT Codelist Identifier
     * @return ApiResponse<CtCodelistTerms?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCtPackagesPackageCodelistsCodelistTermsGetWithHttpInfo(`package`: kotlin.String, codelist: kotlin.String) : ApiResponse<CtCodelistTerms?> {
        val localVariableConfig = mdrCtPackagesPackageCodelistsCodelistTermsGetRequestConfig(`package` = `package`, codelist = codelist)

        return request<Unit, CtCodelistTerms>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCtPackagesPackageCodelistsCodelistTermsGet
     *
     * @param `package` CT Package Identifier
     * @param codelist CT Codelist Identifier
     * @return RequestConfig
     */
    fun mdrCtPackagesPackageCodelistsCodelistTermsGetRequestConfig(`package`: kotlin.String, codelist: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/ct/packages/{package}/codelists/{codelist}/terms".replace("{"+"package"+"}", encodeURIComponent(`package`.toString())).replace("{"+"codelist"+"}", encodeURIComponent(codelist.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/ct/packages/{package}/codelists/{codelist}/terms/{term}
     * 
     * Get CDISC Library CT Package Codelist Term
     * @param `package` CT Package Product Identifier
     * @param codelist CT Codelist Identifier
     * @param term CT Codelist Term Identifier
     * @return CtTerm
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCtPackagesPackageCodelistsCodelistTermsTermGet(`package`: kotlin.String, codelist: kotlin.String, term: kotlin.String) : CtTerm {
        val localVarResponse = mdrCtPackagesPackageCodelistsCodelistTermsTermGetWithHttpInfo(`package` = `package`, codelist = codelist, term = term)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CtTerm
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/ct/packages/{package}/codelists/{codelist}/terms/{term}
     * 
     * Get CDISC Library CT Package Codelist Term
     * @param `package` CT Package Product Identifier
     * @param codelist CT Codelist Identifier
     * @param term CT Codelist Term Identifier
     * @return ApiResponse<CtTerm?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCtPackagesPackageCodelistsCodelistTermsTermGetWithHttpInfo(`package`: kotlin.String, codelist: kotlin.String, term: kotlin.String) : ApiResponse<CtTerm?> {
        val localVariableConfig = mdrCtPackagesPackageCodelistsCodelistTermsTermGetRequestConfig(`package` = `package`, codelist = codelist, term = term)

        return request<Unit, CtTerm>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCtPackagesPackageCodelistsCodelistTermsTermGet
     *
     * @param `package` CT Package Product Identifier
     * @param codelist CT Codelist Identifier
     * @param term CT Codelist Term Identifier
     * @return RequestConfig
     */
    fun mdrCtPackagesPackageCodelistsCodelistTermsTermGetRequestConfig(`package`: kotlin.String, codelist: kotlin.String, term: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/ct/packages/{package}/codelists/{codelist}/terms/{term}".replace("{"+"package"+"}", encodeURIComponent(`package`.toString())).replace("{"+"codelist"+"}", encodeURIComponent(codelist.toString())).replace("{"+"term"+"}", encodeURIComponent(term.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/ct/packages/{package}/codelists
     * 
     * Get CDISC Library CT Package Codelist List
     * @param `package` CT Package Identifier
     * @return CtPackageCodelists
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCtPackagesPackageCodelistsGet(`package`: kotlin.String) : CtPackageCodelists {
        val localVarResponse = mdrCtPackagesPackageCodelistsGetWithHttpInfo(`package` = `package`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CtPackageCodelists
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/ct/packages/{package}/codelists
     * 
     * Get CDISC Library CT Package Codelist List
     * @param `package` CT Package Identifier
     * @return ApiResponse<CtPackageCodelists?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCtPackagesPackageCodelistsGetWithHttpInfo(`package`: kotlin.String) : ApiResponse<CtPackageCodelists?> {
        val localVariableConfig = mdrCtPackagesPackageCodelistsGetRequestConfig(`package` = `package`)

        return request<Unit, CtPackageCodelists>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCtPackagesPackageCodelistsGet
     *
     * @param `package` CT Package Identifier
     * @return RequestConfig
     */
    fun mdrCtPackagesPackageCodelistsGetRequestConfig(`package`: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/ct/packages/{package}/codelists".replace("{"+"package"+"}", encodeURIComponent(`package`.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/ct/packages/{product}
     * 
     * Get CDISC Library CT Package
     * @param product CT Package Product Identifier
     * @return CtPackage
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCtPackagesProductGet(product: kotlin.String) : CtPackage {
        val localVarResponse = mdrCtPackagesProductGetWithHttpInfo(product = product)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CtPackage
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/ct/packages/{product}
     * 
     * Get CDISC Library CT Package
     * @param product CT Package Product Identifier
     * @return ApiResponse<CtPackage?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCtPackagesProductGetWithHttpInfo(product: kotlin.String) : ApiResponse<CtPackage?> {
        val localVariableConfig = mdrCtPackagesProductGetRequestConfig(product = product)

        return request<Unit, CtPackage>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCtPackagesProductGet
     *
     * @param product CT Package Product Identifier
     * @return RequestConfig
     */
    fun mdrCtPackagesProductGetRequestConfig(product: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/ct/packages/{product}".replace("{"+"product"+"}", encodeURIComponent(product.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/root/ct/{productGroup}/codelists/{codelist}
     * 
     * Get CDISC Library Root CT Codelist
     * @param productGroup CT Product Group Identifier
     * @param codelist CT Codelist Identifier
     * @return RootCtCodelist
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrRootCtProductGroupCodelistsCodelistGet(productGroup: kotlin.String, codelist: kotlin.String) : RootCtCodelist {
        val localVarResponse = mdrRootCtProductGroupCodelistsCodelistGetWithHttpInfo(productGroup = productGroup, codelist = codelist)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RootCtCodelist
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/root/ct/{productGroup}/codelists/{codelist}
     * 
     * Get CDISC Library Root CT Codelist
     * @param productGroup CT Product Group Identifier
     * @param codelist CT Codelist Identifier
     * @return ApiResponse<RootCtCodelist?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrRootCtProductGroupCodelistsCodelistGetWithHttpInfo(productGroup: kotlin.String, codelist: kotlin.String) : ApiResponse<RootCtCodelist?> {
        val localVariableConfig = mdrRootCtProductGroupCodelistsCodelistGetRequestConfig(productGroup = productGroup, codelist = codelist)

        return request<Unit, RootCtCodelist>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrRootCtProductGroupCodelistsCodelistGet
     *
     * @param productGroup CT Product Group Identifier
     * @param codelist CT Codelist Identifier
     * @return RequestConfig
     */
    fun mdrRootCtProductGroupCodelistsCodelistGetRequestConfig(productGroup: kotlin.String, codelist: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/root/ct/{productGroup}/codelists/{codelist}".replace("{"+"productGroup"+"}", encodeURIComponent(productGroup.toString())).replace("{"+"codelist"+"}", encodeURIComponent(codelist.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/root/ct/{productGroup}/codelists/{codelist}/terms/{term}
     * 
     * Get CDISC Library Root CT Term
     * @param productGroup CT Product Group Identifier
     * @param codelist CT Codelist Identifier
     * @param term CT Codelist Term Identifier
     * @return RootCtTerm
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrRootCtProductGroupCodelistsCodelistTermsTermGet(productGroup: kotlin.String, codelist: kotlin.String, term: kotlin.String) : RootCtTerm {
        val localVarResponse = mdrRootCtProductGroupCodelistsCodelistTermsTermGetWithHttpInfo(productGroup = productGroup, codelist = codelist, term = term)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RootCtTerm
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/root/ct/{productGroup}/codelists/{codelist}/terms/{term}
     * 
     * Get CDISC Library Root CT Term
     * @param productGroup CT Product Group Identifier
     * @param codelist CT Codelist Identifier
     * @param term CT Codelist Term Identifier
     * @return ApiResponse<RootCtTerm?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrRootCtProductGroupCodelistsCodelistTermsTermGetWithHttpInfo(productGroup: kotlin.String, codelist: kotlin.String, term: kotlin.String) : ApiResponse<RootCtTerm?> {
        val localVariableConfig = mdrRootCtProductGroupCodelistsCodelistTermsTermGetRequestConfig(productGroup = productGroup, codelist = codelist, term = term)

        return request<Unit, RootCtTerm>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrRootCtProductGroupCodelistsCodelistTermsTermGet
     *
     * @param productGroup CT Product Group Identifier
     * @param codelist CT Codelist Identifier
     * @param term CT Codelist Term Identifier
     * @return RequestConfig
     */
    fun mdrRootCtProductGroupCodelistsCodelistTermsTermGetRequestConfig(productGroup: kotlin.String, codelist: kotlin.String, term: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/root/ct/{productGroup}/codelists/{codelist}/terms/{term}".replace("{"+"productGroup"+"}", encodeURIComponent(productGroup.toString())).replace("{"+"codelist"+"}", encodeURIComponent(codelist.toString())).replace("{"+"term"+"}", encodeURIComponent(term.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}

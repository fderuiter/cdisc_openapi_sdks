/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.DefaultErrorResponse
import org.openapitools.client.models.ExportSdtmigDatasetsTable
import org.openapitools.client.models.ExportSdtmigVariablesTable
import org.openapitools.client.models.ExportSdtmigWorkbook
import org.openapitools.client.models.RootSdtmigDatasetVariable
import org.openapitools.client.models.SdtmigClass
import org.openapitools.client.models.SdtmigClassDatasets
import org.openapitools.client.models.SdtmigClasses
import org.openapitools.client.models.SdtmigDataset
import org.openapitools.client.models.SdtmigDatasetVariable
import org.openapitools.client.models.SdtmigDatasetVariables
import org.openapitools.client.models.SdtmigDatasets
import org.openapitools.client.models.SdtmigProduct
import org.openapitools.client.models.XmlRootSdtmigDatasetVariable
import org.openapitools.client.models.XmlSdtmigClass
import org.openapitools.client.models.XmlSdtmigClassDatasets
import org.openapitools.client.models.XmlSdtmigClasses
import org.openapitools.client.models.XmlSdtmigDataset
import org.openapitools.client.models.XmlSdtmigDatasetVariable
import org.openapitools.client.models.XmlSdtmigDatasetVariables
import org.openapitools.client.models.XmlSdtmigDatasets
import org.openapitools.client.models.XmlSdtmigProduct

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class SDTMImplementationGuideSDTMIGApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://library.cdisc.org/api")
        }
    }

    /**
     * GET /mdr/root/sdtmig/datasets/{dataset}/variables/{var}
     * 
     * Get Root SDTMIG Dataset Variable
     * @param dataset SDTMIG Dataset Identifier
     * @param `var` SDTMIG Variable Identifier
     * @return RootSdtmigDatasetVariable
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrRootSdtmigDatasetsDatasetVariablesVarGet(dataset: kotlin.String, `var`: kotlin.String) : RootSdtmigDatasetVariable {
        val localVarResponse = mdrRootSdtmigDatasetsDatasetVariablesVarGetWithHttpInfo(dataset = dataset, `var` = `var`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RootSdtmigDatasetVariable
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/root/sdtmig/datasets/{dataset}/variables/{var}
     * 
     * Get Root SDTMIG Dataset Variable
     * @param dataset SDTMIG Dataset Identifier
     * @param `var` SDTMIG Variable Identifier
     * @return ApiResponse<RootSdtmigDatasetVariable?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrRootSdtmigDatasetsDatasetVariablesVarGetWithHttpInfo(dataset: kotlin.String, `var`: kotlin.String) : ApiResponse<RootSdtmigDatasetVariable?> {
        val localVariableConfig = mdrRootSdtmigDatasetsDatasetVariablesVarGetRequestConfig(dataset = dataset, `var` = `var`)

        return request<Unit, RootSdtmigDatasetVariable>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrRootSdtmigDatasetsDatasetVariablesVarGet
     *
     * @param dataset SDTMIG Dataset Identifier
     * @param `var` SDTMIG Variable Identifier
     * @return RequestConfig
     */
    fun mdrRootSdtmigDatasetsDatasetVariablesVarGetRequestConfig(dataset: kotlin.String, `var`: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/root/sdtmig/datasets/{dataset}/variables/{var}".replace("{"+"dataset"+"}", encodeURIComponent(dataset.toString())).replace("{"+"var"+"}", encodeURIComponent(`var`.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sdtmig/{version}/classes/{class}/datasets
     * 
     * Get SDTMIG Class Dataset List
     * @param version CDISC Library Product Version
     * @param propertyClass SDTMIG Class Identifier
     * @return SdtmigClassDatasets
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSdtmigVersionClassesClassDatasetsGet(version: kotlin.String, propertyClass: kotlin.String) : SdtmigClassDatasets {
        val localVarResponse = mdrSdtmigVersionClassesClassDatasetsGetWithHttpInfo(version = version, propertyClass = propertyClass)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SdtmigClassDatasets
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sdtmig/{version}/classes/{class}/datasets
     * 
     * Get SDTMIG Class Dataset List
     * @param version CDISC Library Product Version
     * @param propertyClass SDTMIG Class Identifier
     * @return ApiResponse<SdtmigClassDatasets?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSdtmigVersionClassesClassDatasetsGetWithHttpInfo(version: kotlin.String, propertyClass: kotlin.String) : ApiResponse<SdtmigClassDatasets?> {
        val localVariableConfig = mdrSdtmigVersionClassesClassDatasetsGetRequestConfig(version = version, propertyClass = propertyClass)

        return request<Unit, SdtmigClassDatasets>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSdtmigVersionClassesClassDatasetsGet
     *
     * @param version CDISC Library Product Version
     * @param propertyClass SDTMIG Class Identifier
     * @return RequestConfig
     */
    fun mdrSdtmigVersionClassesClassDatasetsGetRequestConfig(version: kotlin.String, propertyClass: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sdtmig/{version}/classes/{class}/datasets".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"class"+"}", encodeURIComponent(propertyClass.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sdtmig/{version}/classes/{class}
     * 
     * Get SDTMIG Class
     * @param version CDISC Library Product Version
     * @param propertyClass SDTMIG Class Identifier
     * @return SdtmigClass
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSdtmigVersionClassesClassGet(version: kotlin.String, propertyClass: kotlin.String) : SdtmigClass {
        val localVarResponse = mdrSdtmigVersionClassesClassGetWithHttpInfo(version = version, propertyClass = propertyClass)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SdtmigClass
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sdtmig/{version}/classes/{class}
     * 
     * Get SDTMIG Class
     * @param version CDISC Library Product Version
     * @param propertyClass SDTMIG Class Identifier
     * @return ApiResponse<SdtmigClass?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSdtmigVersionClassesClassGetWithHttpInfo(version: kotlin.String, propertyClass: kotlin.String) : ApiResponse<SdtmigClass?> {
        val localVariableConfig = mdrSdtmigVersionClassesClassGetRequestConfig(version = version, propertyClass = propertyClass)

        return request<Unit, SdtmigClass>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSdtmigVersionClassesClassGet
     *
     * @param version CDISC Library Product Version
     * @param propertyClass SDTMIG Class Identifier
     * @return RequestConfig
     */
    fun mdrSdtmigVersionClassesClassGetRequestConfig(version: kotlin.String, propertyClass: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sdtmig/{version}/classes/{class}".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"class"+"}", encodeURIComponent(propertyClass.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sdtmig/{version}/classes
     * 
     * Get SDTMIG Class List
     * @param version CDISC Library Product Version
     * @return SdtmigClasses
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSdtmigVersionClassesGet(version: kotlin.String) : SdtmigClasses {
        val localVarResponse = mdrSdtmigVersionClassesGetWithHttpInfo(version = version)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SdtmigClasses
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sdtmig/{version}/classes
     * 
     * Get SDTMIG Class List
     * @param version CDISC Library Product Version
     * @return ApiResponse<SdtmigClasses?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSdtmigVersionClassesGetWithHttpInfo(version: kotlin.String) : ApiResponse<SdtmigClasses?> {
        val localVariableConfig = mdrSdtmigVersionClassesGetRequestConfig(version = version)

        return request<Unit, SdtmigClasses>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSdtmigVersionClassesGet
     *
     * @param version CDISC Library Product Version
     * @return RequestConfig
     */
    fun mdrSdtmigVersionClassesGetRequestConfig(version: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sdtmig/{version}/classes".replace("{"+"version"+"}", encodeURIComponent(version.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sdtmig/{version}/datasets/{dataset}
     * 
     * Get SDTMIG Dataset
     * @param version CDISC Library Product Version
     * @param dataset SDTMIG Dataset Identifier
     * @return SdtmigDataset
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSdtmigVersionDatasetsDatasetGet(version: kotlin.String, dataset: kotlin.String) : SdtmigDataset {
        val localVarResponse = mdrSdtmigVersionDatasetsDatasetGetWithHttpInfo(version = version, dataset = dataset)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SdtmigDataset
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sdtmig/{version}/datasets/{dataset}
     * 
     * Get SDTMIG Dataset
     * @param version CDISC Library Product Version
     * @param dataset SDTMIG Dataset Identifier
     * @return ApiResponse<SdtmigDataset?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSdtmigVersionDatasetsDatasetGetWithHttpInfo(version: kotlin.String, dataset: kotlin.String) : ApiResponse<SdtmigDataset?> {
        val localVariableConfig = mdrSdtmigVersionDatasetsDatasetGetRequestConfig(version = version, dataset = dataset)

        return request<Unit, SdtmigDataset>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSdtmigVersionDatasetsDatasetGet
     *
     * @param version CDISC Library Product Version
     * @param dataset SDTMIG Dataset Identifier
     * @return RequestConfig
     */
    fun mdrSdtmigVersionDatasetsDatasetGetRequestConfig(version: kotlin.String, dataset: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sdtmig/{version}/datasets/{dataset}".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"dataset"+"}", encodeURIComponent(dataset.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sdtmig/{version}/datasets/{dataset}/variables
     * 
     * Get SDTMIG Dataset Variable List
     * @param version CDISC Library Product Version
     * @param dataset SDTMIG Dataset Identifier
     * @return SdtmigDatasetVariables
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSdtmigVersionDatasetsDatasetVariablesGet(version: kotlin.String, dataset: kotlin.String) : SdtmigDatasetVariables {
        val localVarResponse = mdrSdtmigVersionDatasetsDatasetVariablesGetWithHttpInfo(version = version, dataset = dataset)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SdtmigDatasetVariables
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sdtmig/{version}/datasets/{dataset}/variables
     * 
     * Get SDTMIG Dataset Variable List
     * @param version CDISC Library Product Version
     * @param dataset SDTMIG Dataset Identifier
     * @return ApiResponse<SdtmigDatasetVariables?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSdtmigVersionDatasetsDatasetVariablesGetWithHttpInfo(version: kotlin.String, dataset: kotlin.String) : ApiResponse<SdtmigDatasetVariables?> {
        val localVariableConfig = mdrSdtmigVersionDatasetsDatasetVariablesGetRequestConfig(version = version, dataset = dataset)

        return request<Unit, SdtmigDatasetVariables>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSdtmigVersionDatasetsDatasetVariablesGet
     *
     * @param version CDISC Library Product Version
     * @param dataset SDTMIG Dataset Identifier
     * @return RequestConfig
     */
    fun mdrSdtmigVersionDatasetsDatasetVariablesGetRequestConfig(version: kotlin.String, dataset: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sdtmig/{version}/datasets/{dataset}/variables".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"dataset"+"}", encodeURIComponent(dataset.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sdtmig/{version}/datasets/{dataset}/variables/{var}
     * 
     * Get SDTMIG Dataset Variable
     * @param version CDISC Library Product Version
     * @param dataset SDTMIG Dataset Identifier
     * @param `var` SDTMIG Variable Identifier
     * @return SdtmigDatasetVariable
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSdtmigVersionDatasetsDatasetVariablesVarGet(version: kotlin.String, dataset: kotlin.String, `var`: kotlin.String) : SdtmigDatasetVariable {
        val localVarResponse = mdrSdtmigVersionDatasetsDatasetVariablesVarGetWithHttpInfo(version = version, dataset = dataset, `var` = `var`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SdtmigDatasetVariable
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sdtmig/{version}/datasets/{dataset}/variables/{var}
     * 
     * Get SDTMIG Dataset Variable
     * @param version CDISC Library Product Version
     * @param dataset SDTMIG Dataset Identifier
     * @param `var` SDTMIG Variable Identifier
     * @return ApiResponse<SdtmigDatasetVariable?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSdtmigVersionDatasetsDatasetVariablesVarGetWithHttpInfo(version: kotlin.String, dataset: kotlin.String, `var`: kotlin.String) : ApiResponse<SdtmigDatasetVariable?> {
        val localVariableConfig = mdrSdtmigVersionDatasetsDatasetVariablesVarGetRequestConfig(version = version, dataset = dataset, `var` = `var`)

        return request<Unit, SdtmigDatasetVariable>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSdtmigVersionDatasetsDatasetVariablesVarGet
     *
     * @param version CDISC Library Product Version
     * @param dataset SDTMIG Dataset Identifier
     * @param `var` SDTMIG Variable Identifier
     * @return RequestConfig
     */
    fun mdrSdtmigVersionDatasetsDatasetVariablesVarGetRequestConfig(version: kotlin.String, dataset: kotlin.String, `var`: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sdtmig/{version}/datasets/{dataset}/variables/{var}".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"dataset"+"}", encodeURIComponent(dataset.toString())).replace("{"+"var"+"}", encodeURIComponent(`var`.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sdtmig/{version}/datasets
     * 
     * Get SDTMIG Dataset List
     * @param version CDISC Library Product Version
     * @return SdtmigDatasets
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSdtmigVersionDatasetsGet(version: kotlin.String) : SdtmigDatasets {
        val localVarResponse = mdrSdtmigVersionDatasetsGetWithHttpInfo(version = version)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SdtmigDatasets
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sdtmig/{version}/datasets
     * 
     * Get SDTMIG Dataset List
     * @param version CDISC Library Product Version
     * @return ApiResponse<SdtmigDatasets?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSdtmigVersionDatasetsGetWithHttpInfo(version: kotlin.String) : ApiResponse<SdtmigDatasets?> {
        val localVariableConfig = mdrSdtmigVersionDatasetsGetRequestConfig(version = version)

        return request<Unit, SdtmigDatasets>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSdtmigVersionDatasetsGet
     *
     * @param version CDISC Library Product Version
     * @return RequestConfig
     */
    fun mdrSdtmigVersionDatasetsGetRequestConfig(version: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sdtmig/{version}/datasets".replace("{"+"version"+"}", encodeURIComponent(version.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sdtmig/{version}
     * 
     * Get SDTMIG product
     * @param version CDISC Library Product Version
     * @return SdtmigProduct
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSdtmigVersionGet(version: kotlin.String) : SdtmigProduct {
        val localVarResponse = mdrSdtmigVersionGetWithHttpInfo(version = version)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SdtmigProduct
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sdtmig/{version}
     * 
     * Get SDTMIG product
     * @param version CDISC Library Product Version
     * @return ApiResponse<SdtmigProduct?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSdtmigVersionGetWithHttpInfo(version: kotlin.String) : ApiResponse<SdtmigProduct?> {
        val localVariableConfig = mdrSdtmigVersionGetRequestConfig(version = version)

        return request<Unit, SdtmigProduct>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSdtmigVersionGet
     *
     * @param version CDISC Library Product Version
     * @return RequestConfig
     */
    fun mdrSdtmigVersionGetRequestConfig(version: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sdtmig/{version}".replace("{"+"version"+"}", encodeURIComponent(version.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}

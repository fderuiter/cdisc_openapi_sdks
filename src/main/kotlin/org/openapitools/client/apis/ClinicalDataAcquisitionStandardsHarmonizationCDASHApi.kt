/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.CdashClass
import org.openapitools.client.models.CdashClassDomains
import org.openapitools.client.models.CdashClassField
import org.openapitools.client.models.CdashDomain
import org.openapitools.client.models.CdashDomainField
import org.openapitools.client.models.CdashDomainFields
import org.openapitools.client.models.CdashProduct
import org.openapitools.client.models.CdashProductClasses
import org.openapitools.client.models.CdashProductDomains
import org.openapitools.client.models.DefaultErrorResponse
import org.openapitools.client.models.ExportCdashTable
import org.openapitools.client.models.RootCdashClassField
import org.openapitools.client.models.RootCdashDomainField
import org.openapitools.client.models.XmlCdashClass
import org.openapitools.client.models.XmlCdashClassDomains
import org.openapitools.client.models.XmlCdashClassField
import org.openapitools.client.models.XmlCdashDomain
import org.openapitools.client.models.XmlCdashDomainField
import org.openapitools.client.models.XmlCdashDomainFields
import org.openapitools.client.models.XmlCdashProduct
import org.openapitools.client.models.XmlCdashProductClasses
import org.openapitools.client.models.XmlCdashProductDomains
import org.openapitools.client.models.XmlRootCdashClassField
import org.openapitools.client.models.XmlRootCdashDomainField

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class ClinicalDataAcquisitionStandardsHarmonizationCDASHApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://library.cdisc.org/api")
        }
    }

    /**
     * GET /mdr/cdash/{version}/classes/{class}/domains
     * 
     * Get CDASH Class Domain List
     * @param version CDISC Library Product Version
     * @param propertyClass CDASH Class Identifier
     * @return CdashClassDomains
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCdashVersionClassesClassDomainsGet(version: kotlin.String, propertyClass: kotlin.String) : CdashClassDomains {
        val localVarResponse = mdrCdashVersionClassesClassDomainsGetWithHttpInfo(version = version, propertyClass = propertyClass)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CdashClassDomains
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/cdash/{version}/classes/{class}/domains
     * 
     * Get CDASH Class Domain List
     * @param version CDISC Library Product Version
     * @param propertyClass CDASH Class Identifier
     * @return ApiResponse<CdashClassDomains?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCdashVersionClassesClassDomainsGetWithHttpInfo(version: kotlin.String, propertyClass: kotlin.String) : ApiResponse<CdashClassDomains?> {
        val localVariableConfig = mdrCdashVersionClassesClassDomainsGetRequestConfig(version = version, propertyClass = propertyClass)

        return request<Unit, CdashClassDomains>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCdashVersionClassesClassDomainsGet
     *
     * @param version CDISC Library Product Version
     * @param propertyClass CDASH Class Identifier
     * @return RequestConfig
     */
    fun mdrCdashVersionClassesClassDomainsGetRequestConfig(version: kotlin.String, propertyClass: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/cdash/{version}/classes/{class}/domains".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"class"+"}", encodeURIComponent(propertyClass.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/cdash/{version}/classes/{class}/fields/{field}
     * 
     * Get CDASH Class Field
     * @param version CDISC Library Product Version
     * @param propertyClass CDASH Class Identifier
     * @param `field` CDASH Field Identifier
     * @return CdashClassField
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCdashVersionClassesClassFieldsFieldGet(version: kotlin.String, propertyClass: kotlin.String, `field`: kotlin.String) : CdashClassField {
        val localVarResponse = mdrCdashVersionClassesClassFieldsFieldGetWithHttpInfo(version = version, propertyClass = propertyClass, `field` = `field`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CdashClassField
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/cdash/{version}/classes/{class}/fields/{field}
     * 
     * Get CDASH Class Field
     * @param version CDISC Library Product Version
     * @param propertyClass CDASH Class Identifier
     * @param `field` CDASH Field Identifier
     * @return ApiResponse<CdashClassField?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCdashVersionClassesClassFieldsFieldGetWithHttpInfo(version: kotlin.String, propertyClass: kotlin.String, `field`: kotlin.String) : ApiResponse<CdashClassField?> {
        val localVariableConfig = mdrCdashVersionClassesClassFieldsFieldGetRequestConfig(version = version, propertyClass = propertyClass, `field` = `field`)

        return request<Unit, CdashClassField>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCdashVersionClassesClassFieldsFieldGet
     *
     * @param version CDISC Library Product Version
     * @param propertyClass CDASH Class Identifier
     * @param `field` CDASH Field Identifier
     * @return RequestConfig
     */
    fun mdrCdashVersionClassesClassFieldsFieldGetRequestConfig(version: kotlin.String, propertyClass: kotlin.String, `field`: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/cdash/{version}/classes/{class}/fields/{field}".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"class"+"}", encodeURIComponent(propertyClass.toString())).replace("{"+"field"+"}", encodeURIComponent(`field`.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/cdash/{version}/classes/{class}
     * 
     * Get CDASH Class
     * @param version CDISC Library Product Version
     * @param propertyClass CDASH Class Identifier
     * @return CdashClass
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCdashVersionClassesClassGet(version: kotlin.String, propertyClass: kotlin.String) : CdashClass {
        val localVarResponse = mdrCdashVersionClassesClassGetWithHttpInfo(version = version, propertyClass = propertyClass)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CdashClass
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/cdash/{version}/classes/{class}
     * 
     * Get CDASH Class
     * @param version CDISC Library Product Version
     * @param propertyClass CDASH Class Identifier
     * @return ApiResponse<CdashClass?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCdashVersionClassesClassGetWithHttpInfo(version: kotlin.String, propertyClass: kotlin.String) : ApiResponse<CdashClass?> {
        val localVariableConfig = mdrCdashVersionClassesClassGetRequestConfig(version = version, propertyClass = propertyClass)

        return request<Unit, CdashClass>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCdashVersionClassesClassGet
     *
     * @param version CDISC Library Product Version
     * @param propertyClass CDASH Class Identifier
     * @return RequestConfig
     */
    fun mdrCdashVersionClassesClassGetRequestConfig(version: kotlin.String, propertyClass: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/cdash/{version}/classes/{class}".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"class"+"}", encodeURIComponent(propertyClass.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/cdash/{version}/classes
     * 
     * Get CDASH Class List
     * @param version CDISC Library Product Version
     * @return CdashProductClasses
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCdashVersionClassesGet(version: kotlin.String) : CdashProductClasses {
        val localVarResponse = mdrCdashVersionClassesGetWithHttpInfo(version = version)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CdashProductClasses
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/cdash/{version}/classes
     * 
     * Get CDASH Class List
     * @param version CDISC Library Product Version
     * @return ApiResponse<CdashProductClasses?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCdashVersionClassesGetWithHttpInfo(version: kotlin.String) : ApiResponse<CdashProductClasses?> {
        val localVariableConfig = mdrCdashVersionClassesGetRequestConfig(version = version)

        return request<Unit, CdashProductClasses>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCdashVersionClassesGet
     *
     * @param version CDISC Library Product Version
     * @return RequestConfig
     */
    fun mdrCdashVersionClassesGetRequestConfig(version: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/cdash/{version}/classes".replace("{"+"version"+"}", encodeURIComponent(version.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/cdash/{version}/domains/{domain}/fields/{field}
     * 
     * Get CDASH Domain Field
     * @param version CDISC Library Product Version
     * @param domain CDASH Domain Identifier
     * @param `field` CDASH Field Identifier
     * @return CdashDomainField
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCdashVersionDomainsDomainFieldsFieldGet(version: kotlin.String, domain: kotlin.String, `field`: kotlin.String) : CdashDomainField {
        val localVarResponse = mdrCdashVersionDomainsDomainFieldsFieldGetWithHttpInfo(version = version, domain = domain, `field` = `field`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CdashDomainField
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/cdash/{version}/domains/{domain}/fields/{field}
     * 
     * Get CDASH Domain Field
     * @param version CDISC Library Product Version
     * @param domain CDASH Domain Identifier
     * @param `field` CDASH Field Identifier
     * @return ApiResponse<CdashDomainField?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCdashVersionDomainsDomainFieldsFieldGetWithHttpInfo(version: kotlin.String, domain: kotlin.String, `field`: kotlin.String) : ApiResponse<CdashDomainField?> {
        val localVariableConfig = mdrCdashVersionDomainsDomainFieldsFieldGetRequestConfig(version = version, domain = domain, `field` = `field`)

        return request<Unit, CdashDomainField>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCdashVersionDomainsDomainFieldsFieldGet
     *
     * @param version CDISC Library Product Version
     * @param domain CDASH Domain Identifier
     * @param `field` CDASH Field Identifier
     * @return RequestConfig
     */
    fun mdrCdashVersionDomainsDomainFieldsFieldGetRequestConfig(version: kotlin.String, domain: kotlin.String, `field`: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/cdash/{version}/domains/{domain}/fields/{field}".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"domain"+"}", encodeURIComponent(domain.toString())).replace("{"+"field"+"}", encodeURIComponent(`field`.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/cdash/{version}/domains/{domain}/fields
     * 
     * Get CDASH Domain Field List
     * @param version CDISC Library Product Version
     * @param domain CDASH Domain Identifier
     * @return CdashDomainFields
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCdashVersionDomainsDomainFieldsGet(version: kotlin.String, domain: kotlin.String) : CdashDomainFields {
        val localVarResponse = mdrCdashVersionDomainsDomainFieldsGetWithHttpInfo(version = version, domain = domain)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CdashDomainFields
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/cdash/{version}/domains/{domain}/fields
     * 
     * Get CDASH Domain Field List
     * @param version CDISC Library Product Version
     * @param domain CDASH Domain Identifier
     * @return ApiResponse<CdashDomainFields?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCdashVersionDomainsDomainFieldsGetWithHttpInfo(version: kotlin.String, domain: kotlin.String) : ApiResponse<CdashDomainFields?> {
        val localVariableConfig = mdrCdashVersionDomainsDomainFieldsGetRequestConfig(version = version, domain = domain)

        return request<Unit, CdashDomainFields>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCdashVersionDomainsDomainFieldsGet
     *
     * @param version CDISC Library Product Version
     * @param domain CDASH Domain Identifier
     * @return RequestConfig
     */
    fun mdrCdashVersionDomainsDomainFieldsGetRequestConfig(version: kotlin.String, domain: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/cdash/{version}/domains/{domain}/fields".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"domain"+"}", encodeURIComponent(domain.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/cdash/{version}/domains/{domain}
     * 
     * Get CDASH Domain
     * @param version CDISC Library Product Version
     * @param domain CDASH Domain Identifier
     * @return CdashDomain
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCdashVersionDomainsDomainGet(version: kotlin.String, domain: kotlin.String) : CdashDomain {
        val localVarResponse = mdrCdashVersionDomainsDomainGetWithHttpInfo(version = version, domain = domain)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CdashDomain
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/cdash/{version}/domains/{domain}
     * 
     * Get CDASH Domain
     * @param version CDISC Library Product Version
     * @param domain CDASH Domain Identifier
     * @return ApiResponse<CdashDomain?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCdashVersionDomainsDomainGetWithHttpInfo(version: kotlin.String, domain: kotlin.String) : ApiResponse<CdashDomain?> {
        val localVariableConfig = mdrCdashVersionDomainsDomainGetRequestConfig(version = version, domain = domain)

        return request<Unit, CdashDomain>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCdashVersionDomainsDomainGet
     *
     * @param version CDISC Library Product Version
     * @param domain CDASH Domain Identifier
     * @return RequestConfig
     */
    fun mdrCdashVersionDomainsDomainGetRequestConfig(version: kotlin.String, domain: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/cdash/{version}/domains/{domain}".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"domain"+"}", encodeURIComponent(domain.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/cdash/{version}/domains
     * 
     * Get CDASH Domain List
     * @param version CDISC Library Product Version
     * @return CdashProductDomains
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCdashVersionDomainsGet(version: kotlin.String) : CdashProductDomains {
        val localVarResponse = mdrCdashVersionDomainsGetWithHttpInfo(version = version)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CdashProductDomains
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/cdash/{version}/domains
     * 
     * Get CDASH Domain List
     * @param version CDISC Library Product Version
     * @return ApiResponse<CdashProductDomains?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCdashVersionDomainsGetWithHttpInfo(version: kotlin.String) : ApiResponse<CdashProductDomains?> {
        val localVariableConfig = mdrCdashVersionDomainsGetRequestConfig(version = version)

        return request<Unit, CdashProductDomains>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCdashVersionDomainsGet
     *
     * @param version CDISC Library Product Version
     * @return RequestConfig
     */
    fun mdrCdashVersionDomainsGetRequestConfig(version: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/cdash/{version}/domains".replace("{"+"version"+"}", encodeURIComponent(version.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/cdash/{version}
     * 
     * Get CDASH Product
     * @param version CDISC Library Product Version
     * @return CdashProduct
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCdashVersionGet(version: kotlin.String) : CdashProduct {
        val localVarResponse = mdrCdashVersionGetWithHttpInfo(version = version)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CdashProduct
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/cdash/{version}
     * 
     * Get CDASH Product
     * @param version CDISC Library Product Version
     * @return ApiResponse<CdashProduct?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCdashVersionGetWithHttpInfo(version: kotlin.String) : ApiResponse<CdashProduct?> {
        val localVariableConfig = mdrCdashVersionGetRequestConfig(version = version)

        return request<Unit, CdashProduct>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCdashVersionGet
     *
     * @param version CDISC Library Product Version
     * @return RequestConfig
     */
    fun mdrCdashVersionGetRequestConfig(version: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/cdash/{version}".replace("{"+"version"+"}", encodeURIComponent(version.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/root/cdash/classes/{class}/fields/{field}
     * 
     * Get Root CDASH Class Field
     * @param propertyClass CDASH Class Identifier
     * @param `field` CDASH Field Identifier
     * @return RootCdashClassField
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrRootCdashClassesClassFieldsFieldGet(propertyClass: kotlin.String, `field`: kotlin.String) : RootCdashClassField {
        val localVarResponse = mdrRootCdashClassesClassFieldsFieldGetWithHttpInfo(propertyClass = propertyClass, `field` = `field`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RootCdashClassField
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/root/cdash/classes/{class}/fields/{field}
     * 
     * Get Root CDASH Class Field
     * @param propertyClass CDASH Class Identifier
     * @param `field` CDASH Field Identifier
     * @return ApiResponse<RootCdashClassField?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrRootCdashClassesClassFieldsFieldGetWithHttpInfo(propertyClass: kotlin.String, `field`: kotlin.String) : ApiResponse<RootCdashClassField?> {
        val localVariableConfig = mdrRootCdashClassesClassFieldsFieldGetRequestConfig(propertyClass = propertyClass, `field` = `field`)

        return request<Unit, RootCdashClassField>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrRootCdashClassesClassFieldsFieldGet
     *
     * @param propertyClass CDASH Class Identifier
     * @param `field` CDASH Field Identifier
     * @return RequestConfig
     */
    fun mdrRootCdashClassesClassFieldsFieldGetRequestConfig(propertyClass: kotlin.String, `field`: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/root/cdash/classes/{class}/fields/{field}".replace("{"+"class"+"}", encodeURIComponent(propertyClass.toString())).replace("{"+"field"+"}", encodeURIComponent(`field`.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/root/cdash/domains/{domain}/fields/{field}
     * 
     * Get Root CDASH Domain Field
     * @param domain CDASH Domain Identifier
     * @param `field` CDASH Field Identifier
     * @return RootCdashDomainField
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrRootCdashDomainsDomainFieldsFieldGet(domain: kotlin.String, `field`: kotlin.String) : RootCdashDomainField {
        val localVarResponse = mdrRootCdashDomainsDomainFieldsFieldGetWithHttpInfo(domain = domain, `field` = `field`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RootCdashDomainField
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/root/cdash/domains/{domain}/fields/{field}
     * 
     * Get Root CDASH Domain Field
     * @param domain CDASH Domain Identifier
     * @param `field` CDASH Field Identifier
     * @return ApiResponse<RootCdashDomainField?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrRootCdashDomainsDomainFieldsFieldGetWithHttpInfo(domain: kotlin.String, `field`: kotlin.String) : ApiResponse<RootCdashDomainField?> {
        val localVariableConfig = mdrRootCdashDomainsDomainFieldsFieldGetRequestConfig(domain = domain, `field` = `field`)

        return request<Unit, RootCdashDomainField>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrRootCdashDomainsDomainFieldsFieldGet
     *
     * @param domain CDASH Domain Identifier
     * @param `field` CDASH Field Identifier
     * @return RequestConfig
     */
    fun mdrRootCdashDomainsDomainFieldsFieldGetRequestConfig(domain: kotlin.String, `field`: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/root/cdash/domains/{domain}/fields/{field}".replace("{"+"domain"+"}", encodeURIComponent(domain.toString())).replace("{"+"field"+"}", encodeURIComponent(`field`.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}

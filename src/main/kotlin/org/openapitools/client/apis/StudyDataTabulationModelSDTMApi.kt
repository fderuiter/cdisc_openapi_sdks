/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.DefaultErrorResponse
import org.openapitools.client.models.ExportSdtmDatasetsTable
import org.openapitools.client.models.ExportSdtmVariablesTable
import org.openapitools.client.models.ExportSdtmWorkbook
import org.openapitools.client.models.RootSdtmClassVariable
import org.openapitools.client.models.RootSdtmDatasetVariable
import org.openapitools.client.models.SdtmClass
import org.openapitools.client.models.SdtmClassDatasets
import org.openapitools.client.models.SdtmClassVariable
import org.openapitools.client.models.SdtmClassVariables
import org.openapitools.client.models.SdtmClasses
import org.openapitools.client.models.SdtmDataset
import org.openapitools.client.models.SdtmDatasetVariable
import org.openapitools.client.models.SdtmDatasetVariables
import org.openapitools.client.models.SdtmDatasets
import org.openapitools.client.models.SdtmProduct
import org.openapitools.client.models.XmlRootSdtmClassVariable
import org.openapitools.client.models.XmlRootSdtmDatasetVariable
import org.openapitools.client.models.XmlSdtmClass
import org.openapitools.client.models.XmlSdtmClassDatasets
import org.openapitools.client.models.XmlSdtmClassVariable
import org.openapitools.client.models.XmlSdtmClassVariables
import org.openapitools.client.models.XmlSdtmClasses
import org.openapitools.client.models.XmlSdtmDataset
import org.openapitools.client.models.XmlSdtmDatasetVariable
import org.openapitools.client.models.XmlSdtmDatasetVariables
import org.openapitools.client.models.XmlSdtmDatasets
import org.openapitools.client.models.XmlSdtmProduct

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class StudyDataTabulationModelSDTMApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://library.cdisc.org/api")
        }
    }

    /**
     * GET /mdr/root/sdtm/classes/{class}/variables/{var}
     * 
     * Get Root of SDTM Class Variable
     * @param propertyClass SDTM Class Identifier
     * @param `var` SDTM Variable Identifier
     * @return RootSdtmClassVariable
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrRootSdtmClassesClassVariablesVarGet(propertyClass: kotlin.String, `var`: kotlin.String) : RootSdtmClassVariable {
        val localVarResponse = mdrRootSdtmClassesClassVariablesVarGetWithHttpInfo(propertyClass = propertyClass, `var` = `var`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RootSdtmClassVariable
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/root/sdtm/classes/{class}/variables/{var}
     * 
     * Get Root of SDTM Class Variable
     * @param propertyClass SDTM Class Identifier
     * @param `var` SDTM Variable Identifier
     * @return ApiResponse<RootSdtmClassVariable?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrRootSdtmClassesClassVariablesVarGetWithHttpInfo(propertyClass: kotlin.String, `var`: kotlin.String) : ApiResponse<RootSdtmClassVariable?> {
        val localVariableConfig = mdrRootSdtmClassesClassVariablesVarGetRequestConfig(propertyClass = propertyClass, `var` = `var`)

        return request<Unit, RootSdtmClassVariable>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrRootSdtmClassesClassVariablesVarGet
     *
     * @param propertyClass SDTM Class Identifier
     * @param `var` SDTM Variable Identifier
     * @return RequestConfig
     */
    fun mdrRootSdtmClassesClassVariablesVarGetRequestConfig(propertyClass: kotlin.String, `var`: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/root/sdtm/classes/{class}/variables/{var}".replace("{"+"class"+"}", encodeURIComponent(propertyClass.toString())).replace("{"+"var"+"}", encodeURIComponent(`var`.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/root/sdtm/datasets/{dataset}/variables/{var}
     * 
     * Get Root SDTM Dataset Variable
     * @param dataset SDTM Dataset Identifier
     * @param `var` SDTM Variable Identifier
     * @return RootSdtmDatasetVariable
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrRootSdtmDatasetsDatasetVariablesVarGet(dataset: kotlin.String, `var`: kotlin.String) : RootSdtmDatasetVariable {
        val localVarResponse = mdrRootSdtmDatasetsDatasetVariablesVarGetWithHttpInfo(dataset = dataset, `var` = `var`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RootSdtmDatasetVariable
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/root/sdtm/datasets/{dataset}/variables/{var}
     * 
     * Get Root SDTM Dataset Variable
     * @param dataset SDTM Dataset Identifier
     * @param `var` SDTM Variable Identifier
     * @return ApiResponse<RootSdtmDatasetVariable?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrRootSdtmDatasetsDatasetVariablesVarGetWithHttpInfo(dataset: kotlin.String, `var`: kotlin.String) : ApiResponse<RootSdtmDatasetVariable?> {
        val localVariableConfig = mdrRootSdtmDatasetsDatasetVariablesVarGetRequestConfig(dataset = dataset, `var` = `var`)

        return request<Unit, RootSdtmDatasetVariable>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrRootSdtmDatasetsDatasetVariablesVarGet
     *
     * @param dataset SDTM Dataset Identifier
     * @param `var` SDTM Variable Identifier
     * @return RequestConfig
     */
    fun mdrRootSdtmDatasetsDatasetVariablesVarGetRequestConfig(dataset: kotlin.String, `var`: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/root/sdtm/datasets/{dataset}/variables/{var}".replace("{"+"dataset"+"}", encodeURIComponent(dataset.toString())).replace("{"+"var"+"}", encodeURIComponent(`var`.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sdtm/{version}/classes/{class}/datasets
     * 
     * Get SDTM Class Dataset List
     * @param version CDISC Library Product Version
     * @param propertyClass SDTM Class Identifier
     * @return SdtmClassDatasets
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSdtmVersionClassesClassDatasetsGet(version: kotlin.String, propertyClass: kotlin.String) : SdtmClassDatasets {
        val localVarResponse = mdrSdtmVersionClassesClassDatasetsGetWithHttpInfo(version = version, propertyClass = propertyClass)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SdtmClassDatasets
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sdtm/{version}/classes/{class}/datasets
     * 
     * Get SDTM Class Dataset List
     * @param version CDISC Library Product Version
     * @param propertyClass SDTM Class Identifier
     * @return ApiResponse<SdtmClassDatasets?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSdtmVersionClassesClassDatasetsGetWithHttpInfo(version: kotlin.String, propertyClass: kotlin.String) : ApiResponse<SdtmClassDatasets?> {
        val localVariableConfig = mdrSdtmVersionClassesClassDatasetsGetRequestConfig(version = version, propertyClass = propertyClass)

        return request<Unit, SdtmClassDatasets>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSdtmVersionClassesClassDatasetsGet
     *
     * @param version CDISC Library Product Version
     * @param propertyClass SDTM Class Identifier
     * @return RequestConfig
     */
    fun mdrSdtmVersionClassesClassDatasetsGetRequestConfig(version: kotlin.String, propertyClass: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sdtm/{version}/classes/{class}/datasets".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"class"+"}", encodeURIComponent(propertyClass.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sdtm/{version}/classes/{class}
     * 
     * Get SDTM Class
     * @param version CDISC Library Product Version
     * @param propertyClass SDTM Class Identifier
     * @return SdtmClass
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSdtmVersionClassesClassGet(version: kotlin.String, propertyClass: kotlin.String) : SdtmClass {
        val localVarResponse = mdrSdtmVersionClassesClassGetWithHttpInfo(version = version, propertyClass = propertyClass)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SdtmClass
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sdtm/{version}/classes/{class}
     * 
     * Get SDTM Class
     * @param version CDISC Library Product Version
     * @param propertyClass SDTM Class Identifier
     * @return ApiResponse<SdtmClass?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSdtmVersionClassesClassGetWithHttpInfo(version: kotlin.String, propertyClass: kotlin.String) : ApiResponse<SdtmClass?> {
        val localVariableConfig = mdrSdtmVersionClassesClassGetRequestConfig(version = version, propertyClass = propertyClass)

        return request<Unit, SdtmClass>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSdtmVersionClassesClassGet
     *
     * @param version CDISC Library Product Version
     * @param propertyClass SDTM Class Identifier
     * @return RequestConfig
     */
    fun mdrSdtmVersionClassesClassGetRequestConfig(version: kotlin.String, propertyClass: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sdtm/{version}/classes/{class}".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"class"+"}", encodeURIComponent(propertyClass.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sdtm/{version}/classes/{class}/variables
     * 
     * Get SDTM Class Variable List
     * @param version CDISC Library Product Version
     * @param propertyClass SDTM Class Identifier
     * @return SdtmClassVariables
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSdtmVersionClassesClassVariablesGet(version: kotlin.String, propertyClass: kotlin.String) : SdtmClassVariables {
        val localVarResponse = mdrSdtmVersionClassesClassVariablesGetWithHttpInfo(version = version, propertyClass = propertyClass)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SdtmClassVariables
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sdtm/{version}/classes/{class}/variables
     * 
     * Get SDTM Class Variable List
     * @param version CDISC Library Product Version
     * @param propertyClass SDTM Class Identifier
     * @return ApiResponse<SdtmClassVariables?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSdtmVersionClassesClassVariablesGetWithHttpInfo(version: kotlin.String, propertyClass: kotlin.String) : ApiResponse<SdtmClassVariables?> {
        val localVariableConfig = mdrSdtmVersionClassesClassVariablesGetRequestConfig(version = version, propertyClass = propertyClass)

        return request<Unit, SdtmClassVariables>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSdtmVersionClassesClassVariablesGet
     *
     * @param version CDISC Library Product Version
     * @param propertyClass SDTM Class Identifier
     * @return RequestConfig
     */
    fun mdrSdtmVersionClassesClassVariablesGetRequestConfig(version: kotlin.String, propertyClass: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sdtm/{version}/classes/{class}/variables".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"class"+"}", encodeURIComponent(propertyClass.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sdtm/{version}/classes/{class}/variables/{var}
     * 
     * Get SDTM Class Variable
     * @param version CDISC Library Product Version
     * @param propertyClass SDTM Class Identifier
     * @param `var` SDTM Variable Identifier
     * @return SdtmClassVariable
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSdtmVersionClassesClassVariablesVarGet(version: kotlin.String, propertyClass: kotlin.String, `var`: kotlin.String) : SdtmClassVariable {
        val localVarResponse = mdrSdtmVersionClassesClassVariablesVarGetWithHttpInfo(version = version, propertyClass = propertyClass, `var` = `var`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SdtmClassVariable
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sdtm/{version}/classes/{class}/variables/{var}
     * 
     * Get SDTM Class Variable
     * @param version CDISC Library Product Version
     * @param propertyClass SDTM Class Identifier
     * @param `var` SDTM Variable Identifier
     * @return ApiResponse<SdtmClassVariable?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSdtmVersionClassesClassVariablesVarGetWithHttpInfo(version: kotlin.String, propertyClass: kotlin.String, `var`: kotlin.String) : ApiResponse<SdtmClassVariable?> {
        val localVariableConfig = mdrSdtmVersionClassesClassVariablesVarGetRequestConfig(version = version, propertyClass = propertyClass, `var` = `var`)

        return request<Unit, SdtmClassVariable>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSdtmVersionClassesClassVariablesVarGet
     *
     * @param version CDISC Library Product Version
     * @param propertyClass SDTM Class Identifier
     * @param `var` SDTM Variable Identifier
     * @return RequestConfig
     */
    fun mdrSdtmVersionClassesClassVariablesVarGetRequestConfig(version: kotlin.String, propertyClass: kotlin.String, `var`: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sdtm/{version}/classes/{class}/variables/{var}".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"class"+"}", encodeURIComponent(propertyClass.toString())).replace("{"+"var"+"}", encodeURIComponent(`var`.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sdtm/{version}/classes
     * 
     * Get SDTM Class List
     * @param version CDISC Library Product Version
     * @return SdtmClasses
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSdtmVersionClassesGet(version: kotlin.String) : SdtmClasses {
        val localVarResponse = mdrSdtmVersionClassesGetWithHttpInfo(version = version)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SdtmClasses
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sdtm/{version}/classes
     * 
     * Get SDTM Class List
     * @param version CDISC Library Product Version
     * @return ApiResponse<SdtmClasses?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSdtmVersionClassesGetWithHttpInfo(version: kotlin.String) : ApiResponse<SdtmClasses?> {
        val localVariableConfig = mdrSdtmVersionClassesGetRequestConfig(version = version)

        return request<Unit, SdtmClasses>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSdtmVersionClassesGet
     *
     * @param version CDISC Library Product Version
     * @return RequestConfig
     */
    fun mdrSdtmVersionClassesGetRequestConfig(version: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sdtm/{version}/classes".replace("{"+"version"+"}", encodeURIComponent(version.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sdtm/{version}/datasets/{dataset}
     * 
     * Get SDTM Dataset
     * @param version CDISC Library Product Version
     * @param dataset SDTM Dataset Identifier
     * @return SdtmDataset
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSdtmVersionDatasetsDatasetGet(version: kotlin.String, dataset: kotlin.String) : SdtmDataset {
        val localVarResponse = mdrSdtmVersionDatasetsDatasetGetWithHttpInfo(version = version, dataset = dataset)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SdtmDataset
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sdtm/{version}/datasets/{dataset}
     * 
     * Get SDTM Dataset
     * @param version CDISC Library Product Version
     * @param dataset SDTM Dataset Identifier
     * @return ApiResponse<SdtmDataset?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSdtmVersionDatasetsDatasetGetWithHttpInfo(version: kotlin.String, dataset: kotlin.String) : ApiResponse<SdtmDataset?> {
        val localVariableConfig = mdrSdtmVersionDatasetsDatasetGetRequestConfig(version = version, dataset = dataset)

        return request<Unit, SdtmDataset>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSdtmVersionDatasetsDatasetGet
     *
     * @param version CDISC Library Product Version
     * @param dataset SDTM Dataset Identifier
     * @return RequestConfig
     */
    fun mdrSdtmVersionDatasetsDatasetGetRequestConfig(version: kotlin.String, dataset: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sdtm/{version}/datasets/{dataset}".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"dataset"+"}", encodeURIComponent(dataset.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sdtm/{version}/datasets/{dataset}/variables
     * 
     * Get SDTM Dataset Variable List
     * @param version CDISC Library Product Version
     * @param dataset SDTM Dataset Identifier
     * @return SdtmDatasetVariables
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSdtmVersionDatasetsDatasetVariablesGet(version: kotlin.String, dataset: kotlin.String) : SdtmDatasetVariables {
        val localVarResponse = mdrSdtmVersionDatasetsDatasetVariablesGetWithHttpInfo(version = version, dataset = dataset)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SdtmDatasetVariables
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sdtm/{version}/datasets/{dataset}/variables
     * 
     * Get SDTM Dataset Variable List
     * @param version CDISC Library Product Version
     * @param dataset SDTM Dataset Identifier
     * @return ApiResponse<SdtmDatasetVariables?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSdtmVersionDatasetsDatasetVariablesGetWithHttpInfo(version: kotlin.String, dataset: kotlin.String) : ApiResponse<SdtmDatasetVariables?> {
        val localVariableConfig = mdrSdtmVersionDatasetsDatasetVariablesGetRequestConfig(version = version, dataset = dataset)

        return request<Unit, SdtmDatasetVariables>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSdtmVersionDatasetsDatasetVariablesGet
     *
     * @param version CDISC Library Product Version
     * @param dataset SDTM Dataset Identifier
     * @return RequestConfig
     */
    fun mdrSdtmVersionDatasetsDatasetVariablesGetRequestConfig(version: kotlin.String, dataset: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sdtm/{version}/datasets/{dataset}/variables".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"dataset"+"}", encodeURIComponent(dataset.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sdtm/{version}/datasets/{dataset}/variables/{var}
     * 
     * Get SDTM Dataset Variable
     * @param version CDISC Library Product Version
     * @param dataset SDTM Dataset Identifier
     * @param `var` SDTM Variable Identifier
     * @return SdtmDatasetVariable
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSdtmVersionDatasetsDatasetVariablesVarGet(version: kotlin.String, dataset: kotlin.String, `var`: kotlin.String) : SdtmDatasetVariable {
        val localVarResponse = mdrSdtmVersionDatasetsDatasetVariablesVarGetWithHttpInfo(version = version, dataset = dataset, `var` = `var`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SdtmDatasetVariable
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sdtm/{version}/datasets/{dataset}/variables/{var}
     * 
     * Get SDTM Dataset Variable
     * @param version CDISC Library Product Version
     * @param dataset SDTM Dataset Identifier
     * @param `var` SDTM Variable Identifier
     * @return ApiResponse<SdtmDatasetVariable?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSdtmVersionDatasetsDatasetVariablesVarGetWithHttpInfo(version: kotlin.String, dataset: kotlin.String, `var`: kotlin.String) : ApiResponse<SdtmDatasetVariable?> {
        val localVariableConfig = mdrSdtmVersionDatasetsDatasetVariablesVarGetRequestConfig(version = version, dataset = dataset, `var` = `var`)

        return request<Unit, SdtmDatasetVariable>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSdtmVersionDatasetsDatasetVariablesVarGet
     *
     * @param version CDISC Library Product Version
     * @param dataset SDTM Dataset Identifier
     * @param `var` SDTM Variable Identifier
     * @return RequestConfig
     */
    fun mdrSdtmVersionDatasetsDatasetVariablesVarGetRequestConfig(version: kotlin.String, dataset: kotlin.String, `var`: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sdtm/{version}/datasets/{dataset}/variables/{var}".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"dataset"+"}", encodeURIComponent(dataset.toString())).replace("{"+"var"+"}", encodeURIComponent(`var`.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sdtm/{version}/datasets
     * 
     * Get SDTM Dataset List
     * @param version CDISC Library Product Version
     * @return SdtmDatasets
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSdtmVersionDatasetsGet(version: kotlin.String) : SdtmDatasets {
        val localVarResponse = mdrSdtmVersionDatasetsGetWithHttpInfo(version = version)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SdtmDatasets
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sdtm/{version}/datasets
     * 
     * Get SDTM Dataset List
     * @param version CDISC Library Product Version
     * @return ApiResponse<SdtmDatasets?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSdtmVersionDatasetsGetWithHttpInfo(version: kotlin.String) : ApiResponse<SdtmDatasets?> {
        val localVariableConfig = mdrSdtmVersionDatasetsGetRequestConfig(version = version)

        return request<Unit, SdtmDatasets>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSdtmVersionDatasetsGet
     *
     * @param version CDISC Library Product Version
     * @return RequestConfig
     */
    fun mdrSdtmVersionDatasetsGetRequestConfig(version: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sdtm/{version}/datasets".replace("{"+"version"+"}", encodeURIComponent(version.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sdtm/{version}
     * 
     * Get SDTM product
     * @param version CDISC Library Product Version
     * @return SdtmProduct
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSdtmVersionGet(version: kotlin.String) : SdtmProduct {
        val localVarResponse = mdrSdtmVersionGetWithHttpInfo(version = version)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SdtmProduct
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sdtm/{version}
     * 
     * Get SDTM product
     * @param version CDISC Library Product Version
     * @return ApiResponse<SdtmProduct?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSdtmVersionGetWithHttpInfo(version: kotlin.String) : ApiResponse<SdtmProduct?> {
        val localVariableConfig = mdrSdtmVersionGetRequestConfig(version = version)

        return request<Unit, SdtmProduct>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSdtmVersionGet
     *
     * @param version CDISC Library Product Version
     * @return RequestConfig
     */
    fun mdrSdtmVersionGetRequestConfig(version: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sdtm/{version}".replace("{"+"version"+"}", encodeURIComponent(version.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}

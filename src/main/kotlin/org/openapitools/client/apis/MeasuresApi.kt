/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.DefaultErrorResponse
import org.openapitools.client.models.ExportQrsItemsTable
import org.openapitools.client.models.ExportQrsWorkbook
import org.openapitools.client.models.QrsItem
import org.openapitools.client.models.QrsItems
import org.openapitools.client.models.QrsProduct
import org.openapitools.client.models.QrsResponsegroup
import org.openapitools.client.models.QrsResponsegroups
import org.openapitools.client.models.XmlQrsItem
import org.openapitools.client.models.XmlQrsItems
import org.openapitools.client.models.XmlQrsProduct
import org.openapitools.client.models.XmlQrsResponsegroup
import org.openapitools.client.models.XmlQrsResponsegroups

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class MeasuresApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://library.cdisc.org/api")
        }
    }

    /**
     * GET /mdr/qrs/{measure}/{version}
     * 
     * Get QRS Product
     * @param measure QRS Measure Identifier
     * @param version CDISC Library Product Version
     * @return QrsProduct
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrQrsMeasureVersionGet(measure: kotlin.String, version: kotlin.String) : QrsProduct {
        val localVarResponse = mdrQrsMeasureVersionGetWithHttpInfo(measure = measure, version = version)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QrsProduct
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/qrs/{measure}/{version}
     * 
     * Get QRS Product
     * @param measure QRS Measure Identifier
     * @param version CDISC Library Product Version
     * @return ApiResponse<QrsProduct?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrQrsMeasureVersionGetWithHttpInfo(measure: kotlin.String, version: kotlin.String) : ApiResponse<QrsProduct?> {
        val localVariableConfig = mdrQrsMeasureVersionGetRequestConfig(measure = measure, version = version)

        return request<Unit, QrsProduct>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrQrsMeasureVersionGet
     *
     * @param measure QRS Measure Identifier
     * @param version CDISC Library Product Version
     * @return RequestConfig
     */
    fun mdrQrsMeasureVersionGetRequestConfig(measure: kotlin.String, version: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/qrs/{measure}/{version}".replace("{"+"measure"+"}", encodeURIComponent(measure.toString())).replace("{"+"version"+"}", encodeURIComponent(version.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/qrs/{measure}/{version}/items
     * 
     * Get QRS Item List
     * @param measure QRS Measure Identifier
     * @param version CDISC Library Product Version
     * @return QrsItems
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrQrsMeasureVersionItemsGet(measure: kotlin.String, version: kotlin.String) : QrsItems {
        val localVarResponse = mdrQrsMeasureVersionItemsGetWithHttpInfo(measure = measure, version = version)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QrsItems
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/qrs/{measure}/{version}/items
     * 
     * Get QRS Item List
     * @param measure QRS Measure Identifier
     * @param version CDISC Library Product Version
     * @return ApiResponse<QrsItems?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrQrsMeasureVersionItemsGetWithHttpInfo(measure: kotlin.String, version: kotlin.String) : ApiResponse<QrsItems?> {
        val localVariableConfig = mdrQrsMeasureVersionItemsGetRequestConfig(measure = measure, version = version)

        return request<Unit, QrsItems>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrQrsMeasureVersionItemsGet
     *
     * @param measure QRS Measure Identifier
     * @param version CDISC Library Product Version
     * @return RequestConfig
     */
    fun mdrQrsMeasureVersionItemsGetRequestConfig(measure: kotlin.String, version: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/qrs/{measure}/{version}/items".replace("{"+"measure"+"}", encodeURIComponent(measure.toString())).replace("{"+"version"+"}", encodeURIComponent(version.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/qrs/{measure}/{version}/items/{item}
     * 
     * Get QRS Item
     * @param measure QRS Measure Identifier
     * @param version CDISC Library Product Version
     * @param item QRS Measure Item Identifier
     * @return QrsItem
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrQrsMeasureVersionItemsItemGet(measure: kotlin.String, version: kotlin.String, item: kotlin.String) : QrsItem {
        val localVarResponse = mdrQrsMeasureVersionItemsItemGetWithHttpInfo(measure = measure, version = version, item = item)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QrsItem
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/qrs/{measure}/{version}/items/{item}
     * 
     * Get QRS Item
     * @param measure QRS Measure Identifier
     * @param version CDISC Library Product Version
     * @param item QRS Measure Item Identifier
     * @return ApiResponse<QrsItem?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrQrsMeasureVersionItemsItemGetWithHttpInfo(measure: kotlin.String, version: kotlin.String, item: kotlin.String) : ApiResponse<QrsItem?> {
        val localVariableConfig = mdrQrsMeasureVersionItemsItemGetRequestConfig(measure = measure, version = version, item = item)

        return request<Unit, QrsItem>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrQrsMeasureVersionItemsItemGet
     *
     * @param measure QRS Measure Identifier
     * @param version CDISC Library Product Version
     * @param item QRS Measure Item Identifier
     * @return RequestConfig
     */
    fun mdrQrsMeasureVersionItemsItemGetRequestConfig(measure: kotlin.String, version: kotlin.String, item: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/qrs/{measure}/{version}/items/{item}".replace("{"+"measure"+"}", encodeURIComponent(measure.toString())).replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"item"+"}", encodeURIComponent(item.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/qrs/{measure}/{version}/responsegroups
     * 
     * Get QRS Response Group List
     * @param measure QRS Measure Identifier
     * @param version CDISC Library Product Version
     * @return QrsResponsegroups
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrQrsMeasureVersionResponsegroupsGet(measure: kotlin.String, version: kotlin.String) : QrsResponsegroups {
        val localVarResponse = mdrQrsMeasureVersionResponsegroupsGetWithHttpInfo(measure = measure, version = version)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QrsResponsegroups
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/qrs/{measure}/{version}/responsegroups
     * 
     * Get QRS Response Group List
     * @param measure QRS Measure Identifier
     * @param version CDISC Library Product Version
     * @return ApiResponse<QrsResponsegroups?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrQrsMeasureVersionResponsegroupsGetWithHttpInfo(measure: kotlin.String, version: kotlin.String) : ApiResponse<QrsResponsegroups?> {
        val localVariableConfig = mdrQrsMeasureVersionResponsegroupsGetRequestConfig(measure = measure, version = version)

        return request<Unit, QrsResponsegroups>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrQrsMeasureVersionResponsegroupsGet
     *
     * @param measure QRS Measure Identifier
     * @param version CDISC Library Product Version
     * @return RequestConfig
     */
    fun mdrQrsMeasureVersionResponsegroupsGetRequestConfig(measure: kotlin.String, version: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/qrs/{measure}/{version}/responsegroups".replace("{"+"measure"+"}", encodeURIComponent(measure.toString())).replace("{"+"version"+"}", encodeURIComponent(version.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/qrs/{measure}/{version}/responsegroups/{responsegroup}
     * 
     * Get QRS Response Group
     * @param measure QRS Measure Identifier
     * @param version CDISC Library Product Version
     * @param responsegroup QRS Measure&#39;s Response Group Identifier
     * @return QrsResponsegroup
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrQrsMeasureVersionResponsegroupsResponsegroupGet(measure: kotlin.String, version: kotlin.String, responsegroup: kotlin.String) : QrsResponsegroup {
        val localVarResponse = mdrQrsMeasureVersionResponsegroupsResponsegroupGetWithHttpInfo(measure = measure, version = version, responsegroup = responsegroup)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as QrsResponsegroup
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/qrs/{measure}/{version}/responsegroups/{responsegroup}
     * 
     * Get QRS Response Group
     * @param measure QRS Measure Identifier
     * @param version CDISC Library Product Version
     * @param responsegroup QRS Measure&#39;s Response Group Identifier
     * @return ApiResponse<QrsResponsegroup?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrQrsMeasureVersionResponsegroupsResponsegroupGetWithHttpInfo(measure: kotlin.String, version: kotlin.String, responsegroup: kotlin.String) : ApiResponse<QrsResponsegroup?> {
        val localVariableConfig = mdrQrsMeasureVersionResponsegroupsResponsegroupGetRequestConfig(measure = measure, version = version, responsegroup = responsegroup)

        return request<Unit, QrsResponsegroup>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrQrsMeasureVersionResponsegroupsResponsegroupGet
     *
     * @param measure QRS Measure Identifier
     * @param version CDISC Library Product Version
     * @param responsegroup QRS Measure&#39;s Response Group Identifier
     * @return RequestConfig
     */
    fun mdrQrsMeasureVersionResponsegroupsResponsegroupGetRequestConfig(measure: kotlin.String, version: kotlin.String, responsegroup: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/qrs/{measure}/{version}/responsegroups/{responsegroup}".replace("{"+"measure"+"}", encodeURIComponent(measure.toString())).replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"responsegroup"+"}", encodeURIComponent(responsegroup.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}

/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultErrorResponse;
import org.openapitools.client.model.ExportSdtmigDatasetsTable;
import org.openapitools.client.model.ExportSdtmigVariablesTable;
import org.openapitools.client.model.ExportSdtmigWorkbook;
import org.openapitools.client.model.RootSdtmigDatasetVariable;
import org.openapitools.client.model.SdtmigClass;
import org.openapitools.client.model.SdtmigClassDatasets;
import org.openapitools.client.model.SdtmigClasses;
import org.openapitools.client.model.SdtmigDataset;
import org.openapitools.client.model.SdtmigDatasetVariable;
import org.openapitools.client.model.SdtmigDatasetVariables;
import org.openapitools.client.model.SdtmigDatasets;
import org.openapitools.client.model.SdtmigProduct;
import org.openapitools.client.model.XmlRootSdtmigDatasetVariable;
import org.openapitools.client.model.XmlSdtmigClass;
import org.openapitools.client.model.XmlSdtmigClassDatasets;
import org.openapitools.client.model.XmlSdtmigClasses;
import org.openapitools.client.model.XmlSdtmigDataset;
import org.openapitools.client.model.XmlSdtmigDatasetVariable;
import org.openapitools.client.model.XmlSdtmigDatasetVariables;
import org.openapitools.client.model.XmlSdtmigDatasets;
import org.openapitools.client.model.XmlSdtmigProduct;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SdtmImplementationGuideSdtmigApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SdtmImplementationGuideSdtmigApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SdtmImplementationGuideSdtmigApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for mdrRootSdtmigDatasetsDatasetVariablesVarGet
     * @param dataset SDTMIG Dataset Identifier (required)
     * @param var SDTMIG Variable Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrRootSdtmigDatasetsDatasetVariablesVarGetCall(@javax.annotation.Nonnull String dataset, @javax.annotation.Nonnull String var, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/root/sdtmig/datasets/{dataset}/variables/{var}"
            .replace("{" + "dataset" + "}", localVarApiClient.escapeString(dataset.toString()))
            .replace("{" + "var" + "}", localVarApiClient.escapeString(var.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrRootSdtmigDatasetsDatasetVariablesVarGetValidateBeforeCall(@javax.annotation.Nonnull String dataset, @javax.annotation.Nonnull String var, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataset' is set
        if (dataset == null) {
            throw new ApiException("Missing the required parameter 'dataset' when calling mdrRootSdtmigDatasetsDatasetVariablesVarGet(Async)");
        }

        // verify the required parameter 'var' is set
        if (var == null) {
            throw new ApiException("Missing the required parameter 'var' when calling mdrRootSdtmigDatasetsDatasetVariablesVarGet(Async)");
        }

        return mdrRootSdtmigDatasetsDatasetVariablesVarGetCall(dataset, var, _callback);

    }

    /**
     * 
     * Get Root SDTMIG Dataset Variable
     * @param dataset SDTMIG Dataset Identifier (required)
     * @param var SDTMIG Variable Identifier (required)
     * @return RootSdtmigDatasetVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public RootSdtmigDatasetVariable mdrRootSdtmigDatasetsDatasetVariablesVarGet(@javax.annotation.Nonnull String dataset, @javax.annotation.Nonnull String var) throws ApiException {
        ApiResponse<RootSdtmigDatasetVariable> localVarResp = mdrRootSdtmigDatasetsDatasetVariablesVarGetWithHttpInfo(dataset, var);
        return localVarResp.getData();
    }

    /**
     * 
     * Get Root SDTMIG Dataset Variable
     * @param dataset SDTMIG Dataset Identifier (required)
     * @param var SDTMIG Variable Identifier (required)
     * @return ApiResponse&lt;RootSdtmigDatasetVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RootSdtmigDatasetVariable> mdrRootSdtmigDatasetsDatasetVariablesVarGetWithHttpInfo(@javax.annotation.Nonnull String dataset, @javax.annotation.Nonnull String var) throws ApiException {
        okhttp3.Call localVarCall = mdrRootSdtmigDatasetsDatasetVariablesVarGetValidateBeforeCall(dataset, var, null);
        Type localVarReturnType = new TypeToken<RootSdtmigDatasetVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Root SDTMIG Dataset Variable
     * @param dataset SDTMIG Dataset Identifier (required)
     * @param var SDTMIG Variable Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrRootSdtmigDatasetsDatasetVariablesVarGetAsync(@javax.annotation.Nonnull String dataset, @javax.annotation.Nonnull String var, final ApiCallback<RootSdtmigDatasetVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrRootSdtmigDatasetsDatasetVariablesVarGetValidateBeforeCall(dataset, var, _callback);
        Type localVarReturnType = new TypeToken<RootSdtmigDatasetVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrSdtmigVersionClassesClassDatasetsGet
     * @param version CDISC Library Product Version (required)
     * @param propertyClass SDTMIG Class Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSdtmigVersionClassesClassDatasetsGetCall(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String propertyClass, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/sdtmig/{version}/classes/{class}/datasets"
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrSdtmigVersionClassesClassDatasetsGetValidateBeforeCall(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String propertyClass, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling mdrSdtmigVersionClassesClassDatasetsGet(Async)");
        }

        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling mdrSdtmigVersionClassesClassDatasetsGet(Async)");
        }

        return mdrSdtmigVersionClassesClassDatasetsGetCall(version, propertyClass, _callback);

    }

    /**
     * 
     * Get SDTMIG Class Dataset List
     * @param version CDISC Library Product Version (required)
     * @param propertyClass SDTMIG Class Identifier (required)
     * @return SdtmigClassDatasets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public SdtmigClassDatasets mdrSdtmigVersionClassesClassDatasetsGet(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String propertyClass) throws ApiException {
        ApiResponse<SdtmigClassDatasets> localVarResp = mdrSdtmigVersionClassesClassDatasetsGetWithHttpInfo(version, propertyClass);
        return localVarResp.getData();
    }

    /**
     * 
     * Get SDTMIG Class Dataset List
     * @param version CDISC Library Product Version (required)
     * @param propertyClass SDTMIG Class Identifier (required)
     * @return ApiResponse&lt;SdtmigClassDatasets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SdtmigClassDatasets> mdrSdtmigVersionClassesClassDatasetsGetWithHttpInfo(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String propertyClass) throws ApiException {
        okhttp3.Call localVarCall = mdrSdtmigVersionClassesClassDatasetsGetValidateBeforeCall(version, propertyClass, null);
        Type localVarReturnType = new TypeToken<SdtmigClassDatasets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get SDTMIG Class Dataset List
     * @param version CDISC Library Product Version (required)
     * @param propertyClass SDTMIG Class Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSdtmigVersionClassesClassDatasetsGetAsync(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String propertyClass, final ApiCallback<SdtmigClassDatasets> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrSdtmigVersionClassesClassDatasetsGetValidateBeforeCall(version, propertyClass, _callback);
        Type localVarReturnType = new TypeToken<SdtmigClassDatasets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrSdtmigVersionClassesClassGet
     * @param version CDISC Library Product Version (required)
     * @param propertyClass SDTMIG Class Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSdtmigVersionClassesClassGetCall(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String propertyClass, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/sdtmig/{version}/classes/{class}"
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrSdtmigVersionClassesClassGetValidateBeforeCall(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String propertyClass, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling mdrSdtmigVersionClassesClassGet(Async)");
        }

        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling mdrSdtmigVersionClassesClassGet(Async)");
        }

        return mdrSdtmigVersionClassesClassGetCall(version, propertyClass, _callback);

    }

    /**
     * 
     * Get SDTMIG Class
     * @param version CDISC Library Product Version (required)
     * @param propertyClass SDTMIG Class Identifier (required)
     * @return SdtmigClass
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public SdtmigClass mdrSdtmigVersionClassesClassGet(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String propertyClass) throws ApiException {
        ApiResponse<SdtmigClass> localVarResp = mdrSdtmigVersionClassesClassGetWithHttpInfo(version, propertyClass);
        return localVarResp.getData();
    }

    /**
     * 
     * Get SDTMIG Class
     * @param version CDISC Library Product Version (required)
     * @param propertyClass SDTMIG Class Identifier (required)
     * @return ApiResponse&lt;SdtmigClass&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SdtmigClass> mdrSdtmigVersionClassesClassGetWithHttpInfo(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String propertyClass) throws ApiException {
        okhttp3.Call localVarCall = mdrSdtmigVersionClassesClassGetValidateBeforeCall(version, propertyClass, null);
        Type localVarReturnType = new TypeToken<SdtmigClass>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get SDTMIG Class
     * @param version CDISC Library Product Version (required)
     * @param propertyClass SDTMIG Class Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSdtmigVersionClassesClassGetAsync(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String propertyClass, final ApiCallback<SdtmigClass> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrSdtmigVersionClassesClassGetValidateBeforeCall(version, propertyClass, _callback);
        Type localVarReturnType = new TypeToken<SdtmigClass>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrSdtmigVersionClassesGet
     * @param version CDISC Library Product Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSdtmigVersionClassesGetCall(@javax.annotation.Nonnull String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/sdtmig/{version}/classes"
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrSdtmigVersionClassesGetValidateBeforeCall(@javax.annotation.Nonnull String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling mdrSdtmigVersionClassesGet(Async)");
        }

        return mdrSdtmigVersionClassesGetCall(version, _callback);

    }

    /**
     * 
     * Get SDTMIG Class List
     * @param version CDISC Library Product Version (required)
     * @return SdtmigClasses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public SdtmigClasses mdrSdtmigVersionClassesGet(@javax.annotation.Nonnull String version) throws ApiException {
        ApiResponse<SdtmigClasses> localVarResp = mdrSdtmigVersionClassesGetWithHttpInfo(version);
        return localVarResp.getData();
    }

    /**
     * 
     * Get SDTMIG Class List
     * @param version CDISC Library Product Version (required)
     * @return ApiResponse&lt;SdtmigClasses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SdtmigClasses> mdrSdtmigVersionClassesGetWithHttpInfo(@javax.annotation.Nonnull String version) throws ApiException {
        okhttp3.Call localVarCall = mdrSdtmigVersionClassesGetValidateBeforeCall(version, null);
        Type localVarReturnType = new TypeToken<SdtmigClasses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get SDTMIG Class List
     * @param version CDISC Library Product Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSdtmigVersionClassesGetAsync(@javax.annotation.Nonnull String version, final ApiCallback<SdtmigClasses> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrSdtmigVersionClassesGetValidateBeforeCall(version, _callback);
        Type localVarReturnType = new TypeToken<SdtmigClasses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrSdtmigVersionDatasetsDatasetGet
     * @param version CDISC Library Product Version (required)
     * @param dataset SDTMIG Dataset Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSdtmigVersionDatasetsDatasetGetCall(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/sdtmig/{version}/datasets/{dataset}"
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "dataset" + "}", localVarApiClient.escapeString(dataset.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrSdtmigVersionDatasetsDatasetGetValidateBeforeCall(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling mdrSdtmigVersionDatasetsDatasetGet(Async)");
        }

        // verify the required parameter 'dataset' is set
        if (dataset == null) {
            throw new ApiException("Missing the required parameter 'dataset' when calling mdrSdtmigVersionDatasetsDatasetGet(Async)");
        }

        return mdrSdtmigVersionDatasetsDatasetGetCall(version, dataset, _callback);

    }

    /**
     * 
     * Get SDTMIG Dataset
     * @param version CDISC Library Product Version (required)
     * @param dataset SDTMIG Dataset Identifier (required)
     * @return SdtmigDataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public SdtmigDataset mdrSdtmigVersionDatasetsDatasetGet(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset) throws ApiException {
        ApiResponse<SdtmigDataset> localVarResp = mdrSdtmigVersionDatasetsDatasetGetWithHttpInfo(version, dataset);
        return localVarResp.getData();
    }

    /**
     * 
     * Get SDTMIG Dataset
     * @param version CDISC Library Product Version (required)
     * @param dataset SDTMIG Dataset Identifier (required)
     * @return ApiResponse&lt;SdtmigDataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SdtmigDataset> mdrSdtmigVersionDatasetsDatasetGetWithHttpInfo(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset) throws ApiException {
        okhttp3.Call localVarCall = mdrSdtmigVersionDatasetsDatasetGetValidateBeforeCall(version, dataset, null);
        Type localVarReturnType = new TypeToken<SdtmigDataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get SDTMIG Dataset
     * @param version CDISC Library Product Version (required)
     * @param dataset SDTMIG Dataset Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSdtmigVersionDatasetsDatasetGetAsync(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset, final ApiCallback<SdtmigDataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrSdtmigVersionDatasetsDatasetGetValidateBeforeCall(version, dataset, _callback);
        Type localVarReturnType = new TypeToken<SdtmigDataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrSdtmigVersionDatasetsDatasetVariablesGet
     * @param version CDISC Library Product Version (required)
     * @param dataset SDTMIG Dataset Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSdtmigVersionDatasetsDatasetVariablesGetCall(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/sdtmig/{version}/datasets/{dataset}/variables"
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "dataset" + "}", localVarApiClient.escapeString(dataset.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrSdtmigVersionDatasetsDatasetVariablesGetValidateBeforeCall(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling mdrSdtmigVersionDatasetsDatasetVariablesGet(Async)");
        }

        // verify the required parameter 'dataset' is set
        if (dataset == null) {
            throw new ApiException("Missing the required parameter 'dataset' when calling mdrSdtmigVersionDatasetsDatasetVariablesGet(Async)");
        }

        return mdrSdtmigVersionDatasetsDatasetVariablesGetCall(version, dataset, _callback);

    }

    /**
     * 
     * Get SDTMIG Dataset Variable List
     * @param version CDISC Library Product Version (required)
     * @param dataset SDTMIG Dataset Identifier (required)
     * @return SdtmigDatasetVariables
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public SdtmigDatasetVariables mdrSdtmigVersionDatasetsDatasetVariablesGet(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset) throws ApiException {
        ApiResponse<SdtmigDatasetVariables> localVarResp = mdrSdtmigVersionDatasetsDatasetVariablesGetWithHttpInfo(version, dataset);
        return localVarResp.getData();
    }

    /**
     * 
     * Get SDTMIG Dataset Variable List
     * @param version CDISC Library Product Version (required)
     * @param dataset SDTMIG Dataset Identifier (required)
     * @return ApiResponse&lt;SdtmigDatasetVariables&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SdtmigDatasetVariables> mdrSdtmigVersionDatasetsDatasetVariablesGetWithHttpInfo(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset) throws ApiException {
        okhttp3.Call localVarCall = mdrSdtmigVersionDatasetsDatasetVariablesGetValidateBeforeCall(version, dataset, null);
        Type localVarReturnType = new TypeToken<SdtmigDatasetVariables>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get SDTMIG Dataset Variable List
     * @param version CDISC Library Product Version (required)
     * @param dataset SDTMIG Dataset Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSdtmigVersionDatasetsDatasetVariablesGetAsync(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset, final ApiCallback<SdtmigDatasetVariables> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrSdtmigVersionDatasetsDatasetVariablesGetValidateBeforeCall(version, dataset, _callback);
        Type localVarReturnType = new TypeToken<SdtmigDatasetVariables>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrSdtmigVersionDatasetsDatasetVariablesVarGet
     * @param version CDISC Library Product Version (required)
     * @param dataset SDTMIG Dataset Identifier (required)
     * @param var SDTMIG Variable Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSdtmigVersionDatasetsDatasetVariablesVarGetCall(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset, @javax.annotation.Nonnull String var, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/sdtmig/{version}/datasets/{dataset}/variables/{var}"
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "dataset" + "}", localVarApiClient.escapeString(dataset.toString()))
            .replace("{" + "var" + "}", localVarApiClient.escapeString(var.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrSdtmigVersionDatasetsDatasetVariablesVarGetValidateBeforeCall(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset, @javax.annotation.Nonnull String var, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet(Async)");
        }

        // verify the required parameter 'dataset' is set
        if (dataset == null) {
            throw new ApiException("Missing the required parameter 'dataset' when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet(Async)");
        }

        // verify the required parameter 'var' is set
        if (var == null) {
            throw new ApiException("Missing the required parameter 'var' when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet(Async)");
        }

        return mdrSdtmigVersionDatasetsDatasetVariablesVarGetCall(version, dataset, var, _callback);

    }

    /**
     * 
     * Get SDTMIG Dataset Variable
     * @param version CDISC Library Product Version (required)
     * @param dataset SDTMIG Dataset Identifier (required)
     * @param var SDTMIG Variable Identifier (required)
     * @return SdtmigDatasetVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public SdtmigDatasetVariable mdrSdtmigVersionDatasetsDatasetVariablesVarGet(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset, @javax.annotation.Nonnull String var) throws ApiException {
        ApiResponse<SdtmigDatasetVariable> localVarResp = mdrSdtmigVersionDatasetsDatasetVariablesVarGetWithHttpInfo(version, dataset, var);
        return localVarResp.getData();
    }

    /**
     * 
     * Get SDTMIG Dataset Variable
     * @param version CDISC Library Product Version (required)
     * @param dataset SDTMIG Dataset Identifier (required)
     * @param var SDTMIG Variable Identifier (required)
     * @return ApiResponse&lt;SdtmigDatasetVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SdtmigDatasetVariable> mdrSdtmigVersionDatasetsDatasetVariablesVarGetWithHttpInfo(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset, @javax.annotation.Nonnull String var) throws ApiException {
        okhttp3.Call localVarCall = mdrSdtmigVersionDatasetsDatasetVariablesVarGetValidateBeforeCall(version, dataset, var, null);
        Type localVarReturnType = new TypeToken<SdtmigDatasetVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get SDTMIG Dataset Variable
     * @param version CDISC Library Product Version (required)
     * @param dataset SDTMIG Dataset Identifier (required)
     * @param var SDTMIG Variable Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSdtmigVersionDatasetsDatasetVariablesVarGetAsync(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset, @javax.annotation.Nonnull String var, final ApiCallback<SdtmigDatasetVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrSdtmigVersionDatasetsDatasetVariablesVarGetValidateBeforeCall(version, dataset, var, _callback);
        Type localVarReturnType = new TypeToken<SdtmigDatasetVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrSdtmigVersionDatasetsGet
     * @param version CDISC Library Product Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSdtmigVersionDatasetsGetCall(@javax.annotation.Nonnull String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/sdtmig/{version}/datasets"
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrSdtmigVersionDatasetsGetValidateBeforeCall(@javax.annotation.Nonnull String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling mdrSdtmigVersionDatasetsGet(Async)");
        }

        return mdrSdtmigVersionDatasetsGetCall(version, _callback);

    }

    /**
     * 
     * Get SDTMIG Dataset List
     * @param version CDISC Library Product Version (required)
     * @return SdtmigDatasets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public SdtmigDatasets mdrSdtmigVersionDatasetsGet(@javax.annotation.Nonnull String version) throws ApiException {
        ApiResponse<SdtmigDatasets> localVarResp = mdrSdtmigVersionDatasetsGetWithHttpInfo(version);
        return localVarResp.getData();
    }

    /**
     * 
     * Get SDTMIG Dataset List
     * @param version CDISC Library Product Version (required)
     * @return ApiResponse&lt;SdtmigDatasets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SdtmigDatasets> mdrSdtmigVersionDatasetsGetWithHttpInfo(@javax.annotation.Nonnull String version) throws ApiException {
        okhttp3.Call localVarCall = mdrSdtmigVersionDatasetsGetValidateBeforeCall(version, null);
        Type localVarReturnType = new TypeToken<SdtmigDatasets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get SDTMIG Dataset List
     * @param version CDISC Library Product Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSdtmigVersionDatasetsGetAsync(@javax.annotation.Nonnull String version, final ApiCallback<SdtmigDatasets> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrSdtmigVersionDatasetsGetValidateBeforeCall(version, _callback);
        Type localVarReturnType = new TypeToken<SdtmigDatasets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrSdtmigVersionGet
     * @param version CDISC Library Product Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSdtmigVersionGetCall(@javax.annotation.Nonnull String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/sdtmig/{version}"
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/csv",
            "application/vnd.ms-excel",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrSdtmigVersionGetValidateBeforeCall(@javax.annotation.Nonnull String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling mdrSdtmigVersionGet(Async)");
        }

        return mdrSdtmigVersionGetCall(version, _callback);

    }

    /**
     * 
     * Get SDTMIG product
     * @param version CDISC Library Product Version (required)
     * @return SdtmigProduct
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public SdtmigProduct mdrSdtmigVersionGet(@javax.annotation.Nonnull String version) throws ApiException {
        ApiResponse<SdtmigProduct> localVarResp = mdrSdtmigVersionGetWithHttpInfo(version);
        return localVarResp.getData();
    }

    /**
     * 
     * Get SDTMIG product
     * @param version CDISC Library Product Version (required)
     * @return ApiResponse&lt;SdtmigProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SdtmigProduct> mdrSdtmigVersionGetWithHttpInfo(@javax.annotation.Nonnull String version) throws ApiException {
        okhttp3.Call localVarCall = mdrSdtmigVersionGetValidateBeforeCall(version, null);
        Type localVarReturnType = new TypeToken<SdtmigProduct>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get SDTMIG product
     * @param version CDISC Library Product Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSdtmigVersionGetAsync(@javax.annotation.Nonnull String version, final ApiCallback<SdtmigProduct> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrSdtmigVersionGetValidateBeforeCall(version, _callback);
        Type localVarReturnType = new TypeToken<SdtmigProduct>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

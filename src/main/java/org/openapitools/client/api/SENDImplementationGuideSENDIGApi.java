/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.DefaultErrorResponse;
import org.openapitools.client.model.ExportSendigDatasetsTable;
import org.openapitools.client.model.ExportSendigVariablesTable;
import org.openapitools.client.model.ExportSendigWorkbook;
import org.openapitools.client.model.RootSendigDatasetVariable;
import org.openapitools.client.model.SendigClass;
import org.openapitools.client.model.SendigClassDatasets;
import org.openapitools.client.model.SendigClasses;
import org.openapitools.client.model.SendigDataset;
import org.openapitools.client.model.SendigDatasetVariable;
import org.openapitools.client.model.SendigDatasetVariables;
import org.openapitools.client.model.SendigDatasets;
import org.openapitools.client.model.SendigProduct;
import org.openapitools.client.model.XmlRootSendigDatasetVariable;
import org.openapitools.client.model.XmlSendigClass;
import org.openapitools.client.model.XmlSendigClassDatasets;
import org.openapitools.client.model.XmlSendigClasses;
import org.openapitools.client.model.XmlSendigDataset;
import org.openapitools.client.model.XmlSendigDatasetVariable;
import org.openapitools.client.model.XmlSendigDatasetVariables;
import org.openapitools.client.model.XmlSendigDatasets;
import org.openapitools.client.model.XmlSendigProduct;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class SENDImplementationGuideSENDIGApi {
  String basePath = "https://library.cdisc.org/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * Get Root SENDIG Dataset Variable
   * @param dataset SENDIG Dataset Identifier
   * @param var SENDIG Variable Identifier
   * @return RootSendigDatasetVariable
  */
  public RootSendigDatasetVariable mdrRootSendigDatasetsDatasetVariablesVarGet (String dataset, String var) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrRootSendigDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrRootSendigDatasetsDatasetVariablesVarGet"));
    }
    // verify the required parameter 'var' is set
    if (var == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'var' when calling mdrRootSendigDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'var' when calling mdrRootSendigDatasetsDatasetVariablesVarGet"));
    }

    // create path and map variables
    String path = "/mdr/root/sendig/datasets/{dataset}/variables/{var}".replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString())).replaceAll("\\{" + "var" + "\\}", apiInvoker.escapeString(var.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (RootSendigDatasetVariable) ApiInvoker.deserialize(localVarResponse, "", RootSendigDatasetVariable.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get Root SENDIG Dataset Variable
   * @param dataset SENDIG Dataset Identifier   * @param var SENDIG Variable Identifier
  */
  public void mdrRootSendigDatasetsDatasetVariablesVarGet (String dataset, String var, final Response.Listener<RootSendigDatasetVariable> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrRootSendigDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrRootSendigDatasetsDatasetVariablesVarGet"));
    }
    // verify the required parameter 'var' is set
    if (var == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'var' when calling mdrRootSendigDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'var' when calling mdrRootSendigDatasetsDatasetVariablesVarGet"));
    }

    // create path and map variables
    String path = "/mdr/root/sendig/datasets/{dataset}/variables/{var}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString())).replaceAll("\\{" + "var" + "\\}", apiInvoker.escapeString(var.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RootSendigDatasetVariable) ApiInvoker.deserialize(localVarResponse,  "", RootSendigDatasetVariable.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SENDIG Class Dataset List
   * @param version CDISC Library Product Version
   * @param _class SENDIG Class Identifier
   * @return SendigClassDatasets
  */
  public SendigClassDatasets mdrSendigVersionClassesClassDatasetsGet (String version, String _class) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSendigVersionClassesClassDatasetsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSendigVersionClassesClassDatasetsGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrSendigVersionClassesClassDatasetsGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrSendigVersionClassesClassDatasetsGet"));
    }

    // create path and map variables
    String path = "/mdr/sendig/{version}/classes/{class}/datasets".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SendigClassDatasets) ApiInvoker.deserialize(localVarResponse, "", SendigClassDatasets.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SENDIG Class Dataset List
   * @param version CDISC Library Product Version   * @param _class SENDIG Class Identifier
  */
  public void mdrSendigVersionClassesClassDatasetsGet (String version, String _class, final Response.Listener<SendigClassDatasets> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSendigVersionClassesClassDatasetsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSendigVersionClassesClassDatasetsGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrSendigVersionClassesClassDatasetsGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrSendigVersionClassesClassDatasetsGet"));
    }

    // create path and map variables
    String path = "/mdr/sendig/{version}/classes/{class}/datasets".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SendigClassDatasets) ApiInvoker.deserialize(localVarResponse,  "", SendigClassDatasets.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SENDIG Class
   * @param version CDISC Library Product Version
   * @param _class SENDIG Class Identifier
   * @return SendigClass
  */
  public SendigClass mdrSendigVersionClassesClassGet (String version, String _class) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSendigVersionClassesClassGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSendigVersionClassesClassGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrSendigVersionClassesClassGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrSendigVersionClassesClassGet"));
    }

    // create path and map variables
    String path = "/mdr/sendig/{version}/classes/{class}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SendigClass) ApiInvoker.deserialize(localVarResponse, "", SendigClass.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SENDIG Class
   * @param version CDISC Library Product Version   * @param _class SENDIG Class Identifier
  */
  public void mdrSendigVersionClassesClassGet (String version, String _class, final Response.Listener<SendigClass> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSendigVersionClassesClassGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSendigVersionClassesClassGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrSendigVersionClassesClassGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrSendigVersionClassesClassGet"));
    }

    // create path and map variables
    String path = "/mdr/sendig/{version}/classes/{class}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SendigClass) ApiInvoker.deserialize(localVarResponse,  "", SendigClass.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SENDIG Class List
   * @param version CDISC Library Product Version
   * @return SendigClasses
  */
  public SendigClasses mdrSendigVersionClassesGet (String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSendigVersionClassesGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSendigVersionClassesGet"));
    }

    // create path and map variables
    String path = "/mdr/sendig/{version}/classes".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SendigClasses) ApiInvoker.deserialize(localVarResponse, "", SendigClasses.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SENDIG Class List
   * @param version CDISC Library Product Version
  */
  public void mdrSendigVersionClassesGet (String version, final Response.Listener<SendigClasses> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSendigVersionClassesGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSendigVersionClassesGet"));
    }

    // create path and map variables
    String path = "/mdr/sendig/{version}/classes".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SendigClasses) ApiInvoker.deserialize(localVarResponse,  "", SendigClasses.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SENDIG Dataset
   * @param version CDISC Library Product Version
   * @param dataset SENDIG Class Identifier
   * @return SendigDataset
  */
  public SendigDataset mdrSendigVersionDatasetsDatasetGet (String version, String dataset) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSendigVersionDatasetsDatasetGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSendigVersionDatasetsDatasetGet"));
    }
    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrSendigVersionDatasetsDatasetGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrSendigVersionDatasetsDatasetGet"));
    }

    // create path and map variables
    String path = "/mdr/sendig/{version}/datasets/{dataset}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SendigDataset) ApiInvoker.deserialize(localVarResponse, "", SendigDataset.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SENDIG Dataset
   * @param version CDISC Library Product Version   * @param dataset SENDIG Class Identifier
  */
  public void mdrSendigVersionDatasetsDatasetGet (String version, String dataset, final Response.Listener<SendigDataset> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSendigVersionDatasetsDatasetGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSendigVersionDatasetsDatasetGet"));
    }
    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrSendigVersionDatasetsDatasetGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrSendigVersionDatasetsDatasetGet"));
    }

    // create path and map variables
    String path = "/mdr/sendig/{version}/datasets/{dataset}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SendigDataset) ApiInvoker.deserialize(localVarResponse,  "", SendigDataset.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SENDIG Dataset Variable List
   * @param version CDISC Library Product Version
   * @param dataset SENDIG Class Identifier
   * @return SendigDatasetVariables
  */
  public SendigDatasetVariables mdrSendigVersionDatasetsDatasetVariablesGet (String version, String dataset) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSendigVersionDatasetsDatasetVariablesGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSendigVersionDatasetsDatasetVariablesGet"));
    }
    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrSendigVersionDatasetsDatasetVariablesGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrSendigVersionDatasetsDatasetVariablesGet"));
    }

    // create path and map variables
    String path = "/mdr/sendig/{version}/datasets/{dataset}/variables".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SendigDatasetVariables) ApiInvoker.deserialize(localVarResponse, "", SendigDatasetVariables.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SENDIG Dataset Variable List
   * @param version CDISC Library Product Version   * @param dataset SENDIG Class Identifier
  */
  public void mdrSendigVersionDatasetsDatasetVariablesGet (String version, String dataset, final Response.Listener<SendigDatasetVariables> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSendigVersionDatasetsDatasetVariablesGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSendigVersionDatasetsDatasetVariablesGet"));
    }
    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrSendigVersionDatasetsDatasetVariablesGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrSendigVersionDatasetsDatasetVariablesGet"));
    }

    // create path and map variables
    String path = "/mdr/sendig/{version}/datasets/{dataset}/variables".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SendigDatasetVariables) ApiInvoker.deserialize(localVarResponse,  "", SendigDatasetVariables.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SENDIG Dataset Variable
   * @param version CDISC Library Product Version
   * @param dataset SENDIG Class Identifier
   * @param var SENDIG Variable Identifier
   * @return SendigDatasetVariable
  */
  public SendigDatasetVariable mdrSendigVersionDatasetsDatasetVariablesVarGet (String version, String dataset, String var) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSendigVersionDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSendigVersionDatasetsDatasetVariablesVarGet"));
    }
    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrSendigVersionDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrSendigVersionDatasetsDatasetVariablesVarGet"));
    }
    // verify the required parameter 'var' is set
    if (var == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'var' when calling mdrSendigVersionDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'var' when calling mdrSendigVersionDatasetsDatasetVariablesVarGet"));
    }

    // create path and map variables
    String path = "/mdr/sendig/{version}/datasets/{dataset}/variables/{var}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString())).replaceAll("\\{" + "var" + "\\}", apiInvoker.escapeString(var.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SendigDatasetVariable) ApiInvoker.deserialize(localVarResponse, "", SendigDatasetVariable.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SENDIG Dataset Variable
   * @param version CDISC Library Product Version   * @param dataset SENDIG Class Identifier   * @param var SENDIG Variable Identifier
  */
  public void mdrSendigVersionDatasetsDatasetVariablesVarGet (String version, String dataset, String var, final Response.Listener<SendigDatasetVariable> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSendigVersionDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSendigVersionDatasetsDatasetVariablesVarGet"));
    }
    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrSendigVersionDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrSendigVersionDatasetsDatasetVariablesVarGet"));
    }
    // verify the required parameter 'var' is set
    if (var == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'var' when calling mdrSendigVersionDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'var' when calling mdrSendigVersionDatasetsDatasetVariablesVarGet"));
    }

    // create path and map variables
    String path = "/mdr/sendig/{version}/datasets/{dataset}/variables/{var}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString())).replaceAll("\\{" + "var" + "\\}", apiInvoker.escapeString(var.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SendigDatasetVariable) ApiInvoker.deserialize(localVarResponse,  "", SendigDatasetVariable.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SENDIG Dataset List
   * @param version CDISC Library Product Version
   * @return SendigDatasets
  */
  public SendigDatasets mdrSendigVersionDatasetsGet (String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSendigVersionDatasetsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSendigVersionDatasetsGet"));
    }

    // create path and map variables
    String path = "/mdr/sendig/{version}/datasets".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SendigDatasets) ApiInvoker.deserialize(localVarResponse, "", SendigDatasets.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SENDIG Dataset List
   * @param version CDISC Library Product Version
  */
  public void mdrSendigVersionDatasetsGet (String version, final Response.Listener<SendigDatasets> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSendigVersionDatasetsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSendigVersionDatasetsGet"));
    }

    // create path and map variables
    String path = "/mdr/sendig/{version}/datasets".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SendigDatasets) ApiInvoker.deserialize(localVarResponse,  "", SendigDatasets.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SENDIG product
   * @param version CDISC Library Product Version
   * @return SendigProduct
  */
  public SendigProduct mdrSendigVersionGet (String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSendigVersionGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSendigVersionGet"));
    }

    // create path and map variables
    String path = "/mdr/sendig/{version}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SendigProduct) ApiInvoker.deserialize(localVarResponse, "", SendigProduct.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SENDIG product
   * @param version CDISC Library Product Version
  */
  public void mdrSendigVersionGet (String version, final Response.Listener<SendigProduct> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSendigVersionGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSendigVersionGet"));
    }

    // create path and map variables
    String path = "/mdr/sendig/{version}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SendigProduct) ApiInvoker.deserialize(localVarResponse,  "", SendigProduct.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}

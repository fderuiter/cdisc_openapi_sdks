/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.AdamDatastructure;
import org.openapitools.client.model.AdamDatastructureVariables;
import org.openapitools.client.model.AdamDatastructureVarsets;
import org.openapitools.client.model.AdamProduct;
import org.openapitools.client.model.AdamProductDatastructures;
import org.openapitools.client.model.AdamVariable;
import org.openapitools.client.model.AdamVarset;
import org.openapitools.client.model.DefaultErrorResponse;
import org.openapitools.client.model.ExportAdamDatastructuresTable;
import org.openapitools.client.model.ExportAdamVariablesTable;
import org.openapitools.client.model.ExportAdamWorkbook;
import org.openapitools.client.model.XmlAdamDatastructure;
import org.openapitools.client.model.XmlAdamDatastructureVariables;
import org.openapitools.client.model.XmlAdamDatastructureVarsets;
import org.openapitools.client.model.XmlAdamProduct;
import org.openapitools.client.model.XmlAdamProductDatastructures;
import org.openapitools.client.model.XmlAdamVariable;
import org.openapitools.client.model.XmlAdamVarset;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi {
  String basePath = "https://library.cdisc.org/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * Get ADaM Data Structure List
   * @param product CDISC Library Product
   * @return AdamProductDatastructures
  */
  public AdamProductDatastructures mdrAdamProductDatastructuresGet (String product) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'product' is set
    if (product == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'product' when calling mdrAdamProductDatastructuresGet",
        new ApiException(400, "Missing the required parameter 'product' when calling mdrAdamProductDatastructuresGet"));
    }

    // create path and map variables
    String path = "/mdr/adam/{product}/datastructures".replaceAll("\\{" + "product" + "\\}", apiInvoker.escapeString(product.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AdamProductDatastructures) ApiInvoker.deserialize(localVarResponse, "", AdamProductDatastructures.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get ADaM Data Structure List
   * @param product CDISC Library Product
  */
  public void mdrAdamProductDatastructuresGet (String product, final Response.Listener<AdamProductDatastructures> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'product' is set
    if (product == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'product' when calling mdrAdamProductDatastructuresGet",
        new ApiException(400, "Missing the required parameter 'product' when calling mdrAdamProductDatastructuresGet"));
    }

    // create path and map variables
    String path = "/mdr/adam/{product}/datastructures".replaceAll("\\{format\\}","json").replaceAll("\\{" + "product" + "\\}", apiInvoker.escapeString(product.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AdamProductDatastructures) ApiInvoker.deserialize(localVarResponse,  "", AdamProductDatastructures.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get ADaM Data Structure
   * @param product CDISC Library Product
   * @param structure Data structure Identifier
   * @return AdamDatastructure
  */
  public AdamDatastructure mdrAdamProductDatastructuresStructureGet (String product, String structure) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'product' is set
    if (product == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'product' when calling mdrAdamProductDatastructuresStructureGet",
        new ApiException(400, "Missing the required parameter 'product' when calling mdrAdamProductDatastructuresStructureGet"));
    }
    // verify the required parameter 'structure' is set
    if (structure == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'structure' when calling mdrAdamProductDatastructuresStructureGet",
        new ApiException(400, "Missing the required parameter 'structure' when calling mdrAdamProductDatastructuresStructureGet"));
    }

    // create path and map variables
    String path = "/mdr/adam/{product}/datastructures/{structure}".replaceAll("\\{" + "product" + "\\}", apiInvoker.escapeString(product.toString())).replaceAll("\\{" + "structure" + "\\}", apiInvoker.escapeString(structure.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AdamDatastructure) ApiInvoker.deserialize(localVarResponse, "", AdamDatastructure.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get ADaM Data Structure
   * @param product CDISC Library Product   * @param structure Data structure Identifier
  */
  public void mdrAdamProductDatastructuresStructureGet (String product, String structure, final Response.Listener<AdamDatastructure> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'product' is set
    if (product == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'product' when calling mdrAdamProductDatastructuresStructureGet",
        new ApiException(400, "Missing the required parameter 'product' when calling mdrAdamProductDatastructuresStructureGet"));
    }
    // verify the required parameter 'structure' is set
    if (structure == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'structure' when calling mdrAdamProductDatastructuresStructureGet",
        new ApiException(400, "Missing the required parameter 'structure' when calling mdrAdamProductDatastructuresStructureGet"));
    }

    // create path and map variables
    String path = "/mdr/adam/{product}/datastructures/{structure}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "product" + "\\}", apiInvoker.escapeString(product.toString())).replaceAll("\\{" + "structure" + "\\}", apiInvoker.escapeString(structure.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AdamDatastructure) ApiInvoker.deserialize(localVarResponse,  "", AdamDatastructure.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get ADaM Variable List
   * @param product CDISC Library Product
   * @param structure ADaM Data Structure Identifier
   * @return AdamDatastructureVariables
  */
  public AdamDatastructureVariables mdrAdamProductDatastructuresStructureVariablesGet (String product, String structure) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'product' is set
    if (product == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'product' when calling mdrAdamProductDatastructuresStructureVariablesGet",
        new ApiException(400, "Missing the required parameter 'product' when calling mdrAdamProductDatastructuresStructureVariablesGet"));
    }
    // verify the required parameter 'structure' is set
    if (structure == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'structure' when calling mdrAdamProductDatastructuresStructureVariablesGet",
        new ApiException(400, "Missing the required parameter 'structure' when calling mdrAdamProductDatastructuresStructureVariablesGet"));
    }

    // create path and map variables
    String path = "/mdr/adam/{product}/datastructures/{structure}/variables".replaceAll("\\{" + "product" + "\\}", apiInvoker.escapeString(product.toString())).replaceAll("\\{" + "structure" + "\\}", apiInvoker.escapeString(structure.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AdamDatastructureVariables) ApiInvoker.deserialize(localVarResponse, "", AdamDatastructureVariables.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get ADaM Variable List
   * @param product CDISC Library Product   * @param structure ADaM Data Structure Identifier
  */
  public void mdrAdamProductDatastructuresStructureVariablesGet (String product, String structure, final Response.Listener<AdamDatastructureVariables> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'product' is set
    if (product == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'product' when calling mdrAdamProductDatastructuresStructureVariablesGet",
        new ApiException(400, "Missing the required parameter 'product' when calling mdrAdamProductDatastructuresStructureVariablesGet"));
    }
    // verify the required parameter 'structure' is set
    if (structure == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'structure' when calling mdrAdamProductDatastructuresStructureVariablesGet",
        new ApiException(400, "Missing the required parameter 'structure' when calling mdrAdamProductDatastructuresStructureVariablesGet"));
    }

    // create path and map variables
    String path = "/mdr/adam/{product}/datastructures/{structure}/variables".replaceAll("\\{format\\}","json").replaceAll("\\{" + "product" + "\\}", apiInvoker.escapeString(product.toString())).replaceAll("\\{" + "structure" + "\\}", apiInvoker.escapeString(structure.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AdamDatastructureVariables) ApiInvoker.deserialize(localVarResponse,  "", AdamDatastructureVariables.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get ADaM Variable
   * @param product CDISC Library Product
   * @param structure ADaM Data Structure Identifier
   * @param var ADaM Variable Identifier
   * @return AdamVariable
  */
  public AdamVariable mdrAdamProductDatastructuresStructureVariablesVarGet (String product, String structure, String var) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'product' is set
    if (product == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'product' when calling mdrAdamProductDatastructuresStructureVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'product' when calling mdrAdamProductDatastructuresStructureVariablesVarGet"));
    }
    // verify the required parameter 'structure' is set
    if (structure == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'structure' when calling mdrAdamProductDatastructuresStructureVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'structure' when calling mdrAdamProductDatastructuresStructureVariablesVarGet"));
    }
    // verify the required parameter 'var' is set
    if (var == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'var' when calling mdrAdamProductDatastructuresStructureVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'var' when calling mdrAdamProductDatastructuresStructureVariablesVarGet"));
    }

    // create path and map variables
    String path = "/mdr/adam/{product}/datastructures/{structure}/variables/{var}".replaceAll("\\{" + "product" + "\\}", apiInvoker.escapeString(product.toString())).replaceAll("\\{" + "structure" + "\\}", apiInvoker.escapeString(structure.toString())).replaceAll("\\{" + "var" + "\\}", apiInvoker.escapeString(var.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AdamVariable) ApiInvoker.deserialize(localVarResponse, "", AdamVariable.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get ADaM Variable
   * @param product CDISC Library Product   * @param structure ADaM Data Structure Identifier   * @param var ADaM Variable Identifier
  */
  public void mdrAdamProductDatastructuresStructureVariablesVarGet (String product, String structure, String var, final Response.Listener<AdamVariable> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'product' is set
    if (product == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'product' when calling mdrAdamProductDatastructuresStructureVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'product' when calling mdrAdamProductDatastructuresStructureVariablesVarGet"));
    }
    // verify the required parameter 'structure' is set
    if (structure == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'structure' when calling mdrAdamProductDatastructuresStructureVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'structure' when calling mdrAdamProductDatastructuresStructureVariablesVarGet"));
    }
    // verify the required parameter 'var' is set
    if (var == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'var' when calling mdrAdamProductDatastructuresStructureVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'var' when calling mdrAdamProductDatastructuresStructureVariablesVarGet"));
    }

    // create path and map variables
    String path = "/mdr/adam/{product}/datastructures/{structure}/variables/{var}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "product" + "\\}", apiInvoker.escapeString(product.toString())).replaceAll("\\{" + "structure" + "\\}", apiInvoker.escapeString(structure.toString())).replaceAll("\\{" + "var" + "\\}", apiInvoker.escapeString(var.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AdamVariable) ApiInvoker.deserialize(localVarResponse,  "", AdamVariable.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get ADaM Variable Set List
   * @param product CDISC Library Product
   * @param structure ADaM Data Structure Identifier
   * @return AdamDatastructureVarsets
  */
  public AdamDatastructureVarsets mdrAdamProductDatastructuresStructureVarsetsGet (String product, String structure) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'product' is set
    if (product == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'product' when calling mdrAdamProductDatastructuresStructureVarsetsGet",
        new ApiException(400, "Missing the required parameter 'product' when calling mdrAdamProductDatastructuresStructureVarsetsGet"));
    }
    // verify the required parameter 'structure' is set
    if (structure == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'structure' when calling mdrAdamProductDatastructuresStructureVarsetsGet",
        new ApiException(400, "Missing the required parameter 'structure' when calling mdrAdamProductDatastructuresStructureVarsetsGet"));
    }

    // create path and map variables
    String path = "/mdr/adam/{product}/datastructures/{structure}/varsets".replaceAll("\\{" + "product" + "\\}", apiInvoker.escapeString(product.toString())).replaceAll("\\{" + "structure" + "\\}", apiInvoker.escapeString(structure.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AdamDatastructureVarsets) ApiInvoker.deserialize(localVarResponse, "", AdamDatastructureVarsets.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get ADaM Variable Set List
   * @param product CDISC Library Product   * @param structure ADaM Data Structure Identifier
  */
  public void mdrAdamProductDatastructuresStructureVarsetsGet (String product, String structure, final Response.Listener<AdamDatastructureVarsets> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'product' is set
    if (product == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'product' when calling mdrAdamProductDatastructuresStructureVarsetsGet",
        new ApiException(400, "Missing the required parameter 'product' when calling mdrAdamProductDatastructuresStructureVarsetsGet"));
    }
    // verify the required parameter 'structure' is set
    if (structure == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'structure' when calling mdrAdamProductDatastructuresStructureVarsetsGet",
        new ApiException(400, "Missing the required parameter 'structure' when calling mdrAdamProductDatastructuresStructureVarsetsGet"));
    }

    // create path and map variables
    String path = "/mdr/adam/{product}/datastructures/{structure}/varsets".replaceAll("\\{format\\}","json").replaceAll("\\{" + "product" + "\\}", apiInvoker.escapeString(product.toString())).replaceAll("\\{" + "structure" + "\\}", apiInvoker.escapeString(structure.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AdamDatastructureVarsets) ApiInvoker.deserialize(localVarResponse,  "", AdamDatastructureVarsets.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get ADaM Variable Set
   * @param product CDISC Library Product
   * @param structure ADaM Data Structure Identifier
   * @param varset ADaM Variable Set Identifier
   * @return AdamVarset
  */
  public AdamVarset mdrAdamProductDatastructuresStructureVarsetsVarsetGet (String product, String structure, String varset) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'product' is set
    if (product == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'product' when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet",
        new ApiException(400, "Missing the required parameter 'product' when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet"));
    }
    // verify the required parameter 'structure' is set
    if (structure == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'structure' when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet",
        new ApiException(400, "Missing the required parameter 'structure' when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet"));
    }
    // verify the required parameter 'varset' is set
    if (varset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'varset' when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet",
        new ApiException(400, "Missing the required parameter 'varset' when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet"));
    }

    // create path and map variables
    String path = "/mdr/adam/{product}/datastructures/{structure}/varsets/{varset}".replaceAll("\\{" + "product" + "\\}", apiInvoker.escapeString(product.toString())).replaceAll("\\{" + "structure" + "\\}", apiInvoker.escapeString(structure.toString())).replaceAll("\\{" + "varset" + "\\}", apiInvoker.escapeString(varset.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AdamVarset) ApiInvoker.deserialize(localVarResponse, "", AdamVarset.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get ADaM Variable Set
   * @param product CDISC Library Product   * @param structure ADaM Data Structure Identifier   * @param varset ADaM Variable Set Identifier
  */
  public void mdrAdamProductDatastructuresStructureVarsetsVarsetGet (String product, String structure, String varset, final Response.Listener<AdamVarset> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'product' is set
    if (product == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'product' when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet",
        new ApiException(400, "Missing the required parameter 'product' when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet"));
    }
    // verify the required parameter 'structure' is set
    if (structure == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'structure' when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet",
        new ApiException(400, "Missing the required parameter 'structure' when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet"));
    }
    // verify the required parameter 'varset' is set
    if (varset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'varset' when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet",
        new ApiException(400, "Missing the required parameter 'varset' when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet"));
    }

    // create path and map variables
    String path = "/mdr/adam/{product}/datastructures/{structure}/varsets/{varset}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "product" + "\\}", apiInvoker.escapeString(product.toString())).replaceAll("\\{" + "structure" + "\\}", apiInvoker.escapeString(structure.toString())).replaceAll("\\{" + "varset" + "\\}", apiInvoker.escapeString(varset.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AdamVarset) ApiInvoker.deserialize(localVarResponse,  "", AdamVarset.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get ADaM Product
   * @param product CDISC Library Product
   * @return AdamProduct
  */
  public AdamProduct mdrAdamProductGet (String product) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'product' is set
    if (product == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'product' when calling mdrAdamProductGet",
        new ApiException(400, "Missing the required parameter 'product' when calling mdrAdamProductGet"));
    }

    // create path and map variables
    String path = "/mdr/adam/{product}".replaceAll("\\{" + "product" + "\\}", apiInvoker.escapeString(product.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AdamProduct) ApiInvoker.deserialize(localVarResponse, "", AdamProduct.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get ADaM Product
   * @param product CDISC Library Product
  */
  public void mdrAdamProductGet (String product, final Response.Listener<AdamProduct> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'product' is set
    if (product == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'product' when calling mdrAdamProductGet",
        new ApiException(400, "Missing the required parameter 'product' when calling mdrAdamProductGet"));
    }

    // create path and map variables
    String path = "/mdr/adam/{product}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "product" + "\\}", apiInvoker.escapeString(product.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AdamProduct) ApiInvoker.deserialize(localVarResponse,  "", AdamProduct.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}

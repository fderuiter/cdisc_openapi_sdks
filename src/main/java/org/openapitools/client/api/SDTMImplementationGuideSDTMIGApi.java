/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.DefaultErrorResponse;
import org.openapitools.client.model.ExportSdtmigDatasetsTable;
import org.openapitools.client.model.ExportSdtmigVariablesTable;
import org.openapitools.client.model.ExportSdtmigWorkbook;
import org.openapitools.client.model.RootSdtmigDatasetVariable;
import org.openapitools.client.model.SdtmigClass;
import org.openapitools.client.model.SdtmigClassDatasets;
import org.openapitools.client.model.SdtmigClasses;
import org.openapitools.client.model.SdtmigDataset;
import org.openapitools.client.model.SdtmigDatasetVariable;
import org.openapitools.client.model.SdtmigDatasetVariables;
import org.openapitools.client.model.SdtmigDatasets;
import org.openapitools.client.model.SdtmigProduct;
import org.openapitools.client.model.XmlRootSdtmigDatasetVariable;
import org.openapitools.client.model.XmlSdtmigClass;
import org.openapitools.client.model.XmlSdtmigClassDatasets;
import org.openapitools.client.model.XmlSdtmigClasses;
import org.openapitools.client.model.XmlSdtmigDataset;
import org.openapitools.client.model.XmlSdtmigDatasetVariable;
import org.openapitools.client.model.XmlSdtmigDatasetVariables;
import org.openapitools.client.model.XmlSdtmigDatasets;
import org.openapitools.client.model.XmlSdtmigProduct;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class SDTMImplementationGuideSDTMIGApi {
  String basePath = "https://library.cdisc.org/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * Get Root SDTMIG Dataset Variable
   * @param dataset SDTMIG Dataset Identifier
   * @param var SDTMIG Variable Identifier
   * @return RootSdtmigDatasetVariable
  */
  public RootSdtmigDatasetVariable mdrRootSdtmigDatasetsDatasetVariablesVarGet (String dataset, String var) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrRootSdtmigDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrRootSdtmigDatasetsDatasetVariablesVarGet"));
    }
    // verify the required parameter 'var' is set
    if (var == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'var' when calling mdrRootSdtmigDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'var' when calling mdrRootSdtmigDatasetsDatasetVariablesVarGet"));
    }

    // create path and map variables
    String path = "/mdr/root/sdtmig/datasets/{dataset}/variables/{var}".replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString())).replaceAll("\\{" + "var" + "\\}", apiInvoker.escapeString(var.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (RootSdtmigDatasetVariable) ApiInvoker.deserialize(localVarResponse, "", RootSdtmigDatasetVariable.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get Root SDTMIG Dataset Variable
   * @param dataset SDTMIG Dataset Identifier   * @param var SDTMIG Variable Identifier
  */
  public void mdrRootSdtmigDatasetsDatasetVariablesVarGet (String dataset, String var, final Response.Listener<RootSdtmigDatasetVariable> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrRootSdtmigDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrRootSdtmigDatasetsDatasetVariablesVarGet"));
    }
    // verify the required parameter 'var' is set
    if (var == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'var' when calling mdrRootSdtmigDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'var' when calling mdrRootSdtmigDatasetsDatasetVariablesVarGet"));
    }

    // create path and map variables
    String path = "/mdr/root/sdtmig/datasets/{dataset}/variables/{var}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString())).replaceAll("\\{" + "var" + "\\}", apiInvoker.escapeString(var.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RootSdtmigDatasetVariable) ApiInvoker.deserialize(localVarResponse,  "", RootSdtmigDatasetVariable.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SDTMIG Class Dataset List
   * @param version CDISC Library Product Version
   * @param _class SDTMIG Class Identifier
   * @return SdtmigClassDatasets
  */
  public SdtmigClassDatasets mdrSdtmigVersionClassesClassDatasetsGet (String version, String _class) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmigVersionClassesClassDatasetsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmigVersionClassesClassDatasetsGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrSdtmigVersionClassesClassDatasetsGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrSdtmigVersionClassesClassDatasetsGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtmig/{version}/classes/{class}/datasets".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SdtmigClassDatasets) ApiInvoker.deserialize(localVarResponse, "", SdtmigClassDatasets.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SDTMIG Class Dataset List
   * @param version CDISC Library Product Version   * @param _class SDTMIG Class Identifier
  */
  public void mdrSdtmigVersionClassesClassDatasetsGet (String version, String _class, final Response.Listener<SdtmigClassDatasets> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmigVersionClassesClassDatasetsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmigVersionClassesClassDatasetsGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrSdtmigVersionClassesClassDatasetsGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrSdtmigVersionClassesClassDatasetsGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtmig/{version}/classes/{class}/datasets".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SdtmigClassDatasets) ApiInvoker.deserialize(localVarResponse,  "", SdtmigClassDatasets.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SDTMIG Class
   * @param version CDISC Library Product Version
   * @param _class SDTMIG Class Identifier
   * @return SdtmigClass
  */
  public SdtmigClass mdrSdtmigVersionClassesClassGet (String version, String _class) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmigVersionClassesClassGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmigVersionClassesClassGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrSdtmigVersionClassesClassGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrSdtmigVersionClassesClassGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtmig/{version}/classes/{class}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SdtmigClass) ApiInvoker.deserialize(localVarResponse, "", SdtmigClass.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SDTMIG Class
   * @param version CDISC Library Product Version   * @param _class SDTMIG Class Identifier
  */
  public void mdrSdtmigVersionClassesClassGet (String version, String _class, final Response.Listener<SdtmigClass> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmigVersionClassesClassGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmigVersionClassesClassGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrSdtmigVersionClassesClassGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrSdtmigVersionClassesClassGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtmig/{version}/classes/{class}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SdtmigClass) ApiInvoker.deserialize(localVarResponse,  "", SdtmigClass.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SDTMIG Class List
   * @param version CDISC Library Product Version
   * @return SdtmigClasses
  */
  public SdtmigClasses mdrSdtmigVersionClassesGet (String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmigVersionClassesGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmigVersionClassesGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtmig/{version}/classes".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SdtmigClasses) ApiInvoker.deserialize(localVarResponse, "", SdtmigClasses.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SDTMIG Class List
   * @param version CDISC Library Product Version
  */
  public void mdrSdtmigVersionClassesGet (String version, final Response.Listener<SdtmigClasses> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmigVersionClassesGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmigVersionClassesGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtmig/{version}/classes".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SdtmigClasses) ApiInvoker.deserialize(localVarResponse,  "", SdtmigClasses.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SDTMIG Dataset
   * @param version CDISC Library Product Version
   * @param dataset SDTMIG Dataset Identifier
   * @return SdtmigDataset
  */
  public SdtmigDataset mdrSdtmigVersionDatasetsDatasetGet (String version, String dataset) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmigVersionDatasetsDatasetGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmigVersionDatasetsDatasetGet"));
    }
    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrSdtmigVersionDatasetsDatasetGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrSdtmigVersionDatasetsDatasetGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtmig/{version}/datasets/{dataset}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SdtmigDataset) ApiInvoker.deserialize(localVarResponse, "", SdtmigDataset.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SDTMIG Dataset
   * @param version CDISC Library Product Version   * @param dataset SDTMIG Dataset Identifier
  */
  public void mdrSdtmigVersionDatasetsDatasetGet (String version, String dataset, final Response.Listener<SdtmigDataset> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmigVersionDatasetsDatasetGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmigVersionDatasetsDatasetGet"));
    }
    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrSdtmigVersionDatasetsDatasetGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrSdtmigVersionDatasetsDatasetGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtmig/{version}/datasets/{dataset}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SdtmigDataset) ApiInvoker.deserialize(localVarResponse,  "", SdtmigDataset.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SDTMIG Dataset Variable List
   * @param version CDISC Library Product Version
   * @param dataset SDTMIG Dataset Identifier
   * @return SdtmigDatasetVariables
  */
  public SdtmigDatasetVariables mdrSdtmigVersionDatasetsDatasetVariablesGet (String version, String dataset) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmigVersionDatasetsDatasetVariablesGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmigVersionDatasetsDatasetVariablesGet"));
    }
    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrSdtmigVersionDatasetsDatasetVariablesGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrSdtmigVersionDatasetsDatasetVariablesGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtmig/{version}/datasets/{dataset}/variables".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SdtmigDatasetVariables) ApiInvoker.deserialize(localVarResponse, "", SdtmigDatasetVariables.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SDTMIG Dataset Variable List
   * @param version CDISC Library Product Version   * @param dataset SDTMIG Dataset Identifier
  */
  public void mdrSdtmigVersionDatasetsDatasetVariablesGet (String version, String dataset, final Response.Listener<SdtmigDatasetVariables> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmigVersionDatasetsDatasetVariablesGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmigVersionDatasetsDatasetVariablesGet"));
    }
    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrSdtmigVersionDatasetsDatasetVariablesGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrSdtmigVersionDatasetsDatasetVariablesGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtmig/{version}/datasets/{dataset}/variables".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SdtmigDatasetVariables) ApiInvoker.deserialize(localVarResponse,  "", SdtmigDatasetVariables.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SDTMIG Dataset Variable
   * @param version CDISC Library Product Version
   * @param dataset SDTMIG Dataset Identifier
   * @param var SDTMIG Variable Identifier
   * @return SdtmigDatasetVariable
  */
  public SdtmigDatasetVariable mdrSdtmigVersionDatasetsDatasetVariablesVarGet (String version, String dataset, String var) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet"));
    }
    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet"));
    }
    // verify the required parameter 'var' is set
    if (var == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'var' when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'var' when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtmig/{version}/datasets/{dataset}/variables/{var}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString())).replaceAll("\\{" + "var" + "\\}", apiInvoker.escapeString(var.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SdtmigDatasetVariable) ApiInvoker.deserialize(localVarResponse, "", SdtmigDatasetVariable.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SDTMIG Dataset Variable
   * @param version CDISC Library Product Version   * @param dataset SDTMIG Dataset Identifier   * @param var SDTMIG Variable Identifier
  */
  public void mdrSdtmigVersionDatasetsDatasetVariablesVarGet (String version, String dataset, String var, final Response.Listener<SdtmigDatasetVariable> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet"));
    }
    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet"));
    }
    // verify the required parameter 'var' is set
    if (var == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'var' when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'var' when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtmig/{version}/datasets/{dataset}/variables/{var}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString())).replaceAll("\\{" + "var" + "\\}", apiInvoker.escapeString(var.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SdtmigDatasetVariable) ApiInvoker.deserialize(localVarResponse,  "", SdtmigDatasetVariable.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SDTMIG Dataset List
   * @param version CDISC Library Product Version
   * @return SdtmigDatasets
  */
  public SdtmigDatasets mdrSdtmigVersionDatasetsGet (String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmigVersionDatasetsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmigVersionDatasetsGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtmig/{version}/datasets".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SdtmigDatasets) ApiInvoker.deserialize(localVarResponse, "", SdtmigDatasets.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SDTMIG Dataset List
   * @param version CDISC Library Product Version
  */
  public void mdrSdtmigVersionDatasetsGet (String version, final Response.Listener<SdtmigDatasets> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmigVersionDatasetsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmigVersionDatasetsGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtmig/{version}/datasets".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SdtmigDatasets) ApiInvoker.deserialize(localVarResponse,  "", SdtmigDatasets.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SDTMIG product
   * @param version CDISC Library Product Version
   * @return SdtmigProduct
  */
  public SdtmigProduct mdrSdtmigVersionGet (String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmigVersionGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmigVersionGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtmig/{version}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SdtmigProduct) ApiInvoker.deserialize(localVarResponse, "", SdtmigProduct.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SDTMIG product
   * @param version CDISC Library Product Version
  */
  public void mdrSdtmigVersionGet (String version, final Response.Listener<SdtmigProduct> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmigVersionGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmigVersionGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtmig/{version}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SdtmigProduct) ApiInvoker.deserialize(localVarResponse,  "", SdtmigProduct.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}

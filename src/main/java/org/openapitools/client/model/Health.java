/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Health
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-22T20:17:16.173989497Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class Health {
  public static final String SERIALIZED_NAME_HEALTHY = "healthy";
  @SerializedName(SERIALIZED_NAME_HEALTHY)
  @javax.annotation.Nullable
  private Boolean healthy;

  public static final String SERIALIZED_NAME_LDAP_AUTHENTICATION_HEALTHY = "ldapAuthenticationHealthy";
  @SerializedName(SERIALIZED_NAME_LDAP_AUTHENTICATION_HEALTHY)
  @javax.annotation.Nullable
  private Boolean ldapAuthenticationHealthy;

  public static final String SERIALIZED_NAME_LDAP_AUTHORIZATION_HEALTHY = "ldapAuthorizationHealthy";
  @SerializedName(SERIALIZED_NAME_LDAP_AUTHORIZATION_HEALTHY)
  @javax.annotation.Nullable
  private Boolean ldapAuthorizationHealthy;

  public static final String SERIALIZED_NAME_DATABASE_HEALTHY = "databaseHealthy";
  @SerializedName(SERIALIZED_NAME_DATABASE_HEALTHY)
  @javax.annotation.Nullable
  private Boolean databaseHealthy;

  public static final String SERIALIZED_NAME_ES_HEALTHY = "esHealthy";
  @SerializedName(SERIALIZED_NAME_ES_HEALTHY)
  @javax.annotation.Nullable
  private Boolean esHealthy;

  public Health() {
  }

  public Health healthy(@javax.annotation.Nullable Boolean healthy) {
    this.healthy = healthy;
    return this;
  }

  /**
   * Get healthy
   * @return healthy
   */
  @javax.annotation.Nullable
  public Boolean getHealthy() {
    return healthy;
  }

  public void setHealthy(@javax.annotation.Nullable Boolean healthy) {
    this.healthy = healthy;
  }


  public Health ldapAuthenticationHealthy(@javax.annotation.Nullable Boolean ldapAuthenticationHealthy) {
    this.ldapAuthenticationHealthy = ldapAuthenticationHealthy;
    return this;
  }

  /**
   * Get ldapAuthenticationHealthy
   * @return ldapAuthenticationHealthy
   */
  @javax.annotation.Nullable
  public Boolean getLdapAuthenticationHealthy() {
    return ldapAuthenticationHealthy;
  }

  public void setLdapAuthenticationHealthy(@javax.annotation.Nullable Boolean ldapAuthenticationHealthy) {
    this.ldapAuthenticationHealthy = ldapAuthenticationHealthy;
  }


  public Health ldapAuthorizationHealthy(@javax.annotation.Nullable Boolean ldapAuthorizationHealthy) {
    this.ldapAuthorizationHealthy = ldapAuthorizationHealthy;
    return this;
  }

  /**
   * Get ldapAuthorizationHealthy
   * @return ldapAuthorizationHealthy
   */
  @javax.annotation.Nullable
  public Boolean getLdapAuthorizationHealthy() {
    return ldapAuthorizationHealthy;
  }

  public void setLdapAuthorizationHealthy(@javax.annotation.Nullable Boolean ldapAuthorizationHealthy) {
    this.ldapAuthorizationHealthy = ldapAuthorizationHealthy;
  }


  public Health databaseHealthy(@javax.annotation.Nullable Boolean databaseHealthy) {
    this.databaseHealthy = databaseHealthy;
    return this;
  }

  /**
   * Get databaseHealthy
   * @return databaseHealthy
   */
  @javax.annotation.Nullable
  public Boolean getDatabaseHealthy() {
    return databaseHealthy;
  }

  public void setDatabaseHealthy(@javax.annotation.Nullable Boolean databaseHealthy) {
    this.databaseHealthy = databaseHealthy;
  }


  public Health esHealthy(@javax.annotation.Nullable Boolean esHealthy) {
    this.esHealthy = esHealthy;
    return this;
  }

  /**
   * Get esHealthy
   * @return esHealthy
   */
  @javax.annotation.Nullable
  public Boolean getEsHealthy() {
    return esHealthy;
  }

  public void setEsHealthy(@javax.annotation.Nullable Boolean esHealthy) {
    this.esHealthy = esHealthy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Health health = (Health) o;
    return Objects.equals(this.healthy, health.healthy) &&
        Objects.equals(this.ldapAuthenticationHealthy, health.ldapAuthenticationHealthy) &&
        Objects.equals(this.ldapAuthorizationHealthy, health.ldapAuthorizationHealthy) &&
        Objects.equals(this.databaseHealthy, health.databaseHealthy) &&
        Objects.equals(this.esHealthy, health.esHealthy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(healthy, ldapAuthenticationHealthy, ldapAuthorizationHealthy, databaseHealthy, esHealthy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Health {\n");
    sb.append("    healthy: ").append(toIndentedString(healthy)).append("\n");
    sb.append("    ldapAuthenticationHealthy: ").append(toIndentedString(ldapAuthenticationHealthy)).append("\n");
    sb.append("    ldapAuthorizationHealthy: ").append(toIndentedString(ldapAuthorizationHealthy)).append("\n");
    sb.append("    databaseHealthy: ").append(toIndentedString(databaseHealthy)).append("\n");
    sb.append("    esHealthy: ").append(toIndentedString(esHealthy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("healthy", "ldapAuthenticationHealthy", "ldapAuthorizationHealthy", "databaseHealthy", "esHealthy"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Health
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Health.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Health is not found in the empty JSON string", Health.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Health.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Health` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Health.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Health' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Health> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Health.class));

       return (TypeAdapter<T>) new TypeAdapter<Health>() {
           @Override
           public void write(JsonWriter out, Health value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Health read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Health given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Health
   * @throws IOException if the JSON string is invalid with respect to Health
   */
  public static Health fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Health.class);
  }

  /**
   * Convert an instance of Health to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


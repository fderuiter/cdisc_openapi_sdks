/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.QrsResponsegroup;
import org.openapitools.client.model.RootCtTermRef;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QrsItemLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-22T20:17:16.173989497Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class QrsItemLinks {
  public static final String SERIALIZED_NAME_QRS_ITEM_T_E_S_T = "qrsItemTEST";
  @SerializedName(SERIALIZED_NAME_QRS_ITEM_T_E_S_T)
  @javax.annotation.Nullable
  private RootCtTermRef qrsItemTEST;

  public static final String SERIALIZED_NAME_QRS_ITEM_T_E_S_T_C_D = "qrsItemTESTCD";
  @SerializedName(SERIALIZED_NAME_QRS_ITEM_T_E_S_T_C_D)
  @javax.annotation.Nullable
  private RootCtTermRef qrsItemTESTCD;

  public static final String SERIALIZED_NAME_QRS_ITEM_E_V_A_L = "qrsItemEVAL";
  @SerializedName(SERIALIZED_NAME_QRS_ITEM_E_V_A_L)
  @javax.annotation.Nullable
  private RootCtTermRef qrsItemEVAL;

  public static final String SERIALIZED_NAME_QRS_ITEM_S_C_A_T = "qrsItemSCAT";
  @SerializedName(SERIALIZED_NAME_QRS_ITEM_S_C_A_T)
  @javax.annotation.Nullable
  private RootCtTermRef qrsItemSCAT;

  public static final String SERIALIZED_NAME_RESPONSEGROUP = "responsegroup";
  @SerializedName(SERIALIZED_NAME_RESPONSEGROUP)
  @javax.annotation.Nullable
  private QrsResponsegroup responsegroup;

  public QrsItemLinks() {
  }

  public QrsItemLinks qrsItemTEST(@javax.annotation.Nullable RootCtTermRef qrsItemTEST) {
    this.qrsItemTEST = qrsItemTEST;
    return this;
  }

  /**
   * Get qrsItemTEST
   * @return qrsItemTEST
   */
  @javax.annotation.Nullable
  public RootCtTermRef getQrsItemTEST() {
    return qrsItemTEST;
  }

  public void setQrsItemTEST(@javax.annotation.Nullable RootCtTermRef qrsItemTEST) {
    this.qrsItemTEST = qrsItemTEST;
  }


  public QrsItemLinks qrsItemTESTCD(@javax.annotation.Nullable RootCtTermRef qrsItemTESTCD) {
    this.qrsItemTESTCD = qrsItemTESTCD;
    return this;
  }

  /**
   * Get qrsItemTESTCD
   * @return qrsItemTESTCD
   */
  @javax.annotation.Nullable
  public RootCtTermRef getQrsItemTESTCD() {
    return qrsItemTESTCD;
  }

  public void setQrsItemTESTCD(@javax.annotation.Nullable RootCtTermRef qrsItemTESTCD) {
    this.qrsItemTESTCD = qrsItemTESTCD;
  }


  public QrsItemLinks qrsItemEVAL(@javax.annotation.Nullable RootCtTermRef qrsItemEVAL) {
    this.qrsItemEVAL = qrsItemEVAL;
    return this;
  }

  /**
   * Get qrsItemEVAL
   * @return qrsItemEVAL
   */
  @javax.annotation.Nullable
  public RootCtTermRef getQrsItemEVAL() {
    return qrsItemEVAL;
  }

  public void setQrsItemEVAL(@javax.annotation.Nullable RootCtTermRef qrsItemEVAL) {
    this.qrsItemEVAL = qrsItemEVAL;
  }


  public QrsItemLinks qrsItemSCAT(@javax.annotation.Nullable RootCtTermRef qrsItemSCAT) {
    this.qrsItemSCAT = qrsItemSCAT;
    return this;
  }

  /**
   * Get qrsItemSCAT
   * @return qrsItemSCAT
   */
  @javax.annotation.Nullable
  public RootCtTermRef getQrsItemSCAT() {
    return qrsItemSCAT;
  }

  public void setQrsItemSCAT(@javax.annotation.Nullable RootCtTermRef qrsItemSCAT) {
    this.qrsItemSCAT = qrsItemSCAT;
  }


  public QrsItemLinks responsegroup(@javax.annotation.Nullable QrsResponsegroup responsegroup) {
    this.responsegroup = responsegroup;
    return this;
  }

  /**
   * Get responsegroup
   * @return responsegroup
   */
  @javax.annotation.Nullable
  public QrsResponsegroup getResponsegroup() {
    return responsegroup;
  }

  public void setResponsegroup(@javax.annotation.Nullable QrsResponsegroup responsegroup) {
    this.responsegroup = responsegroup;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QrsItemLinks qrsItemLinks = (QrsItemLinks) o;
    return Objects.equals(this.qrsItemTEST, qrsItemLinks.qrsItemTEST) &&
        Objects.equals(this.qrsItemTESTCD, qrsItemLinks.qrsItemTESTCD) &&
        Objects.equals(this.qrsItemEVAL, qrsItemLinks.qrsItemEVAL) &&
        Objects.equals(this.qrsItemSCAT, qrsItemLinks.qrsItemSCAT) &&
        Objects.equals(this.responsegroup, qrsItemLinks.responsegroup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(qrsItemTEST, qrsItemTESTCD, qrsItemEVAL, qrsItemSCAT, responsegroup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QrsItemLinks {\n");
    sb.append("    qrsItemTEST: ").append(toIndentedString(qrsItemTEST)).append("\n");
    sb.append("    qrsItemTESTCD: ").append(toIndentedString(qrsItemTESTCD)).append("\n");
    sb.append("    qrsItemEVAL: ").append(toIndentedString(qrsItemEVAL)).append("\n");
    sb.append("    qrsItemSCAT: ").append(toIndentedString(qrsItemSCAT)).append("\n");
    sb.append("    responsegroup: ").append(toIndentedString(responsegroup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("qrsItemTEST", "qrsItemTESTCD", "qrsItemEVAL", "qrsItemSCAT", "responsegroup"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QrsItemLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QrsItemLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QrsItemLinks is not found in the empty JSON string", QrsItemLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QrsItemLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QrsItemLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `qrsItemTEST`
      if (jsonObj.get("qrsItemTEST") != null && !jsonObj.get("qrsItemTEST").isJsonNull()) {
        RootCtTermRef.validateJsonElement(jsonObj.get("qrsItemTEST"));
      }
      // validate the optional field `qrsItemTESTCD`
      if (jsonObj.get("qrsItemTESTCD") != null && !jsonObj.get("qrsItemTESTCD").isJsonNull()) {
        RootCtTermRef.validateJsonElement(jsonObj.get("qrsItemTESTCD"));
      }
      // validate the optional field `qrsItemEVAL`
      if (jsonObj.get("qrsItemEVAL") != null && !jsonObj.get("qrsItemEVAL").isJsonNull()) {
        RootCtTermRef.validateJsonElement(jsonObj.get("qrsItemEVAL"));
      }
      // validate the optional field `qrsItemSCAT`
      if (jsonObj.get("qrsItemSCAT") != null && !jsonObj.get("qrsItemSCAT").isJsonNull()) {
        RootCtTermRef.validateJsonElement(jsonObj.get("qrsItemSCAT"));
      }
      // validate the optional field `responsegroup`
      if (jsonObj.get("responsegroup") != null && !jsonObj.get("responsegroup").isJsonNull()) {
        QrsResponsegroup.validateJsonElement(jsonObj.get("responsegroup"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QrsItemLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QrsItemLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QrsItemLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QrsItemLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<QrsItemLinks>() {
           @Override
           public void write(JsonWriter out, QrsItemLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QrsItemLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QrsItemLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QrsItemLinks
   * @throws IOException if the JSON string is invalid with respect to QrsItemLinks
   */
  public static QrsItemLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QrsItemLinks.class);
  }

  /**
   * Convert an instance of QrsItemLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


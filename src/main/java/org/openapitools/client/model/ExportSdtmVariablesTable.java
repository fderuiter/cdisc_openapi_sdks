/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExportSdtmClassVariablesRow;
import org.openapitools.client.model.ExportSdtmDatasetVariablesRow;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExportSdtmVariablesTable
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-22T20:17:16.173989497Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class ExportSdtmVariablesTable {
  public static final String SERIALIZED_NAME_CLASS_VARIABLES = "class-variables";
  @SerializedName(SERIALIZED_NAME_CLASS_VARIABLES)
  @javax.annotation.Nullable
  private List<ExportSdtmClassVariablesRow> classVariables = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATASET_VARIABLES = "dataset-variables";
  @SerializedName(SERIALIZED_NAME_DATASET_VARIABLES)
  @javax.annotation.Nullable
  private List<ExportSdtmDatasetVariablesRow> datasetVariables = new ArrayList<>();

  public ExportSdtmVariablesTable() {
  }

  public ExportSdtmVariablesTable classVariables(@javax.annotation.Nullable List<ExportSdtmClassVariablesRow> classVariables) {
    this.classVariables = classVariables;
    return this;
  }

  public ExportSdtmVariablesTable addClassVariablesItem(ExportSdtmClassVariablesRow classVariablesItem) {
    if (this.classVariables == null) {
      this.classVariables = new ArrayList<>();
    }
    this.classVariables.add(classVariablesItem);
    return this;
  }

  /**
   * Get classVariables
   * @return classVariables
   */
  @javax.annotation.Nullable
  public List<ExportSdtmClassVariablesRow> getClassVariables() {
    return classVariables;
  }

  public void setClassVariables(@javax.annotation.Nullable List<ExportSdtmClassVariablesRow> classVariables) {
    this.classVariables = classVariables;
  }


  public ExportSdtmVariablesTable datasetVariables(@javax.annotation.Nullable List<ExportSdtmDatasetVariablesRow> datasetVariables) {
    this.datasetVariables = datasetVariables;
    return this;
  }

  public ExportSdtmVariablesTable addDatasetVariablesItem(ExportSdtmDatasetVariablesRow datasetVariablesItem) {
    if (this.datasetVariables == null) {
      this.datasetVariables = new ArrayList<>();
    }
    this.datasetVariables.add(datasetVariablesItem);
    return this;
  }

  /**
   * Get datasetVariables
   * @return datasetVariables
   */
  @javax.annotation.Nullable
  public List<ExportSdtmDatasetVariablesRow> getDatasetVariables() {
    return datasetVariables;
  }

  public void setDatasetVariables(@javax.annotation.Nullable List<ExportSdtmDatasetVariablesRow> datasetVariables) {
    this.datasetVariables = datasetVariables;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportSdtmVariablesTable exportSdtmVariablesTable = (ExportSdtmVariablesTable) o;
    return Objects.equals(this.classVariables, exportSdtmVariablesTable.classVariables) &&
        Objects.equals(this.datasetVariables, exportSdtmVariablesTable.datasetVariables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classVariables, datasetVariables);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportSdtmVariablesTable {\n");
    sb.append("    classVariables: ").append(toIndentedString(classVariables)).append("\n");
    sb.append("    datasetVariables: ").append(toIndentedString(datasetVariables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("class-variables", "dataset-variables"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportSdtmVariablesTable
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportSdtmVariablesTable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportSdtmVariablesTable is not found in the empty JSON string", ExportSdtmVariablesTable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportSdtmVariablesTable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportSdtmVariablesTable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("class-variables") != null && !jsonObj.get("class-variables").isJsonNull()) {
        JsonArray jsonArrayclassVariables = jsonObj.getAsJsonArray("class-variables");
        if (jsonArrayclassVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("class-variables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `class-variables` to be an array in the JSON string but got `%s`", jsonObj.get("class-variables").toString()));
          }

          // validate the optional field `class-variables` (array)
          for (int i = 0; i < jsonArrayclassVariables.size(); i++) {
            ExportSdtmClassVariablesRow.validateJsonElement(jsonArrayclassVariables.get(i));
          };
        }
      }
      if (jsonObj.get("dataset-variables") != null && !jsonObj.get("dataset-variables").isJsonNull()) {
        JsonArray jsonArraydatasetVariables = jsonObj.getAsJsonArray("dataset-variables");
        if (jsonArraydatasetVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dataset-variables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dataset-variables` to be an array in the JSON string but got `%s`", jsonObj.get("dataset-variables").toString()));
          }

          // validate the optional field `dataset-variables` (array)
          for (int i = 0; i < jsonArraydatasetVariables.size(); i++) {
            ExportSdtmDatasetVariablesRow.validateJsonElement(jsonArraydatasetVariables.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportSdtmVariablesTable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportSdtmVariablesTable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportSdtmVariablesTable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportSdtmVariablesTable.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportSdtmVariablesTable>() {
           @Override
           public void write(JsonWriter out, ExportSdtmVariablesTable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportSdtmVariablesTable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportSdtmVariablesTable given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportSdtmVariablesTable
   * @throws IOException if the JSON string is invalid with respect to ExportSdtmVariablesTable
   */
  public static ExportSdtmVariablesTable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportSdtmVariablesTable.class);
  }

  /**
   * Convert an instance of ExportSdtmVariablesTable to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


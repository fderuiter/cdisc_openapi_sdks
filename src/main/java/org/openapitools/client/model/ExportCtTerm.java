/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExportCtTerm
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-22T20:17:16.173989497Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class ExportCtTerm {
  public static final String SERIALIZED_NAME_BUNDLE1 = "bundle-1";
  @SerializedName(SERIALIZED_NAME_BUNDLE1)
  @javax.annotation.Nullable
  private String bundle1;

  public static final String SERIALIZED_NAME_CD_I_S_C_SYNONYM_S = "CDISC Synonym(s)";
  @SerializedName(SERIALIZED_NAME_CD_I_S_C_SYNONYM_S)
  @javax.annotation.Nullable
  private List<String> cdISCSynonymS = new ArrayList<>();

  public static final String SERIALIZED_NAME_BUNDLE2 = "bundle-2";
  @SerializedName(SERIALIZED_NAME_BUNDLE2)
  @javax.annotation.Nullable
  private String bundle2;

  public ExportCtTerm() {
  }

  public ExportCtTerm bundle1(@javax.annotation.Nullable String bundle1) {
    this.bundle1 = bundle1;
    return this;
  }

  /**
   * Get bundle1
   * @return bundle1
   */
  @javax.annotation.Nullable
  public String getBundle1() {
    return bundle1;
  }

  public void setBundle1(@javax.annotation.Nullable String bundle1) {
    this.bundle1 = bundle1;
  }


  public ExportCtTerm cdISCSynonymS(@javax.annotation.Nullable List<String> cdISCSynonymS) {
    this.cdISCSynonymS = cdISCSynonymS;
    return this;
  }

  public ExportCtTerm addCdISCSynonymSItem(String cdISCSynonymSItem) {
    if (this.cdISCSynonymS == null) {
      this.cdISCSynonymS = new ArrayList<>();
    }
    this.cdISCSynonymS.add(cdISCSynonymSItem);
    return this;
  }

  /**
   * Get cdISCSynonymS
   * @return cdISCSynonymS
   */
  @javax.annotation.Nullable
  public List<String> getCdISCSynonymS() {
    return cdISCSynonymS;
  }

  public void setCdISCSynonymS(@javax.annotation.Nullable List<String> cdISCSynonymS) {
    this.cdISCSynonymS = cdISCSynonymS;
  }


  public ExportCtTerm bundle2(@javax.annotation.Nullable String bundle2) {
    this.bundle2 = bundle2;
    return this;
  }

  /**
   * Get bundle2
   * @return bundle2
   */
  @javax.annotation.Nullable
  public String getBundle2() {
    return bundle2;
  }

  public void setBundle2(@javax.annotation.Nullable String bundle2) {
    this.bundle2 = bundle2;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportCtTerm exportCtTerm = (ExportCtTerm) o;
    return Objects.equals(this.bundle1, exportCtTerm.bundle1) &&
        Objects.equals(this.cdISCSynonymS, exportCtTerm.cdISCSynonymS) &&
        Objects.equals(this.bundle2, exportCtTerm.bundle2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bundle1, cdISCSynonymS, bundle2);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportCtTerm {\n");
    sb.append("    bundle1: ").append(toIndentedString(bundle1)).append("\n");
    sb.append("    cdISCSynonymS: ").append(toIndentedString(cdISCSynonymS)).append("\n");
    sb.append("    bundle2: ").append(toIndentedString(bundle2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("bundle-1", "CDISC Synonym(s)", "bundle-2"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportCtTerm
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportCtTerm.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportCtTerm is not found in the empty JSON string", ExportCtTerm.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportCtTerm.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportCtTerm` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bundle-1") != null && !jsonObj.get("bundle-1").isJsonNull()) && !jsonObj.get("bundle-1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bundle-1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bundle-1").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("CDISC Synonym(s)") != null && !jsonObj.get("CDISC Synonym(s)").isJsonNull() && !jsonObj.get("CDISC Synonym(s)").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CDISC Synonym(s)` to be an array in the JSON string but got `%s`", jsonObj.get("CDISC Synonym(s)").toString()));
      }
      if ((jsonObj.get("bundle-2") != null && !jsonObj.get("bundle-2").isJsonNull()) && !jsonObj.get("bundle-2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bundle-2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bundle-2").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportCtTerm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportCtTerm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportCtTerm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportCtTerm.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportCtTerm>() {
           @Override
           public void write(JsonWriter out, ExportCtTerm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportCtTerm read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportCtTerm given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportCtTerm
   * @throws IOException if the JSON string is invalid with respect to ExportCtTerm
   */
  public static ExportCtTerm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportCtTerm.class);
  }

  /**
   * Convert an instance of ExportCtTerm to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExportCdashDomainVariablesRow
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-22T20:17:16.173989497Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class ExportCdashDomainVariablesRow {
  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nullable
  private String version;

  public static final String SERIALIZED_NAME_PROPERTY_CLASS = "Class";
  @SerializedName(SERIALIZED_NAME_PROPERTY_CLASS)
  @javax.annotation.Nullable
  private String propertyClass;

  public static final String SERIALIZED_NAME_DOMAIN = "Domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  @javax.annotation.Nullable
  private String domain;

  public static final String SERIALIZED_NAME_VARIABLE_ORDER = "Variable Order";
  @SerializedName(SERIALIZED_NAME_VARIABLE_ORDER)
  @javax.annotation.Nullable
  private String variableOrder;

  public static final String SERIALIZED_NAME_CD_A_S_H_VARIABLE = "CDASH Variable";
  @SerializedName(SERIALIZED_NAME_CD_A_S_H_VARIABLE)
  @javax.annotation.Nullable
  private String cdASHVariable;

  public static final String SERIALIZED_NAME_CD_A_S_H_VARIABLE_LABEL = "CDASH Variable Label";
  @SerializedName(SERIALIZED_NAME_CD_A_S_H_VARIABLE_LABEL)
  @javax.annotation.Nullable
  private String cdASHVariableLabel;

  public static final String SERIALIZED_NAME_DR_A_F_T_C_D_A_S_H_DEFINITION = "DRAFT CDASH Definition";
  @SerializedName(SERIALIZED_NAME_DR_A_F_T_C_D_A_S_H_DEFINITION)
  @javax.annotation.Nullable
  private String drAFTCDASHDefinition;

  public static final String SERIALIZED_NAME_DOMAIN_SPECIFIC = "Domain Specific";
  @SerializedName(SERIALIZED_NAME_DOMAIN_SPECIFIC)
  @javax.annotation.Nullable
  private String domainSpecific;

  public static final String SERIALIZED_NAME_QUESTION_TEXT = "Question Text";
  @SerializedName(SERIALIZED_NAME_QUESTION_TEXT)
  @javax.annotation.Nullable
  private String questionText;

  public static final String SERIALIZED_NAME_PROMPT = "Prompt";
  @SerializedName(SERIALIZED_NAME_PROMPT)
  @javax.annotation.Nullable
  private String prompt;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_SD_T_M_TARGET = "SDTM Target";
  @SerializedName(SERIALIZED_NAME_SD_T_M_TARGET)
  @javax.annotation.Nullable
  private List<String> sdTMTarget = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAPPING_INSTRUCTIONS = "Mapping Instructions";
  @SerializedName(SERIALIZED_NAME_MAPPING_INSTRUCTIONS)
  @javax.annotation.Nullable
  private String mappingInstructions;

  public static final String SERIALIZED_NAME_CONTROLLED_TERMINOLOGY_CODELIST_NAME = "Controlled Terminology Codelist Name";
  @SerializedName(SERIALIZED_NAME_CONTROLLED_TERMINOLOGY_CODELIST_NAME)
  @javax.annotation.Nullable
  private String controlledTerminologyCodelistName;

  public static final String SERIALIZED_NAME_IMPLEMENTATION_NOTES = "Implementation Notes";
  @SerializedName(SERIALIZED_NAME_IMPLEMENTATION_NOTES)
  @javax.annotation.Nullable
  private String implementationNotes;

  public ExportCdashDomainVariablesRow() {
  }

  public ExportCdashDomainVariablesRow version(@javax.annotation.Nullable String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nullable String version) {
    this.version = version;
  }


  public ExportCdashDomainVariablesRow propertyClass(@javax.annotation.Nullable String propertyClass) {
    this.propertyClass = propertyClass;
    return this;
  }

  /**
   * Get propertyClass
   * @return propertyClass
   */
  @javax.annotation.Nullable
  public String getPropertyClass() {
    return propertyClass;
  }

  public void setPropertyClass(@javax.annotation.Nullable String propertyClass) {
    this.propertyClass = propertyClass;
  }


  public ExportCdashDomainVariablesRow domain(@javax.annotation.Nullable String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(@javax.annotation.Nullable String domain) {
    this.domain = domain;
  }


  public ExportCdashDomainVariablesRow variableOrder(@javax.annotation.Nullable String variableOrder) {
    this.variableOrder = variableOrder;
    return this;
  }

  /**
   * Get variableOrder
   * @return variableOrder
   */
  @javax.annotation.Nullable
  public String getVariableOrder() {
    return variableOrder;
  }

  public void setVariableOrder(@javax.annotation.Nullable String variableOrder) {
    this.variableOrder = variableOrder;
  }


  public ExportCdashDomainVariablesRow cdASHVariable(@javax.annotation.Nullable String cdASHVariable) {
    this.cdASHVariable = cdASHVariable;
    return this;
  }

  /**
   * Get cdASHVariable
   * @return cdASHVariable
   */
  @javax.annotation.Nullable
  public String getCdASHVariable() {
    return cdASHVariable;
  }

  public void setCdASHVariable(@javax.annotation.Nullable String cdASHVariable) {
    this.cdASHVariable = cdASHVariable;
  }


  public ExportCdashDomainVariablesRow cdASHVariableLabel(@javax.annotation.Nullable String cdASHVariableLabel) {
    this.cdASHVariableLabel = cdASHVariableLabel;
    return this;
  }

  /**
   * Get cdASHVariableLabel
   * @return cdASHVariableLabel
   */
  @javax.annotation.Nullable
  public String getCdASHVariableLabel() {
    return cdASHVariableLabel;
  }

  public void setCdASHVariableLabel(@javax.annotation.Nullable String cdASHVariableLabel) {
    this.cdASHVariableLabel = cdASHVariableLabel;
  }


  public ExportCdashDomainVariablesRow drAFTCDASHDefinition(@javax.annotation.Nullable String drAFTCDASHDefinition) {
    this.drAFTCDASHDefinition = drAFTCDASHDefinition;
    return this;
  }

  /**
   * Get drAFTCDASHDefinition
   * @return drAFTCDASHDefinition
   */
  @javax.annotation.Nullable
  public String getDrAFTCDASHDefinition() {
    return drAFTCDASHDefinition;
  }

  public void setDrAFTCDASHDefinition(@javax.annotation.Nullable String drAFTCDASHDefinition) {
    this.drAFTCDASHDefinition = drAFTCDASHDefinition;
  }


  public ExportCdashDomainVariablesRow domainSpecific(@javax.annotation.Nullable String domainSpecific) {
    this.domainSpecific = domainSpecific;
    return this;
  }

  /**
   * Get domainSpecific
   * @return domainSpecific
   */
  @javax.annotation.Nullable
  public String getDomainSpecific() {
    return domainSpecific;
  }

  public void setDomainSpecific(@javax.annotation.Nullable String domainSpecific) {
    this.domainSpecific = domainSpecific;
  }


  public ExportCdashDomainVariablesRow questionText(@javax.annotation.Nullable String questionText) {
    this.questionText = questionText;
    return this;
  }

  /**
   * Get questionText
   * @return questionText
   */
  @javax.annotation.Nullable
  public String getQuestionText() {
    return questionText;
  }

  public void setQuestionText(@javax.annotation.Nullable String questionText) {
    this.questionText = questionText;
  }


  public ExportCdashDomainVariablesRow prompt(@javax.annotation.Nullable String prompt) {
    this.prompt = prompt;
    return this;
  }

  /**
   * Get prompt
   * @return prompt
   */
  @javax.annotation.Nullable
  public String getPrompt() {
    return prompt;
  }

  public void setPrompt(@javax.annotation.Nullable String prompt) {
    this.prompt = prompt;
  }


  public ExportCdashDomainVariablesRow type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public ExportCdashDomainVariablesRow sdTMTarget(@javax.annotation.Nullable List<String> sdTMTarget) {
    this.sdTMTarget = sdTMTarget;
    return this;
  }

  public ExportCdashDomainVariablesRow addSdTMTargetItem(String sdTMTargetItem) {
    if (this.sdTMTarget == null) {
      this.sdTMTarget = new ArrayList<>();
    }
    this.sdTMTarget.add(sdTMTargetItem);
    return this;
  }

  /**
   * Get sdTMTarget
   * @return sdTMTarget
   */
  @javax.annotation.Nullable
  public List<String> getSdTMTarget() {
    return sdTMTarget;
  }

  public void setSdTMTarget(@javax.annotation.Nullable List<String> sdTMTarget) {
    this.sdTMTarget = sdTMTarget;
  }


  public ExportCdashDomainVariablesRow mappingInstructions(@javax.annotation.Nullable String mappingInstructions) {
    this.mappingInstructions = mappingInstructions;
    return this;
  }

  /**
   * Get mappingInstructions
   * @return mappingInstructions
   */
  @javax.annotation.Nullable
  public String getMappingInstructions() {
    return mappingInstructions;
  }

  public void setMappingInstructions(@javax.annotation.Nullable String mappingInstructions) {
    this.mappingInstructions = mappingInstructions;
  }


  public ExportCdashDomainVariablesRow controlledTerminologyCodelistName(@javax.annotation.Nullable String controlledTerminologyCodelistName) {
    this.controlledTerminologyCodelistName = controlledTerminologyCodelistName;
    return this;
  }

  /**
   * Get controlledTerminologyCodelistName
   * @return controlledTerminologyCodelistName
   */
  @javax.annotation.Nullable
  public String getControlledTerminologyCodelistName() {
    return controlledTerminologyCodelistName;
  }

  public void setControlledTerminologyCodelistName(@javax.annotation.Nullable String controlledTerminologyCodelistName) {
    this.controlledTerminologyCodelistName = controlledTerminologyCodelistName;
  }


  public ExportCdashDomainVariablesRow implementationNotes(@javax.annotation.Nullable String implementationNotes) {
    this.implementationNotes = implementationNotes;
    return this;
  }

  /**
   * Get implementationNotes
   * @return implementationNotes
   */
  @javax.annotation.Nullable
  public String getImplementationNotes() {
    return implementationNotes;
  }

  public void setImplementationNotes(@javax.annotation.Nullable String implementationNotes) {
    this.implementationNotes = implementationNotes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportCdashDomainVariablesRow exportCdashDomainVariablesRow = (ExportCdashDomainVariablesRow) o;
    return Objects.equals(this.version, exportCdashDomainVariablesRow.version) &&
        Objects.equals(this.propertyClass, exportCdashDomainVariablesRow.propertyClass) &&
        Objects.equals(this.domain, exportCdashDomainVariablesRow.domain) &&
        Objects.equals(this.variableOrder, exportCdashDomainVariablesRow.variableOrder) &&
        Objects.equals(this.cdASHVariable, exportCdashDomainVariablesRow.cdASHVariable) &&
        Objects.equals(this.cdASHVariableLabel, exportCdashDomainVariablesRow.cdASHVariableLabel) &&
        Objects.equals(this.drAFTCDASHDefinition, exportCdashDomainVariablesRow.drAFTCDASHDefinition) &&
        Objects.equals(this.domainSpecific, exportCdashDomainVariablesRow.domainSpecific) &&
        Objects.equals(this.questionText, exportCdashDomainVariablesRow.questionText) &&
        Objects.equals(this.prompt, exportCdashDomainVariablesRow.prompt) &&
        Objects.equals(this.type, exportCdashDomainVariablesRow.type) &&
        Objects.equals(this.sdTMTarget, exportCdashDomainVariablesRow.sdTMTarget) &&
        Objects.equals(this.mappingInstructions, exportCdashDomainVariablesRow.mappingInstructions) &&
        Objects.equals(this.controlledTerminologyCodelistName, exportCdashDomainVariablesRow.controlledTerminologyCodelistName) &&
        Objects.equals(this.implementationNotes, exportCdashDomainVariablesRow.implementationNotes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, propertyClass, domain, variableOrder, cdASHVariable, cdASHVariableLabel, drAFTCDASHDefinition, domainSpecific, questionText, prompt, type, sdTMTarget, mappingInstructions, controlledTerminologyCodelistName, implementationNotes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportCdashDomainVariablesRow {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    variableOrder: ").append(toIndentedString(variableOrder)).append("\n");
    sb.append("    cdASHVariable: ").append(toIndentedString(cdASHVariable)).append("\n");
    sb.append("    cdASHVariableLabel: ").append(toIndentedString(cdASHVariableLabel)).append("\n");
    sb.append("    drAFTCDASHDefinition: ").append(toIndentedString(drAFTCDASHDefinition)).append("\n");
    sb.append("    domainSpecific: ").append(toIndentedString(domainSpecific)).append("\n");
    sb.append("    questionText: ").append(toIndentedString(questionText)).append("\n");
    sb.append("    prompt: ").append(toIndentedString(prompt)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    sdTMTarget: ").append(toIndentedString(sdTMTarget)).append("\n");
    sb.append("    mappingInstructions: ").append(toIndentedString(mappingInstructions)).append("\n");
    sb.append("    controlledTerminologyCodelistName: ").append(toIndentedString(controlledTerminologyCodelistName)).append("\n");
    sb.append("    implementationNotes: ").append(toIndentedString(implementationNotes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Version", "Class", "Domain", "Variable Order", "CDASH Variable", "CDASH Variable Label", "DRAFT CDASH Definition", "Domain Specific", "Question Text", "Prompt", "Type", "SDTM Target", "Mapping Instructions", "Controlled Terminology Codelist Name", "Implementation Notes"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportCdashDomainVariablesRow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportCdashDomainVariablesRow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportCdashDomainVariablesRow is not found in the empty JSON string", ExportCdashDomainVariablesRow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportCdashDomainVariablesRow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportCdashDomainVariablesRow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) && !jsonObj.get("Version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
      }
      if ((jsonObj.get("Class") != null && !jsonObj.get("Class").isJsonNull()) && !jsonObj.get("Class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Class").toString()));
      }
      if ((jsonObj.get("Domain") != null && !jsonObj.get("Domain").isJsonNull()) && !jsonObj.get("Domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Domain").toString()));
      }
      if ((jsonObj.get("Variable Order") != null && !jsonObj.get("Variable Order").isJsonNull()) && !jsonObj.get("Variable Order").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Variable Order` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Variable Order").toString()));
      }
      if ((jsonObj.get("CDASH Variable") != null && !jsonObj.get("CDASH Variable").isJsonNull()) && !jsonObj.get("CDASH Variable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CDASH Variable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CDASH Variable").toString()));
      }
      if ((jsonObj.get("CDASH Variable Label") != null && !jsonObj.get("CDASH Variable Label").isJsonNull()) && !jsonObj.get("CDASH Variable Label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CDASH Variable Label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CDASH Variable Label").toString()));
      }
      if ((jsonObj.get("DRAFT CDASH Definition") != null && !jsonObj.get("DRAFT CDASH Definition").isJsonNull()) && !jsonObj.get("DRAFT CDASH Definition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DRAFT CDASH Definition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DRAFT CDASH Definition").toString()));
      }
      if ((jsonObj.get("Domain Specific") != null && !jsonObj.get("Domain Specific").isJsonNull()) && !jsonObj.get("Domain Specific").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Domain Specific` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Domain Specific").toString()));
      }
      if ((jsonObj.get("Question Text") != null && !jsonObj.get("Question Text").isJsonNull()) && !jsonObj.get("Question Text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Question Text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Question Text").toString()));
      }
      if ((jsonObj.get("Prompt") != null && !jsonObj.get("Prompt").isJsonNull()) && !jsonObj.get("Prompt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Prompt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Prompt").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SDTM Target") != null && !jsonObj.get("SDTM Target").isJsonNull() && !jsonObj.get("SDTM Target").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SDTM Target` to be an array in the JSON string but got `%s`", jsonObj.get("SDTM Target").toString()));
      }
      if ((jsonObj.get("Mapping Instructions") != null && !jsonObj.get("Mapping Instructions").isJsonNull()) && !jsonObj.get("Mapping Instructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Mapping Instructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Mapping Instructions").toString()));
      }
      if ((jsonObj.get("Controlled Terminology Codelist Name") != null && !jsonObj.get("Controlled Terminology Codelist Name").isJsonNull()) && !jsonObj.get("Controlled Terminology Codelist Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Controlled Terminology Codelist Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Controlled Terminology Codelist Name").toString()));
      }
      if ((jsonObj.get("Implementation Notes") != null && !jsonObj.get("Implementation Notes").isJsonNull()) && !jsonObj.get("Implementation Notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Implementation Notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Implementation Notes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportCdashDomainVariablesRow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportCdashDomainVariablesRow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportCdashDomainVariablesRow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportCdashDomainVariablesRow.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportCdashDomainVariablesRow>() {
           @Override
           public void write(JsonWriter out, ExportCdashDomainVariablesRow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportCdashDomainVariablesRow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportCdashDomainVariablesRow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportCdashDomainVariablesRow
   * @throws IOException if the JSON string is invalid with respect to ExportCdashDomainVariablesRow
   */
  public static ExportCdashDomainVariablesRow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportCdashDomainVariablesRow.class);
  }

  /**
   * Convert an instance of ExportCdashDomainVariablesRow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


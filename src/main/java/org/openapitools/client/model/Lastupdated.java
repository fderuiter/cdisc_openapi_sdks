/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LastupdatedLinks;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Lastupdated
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-22T20:17:16.173989497Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class Lastupdated {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  @javax.annotation.Nullable
  private LastupdatedLinks links;

  public static final String SERIALIZED_NAME_OVERALL = "overall";
  @SerializedName(SERIALIZED_NAME_OVERALL)
  @javax.annotation.Nullable
  private String overall;

  public static final String SERIALIZED_NAME_DATA_ANALYSIS = "data-analysis";
  @SerializedName(SERIALIZED_NAME_DATA_ANALYSIS)
  @javax.annotation.Nullable
  private String dataAnalysis;

  public static final String SERIALIZED_NAME_DATA_COLLECTION = "data-collection";
  @SerializedName(SERIALIZED_NAME_DATA_COLLECTION)
  @javax.annotation.Nullable
  private String dataCollection;

  public static final String SERIALIZED_NAME_DATA_TABULATION = "data-tabulation";
  @SerializedName(SERIALIZED_NAME_DATA_TABULATION)
  @javax.annotation.Nullable
  private String dataTabulation;

  public static final String SERIALIZED_NAME_MEASURE = "measure";
  @SerializedName(SERIALIZED_NAME_MEASURE)
  @javax.annotation.Nullable
  private String measure;

  public static final String SERIALIZED_NAME_TERMINOLOGY = "terminology";
  @SerializedName(SERIALIZED_NAME_TERMINOLOGY)
  @javax.annotation.Nullable
  private String terminology;

  public Lastupdated() {
  }

  public Lastupdated links(@javax.annotation.Nullable LastupdatedLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public LastupdatedLinks getLinks() {
    return links;
  }

  public void setLinks(@javax.annotation.Nullable LastupdatedLinks links) {
    this.links = links;
  }


  public Lastupdated overall(@javax.annotation.Nullable String overall) {
    this.overall = overall;
    return this;
  }

  /**
   * Get overall
   * @return overall
   */
  @javax.annotation.Nullable
  public String getOverall() {
    return overall;
  }

  public void setOverall(@javax.annotation.Nullable String overall) {
    this.overall = overall;
  }


  public Lastupdated dataAnalysis(@javax.annotation.Nullable String dataAnalysis) {
    this.dataAnalysis = dataAnalysis;
    return this;
  }

  /**
   * Get dataAnalysis
   * @return dataAnalysis
   */
  @javax.annotation.Nullable
  public String getDataAnalysis() {
    return dataAnalysis;
  }

  public void setDataAnalysis(@javax.annotation.Nullable String dataAnalysis) {
    this.dataAnalysis = dataAnalysis;
  }


  public Lastupdated dataCollection(@javax.annotation.Nullable String dataCollection) {
    this.dataCollection = dataCollection;
    return this;
  }

  /**
   * Get dataCollection
   * @return dataCollection
   */
  @javax.annotation.Nullable
  public String getDataCollection() {
    return dataCollection;
  }

  public void setDataCollection(@javax.annotation.Nullable String dataCollection) {
    this.dataCollection = dataCollection;
  }


  public Lastupdated dataTabulation(@javax.annotation.Nullable String dataTabulation) {
    this.dataTabulation = dataTabulation;
    return this;
  }

  /**
   * Get dataTabulation
   * @return dataTabulation
   */
  @javax.annotation.Nullable
  public String getDataTabulation() {
    return dataTabulation;
  }

  public void setDataTabulation(@javax.annotation.Nullable String dataTabulation) {
    this.dataTabulation = dataTabulation;
  }


  public Lastupdated measure(@javax.annotation.Nullable String measure) {
    this.measure = measure;
    return this;
  }

  /**
   * Get measure
   * @return measure
   */
  @javax.annotation.Nullable
  public String getMeasure() {
    return measure;
  }

  public void setMeasure(@javax.annotation.Nullable String measure) {
    this.measure = measure;
  }


  public Lastupdated terminology(@javax.annotation.Nullable String terminology) {
    this.terminology = terminology;
    return this;
  }

  /**
   * Get terminology
   * @return terminology
   */
  @javax.annotation.Nullable
  public String getTerminology() {
    return terminology;
  }

  public void setTerminology(@javax.annotation.Nullable String terminology) {
    this.terminology = terminology;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Lastupdated lastupdated = (Lastupdated) o;
    return Objects.equals(this.links, lastupdated.links) &&
        Objects.equals(this.overall, lastupdated.overall) &&
        Objects.equals(this.dataAnalysis, lastupdated.dataAnalysis) &&
        Objects.equals(this.dataCollection, lastupdated.dataCollection) &&
        Objects.equals(this.dataTabulation, lastupdated.dataTabulation) &&
        Objects.equals(this.measure, lastupdated.measure) &&
        Objects.equals(this.terminology, lastupdated.terminology);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, overall, dataAnalysis, dataCollection, dataTabulation, measure, terminology);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Lastupdated {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    overall: ").append(toIndentedString(overall)).append("\n");
    sb.append("    dataAnalysis: ").append(toIndentedString(dataAnalysis)).append("\n");
    sb.append("    dataCollection: ").append(toIndentedString(dataCollection)).append("\n");
    sb.append("    dataTabulation: ").append(toIndentedString(dataTabulation)).append("\n");
    sb.append("    measure: ").append(toIndentedString(measure)).append("\n");
    sb.append("    terminology: ").append(toIndentedString(terminology)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("_links", "overall", "data-analysis", "data-collection", "data-tabulation", "measure", "terminology"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Lastupdated
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Lastupdated.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Lastupdated is not found in the empty JSON string", Lastupdated.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Lastupdated.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Lastupdated` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        LastupdatedLinks.validateJsonElement(jsonObj.get("_links"));
      }
      if ((jsonObj.get("overall") != null && !jsonObj.get("overall").isJsonNull()) && !jsonObj.get("overall").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `overall` to be a primitive type in the JSON string but got `%s`", jsonObj.get("overall").toString()));
      }
      if ((jsonObj.get("data-analysis") != null && !jsonObj.get("data-analysis").isJsonNull()) && !jsonObj.get("data-analysis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data-analysis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data-analysis").toString()));
      }
      if ((jsonObj.get("data-collection") != null && !jsonObj.get("data-collection").isJsonNull()) && !jsonObj.get("data-collection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data-collection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data-collection").toString()));
      }
      if ((jsonObj.get("data-tabulation") != null && !jsonObj.get("data-tabulation").isJsonNull()) && !jsonObj.get("data-tabulation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data-tabulation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data-tabulation").toString()));
      }
      if ((jsonObj.get("measure") != null && !jsonObj.get("measure").isJsonNull()) && !jsonObj.get("measure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `measure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("measure").toString()));
      }
      if ((jsonObj.get("terminology") != null && !jsonObj.get("terminology").isJsonNull()) && !jsonObj.get("terminology").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `terminology` to be a primitive type in the JSON string but got `%s`", jsonObj.get("terminology").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Lastupdated.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Lastupdated' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Lastupdated> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Lastupdated.class));

       return (TypeAdapter<T>) new TypeAdapter<Lastupdated>() {
           @Override
           public void write(JsonWriter out, Lastupdated value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Lastupdated read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Lastupdated given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Lastupdated
   * @throws IOException if the JSON string is invalid with respect to Lastupdated
   */
  public static Lastupdated fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Lastupdated.class);
  }

  /**
   * Convert an instance of Lastupdated to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


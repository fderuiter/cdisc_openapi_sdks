/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExportCtTerm;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExportCtCodelist
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-22T20:17:16.173989497Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class ExportCtCodelist {
  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nullable
  private String code;

  public static final String SERIALIZED_NAME_CODELIST_CODE = "Codelist Code";
  @SerializedName(SERIALIZED_NAME_CODELIST_CODE)
  @javax.annotation.Nullable
  private String codelistCode;

  public static final String SERIALIZED_NAME_CODELIST_EXTENSIBLE_YES_NO = "Codelist Extensible (Yes/No)";
  @SerializedName(SERIALIZED_NAME_CODELIST_EXTENSIBLE_YES_NO)
  @javax.annotation.Nullable
  private String codelistExtensibleYesNo;

  public static final String SERIALIZED_NAME_CODELIST_NAME = "Codelist Name";
  @SerializedName(SERIALIZED_NAME_CODELIST_NAME)
  @javax.annotation.Nullable
  private String codelistName;

  public static final String SERIALIZED_NAME_CD_I_S_C_SUBMISSION_VALUE = "CDISC Submission Value";
  @SerializedName(SERIALIZED_NAME_CD_I_S_C_SUBMISSION_VALUE)
  @javax.annotation.Nullable
  private String cdISCSubmissionValue;

  public static final String SERIALIZED_NAME_CD_I_S_C_SYNONYM_S = "CDISC Synonym(s)";
  @SerializedName(SERIALIZED_NAME_CD_I_S_C_SYNONYM_S)
  @javax.annotation.Nullable
  private List<String> cdISCSynonymS = new ArrayList<>();

  public static final String SERIALIZED_NAME_CD_I_S_C_DEFINITION = "CDISC Definition";
  @SerializedName(SERIALIZED_NAME_CD_I_S_C_DEFINITION)
  @javax.annotation.Nullable
  private String cdISCDefinition;

  public static final String SERIALIZED_NAME_NC_I_PREFERRED_TERM = "NCI Preferred Term";
  @SerializedName(SERIALIZED_NAME_NC_I_PREFERRED_TERM)
  @javax.annotation.Nullable
  private String ncIPreferredTerm;

  public static final String SERIALIZED_NAME_STANDARD_AND_DATE = "Standard and Date";
  @SerializedName(SERIALIZED_NAME_STANDARD_AND_DATE)
  @javax.annotation.Nullable
  private String standardAndDate;

  public static final String SERIALIZED_NAME_ = "";
  @SerializedName(SERIALIZED_NAME_)
  @javax.annotation.Nullable
  private List<ExportCtTerm>  = new ArrayList<>();

  public ExportCtCodelist() {
  }

  public ExportCtCodelist code(@javax.annotation.Nullable String code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nullable String code) {
    this.code = code;
  }


  public ExportCtCodelist codelistCode(@javax.annotation.Nullable String codelistCode) {
    this.codelistCode = codelistCode;
    return this;
  }

  /**
   * Get codelistCode
   * @return codelistCode
   */
  @javax.annotation.Nullable
  public String getCodelistCode() {
    return codelistCode;
  }

  public void setCodelistCode(@javax.annotation.Nullable String codelistCode) {
    this.codelistCode = codelistCode;
  }


  public ExportCtCodelist codelistExtensibleYesNo(@javax.annotation.Nullable String codelistExtensibleYesNo) {
    this.codelistExtensibleYesNo = codelistExtensibleYesNo;
    return this;
  }

  /**
   * Get codelistExtensibleYesNo
   * @return codelistExtensibleYesNo
   */
  @javax.annotation.Nullable
  public String getCodelistExtensibleYesNo() {
    return codelistExtensibleYesNo;
  }

  public void setCodelistExtensibleYesNo(@javax.annotation.Nullable String codelistExtensibleYesNo) {
    this.codelistExtensibleYesNo = codelistExtensibleYesNo;
  }


  public ExportCtCodelist codelistName(@javax.annotation.Nullable String codelistName) {
    this.codelistName = codelistName;
    return this;
  }

  /**
   * Get codelistName
   * @return codelistName
   */
  @javax.annotation.Nullable
  public String getCodelistName() {
    return codelistName;
  }

  public void setCodelistName(@javax.annotation.Nullable String codelistName) {
    this.codelistName = codelistName;
  }


  public ExportCtCodelist cdISCSubmissionValue(@javax.annotation.Nullable String cdISCSubmissionValue) {
    this.cdISCSubmissionValue = cdISCSubmissionValue;
    return this;
  }

  /**
   * Get cdISCSubmissionValue
   * @return cdISCSubmissionValue
   */
  @javax.annotation.Nullable
  public String getCdISCSubmissionValue() {
    return cdISCSubmissionValue;
  }

  public void setCdISCSubmissionValue(@javax.annotation.Nullable String cdISCSubmissionValue) {
    this.cdISCSubmissionValue = cdISCSubmissionValue;
  }


  public ExportCtCodelist cdISCSynonymS(@javax.annotation.Nullable List<String> cdISCSynonymS) {
    this.cdISCSynonymS = cdISCSynonymS;
    return this;
  }

  public ExportCtCodelist addCdISCSynonymSItem(String cdISCSynonymSItem) {
    if (this.cdISCSynonymS == null) {
      this.cdISCSynonymS = new ArrayList<>();
    }
    this.cdISCSynonymS.add(cdISCSynonymSItem);
    return this;
  }

  /**
   * Get cdISCSynonymS
   * @return cdISCSynonymS
   */
  @javax.annotation.Nullable
  public List<String> getCdISCSynonymS() {
    return cdISCSynonymS;
  }

  public void setCdISCSynonymS(@javax.annotation.Nullable List<String> cdISCSynonymS) {
    this.cdISCSynonymS = cdISCSynonymS;
  }


  public ExportCtCodelist cdISCDefinition(@javax.annotation.Nullable String cdISCDefinition) {
    this.cdISCDefinition = cdISCDefinition;
    return this;
  }

  /**
   * Get cdISCDefinition
   * @return cdISCDefinition
   */
  @javax.annotation.Nullable
  public String getCdISCDefinition() {
    return cdISCDefinition;
  }

  public void setCdISCDefinition(@javax.annotation.Nullable String cdISCDefinition) {
    this.cdISCDefinition = cdISCDefinition;
  }


  public ExportCtCodelist ncIPreferredTerm(@javax.annotation.Nullable String ncIPreferredTerm) {
    this.ncIPreferredTerm = ncIPreferredTerm;
    return this;
  }

  /**
   * Get ncIPreferredTerm
   * @return ncIPreferredTerm
   */
  @javax.annotation.Nullable
  public String getNcIPreferredTerm() {
    return ncIPreferredTerm;
  }

  public void setNcIPreferredTerm(@javax.annotation.Nullable String ncIPreferredTerm) {
    this.ncIPreferredTerm = ncIPreferredTerm;
  }


  public ExportCtCodelist standardAndDate(@javax.annotation.Nullable String standardAndDate) {
    this.standardAndDate = standardAndDate;
    return this;
  }

  /**
   * Get standardAndDate
   * @return standardAndDate
   */
  @javax.annotation.Nullable
  public String getStandardAndDate() {
    return standardAndDate;
  }

  public void setStandardAndDate(@javax.annotation.Nullable String standardAndDate) {
    this.standardAndDate = standardAndDate;
  }


  public ExportCtCodelist (@javax.annotation.Nullable List<ExportCtTerm> ) {
    this. = ;
    return this;
  }

  public ExportCtCodelist addItem(ExportCtTerm Item) {
    if (this. == null) {
      this. = new ArrayList<>();
    }
    this..add(Item);
    return this;
  }

  /**
   * Get 
   * @return 
   */
  @javax.annotation.Nullable
  public List<ExportCtTerm> get() {
    return ;
  }

  public void set(@javax.annotation.Nullable List<ExportCtTerm> ) {
    this. = ;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportCtCodelist exportCtCodelist = (ExportCtCodelist) o;
    return Objects.equals(this.code, exportCtCodelist.code) &&
        Objects.equals(this.codelistCode, exportCtCodelist.codelistCode) &&
        Objects.equals(this.codelistExtensibleYesNo, exportCtCodelist.codelistExtensibleYesNo) &&
        Objects.equals(this.codelistName, exportCtCodelist.codelistName) &&
        Objects.equals(this.cdISCSubmissionValue, exportCtCodelist.cdISCSubmissionValue) &&
        Objects.equals(this.cdISCSynonymS, exportCtCodelist.cdISCSynonymS) &&
        Objects.equals(this.cdISCDefinition, exportCtCodelist.cdISCDefinition) &&
        Objects.equals(this.ncIPreferredTerm, exportCtCodelist.ncIPreferredTerm) &&
        Objects.equals(this.standardAndDate, exportCtCodelist.standardAndDate) &&
        Objects.equals(this., exportCtCodelist.);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, codelistCode, codelistExtensibleYesNo, codelistName, cdISCSubmissionValue, cdISCSynonymS, cdISCDefinition, ncIPreferredTerm, standardAndDate, );
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportCtCodelist {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    codelistCode: ").append(toIndentedString(codelistCode)).append("\n");
    sb.append("    codelistExtensibleYesNo: ").append(toIndentedString(codelistExtensibleYesNo)).append("\n");
    sb.append("    codelistName: ").append(toIndentedString(codelistName)).append("\n");
    sb.append("    cdISCSubmissionValue: ").append(toIndentedString(cdISCSubmissionValue)).append("\n");
    sb.append("    cdISCSynonymS: ").append(toIndentedString(cdISCSynonymS)).append("\n");
    sb.append("    cdISCDefinition: ").append(toIndentedString(cdISCDefinition)).append("\n");
    sb.append("    ncIPreferredTerm: ").append(toIndentedString(ncIPreferredTerm)).append("\n");
    sb.append("    standardAndDate: ").append(toIndentedString(standardAndDate)).append("\n");
    sb.append("    : ").append(toIndentedString()).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Code", "Codelist Code", "Codelist Extensible (Yes/No)", "Codelist Name", "CDISC Submission Value", "CDISC Synonym(s)", "CDISC Definition", "NCI Preferred Term", "Standard and Date", ""));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportCtCodelist
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportCtCodelist.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportCtCodelist is not found in the empty JSON string", ExportCtCodelist.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportCtCodelist.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportCtCodelist` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Code") != null && !jsonObj.get("Code").isJsonNull()) && !jsonObj.get("Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Code").toString()));
      }
      if ((jsonObj.get("Codelist Code") != null && !jsonObj.get("Codelist Code").isJsonNull()) && !jsonObj.get("Codelist Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Codelist Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Codelist Code").toString()));
      }
      if ((jsonObj.get("Codelist Extensible (Yes/No)") != null && !jsonObj.get("Codelist Extensible (Yes/No)").isJsonNull()) && !jsonObj.get("Codelist Extensible (Yes/No)").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Codelist Extensible (Yes/No)` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Codelist Extensible (Yes/No)").toString()));
      }
      if ((jsonObj.get("Codelist Name") != null && !jsonObj.get("Codelist Name").isJsonNull()) && !jsonObj.get("Codelist Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Codelist Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Codelist Name").toString()));
      }
      if ((jsonObj.get("CDISC Submission Value") != null && !jsonObj.get("CDISC Submission Value").isJsonNull()) && !jsonObj.get("CDISC Submission Value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CDISC Submission Value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CDISC Submission Value").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("CDISC Synonym(s)") != null && !jsonObj.get("CDISC Synonym(s)").isJsonNull() && !jsonObj.get("CDISC Synonym(s)").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CDISC Synonym(s)` to be an array in the JSON string but got `%s`", jsonObj.get("CDISC Synonym(s)").toString()));
      }
      if ((jsonObj.get("CDISC Definition") != null && !jsonObj.get("CDISC Definition").isJsonNull()) && !jsonObj.get("CDISC Definition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CDISC Definition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CDISC Definition").toString()));
      }
      if ((jsonObj.get("NCI Preferred Term") != null && !jsonObj.get("NCI Preferred Term").isJsonNull()) && !jsonObj.get("NCI Preferred Term").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NCI Preferred Term` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NCI Preferred Term").toString()));
      }
      if ((jsonObj.get("Standard and Date") != null && !jsonObj.get("Standard and Date").isJsonNull()) && !jsonObj.get("Standard and Date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Standard and Date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Standard and Date").toString()));
      }
      if (jsonObj.get("") != null && !jsonObj.get("").isJsonNull()) {
        JsonArray jsonArray = jsonObj.getAsJsonArray("");
        if (jsonArray != null) {
          // ensure the json data is an array
          if (!jsonObj.get("").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `` to be an array in the JSON string but got `%s`", jsonObj.get("").toString()));
          }

          // validate the optional field `` (array)
          for (int i = 0; i < jsonArray.size(); i++) {
            ExportCtTerm.validateJsonElement(jsonArray.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportCtCodelist.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportCtCodelist' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportCtCodelist> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportCtCodelist.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportCtCodelist>() {
           @Override
           public void write(JsonWriter out, ExportCtCodelist value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportCtCodelist read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportCtCodelist given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportCtCodelist
   * @throws IOException if the JSON string is invalid with respect to ExportCtCodelist
   */
  public static ExportCtCodelist fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportCtCodelist.class);
  }

  /**
   * Convert an instance of ExportCtCodelist to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.CdashigClass
import org.openapitools.client.model.CdashigClassDomains
import org.openapitools.client.model.CdashigClassScenarios
import org.openapitools.client.model.CdashigDomain
import org.openapitools.client.model.CdashigDomainField
import org.openapitools.client.model.CdashigDomainFields
import org.openapitools.client.model.CdashigProduct
import org.openapitools.client.model.CdashigProductClasses
import org.openapitools.client.model.CdashigProductDomains
import org.openapitools.client.model.CdashigProductScenarios
import org.openapitools.client.model.CdashigScenario
import org.openapitools.client.model.CdashigScenarioField
import org.openapitools.client.model.CdashigScenarioFields
import org.openapitools.client.model.DefaultErrorResponse
import org.openapitools.client.model.ExportCdashigTable
import org.openapitools.client.model.RootCdashigDomainField
import org.openapitools.client.model.RootCdashigScenarioField
import org.openapitools.client.model.XmlCdashigClass
import org.openapitools.client.model.XmlCdashigClassDomains
import org.openapitools.client.model.XmlCdashigClassScenarios
import org.openapitools.client.model.XmlCdashigDomain
import org.openapitools.client.model.XmlCdashigDomainField
import org.openapitools.client.model.XmlCdashigDomainFields
import org.openapitools.client.model.XmlCdashigProduct
import org.openapitools.client.model.XmlCdashigProductClasses
import org.openapitools.client.model.XmlCdashigProductDomains
import org.openapitools.client.model.XmlCdashigProductScenarios
import org.openapitools.client.model.XmlCdashigScenario
import org.openapitools.client.model.XmlCdashigScenarioField
import org.openapitools.client.model.XmlCdashigScenarioFields
import org.openapitools.client.model.XmlRootCdashigDomainField
import org.openapitools.client.model.XmlRootCdashigScenarioField
import org.openapitools.client.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object CDASHImplementationGuideCDASHIGApi {
  def apply(baseUrl: String = "https://library.cdisc.org/api") = new CDASHImplementationGuideCDASHIGApi(baseUrl)
}

class CDASHImplementationGuideCDASHIGApi(baseUrl: String) {

  /**
   * Get CDASHIG Class Domain List
   * 
   * Expected answers:
   *   code 200 : CdashigClassDomains (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param `class` CDASHIG Class Identifier
   */
  def mdrCdashigVersionClassesClassDomainsGet(username: String, password: String)(version: String, `class`: String
): Request[Either[ResponseException[String, Exception], CdashigClassDomains], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/cdashig/${version}/classes/${`class`}/domains")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[CdashigClassDomains])

  /**
   * Get CDASHIG Class
   * 
   * Expected answers:
   *   code 200 : CdashigClass (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param `class` CDASHIG Class Identifier
   */
  def mdrCdashigVersionClassesClassGet(username: String, password: String)(version: String, `class`: String
): Request[Either[ResponseException[String, Exception], CdashigClass], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/cdashig/${version}/classes/${`class`}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[CdashigClass])

  /**
   * Get CDASHIG Class Scenario List
   * 
   * Expected answers:
   *   code 200 : CdashigClassScenarios (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param `class` CDASHIG Class Identifier
   */
  def mdrCdashigVersionClassesClassScenariosGet(username: String, password: String)(version: String, `class`: String
): Request[Either[ResponseException[String, Exception], CdashigClassScenarios], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/cdashig/${version}/classes/${`class`}/scenarios")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[CdashigClassScenarios])

  /**
   * Get CDASHIG Class List
   * 
   * Expected answers:
   *   code 200 : CdashigProductClasses (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   */
  def mdrCdashigVersionClassesGet(username: String, password: String)(version: String
): Request[Either[ResponseException[String, Exception], CdashigProductClasses], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/cdashig/${version}/classes")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[CdashigProductClasses])

  /**
   * Get CDASHIG Domain Field
   * 
   * Expected answers:
   *   code 200 : CdashigDomainField (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param domain CDASHIG Domain Identifier
   * @param field CDASHIG Field Identifier
   */
  def mdrCdashigVersionDomainsDomainFieldsFieldGet(username: String, password: String)(version: String, domain: String, field: String
): Request[Either[ResponseException[String, Exception], CdashigDomainField], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/cdashig/${version}/domains/${domain}/fields/${field}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[CdashigDomainField])

  /**
   * Get CDASHIG Domain Field List
   * 
   * Expected answers:
   *   code 200 : CdashigDomainFields (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param domain CDASHIG Domain Identifier
   */
  def mdrCdashigVersionDomainsDomainFieldsGet(username: String, password: String)(version: String, domain: String
): Request[Either[ResponseException[String, Exception], CdashigDomainFields], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/cdashig/${version}/domains/${domain}/fields")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[CdashigDomainFields])

  /**
   * Get CDASHIG Domain
   * 
   * Expected answers:
   *   code 200 : CdashigDomain (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param domain CDASHIG Domain Identifier
   */
  def mdrCdashigVersionDomainsDomainGet(username: String, password: String)(version: String, domain: String
): Request[Either[ResponseException[String, Exception], CdashigDomain], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/cdashig/${version}/domains/${domain}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[CdashigDomain])

  /**
   * Get CDASHIG Domain List
   * 
   * Expected answers:
   *   code 200 : CdashigProductDomains (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   */
  def mdrCdashigVersionDomainsGet(username: String, password: String)(version: String
): Request[Either[ResponseException[String, Exception], CdashigProductDomains], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/cdashig/${version}/domains")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[CdashigProductDomains])

  /**
   * Get CDASHIG Product
   * 
   * Expected answers:
   *   code 200 : CdashigProduct (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   */
  def mdrCdashigVersionGet(username: String, password: String)(version: String
): Request[Either[ResponseException[String, Exception], CdashigProduct], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/cdashig/${version}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[CdashigProduct])

  /**
   * Get CDASHIG Scenario Field
   * 
   * Expected answers:
   *   code 200 : CdashigScenarioField (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param domain CDASHIG Domain Identifier
   * @param scenario CDASHIG Scenario Identifier
   * @param field CDASHIG Field Identifier
   */
  def mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet(username: String, password: String)(version: String, domain: String, scenario: String, field: String
): Request[Either[ResponseException[String, Exception], CdashigScenarioField], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/cdashig/${version}/scenarios/${domain}.${scenario}/fields/${field}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[CdashigScenarioField])

  /**
   * Get CDASHIG Scenario Field List
   * 
   * Expected answers:
   *   code 200 : CdashigScenarioFields (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param domain CDASHIG Domain Identifier
   * @param scenario CDASHIG Scenario Identifier
   */
  def mdrCdashigVersionScenariosDomainScenarioFieldsGet(username: String, password: String)(version: String, domain: String, scenario: String
): Request[Either[ResponseException[String, Exception], CdashigScenarioFields], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/cdashig/${version}/scenarios/${domain}.${scenario}/fields")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[CdashigScenarioFields])

  /**
   * Get CDASHIG Scenario
   * 
   * Expected answers:
   *   code 200 : CdashigScenario (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param domain CDASHIG Domain Identifier
   * @param scenario CDASHIG Scenario Identifier
   */
  def mdrCdashigVersionScenariosDomainScenarioGet(username: String, password: String)(version: String, domain: String, scenario: String
): Request[Either[ResponseException[String, Exception], CdashigScenario], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/cdashig/${version}/scenarios/${domain}.${scenario}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[CdashigScenario])

  /**
   * Get CDASHIG Scenario List
   * 
   * Expected answers:
   *   code 200 : CdashigProductScenarios (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   */
  def mdrCdashigVersionScenariosGet(username: String, password: String)(version: String
): Request[Either[ResponseException[String, Exception], CdashigProductScenarios], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/cdashig/${version}/scenarios")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[CdashigProductScenarios])

  /**
   * Get Root CDASHIG Domain Field
   * 
   * Expected answers:
   *   code 200 : RootCdashigDomainField (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param domain CDASHIG Domain Identifier
   * @param field CDASHIG Field Identifier
   */
  def mdrRootCdashigDomainsDomainFieldsFieldGet(username: String, password: String)(domain: String, field: String
): Request[Either[ResponseException[String, Exception], RootCdashigDomainField], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/root/cdashig/domains/${domain}/fields/${field}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[RootCdashigDomainField])

  /**
   * Get Root CDASHIG Scenario Field
   * 
   * Expected answers:
   *   code 200 : RootCdashigScenarioField (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param domain CDASHIG Domain Identifier
   * @param scenario CDASHIG Scenario Identifier
   * @param field CDASHIG Field Identifier
   */
  def mdrRootCdashigScenariosDomainScenarioFieldsFieldGet(username: String, password: String)(domain: String, scenario: String, field: String
): Request[Either[ResponseException[String, Exception], RootCdashigScenarioField], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/root/cdashig/scenarios/${domain}.${scenario}/fields/${field}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[RootCdashigScenarioField])

}

/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.DefaultErrorResponse
import org.openapitools.client.model.DefaultSearchResponse
import org.openapitools.client.model.DefaultSearchScopes._
import org.openapitools.client.model.MdrSearchScopesGet200Response
import org.openapitools.client.model.ScopeValues
import org.openapitools.client.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object SearchesApi {
  def apply(baseUrl: String = "https://library.cdisc.org/api") = new SearchesApi(baseUrl)
}

class SearchesApi(baseUrl: String) {

  /**
   * Get Search Results Across CDISC Library
   * 
   * Expected answers:
   *   code 200 : DefaultSearchResponse (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param `q` Search Term Expression
   * @param highlight Search Highlight Expression
   * @param start Initial Search Result Index
   * @param pageSize Number of Search Results to Return
   * @param `class` Limit Search by Setting Scope to Class
   * @param codelist Limit Search by Setting Scope to Codelist
   * @param conceptId Limit Search by Setting Scope to Concept ID
   * @param core Limit Search by Setting Scope to Core
   * @param dataStructure Limit Search by Setting Scope to Data Structure
   * @param datasetStructure Limit Search by Setting Scope to Dataset Structure
   * @param definition Limit Search by Setting Scope to Definition
   * @param description Limit Search by Setting Scope to Description
   * @param domain Limit Search by Setting Scope to Domain
   * @param effectiveDate Limit Search by Setting Scope to Effective Date
   * @param extensible Limit Search by Setting Scope to Extensible
   * @param href Limit Search by Setting Scope to Href
   * @param label Limit Search by Setting Scope to Label
   * @param measureType SLimit Search by Setting Scope to Measure Type
   * @param name Limit Search by Setting Scope to Name
   * @param preferredTerm Limit Search by Setting Scope to Preferred Term
   * @param product Limit Search by Setting Scope to Product
   * @param productGroup Limit Search by Setting Scope to Product Group
   * @param registrationStatus Limit Search by Setting Scope to Registration Status
   * @param roleDescription Limit Search by Setting Scope to Role Description
   * @param sdtmTarget Limit Search by Setting Scope to SDTM Target
   * @param simpleDatatype Limit Search by Setting Scope to Simple Datatype
   * @param submissionValue Limit Search by Setting Scope to Submission Value
   * @param synonyms Limit Search by Setting Scope to Synonyms
   * @param `type` Limit Search by Setting Scope to Type
   * @param uiHref Limit Search by Setting Scope to UI Href
   * @param valueDomain Limit Search by Setting Scope to Value Domain
   * @param variableSet Limit Search by Setting Scope to Variable Set
   * @param version Limit Search by Setting Scope to Version
   */
  def mdrSearchGet(username: String, password: String)(`q`: String, highlight: Option[String] = None, start: Option[Double] = None, pageSize: Option[Double] = None, `class`: Option[String] = None, codelist: Option[String] = None, conceptId: Option[String] = None, core: Option[String] = None, dataStructure: Option[String] = None, datasetStructure: Option[String] = None, definition: Option[String] = None, description: Option[String] = None, domain: Option[String] = None, effectiveDate: Option[String] = None, extensible: Option[String] = None, href: Option[String] = None, label: Option[String] = None, measureType: Option[String] = None, name: Option[String] = None, preferredTerm: Option[String] = None, product: Option[String] = None, productGroup: Option[String] = None, registrationStatus: Option[String] = None, roleDescription: Option[String] = None, sdtmTarget: Option[String] = None, simpleDatatype: Option[String] = None, submissionValue: Option[String] = None, synonyms: Option[String] = None, `type`: Option[String] = None, uiHref: Option[String] = None, valueDomain: Option[String] = None, variableSet: Option[String] = None, version: Option[String] = None
): Request[Either[ResponseException[String, Exception], DefaultSearchResponse], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/search?q=${ `q` }&highlight=${ highlight }&start=${ start }&pageSize=${ pageSize }&class=${ `class` }&codelist=${ codelist }&conceptId=${ conceptId }&core=${ core }&dataStructure=${ dataStructure }&datasetStructure=${ datasetStructure }&definition=${ definition }&description=${ description }&domain=${ domain }&effectiveDate=${ effectiveDate }&extensible=${ extensible }&href=${ href }&label=${ label }&measureType=${ measureType }&name=${ name }&preferredTerm=${ preferredTerm }&product=${ product }&productGroup=${ productGroup }&registrationStatus=${ registrationStatus }&roleDescription=${ roleDescription }&sdtmTarget=${ sdtmTarget }&simpleDatatype=${ simpleDatatype }&submissionValue=${ submissionValue }&synonyms=${ synonyms }&type=${ `type` }&uiHref=${ uiHref }&valueDomain=${ valueDomain }&variableSet=${ variableSet }&version=${ version }")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[DefaultSearchResponse])

  /**
   * Get Search Results Across CDISC Library
   * 
   * Expected answers:
   *   code 200 : MdrSearchScopesGet200Response (OK)
   * 
   * Available security schemes:
   *   basicAuth (http)
   */
  def mdrSearchScopesGet(username: String, password: String)(
): Request[Either[ResponseException[String, Exception], MdrSearchScopesGet200Response], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/search/scopes")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[MdrSearchScopesGet200Response])

  /**
   * Get Search Results Limited to Scope
   * 
   * Expected answers:
   *   code 200 : ScopeValues (OK)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param scope Search Scope
   */
  def mdrSearchScopesScopeGet(username: String, password: String)(scope: DefaultSearchScopes
): Request[Either[ResponseException[String, Exception], ScopeValues], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/search/scopes/${scope}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[ScopeValues])

}

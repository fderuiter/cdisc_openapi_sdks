/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.About
import org.openapitools.client.model.DefaultErrorResponse
import org.openapitools.client.model.Lastupdated
import org.openapitools.client.model.ProductgroupDataAnalysis
import org.openapitools.client.model.ProductgroupDataCollection
import org.openapitools.client.model.ProductgroupDataTabulation
import org.openapitools.client.model.ProductgroupQrs
import org.openapitools.client.model.ProductgroupTerminology
import org.openapitools.client.model.Products
import org.openapitools.client.model.XmlAbout
import org.openapitools.client.model.XmlLastupdated
import org.openapitools.client.model.XmlProductgroupDataAnalysis
import org.openapitools.client.model.XmlProductgroupDataCollection
import org.openapitools.client.model.XmlProductgroupDataTabulation
import org.openapitools.client.model.XmlProductgroupTerminology
import org.openapitools.client.model.XmlProducts
import org.openapitools.client.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object DefaultApi {
  def apply(baseUrl: String = "https://library.cdisc.org/api") = new DefaultApi(baseUrl)
}

class DefaultApi(baseUrl: String) {

  /**
   * Get Information About CDISC Library
   * 
   * Expected answers:
   *   code 200 : About (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   */
  def mdrAboutGet(username: String, password: String)(
): Request[Either[ResponseException[String, Exception], About], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/about")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[About])

  /**
   * Get CDISC Library Last Updated
   * 
   * Expected answers:
   *   code 200 : Lastupdated (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   */
  def mdrLastupdatedGet(username: String, password: String)(
): Request[Either[ResponseException[String, Exception], Lastupdated], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/lastupdated")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[Lastupdated])

  /**
   * Get CDISC Library Product Group Data Analysis
   * 
   * Expected answers:
   *   code 200 : ProductgroupDataAnalysis (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   */
  def mdrProductsDataAnalysisGet(username: String, password: String)(
): Request[Either[ResponseException[String, Exception], ProductgroupDataAnalysis], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/products/DataAnalysis")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[ProductgroupDataAnalysis])

  /**
   * Get CDISC Library Product Group Data Collection
   * 
   * Expected answers:
   *   code 200 : ProductgroupDataCollection (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   */
  def mdrProductsDataCollectionGet(username: String, password: String)(
): Request[Either[ResponseException[String, Exception], ProductgroupDataCollection], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/products/DataCollection")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[ProductgroupDataCollection])

  /**
   * Get CDISC Library Product Group Data Tabulation
   * 
   * Expected answers:
   *   code 200 : ProductgroupDataTabulation (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   */
  def mdrProductsDataTabulationGet(username: String, password: String)(
): Request[Either[ResponseException[String, Exception], ProductgroupDataTabulation], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/products/DataTabulation")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[ProductgroupDataTabulation])

  /**
   * Get CDISC Library Products
   * 
   * Expected answers:
   *   code 200 : Products (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   */
  def mdrProductsGet(username: String, password: String)(
): Request[Either[ResponseException[String, Exception], Products], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/products")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[Products])

  /**
   * Get CDISC Library Product Group QRS
   * 
   * Expected answers:
   *   code 200 : ProductgroupQrs (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   */
  def mdrProductsMeasuresGet(username: String, password: String)(
): Request[Either[ResponseException[String, Exception], ProductgroupQrs], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/products/Measures")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[ProductgroupQrs])

  /**
   * Get CDISC Library Product Group Terminology
   * 
   * Expected answers:
   *   code 200 : ProductgroupTerminology (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   */
  def mdrProductsTerminologyGet(username: String, password: String)(
): Request[Either[ResponseException[String, Exception], ProductgroupTerminology], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/products/Terminology")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[ProductgroupTerminology])

}

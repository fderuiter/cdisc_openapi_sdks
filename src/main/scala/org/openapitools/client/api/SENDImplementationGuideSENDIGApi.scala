/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.DefaultErrorResponse
import org.openapitools.client.model.ExportSendigDatasetsTable
import org.openapitools.client.model.ExportSendigVariablesTable
import org.openapitools.client.model.ExportSendigWorkbook
import org.openapitools.client.model.RootSendigDatasetVariable
import org.openapitools.client.model.SendigClass
import org.openapitools.client.model.SendigClassDatasets
import org.openapitools.client.model.SendigClasses
import org.openapitools.client.model.SendigDataset
import org.openapitools.client.model.SendigDatasetVariable
import org.openapitools.client.model.SendigDatasetVariables
import org.openapitools.client.model.SendigDatasets
import org.openapitools.client.model.SendigProduct
import org.openapitools.client.model.XmlRootSendigDatasetVariable
import org.openapitools.client.model.XmlSendigClass
import org.openapitools.client.model.XmlSendigClassDatasets
import org.openapitools.client.model.XmlSendigClasses
import org.openapitools.client.model.XmlSendigDataset
import org.openapitools.client.model.XmlSendigDatasetVariable
import org.openapitools.client.model.XmlSendigDatasetVariables
import org.openapitools.client.model.XmlSendigDatasets
import org.openapitools.client.model.XmlSendigProduct
import org.openapitools.client.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object SENDImplementationGuideSENDIGApi {
  def apply(baseUrl: String = "https://library.cdisc.org/api") = new SENDImplementationGuideSENDIGApi(baseUrl)
}

class SENDImplementationGuideSENDIGApi(baseUrl: String) {

  /**
   * Get Root SENDIG Dataset Variable
   * 
   * Expected answers:
   *   code 200 : RootSendigDatasetVariable (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param dataset SENDIG Dataset Identifier
   * @param `var` SENDIG Variable Identifier
   */
  def mdrRootSendigDatasetsDatasetVariablesVarGet(username: String, password: String)(dataset: String, `var`: String
): Request[Either[ResponseException[String, Exception], RootSendigDatasetVariable], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/root/sendig/datasets/${dataset}/variables/${`var`}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[RootSendigDatasetVariable])

  /**
   * Get SENDIG Class Dataset List
   * 
   * Expected answers:
   *   code 200 : SendigClassDatasets (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param `class` SENDIG Class Identifier
   */
  def mdrSendigVersionClassesClassDatasetsGet(username: String, password: String)(version: String, `class`: String
): Request[Either[ResponseException[String, Exception], SendigClassDatasets], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sendig/${version}/classes/${`class`}/datasets")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SendigClassDatasets])

  /**
   * Get SENDIG Class
   * 
   * Expected answers:
   *   code 200 : SendigClass (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param `class` SENDIG Class Identifier
   */
  def mdrSendigVersionClassesClassGet(username: String, password: String)(version: String, `class`: String
): Request[Either[ResponseException[String, Exception], SendigClass], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sendig/${version}/classes/${`class`}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SendigClass])

  /**
   * Get SENDIG Class List
   * 
   * Expected answers:
   *   code 200 : SendigClasses (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   */
  def mdrSendigVersionClassesGet(username: String, password: String)(version: String
): Request[Either[ResponseException[String, Exception], SendigClasses], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sendig/${version}/classes")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SendigClasses])

  /**
   * Get SENDIG Dataset
   * 
   * Expected answers:
   *   code 200 : SendigDataset (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param dataset SENDIG Class Identifier
   */
  def mdrSendigVersionDatasetsDatasetGet(username: String, password: String)(version: String, dataset: String
): Request[Either[ResponseException[String, Exception], SendigDataset], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sendig/${version}/datasets/${dataset}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SendigDataset])

  /**
   * Get SENDIG Dataset Variable List
   * 
   * Expected answers:
   *   code 200 : SendigDatasetVariables (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param dataset SENDIG Class Identifier
   */
  def mdrSendigVersionDatasetsDatasetVariablesGet(username: String, password: String)(version: String, dataset: String
): Request[Either[ResponseException[String, Exception], SendigDatasetVariables], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sendig/${version}/datasets/${dataset}/variables")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SendigDatasetVariables])

  /**
   * Get SENDIG Dataset Variable
   * 
   * Expected answers:
   *   code 200 : SendigDatasetVariable (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param dataset SENDIG Class Identifier
   * @param `var` SENDIG Variable Identifier
   */
  def mdrSendigVersionDatasetsDatasetVariablesVarGet(username: String, password: String)(version: String, dataset: String, `var`: String
): Request[Either[ResponseException[String, Exception], SendigDatasetVariable], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sendig/${version}/datasets/${dataset}/variables/${`var`}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SendigDatasetVariable])

  /**
   * Get SENDIG Dataset List
   * 
   * Expected answers:
   *   code 200 : SendigDatasets (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   */
  def mdrSendigVersionDatasetsGet(username: String, password: String)(version: String
): Request[Either[ResponseException[String, Exception], SendigDatasets], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sendig/${version}/datasets")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SendigDatasets])

  /**
   * Get SENDIG product
   * 
   * Expected answers:
   *   code 200 : SendigProduct (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   */
  def mdrSendigVersionGet(username: String, password: String)(version: String
): Request[Either[ResponseException[String, Exception], SendigProduct], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sendig/${version}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SendigProduct])

}

/** CDISC Library API
  * REST API Documentation for CDISC Library in production server
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: cdisc_library_support@cdisc.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param version 
  * @param dataStructureName 
  * @param datasetName 
  * @param variableGroup 
  * @param variableName 
  * @param variableLabel 
  * @param `type` 
  * @param codelistControlledTerms 
  * @param core 
  * @param cDISCNotes 
  */
case class ExportAdamVariablesRow(
    version: Option[String] = None,
    dataStructureName: Option[String] = None,
    datasetName: Option[String] = None,
    variableGroup: Option[String] = None,
    variableName: Option[String] = None,
    variableLabel: Option[String] = None,
    `type`: Option[String] = None,
    codelistControlledTerms: Option[String] = None,
    core: Option[String] = None,
    cDISCNotes: Option[String] = None
)
  
object ExportAdamVariablesRow {
  given encoderExportAdamVariablesRow: Encoder[ExportAdamVariablesRow] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.version.map(v => "Version" -> v.asJson),
        t.dataStructureName.map(v => "Data Structure Name" -> v.asJson),
        t.datasetName.map(v => "Dataset Name" -> v.asJson),
        t.variableGroup.map(v => "Variable Group" -> v.asJson),
        t.variableName.map(v => "Variable Name" -> v.asJson),
        t.variableLabel.map(v => "Variable Label" -> v.asJson),
        t.`type`.map(v => "Type" -> v.asJson),
        t.codelistControlledTerms.map(v => "Codelist/Controlled Terms" -> v.asJson),
        t.core.map(v => "Core" -> v.asJson),
        t.cDISCNotes.map(v => "CDISC Notes" -> v.asJson)
      ).flatten
    }
  }
  given decoderExportAdamVariablesRow: Decoder[ExportAdamVariablesRow] = Decoder.instance { c =>
    for {
      version <- c.downField("Version").as[Option[String]]
      dataStructureName <- c.downField("Data Structure Name").as[Option[String]]
      datasetName <- c.downField("Dataset Name").as[Option[String]]
      variableGroup <- c.downField("Variable Group").as[Option[String]]
      variableName <- c.downField("Variable Name").as[Option[String]]
      variableLabel <- c.downField("Variable Label").as[Option[String]]
      `type` <- c.downField("Type").as[Option[String]]
      codelistControlledTerms <- c.downField("Codelist/Controlled Terms").as[Option[String]]
      core <- c.downField("Core").as[Option[String]]
      cDISCNotes <- c.downField("CDISC Notes").as[Option[String]]
    } yield ExportAdamVariablesRow(
      version = version,
      dataStructureName = dataStructureName,
      datasetName = datasetName,
      variableGroup = variableGroup,
      variableName = variableName,
      variableLabel = variableLabel,
      `type` = `type`,
      codelistControlledTerms = codelistControlledTerms,
      core = core,
      cDISCNotes = cDISCNotes
    )
  }
}


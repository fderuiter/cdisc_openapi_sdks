/** CDISC Library API
  * REST API Documentation for CDISC Library in production server
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: cdisc_library_support@cdisc.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** 
  * @param bundle1 
  * @param cDISCSynonymS 
  * @param bundle2 
  */
case class ExportCtTerm(
    bundle1: Option[String] = None,
    cDISCSynonymS: Option[Seq[String]] = None,
    bundle2: Option[String] = None
)
  
object ExportCtTerm {
  given encoderExportCtTerm: Encoder[ExportCtTerm] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.bundle1.map(v => "bundle-1" -> v.asJson),
        t.cDISCSynonymS.map(v => "CDISC Synonym(s)" -> v.asJson),
        t.bundle2.map(v => "bundle-2" -> v.asJson)
      ).flatten
    }
  }
  given decoderExportCtTerm: Decoder[ExportCtTerm] = Decoder.instance { c =>
    for {
      bundle1 <- c.downField("bundle-1").as[Option[String]]
      cDISCSynonymS <- c.downField("CDISC Synonym(s)").as[Option[Seq[String]]]
      bundle2 <- c.downField("bundle-2").as[Option[String]]
    } yield ExportCtTerm(
      bundle1 = bundle1,
      cDISCSynonymS = cDISCSynonymS,
      bundle2 = bundle2
    )
  }
}


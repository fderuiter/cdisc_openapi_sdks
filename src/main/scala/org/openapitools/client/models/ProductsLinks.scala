/** CDISC Library API
  * REST API Documentation for CDISC Library in production server
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: cdisc_library_support@cdisc.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param self 
  * @param dataCollection 
  * @param dataTabulation 
  * @param dataAnalysis 
  * @param terminology 
  * @param measure 
  */
case class ProductsLinks(
    self: Option[ProductsRef] = None,
    dataCollection: Option[ProductgroupDataCollection] = None,
    dataTabulation: Option[ProductgroupDataTabulation] = None,
    dataAnalysis: Option[ProductgroupDataAnalysis] = None,
    terminology: Option[ProductgroupTerminology] = None,
    measure: Option[ProductgroupQrs] = None
)
  
object ProductsLinks {
  given encoderProductsLinks: Encoder[ProductsLinks] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.self.map(v => "self" -> v.asJson),
        t.dataCollection.map(v => "data-collection" -> v.asJson),
        t.dataTabulation.map(v => "data-tabulation" -> v.asJson),
        t.dataAnalysis.map(v => "data-analysis" -> v.asJson),
        t.terminology.map(v => "terminology" -> v.asJson),
        t.measure.map(v => "measure" -> v.asJson)
      ).flatten
    }
  }
  given decoderProductsLinks: Decoder[ProductsLinks] = Decoder.instance { c =>
    for {
      self <- c.downField("self").as[Option[ProductsRef]]
      dataCollection <- c.downField("data-collection").as[Option[ProductgroupDataCollection]]
      dataTabulation <- c.downField("data-tabulation").as[Option[ProductgroupDataTabulation]]
      dataAnalysis <- c.downField("data-analysis").as[Option[ProductgroupDataAnalysis]]
      terminology <- c.downField("terminology").as[Option[ProductgroupTerminology]]
      measure <- c.downField("measure").as[Option[ProductgroupQrs]]
    } yield ProductsLinks(
      self = self,
      dataCollection = dataCollection,
      dataTabulation = dataTabulation,
      dataAnalysis = dataAnalysis,
      terminology = terminology,
      measure = measure
    )
  }
}


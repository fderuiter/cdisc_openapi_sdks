/** CDISC Library API
  * REST API Documentation for CDISC Library in production server
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: cdisc_library_support@cdisc.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param version 
  * @param variableOrder 
  * @param `class` 
  * @param datasetName 
  * @param variableName 
  * @param variableLabel 
  * @param `type` 
  * @param controlledTermsCodelistOrFormat 
  * @param role 
  * @param roleDescription 
  * @param description 
  */
case class ExportSdtmDatasetVariablesRow(
    version: Option[String] = None,
    variableOrder: Option[String] = None,
    `class`: Option[String] = None,
    datasetName: Option[String] = None,
    variableName: Option[String] = None,
    variableLabel: Option[String] = None,
    `type`: Option[String] = None,
    controlledTermsCodelistOrFormat: Option[String] = None,
    role: Option[String] = None,
    roleDescription: Option[String] = None,
    description: Option[String] = None
)
  
object ExportSdtmDatasetVariablesRow {
  given encoderExportSdtmDatasetVariablesRow: Encoder[ExportSdtmDatasetVariablesRow] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.version.map(v => "Version" -> v.asJson),
        t.variableOrder.map(v => "Variable Order" -> v.asJson),
        t.`class`.map(v => "Class" -> v.asJson),
        t.datasetName.map(v => "Dataset Name" -> v.asJson),
        t.variableName.map(v => "Variable Name" -> v.asJson),
        t.variableLabel.map(v => "Variable Label" -> v.asJson),
        t.`type`.map(v => "Type" -> v.asJson),
        t.controlledTermsCodelistOrFormat.map(v => "Controlled Terms, Codelist or Format" -> v.asJson),
        t.role.map(v => "Role" -> v.asJson),
        t.roleDescription.map(v => "Role Description" -> v.asJson),
        t.description.map(v => "Description" -> v.asJson)
      ).flatten
    }
  }
  given decoderExportSdtmDatasetVariablesRow: Decoder[ExportSdtmDatasetVariablesRow] = Decoder.instance { c =>
    for {
      version <- c.downField("Version").as[Option[String]]
      variableOrder <- c.downField("Variable Order").as[Option[String]]
      `class` <- c.downField("Class").as[Option[String]]
      datasetName <- c.downField("Dataset Name").as[Option[String]]
      variableName <- c.downField("Variable Name").as[Option[String]]
      variableLabel <- c.downField("Variable Label").as[Option[String]]
      `type` <- c.downField("Type").as[Option[String]]
      controlledTermsCodelistOrFormat <- c.downField("Controlled Terms, Codelist or Format").as[Option[String]]
      role <- c.downField("Role").as[Option[String]]
      roleDescription <- c.downField("Role Description").as[Option[String]]
      description <- c.downField("Description").as[Option[String]]
    } yield ExportSdtmDatasetVariablesRow(
      version = version,
      variableOrder = variableOrder,
      `class` = `class`,
      datasetName = datasetName,
      variableName = variableName,
      variableLabel = variableLabel,
      `type` = `type`,
      controlledTermsCodelistOrFormat = controlledTermsCodelistOrFormat,
      role = role,
      roleDescription = roleDescription,
      description = description
    )
  }
}


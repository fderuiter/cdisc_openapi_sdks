/** CDISC Library API
  * REST API Documentation for CDISC Library in production server
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: cdisc_library_support@cdisc.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** 
  * @param self 
  * @param codelist 
  * @param modelClassVariable 
  * @param modelDatasetVariable 
  * @param parentProduct 
  * @param parentDataset 
  * @param rootItem 
  * @param priorVersion 
  */
case class SendigDatasetVariableLinks(
    self: Option[SendigDatasetVariableRef] = None,
    codelist: Option[Seq[RootCtCodelistRefElement]] = None,
    modelClassVariable: Option[SdtmClassVariableRef] = None,
    modelDatasetVariable: Option[SdtmDatasetVariableRef] = None,
    parentProduct: Option[SendigProductRef] = None,
    parentDataset: Option[SendigDatasetRef] = None,
    rootItem: Option[RootSendigDatasetVariableRef] = None,
    priorVersion: Option[SendigDatasetVariableRef] = None
)
  
object SendigDatasetVariableLinks {
  given encoderSendigDatasetVariableLinks: Encoder[SendigDatasetVariableLinks] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.self.map(v => "self" -> v.asJson),
        t.codelist.map(v => "codelist" -> v.asJson),
        t.modelClassVariable.map(v => "modelClassVariable" -> v.asJson),
        t.modelDatasetVariable.map(v => "modelDatasetVariable" -> v.asJson),
        t.parentProduct.map(v => "parentProduct" -> v.asJson),
        t.parentDataset.map(v => "parentDataset" -> v.asJson),
        t.rootItem.map(v => "rootItem" -> v.asJson),
        t.priorVersion.map(v => "priorVersion" -> v.asJson)
      ).flatten
    }
  }
  given decoderSendigDatasetVariableLinks: Decoder[SendigDatasetVariableLinks] = Decoder.instance { c =>
    for {
      self <- c.downField("self").as[Option[SendigDatasetVariableRef]]
      codelist <- c.downField("codelist").as[Option[Seq[RootCtCodelistRefElement]]]
      modelClassVariable <- c.downField("modelClassVariable").as[Option[SdtmClassVariableRef]]
      modelDatasetVariable <- c.downField("modelDatasetVariable").as[Option[SdtmDatasetVariableRef]]
      parentProduct <- c.downField("parentProduct").as[Option[SendigProductRef]]
      parentDataset <- c.downField("parentDataset").as[Option[SendigDatasetRef]]
      rootItem <- c.downField("rootItem").as[Option[RootSendigDatasetVariableRef]]
      priorVersion <- c.downField("priorVersion").as[Option[SendigDatasetVariableRef]]
    } yield SendigDatasetVariableLinks(
      self = self,
      codelist = codelist,
      modelClassVariable = modelClassVariable,
      modelDatasetVariable = modelDatasetVariable,
      parentProduct = parentProduct,
      parentDataset = parentDataset,
      rootItem = rootItem,
      priorVersion = priorVersion
    )
  }
}


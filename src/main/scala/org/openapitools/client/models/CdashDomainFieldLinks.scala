/** CDISC Library API
  * REST API Documentation for CDISC Library in production server
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: cdisc_library_support@cdisc.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** 
  * @param self 
  * @param codelist 
  * @param parentProduct 
  * @param parentClass 
  * @param parentDomain 
  * @param rootItem 
  * @param priorVersion 
  * @param sdtmDatasetMappingTargets 
  * @param sdtmigDatasetMappingTargets 
  */
case class CdashDomainFieldLinks(
    self: Option[CdashDomainFieldRef] = None,
    codelist: Option[Seq[RootCtCodelistRefElement]] = None,
    parentProduct: Option[CdashProductRef] = None,
    parentClass: Option[CdashClassRef] = None,
    parentDomain: Option[CdashDomainRef] = None,
    rootItem: Option[RootCdashDomainFieldRef] = None,
    priorVersion: Option[CdashDomainFieldRef] = None,
    sdtmDatasetMappingTargets: Option[Seq[SdtmDatasetVariableRefTarget]] = None,
    sdtmigDatasetMappingTargets: Option[Seq[SdtmigDatasetVariableRefTarget]] = None
)
  
object CdashDomainFieldLinks {
  given encoderCdashDomainFieldLinks: Encoder[CdashDomainFieldLinks] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.self.map(v => "self" -> v.asJson),
        t.codelist.map(v => "codelist" -> v.asJson),
        t.parentProduct.map(v => "parentProduct" -> v.asJson),
        t.parentClass.map(v => "parentClass" -> v.asJson),
        t.parentDomain.map(v => "parentDomain" -> v.asJson),
        t.rootItem.map(v => "rootItem" -> v.asJson),
        t.priorVersion.map(v => "priorVersion" -> v.asJson),
        t.sdtmDatasetMappingTargets.map(v => "sdtmDatasetMappingTargets" -> v.asJson),
        t.sdtmigDatasetMappingTargets.map(v => "sdtmigDatasetMappingTargets" -> v.asJson)
      ).flatten
    }
  }
  given decoderCdashDomainFieldLinks: Decoder[CdashDomainFieldLinks] = Decoder.instance { c =>
    for {
      self <- c.downField("self").as[Option[CdashDomainFieldRef]]
      codelist <- c.downField("codelist").as[Option[Seq[RootCtCodelistRefElement]]]
      parentProduct <- c.downField("parentProduct").as[Option[CdashProductRef]]
      parentClass <- c.downField("parentClass").as[Option[CdashClassRef]]
      parentDomain <- c.downField("parentDomain").as[Option[CdashDomainRef]]
      rootItem <- c.downField("rootItem").as[Option[RootCdashDomainFieldRef]]
      priorVersion <- c.downField("priorVersion").as[Option[CdashDomainFieldRef]]
      sdtmDatasetMappingTargets <- c.downField("sdtmDatasetMappingTargets").as[Option[Seq[SdtmDatasetVariableRefTarget]]]
      sdtmigDatasetMappingTargets <- c.downField("sdtmigDatasetMappingTargets").as[Option[Seq[SdtmigDatasetVariableRefTarget]]]
    } yield CdashDomainFieldLinks(
      self = self,
      codelist = codelist,
      parentProduct = parentProduct,
      parentClass = parentClass,
      parentDomain = parentDomain,
      rootItem = rootItem,
      priorVersion = priorVersion,
      sdtmDatasetMappingTargets = sdtmDatasetMappingTargets,
      sdtmigDatasetMappingTargets = sdtmigDatasetMappingTargets
    )
  }
}


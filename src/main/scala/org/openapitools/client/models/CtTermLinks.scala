/** CDISC Library API
  * REST API Documentation for CDISC Library in production server
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: cdisc_library_support@cdisc.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param self 
  * @param parentPackage 
  * @param parentCodelist 
  * @param rootItem 
  * @param priorVersion 
  */
case class CtTermLinks(
    self: Option[CtTermRef] = None,
    parentPackage: Option[CtPackageRef] = None,
    parentCodelist: Option[CtCodelistRef] = None,
    rootItem: Option[RootCtTermRef] = None,
    priorVersion: Option[CtTermRef] = None
)
  
object CtTermLinks {
  given encoderCtTermLinks: Encoder[CtTermLinks] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.self.map(v => "self" -> v.asJson),
        t.parentPackage.map(v => "parentPackage" -> v.asJson),
        t.parentCodelist.map(v => "parentCodelist" -> v.asJson),
        t.rootItem.map(v => "rootItem" -> v.asJson),
        t.priorVersion.map(v => "priorVersion" -> v.asJson)
      ).flatten
    }
  }
  given decoderCtTermLinks: Decoder[CtTermLinks] = Decoder.instance { c =>
    for {
      self <- c.downField("self").as[Option[CtTermRef]]
      parentPackage <- c.downField("parentPackage").as[Option[CtPackageRef]]
      parentCodelist <- c.downField("parentCodelist").as[Option[CtCodelistRef]]
      rootItem <- c.downField("rootItem").as[Option[RootCtTermRef]]
      priorVersion <- c.downField("priorVersion").as[Option[CtTermRef]]
    } yield CtTermLinks(
      self = self,
      parentPackage = parentPackage,
      parentCodelist = parentCodelist,
      rootItem = rootItem,
      priorVersion = priorVersion
    )
  }
}


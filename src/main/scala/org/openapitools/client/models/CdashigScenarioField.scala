/** CDISC Library API
  * REST API Documentation for CDISC Library in production server
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: cdisc_library_support@cdisc.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param ordinal 
  * @param name 
  * @param label 
  * @param definition 
  * @param questionText 
  * @param prompt 
  * @param completionInstructions 
  * @param implementationNotes 
  * @param simpleDatatype 
  * @param mappingInstructions 
  * @param core 
  * @param links 
  */
case class CdashigScenarioField(
    ordinal: Option[String] = None,
    name: Option[String] = None,
    label: Option[String] = None,
    definition: Option[String] = None,
    questionText: Option[String] = None,
    prompt: Option[String] = None,
    completionInstructions: Option[String] = None,
    implementationNotes: Option[String] = None,
    simpleDatatype: Option[String] = None,
    mappingInstructions: Option[String] = None,
    core: Option[String] = None,
    links: Option[CdashigScenarioFieldLinks] = None
)
  
object CdashigScenarioField {
  given encoderCdashigScenarioField: Encoder[CdashigScenarioField] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.ordinal.map(v => "ordinal" -> v.asJson),
        t.name.map(v => "name" -> v.asJson),
        t.label.map(v => "label" -> v.asJson),
        t.definition.map(v => "definition" -> v.asJson),
        t.questionText.map(v => "questionText" -> v.asJson),
        t.prompt.map(v => "prompt" -> v.asJson),
        t.completionInstructions.map(v => "completionInstructions" -> v.asJson),
        t.implementationNotes.map(v => "implementationNotes" -> v.asJson),
        t.simpleDatatype.map(v => "simpleDatatype" -> v.asJson),
        t.mappingInstructions.map(v => "mappingInstructions" -> v.asJson),
        t.core.map(v => "core" -> v.asJson),
        t.links.map(v => "_links" -> v.asJson)
      ).flatten
    }
  }
  given decoderCdashigScenarioField: Decoder[CdashigScenarioField] = Decoder.instance { c =>
    for {
      ordinal <- c.downField("ordinal").as[Option[String]]
      name <- c.downField("name").as[Option[String]]
      label <- c.downField("label").as[Option[String]]
      definition <- c.downField("definition").as[Option[String]]
      questionText <- c.downField("questionText").as[Option[String]]
      prompt <- c.downField("prompt").as[Option[String]]
      completionInstructions <- c.downField("completionInstructions").as[Option[String]]
      implementationNotes <- c.downField("implementationNotes").as[Option[String]]
      simpleDatatype <- c.downField("simpleDatatype").as[Option[String]]
      mappingInstructions <- c.downField("mappingInstructions").as[Option[String]]
      core <- c.downField("core").as[Option[String]]
      links <- c.downField("_links").as[Option[CdashigScenarioFieldLinks]]
    } yield CdashigScenarioField(
      ordinal = ordinal,
      name = name,
      label = label,
      definition = definition,
      questionText = questionText,
      prompt = prompt,
      completionInstructions = completionInstructions,
      implementationNotes = implementationNotes,
      simpleDatatype = simpleDatatype,
      mappingInstructions = mappingInstructions,
      core = core,
      links = links
    )
  }
}


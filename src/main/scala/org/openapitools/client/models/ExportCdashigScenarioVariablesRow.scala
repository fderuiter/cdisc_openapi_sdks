/** CDISC Library API
  * REST API Documentation for CDISC Library in production server
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: cdisc_library_support@cdisc.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** 
  * @param version 
  * @param `class` 
  * @param domain 
  * @param dataCollectionScenario 
  * @param variableOrder 
  * @param cDASHIGVariable 
  * @param cDASHIGVariableLabel 
  * @param dRAFTCDASHIGDefinition 
  * @param questionText 
  * @param prompt 
  * @param `type` 
  * @param cDASHIGCore 
  * @param caseReportFormCompletionInstructions 
  * @param sDTMIGTarget 
  * @param mappingInstructions 
  * @param controlledTerminologyCodelistName 
  * @param implementationNotes 
  */
case class ExportCdashigScenarioVariablesRow(
    version: Option[String] = None,
    `class`: Option[String] = None,
    domain: Option[String] = None,
    dataCollectionScenario: Option[String] = None,
    variableOrder: Option[String] = None,
    cDASHIGVariable: Option[String] = None,
    cDASHIGVariableLabel: Option[String] = None,
    dRAFTCDASHIGDefinition: Option[String] = None,
    questionText: Option[String] = None,
    prompt: Option[String] = None,
    `type`: Option[String] = None,
    cDASHIGCore: Option[String] = None,
    caseReportFormCompletionInstructions: Option[String] = None,
    sDTMIGTarget: Option[Seq[String]] = None,
    mappingInstructions: Option[String] = None,
    controlledTerminologyCodelistName: Option[String] = None,
    implementationNotes: Option[String] = None
)
  
object ExportCdashigScenarioVariablesRow {
  given encoderExportCdashigScenarioVariablesRow: Encoder[ExportCdashigScenarioVariablesRow] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.version.map(v => "Version" -> v.asJson),
        t.`class`.map(v => "Class" -> v.asJson),
        t.domain.map(v => "Domain" -> v.asJson),
        t.dataCollectionScenario.map(v => "Data Collection Scenario" -> v.asJson),
        t.variableOrder.map(v => "Variable Order" -> v.asJson),
        t.cDASHIGVariable.map(v => "CDASHIG Variable" -> v.asJson),
        t.cDASHIGVariableLabel.map(v => "CDASHIG Variable Label" -> v.asJson),
        t.dRAFTCDASHIGDefinition.map(v => "DRAFT CDASHIG Definition" -> v.asJson),
        t.questionText.map(v => "Question Text" -> v.asJson),
        t.prompt.map(v => "Prompt" -> v.asJson),
        t.`type`.map(v => "Type" -> v.asJson),
        t.cDASHIGCore.map(v => "CDASHIG Core" -> v.asJson),
        t.caseReportFormCompletionInstructions.map(v => "Case Report Form Completion Instructions" -> v.asJson),
        t.sDTMIGTarget.map(v => "SDTMIG Target" -> v.asJson),
        t.mappingInstructions.map(v => "Mapping Instructions" -> v.asJson),
        t.controlledTerminologyCodelistName.map(v => "Controlled Terminology Codelist Name" -> v.asJson),
        t.implementationNotes.map(v => "Implementation Notes" -> v.asJson)
      ).flatten
    }
  }
  given decoderExportCdashigScenarioVariablesRow: Decoder[ExportCdashigScenarioVariablesRow] = Decoder.instance { c =>
    for {
      version <- c.downField("Version").as[Option[String]]
      `class` <- c.downField("Class").as[Option[String]]
      domain <- c.downField("Domain").as[Option[String]]
      dataCollectionScenario <- c.downField("Data Collection Scenario").as[Option[String]]
      variableOrder <- c.downField("Variable Order").as[Option[String]]
      cDASHIGVariable <- c.downField("CDASHIG Variable").as[Option[String]]
      cDASHIGVariableLabel <- c.downField("CDASHIG Variable Label").as[Option[String]]
      dRAFTCDASHIGDefinition <- c.downField("DRAFT CDASHIG Definition").as[Option[String]]
      questionText <- c.downField("Question Text").as[Option[String]]
      prompt <- c.downField("Prompt").as[Option[String]]
      `type` <- c.downField("Type").as[Option[String]]
      cDASHIGCore <- c.downField("CDASHIG Core").as[Option[String]]
      caseReportFormCompletionInstructions <- c.downField("Case Report Form Completion Instructions").as[Option[String]]
      sDTMIGTarget <- c.downField("SDTMIG Target").as[Option[Seq[String]]]
      mappingInstructions <- c.downField("Mapping Instructions").as[Option[String]]
      controlledTerminologyCodelistName <- c.downField("Controlled Terminology Codelist Name").as[Option[String]]
      implementationNotes <- c.downField("Implementation Notes").as[Option[String]]
    } yield ExportCdashigScenarioVariablesRow(
      version = version,
      `class` = `class`,
      domain = domain,
      dataCollectionScenario = dataCollectionScenario,
      variableOrder = variableOrder,
      cDASHIGVariable = cDASHIGVariable,
      cDASHIGVariableLabel = cDASHIGVariableLabel,
      dRAFTCDASHIGDefinition = dRAFTCDASHIGDefinition,
      questionText = questionText,
      prompt = prompt,
      `type` = `type`,
      cDASHIGCore = cDASHIGCore,
      caseReportFormCompletionInstructions = caseReportFormCompletionInstructions,
      sDTMIGTarget = sDTMIGTarget,
      mappingInstructions = mappingInstructions,
      controlledTerminologyCodelistName = controlledTerminologyCodelistName,
      implementationNotes = implementationNotes
    )
  }
}


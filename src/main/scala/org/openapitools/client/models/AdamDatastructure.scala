/** CDISC Library API
  * REST API Documentation for CDISC Library in production server
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: cdisc_library_support@cdisc.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** 
  * @param ordinal 
  * @param name 
  * @param label 
  * @param description 
  * @param `class` 
  * @param links 
  * @param analysisVariableSets 
  */
case class AdamDatastructure(
    ordinal: Option[String] = None,
    name: Option[String] = None,
    label: Option[String] = None,
    description: Option[String] = None,
    `class`: Option[String] = None,
    links: Option[AdamDatastructureLinks] = None,
    analysisVariableSets: Option[Seq[AdamVarset]] = None
)
  
object AdamDatastructure {
  given encoderAdamDatastructure: Encoder[AdamDatastructure] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.ordinal.map(v => "ordinal" -> v.asJson),
        t.name.map(v => "name" -> v.asJson),
        t.label.map(v => "label" -> v.asJson),
        t.description.map(v => "description" -> v.asJson),
        t.`class`.map(v => "class" -> v.asJson),
        t.links.map(v => "_links" -> v.asJson),
        t.analysisVariableSets.map(v => "analysisVariableSets" -> v.asJson)
      ).flatten
    }
  }
  given decoderAdamDatastructure: Decoder[AdamDatastructure] = Decoder.instance { c =>
    for {
      ordinal <- c.downField("ordinal").as[Option[String]]
      name <- c.downField("name").as[Option[String]]
      label <- c.downField("label").as[Option[String]]
      description <- c.downField("description").as[Option[String]]
      `class` <- c.downField("class").as[Option[String]]
      links <- c.downField("_links").as[Option[AdamDatastructureLinks]]
      analysisVariableSets <- c.downField("analysisVariableSets").as[Option[Seq[AdamVarset]]]
    } yield AdamDatastructure(
      ordinal = ordinal,
      name = name,
      label = label,
      description = description,
      `class` = `class`,
      links = links,
      analysisVariableSets = analysisVariableSets
    )
  }
}


/** CDISC Library API
  * REST API Documentation for CDISC Library in production server
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: cdisc_library_support@cdisc.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param responseGroup 
  * @param sequence 
  * @param responsesOriginalResultCodelistCCode 
  * @param responsesOriginalResultTermCCode 
  * @param responsesOriginalResultUnitCodelistCCode 
  * @param responsesOriginalResultUnitTermCCode 
  * @param responsesStandardizedResultCodelistCCode 
  * @param responsesStandardizedResultTermCCode 
  * @param responsesStandardizedResultUnitCodelistCCode 
  * @param responsesStandardizedResultUnitTermCCode 
  */
case class ExportQrsResponses(
    responseGroup: Option[String] = None,
    sequence: Option[String] = None,
    responsesOriginalResultCodelistCCode: Option[String] = None,
    responsesOriginalResultTermCCode: Option[String] = None,
    responsesOriginalResultUnitCodelistCCode: Option[String] = None,
    responsesOriginalResultUnitTermCCode: Option[String] = None,
    responsesStandardizedResultCodelistCCode: Option[String] = None,
    responsesStandardizedResultTermCCode: Option[String] = None,
    responsesStandardizedResultUnitCodelistCCode: Option[String] = None,
    responsesStandardizedResultUnitTermCCode: Option[String] = None
)
  
object ExportQrsResponses {
  given encoderExportQrsResponses: Encoder[ExportQrsResponses] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.responseGroup.map(v => "Response Group" -> v.asJson),
        t.sequence.map(v => "Sequence" -> v.asJson),
        t.responsesOriginalResultCodelistCCode.map(v => "Response&#39;s Original Result Codelist C-Code" -> v.asJson),
        t.responsesOriginalResultTermCCode.map(v => "Response&#39;s Original Result Term C-Code" -> v.asJson),
        t.responsesOriginalResultUnitCodelistCCode.map(v => "Response&#39;s Original Result Unit Codelist C-Code" -> v.asJson),
        t.responsesOriginalResultUnitTermCCode.map(v => "Response&#39;s Original Result Unit Term C-Code" -> v.asJson),
        t.responsesStandardizedResultCodelistCCode.map(v => "Response&#39;s Standardized Result Codelist C-Code" -> v.asJson),
        t.responsesStandardizedResultTermCCode.map(v => "Response&#39;s Standardized Result Term C-Code" -> v.asJson),
        t.responsesStandardizedResultUnitCodelistCCode.map(v => "Response&#39;s Standardized Result Unit Codelist C-Code" -> v.asJson),
        t.responsesStandardizedResultUnitTermCCode.map(v => "Response&#39;s Standardized Result Unit Term C-Code" -> v.asJson)
      ).flatten
    }
  }
  given decoderExportQrsResponses: Decoder[ExportQrsResponses] = Decoder.instance { c =>
    for {
      responseGroup <- c.downField("Response Group").as[Option[String]]
      sequence <- c.downField("Sequence").as[Option[String]]
      responsesOriginalResultCodelistCCode <- c.downField("Response&#39;s Original Result Codelist C-Code").as[Option[String]]
      responsesOriginalResultTermCCode <- c.downField("Response&#39;s Original Result Term C-Code").as[Option[String]]
      responsesOriginalResultUnitCodelistCCode <- c.downField("Response&#39;s Original Result Unit Codelist C-Code").as[Option[String]]
      responsesOriginalResultUnitTermCCode <- c.downField("Response&#39;s Original Result Unit Term C-Code").as[Option[String]]
      responsesStandardizedResultCodelistCCode <- c.downField("Response&#39;s Standardized Result Codelist C-Code").as[Option[String]]
      responsesStandardizedResultTermCCode <- c.downField("Response&#39;s Standardized Result Term C-Code").as[Option[String]]
      responsesStandardizedResultUnitCodelistCCode <- c.downField("Response&#39;s Standardized Result Unit Codelist C-Code").as[Option[String]]
      responsesStandardizedResultUnitTermCCode <- c.downField("Response&#39;s Standardized Result Unit Term C-Code").as[Option[String]]
    } yield ExportQrsResponses(
      responseGroup = responseGroup,
      sequence = sequence,
      responsesOriginalResultCodelistCCode = responsesOriginalResultCodelistCCode,
      responsesOriginalResultTermCCode = responsesOriginalResultTermCCode,
      responsesOriginalResultUnitCodelistCCode = responsesOriginalResultUnitCodelistCCode,
      responsesOriginalResultUnitTermCCode = responsesOriginalResultUnitTermCCode,
      responsesStandardizedResultCodelistCCode = responsesStandardizedResultCodelistCCode,
      responsesStandardizedResultTermCCode = responsesStandardizedResultTermCCode,
      responsesStandardizedResultUnitCodelistCCode = responsesStandardizedResultUnitCodelistCCode,
      responsesStandardizedResultUnitTermCCode = responsesStandardizedResultUnitTermCCode
    )
  }
}


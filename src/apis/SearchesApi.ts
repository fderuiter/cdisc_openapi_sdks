// tslint:disable
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    DefaultErrorResponse,
    DefaultErrorResponseFromJSON,
    DefaultErrorResponseToJSON,
    DefaultSearchResponse,
    DefaultSearchResponseFromJSON,
    DefaultSearchResponseToJSON,
    DefaultSearchScopes,
    DefaultSearchScopesFromJSON,
    DefaultSearchScopesToJSON,
    MdrSearchScopesGet200Response,
    MdrSearchScopesGet200ResponseFromJSON,
    MdrSearchScopesGet200ResponseToJSON,
    ScopeValues,
    ScopeValuesFromJSON,
    ScopeValuesToJSON,
} from '../models';

export interface MdrSearchGetRequest {
    q: string;
    highlight?: string;
    start?: number;
    pageSize?: number;
    _class?: string;
    codelist?: string;
    conceptId?: string;
    core?: string;
    dataStructure?: string;
    datasetStructure?: string;
    definition?: string;
    description?: string;
    domain?: string;
    effectiveDate?: string;
    extensible?: string;
    href?: string;
    label?: string;
    measureType?: string;
    name?: string;
    preferredTerm?: string;
    product?: string;
    productGroup?: string;
    registrationStatus?: string;
    roleDescription?: string;
    sdtmTarget?: string;
    simpleDatatype?: string;
    submissionValue?: string;
    synonyms?: string;
    type?: string;
    uiHref?: string;
    valueDomain?: string;
    variableSet?: string;
    version?: string;
}

export interface MdrSearchScopesScopeGetRequest {
    scope: DefaultSearchScopes;
}


/**
 * Get Search Results Across CDISC Library
 */
function mdrSearchGetRaw<T>(requestParameters: MdrSearchGetRequest, requestConfig: runtime.TypedQueryConfig<T, DefaultSearchResponse> = {}): QueryConfig<T> {
    if (requestParameters.q === null || requestParameters.q === undefined) {
        throw new runtime.RequiredError('q','Required parameter requestParameters.q was null or undefined when calling mdrSearchGet.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.q !== undefined) {
        queryParameters['q'] = requestParameters.q;
    }


    if (requestParameters.highlight !== undefined) {
        queryParameters['highlight'] = requestParameters.highlight;
    }


    if (requestParameters.start !== undefined) {
        queryParameters['start'] = requestParameters.start;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['pageSize'] = requestParameters.pageSize;
    }


    if (requestParameters._class !== undefined) {
        queryParameters['class'] = requestParameters._class;
    }


    if (requestParameters.codelist !== undefined) {
        queryParameters['codelist'] = requestParameters.codelist;
    }


    if (requestParameters.conceptId !== undefined) {
        queryParameters['conceptId'] = requestParameters.conceptId;
    }


    if (requestParameters.core !== undefined) {
        queryParameters['core'] = requestParameters.core;
    }


    if (requestParameters.dataStructure !== undefined) {
        queryParameters['dataStructure'] = requestParameters.dataStructure;
    }


    if (requestParameters.datasetStructure !== undefined) {
        queryParameters['datasetStructure'] = requestParameters.datasetStructure;
    }


    if (requestParameters.definition !== undefined) {
        queryParameters['definition'] = requestParameters.definition;
    }


    if (requestParameters.description !== undefined) {
        queryParameters['description'] = requestParameters.description;
    }


    if (requestParameters.domain !== undefined) {
        queryParameters['domain'] = requestParameters.domain;
    }


    if (requestParameters.effectiveDate !== undefined) {
        queryParameters['effectiveDate'] = requestParameters.effectiveDate;
    }


    if (requestParameters.extensible !== undefined) {
        queryParameters['extensible'] = requestParameters.extensible;
    }


    if (requestParameters.href !== undefined) {
        queryParameters['href'] = requestParameters.href;
    }


    if (requestParameters.label !== undefined) {
        queryParameters['label'] = requestParameters.label;
    }


    if (requestParameters.measureType !== undefined) {
        queryParameters['measureType'] = requestParameters.measureType;
    }


    if (requestParameters.name !== undefined) {
        queryParameters['name'] = requestParameters.name;
    }


    if (requestParameters.preferredTerm !== undefined) {
        queryParameters['preferredTerm'] = requestParameters.preferredTerm;
    }


    if (requestParameters.product !== undefined) {
        queryParameters['product'] = requestParameters.product;
    }


    if (requestParameters.productGroup !== undefined) {
        queryParameters['productGroup'] = requestParameters.productGroup;
    }


    if (requestParameters.registrationStatus !== undefined) {
        queryParameters['registrationStatus'] = requestParameters.registrationStatus;
    }


    if (requestParameters.roleDescription !== undefined) {
        queryParameters['roleDescription'] = requestParameters.roleDescription;
    }


    if (requestParameters.sdtmTarget !== undefined) {
        queryParameters['sdtmTarget'] = requestParameters.sdtmTarget;
    }


    if (requestParameters.simpleDatatype !== undefined) {
        queryParameters['simpleDatatype'] = requestParameters.simpleDatatype;
    }


    if (requestParameters.submissionValue !== undefined) {
        queryParameters['submissionValue'] = requestParameters.submissionValue;
    }


    if (requestParameters.synonyms !== undefined) {
        queryParameters['synonyms'] = requestParameters.synonyms;
    }


    if (requestParameters.type !== undefined) {
        queryParameters['type'] = requestParameters.type;
    }


    if (requestParameters.uiHref !== undefined) {
        queryParameters['uiHref'] = requestParameters.uiHref;
    }


    if (requestParameters.valueDomain !== undefined) {
        queryParameters['valueDomain'] = requestParameters.valueDomain;
    }


    if (requestParameters.variableSet !== undefined) {
        queryParameters['variableSet'] = requestParameters.variableSet;
    }


    if (requestParameters.version !== undefined) {
        queryParameters['version'] = requestParameters.version;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/search`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(DefaultSearchResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get Search Results Across CDISC Library
*/
export function mdrSearchGet<T>(requestParameters: MdrSearchGetRequest, requestConfig?: runtime.TypedQueryConfig<T, DefaultSearchResponse>): QueryConfig<T> {
    return mdrSearchGetRaw(requestParameters, requestConfig);
}

/**
 * Get Search Results Across CDISC Library
 */
function mdrSearchScopesGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, MdrSearchScopesGet200Response> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/search/scopes`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(MdrSearchScopesGet200ResponseFromJSON(body), text);
    }

    return config;
}

/**
* Get Search Results Across CDISC Library
*/
export function mdrSearchScopesGet<T>( requestConfig?: runtime.TypedQueryConfig<T, MdrSearchScopesGet200Response>): QueryConfig<T> {
    return mdrSearchScopesGetRaw( requestConfig);
}

/**
 * Get Search Results Limited to Scope
 */
function mdrSearchScopesScopeGetRaw<T>(requestParameters: MdrSearchScopesScopeGetRequest, requestConfig: runtime.TypedQueryConfig<T, ScopeValues> = {}): QueryConfig<T> {
    if (requestParameters.scope === null || requestParameters.scope === undefined) {
        throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling mdrSearchScopesScopeGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/search/scopes/{scope}`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters.scope))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ScopeValuesFromJSON(body), text);
    }

    return config;
}

/**
* Get Search Results Limited to Scope
*/
export function mdrSearchScopesScopeGet<T>(requestParameters: MdrSearchScopesScopeGetRequest, requestConfig?: runtime.TypedQueryConfig<T, ScopeValues>): QueryConfig<T> {
    return mdrSearchScopesScopeGetRaw(requestParameters, requestConfig);
}


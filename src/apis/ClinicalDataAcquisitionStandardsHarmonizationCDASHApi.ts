// tslint:disable
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    CdashClass,
    CdashClassFromJSON,
    CdashClassToJSON,
    CdashClassDomains,
    CdashClassDomainsFromJSON,
    CdashClassDomainsToJSON,
    CdashClassField,
    CdashClassFieldFromJSON,
    CdashClassFieldToJSON,
    CdashDomain,
    CdashDomainFromJSON,
    CdashDomainToJSON,
    CdashDomainField,
    CdashDomainFieldFromJSON,
    CdashDomainFieldToJSON,
    CdashDomainFields,
    CdashDomainFieldsFromJSON,
    CdashDomainFieldsToJSON,
    CdashProduct,
    CdashProductFromJSON,
    CdashProductToJSON,
    CdashProductClasses,
    CdashProductClassesFromJSON,
    CdashProductClassesToJSON,
    CdashProductDomains,
    CdashProductDomainsFromJSON,
    CdashProductDomainsToJSON,
    DefaultErrorResponse,
    DefaultErrorResponseFromJSON,
    DefaultErrorResponseToJSON,
    ExportCdashTable,
    ExportCdashTableFromJSON,
    ExportCdashTableToJSON,
    RootCdashClassField,
    RootCdashClassFieldFromJSON,
    RootCdashClassFieldToJSON,
    RootCdashDomainField,
    RootCdashDomainFieldFromJSON,
    RootCdashDomainFieldToJSON,
    XmlCdashClass,
    XmlCdashClassFromJSON,
    XmlCdashClassToJSON,
    XmlCdashClassDomains,
    XmlCdashClassDomainsFromJSON,
    XmlCdashClassDomainsToJSON,
    XmlCdashClassField,
    XmlCdashClassFieldFromJSON,
    XmlCdashClassFieldToJSON,
    XmlCdashDomain,
    XmlCdashDomainFromJSON,
    XmlCdashDomainToJSON,
    XmlCdashDomainField,
    XmlCdashDomainFieldFromJSON,
    XmlCdashDomainFieldToJSON,
    XmlCdashDomainFields,
    XmlCdashDomainFieldsFromJSON,
    XmlCdashDomainFieldsToJSON,
    XmlCdashProduct,
    XmlCdashProductFromJSON,
    XmlCdashProductToJSON,
    XmlCdashProductClasses,
    XmlCdashProductClassesFromJSON,
    XmlCdashProductClassesToJSON,
    XmlCdashProductDomains,
    XmlCdashProductDomainsFromJSON,
    XmlCdashProductDomainsToJSON,
    XmlRootCdashClassField,
    XmlRootCdashClassFieldFromJSON,
    XmlRootCdashClassFieldToJSON,
    XmlRootCdashDomainField,
    XmlRootCdashDomainFieldFromJSON,
    XmlRootCdashDomainFieldToJSON,
} from '../models';

export interface MdrCdashVersionClassesClassDomainsGetRequest {
    version: string;
    _class: string;
}

export interface MdrCdashVersionClassesClassFieldsFieldGetRequest {
    version: string;
    _class: string;
    field: string;
}

export interface MdrCdashVersionClassesClassGetRequest {
    version: string;
    _class: string;
}

export interface MdrCdashVersionClassesGetRequest {
    version: string;
}

export interface MdrCdashVersionDomainsDomainFieldsFieldGetRequest {
    version: string;
    domain: string;
    field: string;
}

export interface MdrCdashVersionDomainsDomainFieldsGetRequest {
    version: string;
    domain: string;
}

export interface MdrCdashVersionDomainsDomainGetRequest {
    version: string;
    domain: string;
}

export interface MdrCdashVersionDomainsGetRequest {
    version: string;
}

export interface MdrCdashVersionGetRequest {
    version: string;
}

export interface MdrRootCdashClassesClassFieldsFieldGetRequest {
    _class: string;
    field: string;
}

export interface MdrRootCdashDomainsDomainFieldsFieldGetRequest {
    domain: string;
    field: string;
}


/**
 * Get CDASH Class Domain List
 */
function mdrCdashVersionClassesClassDomainsGetRaw<T>(requestParameters: MdrCdashVersionClassesClassDomainsGetRequest, requestConfig: runtime.TypedQueryConfig<T, CdashClassDomains> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrCdashVersionClassesClassDomainsGet.');
    }

    if (requestParameters._class === null || requestParameters._class === undefined) {
        throw new runtime.RequiredError('_class','Required parameter requestParameters._class was null or undefined when calling mdrCdashVersionClassesClassDomainsGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/cdash/{version}/classes/{class}/domains`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"class"}}`, encodeURIComponent(String(requestParameters._class))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CdashClassDomainsFromJSON(body), text);
    }

    return config;
}

/**
* Get CDASH Class Domain List
*/
export function mdrCdashVersionClassesClassDomainsGet<T>(requestParameters: MdrCdashVersionClassesClassDomainsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CdashClassDomains>): QueryConfig<T> {
    return mdrCdashVersionClassesClassDomainsGetRaw(requestParameters, requestConfig);
}

/**
 * Get CDASH Class Field
 */
function mdrCdashVersionClassesClassFieldsFieldGetRaw<T>(requestParameters: MdrCdashVersionClassesClassFieldsFieldGetRequest, requestConfig: runtime.TypedQueryConfig<T, CdashClassField> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrCdashVersionClassesClassFieldsFieldGet.');
    }

    if (requestParameters._class === null || requestParameters._class === undefined) {
        throw new runtime.RequiredError('_class','Required parameter requestParameters._class was null or undefined when calling mdrCdashVersionClassesClassFieldsFieldGet.');
    }

    if (requestParameters.field === null || requestParameters.field === undefined) {
        throw new runtime.RequiredError('field','Required parameter requestParameters.field was null or undefined when calling mdrCdashVersionClassesClassFieldsFieldGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/cdash/{version}/classes/{class}/fields/{field}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"class"}}`, encodeURIComponent(String(requestParameters._class))).replace(`{${"field"}}`, encodeURIComponent(String(requestParameters.field))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CdashClassFieldFromJSON(body), text);
    }

    return config;
}

/**
* Get CDASH Class Field
*/
export function mdrCdashVersionClassesClassFieldsFieldGet<T>(requestParameters: MdrCdashVersionClassesClassFieldsFieldGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CdashClassField>): QueryConfig<T> {
    return mdrCdashVersionClassesClassFieldsFieldGetRaw(requestParameters, requestConfig);
}

/**
 * Get CDASH Class
 */
function mdrCdashVersionClassesClassGetRaw<T>(requestParameters: MdrCdashVersionClassesClassGetRequest, requestConfig: runtime.TypedQueryConfig<T, CdashClass> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrCdashVersionClassesClassGet.');
    }

    if (requestParameters._class === null || requestParameters._class === undefined) {
        throw new runtime.RequiredError('_class','Required parameter requestParameters._class was null or undefined when calling mdrCdashVersionClassesClassGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/cdash/{version}/classes/{class}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"class"}}`, encodeURIComponent(String(requestParameters._class))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CdashClassFromJSON(body), text);
    }

    return config;
}

/**
* Get CDASH Class
*/
export function mdrCdashVersionClassesClassGet<T>(requestParameters: MdrCdashVersionClassesClassGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CdashClass>): QueryConfig<T> {
    return mdrCdashVersionClassesClassGetRaw(requestParameters, requestConfig);
}

/**
 * Get CDASH Class List
 */
function mdrCdashVersionClassesGetRaw<T>(requestParameters: MdrCdashVersionClassesGetRequest, requestConfig: runtime.TypedQueryConfig<T, CdashProductClasses> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrCdashVersionClassesGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/cdash/{version}/classes`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CdashProductClassesFromJSON(body), text);
    }

    return config;
}

/**
* Get CDASH Class List
*/
export function mdrCdashVersionClassesGet<T>(requestParameters: MdrCdashVersionClassesGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CdashProductClasses>): QueryConfig<T> {
    return mdrCdashVersionClassesGetRaw(requestParameters, requestConfig);
}

/**
 * Get CDASH Domain Field
 */
function mdrCdashVersionDomainsDomainFieldsFieldGetRaw<T>(requestParameters: MdrCdashVersionDomainsDomainFieldsFieldGetRequest, requestConfig: runtime.TypedQueryConfig<T, CdashDomainField> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrCdashVersionDomainsDomainFieldsFieldGet.');
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
        throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling mdrCdashVersionDomainsDomainFieldsFieldGet.');
    }

    if (requestParameters.field === null || requestParameters.field === undefined) {
        throw new runtime.RequiredError('field','Required parameter requestParameters.field was null or undefined when calling mdrCdashVersionDomainsDomainFieldsFieldGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/cdash/{version}/domains/{domain}/fields/{field}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"field"}}`, encodeURIComponent(String(requestParameters.field))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CdashDomainFieldFromJSON(body), text);
    }

    return config;
}

/**
* Get CDASH Domain Field
*/
export function mdrCdashVersionDomainsDomainFieldsFieldGet<T>(requestParameters: MdrCdashVersionDomainsDomainFieldsFieldGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CdashDomainField>): QueryConfig<T> {
    return mdrCdashVersionDomainsDomainFieldsFieldGetRaw(requestParameters, requestConfig);
}

/**
 * Get CDASH Domain Field List
 */
function mdrCdashVersionDomainsDomainFieldsGetRaw<T>(requestParameters: MdrCdashVersionDomainsDomainFieldsGetRequest, requestConfig: runtime.TypedQueryConfig<T, CdashDomainFields> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrCdashVersionDomainsDomainFieldsGet.');
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
        throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling mdrCdashVersionDomainsDomainFieldsGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/cdash/{version}/domains/{domain}/fields`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CdashDomainFieldsFromJSON(body), text);
    }

    return config;
}

/**
* Get CDASH Domain Field List
*/
export function mdrCdashVersionDomainsDomainFieldsGet<T>(requestParameters: MdrCdashVersionDomainsDomainFieldsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CdashDomainFields>): QueryConfig<T> {
    return mdrCdashVersionDomainsDomainFieldsGetRaw(requestParameters, requestConfig);
}

/**
 * Get CDASH Domain
 */
function mdrCdashVersionDomainsDomainGetRaw<T>(requestParameters: MdrCdashVersionDomainsDomainGetRequest, requestConfig: runtime.TypedQueryConfig<T, CdashDomain> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrCdashVersionDomainsDomainGet.');
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
        throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling mdrCdashVersionDomainsDomainGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/cdash/{version}/domains/{domain}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CdashDomainFromJSON(body), text);
    }

    return config;
}

/**
* Get CDASH Domain
*/
export function mdrCdashVersionDomainsDomainGet<T>(requestParameters: MdrCdashVersionDomainsDomainGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CdashDomain>): QueryConfig<T> {
    return mdrCdashVersionDomainsDomainGetRaw(requestParameters, requestConfig);
}

/**
 * Get CDASH Domain List
 */
function mdrCdashVersionDomainsGetRaw<T>(requestParameters: MdrCdashVersionDomainsGetRequest, requestConfig: runtime.TypedQueryConfig<T, CdashProductDomains> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrCdashVersionDomainsGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/cdash/{version}/domains`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CdashProductDomainsFromJSON(body), text);
    }

    return config;
}

/**
* Get CDASH Domain List
*/
export function mdrCdashVersionDomainsGet<T>(requestParameters: MdrCdashVersionDomainsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CdashProductDomains>): QueryConfig<T> {
    return mdrCdashVersionDomainsGetRaw(requestParameters, requestConfig);
}

/**
 * Get CDASH Product
 */
function mdrCdashVersionGetRaw<T>(requestParameters: MdrCdashVersionGetRequest, requestConfig: runtime.TypedQueryConfig<T, CdashProduct> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrCdashVersionGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/cdash/{version}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CdashProductFromJSON(body), text);
    }

    return config;
}

/**
* Get CDASH Product
*/
export function mdrCdashVersionGet<T>(requestParameters: MdrCdashVersionGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CdashProduct>): QueryConfig<T> {
    return mdrCdashVersionGetRaw(requestParameters, requestConfig);
}

/**
 * Get Root CDASH Class Field
 */
function mdrRootCdashClassesClassFieldsFieldGetRaw<T>(requestParameters: MdrRootCdashClassesClassFieldsFieldGetRequest, requestConfig: runtime.TypedQueryConfig<T, RootCdashClassField> = {}): QueryConfig<T> {
    if (requestParameters._class === null || requestParameters._class === undefined) {
        throw new runtime.RequiredError('_class','Required parameter requestParameters._class was null or undefined when calling mdrRootCdashClassesClassFieldsFieldGet.');
    }

    if (requestParameters.field === null || requestParameters.field === undefined) {
        throw new runtime.RequiredError('field','Required parameter requestParameters.field was null or undefined when calling mdrRootCdashClassesClassFieldsFieldGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/root/cdash/classes/{class}/fields/{field}`.replace(`{${"class"}}`, encodeURIComponent(String(requestParameters._class))).replace(`{${"field"}}`, encodeURIComponent(String(requestParameters.field))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(RootCdashClassFieldFromJSON(body), text);
    }

    return config;
}

/**
* Get Root CDASH Class Field
*/
export function mdrRootCdashClassesClassFieldsFieldGet<T>(requestParameters: MdrRootCdashClassesClassFieldsFieldGetRequest, requestConfig?: runtime.TypedQueryConfig<T, RootCdashClassField>): QueryConfig<T> {
    return mdrRootCdashClassesClassFieldsFieldGetRaw(requestParameters, requestConfig);
}

/**
 * Get Root CDASH Domain Field
 */
function mdrRootCdashDomainsDomainFieldsFieldGetRaw<T>(requestParameters: MdrRootCdashDomainsDomainFieldsFieldGetRequest, requestConfig: runtime.TypedQueryConfig<T, RootCdashDomainField> = {}): QueryConfig<T> {
    if (requestParameters.domain === null || requestParameters.domain === undefined) {
        throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling mdrRootCdashDomainsDomainFieldsFieldGet.');
    }

    if (requestParameters.field === null || requestParameters.field === undefined) {
        throw new runtime.RequiredError('field','Required parameter requestParameters.field was null or undefined when calling mdrRootCdashDomainsDomainFieldsFieldGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/root/cdash/domains/{domain}/fields/{field}`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"field"}}`, encodeURIComponent(String(requestParameters.field))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(RootCdashDomainFieldFromJSON(body), text);
    }

    return config;
}

/**
* Get Root CDASH Domain Field
*/
export function mdrRootCdashDomainsDomainFieldsFieldGet<T>(requestParameters: MdrRootCdashDomainsDomainFieldsFieldGetRequest, requestConfig?: runtime.TypedQueryConfig<T, RootCdashDomainField>): QueryConfig<T> {
    return mdrRootCdashDomainsDomainFieldsFieldGetRaw(requestParameters, requestConfig);
}


/*
 * CDISC Library API
 *
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`mdr_ct_packages_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrCtPackagesGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_ct_packages_package_codelists_codelist_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrCtPackagesPackageCodelistsCodelistGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_ct_packages_package_codelists_codelist_terms_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrCtPackagesPackageCodelistsCodelistTermsGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_ct_packages_package_codelists_codelist_terms_term_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrCtPackagesPackageCodelistsCodelistTermsTermGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_ct_packages_package_codelists_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrCtPackagesPackageCodelistsGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_ct_packages_product_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrCtPackagesProductGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_root_ct_product_group_codelists_codelist_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrRootCtProductGroupCodelistsCodelistGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_root_ct_product_group_codelists_codelist_terms_term_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrRootCtProductGroupCodelistsCodelistTermsTermGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}


/// Get CDISC Library CT Package List
pub async fn mdr_ct_packages_get(configuration: &configuration::Configuration, ) -> Result<models::CtPackages, Error<MdrCtPackagesGetError>> {

    let uri_str = format!("{}/mdr/ct/packages", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CtPackages`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CtPackages`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrCtPackagesGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get CDISC Library CT Package Codelist
pub async fn mdr_ct_packages_package_codelists_codelist_get(configuration: &configuration::Configuration, package: &str, codelist: &str) -> Result<models::CtCodelist, Error<MdrCtPackagesPackageCodelistsCodelistGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_package = package;
    let p_path_codelist = codelist;

    let uri_str = format!("{}/mdr/ct/packages/{package}/codelists/{codelist}", configuration.base_path, package=crate::apis::urlencode(p_path_package), codelist=crate::apis::urlencode(p_path_codelist));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CtCodelist`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CtCodelist`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrCtPackagesPackageCodelistsCodelistGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get CDISC Library CT Package Codelist Term List
pub async fn mdr_ct_packages_package_codelists_codelist_terms_get(configuration: &configuration::Configuration, package: &str, codelist: &str) -> Result<models::CtCodelistTerms, Error<MdrCtPackagesPackageCodelistsCodelistTermsGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_package = package;
    let p_path_codelist = codelist;

    let uri_str = format!("{}/mdr/ct/packages/{package}/codelists/{codelist}/terms", configuration.base_path, package=crate::apis::urlencode(p_path_package), codelist=crate::apis::urlencode(p_path_codelist));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CtCodelistTerms`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CtCodelistTerms`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrCtPackagesPackageCodelistsCodelistTermsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get CDISC Library CT Package Codelist Term
pub async fn mdr_ct_packages_package_codelists_codelist_terms_term_get(configuration: &configuration::Configuration, package: &str, codelist: &str, term: &str) -> Result<models::CtTerm, Error<MdrCtPackagesPackageCodelistsCodelistTermsTermGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_package = package;
    let p_path_codelist = codelist;
    let p_path_term = term;

    let uri_str = format!("{}/mdr/ct/packages/{package}/codelists/{codelist}/terms/{term}", configuration.base_path, package=crate::apis::urlencode(p_path_package), codelist=crate::apis::urlencode(p_path_codelist), term=crate::apis::urlencode(p_path_term));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CtTerm`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CtTerm`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrCtPackagesPackageCodelistsCodelistTermsTermGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get CDISC Library CT Package Codelist List
pub async fn mdr_ct_packages_package_codelists_get(configuration: &configuration::Configuration, package: &str) -> Result<models::CtPackageCodelists, Error<MdrCtPackagesPackageCodelistsGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_package = package;

    let uri_str = format!("{}/mdr/ct/packages/{package}/codelists", configuration.base_path, package=crate::apis::urlencode(p_path_package));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CtPackageCodelists`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CtPackageCodelists`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrCtPackagesPackageCodelistsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get CDISC Library CT Package
pub async fn mdr_ct_packages_product_get(configuration: &configuration::Configuration, product: &str) -> Result<models::CtPackage, Error<MdrCtPackagesProductGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_product = product;

    let uri_str = format!("{}/mdr/ct/packages/{product}", configuration.base_path, product=crate::apis::urlencode(p_path_product));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CtPackage`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CtPackage`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrCtPackagesProductGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get CDISC Library Root CT Codelist
pub async fn mdr_root_ct_product_group_codelists_codelist_get(configuration: &configuration::Configuration, product_group: &str, codelist: &str) -> Result<models::RootCtCodelist, Error<MdrRootCtProductGroupCodelistsCodelistGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_product_group = product_group;
    let p_path_codelist = codelist;

    let uri_str = format!("{}/mdr/root/ct/{productGroup}/codelists/{codelist}", configuration.base_path, productGroup=crate::apis::urlencode(p_path_product_group), codelist=crate::apis::urlencode(p_path_codelist));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RootCtCodelist`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RootCtCodelist`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrRootCtProductGroupCodelistsCodelistGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get CDISC Library Root CT Term
pub async fn mdr_root_ct_product_group_codelists_codelist_terms_term_get(configuration: &configuration::Configuration, product_group: &str, codelist: &str, term: &str) -> Result<models::RootCtTerm, Error<MdrRootCtProductGroupCodelistsCodelistTermsTermGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_product_group = product_group;
    let p_path_codelist = codelist;
    let p_path_term = term;

    let uri_str = format!("{}/mdr/root/ct/{productGroup}/codelists/{codelist}/terms/{term}", configuration.base_path, productGroup=crate::apis::urlencode(p_path_product_group), codelist=crate::apis::urlencode(p_path_codelist), term=crate::apis::urlencode(p_path_term));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RootCtTerm`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RootCtTerm`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrRootCtProductGroupCodelistsCodelistTermsTermGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}


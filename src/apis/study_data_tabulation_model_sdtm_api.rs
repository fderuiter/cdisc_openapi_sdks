/*
 * CDISC Library API
 *
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`mdr_root_sdtm_classes_class_variables_var_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrRootSdtmClassesClassVariablesVarGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_root_sdtm_datasets_dataset_variables_var_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrRootSdtmDatasetsDatasetVariablesVarGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_sdtm_version_classes_class_datasets_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrSdtmVersionClassesClassDatasetsGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_sdtm_version_classes_class_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrSdtmVersionClassesClassGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_sdtm_version_classes_class_variables_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrSdtmVersionClassesClassVariablesGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_sdtm_version_classes_class_variables_var_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrSdtmVersionClassesClassVariablesVarGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_sdtm_version_classes_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrSdtmVersionClassesGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_sdtm_version_datasets_dataset_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrSdtmVersionDatasetsDatasetGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_sdtm_version_datasets_dataset_variables_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrSdtmVersionDatasetsDatasetVariablesGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_sdtm_version_datasets_dataset_variables_var_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrSdtmVersionDatasetsDatasetVariablesVarGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_sdtm_version_datasets_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrSdtmVersionDatasetsGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_sdtm_version_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrSdtmVersionGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}


/// Get Root of SDTM Class Variable
pub async fn mdr_root_sdtm_classes_class_variables_var_get(configuration: &configuration::Configuration, class: &str, var: &str) -> Result<models::RootSdtmClassVariable, Error<MdrRootSdtmClassesClassVariablesVarGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_class = class;
    let p_path_var = var;

    let uri_str = format!("{}/mdr/root/sdtm/classes/{class}/variables/{var}", configuration.base_path, class=crate::apis::urlencode(p_path_class), var=crate::apis::urlencode(p_path_var));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RootSdtmClassVariable`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RootSdtmClassVariable`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrRootSdtmClassesClassVariablesVarGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get Root SDTM Dataset Variable
pub async fn mdr_root_sdtm_datasets_dataset_variables_var_get(configuration: &configuration::Configuration, dataset: &str, var: &str) -> Result<models::RootSdtmDatasetVariable, Error<MdrRootSdtmDatasetsDatasetVariablesVarGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_dataset = dataset;
    let p_path_var = var;

    let uri_str = format!("{}/mdr/root/sdtm/datasets/{dataset}/variables/{var}", configuration.base_path, dataset=crate::apis::urlencode(p_path_dataset), var=crate::apis::urlencode(p_path_var));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RootSdtmDatasetVariable`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RootSdtmDatasetVariable`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrRootSdtmDatasetsDatasetVariablesVarGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get SDTM Class Dataset List
pub async fn mdr_sdtm_version_classes_class_datasets_get(configuration: &configuration::Configuration, version: &str, class: &str) -> Result<models::SdtmClassDatasets, Error<MdrSdtmVersionClassesClassDatasetsGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_version = version;
    let p_path_class = class;

    let uri_str = format!("{}/mdr/sdtm/{version}/classes/{class}/datasets", configuration.base_path, version=crate::apis::urlencode(p_path_version), class=crate::apis::urlencode(p_path_class));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SdtmClassDatasets`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SdtmClassDatasets`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrSdtmVersionClassesClassDatasetsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get SDTM Class
pub async fn mdr_sdtm_version_classes_class_get(configuration: &configuration::Configuration, version: &str, class: &str) -> Result<models::SdtmClass, Error<MdrSdtmVersionClassesClassGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_version = version;
    let p_path_class = class;

    let uri_str = format!("{}/mdr/sdtm/{version}/classes/{class}", configuration.base_path, version=crate::apis::urlencode(p_path_version), class=crate::apis::urlencode(p_path_class));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SdtmClass`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SdtmClass`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrSdtmVersionClassesClassGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get SDTM Class Variable List
pub async fn mdr_sdtm_version_classes_class_variables_get(configuration: &configuration::Configuration, version: &str, class: &str) -> Result<models::SdtmClassVariables, Error<MdrSdtmVersionClassesClassVariablesGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_version = version;
    let p_path_class = class;

    let uri_str = format!("{}/mdr/sdtm/{version}/classes/{class}/variables", configuration.base_path, version=crate::apis::urlencode(p_path_version), class=crate::apis::urlencode(p_path_class));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SdtmClassVariables`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SdtmClassVariables`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrSdtmVersionClassesClassVariablesGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get SDTM Class Variable
pub async fn mdr_sdtm_version_classes_class_variables_var_get(configuration: &configuration::Configuration, version: &str, class: &str, var: &str) -> Result<models::SdtmClassVariable, Error<MdrSdtmVersionClassesClassVariablesVarGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_version = version;
    let p_path_class = class;
    let p_path_var = var;

    let uri_str = format!("{}/mdr/sdtm/{version}/classes/{class}/variables/{var}", configuration.base_path, version=crate::apis::urlencode(p_path_version), class=crate::apis::urlencode(p_path_class), var=crate::apis::urlencode(p_path_var));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SdtmClassVariable`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SdtmClassVariable`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrSdtmVersionClassesClassVariablesVarGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get SDTM Class List
pub async fn mdr_sdtm_version_classes_get(configuration: &configuration::Configuration, version: &str) -> Result<models::SdtmClasses, Error<MdrSdtmVersionClassesGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_version = version;

    let uri_str = format!("{}/mdr/sdtm/{version}/classes", configuration.base_path, version=crate::apis::urlencode(p_path_version));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SdtmClasses`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SdtmClasses`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrSdtmVersionClassesGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get SDTM Dataset
pub async fn mdr_sdtm_version_datasets_dataset_get(configuration: &configuration::Configuration, version: &str, dataset: &str) -> Result<models::SdtmDataset, Error<MdrSdtmVersionDatasetsDatasetGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_version = version;
    let p_path_dataset = dataset;

    let uri_str = format!("{}/mdr/sdtm/{version}/datasets/{dataset}", configuration.base_path, version=crate::apis::urlencode(p_path_version), dataset=crate::apis::urlencode(p_path_dataset));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SdtmDataset`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SdtmDataset`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrSdtmVersionDatasetsDatasetGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get SDTM Dataset Variable List
pub async fn mdr_sdtm_version_datasets_dataset_variables_get(configuration: &configuration::Configuration, version: &str, dataset: &str) -> Result<models::SdtmDatasetVariables, Error<MdrSdtmVersionDatasetsDatasetVariablesGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_version = version;
    let p_path_dataset = dataset;

    let uri_str = format!("{}/mdr/sdtm/{version}/datasets/{dataset}/variables", configuration.base_path, version=crate::apis::urlencode(p_path_version), dataset=crate::apis::urlencode(p_path_dataset));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SdtmDatasetVariables`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SdtmDatasetVariables`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrSdtmVersionDatasetsDatasetVariablesGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get SDTM Dataset Variable
pub async fn mdr_sdtm_version_datasets_dataset_variables_var_get(configuration: &configuration::Configuration, version: &str, dataset: &str, var: &str) -> Result<models::SdtmDatasetVariable, Error<MdrSdtmVersionDatasetsDatasetVariablesVarGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_version = version;
    let p_path_dataset = dataset;
    let p_path_var = var;

    let uri_str = format!("{}/mdr/sdtm/{version}/datasets/{dataset}/variables/{var}", configuration.base_path, version=crate::apis::urlencode(p_path_version), dataset=crate::apis::urlencode(p_path_dataset), var=crate::apis::urlencode(p_path_var));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SdtmDatasetVariable`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SdtmDatasetVariable`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrSdtmVersionDatasetsDatasetVariablesVarGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get SDTM Dataset List
pub async fn mdr_sdtm_version_datasets_get(configuration: &configuration::Configuration, version: &str) -> Result<models::SdtmDatasets, Error<MdrSdtmVersionDatasetsGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_version = version;

    let uri_str = format!("{}/mdr/sdtm/{version}/datasets", configuration.base_path, version=crate::apis::urlencode(p_path_version));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SdtmDatasets`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SdtmDatasets`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrSdtmVersionDatasetsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get SDTM product
pub async fn mdr_sdtm_version_get(configuration: &configuration::Configuration, version: &str) -> Result<models::SdtmProduct, Error<MdrSdtmVersionGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_version = version;

    let uri_str = format!("{}/mdr/sdtm/{version}", configuration.base_path, version=crate::apis::urlencode(p_path_version));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SdtmProduct`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SdtmProduct`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrSdtmVersionGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}


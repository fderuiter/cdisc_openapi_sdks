/*
 * CDISC Library API
 *
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`mdr_adam_product_datastructures_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrAdamProductDatastructuresGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_adam_product_datastructures_structure_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrAdamProductDatastructuresStructureGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_adam_product_datastructures_structure_variables_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrAdamProductDatastructuresStructureVariablesGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_adam_product_datastructures_structure_variables_var_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrAdamProductDatastructuresStructureVariablesVarGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_adam_product_datastructures_structure_varsets_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrAdamProductDatastructuresStructureVarsetsGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_adam_product_datastructures_structure_varsets_varset_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrAdamProductDatastructuresStructureVarsetsVarsetGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_adam_product_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrAdamProductGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}


/// Get ADaM Data Structure List
pub async fn mdr_adam_product_datastructures_get(configuration: &configuration::Configuration, product: &str) -> Result<models::AdamProductDatastructures, Error<MdrAdamProductDatastructuresGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_product = product;

    let uri_str = format!("{}/mdr/adam/{product}/datastructures", configuration.base_path, product=crate::apis::urlencode(p_path_product));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AdamProductDatastructures`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AdamProductDatastructures`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrAdamProductDatastructuresGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get ADaM Data Structure
pub async fn mdr_adam_product_datastructures_structure_get(configuration: &configuration::Configuration, product: &str, structure: &str) -> Result<models::AdamDatastructure, Error<MdrAdamProductDatastructuresStructureGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_product = product;
    let p_path_structure = structure;

    let uri_str = format!("{}/mdr/adam/{product}/datastructures/{structure}", configuration.base_path, product=crate::apis::urlencode(p_path_product), structure=crate::apis::urlencode(p_path_structure));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AdamDatastructure`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AdamDatastructure`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrAdamProductDatastructuresStructureGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get ADaM Variable List
pub async fn mdr_adam_product_datastructures_structure_variables_get(configuration: &configuration::Configuration, product: &str, structure: &str) -> Result<models::AdamDatastructureVariables, Error<MdrAdamProductDatastructuresStructureVariablesGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_product = product;
    let p_path_structure = structure;

    let uri_str = format!("{}/mdr/adam/{product}/datastructures/{structure}/variables", configuration.base_path, product=crate::apis::urlencode(p_path_product), structure=crate::apis::urlencode(p_path_structure));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AdamDatastructureVariables`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AdamDatastructureVariables`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrAdamProductDatastructuresStructureVariablesGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get ADaM Variable
pub async fn mdr_adam_product_datastructures_structure_variables_var_get(configuration: &configuration::Configuration, product: &str, structure: &str, var: &str) -> Result<models::AdamVariable, Error<MdrAdamProductDatastructuresStructureVariablesVarGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_product = product;
    let p_path_structure = structure;
    let p_path_var = var;

    let uri_str = format!("{}/mdr/adam/{product}/datastructures/{structure}/variables/{var}", configuration.base_path, product=crate::apis::urlencode(p_path_product), structure=crate::apis::urlencode(p_path_structure), var=crate::apis::urlencode(p_path_var));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AdamVariable`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AdamVariable`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrAdamProductDatastructuresStructureVariablesVarGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get ADaM Variable Set List
pub async fn mdr_adam_product_datastructures_structure_varsets_get(configuration: &configuration::Configuration, product: &str, structure: &str) -> Result<models::AdamDatastructureVarsets, Error<MdrAdamProductDatastructuresStructureVarsetsGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_product = product;
    let p_path_structure = structure;

    let uri_str = format!("{}/mdr/adam/{product}/datastructures/{structure}/varsets", configuration.base_path, product=crate::apis::urlencode(p_path_product), structure=crate::apis::urlencode(p_path_structure));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AdamDatastructureVarsets`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AdamDatastructureVarsets`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrAdamProductDatastructuresStructureVarsetsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get ADaM Variable Set
pub async fn mdr_adam_product_datastructures_structure_varsets_varset_get(configuration: &configuration::Configuration, product: &str, structure: &str, varset: &str) -> Result<models::AdamVarset, Error<MdrAdamProductDatastructuresStructureVarsetsVarsetGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_product = product;
    let p_path_structure = structure;
    let p_path_varset = varset;

    let uri_str = format!("{}/mdr/adam/{product}/datastructures/{structure}/varsets/{varset}", configuration.base_path, product=crate::apis::urlencode(p_path_product), structure=crate::apis::urlencode(p_path_structure), varset=crate::apis::urlencode(p_path_varset));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AdamVarset`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AdamVarset`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrAdamProductDatastructuresStructureVarsetsVarsetGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get ADaM Product
pub async fn mdr_adam_product_get(configuration: &configuration::Configuration, product: &str) -> Result<models::AdamProduct, Error<MdrAdamProductGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_product = product;

    let uri_str = format!("{}/mdr/adam/{product}", configuration.base_path, product=crate::apis::urlencode(p_path_product));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::AdamProduct`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::AdamProduct`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrAdamProductGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}


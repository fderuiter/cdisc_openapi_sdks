// tslint:disable
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    DefaultErrorResponse,
    DefaultErrorResponseFromJSON,
    DefaultErrorResponseToJSON,
    ExportQrsItemsTable,
    ExportQrsItemsTableFromJSON,
    ExportQrsItemsTableToJSON,
    ExportQrsWorkbook,
    ExportQrsWorkbookFromJSON,
    ExportQrsWorkbookToJSON,
    QrsItem,
    QrsItemFromJSON,
    QrsItemToJSON,
    QrsItems,
    QrsItemsFromJSON,
    QrsItemsToJSON,
    QrsProduct,
    QrsProductFromJSON,
    QrsProductToJSON,
    QrsResponsegroup,
    QrsResponsegroupFromJSON,
    QrsResponsegroupToJSON,
    QrsResponsegroups,
    QrsResponsegroupsFromJSON,
    QrsResponsegroupsToJSON,
    XmlQrsItem,
    XmlQrsItemFromJSON,
    XmlQrsItemToJSON,
    XmlQrsItems,
    XmlQrsItemsFromJSON,
    XmlQrsItemsToJSON,
    XmlQrsProduct,
    XmlQrsProductFromJSON,
    XmlQrsProductToJSON,
    XmlQrsResponsegroup,
    XmlQrsResponsegroupFromJSON,
    XmlQrsResponsegroupToJSON,
    XmlQrsResponsegroups,
    XmlQrsResponsegroupsFromJSON,
    XmlQrsResponsegroupsToJSON,
} from '../models';

export interface MdrQrsMeasureVersionGetRequest {
    measure: string;
    version: string;
}

export interface MdrQrsMeasureVersionItemsGetRequest {
    measure: string;
    version: string;
}

export interface MdrQrsMeasureVersionItemsItemGetRequest {
    measure: string;
    version: string;
    item: string;
}

export interface MdrQrsMeasureVersionResponsegroupsGetRequest {
    measure: string;
    version: string;
}

export interface MdrQrsMeasureVersionResponsegroupsResponsegroupGetRequest {
    measure: string;
    version: string;
    responsegroup: string;
}


/**
 * Get QRS Product
 */
function mdrQrsMeasureVersionGetRaw<T>(requestParameters: MdrQrsMeasureVersionGetRequest, requestConfig: runtime.TypedQueryConfig<T, QrsProduct> = {}): QueryConfig<T> {
    if (requestParameters.measure === null || requestParameters.measure === undefined) {
        throw new runtime.RequiredError('measure','Required parameter requestParameters.measure was null or undefined when calling mdrQrsMeasureVersionGet.');
    }

    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrQrsMeasureVersionGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/qrs/{measure}/{version}`.replace(`{${"measure"}}`, encodeURIComponent(String(requestParameters.measure))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(QrsProductFromJSON(body), text);
    }

    return config;
}

/**
* Get QRS Product
*/
export function mdrQrsMeasureVersionGet<T>(requestParameters: MdrQrsMeasureVersionGetRequest, requestConfig?: runtime.TypedQueryConfig<T, QrsProduct>): QueryConfig<T> {
    return mdrQrsMeasureVersionGetRaw(requestParameters, requestConfig);
}

/**
 * Get QRS Item List
 */
function mdrQrsMeasureVersionItemsGetRaw<T>(requestParameters: MdrQrsMeasureVersionItemsGetRequest, requestConfig: runtime.TypedQueryConfig<T, QrsItems> = {}): QueryConfig<T> {
    if (requestParameters.measure === null || requestParameters.measure === undefined) {
        throw new runtime.RequiredError('measure','Required parameter requestParameters.measure was null or undefined when calling mdrQrsMeasureVersionItemsGet.');
    }

    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrQrsMeasureVersionItemsGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/qrs/{measure}/{version}/items`.replace(`{${"measure"}}`, encodeURIComponent(String(requestParameters.measure))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(QrsItemsFromJSON(body), text);
    }

    return config;
}

/**
* Get QRS Item List
*/
export function mdrQrsMeasureVersionItemsGet<T>(requestParameters: MdrQrsMeasureVersionItemsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, QrsItems>): QueryConfig<T> {
    return mdrQrsMeasureVersionItemsGetRaw(requestParameters, requestConfig);
}

/**
 * Get QRS Item
 */
function mdrQrsMeasureVersionItemsItemGetRaw<T>(requestParameters: MdrQrsMeasureVersionItemsItemGetRequest, requestConfig: runtime.TypedQueryConfig<T, QrsItem> = {}): QueryConfig<T> {
    if (requestParameters.measure === null || requestParameters.measure === undefined) {
        throw new runtime.RequiredError('measure','Required parameter requestParameters.measure was null or undefined when calling mdrQrsMeasureVersionItemsItemGet.');
    }

    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrQrsMeasureVersionItemsItemGet.');
    }

    if (requestParameters.item === null || requestParameters.item === undefined) {
        throw new runtime.RequiredError('item','Required parameter requestParameters.item was null or undefined when calling mdrQrsMeasureVersionItemsItemGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/qrs/{measure}/{version}/items/{item}`.replace(`{${"measure"}}`, encodeURIComponent(String(requestParameters.measure))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"item"}}`, encodeURIComponent(String(requestParameters.item))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(QrsItemFromJSON(body), text);
    }

    return config;
}

/**
* Get QRS Item
*/
export function mdrQrsMeasureVersionItemsItemGet<T>(requestParameters: MdrQrsMeasureVersionItemsItemGetRequest, requestConfig?: runtime.TypedQueryConfig<T, QrsItem>): QueryConfig<T> {
    return mdrQrsMeasureVersionItemsItemGetRaw(requestParameters, requestConfig);
}

/**
 * Get QRS Response Group List
 */
function mdrQrsMeasureVersionResponsegroupsGetRaw<T>(requestParameters: MdrQrsMeasureVersionResponsegroupsGetRequest, requestConfig: runtime.TypedQueryConfig<T, QrsResponsegroups> = {}): QueryConfig<T> {
    if (requestParameters.measure === null || requestParameters.measure === undefined) {
        throw new runtime.RequiredError('measure','Required parameter requestParameters.measure was null or undefined when calling mdrQrsMeasureVersionResponsegroupsGet.');
    }

    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrQrsMeasureVersionResponsegroupsGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/qrs/{measure}/{version}/responsegroups`.replace(`{${"measure"}}`, encodeURIComponent(String(requestParameters.measure))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(QrsResponsegroupsFromJSON(body), text);
    }

    return config;
}

/**
* Get QRS Response Group List
*/
export function mdrQrsMeasureVersionResponsegroupsGet<T>(requestParameters: MdrQrsMeasureVersionResponsegroupsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, QrsResponsegroups>): QueryConfig<T> {
    return mdrQrsMeasureVersionResponsegroupsGetRaw(requestParameters, requestConfig);
}

/**
 * Get QRS Response Group
 */
function mdrQrsMeasureVersionResponsegroupsResponsegroupGetRaw<T>(requestParameters: MdrQrsMeasureVersionResponsegroupsResponsegroupGetRequest, requestConfig: runtime.TypedQueryConfig<T, QrsResponsegroup> = {}): QueryConfig<T> {
    if (requestParameters.measure === null || requestParameters.measure === undefined) {
        throw new runtime.RequiredError('measure','Required parameter requestParameters.measure was null or undefined when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet.');
    }

    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet.');
    }

    if (requestParameters.responsegroup === null || requestParameters.responsegroup === undefined) {
        throw new runtime.RequiredError('responsegroup','Required parameter requestParameters.responsegroup was null or undefined when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/qrs/{measure}/{version}/responsegroups/{responsegroup}`.replace(`{${"measure"}}`, encodeURIComponent(String(requestParameters.measure))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"responsegroup"}}`, encodeURIComponent(String(requestParameters.responsegroup))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(QrsResponsegroupFromJSON(body), text);
    }

    return config;
}

/**
* Get QRS Response Group
*/
export function mdrQrsMeasureVersionResponsegroupsResponsegroupGet<T>(requestParameters: MdrQrsMeasureVersionResponsegroupsResponsegroupGetRequest, requestConfig?: runtime.TypedQueryConfig<T, QrsResponsegroup>): QueryConfig<T> {
    return mdrQrsMeasureVersionResponsegroupsResponsegroupGetRaw(requestParameters, requestConfig);
}


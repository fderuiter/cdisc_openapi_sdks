// tslint:disable
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    DefaultErrorResponse,
    DefaultErrorResponseFromJSON,
    DefaultErrorResponseToJSON,
    ExportSdtmigDatasetsTable,
    ExportSdtmigDatasetsTableFromJSON,
    ExportSdtmigDatasetsTableToJSON,
    ExportSdtmigVariablesTable,
    ExportSdtmigVariablesTableFromJSON,
    ExportSdtmigVariablesTableToJSON,
    ExportSdtmigWorkbook,
    ExportSdtmigWorkbookFromJSON,
    ExportSdtmigWorkbookToJSON,
    RootSdtmigDatasetVariable,
    RootSdtmigDatasetVariableFromJSON,
    RootSdtmigDatasetVariableToJSON,
    SdtmigClass,
    SdtmigClassFromJSON,
    SdtmigClassToJSON,
    SdtmigClassDatasets,
    SdtmigClassDatasetsFromJSON,
    SdtmigClassDatasetsToJSON,
    SdtmigClasses,
    SdtmigClassesFromJSON,
    SdtmigClassesToJSON,
    SdtmigDataset,
    SdtmigDatasetFromJSON,
    SdtmigDatasetToJSON,
    SdtmigDatasetVariable,
    SdtmigDatasetVariableFromJSON,
    SdtmigDatasetVariableToJSON,
    SdtmigDatasetVariables,
    SdtmigDatasetVariablesFromJSON,
    SdtmigDatasetVariablesToJSON,
    SdtmigDatasets,
    SdtmigDatasetsFromJSON,
    SdtmigDatasetsToJSON,
    SdtmigProduct,
    SdtmigProductFromJSON,
    SdtmigProductToJSON,
    XmlRootSdtmigDatasetVariable,
    XmlRootSdtmigDatasetVariableFromJSON,
    XmlRootSdtmigDatasetVariableToJSON,
    XmlSdtmigClass,
    XmlSdtmigClassFromJSON,
    XmlSdtmigClassToJSON,
    XmlSdtmigClassDatasets,
    XmlSdtmigClassDatasetsFromJSON,
    XmlSdtmigClassDatasetsToJSON,
    XmlSdtmigClasses,
    XmlSdtmigClassesFromJSON,
    XmlSdtmigClassesToJSON,
    XmlSdtmigDataset,
    XmlSdtmigDatasetFromJSON,
    XmlSdtmigDatasetToJSON,
    XmlSdtmigDatasetVariable,
    XmlSdtmigDatasetVariableFromJSON,
    XmlSdtmigDatasetVariableToJSON,
    XmlSdtmigDatasetVariables,
    XmlSdtmigDatasetVariablesFromJSON,
    XmlSdtmigDatasetVariablesToJSON,
    XmlSdtmigDatasets,
    XmlSdtmigDatasetsFromJSON,
    XmlSdtmigDatasetsToJSON,
    XmlSdtmigProduct,
    XmlSdtmigProductFromJSON,
    XmlSdtmigProductToJSON,
} from '../models';

export interface MdrRootSdtmigDatasetsDatasetVariablesVarGetRequest {
    dataset: string;
    _var: string;
}

export interface MdrSdtmigVersionClassesClassDatasetsGetRequest {
    version: string;
    _class: string;
}

export interface MdrSdtmigVersionClassesClassGetRequest {
    version: string;
    _class: string;
}

export interface MdrSdtmigVersionClassesGetRequest {
    version: string;
}

export interface MdrSdtmigVersionDatasetsDatasetGetRequest {
    version: string;
    dataset: string;
}

export interface MdrSdtmigVersionDatasetsDatasetVariablesGetRequest {
    version: string;
    dataset: string;
}

export interface MdrSdtmigVersionDatasetsDatasetVariablesVarGetRequest {
    version: string;
    dataset: string;
    _var: string;
}

export interface MdrSdtmigVersionDatasetsGetRequest {
    version: string;
}

export interface MdrSdtmigVersionGetRequest {
    version: string;
}


/**
 * Get Root SDTMIG Dataset Variable
 */
function mdrRootSdtmigDatasetsDatasetVariablesVarGetRaw<T>(requestParameters: MdrRootSdtmigDatasetsDatasetVariablesVarGetRequest, requestConfig: runtime.TypedQueryConfig<T, RootSdtmigDatasetVariable> = {}): QueryConfig<T> {
    if (requestParameters.dataset === null || requestParameters.dataset === undefined) {
        throw new runtime.RequiredError('dataset','Required parameter requestParameters.dataset was null or undefined when calling mdrRootSdtmigDatasetsDatasetVariablesVarGet.');
    }

    if (requestParameters._var === null || requestParameters._var === undefined) {
        throw new runtime.RequiredError('_var','Required parameter requestParameters._var was null or undefined when calling mdrRootSdtmigDatasetsDatasetVariablesVarGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/root/sdtmig/datasets/{dataset}/variables/{var}`.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters.dataset))).replace(`{${"var"}}`, encodeURIComponent(String(requestParameters._var))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(RootSdtmigDatasetVariableFromJSON(body), text);
    }

    return config;
}

/**
* Get Root SDTMIG Dataset Variable
*/
export function mdrRootSdtmigDatasetsDatasetVariablesVarGet<T>(requestParameters: MdrRootSdtmigDatasetsDatasetVariablesVarGetRequest, requestConfig?: runtime.TypedQueryConfig<T, RootSdtmigDatasetVariable>): QueryConfig<T> {
    return mdrRootSdtmigDatasetsDatasetVariablesVarGetRaw(requestParameters, requestConfig);
}

/**
 * Get SDTMIG Class Dataset List
 */
function mdrSdtmigVersionClassesClassDatasetsGetRaw<T>(requestParameters: MdrSdtmigVersionClassesClassDatasetsGetRequest, requestConfig: runtime.TypedQueryConfig<T, SdtmigClassDatasets> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSdtmigVersionClassesClassDatasetsGet.');
    }

    if (requestParameters._class === null || requestParameters._class === undefined) {
        throw new runtime.RequiredError('_class','Required parameter requestParameters._class was null or undefined when calling mdrSdtmigVersionClassesClassDatasetsGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sdtmig/{version}/classes/{class}/datasets`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"class"}}`, encodeURIComponent(String(requestParameters._class))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SdtmigClassDatasetsFromJSON(body), text);
    }

    return config;
}

/**
* Get SDTMIG Class Dataset List
*/
export function mdrSdtmigVersionClassesClassDatasetsGet<T>(requestParameters: MdrSdtmigVersionClassesClassDatasetsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SdtmigClassDatasets>): QueryConfig<T> {
    return mdrSdtmigVersionClassesClassDatasetsGetRaw(requestParameters, requestConfig);
}

/**
 * Get SDTMIG Class
 */
function mdrSdtmigVersionClassesClassGetRaw<T>(requestParameters: MdrSdtmigVersionClassesClassGetRequest, requestConfig: runtime.TypedQueryConfig<T, SdtmigClass> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSdtmigVersionClassesClassGet.');
    }

    if (requestParameters._class === null || requestParameters._class === undefined) {
        throw new runtime.RequiredError('_class','Required parameter requestParameters._class was null or undefined when calling mdrSdtmigVersionClassesClassGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sdtmig/{version}/classes/{class}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"class"}}`, encodeURIComponent(String(requestParameters._class))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SdtmigClassFromJSON(body), text);
    }

    return config;
}

/**
* Get SDTMIG Class
*/
export function mdrSdtmigVersionClassesClassGet<T>(requestParameters: MdrSdtmigVersionClassesClassGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SdtmigClass>): QueryConfig<T> {
    return mdrSdtmigVersionClassesClassGetRaw(requestParameters, requestConfig);
}

/**
 * Get SDTMIG Class List
 */
function mdrSdtmigVersionClassesGetRaw<T>(requestParameters: MdrSdtmigVersionClassesGetRequest, requestConfig: runtime.TypedQueryConfig<T, SdtmigClasses> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSdtmigVersionClassesGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sdtmig/{version}/classes`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SdtmigClassesFromJSON(body), text);
    }

    return config;
}

/**
* Get SDTMIG Class List
*/
export function mdrSdtmigVersionClassesGet<T>(requestParameters: MdrSdtmigVersionClassesGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SdtmigClasses>): QueryConfig<T> {
    return mdrSdtmigVersionClassesGetRaw(requestParameters, requestConfig);
}

/**
 * Get SDTMIG Dataset
 */
function mdrSdtmigVersionDatasetsDatasetGetRaw<T>(requestParameters: MdrSdtmigVersionDatasetsDatasetGetRequest, requestConfig: runtime.TypedQueryConfig<T, SdtmigDataset> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSdtmigVersionDatasetsDatasetGet.');
    }

    if (requestParameters.dataset === null || requestParameters.dataset === undefined) {
        throw new runtime.RequiredError('dataset','Required parameter requestParameters.dataset was null or undefined when calling mdrSdtmigVersionDatasetsDatasetGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sdtmig/{version}/datasets/{dataset}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters.dataset))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SdtmigDatasetFromJSON(body), text);
    }

    return config;
}

/**
* Get SDTMIG Dataset
*/
export function mdrSdtmigVersionDatasetsDatasetGet<T>(requestParameters: MdrSdtmigVersionDatasetsDatasetGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SdtmigDataset>): QueryConfig<T> {
    return mdrSdtmigVersionDatasetsDatasetGetRaw(requestParameters, requestConfig);
}

/**
 * Get SDTMIG Dataset Variable List
 */
function mdrSdtmigVersionDatasetsDatasetVariablesGetRaw<T>(requestParameters: MdrSdtmigVersionDatasetsDatasetVariablesGetRequest, requestConfig: runtime.TypedQueryConfig<T, SdtmigDatasetVariables> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSdtmigVersionDatasetsDatasetVariablesGet.');
    }

    if (requestParameters.dataset === null || requestParameters.dataset === undefined) {
        throw new runtime.RequiredError('dataset','Required parameter requestParameters.dataset was null or undefined when calling mdrSdtmigVersionDatasetsDatasetVariablesGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sdtmig/{version}/datasets/{dataset}/variables`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters.dataset))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SdtmigDatasetVariablesFromJSON(body), text);
    }

    return config;
}

/**
* Get SDTMIG Dataset Variable List
*/
export function mdrSdtmigVersionDatasetsDatasetVariablesGet<T>(requestParameters: MdrSdtmigVersionDatasetsDatasetVariablesGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SdtmigDatasetVariables>): QueryConfig<T> {
    return mdrSdtmigVersionDatasetsDatasetVariablesGetRaw(requestParameters, requestConfig);
}

/**
 * Get SDTMIG Dataset Variable
 */
function mdrSdtmigVersionDatasetsDatasetVariablesVarGetRaw<T>(requestParameters: MdrSdtmigVersionDatasetsDatasetVariablesVarGetRequest, requestConfig: runtime.TypedQueryConfig<T, SdtmigDatasetVariable> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet.');
    }

    if (requestParameters.dataset === null || requestParameters.dataset === undefined) {
        throw new runtime.RequiredError('dataset','Required parameter requestParameters.dataset was null or undefined when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet.');
    }

    if (requestParameters._var === null || requestParameters._var === undefined) {
        throw new runtime.RequiredError('_var','Required parameter requestParameters._var was null or undefined when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sdtmig/{version}/datasets/{dataset}/variables/{var}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters.dataset))).replace(`{${"var"}}`, encodeURIComponent(String(requestParameters._var))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SdtmigDatasetVariableFromJSON(body), text);
    }

    return config;
}

/**
* Get SDTMIG Dataset Variable
*/
export function mdrSdtmigVersionDatasetsDatasetVariablesVarGet<T>(requestParameters: MdrSdtmigVersionDatasetsDatasetVariablesVarGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SdtmigDatasetVariable>): QueryConfig<T> {
    return mdrSdtmigVersionDatasetsDatasetVariablesVarGetRaw(requestParameters, requestConfig);
}

/**
 * Get SDTMIG Dataset List
 */
function mdrSdtmigVersionDatasetsGetRaw<T>(requestParameters: MdrSdtmigVersionDatasetsGetRequest, requestConfig: runtime.TypedQueryConfig<T, SdtmigDatasets> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSdtmigVersionDatasetsGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sdtmig/{version}/datasets`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SdtmigDatasetsFromJSON(body), text);
    }

    return config;
}

/**
* Get SDTMIG Dataset List
*/
export function mdrSdtmigVersionDatasetsGet<T>(requestParameters: MdrSdtmigVersionDatasetsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SdtmigDatasets>): QueryConfig<T> {
    return mdrSdtmigVersionDatasetsGetRaw(requestParameters, requestConfig);
}

/**
 * Get SDTMIG product
 */
function mdrSdtmigVersionGetRaw<T>(requestParameters: MdrSdtmigVersionGetRequest, requestConfig: runtime.TypedQueryConfig<T, SdtmigProduct> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSdtmigVersionGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sdtmig/{version}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SdtmigProductFromJSON(body), text);
    }

    return config;
}

/**
* Get SDTMIG product
*/
export function mdrSdtmigVersionGet<T>(requestParameters: MdrSdtmigVersionGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SdtmigProduct>): QueryConfig<T> {
    return mdrSdtmigVersionGetRaw(requestParameters, requestConfig);
}


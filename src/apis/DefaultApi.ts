// tslint:disable
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    About,
    AboutFromJSON,
    AboutToJSON,
    DefaultErrorResponse,
    DefaultErrorResponseFromJSON,
    DefaultErrorResponseToJSON,
    Lastupdated,
    LastupdatedFromJSON,
    LastupdatedToJSON,
    ProductgroupDataAnalysis,
    ProductgroupDataAnalysisFromJSON,
    ProductgroupDataAnalysisToJSON,
    ProductgroupDataCollection,
    ProductgroupDataCollectionFromJSON,
    ProductgroupDataCollectionToJSON,
    ProductgroupDataTabulation,
    ProductgroupDataTabulationFromJSON,
    ProductgroupDataTabulationToJSON,
    ProductgroupQrs,
    ProductgroupQrsFromJSON,
    ProductgroupQrsToJSON,
    ProductgroupTerminology,
    ProductgroupTerminologyFromJSON,
    ProductgroupTerminologyToJSON,
    Products,
    ProductsFromJSON,
    ProductsToJSON,
    XmlAbout,
    XmlAboutFromJSON,
    XmlAboutToJSON,
    XmlLastupdated,
    XmlLastupdatedFromJSON,
    XmlLastupdatedToJSON,
    XmlProductgroupDataAnalysis,
    XmlProductgroupDataAnalysisFromJSON,
    XmlProductgroupDataAnalysisToJSON,
    XmlProductgroupDataCollection,
    XmlProductgroupDataCollectionFromJSON,
    XmlProductgroupDataCollectionToJSON,
    XmlProductgroupDataTabulation,
    XmlProductgroupDataTabulationFromJSON,
    XmlProductgroupDataTabulationToJSON,
    XmlProductgroupTerminology,
    XmlProductgroupTerminologyFromJSON,
    XmlProductgroupTerminologyToJSON,
    XmlProducts,
    XmlProductsFromJSON,
    XmlProductsToJSON,
} from '../models';


/**
 * Get Information About CDISC Library
 */
function mdrAboutGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, About> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/about`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AboutFromJSON(body), text);
    }

    return config;
}

/**
* Get Information About CDISC Library
*/
export function mdrAboutGet<T>( requestConfig?: runtime.TypedQueryConfig<T, About>): QueryConfig<T> {
    return mdrAboutGetRaw( requestConfig);
}

/**
 * Get CDISC Library Last Updated
 */
function mdrLastupdatedGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Lastupdated> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/lastupdated`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(LastupdatedFromJSON(body), text);
    }

    return config;
}

/**
* Get CDISC Library Last Updated
*/
export function mdrLastupdatedGet<T>( requestConfig?: runtime.TypedQueryConfig<T, Lastupdated>): QueryConfig<T> {
    return mdrLastupdatedGetRaw( requestConfig);
}

/**
 * Get CDISC Library Product Group Data Analysis
 */
function mdrProductsDataAnalysisGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, ProductgroupDataAnalysis> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/products/DataAnalysis`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ProductgroupDataAnalysisFromJSON(body), text);
    }

    return config;
}

/**
* Get CDISC Library Product Group Data Analysis
*/
export function mdrProductsDataAnalysisGet<T>( requestConfig?: runtime.TypedQueryConfig<T, ProductgroupDataAnalysis>): QueryConfig<T> {
    return mdrProductsDataAnalysisGetRaw( requestConfig);
}

/**
 * Get CDISC Library Product Group Data Collection
 */
function mdrProductsDataCollectionGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, ProductgroupDataCollection> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/products/DataCollection`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ProductgroupDataCollectionFromJSON(body), text);
    }

    return config;
}

/**
* Get CDISC Library Product Group Data Collection
*/
export function mdrProductsDataCollectionGet<T>( requestConfig?: runtime.TypedQueryConfig<T, ProductgroupDataCollection>): QueryConfig<T> {
    return mdrProductsDataCollectionGetRaw( requestConfig);
}

/**
 * Get CDISC Library Product Group Data Tabulation
 */
function mdrProductsDataTabulationGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, ProductgroupDataTabulation> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/products/DataTabulation`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ProductgroupDataTabulationFromJSON(body), text);
    }

    return config;
}

/**
* Get CDISC Library Product Group Data Tabulation
*/
export function mdrProductsDataTabulationGet<T>( requestConfig?: runtime.TypedQueryConfig<T, ProductgroupDataTabulation>): QueryConfig<T> {
    return mdrProductsDataTabulationGetRaw( requestConfig);
}

/**
 * Get CDISC Library Products
 */
function mdrProductsGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Products> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/products`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ProductsFromJSON(body), text);
    }

    return config;
}

/**
* Get CDISC Library Products
*/
export function mdrProductsGet<T>( requestConfig?: runtime.TypedQueryConfig<T, Products>): QueryConfig<T> {
    return mdrProductsGetRaw( requestConfig);
}

/**
 * Get CDISC Library Product Group QRS
 */
function mdrProductsMeasuresGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, ProductgroupQrs> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/products/Measures`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ProductgroupQrsFromJSON(body), text);
    }

    return config;
}

/**
* Get CDISC Library Product Group QRS
*/
export function mdrProductsMeasuresGet<T>( requestConfig?: runtime.TypedQueryConfig<T, ProductgroupQrs>): QueryConfig<T> {
    return mdrProductsMeasuresGetRaw( requestConfig);
}

/**
 * Get CDISC Library Product Group Terminology
 */
function mdrProductsTerminologyGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, ProductgroupTerminology> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/products/Terminology`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ProductgroupTerminologyFromJSON(body), text);
    }

    return config;
}

/**
* Get CDISC Library Product Group Terminology
*/
export function mdrProductsTerminologyGet<T>( requestConfig?: runtime.TypedQueryConfig<T, ProductgroupTerminology>): QueryConfig<T> {
    return mdrProductsTerminologyGetRaw( requestConfig);
}


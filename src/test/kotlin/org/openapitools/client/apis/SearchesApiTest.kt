/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.SearchesApi
import org.openapitools.client.models.DefaultErrorResponse
import org.openapitools.client.models.DefaultSearchResponse
import org.openapitools.client.models.DefaultSearchScopes
import org.openapitools.client.models.MdrSearchScopesGet200Response
import org.openapitools.client.models.ScopeValues

class SearchesApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of SearchesApi
        //val apiInstance = SearchesApi()

        // to test mdrSearchGet
        should("test mdrSearchGet") {
            // uncomment below to test mdrSearchGet
            //val q : kotlin.String = q_example // kotlin.String | Search Term Expression
            //val highlight : kotlin.String = highlight_example // kotlin.String | Search Highlight Expression
            //val start : java.math.BigDecimal = 8.14 // java.math.BigDecimal | Initial Search Result Index
            //val pageSize : java.math.BigDecimal = 8.14 // java.math.BigDecimal | Number of Search Results to Return
            //val propertyClass : kotlin.String = propertyClass_example // kotlin.String | Limit Search by Setting Scope to Class
            //val codelist : kotlin.String = codelist_example // kotlin.String | Limit Search by Setting Scope to Codelist
            //val conceptId : kotlin.String = conceptId_example // kotlin.String | Limit Search by Setting Scope to Concept ID
            //val core : kotlin.String = core_example // kotlin.String | Limit Search by Setting Scope to Core
            //val dataStructure : kotlin.String = dataStructure_example // kotlin.String | Limit Search by Setting Scope to Data Structure
            //val datasetStructure : kotlin.String = datasetStructure_example // kotlin.String | Limit Search by Setting Scope to Dataset Structure
            //val definition : kotlin.String = definition_example // kotlin.String | Limit Search by Setting Scope to Definition
            //val description : kotlin.String = description_example // kotlin.String | Limit Search by Setting Scope to Description
            //val domain : kotlin.String = domain_example // kotlin.String | Limit Search by Setting Scope to Domain
            //val effectiveDate : kotlin.String = effectiveDate_example // kotlin.String | Limit Search by Setting Scope to Effective Date
            //val extensible : kotlin.String = extensible_example // kotlin.String | Limit Search by Setting Scope to Extensible
            //val href : kotlin.String = href_example // kotlin.String | Limit Search by Setting Scope to Href
            //val label : kotlin.String = label_example // kotlin.String | Limit Search by Setting Scope to Label
            //val measureType : kotlin.String = measureType_example // kotlin.String | SLimit Search by Setting Scope to Measure Type
            //val name : kotlin.String = name_example // kotlin.String | Limit Search by Setting Scope to Name
            //val preferredTerm : kotlin.String = preferredTerm_example // kotlin.String | Limit Search by Setting Scope to Preferred Term
            //val product : kotlin.String = product_example // kotlin.String | Limit Search by Setting Scope to Product
            //val productGroup : kotlin.String = productGroup_example // kotlin.String | Limit Search by Setting Scope to Product Group
            //val registrationStatus : kotlin.String = registrationStatus_example // kotlin.String | Limit Search by Setting Scope to Registration Status
            //val roleDescription : kotlin.String = roleDescription_example // kotlin.String | Limit Search by Setting Scope to Role Description
            //val sdtmTarget : kotlin.String = sdtmTarget_example // kotlin.String | Limit Search by Setting Scope to SDTM Target
            //val simpleDatatype : kotlin.String = simpleDatatype_example // kotlin.String | Limit Search by Setting Scope to Simple Datatype
            //val submissionValue : kotlin.String = submissionValue_example // kotlin.String | Limit Search by Setting Scope to Submission Value
            //val synonyms : kotlin.String = synonyms_example // kotlin.String | Limit Search by Setting Scope to Synonyms
            //val type : kotlin.String = type_example // kotlin.String | Limit Search by Setting Scope to Type
            //val uiHref : kotlin.String = uiHref_example // kotlin.String | Limit Search by Setting Scope to UI Href
            //val valueDomain : kotlin.String = valueDomain_example // kotlin.String | Limit Search by Setting Scope to Value Domain
            //val variableSet : kotlin.String = variableSet_example // kotlin.String | Limit Search by Setting Scope to Variable Set
            //val version : kotlin.String = version_example // kotlin.String | Limit Search by Setting Scope to Version
            //val result : DefaultSearchResponse = apiInstance.mdrSearchGet(q, highlight, start, pageSize, propertyClass, codelist, conceptId, core, dataStructure, datasetStructure, definition, description, domain, effectiveDate, extensible, href, label, measureType, name, preferredTerm, product, productGroup, registrationStatus, roleDescription, sdtmTarget, simpleDatatype, submissionValue, synonyms, type, uiHref, valueDomain, variableSet, version)
            //result shouldBe ("TODO")
        }

        // to test mdrSearchScopesGet
        should("test mdrSearchScopesGet") {
            // uncomment below to test mdrSearchScopesGet
            //val result : MdrSearchScopesGet200Response = apiInstance.mdrSearchScopesGet()
            //result shouldBe ("TODO")
        }

        // to test mdrSearchScopesScopeGet
        should("test mdrSearchScopesScopeGet") {
            // uncomment below to test mdrSearchScopesScopeGet
            //val scope : DefaultSearchScopes =  // DefaultSearchScopes | Search Scope
            //val result : ScopeValues = apiInstance.mdrSearchScopesScopeGet(scope)
            //result shouldBe ("TODO")
        }

    }
}

/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the About type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &About{}

// About struct for About
type About struct {
	Links *AboutLinks `json:"_links,omitempty"`
	ReleaseNotes *string `json:"release-notes,omitempty"`
	ApiDocumentation *string `json:"api-documentation,omitempty"`
}

// NewAbout instantiates a new About object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbout() *About {
	this := About{}
	return &this
}

// NewAboutWithDefaults instantiates a new About object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAboutWithDefaults() *About {
	this := About{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *About) GetLinks() AboutLinks {
	if o == nil || IsNil(o.Links) {
		var ret AboutLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *About) GetLinksOk() (*AboutLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *About) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given AboutLinks and assigns it to the Links field.
func (o *About) SetLinks(v AboutLinks) {
	o.Links = &v
}

// GetReleaseNotes returns the ReleaseNotes field value if set, zero value otherwise.
func (o *About) GetReleaseNotes() string {
	if o == nil || IsNil(o.ReleaseNotes) {
		var ret string
		return ret
	}
	return *o.ReleaseNotes
}

// GetReleaseNotesOk returns a tuple with the ReleaseNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *About) GetReleaseNotesOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseNotes) {
		return nil, false
	}
	return o.ReleaseNotes, true
}

// HasReleaseNotes returns a boolean if a field has been set.
func (o *About) HasReleaseNotes() bool {
	if o != nil && !IsNil(o.ReleaseNotes) {
		return true
	}

	return false
}

// SetReleaseNotes gets a reference to the given string and assigns it to the ReleaseNotes field.
func (o *About) SetReleaseNotes(v string) {
	o.ReleaseNotes = &v
}

// GetApiDocumentation returns the ApiDocumentation field value if set, zero value otherwise.
func (o *About) GetApiDocumentation() string {
	if o == nil || IsNil(o.ApiDocumentation) {
		var ret string
		return ret
	}
	return *o.ApiDocumentation
}

// GetApiDocumentationOk returns a tuple with the ApiDocumentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *About) GetApiDocumentationOk() (*string, bool) {
	if o == nil || IsNil(o.ApiDocumentation) {
		return nil, false
	}
	return o.ApiDocumentation, true
}

// HasApiDocumentation returns a boolean if a field has been set.
func (o *About) HasApiDocumentation() bool {
	if o != nil && !IsNil(o.ApiDocumentation) {
		return true
	}

	return false
}

// SetApiDocumentation gets a reference to the given string and assigns it to the ApiDocumentation field.
func (o *About) SetApiDocumentation(v string) {
	o.ApiDocumentation = &v
}

func (o About) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o About) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.ReleaseNotes) {
		toSerialize["release-notes"] = o.ReleaseNotes
	}
	if !IsNil(o.ApiDocumentation) {
		toSerialize["api-documentation"] = o.ApiDocumentation
	}
	return toSerialize, nil
}

type NullableAbout struct {
	value *About
	isSet bool
}

func (v NullableAbout) Get() *About {
	return v.value
}

func (v *NullableAbout) Set(val *About) {
	v.value = val
	v.isSet = true
}

func (v NullableAbout) IsSet() bool {
	return v.isSet
}

func (v *NullableAbout) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbout(val *About) *NullableAbout {
	return &NullableAbout{value: val, isSet: true}
}

func (v NullableAbout) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbout) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



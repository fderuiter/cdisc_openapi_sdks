/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExportAdamDatastructuresRow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportAdamDatastructuresRow{}

// ExportAdamDatastructuresRow struct for ExportAdamDatastructuresRow
type ExportAdamDatastructuresRow struct {
	Version *string `json:"Version,omitempty"`
	DataStructureName *string `json:"Data Structure Name,omitempty"`
	DatasetName *string `json:"Dataset Name,omitempty"`
	DatasetLabel *string `json:"Dataset Label,omitempty"`
	DatasetDescription *string `json:"Dataset Description,omitempty"`
	Class *string `json:"Class,omitempty"`
}

// NewExportAdamDatastructuresRow instantiates a new ExportAdamDatastructuresRow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportAdamDatastructuresRow() *ExportAdamDatastructuresRow {
	this := ExportAdamDatastructuresRow{}
	return &this
}

// NewExportAdamDatastructuresRowWithDefaults instantiates a new ExportAdamDatastructuresRow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportAdamDatastructuresRowWithDefaults() *ExportAdamDatastructuresRow {
	this := ExportAdamDatastructuresRow{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ExportAdamDatastructuresRow) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportAdamDatastructuresRow) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ExportAdamDatastructuresRow) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ExportAdamDatastructuresRow) SetVersion(v string) {
	o.Version = &v
}

// GetDataStructureName returns the DataStructureName field value if set, zero value otherwise.
func (o *ExportAdamDatastructuresRow) GetDataStructureName() string {
	if o == nil || IsNil(o.DataStructureName) {
		var ret string
		return ret
	}
	return *o.DataStructureName
}

// GetDataStructureNameOk returns a tuple with the DataStructureName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportAdamDatastructuresRow) GetDataStructureNameOk() (*string, bool) {
	if o == nil || IsNil(o.DataStructureName) {
		return nil, false
	}
	return o.DataStructureName, true
}

// HasDataStructureName returns a boolean if a field has been set.
func (o *ExportAdamDatastructuresRow) HasDataStructureName() bool {
	if o != nil && !IsNil(o.DataStructureName) {
		return true
	}

	return false
}

// SetDataStructureName gets a reference to the given string and assigns it to the DataStructureName field.
func (o *ExportAdamDatastructuresRow) SetDataStructureName(v string) {
	o.DataStructureName = &v
}

// GetDatasetName returns the DatasetName field value if set, zero value otherwise.
func (o *ExportAdamDatastructuresRow) GetDatasetName() string {
	if o == nil || IsNil(o.DatasetName) {
		var ret string
		return ret
	}
	return *o.DatasetName
}

// GetDatasetNameOk returns a tuple with the DatasetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportAdamDatastructuresRow) GetDatasetNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatasetName) {
		return nil, false
	}
	return o.DatasetName, true
}

// HasDatasetName returns a boolean if a field has been set.
func (o *ExportAdamDatastructuresRow) HasDatasetName() bool {
	if o != nil && !IsNil(o.DatasetName) {
		return true
	}

	return false
}

// SetDatasetName gets a reference to the given string and assigns it to the DatasetName field.
func (o *ExportAdamDatastructuresRow) SetDatasetName(v string) {
	o.DatasetName = &v
}

// GetDatasetLabel returns the DatasetLabel field value if set, zero value otherwise.
func (o *ExportAdamDatastructuresRow) GetDatasetLabel() string {
	if o == nil || IsNil(o.DatasetLabel) {
		var ret string
		return ret
	}
	return *o.DatasetLabel
}

// GetDatasetLabelOk returns a tuple with the DatasetLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportAdamDatastructuresRow) GetDatasetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DatasetLabel) {
		return nil, false
	}
	return o.DatasetLabel, true
}

// HasDatasetLabel returns a boolean if a field has been set.
func (o *ExportAdamDatastructuresRow) HasDatasetLabel() bool {
	if o != nil && !IsNil(o.DatasetLabel) {
		return true
	}

	return false
}

// SetDatasetLabel gets a reference to the given string and assigns it to the DatasetLabel field.
func (o *ExportAdamDatastructuresRow) SetDatasetLabel(v string) {
	o.DatasetLabel = &v
}

// GetDatasetDescription returns the DatasetDescription field value if set, zero value otherwise.
func (o *ExportAdamDatastructuresRow) GetDatasetDescription() string {
	if o == nil || IsNil(o.DatasetDescription) {
		var ret string
		return ret
	}
	return *o.DatasetDescription
}

// GetDatasetDescriptionOk returns a tuple with the DatasetDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportAdamDatastructuresRow) GetDatasetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DatasetDescription) {
		return nil, false
	}
	return o.DatasetDescription, true
}

// HasDatasetDescription returns a boolean if a field has been set.
func (o *ExportAdamDatastructuresRow) HasDatasetDescription() bool {
	if o != nil && !IsNil(o.DatasetDescription) {
		return true
	}

	return false
}

// SetDatasetDescription gets a reference to the given string and assigns it to the DatasetDescription field.
func (o *ExportAdamDatastructuresRow) SetDatasetDescription(v string) {
	o.DatasetDescription = &v
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *ExportAdamDatastructuresRow) GetClass() string {
	if o == nil || IsNil(o.Class) {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportAdamDatastructuresRow) GetClassOk() (*string, bool) {
	if o == nil || IsNil(o.Class) {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *ExportAdamDatastructuresRow) HasClass() bool {
	if o != nil && !IsNil(o.Class) {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *ExportAdamDatastructuresRow) SetClass(v string) {
	o.Class = &v
}

func (o ExportAdamDatastructuresRow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportAdamDatastructuresRow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	if !IsNil(o.DataStructureName) {
		toSerialize["Data Structure Name"] = o.DataStructureName
	}
	if !IsNil(o.DatasetName) {
		toSerialize["Dataset Name"] = o.DatasetName
	}
	if !IsNil(o.DatasetLabel) {
		toSerialize["Dataset Label"] = o.DatasetLabel
	}
	if !IsNil(o.DatasetDescription) {
		toSerialize["Dataset Description"] = o.DatasetDescription
	}
	if !IsNil(o.Class) {
		toSerialize["Class"] = o.Class
	}
	return toSerialize, nil
}

type NullableExportAdamDatastructuresRow struct {
	value *ExportAdamDatastructuresRow
	isSet bool
}

func (v NullableExportAdamDatastructuresRow) Get() *ExportAdamDatastructuresRow {
	return v.value
}

func (v *NullableExportAdamDatastructuresRow) Set(val *ExportAdamDatastructuresRow) {
	v.value = val
	v.isSet = true
}

func (v NullableExportAdamDatastructuresRow) IsSet() bool {
	return v.isSet
}

func (v *NullableExportAdamDatastructuresRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportAdamDatastructuresRow(val *ExportAdamDatastructuresRow) *NullableExportAdamDatastructuresRow {
	return &NullableExportAdamDatastructuresRow{value: val, isSet: true}
}

func (v NullableExportAdamDatastructuresRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportAdamDatastructuresRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExportAdamDatastructuresTable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportAdamDatastructuresTable{}

// ExportAdamDatastructuresTable struct for ExportAdamDatastructuresTable
type ExportAdamDatastructuresTable struct {
	Datastructures []ExportAdamDatastructuresRow `json:"datastructures,omitempty"`
}

// NewExportAdamDatastructuresTable instantiates a new ExportAdamDatastructuresTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportAdamDatastructuresTable() *ExportAdamDatastructuresTable {
	this := ExportAdamDatastructuresTable{}
	return &this
}

// NewExportAdamDatastructuresTableWithDefaults instantiates a new ExportAdamDatastructuresTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportAdamDatastructuresTableWithDefaults() *ExportAdamDatastructuresTable {
	this := ExportAdamDatastructuresTable{}
	return &this
}

// GetDatastructures returns the Datastructures field value if set, zero value otherwise.
func (o *ExportAdamDatastructuresTable) GetDatastructures() []ExportAdamDatastructuresRow {
	if o == nil || IsNil(o.Datastructures) {
		var ret []ExportAdamDatastructuresRow
		return ret
	}
	return o.Datastructures
}

// GetDatastructuresOk returns a tuple with the Datastructures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportAdamDatastructuresTable) GetDatastructuresOk() ([]ExportAdamDatastructuresRow, bool) {
	if o == nil || IsNil(o.Datastructures) {
		return nil, false
	}
	return o.Datastructures, true
}

// HasDatastructures returns a boolean if a field has been set.
func (o *ExportAdamDatastructuresTable) HasDatastructures() bool {
	if o != nil && !IsNil(o.Datastructures) {
		return true
	}

	return false
}

// SetDatastructures gets a reference to the given []ExportAdamDatastructuresRow and assigns it to the Datastructures field.
func (o *ExportAdamDatastructuresTable) SetDatastructures(v []ExportAdamDatastructuresRow) {
	o.Datastructures = v
}

func (o ExportAdamDatastructuresTable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportAdamDatastructuresTable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Datastructures) {
		toSerialize["datastructures"] = o.Datastructures
	}
	return toSerialize, nil
}

type NullableExportAdamDatastructuresTable struct {
	value *ExportAdamDatastructuresTable
	isSet bool
}

func (v NullableExportAdamDatastructuresTable) Get() *ExportAdamDatastructuresTable {
	return v.value
}

func (v *NullableExportAdamDatastructuresTable) Set(val *ExportAdamDatastructuresTable) {
	v.value = val
	v.isSet = true
}

func (v NullableExportAdamDatastructuresTable) IsSet() bool {
	return v.isSet
}

func (v *NullableExportAdamDatastructuresTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportAdamDatastructuresTable(val *ExportAdamDatastructuresTable) *NullableExportAdamDatastructuresTable {
	return &NullableExportAdamDatastructuresTable{value: val, isSet: true}
}

func (v NullableExportAdamDatastructuresTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportAdamDatastructuresTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



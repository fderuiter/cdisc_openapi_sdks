/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.DefaultErrorResponse
import org.openapitools.client.models.DefaultSearchResponse
import org.openapitools.client.models.DefaultSearchScopes
import org.openapitools.client.models.MdrSearchScopesGet200Response
import org.openapitools.client.models.ScopeValues

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class SearchesApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://library.cdisc.org/api")
        }
    }

    /**
     * GET /mdr/search
     * 
     * Get Search Results Across CDISC Library
     * @param q Search Term Expression
     * @param highlight Search Highlight Expression (optional)
     * @param start Initial Search Result Index (optional, default to 0)
     * @param pageSize Number of Search Results to Return (optional, default to 100)
     * @param propertyClass Limit Search by Setting Scope to Class (optional)
     * @param codelist Limit Search by Setting Scope to Codelist (optional)
     * @param conceptId Limit Search by Setting Scope to Concept ID (optional)
     * @param core Limit Search by Setting Scope to Core (optional)
     * @param dataStructure Limit Search by Setting Scope to Data Structure (optional)
     * @param datasetStructure Limit Search by Setting Scope to Dataset Structure (optional)
     * @param definition Limit Search by Setting Scope to Definition (optional)
     * @param description Limit Search by Setting Scope to Description (optional)
     * @param domain Limit Search by Setting Scope to Domain (optional)
     * @param effectiveDate Limit Search by Setting Scope to Effective Date (optional)
     * @param extensible Limit Search by Setting Scope to Extensible (optional)
     * @param href Limit Search by Setting Scope to Href (optional)
     * @param label Limit Search by Setting Scope to Label (optional)
     * @param measureType SLimit Search by Setting Scope to Measure Type (optional)
     * @param name Limit Search by Setting Scope to Name (optional)
     * @param preferredTerm Limit Search by Setting Scope to Preferred Term (optional)
     * @param product Limit Search by Setting Scope to Product (optional)
     * @param productGroup Limit Search by Setting Scope to Product Group (optional)
     * @param registrationStatus Limit Search by Setting Scope to Registration Status (optional)
     * @param roleDescription Limit Search by Setting Scope to Role Description (optional)
     * @param sdtmTarget Limit Search by Setting Scope to SDTM Target (optional)
     * @param simpleDatatype Limit Search by Setting Scope to Simple Datatype (optional)
     * @param submissionValue Limit Search by Setting Scope to Submission Value (optional)
     * @param synonyms Limit Search by Setting Scope to Synonyms (optional)
     * @param type Limit Search by Setting Scope to Type (optional)
     * @param uiHref Limit Search by Setting Scope to UI Href (optional)
     * @param valueDomain Limit Search by Setting Scope to Value Domain (optional)
     * @param variableSet Limit Search by Setting Scope to Variable Set (optional)
     * @param version Limit Search by Setting Scope to Version (optional)
     * @return DefaultSearchResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSearchGet(q: kotlin.String, highlight: kotlin.String? = null, start: java.math.BigDecimal? = java.math.BigDecimal("0"), pageSize: java.math.BigDecimal? = java.math.BigDecimal("100"), propertyClass: kotlin.String? = null, codelist: kotlin.String? = null, conceptId: kotlin.String? = null, core: kotlin.String? = null, dataStructure: kotlin.String? = null, datasetStructure: kotlin.String? = null, definition: kotlin.String? = null, description: kotlin.String? = null, domain: kotlin.String? = null, effectiveDate: kotlin.String? = null, extensible: kotlin.String? = null, href: kotlin.String? = null, label: kotlin.String? = null, measureType: kotlin.String? = null, name: kotlin.String? = null, preferredTerm: kotlin.String? = null, product: kotlin.String? = null, productGroup: kotlin.String? = null, registrationStatus: kotlin.String? = null, roleDescription: kotlin.String? = null, sdtmTarget: kotlin.String? = null, simpleDatatype: kotlin.String? = null, submissionValue: kotlin.String? = null, synonyms: kotlin.String? = null, type: kotlin.String? = null, uiHref: kotlin.String? = null, valueDomain: kotlin.String? = null, variableSet: kotlin.String? = null, version: kotlin.String? = null) : DefaultSearchResponse {
        val localVarResponse = mdrSearchGetWithHttpInfo(q = q, highlight = highlight, start = start, pageSize = pageSize, propertyClass = propertyClass, codelist = codelist, conceptId = conceptId, core = core, dataStructure = dataStructure, datasetStructure = datasetStructure, definition = definition, description = description, domain = domain, effectiveDate = effectiveDate, extensible = extensible, href = href, label = label, measureType = measureType, name = name, preferredTerm = preferredTerm, product = product, productGroup = productGroup, registrationStatus = registrationStatus, roleDescription = roleDescription, sdtmTarget = sdtmTarget, simpleDatatype = simpleDatatype, submissionValue = submissionValue, synonyms = synonyms, type = type, uiHref = uiHref, valueDomain = valueDomain, variableSet = variableSet, version = version)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DefaultSearchResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/search
     * 
     * Get Search Results Across CDISC Library
     * @param q Search Term Expression
     * @param highlight Search Highlight Expression (optional)
     * @param start Initial Search Result Index (optional, default to 0)
     * @param pageSize Number of Search Results to Return (optional, default to 100)
     * @param propertyClass Limit Search by Setting Scope to Class (optional)
     * @param codelist Limit Search by Setting Scope to Codelist (optional)
     * @param conceptId Limit Search by Setting Scope to Concept ID (optional)
     * @param core Limit Search by Setting Scope to Core (optional)
     * @param dataStructure Limit Search by Setting Scope to Data Structure (optional)
     * @param datasetStructure Limit Search by Setting Scope to Dataset Structure (optional)
     * @param definition Limit Search by Setting Scope to Definition (optional)
     * @param description Limit Search by Setting Scope to Description (optional)
     * @param domain Limit Search by Setting Scope to Domain (optional)
     * @param effectiveDate Limit Search by Setting Scope to Effective Date (optional)
     * @param extensible Limit Search by Setting Scope to Extensible (optional)
     * @param href Limit Search by Setting Scope to Href (optional)
     * @param label Limit Search by Setting Scope to Label (optional)
     * @param measureType SLimit Search by Setting Scope to Measure Type (optional)
     * @param name Limit Search by Setting Scope to Name (optional)
     * @param preferredTerm Limit Search by Setting Scope to Preferred Term (optional)
     * @param product Limit Search by Setting Scope to Product (optional)
     * @param productGroup Limit Search by Setting Scope to Product Group (optional)
     * @param registrationStatus Limit Search by Setting Scope to Registration Status (optional)
     * @param roleDescription Limit Search by Setting Scope to Role Description (optional)
     * @param sdtmTarget Limit Search by Setting Scope to SDTM Target (optional)
     * @param simpleDatatype Limit Search by Setting Scope to Simple Datatype (optional)
     * @param submissionValue Limit Search by Setting Scope to Submission Value (optional)
     * @param synonyms Limit Search by Setting Scope to Synonyms (optional)
     * @param type Limit Search by Setting Scope to Type (optional)
     * @param uiHref Limit Search by Setting Scope to UI Href (optional)
     * @param valueDomain Limit Search by Setting Scope to Value Domain (optional)
     * @param variableSet Limit Search by Setting Scope to Variable Set (optional)
     * @param version Limit Search by Setting Scope to Version (optional)
     * @return ApiResponse<DefaultSearchResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSearchGetWithHttpInfo(q: kotlin.String, highlight: kotlin.String?, start: java.math.BigDecimal?, pageSize: java.math.BigDecimal?, propertyClass: kotlin.String?, codelist: kotlin.String?, conceptId: kotlin.String?, core: kotlin.String?, dataStructure: kotlin.String?, datasetStructure: kotlin.String?, definition: kotlin.String?, description: kotlin.String?, domain: kotlin.String?, effectiveDate: kotlin.String?, extensible: kotlin.String?, href: kotlin.String?, label: kotlin.String?, measureType: kotlin.String?, name: kotlin.String?, preferredTerm: kotlin.String?, product: kotlin.String?, productGroup: kotlin.String?, registrationStatus: kotlin.String?, roleDescription: kotlin.String?, sdtmTarget: kotlin.String?, simpleDatatype: kotlin.String?, submissionValue: kotlin.String?, synonyms: kotlin.String?, type: kotlin.String?, uiHref: kotlin.String?, valueDomain: kotlin.String?, variableSet: kotlin.String?, version: kotlin.String?) : ApiResponse<DefaultSearchResponse?> {
        val localVariableConfig = mdrSearchGetRequestConfig(q = q, highlight = highlight, start = start, pageSize = pageSize, propertyClass = propertyClass, codelist = codelist, conceptId = conceptId, core = core, dataStructure = dataStructure, datasetStructure = datasetStructure, definition = definition, description = description, domain = domain, effectiveDate = effectiveDate, extensible = extensible, href = href, label = label, measureType = measureType, name = name, preferredTerm = preferredTerm, product = product, productGroup = productGroup, registrationStatus = registrationStatus, roleDescription = roleDescription, sdtmTarget = sdtmTarget, simpleDatatype = simpleDatatype, submissionValue = submissionValue, synonyms = synonyms, type = type, uiHref = uiHref, valueDomain = valueDomain, variableSet = variableSet, version = version)

        return request<Unit, DefaultSearchResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSearchGet
     *
     * @param q Search Term Expression
     * @param highlight Search Highlight Expression (optional)
     * @param start Initial Search Result Index (optional, default to 0)
     * @param pageSize Number of Search Results to Return (optional, default to 100)
     * @param propertyClass Limit Search by Setting Scope to Class (optional)
     * @param codelist Limit Search by Setting Scope to Codelist (optional)
     * @param conceptId Limit Search by Setting Scope to Concept ID (optional)
     * @param core Limit Search by Setting Scope to Core (optional)
     * @param dataStructure Limit Search by Setting Scope to Data Structure (optional)
     * @param datasetStructure Limit Search by Setting Scope to Dataset Structure (optional)
     * @param definition Limit Search by Setting Scope to Definition (optional)
     * @param description Limit Search by Setting Scope to Description (optional)
     * @param domain Limit Search by Setting Scope to Domain (optional)
     * @param effectiveDate Limit Search by Setting Scope to Effective Date (optional)
     * @param extensible Limit Search by Setting Scope to Extensible (optional)
     * @param href Limit Search by Setting Scope to Href (optional)
     * @param label Limit Search by Setting Scope to Label (optional)
     * @param measureType SLimit Search by Setting Scope to Measure Type (optional)
     * @param name Limit Search by Setting Scope to Name (optional)
     * @param preferredTerm Limit Search by Setting Scope to Preferred Term (optional)
     * @param product Limit Search by Setting Scope to Product (optional)
     * @param productGroup Limit Search by Setting Scope to Product Group (optional)
     * @param registrationStatus Limit Search by Setting Scope to Registration Status (optional)
     * @param roleDescription Limit Search by Setting Scope to Role Description (optional)
     * @param sdtmTarget Limit Search by Setting Scope to SDTM Target (optional)
     * @param simpleDatatype Limit Search by Setting Scope to Simple Datatype (optional)
     * @param submissionValue Limit Search by Setting Scope to Submission Value (optional)
     * @param synonyms Limit Search by Setting Scope to Synonyms (optional)
     * @param type Limit Search by Setting Scope to Type (optional)
     * @param uiHref Limit Search by Setting Scope to UI Href (optional)
     * @param valueDomain Limit Search by Setting Scope to Value Domain (optional)
     * @param variableSet Limit Search by Setting Scope to Variable Set (optional)
     * @param version Limit Search by Setting Scope to Version (optional)
     * @return RequestConfig
     */
    fun mdrSearchGetRequestConfig(q: kotlin.String, highlight: kotlin.String?, start: java.math.BigDecimal?, pageSize: java.math.BigDecimal?, propertyClass: kotlin.String?, codelist: kotlin.String?, conceptId: kotlin.String?, core: kotlin.String?, dataStructure: kotlin.String?, datasetStructure: kotlin.String?, definition: kotlin.String?, description: kotlin.String?, domain: kotlin.String?, effectiveDate: kotlin.String?, extensible: kotlin.String?, href: kotlin.String?, label: kotlin.String?, measureType: kotlin.String?, name: kotlin.String?, preferredTerm: kotlin.String?, product: kotlin.String?, productGroup: kotlin.String?, registrationStatus: kotlin.String?, roleDescription: kotlin.String?, sdtmTarget: kotlin.String?, simpleDatatype: kotlin.String?, submissionValue: kotlin.String?, synonyms: kotlin.String?, type: kotlin.String?, uiHref: kotlin.String?, valueDomain: kotlin.String?, variableSet: kotlin.String?, version: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("q", listOf(q.toString()))
                if (highlight != null) {
                    put("highlight", listOf(highlight.toString()))
                }
                if (start != null) {
                    put("start", listOf(start.toString()))
                }
                if (pageSize != null) {
                    put("pageSize", listOf(pageSize.toString()))
                }
                if (propertyClass != null) {
                    put("class", listOf(propertyClass.toString()))
                }
                if (codelist != null) {
                    put("codelist", listOf(codelist.toString()))
                }
                if (conceptId != null) {
                    put("conceptId", listOf(conceptId.toString()))
                }
                if (core != null) {
                    put("core", listOf(core.toString()))
                }
                if (dataStructure != null) {
                    put("dataStructure", listOf(dataStructure.toString()))
                }
                if (datasetStructure != null) {
                    put("datasetStructure", listOf(datasetStructure.toString()))
                }
                if (definition != null) {
                    put("definition", listOf(definition.toString()))
                }
                if (description != null) {
                    put("description", listOf(description.toString()))
                }
                if (domain != null) {
                    put("domain", listOf(domain.toString()))
                }
                if (effectiveDate != null) {
                    put("effectiveDate", listOf(effectiveDate.toString()))
                }
                if (extensible != null) {
                    put("extensible", listOf(extensible.toString()))
                }
                if (href != null) {
                    put("href", listOf(href.toString()))
                }
                if (label != null) {
                    put("label", listOf(label.toString()))
                }
                if (measureType != null) {
                    put("measureType", listOf(measureType.toString()))
                }
                if (name != null) {
                    put("name", listOf(name.toString()))
                }
                if (preferredTerm != null) {
                    put("preferredTerm", listOf(preferredTerm.toString()))
                }
                if (product != null) {
                    put("product", listOf(product.toString()))
                }
                if (productGroup != null) {
                    put("productGroup", listOf(productGroup.toString()))
                }
                if (registrationStatus != null) {
                    put("registrationStatus", listOf(registrationStatus.toString()))
                }
                if (roleDescription != null) {
                    put("roleDescription", listOf(roleDescription.toString()))
                }
                if (sdtmTarget != null) {
                    put("sdtmTarget", listOf(sdtmTarget.toString()))
                }
                if (simpleDatatype != null) {
                    put("simpleDatatype", listOf(simpleDatatype.toString()))
                }
                if (submissionValue != null) {
                    put("submissionValue", listOf(submissionValue.toString()))
                }
                if (synonyms != null) {
                    put("synonyms", listOf(synonyms.toString()))
                }
                if (type != null) {
                    put("type", listOf(type.toString()))
                }
                if (uiHref != null) {
                    put("uiHref", listOf(uiHref.toString()))
                }
                if (valueDomain != null) {
                    put("valueDomain", listOf(valueDomain.toString()))
                }
                if (variableSet != null) {
                    put("variableSet", listOf(variableSet.toString()))
                }
                if (version != null) {
                    put("version", listOf(version.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/search",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/search/scopes
     * 
     * Get Search Results Across CDISC Library
     * @return MdrSearchScopesGet200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSearchScopesGet() : MdrSearchScopesGet200Response {
        val localVarResponse = mdrSearchScopesGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MdrSearchScopesGet200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/search/scopes
     * 
     * Get Search Results Across CDISC Library
     * @return ApiResponse<MdrSearchScopesGet200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSearchScopesGetWithHttpInfo() : ApiResponse<MdrSearchScopesGet200Response?> {
        val localVariableConfig = mdrSearchScopesGetRequestConfig()

        return request<Unit, MdrSearchScopesGet200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSearchScopesGet
     *
     * @return RequestConfig
     */
    fun mdrSearchScopesGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/search/scopes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/search/scopes/{scope}
     * 
     * Get Search Results Limited to Scope
     * @param scope Search Scope
     * @return ScopeValues
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSearchScopesScopeGet(scope: DefaultSearchScopes) : ScopeValues {
        val localVarResponse = mdrSearchScopesScopeGetWithHttpInfo(scope = scope)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ScopeValues
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/search/scopes/{scope}
     * 
     * Get Search Results Limited to Scope
     * @param scope Search Scope
     * @return ApiResponse<ScopeValues?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSearchScopesScopeGetWithHttpInfo(scope: DefaultSearchScopes) : ApiResponse<ScopeValues?> {
        val localVariableConfig = mdrSearchScopesScopeGetRequestConfig(scope = scope)

        return request<Unit, ScopeValues>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSearchScopesScopeGet
     *
     * @param scope Search Scope
     * @return RequestConfig
     */
    fun mdrSearchScopesScopeGetRequestConfig(scope: DefaultSearchScopes) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/search/scopes/{scope}".replace("{"+"scope"+"}", encodeURIComponent(scope.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}

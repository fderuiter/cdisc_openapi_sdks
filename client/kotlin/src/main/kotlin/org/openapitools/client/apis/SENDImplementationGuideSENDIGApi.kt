/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.DefaultErrorResponse
import org.openapitools.client.models.ExportSendigDatasetsTable
import org.openapitools.client.models.ExportSendigVariablesTable
import org.openapitools.client.models.ExportSendigWorkbook
import org.openapitools.client.models.RootSendigDatasetVariable
import org.openapitools.client.models.SendigClass
import org.openapitools.client.models.SendigClassDatasets
import org.openapitools.client.models.SendigClasses
import org.openapitools.client.models.SendigDataset
import org.openapitools.client.models.SendigDatasetVariable
import org.openapitools.client.models.SendigDatasetVariables
import org.openapitools.client.models.SendigDatasets
import org.openapitools.client.models.SendigProduct
import org.openapitools.client.models.XmlRootSendigDatasetVariable
import org.openapitools.client.models.XmlSendigClass
import org.openapitools.client.models.XmlSendigClassDatasets
import org.openapitools.client.models.XmlSendigClasses
import org.openapitools.client.models.XmlSendigDataset
import org.openapitools.client.models.XmlSendigDatasetVariable
import org.openapitools.client.models.XmlSendigDatasetVariables
import org.openapitools.client.models.XmlSendigDatasets
import org.openapitools.client.models.XmlSendigProduct

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class SENDImplementationGuideSENDIGApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://library.cdisc.org/api")
        }
    }

    /**
     * GET /mdr/root/sendig/datasets/{dataset}/variables/{var}
     * 
     * Get Root SENDIG Dataset Variable
     * @param dataset SENDIG Dataset Identifier
     * @param `var` SENDIG Variable Identifier
     * @return RootSendigDatasetVariable
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrRootSendigDatasetsDatasetVariablesVarGet(dataset: kotlin.String, `var`: kotlin.String) : RootSendigDatasetVariable {
        val localVarResponse = mdrRootSendigDatasetsDatasetVariablesVarGetWithHttpInfo(dataset = dataset, `var` = `var`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RootSendigDatasetVariable
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/root/sendig/datasets/{dataset}/variables/{var}
     * 
     * Get Root SENDIG Dataset Variable
     * @param dataset SENDIG Dataset Identifier
     * @param `var` SENDIG Variable Identifier
     * @return ApiResponse<RootSendigDatasetVariable?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrRootSendigDatasetsDatasetVariablesVarGetWithHttpInfo(dataset: kotlin.String, `var`: kotlin.String) : ApiResponse<RootSendigDatasetVariable?> {
        val localVariableConfig = mdrRootSendigDatasetsDatasetVariablesVarGetRequestConfig(dataset = dataset, `var` = `var`)

        return request<Unit, RootSendigDatasetVariable>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrRootSendigDatasetsDatasetVariablesVarGet
     *
     * @param dataset SENDIG Dataset Identifier
     * @param `var` SENDIG Variable Identifier
     * @return RequestConfig
     */
    fun mdrRootSendigDatasetsDatasetVariablesVarGetRequestConfig(dataset: kotlin.String, `var`: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/root/sendig/datasets/{dataset}/variables/{var}".replace("{"+"dataset"+"}", encodeURIComponent(dataset.toString())).replace("{"+"var"+"}", encodeURIComponent(`var`.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sendig/{version}/classes/{class}/datasets
     * 
     * Get SENDIG Class Dataset List
     * @param version CDISC Library Product Version
     * @param propertyClass SENDIG Class Identifier
     * @return SendigClassDatasets
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSendigVersionClassesClassDatasetsGet(version: kotlin.String, propertyClass: kotlin.String) : SendigClassDatasets {
        val localVarResponse = mdrSendigVersionClassesClassDatasetsGetWithHttpInfo(version = version, propertyClass = propertyClass)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SendigClassDatasets
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sendig/{version}/classes/{class}/datasets
     * 
     * Get SENDIG Class Dataset List
     * @param version CDISC Library Product Version
     * @param propertyClass SENDIG Class Identifier
     * @return ApiResponse<SendigClassDatasets?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSendigVersionClassesClassDatasetsGetWithHttpInfo(version: kotlin.String, propertyClass: kotlin.String) : ApiResponse<SendigClassDatasets?> {
        val localVariableConfig = mdrSendigVersionClassesClassDatasetsGetRequestConfig(version = version, propertyClass = propertyClass)

        return request<Unit, SendigClassDatasets>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSendigVersionClassesClassDatasetsGet
     *
     * @param version CDISC Library Product Version
     * @param propertyClass SENDIG Class Identifier
     * @return RequestConfig
     */
    fun mdrSendigVersionClassesClassDatasetsGetRequestConfig(version: kotlin.String, propertyClass: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sendig/{version}/classes/{class}/datasets".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"class"+"}", encodeURIComponent(propertyClass.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sendig/{version}/classes/{class}
     * 
     * Get SENDIG Class
     * @param version CDISC Library Product Version
     * @param propertyClass SENDIG Class Identifier
     * @return SendigClass
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSendigVersionClassesClassGet(version: kotlin.String, propertyClass: kotlin.String) : SendigClass {
        val localVarResponse = mdrSendigVersionClassesClassGetWithHttpInfo(version = version, propertyClass = propertyClass)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SendigClass
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sendig/{version}/classes/{class}
     * 
     * Get SENDIG Class
     * @param version CDISC Library Product Version
     * @param propertyClass SENDIG Class Identifier
     * @return ApiResponse<SendigClass?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSendigVersionClassesClassGetWithHttpInfo(version: kotlin.String, propertyClass: kotlin.String) : ApiResponse<SendigClass?> {
        val localVariableConfig = mdrSendigVersionClassesClassGetRequestConfig(version = version, propertyClass = propertyClass)

        return request<Unit, SendigClass>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSendigVersionClassesClassGet
     *
     * @param version CDISC Library Product Version
     * @param propertyClass SENDIG Class Identifier
     * @return RequestConfig
     */
    fun mdrSendigVersionClassesClassGetRequestConfig(version: kotlin.String, propertyClass: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sendig/{version}/classes/{class}".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"class"+"}", encodeURIComponent(propertyClass.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sendig/{version}/classes
     * 
     * Get SENDIG Class List
     * @param version CDISC Library Product Version
     * @return SendigClasses
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSendigVersionClassesGet(version: kotlin.String) : SendigClasses {
        val localVarResponse = mdrSendigVersionClassesGetWithHttpInfo(version = version)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SendigClasses
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sendig/{version}/classes
     * 
     * Get SENDIG Class List
     * @param version CDISC Library Product Version
     * @return ApiResponse<SendigClasses?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSendigVersionClassesGetWithHttpInfo(version: kotlin.String) : ApiResponse<SendigClasses?> {
        val localVariableConfig = mdrSendigVersionClassesGetRequestConfig(version = version)

        return request<Unit, SendigClasses>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSendigVersionClassesGet
     *
     * @param version CDISC Library Product Version
     * @return RequestConfig
     */
    fun mdrSendigVersionClassesGetRequestConfig(version: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sendig/{version}/classes".replace("{"+"version"+"}", encodeURIComponent(version.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sendig/{version}/datasets/{dataset}
     * 
     * Get SENDIG Dataset
     * @param version CDISC Library Product Version
     * @param dataset SENDIG Class Identifier
     * @return SendigDataset
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSendigVersionDatasetsDatasetGet(version: kotlin.String, dataset: kotlin.String) : SendigDataset {
        val localVarResponse = mdrSendigVersionDatasetsDatasetGetWithHttpInfo(version = version, dataset = dataset)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SendigDataset
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sendig/{version}/datasets/{dataset}
     * 
     * Get SENDIG Dataset
     * @param version CDISC Library Product Version
     * @param dataset SENDIG Class Identifier
     * @return ApiResponse<SendigDataset?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSendigVersionDatasetsDatasetGetWithHttpInfo(version: kotlin.String, dataset: kotlin.String) : ApiResponse<SendigDataset?> {
        val localVariableConfig = mdrSendigVersionDatasetsDatasetGetRequestConfig(version = version, dataset = dataset)

        return request<Unit, SendigDataset>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSendigVersionDatasetsDatasetGet
     *
     * @param version CDISC Library Product Version
     * @param dataset SENDIG Class Identifier
     * @return RequestConfig
     */
    fun mdrSendigVersionDatasetsDatasetGetRequestConfig(version: kotlin.String, dataset: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sendig/{version}/datasets/{dataset}".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"dataset"+"}", encodeURIComponent(dataset.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sendig/{version}/datasets/{dataset}/variables
     * 
     * Get SENDIG Dataset Variable List
     * @param version CDISC Library Product Version
     * @param dataset SENDIG Class Identifier
     * @return SendigDatasetVariables
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSendigVersionDatasetsDatasetVariablesGet(version: kotlin.String, dataset: kotlin.String) : SendigDatasetVariables {
        val localVarResponse = mdrSendigVersionDatasetsDatasetVariablesGetWithHttpInfo(version = version, dataset = dataset)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SendigDatasetVariables
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sendig/{version}/datasets/{dataset}/variables
     * 
     * Get SENDIG Dataset Variable List
     * @param version CDISC Library Product Version
     * @param dataset SENDIG Class Identifier
     * @return ApiResponse<SendigDatasetVariables?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSendigVersionDatasetsDatasetVariablesGetWithHttpInfo(version: kotlin.String, dataset: kotlin.String) : ApiResponse<SendigDatasetVariables?> {
        val localVariableConfig = mdrSendigVersionDatasetsDatasetVariablesGetRequestConfig(version = version, dataset = dataset)

        return request<Unit, SendigDatasetVariables>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSendigVersionDatasetsDatasetVariablesGet
     *
     * @param version CDISC Library Product Version
     * @param dataset SENDIG Class Identifier
     * @return RequestConfig
     */
    fun mdrSendigVersionDatasetsDatasetVariablesGetRequestConfig(version: kotlin.String, dataset: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sendig/{version}/datasets/{dataset}/variables".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"dataset"+"}", encodeURIComponent(dataset.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sendig/{version}/datasets/{dataset}/variables/{var}
     * 
     * Get SENDIG Dataset Variable
     * @param version CDISC Library Product Version
     * @param dataset SENDIG Class Identifier
     * @param `var` SENDIG Variable Identifier
     * @return SendigDatasetVariable
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSendigVersionDatasetsDatasetVariablesVarGet(version: kotlin.String, dataset: kotlin.String, `var`: kotlin.String) : SendigDatasetVariable {
        val localVarResponse = mdrSendigVersionDatasetsDatasetVariablesVarGetWithHttpInfo(version = version, dataset = dataset, `var` = `var`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SendigDatasetVariable
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sendig/{version}/datasets/{dataset}/variables/{var}
     * 
     * Get SENDIG Dataset Variable
     * @param version CDISC Library Product Version
     * @param dataset SENDIG Class Identifier
     * @param `var` SENDIG Variable Identifier
     * @return ApiResponse<SendigDatasetVariable?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSendigVersionDatasetsDatasetVariablesVarGetWithHttpInfo(version: kotlin.String, dataset: kotlin.String, `var`: kotlin.String) : ApiResponse<SendigDatasetVariable?> {
        val localVariableConfig = mdrSendigVersionDatasetsDatasetVariablesVarGetRequestConfig(version = version, dataset = dataset, `var` = `var`)

        return request<Unit, SendigDatasetVariable>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSendigVersionDatasetsDatasetVariablesVarGet
     *
     * @param version CDISC Library Product Version
     * @param dataset SENDIG Class Identifier
     * @param `var` SENDIG Variable Identifier
     * @return RequestConfig
     */
    fun mdrSendigVersionDatasetsDatasetVariablesVarGetRequestConfig(version: kotlin.String, dataset: kotlin.String, `var`: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sendig/{version}/datasets/{dataset}/variables/{var}".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"dataset"+"}", encodeURIComponent(dataset.toString())).replace("{"+"var"+"}", encodeURIComponent(`var`.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sendig/{version}/datasets
     * 
     * Get SENDIG Dataset List
     * @param version CDISC Library Product Version
     * @return SendigDatasets
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSendigVersionDatasetsGet(version: kotlin.String) : SendigDatasets {
        val localVarResponse = mdrSendigVersionDatasetsGetWithHttpInfo(version = version)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SendigDatasets
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sendig/{version}/datasets
     * 
     * Get SENDIG Dataset List
     * @param version CDISC Library Product Version
     * @return ApiResponse<SendigDatasets?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSendigVersionDatasetsGetWithHttpInfo(version: kotlin.String) : ApiResponse<SendigDatasets?> {
        val localVariableConfig = mdrSendigVersionDatasetsGetRequestConfig(version = version)

        return request<Unit, SendigDatasets>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSendigVersionDatasetsGet
     *
     * @param version CDISC Library Product Version
     * @return RequestConfig
     */
    fun mdrSendigVersionDatasetsGetRequestConfig(version: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sendig/{version}/datasets".replace("{"+"version"+"}", encodeURIComponent(version.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/sendig/{version}
     * 
     * Get SENDIG product
     * @param version CDISC Library Product Version
     * @return SendigProduct
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrSendigVersionGet(version: kotlin.String) : SendigProduct {
        val localVarResponse = mdrSendigVersionGetWithHttpInfo(version = version)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SendigProduct
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/sendig/{version}
     * 
     * Get SENDIG product
     * @param version CDISC Library Product Version
     * @return ApiResponse<SendigProduct?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrSendigVersionGetWithHttpInfo(version: kotlin.String) : ApiResponse<SendigProduct?> {
        val localVariableConfig = mdrSendigVersionGetRequestConfig(version = version)

        return request<Unit, SendigProduct>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrSendigVersionGet
     *
     * @param version CDISC Library Product Version
     * @return RequestConfig
     */
    fun mdrSendigVersionGetRequestConfig(version: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/sendig/{version}".replace("{"+"version"+"}", encodeURIComponent(version.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}

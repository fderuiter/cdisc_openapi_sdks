/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.CdashigClass
import org.openapitools.client.models.CdashigClassDomains
import org.openapitools.client.models.CdashigClassScenarios
import org.openapitools.client.models.CdashigDomain
import org.openapitools.client.models.CdashigDomainField
import org.openapitools.client.models.CdashigDomainFields
import org.openapitools.client.models.CdashigProduct
import org.openapitools.client.models.CdashigProductClasses
import org.openapitools.client.models.CdashigProductDomains
import org.openapitools.client.models.CdashigProductScenarios
import org.openapitools.client.models.CdashigScenario
import org.openapitools.client.models.CdashigScenarioField
import org.openapitools.client.models.CdashigScenarioFields
import org.openapitools.client.models.DefaultErrorResponse
import org.openapitools.client.models.ExportCdashigTable
import org.openapitools.client.models.RootCdashigDomainField
import org.openapitools.client.models.RootCdashigScenarioField
import org.openapitools.client.models.XmlCdashigClass
import org.openapitools.client.models.XmlCdashigClassDomains
import org.openapitools.client.models.XmlCdashigClassScenarios
import org.openapitools.client.models.XmlCdashigDomain
import org.openapitools.client.models.XmlCdashigDomainField
import org.openapitools.client.models.XmlCdashigDomainFields
import org.openapitools.client.models.XmlCdashigProduct
import org.openapitools.client.models.XmlCdashigProductClasses
import org.openapitools.client.models.XmlCdashigProductDomains
import org.openapitools.client.models.XmlCdashigProductScenarios
import org.openapitools.client.models.XmlCdashigScenario
import org.openapitools.client.models.XmlCdashigScenarioField
import org.openapitools.client.models.XmlCdashigScenarioFields
import org.openapitools.client.models.XmlRootCdashigDomainField
import org.openapitools.client.models.XmlRootCdashigScenarioField

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class CDASHImplementationGuideCDASHIGApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://library.cdisc.org/api")
        }
    }

    /**
     * GET /mdr/cdashig/{version}/classes/{class}/domains
     * 
     * Get CDASHIG Class Domain List
     * @param version CDISC Library Product Version
     * @param propertyClass CDASHIG Class Identifier
     * @return CdashigClassDomains
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCdashigVersionClassesClassDomainsGet(version: kotlin.String, propertyClass: kotlin.String) : CdashigClassDomains {
        val localVarResponse = mdrCdashigVersionClassesClassDomainsGetWithHttpInfo(version = version, propertyClass = propertyClass)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CdashigClassDomains
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/cdashig/{version}/classes/{class}/domains
     * 
     * Get CDASHIG Class Domain List
     * @param version CDISC Library Product Version
     * @param propertyClass CDASHIG Class Identifier
     * @return ApiResponse<CdashigClassDomains?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCdashigVersionClassesClassDomainsGetWithHttpInfo(version: kotlin.String, propertyClass: kotlin.String) : ApiResponse<CdashigClassDomains?> {
        val localVariableConfig = mdrCdashigVersionClassesClassDomainsGetRequestConfig(version = version, propertyClass = propertyClass)

        return request<Unit, CdashigClassDomains>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCdashigVersionClassesClassDomainsGet
     *
     * @param version CDISC Library Product Version
     * @param propertyClass CDASHIG Class Identifier
     * @return RequestConfig
     */
    fun mdrCdashigVersionClassesClassDomainsGetRequestConfig(version: kotlin.String, propertyClass: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/cdashig/{version}/classes/{class}/domains".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"class"+"}", encodeURIComponent(propertyClass.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/cdashig/{version}/classes/{class}
     * 
     * Get CDASHIG Class
     * @param version CDISC Library Product Version
     * @param propertyClass CDASHIG Class Identifier
     * @return CdashigClass
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCdashigVersionClassesClassGet(version: kotlin.String, propertyClass: kotlin.String) : CdashigClass {
        val localVarResponse = mdrCdashigVersionClassesClassGetWithHttpInfo(version = version, propertyClass = propertyClass)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CdashigClass
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/cdashig/{version}/classes/{class}
     * 
     * Get CDASHIG Class
     * @param version CDISC Library Product Version
     * @param propertyClass CDASHIG Class Identifier
     * @return ApiResponse<CdashigClass?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCdashigVersionClassesClassGetWithHttpInfo(version: kotlin.String, propertyClass: kotlin.String) : ApiResponse<CdashigClass?> {
        val localVariableConfig = mdrCdashigVersionClassesClassGetRequestConfig(version = version, propertyClass = propertyClass)

        return request<Unit, CdashigClass>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCdashigVersionClassesClassGet
     *
     * @param version CDISC Library Product Version
     * @param propertyClass CDASHIG Class Identifier
     * @return RequestConfig
     */
    fun mdrCdashigVersionClassesClassGetRequestConfig(version: kotlin.String, propertyClass: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/cdashig/{version}/classes/{class}".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"class"+"}", encodeURIComponent(propertyClass.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/cdashig/{version}/classes/{class}/scenarios
     * 
     * Get CDASHIG Class Scenario List
     * @param version CDISC Library Product Version
     * @param propertyClass CDASHIG Class Identifier
     * @return CdashigClassScenarios
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCdashigVersionClassesClassScenariosGet(version: kotlin.String, propertyClass: kotlin.String) : CdashigClassScenarios {
        val localVarResponse = mdrCdashigVersionClassesClassScenariosGetWithHttpInfo(version = version, propertyClass = propertyClass)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CdashigClassScenarios
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/cdashig/{version}/classes/{class}/scenarios
     * 
     * Get CDASHIG Class Scenario List
     * @param version CDISC Library Product Version
     * @param propertyClass CDASHIG Class Identifier
     * @return ApiResponse<CdashigClassScenarios?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCdashigVersionClassesClassScenariosGetWithHttpInfo(version: kotlin.String, propertyClass: kotlin.String) : ApiResponse<CdashigClassScenarios?> {
        val localVariableConfig = mdrCdashigVersionClassesClassScenariosGetRequestConfig(version = version, propertyClass = propertyClass)

        return request<Unit, CdashigClassScenarios>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCdashigVersionClassesClassScenariosGet
     *
     * @param version CDISC Library Product Version
     * @param propertyClass CDASHIG Class Identifier
     * @return RequestConfig
     */
    fun mdrCdashigVersionClassesClassScenariosGetRequestConfig(version: kotlin.String, propertyClass: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/cdashig/{version}/classes/{class}/scenarios".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"class"+"}", encodeURIComponent(propertyClass.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/cdashig/{version}/classes
     * 
     * Get CDASHIG Class List
     * @param version CDISC Library Product Version
     * @return CdashigProductClasses
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCdashigVersionClassesGet(version: kotlin.String) : CdashigProductClasses {
        val localVarResponse = mdrCdashigVersionClassesGetWithHttpInfo(version = version)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CdashigProductClasses
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/cdashig/{version}/classes
     * 
     * Get CDASHIG Class List
     * @param version CDISC Library Product Version
     * @return ApiResponse<CdashigProductClasses?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCdashigVersionClassesGetWithHttpInfo(version: kotlin.String) : ApiResponse<CdashigProductClasses?> {
        val localVariableConfig = mdrCdashigVersionClassesGetRequestConfig(version = version)

        return request<Unit, CdashigProductClasses>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCdashigVersionClassesGet
     *
     * @param version CDISC Library Product Version
     * @return RequestConfig
     */
    fun mdrCdashigVersionClassesGetRequestConfig(version: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/cdashig/{version}/classes".replace("{"+"version"+"}", encodeURIComponent(version.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/cdashig/{version}/domains/{domain}/fields/{field}
     * 
     * Get CDASHIG Domain Field
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     * @param `field` CDASHIG Field Identifier
     * @return CdashigDomainField
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCdashigVersionDomainsDomainFieldsFieldGet(version: kotlin.String, domain: kotlin.String, `field`: kotlin.String) : CdashigDomainField {
        val localVarResponse = mdrCdashigVersionDomainsDomainFieldsFieldGetWithHttpInfo(version = version, domain = domain, `field` = `field`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CdashigDomainField
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/cdashig/{version}/domains/{domain}/fields/{field}
     * 
     * Get CDASHIG Domain Field
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     * @param `field` CDASHIG Field Identifier
     * @return ApiResponse<CdashigDomainField?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCdashigVersionDomainsDomainFieldsFieldGetWithHttpInfo(version: kotlin.String, domain: kotlin.String, `field`: kotlin.String) : ApiResponse<CdashigDomainField?> {
        val localVariableConfig = mdrCdashigVersionDomainsDomainFieldsFieldGetRequestConfig(version = version, domain = domain, `field` = `field`)

        return request<Unit, CdashigDomainField>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCdashigVersionDomainsDomainFieldsFieldGet
     *
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     * @param `field` CDASHIG Field Identifier
     * @return RequestConfig
     */
    fun mdrCdashigVersionDomainsDomainFieldsFieldGetRequestConfig(version: kotlin.String, domain: kotlin.String, `field`: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/cdashig/{version}/domains/{domain}/fields/{field}".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"domain"+"}", encodeURIComponent(domain.toString())).replace("{"+"field"+"}", encodeURIComponent(`field`.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/cdashig/{version}/domains/{domain}/fields
     * 
     * Get CDASHIG Domain Field List
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     * @return CdashigDomainFields
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCdashigVersionDomainsDomainFieldsGet(version: kotlin.String, domain: kotlin.String) : CdashigDomainFields {
        val localVarResponse = mdrCdashigVersionDomainsDomainFieldsGetWithHttpInfo(version = version, domain = domain)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CdashigDomainFields
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/cdashig/{version}/domains/{domain}/fields
     * 
     * Get CDASHIG Domain Field List
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     * @return ApiResponse<CdashigDomainFields?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCdashigVersionDomainsDomainFieldsGetWithHttpInfo(version: kotlin.String, domain: kotlin.String) : ApiResponse<CdashigDomainFields?> {
        val localVariableConfig = mdrCdashigVersionDomainsDomainFieldsGetRequestConfig(version = version, domain = domain)

        return request<Unit, CdashigDomainFields>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCdashigVersionDomainsDomainFieldsGet
     *
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     * @return RequestConfig
     */
    fun mdrCdashigVersionDomainsDomainFieldsGetRequestConfig(version: kotlin.String, domain: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/cdashig/{version}/domains/{domain}/fields".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"domain"+"}", encodeURIComponent(domain.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/cdashig/{version}/domains/{domain}
     * 
     * Get CDASHIG Domain
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     * @return CdashigDomain
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCdashigVersionDomainsDomainGet(version: kotlin.String, domain: kotlin.String) : CdashigDomain {
        val localVarResponse = mdrCdashigVersionDomainsDomainGetWithHttpInfo(version = version, domain = domain)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CdashigDomain
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/cdashig/{version}/domains/{domain}
     * 
     * Get CDASHIG Domain
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     * @return ApiResponse<CdashigDomain?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCdashigVersionDomainsDomainGetWithHttpInfo(version: kotlin.String, domain: kotlin.String) : ApiResponse<CdashigDomain?> {
        val localVariableConfig = mdrCdashigVersionDomainsDomainGetRequestConfig(version = version, domain = domain)

        return request<Unit, CdashigDomain>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCdashigVersionDomainsDomainGet
     *
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     * @return RequestConfig
     */
    fun mdrCdashigVersionDomainsDomainGetRequestConfig(version: kotlin.String, domain: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/cdashig/{version}/domains/{domain}".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"domain"+"}", encodeURIComponent(domain.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/cdashig/{version}/domains
     * 
     * Get CDASHIG Domain List
     * @param version CDISC Library Product Version
     * @return CdashigProductDomains
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCdashigVersionDomainsGet(version: kotlin.String) : CdashigProductDomains {
        val localVarResponse = mdrCdashigVersionDomainsGetWithHttpInfo(version = version)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CdashigProductDomains
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/cdashig/{version}/domains
     * 
     * Get CDASHIG Domain List
     * @param version CDISC Library Product Version
     * @return ApiResponse<CdashigProductDomains?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCdashigVersionDomainsGetWithHttpInfo(version: kotlin.String) : ApiResponse<CdashigProductDomains?> {
        val localVariableConfig = mdrCdashigVersionDomainsGetRequestConfig(version = version)

        return request<Unit, CdashigProductDomains>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCdashigVersionDomainsGet
     *
     * @param version CDISC Library Product Version
     * @return RequestConfig
     */
    fun mdrCdashigVersionDomainsGetRequestConfig(version: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/cdashig/{version}/domains".replace("{"+"version"+"}", encodeURIComponent(version.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/cdashig/{version}
     * 
     * Get CDASHIG Product
     * @param version CDISC Library Product Version
     * @return CdashigProduct
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCdashigVersionGet(version: kotlin.String) : CdashigProduct {
        val localVarResponse = mdrCdashigVersionGetWithHttpInfo(version = version)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CdashigProduct
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/cdashig/{version}
     * 
     * Get CDASHIG Product
     * @param version CDISC Library Product Version
     * @return ApiResponse<CdashigProduct?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCdashigVersionGetWithHttpInfo(version: kotlin.String) : ApiResponse<CdashigProduct?> {
        val localVariableConfig = mdrCdashigVersionGetRequestConfig(version = version)

        return request<Unit, CdashigProduct>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCdashigVersionGet
     *
     * @param version CDISC Library Product Version
     * @return RequestConfig
     */
    fun mdrCdashigVersionGetRequestConfig(version: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/cdashig/{version}".replace("{"+"version"+"}", encodeURIComponent(version.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields/{field}
     * 
     * Get CDASHIG Scenario Field
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     * @param scenario CDASHIG Scenario Identifier
     * @param `field` CDASHIG Field Identifier
     * @return CdashigScenarioField
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet(version: kotlin.String, domain: kotlin.String, scenario: kotlin.String, `field`: kotlin.String) : CdashigScenarioField {
        val localVarResponse = mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetWithHttpInfo(version = version, domain = domain, scenario = scenario, `field` = `field`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CdashigScenarioField
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields/{field}
     * 
     * Get CDASHIG Scenario Field
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     * @param scenario CDASHIG Scenario Identifier
     * @param `field` CDASHIG Field Identifier
     * @return ApiResponse<CdashigScenarioField?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetWithHttpInfo(version: kotlin.String, domain: kotlin.String, scenario: kotlin.String, `field`: kotlin.String) : ApiResponse<CdashigScenarioField?> {
        val localVariableConfig = mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetRequestConfig(version = version, domain = domain, scenario = scenario, `field` = `field`)

        return request<Unit, CdashigScenarioField>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet
     *
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     * @param scenario CDASHIG Scenario Identifier
     * @param `field` CDASHIG Field Identifier
     * @return RequestConfig
     */
    fun mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetRequestConfig(version: kotlin.String, domain: kotlin.String, scenario: kotlin.String, `field`: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields/{field}".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"domain"+"}", encodeURIComponent(domain.toString())).replace("{"+"scenario"+"}", encodeURIComponent(scenario.toString())).replace("{"+"field"+"}", encodeURIComponent(`field`.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields
     * 
     * Get CDASHIG Scenario Field List
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     * @param scenario CDASHIG Scenario Identifier
     * @return CdashigScenarioFields
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCdashigVersionScenariosDomainScenarioFieldsGet(version: kotlin.String, domain: kotlin.String, scenario: kotlin.String) : CdashigScenarioFields {
        val localVarResponse = mdrCdashigVersionScenariosDomainScenarioFieldsGetWithHttpInfo(version = version, domain = domain, scenario = scenario)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CdashigScenarioFields
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields
     * 
     * Get CDASHIG Scenario Field List
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     * @param scenario CDASHIG Scenario Identifier
     * @return ApiResponse<CdashigScenarioFields?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCdashigVersionScenariosDomainScenarioFieldsGetWithHttpInfo(version: kotlin.String, domain: kotlin.String, scenario: kotlin.String) : ApiResponse<CdashigScenarioFields?> {
        val localVariableConfig = mdrCdashigVersionScenariosDomainScenarioFieldsGetRequestConfig(version = version, domain = domain, scenario = scenario)

        return request<Unit, CdashigScenarioFields>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCdashigVersionScenariosDomainScenarioFieldsGet
     *
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     * @param scenario CDASHIG Scenario Identifier
     * @return RequestConfig
     */
    fun mdrCdashigVersionScenariosDomainScenarioFieldsGetRequestConfig(version: kotlin.String, domain: kotlin.String, scenario: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"domain"+"}", encodeURIComponent(domain.toString())).replace("{"+"scenario"+"}", encodeURIComponent(scenario.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/cdashig/{version}/scenarios/{domain}.{scenario}
     * 
     * Get CDASHIG Scenario
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     * @param scenario CDASHIG Scenario Identifier
     * @return CdashigScenario
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCdashigVersionScenariosDomainScenarioGet(version: kotlin.String, domain: kotlin.String, scenario: kotlin.String) : CdashigScenario {
        val localVarResponse = mdrCdashigVersionScenariosDomainScenarioGetWithHttpInfo(version = version, domain = domain, scenario = scenario)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CdashigScenario
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/cdashig/{version}/scenarios/{domain}.{scenario}
     * 
     * Get CDASHIG Scenario
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     * @param scenario CDASHIG Scenario Identifier
     * @return ApiResponse<CdashigScenario?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCdashigVersionScenariosDomainScenarioGetWithHttpInfo(version: kotlin.String, domain: kotlin.String, scenario: kotlin.String) : ApiResponse<CdashigScenario?> {
        val localVariableConfig = mdrCdashigVersionScenariosDomainScenarioGetRequestConfig(version = version, domain = domain, scenario = scenario)

        return request<Unit, CdashigScenario>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCdashigVersionScenariosDomainScenarioGet
     *
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     * @param scenario CDASHIG Scenario Identifier
     * @return RequestConfig
     */
    fun mdrCdashigVersionScenariosDomainScenarioGetRequestConfig(version: kotlin.String, domain: kotlin.String, scenario: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/cdashig/{version}/scenarios/{domain}.{scenario}".replace("{"+"version"+"}", encodeURIComponent(version.toString())).replace("{"+"domain"+"}", encodeURIComponent(domain.toString())).replace("{"+"scenario"+"}", encodeURIComponent(scenario.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/cdashig/{version}/scenarios
     * 
     * Get CDASHIG Scenario List
     * @param version CDISC Library Product Version
     * @return CdashigProductScenarios
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrCdashigVersionScenariosGet(version: kotlin.String) : CdashigProductScenarios {
        val localVarResponse = mdrCdashigVersionScenariosGetWithHttpInfo(version = version)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CdashigProductScenarios
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/cdashig/{version}/scenarios
     * 
     * Get CDASHIG Scenario List
     * @param version CDISC Library Product Version
     * @return ApiResponse<CdashigProductScenarios?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrCdashigVersionScenariosGetWithHttpInfo(version: kotlin.String) : ApiResponse<CdashigProductScenarios?> {
        val localVariableConfig = mdrCdashigVersionScenariosGetRequestConfig(version = version)

        return request<Unit, CdashigProductScenarios>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrCdashigVersionScenariosGet
     *
     * @param version CDISC Library Product Version
     * @return RequestConfig
     */
    fun mdrCdashigVersionScenariosGetRequestConfig(version: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/cdashig/{version}/scenarios".replace("{"+"version"+"}", encodeURIComponent(version.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/root/cdashig/domains/{domain}/fields/{field}
     * 
     * Get Root CDASHIG Domain Field
     * @param domain CDASHIG Domain Identifier
     * @param `field` CDASHIG Field Identifier
     * @return RootCdashigDomainField
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrRootCdashigDomainsDomainFieldsFieldGet(domain: kotlin.String, `field`: kotlin.String) : RootCdashigDomainField {
        val localVarResponse = mdrRootCdashigDomainsDomainFieldsFieldGetWithHttpInfo(domain = domain, `field` = `field`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RootCdashigDomainField
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/root/cdashig/domains/{domain}/fields/{field}
     * 
     * Get Root CDASHIG Domain Field
     * @param domain CDASHIG Domain Identifier
     * @param `field` CDASHIG Field Identifier
     * @return ApiResponse<RootCdashigDomainField?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrRootCdashigDomainsDomainFieldsFieldGetWithHttpInfo(domain: kotlin.String, `field`: kotlin.String) : ApiResponse<RootCdashigDomainField?> {
        val localVariableConfig = mdrRootCdashigDomainsDomainFieldsFieldGetRequestConfig(domain = domain, `field` = `field`)

        return request<Unit, RootCdashigDomainField>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrRootCdashigDomainsDomainFieldsFieldGet
     *
     * @param domain CDASHIG Domain Identifier
     * @param `field` CDASHIG Field Identifier
     * @return RequestConfig
     */
    fun mdrRootCdashigDomainsDomainFieldsFieldGetRequestConfig(domain: kotlin.String, `field`: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/root/cdashig/domains/{domain}/fields/{field}".replace("{"+"domain"+"}", encodeURIComponent(domain.toString())).replace("{"+"field"+"}", encodeURIComponent(`field`.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/root/cdashig/scenarios/{domain}.{scenario}/fields/{field}
     * 
     * Get Root CDASHIG Scenario Field
     * @param domain CDASHIG Domain Identifier
     * @param scenario CDASHIG Scenario Identifier
     * @param `field` CDASHIG Field Identifier
     * @return RootCdashigScenarioField
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrRootCdashigScenariosDomainScenarioFieldsFieldGet(domain: kotlin.String, scenario: kotlin.String, `field`: kotlin.String) : RootCdashigScenarioField {
        val localVarResponse = mdrRootCdashigScenariosDomainScenarioFieldsFieldGetWithHttpInfo(domain = domain, scenario = scenario, `field` = `field`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RootCdashigScenarioField
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/root/cdashig/scenarios/{domain}.{scenario}/fields/{field}
     * 
     * Get Root CDASHIG Scenario Field
     * @param domain CDASHIG Domain Identifier
     * @param scenario CDASHIG Scenario Identifier
     * @param `field` CDASHIG Field Identifier
     * @return ApiResponse<RootCdashigScenarioField?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrRootCdashigScenariosDomainScenarioFieldsFieldGetWithHttpInfo(domain: kotlin.String, scenario: kotlin.String, `field`: kotlin.String) : ApiResponse<RootCdashigScenarioField?> {
        val localVariableConfig = mdrRootCdashigScenariosDomainScenarioFieldsFieldGetRequestConfig(domain = domain, scenario = scenario, `field` = `field`)

        return request<Unit, RootCdashigScenarioField>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrRootCdashigScenariosDomainScenarioFieldsFieldGet
     *
     * @param domain CDASHIG Domain Identifier
     * @param scenario CDASHIG Scenario Identifier
     * @param `field` CDASHIG Field Identifier
     * @return RequestConfig
     */
    fun mdrRootCdashigScenariosDomainScenarioFieldsFieldGetRequestConfig(domain: kotlin.String, scenario: kotlin.String, `field`: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/root/cdashig/scenarios/{domain}.{scenario}/fields/{field}".replace("{"+"domain"+"}", encodeURIComponent(domain.toString())).replace("{"+"scenario"+"}", encodeURIComponent(scenario.toString())).replace("{"+"field"+"}", encodeURIComponent(`field`.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}

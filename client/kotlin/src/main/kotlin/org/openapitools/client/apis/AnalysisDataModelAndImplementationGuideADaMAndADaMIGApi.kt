/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import org.openapitools.client.models.AdamDatastructure
import org.openapitools.client.models.AdamDatastructureVariables
import org.openapitools.client.models.AdamDatastructureVarsets
import org.openapitools.client.models.AdamProduct
import org.openapitools.client.models.AdamProductDatastructures
import org.openapitools.client.models.AdamVariable
import org.openapitools.client.models.AdamVarset
import org.openapitools.client.models.DefaultErrorResponse
import org.openapitools.client.models.ExportAdamDatastructuresTable
import org.openapitools.client.models.ExportAdamVariablesTable
import org.openapitools.client.models.ExportAdamWorkbook
import org.openapitools.client.models.XmlAdamDatastructure
import org.openapitools.client.models.XmlAdamDatastructureVariables
import org.openapitools.client.models.XmlAdamDatastructureVarsets
import org.openapitools.client.models.XmlAdamProduct
import org.openapitools.client.models.XmlAdamProductDatastructures
import org.openapitools.client.models.XmlAdamVariable
import org.openapitools.client.models.XmlAdamVarset

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://library.cdisc.org/api")
        }
    }

    /**
     * GET /mdr/adam/{product}/datastructures
     * 
     * Get ADaM Data Structure List
     * @param product CDISC Library Product
     * @return AdamProductDatastructures
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrAdamProductDatastructuresGet(product: kotlin.String) : AdamProductDatastructures {
        val localVarResponse = mdrAdamProductDatastructuresGetWithHttpInfo(product = product)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdamProductDatastructures
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/adam/{product}/datastructures
     * 
     * Get ADaM Data Structure List
     * @param product CDISC Library Product
     * @return ApiResponse<AdamProductDatastructures?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrAdamProductDatastructuresGetWithHttpInfo(product: kotlin.String) : ApiResponse<AdamProductDatastructures?> {
        val localVariableConfig = mdrAdamProductDatastructuresGetRequestConfig(product = product)

        return request<Unit, AdamProductDatastructures>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrAdamProductDatastructuresGet
     *
     * @param product CDISC Library Product
     * @return RequestConfig
     */
    fun mdrAdamProductDatastructuresGetRequestConfig(product: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/adam/{product}/datastructures".replace("{"+"product"+"}", encodeURIComponent(product.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/adam/{product}/datastructures/{structure}
     * 
     * Get ADaM Data Structure
     * @param product CDISC Library Product
     * @param structure Data structure Identifier
     * @return AdamDatastructure
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrAdamProductDatastructuresStructureGet(product: kotlin.String, structure: kotlin.String) : AdamDatastructure {
        val localVarResponse = mdrAdamProductDatastructuresStructureGetWithHttpInfo(product = product, structure = structure)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdamDatastructure
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/adam/{product}/datastructures/{structure}
     * 
     * Get ADaM Data Structure
     * @param product CDISC Library Product
     * @param structure Data structure Identifier
     * @return ApiResponse<AdamDatastructure?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrAdamProductDatastructuresStructureGetWithHttpInfo(product: kotlin.String, structure: kotlin.String) : ApiResponse<AdamDatastructure?> {
        val localVariableConfig = mdrAdamProductDatastructuresStructureGetRequestConfig(product = product, structure = structure)

        return request<Unit, AdamDatastructure>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrAdamProductDatastructuresStructureGet
     *
     * @param product CDISC Library Product
     * @param structure Data structure Identifier
     * @return RequestConfig
     */
    fun mdrAdamProductDatastructuresStructureGetRequestConfig(product: kotlin.String, structure: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/adam/{product}/datastructures/{structure}".replace("{"+"product"+"}", encodeURIComponent(product.toString())).replace("{"+"structure"+"}", encodeURIComponent(structure.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/adam/{product}/datastructures/{structure}/variables
     * 
     * Get ADaM Variable List
     * @param product CDISC Library Product
     * @param structure ADaM Data Structure Identifier
     * @return AdamDatastructureVariables
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrAdamProductDatastructuresStructureVariablesGet(product: kotlin.String, structure: kotlin.String) : AdamDatastructureVariables {
        val localVarResponse = mdrAdamProductDatastructuresStructureVariablesGetWithHttpInfo(product = product, structure = structure)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdamDatastructureVariables
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/adam/{product}/datastructures/{structure}/variables
     * 
     * Get ADaM Variable List
     * @param product CDISC Library Product
     * @param structure ADaM Data Structure Identifier
     * @return ApiResponse<AdamDatastructureVariables?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrAdamProductDatastructuresStructureVariablesGetWithHttpInfo(product: kotlin.String, structure: kotlin.String) : ApiResponse<AdamDatastructureVariables?> {
        val localVariableConfig = mdrAdamProductDatastructuresStructureVariablesGetRequestConfig(product = product, structure = structure)

        return request<Unit, AdamDatastructureVariables>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrAdamProductDatastructuresStructureVariablesGet
     *
     * @param product CDISC Library Product
     * @param structure ADaM Data Structure Identifier
     * @return RequestConfig
     */
    fun mdrAdamProductDatastructuresStructureVariablesGetRequestConfig(product: kotlin.String, structure: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/adam/{product}/datastructures/{structure}/variables".replace("{"+"product"+"}", encodeURIComponent(product.toString())).replace("{"+"structure"+"}", encodeURIComponent(structure.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/adam/{product}/datastructures/{structure}/variables/{var}
     * 
     * Get ADaM Variable
     * @param product CDISC Library Product
     * @param structure ADaM Data Structure Identifier
     * @param `var` ADaM Variable Identifier
     * @return AdamVariable
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrAdamProductDatastructuresStructureVariablesVarGet(product: kotlin.String, structure: kotlin.String, `var`: kotlin.String) : AdamVariable {
        val localVarResponse = mdrAdamProductDatastructuresStructureVariablesVarGetWithHttpInfo(product = product, structure = structure, `var` = `var`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdamVariable
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/adam/{product}/datastructures/{structure}/variables/{var}
     * 
     * Get ADaM Variable
     * @param product CDISC Library Product
     * @param structure ADaM Data Structure Identifier
     * @param `var` ADaM Variable Identifier
     * @return ApiResponse<AdamVariable?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrAdamProductDatastructuresStructureVariablesVarGetWithHttpInfo(product: kotlin.String, structure: kotlin.String, `var`: kotlin.String) : ApiResponse<AdamVariable?> {
        val localVariableConfig = mdrAdamProductDatastructuresStructureVariablesVarGetRequestConfig(product = product, structure = structure, `var` = `var`)

        return request<Unit, AdamVariable>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrAdamProductDatastructuresStructureVariablesVarGet
     *
     * @param product CDISC Library Product
     * @param structure ADaM Data Structure Identifier
     * @param `var` ADaM Variable Identifier
     * @return RequestConfig
     */
    fun mdrAdamProductDatastructuresStructureVariablesVarGetRequestConfig(product: kotlin.String, structure: kotlin.String, `var`: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/adam/{product}/datastructures/{structure}/variables/{var}".replace("{"+"product"+"}", encodeURIComponent(product.toString())).replace("{"+"structure"+"}", encodeURIComponent(structure.toString())).replace("{"+"var"+"}", encodeURIComponent(`var`.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/adam/{product}/datastructures/{structure}/varsets
     * 
     * Get ADaM Variable Set List
     * @param product CDISC Library Product
     * @param structure ADaM Data Structure Identifier
     * @return AdamDatastructureVarsets
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrAdamProductDatastructuresStructureVarsetsGet(product: kotlin.String, structure: kotlin.String) : AdamDatastructureVarsets {
        val localVarResponse = mdrAdamProductDatastructuresStructureVarsetsGetWithHttpInfo(product = product, structure = structure)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdamDatastructureVarsets
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/adam/{product}/datastructures/{structure}/varsets
     * 
     * Get ADaM Variable Set List
     * @param product CDISC Library Product
     * @param structure ADaM Data Structure Identifier
     * @return ApiResponse<AdamDatastructureVarsets?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrAdamProductDatastructuresStructureVarsetsGetWithHttpInfo(product: kotlin.String, structure: kotlin.String) : ApiResponse<AdamDatastructureVarsets?> {
        val localVariableConfig = mdrAdamProductDatastructuresStructureVarsetsGetRequestConfig(product = product, structure = structure)

        return request<Unit, AdamDatastructureVarsets>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrAdamProductDatastructuresStructureVarsetsGet
     *
     * @param product CDISC Library Product
     * @param structure ADaM Data Structure Identifier
     * @return RequestConfig
     */
    fun mdrAdamProductDatastructuresStructureVarsetsGetRequestConfig(product: kotlin.String, structure: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/adam/{product}/datastructures/{structure}/varsets".replace("{"+"product"+"}", encodeURIComponent(product.toString())).replace("{"+"structure"+"}", encodeURIComponent(structure.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/adam/{product}/datastructures/{structure}/varsets/{varset}
     * 
     * Get ADaM Variable Set
     * @param product CDISC Library Product
     * @param structure ADaM Data Structure Identifier
     * @param varset ADaM Variable Set Identifier
     * @return AdamVarset
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrAdamProductDatastructuresStructureVarsetsVarsetGet(product: kotlin.String, structure: kotlin.String, varset: kotlin.String) : AdamVarset {
        val localVarResponse = mdrAdamProductDatastructuresStructureVarsetsVarsetGetWithHttpInfo(product = product, structure = structure, varset = varset)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdamVarset
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/adam/{product}/datastructures/{structure}/varsets/{varset}
     * 
     * Get ADaM Variable Set
     * @param product CDISC Library Product
     * @param structure ADaM Data Structure Identifier
     * @param varset ADaM Variable Set Identifier
     * @return ApiResponse<AdamVarset?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrAdamProductDatastructuresStructureVarsetsVarsetGetWithHttpInfo(product: kotlin.String, structure: kotlin.String, varset: kotlin.String) : ApiResponse<AdamVarset?> {
        val localVariableConfig = mdrAdamProductDatastructuresStructureVarsetsVarsetGetRequestConfig(product = product, structure = structure, varset = varset)

        return request<Unit, AdamVarset>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrAdamProductDatastructuresStructureVarsetsVarsetGet
     *
     * @param product CDISC Library Product
     * @param structure ADaM Data Structure Identifier
     * @param varset ADaM Variable Set Identifier
     * @return RequestConfig
     */
    fun mdrAdamProductDatastructuresStructureVarsetsVarsetGetRequestConfig(product: kotlin.String, structure: kotlin.String, varset: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/adam/{product}/datastructures/{structure}/varsets/{varset}".replace("{"+"product"+"}", encodeURIComponent(product.toString())).replace("{"+"structure"+"}", encodeURIComponent(structure.toString())).replace("{"+"varset"+"}", encodeURIComponent(varset.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * GET /mdr/adam/{product}
     * 
     * Get ADaM Product
     * @param product CDISC Library Product
     * @return AdamProduct
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mdrAdamProductGet(product: kotlin.String) : AdamProduct {
        val localVarResponse = mdrAdamProductGetWithHttpInfo(product = product)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdamProduct
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * GET /mdr/adam/{product}
     * 
     * Get ADaM Product
     * @param product CDISC Library Product
     * @return ApiResponse<AdamProduct?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mdrAdamProductGetWithHttpInfo(product: kotlin.String) : ApiResponse<AdamProduct?> {
        val localVariableConfig = mdrAdamProductGetRequestConfig(product = product)

        return request<Unit, AdamProduct>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mdrAdamProductGet
     *
     * @param product CDISC Library Product
     * @return RequestConfig
     */
    fun mdrAdamProductGetRequestConfig(product: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/mdr/adam/{product}".replace("{"+"product"+"}", encodeURIComponent(product.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}

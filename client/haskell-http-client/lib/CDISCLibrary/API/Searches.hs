{-
   CDISC Library API

   REST API Documentation for CDISC Library in production server

   OpenAPI Version: 3.0.0
   CDISC Library API API version: 1.1.0
   Contact: cdisc_library_support@cdisc.org
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : CDISCLibrary.API.Searches
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module CDISCLibrary.API.Searches where

import CDISCLibrary.Core
import CDISCLibrary.MimeTypes
import CDISCLibrary.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Searches

-- *** mdrSearchGet

-- | @GET \/mdr\/search@
-- 
-- Get Search Results Across CDISC Library
-- 
-- AuthMethod: 'AuthBasicBasicAuth'
-- 
mdrSearchGet
  :: Q -- ^ "q" -  Search Term Expression
  -> CDISCLibraryRequest MdrSearchGet MimeNoContent DefaultSearchResponse MimeJSON
mdrSearchGet (Q q) =
  _mkRequest "GET" ["/mdr/search"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicBasicAuth)
    `addQuery` toQuery ("q", Just q)

data MdrSearchGet  

-- | /Optional Param/ "highlight" - Search Highlight Expression
instance HasOptionalParam MdrSearchGet Highlight where
  applyOptionalParam req (Highlight xs) =
    req `addQuery` toQuery ("highlight", Just xs)

-- | /Optional Param/ "start" - Initial Search Result Index
instance HasOptionalParam MdrSearchGet Start where
  applyOptionalParam req (Start xs) =
    req `addQuery` toQuery ("start", Just xs)

-- | /Optional Param/ "pageSize" - Number of Search Results to Return
instance HasOptionalParam MdrSearchGet PageSize where
  applyOptionalParam req (PageSize xs) =
    req `addQuery` toQuery ("pageSize", Just xs)

-- | /Optional Param/ "class" - Limit Search by Setting Scope to Class
instance HasOptionalParam MdrSearchGet ParamClass where
  applyOptionalParam req (ParamClass xs) =
    req `addQuery` toQuery ("class", Just xs)

-- | /Optional Param/ "codelist" - Limit Search by Setting Scope to Codelist
instance HasOptionalParam MdrSearchGet Codelist where
  applyOptionalParam req (Codelist xs) =
    req `addQuery` toQuery ("codelist", Just xs)

-- | /Optional Param/ "conceptId" - Limit Search by Setting Scope to Concept ID
instance HasOptionalParam MdrSearchGet ConceptId where
  applyOptionalParam req (ConceptId xs) =
    req `addQuery` toQuery ("conceptId", Just xs)

-- | /Optional Param/ "core" - Limit Search by Setting Scope to Core
instance HasOptionalParam MdrSearchGet Core where
  applyOptionalParam req (Core xs) =
    req `addQuery` toQuery ("core", Just xs)

-- | /Optional Param/ "dataStructure" - Limit Search by Setting Scope to Data Structure
instance HasOptionalParam MdrSearchGet DataStructure where
  applyOptionalParam req (DataStructure xs) =
    req `addQuery` toQuery ("dataStructure", Just xs)

-- | /Optional Param/ "datasetStructure" - Limit Search by Setting Scope to Dataset Structure
instance HasOptionalParam MdrSearchGet DatasetStructure where
  applyOptionalParam req (DatasetStructure xs) =
    req `addQuery` toQuery ("datasetStructure", Just xs)

-- | /Optional Param/ "definition" - Limit Search by Setting Scope to Definition
instance HasOptionalParam MdrSearchGet Definition where
  applyOptionalParam req (Definition xs) =
    req `addQuery` toQuery ("definition", Just xs)

-- | /Optional Param/ "description" - Limit Search by Setting Scope to Description
instance HasOptionalParam MdrSearchGet Description where
  applyOptionalParam req (Description xs) =
    req `addQuery` toQuery ("description", Just xs)

-- | /Optional Param/ "domain" - Limit Search by Setting Scope to Domain
instance HasOptionalParam MdrSearchGet Domain where
  applyOptionalParam req (Domain xs) =
    req `addQuery` toQuery ("domain", Just xs)

-- | /Optional Param/ "effectiveDate" - Limit Search by Setting Scope to Effective Date
instance HasOptionalParam MdrSearchGet EffectiveDate where
  applyOptionalParam req (EffectiveDate xs) =
    req `addQuery` toQuery ("effectiveDate", Just xs)

-- | /Optional Param/ "extensible" - Limit Search by Setting Scope to Extensible
instance HasOptionalParam MdrSearchGet Extensible where
  applyOptionalParam req (Extensible xs) =
    req `addQuery` toQuery ("extensible", Just xs)

-- | /Optional Param/ "href" - Limit Search by Setting Scope to Href
instance HasOptionalParam MdrSearchGet Href where
  applyOptionalParam req (Href xs) =
    req `addQuery` toQuery ("href", Just xs)

-- | /Optional Param/ "label" - Limit Search by Setting Scope to Label
instance HasOptionalParam MdrSearchGet Label where
  applyOptionalParam req (Label xs) =
    req `addQuery` toQuery ("label", Just xs)

-- | /Optional Param/ "measureType" - SLimit Search by Setting Scope to Measure Type
instance HasOptionalParam MdrSearchGet MeasureType where
  applyOptionalParam req (MeasureType xs) =
    req `addQuery` toQuery ("measureType", Just xs)

-- | /Optional Param/ "name" - Limit Search by Setting Scope to Name
instance HasOptionalParam MdrSearchGet Name where
  applyOptionalParam req (Name xs) =
    req `addQuery` toQuery ("name", Just xs)

-- | /Optional Param/ "preferredTerm" - Limit Search by Setting Scope to Preferred Term
instance HasOptionalParam MdrSearchGet PreferredTerm where
  applyOptionalParam req (PreferredTerm xs) =
    req `addQuery` toQuery ("preferredTerm", Just xs)

-- | /Optional Param/ "product" - Limit Search by Setting Scope to Product
instance HasOptionalParam MdrSearchGet Product where
  applyOptionalParam req (Product xs) =
    req `addQuery` toQuery ("product", Just xs)

-- | /Optional Param/ "productGroup" - Limit Search by Setting Scope to Product Group
instance HasOptionalParam MdrSearchGet ProductGroup where
  applyOptionalParam req (ProductGroup xs) =
    req `addQuery` toQuery ("productGroup", Just xs)

-- | /Optional Param/ "registrationStatus" - Limit Search by Setting Scope to Registration Status
instance HasOptionalParam MdrSearchGet RegistrationStatus where
  applyOptionalParam req (RegistrationStatus xs) =
    req `addQuery` toQuery ("registrationStatus", Just xs)

-- | /Optional Param/ "roleDescription" - Limit Search by Setting Scope to Role Description
instance HasOptionalParam MdrSearchGet RoleDescription where
  applyOptionalParam req (RoleDescription xs) =
    req `addQuery` toQuery ("roleDescription", Just xs)

-- | /Optional Param/ "sdtmTarget" - Limit Search by Setting Scope to SDTM Target
instance HasOptionalParam MdrSearchGet SdtmTarget where
  applyOptionalParam req (SdtmTarget xs) =
    req `addQuery` toQuery ("sdtmTarget", Just xs)

-- | /Optional Param/ "simpleDatatype" - Limit Search by Setting Scope to Simple Datatype
instance HasOptionalParam MdrSearchGet SimpleDatatype where
  applyOptionalParam req (SimpleDatatype xs) =
    req `addQuery` toQuery ("simpleDatatype", Just xs)

-- | /Optional Param/ "submissionValue" - Limit Search by Setting Scope to Submission Value
instance HasOptionalParam MdrSearchGet SubmissionValue where
  applyOptionalParam req (SubmissionValue xs) =
    req `addQuery` toQuery ("submissionValue", Just xs)

-- | /Optional Param/ "synonyms" - Limit Search by Setting Scope to Synonyms
instance HasOptionalParam MdrSearchGet Synonyms where
  applyOptionalParam req (Synonyms xs) =
    req `addQuery` toQuery ("synonyms", Just xs)

-- | /Optional Param/ "type" - Limit Search by Setting Scope to Type
instance HasOptionalParam MdrSearchGet ParamType where
  applyOptionalParam req (ParamType xs) =
    req `addQuery` toQuery ("type", Just xs)

-- | /Optional Param/ "uiHref" - Limit Search by Setting Scope to UI Href
instance HasOptionalParam MdrSearchGet UiHref where
  applyOptionalParam req (UiHref xs) =
    req `addQuery` toQuery ("uiHref", Just xs)

-- | /Optional Param/ "valueDomain" - Limit Search by Setting Scope to Value Domain
instance HasOptionalParam MdrSearchGet ValueDomain where
  applyOptionalParam req (ValueDomain xs) =
    req `addQuery` toQuery ("valueDomain", Just xs)

-- | /Optional Param/ "variableSet" - Limit Search by Setting Scope to Variable Set
instance HasOptionalParam MdrSearchGet VariableSet where
  applyOptionalParam req (VariableSet xs) =
    req `addQuery` toQuery ("variableSet", Just xs)

-- | /Optional Param/ "version" - Limit Search by Setting Scope to Version
instance HasOptionalParam MdrSearchGet Version where
  applyOptionalParam req (Version xs) =
    req `addQuery` toQuery ("version", Just xs)
-- | @application/json@
instance Produces MdrSearchGet MimeJSON


-- *** mdrSearchScopesGet

-- | @GET \/mdr\/search\/scopes@
-- 
-- Get Search Results Across CDISC Library
-- 
-- AuthMethod: 'AuthBasicBasicAuth'
-- 
mdrSearchScopesGet
  :: CDISCLibraryRequest MdrSearchScopesGet MimeNoContent MdrSearchScopesGet200Response MimeJSON
mdrSearchScopesGet =
  _mkRequest "GET" ["/mdr/search/scopes"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicBasicAuth)

data MdrSearchScopesGet  
-- | @application/json@
instance Produces MdrSearchScopesGet MimeJSON


-- *** mdrSearchScopesScopeGet

-- | @GET \/mdr\/search\/scopes\/{scope}@
-- 
-- Get Search Results Limited to Scope
-- 
-- AuthMethod: 'AuthBasicBasicAuth'
-- 
mdrSearchScopesScopeGet
  :: Scope -- ^ "scope" -  Search Scope
  -> CDISCLibraryRequest MdrSearchScopesScopeGet MimeNoContent ScopeValues MimeJSON
mdrSearchScopesScopeGet (Scope scope) =
  _mkRequest "GET" ["/mdr/search/scopes/",toPath scope]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthBasicBasicAuth)

data MdrSearchScopesScopeGet  
-- | @application/json@
instance Produces MdrSearchScopesScopeGet MimeJSON


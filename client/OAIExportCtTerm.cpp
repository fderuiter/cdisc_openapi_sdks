/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportCtTerm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportCtTerm::OAIExportCtTerm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportCtTerm::OAIExportCtTerm() {
    this->initializeModel();
}

OAIExportCtTerm::~OAIExportCtTerm() {}

void OAIExportCtTerm::initializeModel() {

    m_bundle_1_isSet = false;
    m_bundle_1_isValid = false;

    m_cdisc_synonym_s_isSet = false;
    m_cdisc_synonym_s_isValid = false;

    m_bundle_2_isSet = false;
    m_bundle_2_isValid = false;
}

void OAIExportCtTerm::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportCtTerm::fromJsonObject(QJsonObject json) {

    m_bundle_1_isValid = ::OpenAPI::fromJsonValue(m_bundle_1, json[QString("bundle-1")]);
    m_bundle_1_isSet = !json[QString("bundle-1")].isNull() && m_bundle_1_isValid;

    m_cdisc_synonym_s_isValid = ::OpenAPI::fromJsonValue(m_cdisc_synonym_s, json[QString("CDISC Synonym(s)")]);
    m_cdisc_synonym_s_isSet = !json[QString("CDISC Synonym(s)")].isNull() && m_cdisc_synonym_s_isValid;

    m_bundle_2_isValid = ::OpenAPI::fromJsonValue(m_bundle_2, json[QString("bundle-2")]);
    m_bundle_2_isSet = !json[QString("bundle-2")].isNull() && m_bundle_2_isValid;
}

QString OAIExportCtTerm::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportCtTerm::asJsonObject() const {
    QJsonObject obj;
    if (m_bundle_1_isSet) {
        obj.insert(QString("bundle-1"), ::OpenAPI::toJsonValue(m_bundle_1));
    }
    if (m_cdisc_synonym_s.size() > 0) {
        obj.insert(QString("CDISC Synonym(s)"), ::OpenAPI::toJsonValue(m_cdisc_synonym_s));
    }
    if (m_bundle_2_isSet) {
        obj.insert(QString("bundle-2"), ::OpenAPI::toJsonValue(m_bundle_2));
    }
    return obj;
}

QString OAIExportCtTerm::getBundle1() const {
    return m_bundle_1;
}
void OAIExportCtTerm::setBundle1(const QString &bundle_1) {
    m_bundle_1 = bundle_1;
    m_bundle_1_isSet = true;
}

bool OAIExportCtTerm::is_bundle_1_Set() const{
    return m_bundle_1_isSet;
}

bool OAIExportCtTerm::is_bundle_1_Valid() const{
    return m_bundle_1_isValid;
}

QList<QString> OAIExportCtTerm::getCdiscSynonymS() const {
    return m_cdisc_synonym_s;
}
void OAIExportCtTerm::setCdiscSynonymS(const QList<QString> &cdisc_synonym_s) {
    m_cdisc_synonym_s = cdisc_synonym_s;
    m_cdisc_synonym_s_isSet = true;
}

bool OAIExportCtTerm::is_cdisc_synonym_s_Set() const{
    return m_cdisc_synonym_s_isSet;
}

bool OAIExportCtTerm::is_cdisc_synonym_s_Valid() const{
    return m_cdisc_synonym_s_isValid;
}

QString OAIExportCtTerm::getBundle2() const {
    return m_bundle_2;
}
void OAIExportCtTerm::setBundle2(const QString &bundle_2) {
    m_bundle_2 = bundle_2;
    m_bundle_2_isSet = true;
}

bool OAIExportCtTerm::is_bundle_2_Set() const{
    return m_bundle_2_isSet;
}

bool OAIExportCtTerm::is_bundle_2_Valid() const{
    return m_bundle_2_isValid;
}

bool OAIExportCtTerm::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bundle_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cdisc_synonym_s.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_2_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportCtTerm::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI

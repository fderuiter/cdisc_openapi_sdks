/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultSearchScopes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefaultSearchScopes::OAIDefaultSearchScopes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefaultSearchScopes::OAIDefaultSearchScopes() {
    this->initializeModel();
}

OAIDefaultSearchScopes::~OAIDefaultSearchScopes() {}

void OAIDefaultSearchScopes::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDefaultSearchScopes::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDefaultSearchScopes::fromJson(QString jsonString) {
    
    if ( jsonString.compare("class", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::CLASS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("codelist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::CODELIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("conceptId", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::CONCEPTID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("core", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::CORE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("dataStructure", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::DATASTRUCTURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("datasetStructure", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::DATASETSTRUCTURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("definition", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::DEFINITION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("description", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::DESCRIPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("domain", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::DOMAIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("effectiveDate", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::EFFECTIVEDATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("extensible", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::EXTENSIBLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("href", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::HREF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("label", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::LABEL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("measureType", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::MEASURETYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("name", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::NAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("preferredTerm", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::PREFERREDTERM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("product", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::PRODUCT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("productGroup", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::PRODUCTGROUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("registrationStatus", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::REGISTRATIONSTATUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("roleDescription", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::ROLEDESCRIPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sdtmTarget", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::SDTMTARGET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("simpleDatatype", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::SIMPLEDATATYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("submissionValue", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::SUBMISSIONVALUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("synonyms", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::SYNONYMS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("type", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::TYPE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("uiHref", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::UIHREF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("valueDomain", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::VALUEDOMAIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("variableSet", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::VARIABLESET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("version", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDefaultSearchScopes::VERSION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDefaultSearchScopes::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDefaultSearchScopes::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDefaultSearchScopes::CLASS:
            val = "class";
            break;
        case eOAIDefaultSearchScopes::CODELIST:
            val = "codelist";
            break;
        case eOAIDefaultSearchScopes::CONCEPTID:
            val = "conceptId";
            break;
        case eOAIDefaultSearchScopes::CORE:
            val = "core";
            break;
        case eOAIDefaultSearchScopes::DATASTRUCTURE:
            val = "dataStructure";
            break;
        case eOAIDefaultSearchScopes::DATASETSTRUCTURE:
            val = "datasetStructure";
            break;
        case eOAIDefaultSearchScopes::DEFINITION:
            val = "definition";
            break;
        case eOAIDefaultSearchScopes::DESCRIPTION:
            val = "description";
            break;
        case eOAIDefaultSearchScopes::DOMAIN:
            val = "domain";
            break;
        case eOAIDefaultSearchScopes::EFFECTIVEDATE:
            val = "effectiveDate";
            break;
        case eOAIDefaultSearchScopes::EXTENSIBLE:
            val = "extensible";
            break;
        case eOAIDefaultSearchScopes::HREF:
            val = "href";
            break;
        case eOAIDefaultSearchScopes::LABEL:
            val = "label";
            break;
        case eOAIDefaultSearchScopes::MEASURETYPE:
            val = "measureType";
            break;
        case eOAIDefaultSearchScopes::NAME:
            val = "name";
            break;
        case eOAIDefaultSearchScopes::PREFERREDTERM:
            val = "preferredTerm";
            break;
        case eOAIDefaultSearchScopes::PRODUCT:
            val = "product";
            break;
        case eOAIDefaultSearchScopes::PRODUCTGROUP:
            val = "productGroup";
            break;
        case eOAIDefaultSearchScopes::REGISTRATIONSTATUS:
            val = "registrationStatus";
            break;
        case eOAIDefaultSearchScopes::ROLEDESCRIPTION:
            val = "roleDescription";
            break;
        case eOAIDefaultSearchScopes::SDTMTARGET:
            val = "sdtmTarget";
            break;
        case eOAIDefaultSearchScopes::SIMPLEDATATYPE:
            val = "simpleDatatype";
            break;
        case eOAIDefaultSearchScopes::SUBMISSIONVALUE:
            val = "submissionValue";
            break;
        case eOAIDefaultSearchScopes::SYNONYMS:
            val = "synonyms";
            break;
        case eOAIDefaultSearchScopes::TYPE:
            val = "type";
            break;
        case eOAIDefaultSearchScopes::UIHREF:
            val = "uiHref";
            break;
        case eOAIDefaultSearchScopes::VALUEDOMAIN:
            val = "valueDomain";
            break;
        case eOAIDefaultSearchScopes::VARIABLESET:
            val = "variableSet";
            break;
        case eOAIDefaultSearchScopes::VERSION:
            val = "version";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDefaultSearchScopes::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDefaultSearchScopes::eOAIDefaultSearchScopes OAIDefaultSearchScopes::getValue() const {
    return m_value;
}

void OAIDefaultSearchScopes::setValue(const OAIDefaultSearchScopes::eOAIDefaultSearchScopes& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDefaultSearchScopes::isSet() const {
    
    return m_value_isSet;
}

bool OAIDefaultSearchScopes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI

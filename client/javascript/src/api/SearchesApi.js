/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultErrorResponse from '../model/DefaultErrorResponse';
import DefaultSearchResponse from '../model/DefaultSearchResponse';
import DefaultSearchScopes from '../model/DefaultSearchScopes';
import MdrSearchScopesGet200Response from '../model/MdrSearchScopesGet200Response';
import ScopeValues from '../model/ScopeValues';

/**
* Searches service.
* @module api/SearchesApi
* @version 1.1.0
*/
export default class SearchesApi {

    /**
    * Constructs a new SearchesApi. 
    * @alias module:api/SearchesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mdrSearchGet operation.
     * @callback module:api/SearchesApi~mdrSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Search Results Across CDISC Library
     * @param {String} q Search Term Expression
     * @param {Object} opts Optional parameters
     * @param {String} [highlight] Search Highlight Expression
     * @param {Number} [start = 0)] Initial Search Result Index
     * @param {Number} [pageSize = 100)] Number of Search Results to Return
     * @param {String} [_class] Limit Search by Setting Scope to Class
     * @param {String} [codelist] Limit Search by Setting Scope to Codelist
     * @param {String} [conceptId] Limit Search by Setting Scope to Concept ID
     * @param {String} [core] Limit Search by Setting Scope to Core
     * @param {String} [dataStructure] Limit Search by Setting Scope to Data Structure
     * @param {String} [datasetStructure] Limit Search by Setting Scope to Dataset Structure
     * @param {String} [definition] Limit Search by Setting Scope to Definition
     * @param {String} [description] Limit Search by Setting Scope to Description
     * @param {String} [domain] Limit Search by Setting Scope to Domain
     * @param {String} [effectiveDate] Limit Search by Setting Scope to Effective Date
     * @param {String} [extensible] Limit Search by Setting Scope to Extensible
     * @param {String} [href] Limit Search by Setting Scope to Href
     * @param {String} [label] Limit Search by Setting Scope to Label
     * @param {String} [measureType] SLimit Search by Setting Scope to Measure Type
     * @param {String} [name] Limit Search by Setting Scope to Name
     * @param {String} [preferredTerm] Limit Search by Setting Scope to Preferred Term
     * @param {String} [product] Limit Search by Setting Scope to Product
     * @param {String} [productGroup] Limit Search by Setting Scope to Product Group
     * @param {String} [registrationStatus] Limit Search by Setting Scope to Registration Status
     * @param {String} [roleDescription] Limit Search by Setting Scope to Role Description
     * @param {String} [sdtmTarget] Limit Search by Setting Scope to SDTM Target
     * @param {String} [simpleDatatype] Limit Search by Setting Scope to Simple Datatype
     * @param {String} [submissionValue] Limit Search by Setting Scope to Submission Value
     * @param {String} [synonyms] Limit Search by Setting Scope to Synonyms
     * @param {String} [type] Limit Search by Setting Scope to Type
     * @param {String} [uiHref] Limit Search by Setting Scope to UI Href
     * @param {String} [valueDomain] Limit Search by Setting Scope to Value Domain
     * @param {String} [variableSet] Limit Search by Setting Scope to Variable Set
     * @param {String} [version] Limit Search by Setting Scope to Version
     * @param {module:api/SearchesApi~mdrSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultSearchResponse}
     */
    mdrSearchGet(q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling mdrSearchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'highlight': opts['highlight'],
        'start': opts['start'],
        'pageSize': opts['pageSize'],
        'class': opts['_class'],
        'codelist': opts['codelist'],
        'conceptId': opts['conceptId'],
        'core': opts['core'],
        'dataStructure': opts['dataStructure'],
        'datasetStructure': opts['datasetStructure'],
        'definition': opts['definition'],
        'description': opts['description'],
        'domain': opts['domain'],
        'effectiveDate': opts['effectiveDate'],
        'extensible': opts['extensible'],
        'href': opts['href'],
        'label': opts['label'],
        'measureType': opts['measureType'],
        'name': opts['name'],
        'preferredTerm': opts['preferredTerm'],
        'product': opts['product'],
        'productGroup': opts['productGroup'],
        'registrationStatus': opts['registrationStatus'],
        'roleDescription': opts['roleDescription'],
        'sdtmTarget': opts['sdtmTarget'],
        'simpleDatatype': opts['simpleDatatype'],
        'submissionValue': opts['submissionValue'],
        'synonyms': opts['synonyms'],
        'type': opts['type'],
        'uiHref': opts['uiHref'],
        'valueDomain': opts['valueDomain'],
        'variableSet': opts['variableSet'],
        'version': opts['version']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultSearchResponse;
      return this.apiClient.callApi(
        '/mdr/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mdrSearchScopesGet operation.
     * @callback module:api/SearchesApi~mdrSearchScopesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MdrSearchScopesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Search Results Across CDISC Library
     * @param {module:api/SearchesApi~mdrSearchScopesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MdrSearchScopesGet200Response}
     */
    mdrSearchScopesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MdrSearchScopesGet200Response;
      return this.apiClient.callApi(
        '/mdr/search/scopes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mdrSearchScopesScopeGet operation.
     * @callback module:api/SearchesApi~mdrSearchScopesScopeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScopeValues} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Search Results Limited to Scope
     * @param {module:model/DefaultSearchScopes} scope Search Scope
     * @param {module:api/SearchesApi~mdrSearchScopesScopeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScopeValues}
     */
    mdrSearchScopesScopeGet(scope, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling mdrSearchScopesScopeGet");
      }

      let pathParams = {
        'scope': scope
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScopeValues;
      return this.apiClient.callApi(
        '/mdr/search/scopes/{scope}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}

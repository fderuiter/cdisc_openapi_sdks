/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExportCtTerm from './ExportCtTerm';

/**
 * The ExportCtCodelist model module.
 * @module model/ExportCtCodelist
 * @version 1.1.0
 */
class ExportCtCodelist {
    /**
     * Constructs a new <code>ExportCtCodelist</code>.
     * @alias module:model/ExportCtCodelist
     */
    constructor() { 
        
        ExportCtCodelist.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExportCtCodelist</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExportCtCodelist} obj Optional instance to populate.
     * @return {module:model/ExportCtCodelist} The populated <code>ExportCtCodelist</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExportCtCodelist();

            if (data.hasOwnProperty('Code')) {
                obj['Code'] = ApiClient.convertToType(data['Code'], 'String');
            }
            if (data.hasOwnProperty('Codelist Code')) {
                obj['Codelist Code'] = ApiClient.convertToType(data['Codelist Code'], 'String');
            }
            if (data.hasOwnProperty('Codelist Extensible (Yes/No)')) {
                obj['Codelist Extensible (Yes/No)'] = ApiClient.convertToType(data['Codelist Extensible (Yes/No)'], 'String');
            }
            if (data.hasOwnProperty('Codelist Name')) {
                obj['Codelist Name'] = ApiClient.convertToType(data['Codelist Name'], 'String');
            }
            if (data.hasOwnProperty('CDISC Submission Value')) {
                obj['CDISC Submission Value'] = ApiClient.convertToType(data['CDISC Submission Value'], 'String');
            }
            if (data.hasOwnProperty('CDISC Synonym(s)')) {
                obj['CDISC Synonym(s)'] = ApiClient.convertToType(data['CDISC Synonym(s)'], ['String']);
            }
            if (data.hasOwnProperty('CDISC Definition')) {
                obj['CDISC Definition'] = ApiClient.convertToType(data['CDISC Definition'], 'String');
            }
            if (data.hasOwnProperty('NCI Preferred Term')) {
                obj['NCI Preferred Term'] = ApiClient.convertToType(data['NCI Preferred Term'], 'String');
            }
            if (data.hasOwnProperty('Standard and Date')) {
                obj['Standard and Date'] = ApiClient.convertToType(data['Standard and Date'], 'String');
            }
            if (data.hasOwnProperty('')) {
                obj[''] = ApiClient.convertToType(data[''], [ExportCtTerm]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExportCtCodelist</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExportCtCodelist</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Code'] && !(typeof data['Code'] === 'string' || data['Code'] instanceof String)) {
            throw new Error("Expected the field `Code` to be a primitive type in the JSON string but got " + data['Code']);
        }
        // ensure the json data is a string
        if (data['Codelist Code'] && !(typeof data['Codelist Code'] === 'string' || data['Codelist Code'] instanceof String)) {
            throw new Error("Expected the field `Codelist Code` to be a primitive type in the JSON string but got " + data['Codelist Code']);
        }
        // ensure the json data is a string
        if (data['Codelist Extensible (Yes/No)'] && !(typeof data['Codelist Extensible (Yes/No)'] === 'string' || data['Codelist Extensible (Yes/No)'] instanceof String)) {
            throw new Error("Expected the field `Codelist Extensible (Yes/No)` to be a primitive type in the JSON string but got " + data['Codelist Extensible (Yes/No)']);
        }
        // ensure the json data is a string
        if (data['Codelist Name'] && !(typeof data['Codelist Name'] === 'string' || data['Codelist Name'] instanceof String)) {
            throw new Error("Expected the field `Codelist Name` to be a primitive type in the JSON string but got " + data['Codelist Name']);
        }
        // ensure the json data is a string
        if (data['CDISC Submission Value'] && !(typeof data['CDISC Submission Value'] === 'string' || data['CDISC Submission Value'] instanceof String)) {
            throw new Error("Expected the field `CDISC Submission Value` to be a primitive type in the JSON string but got " + data['CDISC Submission Value']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['CDISC Synonym(s)'])) {
            throw new Error("Expected the field `CDISC Synonym(s)` to be an array in the JSON data but got " + data['CDISC Synonym(s)']);
        }
        // ensure the json data is a string
        if (data['CDISC Definition'] && !(typeof data['CDISC Definition'] === 'string' || data['CDISC Definition'] instanceof String)) {
            throw new Error("Expected the field `CDISC Definition` to be a primitive type in the JSON string but got " + data['CDISC Definition']);
        }
        // ensure the json data is a string
        if (data['NCI Preferred Term'] && !(typeof data['NCI Preferred Term'] === 'string' || data['NCI Preferred Term'] instanceof String)) {
            throw new Error("Expected the field `NCI Preferred Term` to be a primitive type in the JSON string but got " + data['NCI Preferred Term']);
        }
        // ensure the json data is a string
        if (data['Standard and Date'] && !(typeof data['Standard and Date'] === 'string' || data['Standard and Date'] instanceof String)) {
            throw new Error("Expected the field `Standard and Date` to be a primitive type in the JSON string but got " + data['Standard and Date']);
        }
        if (data['']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data[''])) {
                throw new Error("Expected the field `` to be an array in the JSON data but got " + data['']);
            }
            // validate the optional field `` (array)
            for (const item of data['']) {
                ExportCtTerm.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} Code
 */
ExportCtCodelist.prototype['Code'] = undefined;

/**
 * @member {String} Codelist Code
 */
ExportCtCodelist.prototype['Codelist Code'] = undefined;

/**
 * @member {String} Codelist Extensible (Yes/No)
 */
ExportCtCodelist.prototype['Codelist Extensible (Yes/No)'] = undefined;

/**
 * @member {String} Codelist Name
 */
ExportCtCodelist.prototype['Codelist Name'] = undefined;

/**
 * @member {String} CDISC Submission Value
 */
ExportCtCodelist.prototype['CDISC Submission Value'] = undefined;

/**
 * @member {Array.<String>} CDISC Synonym(s)
 */
ExportCtCodelist.prototype['CDISC Synonym(s)'] = undefined;

/**
 * @member {String} CDISC Definition
 */
ExportCtCodelist.prototype['CDISC Definition'] = undefined;

/**
 * @member {String} NCI Preferred Term
 */
ExportCtCodelist.prototype['NCI Preferred Term'] = undefined;

/**
 * @member {String} Standard and Date
 */
ExportCtCodelist.prototype['Standard and Date'] = undefined;

/**
 * @member {Array.<module:model/ExportCtTerm>} 
 */
ExportCtCodelist.prototype[''] = undefined;






export default ExportCtCodelist;


/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExportQrsGeneral model module.
 * @module model/ExportQrsGeneral
 * @version 1.1.0
 */
class ExportQrsGeneral {
    /**
     * Constructs a new <code>ExportQrsGeneral</code>.
     * @alias module:model/ExportQrsGeneral
     */
    constructor() { 
        
        ExportQrsGeneral.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExportQrsGeneral</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExportQrsGeneral} obj Optional instance to populate.
     * @return {module:model/ExportQrsGeneral} The populated <code>ExportQrsGeneral</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExportQrsGeneral();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Label')) {
                obj['Label'] = ApiClient.convertToType(data['Label'], 'String');
            }
            if (data.hasOwnProperty('Effective Date')) {
                obj['Effective Date'] = ApiClient.convertToType(data['Effective Date'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('Category&#39;s Codelist C-Code')) {
                obj['Category&#39;s Codelist C-Code'] = ApiClient.convertToType(data['Category's Codelist C-Code'], 'String');
            }
            if (data.hasOwnProperty('Category&#39;s Term C-Code')) {
                obj['Category&#39;s Term C-Code'] = ApiClient.convertToType(data['Category's Term C-Code'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExportQrsGeneral</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExportQrsGeneral</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Label'] && !(typeof data['Label'] === 'string' || data['Label'] instanceof String)) {
            throw new Error("Expected the field `Label` to be a primitive type in the JSON string but got " + data['Label']);
        }
        // ensure the json data is a string
        if (data['Effective Date'] && !(typeof data['Effective Date'] === 'string' || data['Effective Date'] instanceof String)) {
            throw new Error("Expected the field `Effective Date` to be a primitive type in the JSON string but got " + data['Effective Date']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }
        // ensure the json data is a string
        if (data['Category's Codelist C-Code'] && !(typeof data['Category's Codelist C-Code'] === 'string' || data['Category's Codelist C-Code'] instanceof String)) {
            throw new Error("Expected the field `Category's Codelist C-Code` to be a primitive type in the JSON string but got " + data['Category's Codelist C-Code']);
        }
        // ensure the json data is a string
        if (data['Category's Term C-Code'] && !(typeof data['Category's Term C-Code'] === 'string' || data['Category's Term C-Code'] instanceof String)) {
            throw new Error("Expected the field `Category's Term C-Code` to be a primitive type in the JSON string but got " + data['Category's Term C-Code']);
        }

        return true;
    }


}



/**
 * @member {String} Name
 */
ExportQrsGeneral.prototype['Name'] = undefined;

/**
 * @member {String} Label
 */
ExportQrsGeneral.prototype['Label'] = undefined;

/**
 * @member {String} Effective Date
 */
ExportQrsGeneral.prototype['Effective Date'] = undefined;

/**
 * @member {String} Description
 */
ExportQrsGeneral.prototype['Description'] = undefined;

/**
 * @member {String} Type
 */
ExportQrsGeneral.prototype['Type'] = undefined;

/**
 * @member {String} Category&#39;s Codelist C-Code
 */
ExportQrsGeneral.prototype['Category&#39;s Codelist C-Code'] = undefined;

/**
 * @member {String} Category&#39;s Term C-Code
 */
ExportQrsGeneral.prototype['Category&#39;s Term C-Code'] = undefined;






export default ExportQrsGeneral;


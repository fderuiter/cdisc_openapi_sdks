/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LastupdatedLinks from './LastupdatedLinks';

/**
 * The Lastupdated model module.
 * @module model/Lastupdated
 * @version 1.1.0
 */
class Lastupdated {
    /**
     * Constructs a new <code>Lastupdated</code>.
     * @alias module:model/Lastupdated
     */
    constructor() { 
        
        Lastupdated.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Lastupdated</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Lastupdated} obj Optional instance to populate.
     * @return {module:model/Lastupdated} The populated <code>Lastupdated</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Lastupdated();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = LastupdatedLinks.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('overall')) {
                obj['overall'] = ApiClient.convertToType(data['overall'], 'String');
            }
            if (data.hasOwnProperty('data-analysis')) {
                obj['data-analysis'] = ApiClient.convertToType(data['data-analysis'], 'String');
            }
            if (data.hasOwnProperty('data-collection')) {
                obj['data-collection'] = ApiClient.convertToType(data['data-collection'], 'String');
            }
            if (data.hasOwnProperty('data-tabulation')) {
                obj['data-tabulation'] = ApiClient.convertToType(data['data-tabulation'], 'String');
            }
            if (data.hasOwnProperty('measure')) {
                obj['measure'] = ApiClient.convertToType(data['measure'], 'String');
            }
            if (data.hasOwnProperty('terminology')) {
                obj['terminology'] = ApiClient.convertToType(data['terminology'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Lastupdated</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Lastupdated</code>.
     */
    static validateJSON(data) {
        // validate the optional field `_links`
        if (data['_links']) { // data not null
          LastupdatedLinks.validateJSON(data['_links']);
        }
        // ensure the json data is a string
        if (data['overall'] && !(typeof data['overall'] === 'string' || data['overall'] instanceof String)) {
            throw new Error("Expected the field `overall` to be a primitive type in the JSON string but got " + data['overall']);
        }
        // ensure the json data is a string
        if (data['data-analysis'] && !(typeof data['data-analysis'] === 'string' || data['data-analysis'] instanceof String)) {
            throw new Error("Expected the field `data-analysis` to be a primitive type in the JSON string but got " + data['data-analysis']);
        }
        // ensure the json data is a string
        if (data['data-collection'] && !(typeof data['data-collection'] === 'string' || data['data-collection'] instanceof String)) {
            throw new Error("Expected the field `data-collection` to be a primitive type in the JSON string but got " + data['data-collection']);
        }
        // ensure the json data is a string
        if (data['data-tabulation'] && !(typeof data['data-tabulation'] === 'string' || data['data-tabulation'] instanceof String)) {
            throw new Error("Expected the field `data-tabulation` to be a primitive type in the JSON string but got " + data['data-tabulation']);
        }
        // ensure the json data is a string
        if (data['measure'] && !(typeof data['measure'] === 'string' || data['measure'] instanceof String)) {
            throw new Error("Expected the field `measure` to be a primitive type in the JSON string but got " + data['measure']);
        }
        // ensure the json data is a string
        if (data['terminology'] && !(typeof data['terminology'] === 'string' || data['terminology'] instanceof String)) {
            throw new Error("Expected the field `terminology` to be a primitive type in the JSON string but got " + data['terminology']);
        }

        return true;
    }


}



/**
 * @member {module:model/LastupdatedLinks} _links
 */
Lastupdated.prototype['_links'] = undefined;

/**
 * @member {String} overall
 */
Lastupdated.prototype['overall'] = undefined;

/**
 * @member {String} data-analysis
 */
Lastupdated.prototype['data-analysis'] = undefined;

/**
 * @member {String} data-collection
 */
Lastupdated.prototype['data-collection'] = undefined;

/**
 * @member {String} data-tabulation
 */
Lastupdated.prototype['data-tabulation'] = undefined;

/**
 * @member {String} measure
 */
Lastupdated.prototype['measure'] = undefined;

/**
 * @member {String} terminology
 */
Lastupdated.prototype['terminology'] = undefined;






export default Lastupdated;


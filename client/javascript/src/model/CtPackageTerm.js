/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CtPackageTerm model module.
 * @module model/CtPackageTerm
 * @version 1.1.0
 */
class CtPackageTerm {
    /**
     * Constructs a new <code>CtPackageTerm</code>.
     * @alias module:model/CtPackageTerm
     */
    constructor() { 
        
        CtPackageTerm.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CtPackageTerm</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CtPackageTerm} obj Optional instance to populate.
     * @return {module:model/CtPackageTerm} The populated <code>CtPackageTerm</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CtPackageTerm();

            if (data.hasOwnProperty('conceptId')) {
                obj['conceptId'] = ApiClient.convertToType(data['conceptId'], 'String');
            }
            if (data.hasOwnProperty('submissionValue')) {
                obj['submissionValue'] = ApiClient.convertToType(data['submissionValue'], 'String');
            }
            if (data.hasOwnProperty('definition')) {
                obj['definition'] = ApiClient.convertToType(data['definition'], 'String');
            }
            if (data.hasOwnProperty('preferredTerm')) {
                obj['preferredTerm'] = ApiClient.convertToType(data['preferredTerm'], 'String');
            }
            if (data.hasOwnProperty('synonyms')) {
                obj['synonyms'] = ApiClient.convertToType(data['synonyms'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CtPackageTerm</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CtPackageTerm</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['conceptId'] && !(typeof data['conceptId'] === 'string' || data['conceptId'] instanceof String)) {
            throw new Error("Expected the field `conceptId` to be a primitive type in the JSON string but got " + data['conceptId']);
        }
        // ensure the json data is a string
        if (data['submissionValue'] && !(typeof data['submissionValue'] === 'string' || data['submissionValue'] instanceof String)) {
            throw new Error("Expected the field `submissionValue` to be a primitive type in the JSON string but got " + data['submissionValue']);
        }
        // ensure the json data is a string
        if (data['definition'] && !(typeof data['definition'] === 'string' || data['definition'] instanceof String)) {
            throw new Error("Expected the field `definition` to be a primitive type in the JSON string but got " + data['definition']);
        }
        // ensure the json data is a string
        if (data['preferredTerm'] && !(typeof data['preferredTerm'] === 'string' || data['preferredTerm'] instanceof String)) {
            throw new Error("Expected the field `preferredTerm` to be a primitive type in the JSON string but got " + data['preferredTerm']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['synonyms'])) {
            throw new Error("Expected the field `synonyms` to be an array in the JSON data but got " + data['synonyms']);
        }

        return true;
    }


}



/**
 * @member {String} conceptId
 */
CtPackageTerm.prototype['conceptId'] = undefined;

/**
 * @member {String} submissionValue
 */
CtPackageTerm.prototype['submissionValue'] = undefined;

/**
 * @member {String} definition
 */
CtPackageTerm.prototype['definition'] = undefined;

/**
 * @member {String} preferredTerm
 */
CtPackageTerm.prototype['preferredTerm'] = undefined;

/**
 * @member {Array.<String>} synonyms
 */
CtPackageTerm.prototype['synonyms'] = undefined;






export default CtPackageTerm;


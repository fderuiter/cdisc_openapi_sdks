/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIControlledTerminologyCTApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIControlledTerminologyCTApi::OAIControlledTerminologyCTApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIControlledTerminologyCTApi::~OAIControlledTerminologyCTApi() {
}

void OAIControlledTerminologyCTApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://library.cdisc.org/api"),
    "Production server",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://virtserver.swaggerhub.com/CDISC1/share-2.0/1.1.0"),
    "SwaggerHub API Auto Mocking",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("mdrCtPackagesGet", defaultConf);
    _serverIndices.insert("mdrCtPackagesGet", 0);
    _serverConfigs.insert("mdrCtPackagesPackageCodelistsCodelistGet", defaultConf);
    _serverIndices.insert("mdrCtPackagesPackageCodelistsCodelistGet", 0);
    _serverConfigs.insert("mdrCtPackagesPackageCodelistsCodelistTermsGet", defaultConf);
    _serverIndices.insert("mdrCtPackagesPackageCodelistsCodelistTermsGet", 0);
    _serverConfigs.insert("mdrCtPackagesPackageCodelistsCodelistTermsTermGet", defaultConf);
    _serverIndices.insert("mdrCtPackagesPackageCodelistsCodelistTermsTermGet", 0);
    _serverConfigs.insert("mdrCtPackagesPackageCodelistsGet", defaultConf);
    _serverIndices.insert("mdrCtPackagesPackageCodelistsGet", 0);
    _serverConfigs.insert("mdrCtPackagesProductGet", defaultConf);
    _serverIndices.insert("mdrCtPackagesProductGet", 0);
    _serverConfigs.insert("mdrRootCtProductGroupCodelistsCodelistGet", defaultConf);
    _serverIndices.insert("mdrRootCtProductGroupCodelistsCodelistGet", 0);
    _serverConfigs.insert("mdrRootCtProductGroupCodelistsCodelistTermsTermGet", defaultConf);
    _serverIndices.insert("mdrRootCtProductGroupCodelistsCodelistTermsTermGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIControlledTerminologyCTApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIControlledTerminologyCTApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIControlledTerminologyCTApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIControlledTerminologyCTApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIControlledTerminologyCTApi::setUsername(const QString &username) {
    _username = username;
}

void OAIControlledTerminologyCTApi::setPassword(const QString &password) {
    _password = password;
}


void OAIControlledTerminologyCTApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIControlledTerminologyCTApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIControlledTerminologyCTApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIControlledTerminologyCTApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIControlledTerminologyCTApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIControlledTerminologyCTApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIControlledTerminologyCTApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIControlledTerminologyCTApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIControlledTerminologyCTApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIControlledTerminologyCTApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIControlledTerminologyCTApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIControlledTerminologyCTApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIControlledTerminologyCTApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIControlledTerminologyCTApi::mdrCtPackagesGet() {
    QString fullPath = QString(_serverConfigs["mdrCtPackagesGet"][_serverIndices.value("mdrCtPackagesGet")].URL()+"/mdr/ct/packages");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIControlledTerminologyCTApi::mdrCtPackagesGetCallback);
    connect(this, &OAIControlledTerminologyCTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIControlledTerminologyCTApi::mdrCtPackagesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICtPackages output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCtPackagesGetSignal(output);
        Q_EMIT mdrCtPackagesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCtPackagesGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCtPackagesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCtPackagesGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCtPackagesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIControlledTerminologyCTApi::mdrCtPackagesPackageCodelistsCodelistGet(const QString &package, const QString &codelist) {
    QString fullPath = QString(_serverConfigs["mdrCtPackagesPackageCodelistsCodelistGet"][_serverIndices.value("mdrCtPackagesPackageCodelistsCodelistGet")].URL()+"/mdr/ct/packages/{package}/codelists/{codelist}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString packagePathParam("{");
        packagePathParam.append("package").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "package", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"package"+pathSuffix : pathPrefix;
        fullPath.replace(packagePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(package)));
    }
    
    {
        QString codelistPathParam("{");
        codelistPathParam.append("codelist").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "codelist", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"codelist"+pathSuffix : pathPrefix;
        fullPath.replace(codelistPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(codelist)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIControlledTerminologyCTApi::mdrCtPackagesPackageCodelistsCodelistGetCallback);
    connect(this, &OAIControlledTerminologyCTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIControlledTerminologyCTApi::mdrCtPackagesPackageCodelistsCodelistGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICtCodelist output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCtPackagesPackageCodelistsCodelistGetSignal(output);
        Q_EMIT mdrCtPackagesPackageCodelistsCodelistGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCtPackagesPackageCodelistsCodelistGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCtPackagesPackageCodelistsCodelistGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCtPackagesPackageCodelistsCodelistGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCtPackagesPackageCodelistsCodelistGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIControlledTerminologyCTApi::mdrCtPackagesPackageCodelistsCodelistTermsGet(const QString &package, const QString &codelist) {
    QString fullPath = QString(_serverConfigs["mdrCtPackagesPackageCodelistsCodelistTermsGet"][_serverIndices.value("mdrCtPackagesPackageCodelistsCodelistTermsGet")].URL()+"/mdr/ct/packages/{package}/codelists/{codelist}/terms");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString packagePathParam("{");
        packagePathParam.append("package").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "package", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"package"+pathSuffix : pathPrefix;
        fullPath.replace(packagePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(package)));
    }
    
    {
        QString codelistPathParam("{");
        codelistPathParam.append("codelist").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "codelist", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"codelist"+pathSuffix : pathPrefix;
        fullPath.replace(codelistPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(codelist)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIControlledTerminologyCTApi::mdrCtPackagesPackageCodelistsCodelistTermsGetCallback);
    connect(this, &OAIControlledTerminologyCTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIControlledTerminologyCTApi::mdrCtPackagesPackageCodelistsCodelistTermsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICtCodelistTerms output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCtPackagesPackageCodelistsCodelistTermsGetSignal(output);
        Q_EMIT mdrCtPackagesPackageCodelistsCodelistTermsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCtPackagesPackageCodelistsCodelistTermsGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCtPackagesPackageCodelistsCodelistTermsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCtPackagesPackageCodelistsCodelistTermsGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCtPackagesPackageCodelistsCodelistTermsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIControlledTerminologyCTApi::mdrCtPackagesPackageCodelistsCodelistTermsTermGet(const QString &package, const QString &codelist, const QString &term) {
    QString fullPath = QString(_serverConfigs["mdrCtPackagesPackageCodelistsCodelistTermsTermGet"][_serverIndices.value("mdrCtPackagesPackageCodelistsCodelistTermsTermGet")].URL()+"/mdr/ct/packages/{package}/codelists/{codelist}/terms/{term}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString packagePathParam("{");
        packagePathParam.append("package").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "package", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"package"+pathSuffix : pathPrefix;
        fullPath.replace(packagePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(package)));
    }
    
    {
        QString codelistPathParam("{");
        codelistPathParam.append("codelist").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "codelist", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"codelist"+pathSuffix : pathPrefix;
        fullPath.replace(codelistPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(codelist)));
    }
    
    {
        QString termPathParam("{");
        termPathParam.append("term").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "term", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"term"+pathSuffix : pathPrefix;
        fullPath.replace(termPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(term)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIControlledTerminologyCTApi::mdrCtPackagesPackageCodelistsCodelistTermsTermGetCallback);
    connect(this, &OAIControlledTerminologyCTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIControlledTerminologyCTApi::mdrCtPackagesPackageCodelistsCodelistTermsTermGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICtTerm output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCtPackagesPackageCodelistsCodelistTermsTermGetSignal(output);
        Q_EMIT mdrCtPackagesPackageCodelistsCodelistTermsTermGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCtPackagesPackageCodelistsCodelistTermsTermGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCtPackagesPackageCodelistsCodelistTermsTermGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCtPackagesPackageCodelistsCodelistTermsTermGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCtPackagesPackageCodelistsCodelistTermsTermGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIControlledTerminologyCTApi::mdrCtPackagesPackageCodelistsGet(const QString &package) {
    QString fullPath = QString(_serverConfigs["mdrCtPackagesPackageCodelistsGet"][_serverIndices.value("mdrCtPackagesPackageCodelistsGet")].URL()+"/mdr/ct/packages/{package}/codelists");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString packagePathParam("{");
        packagePathParam.append("package").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "package", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"package"+pathSuffix : pathPrefix;
        fullPath.replace(packagePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(package)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIControlledTerminologyCTApi::mdrCtPackagesPackageCodelistsGetCallback);
    connect(this, &OAIControlledTerminologyCTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIControlledTerminologyCTApi::mdrCtPackagesPackageCodelistsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICtPackageCodelists output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCtPackagesPackageCodelistsGetSignal(output);
        Q_EMIT mdrCtPackagesPackageCodelistsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCtPackagesPackageCodelistsGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCtPackagesPackageCodelistsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCtPackagesPackageCodelistsGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCtPackagesPackageCodelistsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIControlledTerminologyCTApi::mdrCtPackagesProductGet(const QString &product) {
    QString fullPath = QString(_serverConfigs["mdrCtPackagesProductGet"][_serverIndices.value("mdrCtPackagesProductGet")].URL()+"/mdr/ct/packages/{product}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString productPathParam("{");
        productPathParam.append("product").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "product", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"product"+pathSuffix : pathPrefix;
        fullPath.replace(productPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(product)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIControlledTerminologyCTApi::mdrCtPackagesProductGetCallback);
    connect(this, &OAIControlledTerminologyCTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIControlledTerminologyCTApi::mdrCtPackagesProductGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICtPackage output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCtPackagesProductGetSignal(output);
        Q_EMIT mdrCtPackagesProductGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCtPackagesProductGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCtPackagesProductGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCtPackagesProductGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCtPackagesProductGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIControlledTerminologyCTApi::mdrRootCtProductGroupCodelistsCodelistGet(const QString &product_group, const QString &codelist) {
    QString fullPath = QString(_serverConfigs["mdrRootCtProductGroupCodelistsCodelistGet"][_serverIndices.value("mdrRootCtProductGroupCodelistsCodelistGet")].URL()+"/mdr/root/ct/{productGroup}/codelists/{codelist}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString product_groupPathParam("{");
        product_groupPathParam.append("productGroup").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "productGroup", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"productGroup"+pathSuffix : pathPrefix;
        fullPath.replace(product_groupPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(product_group)));
    }
    
    {
        QString codelistPathParam("{");
        codelistPathParam.append("codelist").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "codelist", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"codelist"+pathSuffix : pathPrefix;
        fullPath.replace(codelistPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(codelist)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIControlledTerminologyCTApi::mdrRootCtProductGroupCodelistsCodelistGetCallback);
    connect(this, &OAIControlledTerminologyCTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIControlledTerminologyCTApi::mdrRootCtProductGroupCodelistsCodelistGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRootCtCodelist output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrRootCtProductGroupCodelistsCodelistGetSignal(output);
        Q_EMIT mdrRootCtProductGroupCodelistsCodelistGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrRootCtProductGroupCodelistsCodelistGetSignalE(output, error_type, error_str);
        Q_EMIT mdrRootCtProductGroupCodelistsCodelistGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrRootCtProductGroupCodelistsCodelistGetSignalError(output, error_type, error_str);
        Q_EMIT mdrRootCtProductGroupCodelistsCodelistGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIControlledTerminologyCTApi::mdrRootCtProductGroupCodelistsCodelistTermsTermGet(const QString &product_group, const QString &codelist, const QString &term) {
    QString fullPath = QString(_serverConfigs["mdrRootCtProductGroupCodelistsCodelistTermsTermGet"][_serverIndices.value("mdrRootCtProductGroupCodelistsCodelistTermsTermGet")].URL()+"/mdr/root/ct/{productGroup}/codelists/{codelist}/terms/{term}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString product_groupPathParam("{");
        product_groupPathParam.append("productGroup").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "productGroup", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"productGroup"+pathSuffix : pathPrefix;
        fullPath.replace(product_groupPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(product_group)));
    }
    
    {
        QString codelistPathParam("{");
        codelistPathParam.append("codelist").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "codelist", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"codelist"+pathSuffix : pathPrefix;
        fullPath.replace(codelistPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(codelist)));
    }
    
    {
        QString termPathParam("{");
        termPathParam.append("term").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "term", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"term"+pathSuffix : pathPrefix;
        fullPath.replace(termPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(term)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIControlledTerminologyCTApi::mdrRootCtProductGroupCodelistsCodelistTermsTermGetCallback);
    connect(this, &OAIControlledTerminologyCTApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIControlledTerminologyCTApi::mdrRootCtProductGroupCodelistsCodelistTermsTermGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRootCtTerm output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrRootCtProductGroupCodelistsCodelistTermsTermGetSignal(output);
        Q_EMIT mdrRootCtProductGroupCodelistsCodelistTermsTermGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrRootCtProductGroupCodelistsCodelistTermsTermGetSignalE(output, error_type, error_str);
        Q_EMIT mdrRootCtProductGroupCodelistsCodelistTermsTermGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrRootCtProductGroupCodelistsCodelistTermsTermGetSignalError(output, error_type, error_str);
        Q_EMIT mdrRootCtProductGroupCodelistsCodelistTermsTermGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIControlledTerminologyCTApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI

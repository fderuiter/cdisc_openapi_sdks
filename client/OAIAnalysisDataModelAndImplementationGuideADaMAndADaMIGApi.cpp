/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::~OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi() {
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://library.cdisc.org/api"),
    "Production server",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://virtserver.swaggerhub.com/CDISC1/share-2.0/1.1.0"),
    "SwaggerHub API Auto Mocking",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("mdrAdamProductDatastructuresGet", defaultConf);
    _serverIndices.insert("mdrAdamProductDatastructuresGet", 0);
    _serverConfigs.insert("mdrAdamProductDatastructuresStructureGet", defaultConf);
    _serverIndices.insert("mdrAdamProductDatastructuresStructureGet", 0);
    _serverConfigs.insert("mdrAdamProductDatastructuresStructureVariablesGet", defaultConf);
    _serverIndices.insert("mdrAdamProductDatastructuresStructureVariablesGet", 0);
    _serverConfigs.insert("mdrAdamProductDatastructuresStructureVariablesVarGet", defaultConf);
    _serverIndices.insert("mdrAdamProductDatastructuresStructureVariablesVarGet", 0);
    _serverConfigs.insert("mdrAdamProductDatastructuresStructureVarsetsGet", defaultConf);
    _serverIndices.insert("mdrAdamProductDatastructuresStructureVarsetsGet", 0);
    _serverConfigs.insert("mdrAdamProductDatastructuresStructureVarsetsVarsetGet", defaultConf);
    _serverIndices.insert("mdrAdamProductDatastructuresStructureVarsetsVarsetGet", 0);
    _serverConfigs.insert("mdrAdamProductGet", defaultConf);
    _serverIndices.insert("mdrAdamProductGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::setUsername(const QString &username) {
    _username = username;
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::setPassword(const QString &password) {
    _password = password;
}


void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::mdrAdamProductDatastructuresGet(const QString &product) {
    QString fullPath = QString(_serverConfigs["mdrAdamProductDatastructuresGet"][_serverIndices.value("mdrAdamProductDatastructuresGet")].URL()+"/mdr/adam/{product}/datastructures");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString productPathParam("{");
        productPathParam.append("product").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "product", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"product"+pathSuffix : pathPrefix;
        fullPath.replace(productPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(product)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::mdrAdamProductDatastructuresGetCallback);
    connect(this, &OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::mdrAdamProductDatastructuresGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdamProductDatastructures output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrAdamProductDatastructuresGetSignal(output);
        Q_EMIT mdrAdamProductDatastructuresGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrAdamProductDatastructuresGetSignalE(output, error_type, error_str);
        Q_EMIT mdrAdamProductDatastructuresGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrAdamProductDatastructuresGetSignalError(output, error_type, error_str);
        Q_EMIT mdrAdamProductDatastructuresGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::mdrAdamProductDatastructuresStructureGet(const QString &product, const QString &structure) {
    QString fullPath = QString(_serverConfigs["mdrAdamProductDatastructuresStructureGet"][_serverIndices.value("mdrAdamProductDatastructuresStructureGet")].URL()+"/mdr/adam/{product}/datastructures/{structure}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString productPathParam("{");
        productPathParam.append("product").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "product", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"product"+pathSuffix : pathPrefix;
        fullPath.replace(productPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(product)));
    }
    
    {
        QString structurePathParam("{");
        structurePathParam.append("structure").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "structure", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"structure"+pathSuffix : pathPrefix;
        fullPath.replace(structurePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(structure)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::mdrAdamProductDatastructuresStructureGetCallback);
    connect(this, &OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::mdrAdamProductDatastructuresStructureGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdamDatastructure output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrAdamProductDatastructuresStructureGetSignal(output);
        Q_EMIT mdrAdamProductDatastructuresStructureGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrAdamProductDatastructuresStructureGetSignalE(output, error_type, error_str);
        Q_EMIT mdrAdamProductDatastructuresStructureGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrAdamProductDatastructuresStructureGetSignalError(output, error_type, error_str);
        Q_EMIT mdrAdamProductDatastructuresStructureGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::mdrAdamProductDatastructuresStructureVariablesGet(const QString &product, const QString &structure) {
    QString fullPath = QString(_serverConfigs["mdrAdamProductDatastructuresStructureVariablesGet"][_serverIndices.value("mdrAdamProductDatastructuresStructureVariablesGet")].URL()+"/mdr/adam/{product}/datastructures/{structure}/variables");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString productPathParam("{");
        productPathParam.append("product").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "product", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"product"+pathSuffix : pathPrefix;
        fullPath.replace(productPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(product)));
    }
    
    {
        QString structurePathParam("{");
        structurePathParam.append("structure").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "structure", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"structure"+pathSuffix : pathPrefix;
        fullPath.replace(structurePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(structure)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::mdrAdamProductDatastructuresStructureVariablesGetCallback);
    connect(this, &OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::mdrAdamProductDatastructuresStructureVariablesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdamDatastructureVariables output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrAdamProductDatastructuresStructureVariablesGetSignal(output);
        Q_EMIT mdrAdamProductDatastructuresStructureVariablesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrAdamProductDatastructuresStructureVariablesGetSignalE(output, error_type, error_str);
        Q_EMIT mdrAdamProductDatastructuresStructureVariablesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrAdamProductDatastructuresStructureVariablesGetSignalError(output, error_type, error_str);
        Q_EMIT mdrAdamProductDatastructuresStructureVariablesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::mdrAdamProductDatastructuresStructureVariablesVarGet(const QString &product, const QString &structure, const QString &var) {
    QString fullPath = QString(_serverConfigs["mdrAdamProductDatastructuresStructureVariablesVarGet"][_serverIndices.value("mdrAdamProductDatastructuresStructureVariablesVarGet")].URL()+"/mdr/adam/{product}/datastructures/{structure}/variables/{var}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString productPathParam("{");
        productPathParam.append("product").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "product", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"product"+pathSuffix : pathPrefix;
        fullPath.replace(productPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(product)));
    }
    
    {
        QString structurePathParam("{");
        structurePathParam.append("structure").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "structure", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"structure"+pathSuffix : pathPrefix;
        fullPath.replace(structurePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(structure)));
    }
    
    {
        QString varPathParam("{");
        varPathParam.append("var").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "var", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"var"+pathSuffix : pathPrefix;
        fullPath.replace(varPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(var)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::mdrAdamProductDatastructuresStructureVariablesVarGetCallback);
    connect(this, &OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::mdrAdamProductDatastructuresStructureVariablesVarGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdamVariable output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrAdamProductDatastructuresStructureVariablesVarGetSignal(output);
        Q_EMIT mdrAdamProductDatastructuresStructureVariablesVarGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrAdamProductDatastructuresStructureVariablesVarGetSignalE(output, error_type, error_str);
        Q_EMIT mdrAdamProductDatastructuresStructureVariablesVarGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrAdamProductDatastructuresStructureVariablesVarGetSignalError(output, error_type, error_str);
        Q_EMIT mdrAdamProductDatastructuresStructureVariablesVarGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::mdrAdamProductDatastructuresStructureVarsetsGet(const QString &product, const QString &structure) {
    QString fullPath = QString(_serverConfigs["mdrAdamProductDatastructuresStructureVarsetsGet"][_serverIndices.value("mdrAdamProductDatastructuresStructureVarsetsGet")].URL()+"/mdr/adam/{product}/datastructures/{structure}/varsets");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString productPathParam("{");
        productPathParam.append("product").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "product", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"product"+pathSuffix : pathPrefix;
        fullPath.replace(productPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(product)));
    }
    
    {
        QString structurePathParam("{");
        structurePathParam.append("structure").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "structure", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"structure"+pathSuffix : pathPrefix;
        fullPath.replace(structurePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(structure)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::mdrAdamProductDatastructuresStructureVarsetsGetCallback);
    connect(this, &OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::mdrAdamProductDatastructuresStructureVarsetsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdamDatastructureVarsets output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrAdamProductDatastructuresStructureVarsetsGetSignal(output);
        Q_EMIT mdrAdamProductDatastructuresStructureVarsetsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrAdamProductDatastructuresStructureVarsetsGetSignalE(output, error_type, error_str);
        Q_EMIT mdrAdamProductDatastructuresStructureVarsetsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrAdamProductDatastructuresStructureVarsetsGetSignalError(output, error_type, error_str);
        Q_EMIT mdrAdamProductDatastructuresStructureVarsetsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::mdrAdamProductDatastructuresStructureVarsetsVarsetGet(const QString &product, const QString &structure, const QString &varset) {
    QString fullPath = QString(_serverConfigs["mdrAdamProductDatastructuresStructureVarsetsVarsetGet"][_serverIndices.value("mdrAdamProductDatastructuresStructureVarsetsVarsetGet")].URL()+"/mdr/adam/{product}/datastructures/{structure}/varsets/{varset}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString productPathParam("{");
        productPathParam.append("product").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "product", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"product"+pathSuffix : pathPrefix;
        fullPath.replace(productPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(product)));
    }
    
    {
        QString structurePathParam("{");
        structurePathParam.append("structure").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "structure", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"structure"+pathSuffix : pathPrefix;
        fullPath.replace(structurePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(structure)));
    }
    
    {
        QString varsetPathParam("{");
        varsetPathParam.append("varset").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "varset", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"varset"+pathSuffix : pathPrefix;
        fullPath.replace(varsetPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(varset)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::mdrAdamProductDatastructuresStructureVarsetsVarsetGetCallback);
    connect(this, &OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::mdrAdamProductDatastructuresStructureVarsetsVarsetGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdamVarset output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrAdamProductDatastructuresStructureVarsetsVarsetGetSignal(output);
        Q_EMIT mdrAdamProductDatastructuresStructureVarsetsVarsetGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrAdamProductDatastructuresStructureVarsetsVarsetGetSignalE(output, error_type, error_str);
        Q_EMIT mdrAdamProductDatastructuresStructureVarsetsVarsetGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrAdamProductDatastructuresStructureVarsetsVarsetGetSignalError(output, error_type, error_str);
        Q_EMIT mdrAdamProductDatastructuresStructureVarsetsVarsetGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::mdrAdamProductGet(const QString &product) {
    QString fullPath = QString(_serverConfigs["mdrAdamProductGet"][_serverIndices.value("mdrAdamProductGet")].URL()+"/mdr/adam/{product}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString productPathParam("{");
        productPathParam.append("product").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "product", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"product"+pathSuffix : pathPrefix;
        fullPath.replace(productPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(product)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::mdrAdamProductGetCallback);
    connect(this, &OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::mdrAdamProductGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIAdamProduct output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrAdamProductGetSignal(output);
        Q_EMIT mdrAdamProductGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrAdamProductGetSignalE(output, error_type, error_str);
        Q_EMIT mdrAdamProductGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrAdamProductGetSignalError(output, error_type, error_str);
        Q_EMIT mdrAdamProductGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI

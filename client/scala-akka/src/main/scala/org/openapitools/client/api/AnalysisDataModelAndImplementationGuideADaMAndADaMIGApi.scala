/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.AdamDatastructure
import org.openapitools.client.model.AdamDatastructureVariables
import org.openapitools.client.model.AdamDatastructureVarsets
import org.openapitools.client.model.AdamProduct
import org.openapitools.client.model.AdamProductDatastructures
import org.openapitools.client.model.AdamVariable
import org.openapitools.client.model.AdamVarset
import org.openapitools.client.model.DefaultErrorResponse
import org.openapitools.client.model.ExportAdamDatastructuresTable
import org.openapitools.client.model.ExportAdamVariablesTable
import org.openapitools.client.model.ExportAdamWorkbook
import org.openapitools.client.model.XmlAdamDatastructure
import org.openapitools.client.model.XmlAdamDatastructureVariables
import org.openapitools.client.model.XmlAdamDatastructureVarsets
import org.openapitools.client.model.XmlAdamProduct
import org.openapitools.client.model.XmlAdamProductDatastructures
import org.openapitools.client.model.XmlAdamVariable
import org.openapitools.client.model.XmlAdamVarset
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi {

  def apply(baseUrl: String = "https://library.cdisc.org/api") = new AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi(baseUrl)
}

class AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi(baseUrl: String) {

  /**
   * Get ADaM Data Structure List
   * 
   * Expected answers:
   *   code 200 : AdamProductDatastructures (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param product CDISC Library Product
   */
  def mdrAdamProductDatastructuresGet(product: String)(implicit basicAuth: BasicCredentials): ApiRequest[AdamProductDatastructures] =
    ApiRequest[AdamProductDatastructures](ApiMethods.GET, baseUrl, "/mdr/adam/{product}/datastructures", "application/json")
      .withCredentials(basicAuth).withPathParam("product", product)
      .withSuccessResponse[AdamProductDatastructures](200)
      .withErrorResponse[DefaultErrorResponse](400)
      .withErrorResponse[DefaultErrorResponse](401)
      .withErrorResponse[DefaultErrorResponse](403)
      .withErrorResponse[DefaultErrorResponse](404)
      .withErrorResponse[DefaultErrorResponse](405)
      .withErrorResponse[DefaultErrorResponse](406)
      .withErrorResponse[DefaultErrorResponse](500)
      .withErrorResponse[DefaultErrorResponse](503)
      .withErrorResponse[DefaultErrorResponse](504)
      

  /**
   * Get ADaM Data Structure
   * 
   * Expected answers:
   *   code 200 : AdamDatastructure (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param product CDISC Library Product
   * @param structure Data structure Identifier
   */
  def mdrAdamProductDatastructuresStructureGet(product: String, structure: String)(implicit basicAuth: BasicCredentials): ApiRequest[AdamDatastructure] =
    ApiRequest[AdamDatastructure](ApiMethods.GET, baseUrl, "/mdr/adam/{product}/datastructures/{structure}", "application/json")
      .withCredentials(basicAuth).withPathParam("product", product)
      .withPathParam("structure", structure)
      .withSuccessResponse[AdamDatastructure](200)
      .withErrorResponse[DefaultErrorResponse](400)
      .withErrorResponse[DefaultErrorResponse](401)
      .withErrorResponse[DefaultErrorResponse](403)
      .withErrorResponse[DefaultErrorResponse](404)
      .withErrorResponse[DefaultErrorResponse](405)
      .withErrorResponse[DefaultErrorResponse](406)
      .withErrorResponse[DefaultErrorResponse](500)
      .withErrorResponse[DefaultErrorResponse](503)
      .withErrorResponse[DefaultErrorResponse](504)
      

  /**
   * Get ADaM Variable List
   * 
   * Expected answers:
   *   code 200 : AdamDatastructureVariables (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param product CDISC Library Product
   * @param structure ADaM Data Structure Identifier
   */
  def mdrAdamProductDatastructuresStructureVariablesGet(product: String, structure: String)(implicit basicAuth: BasicCredentials): ApiRequest[AdamDatastructureVariables] =
    ApiRequest[AdamDatastructureVariables](ApiMethods.GET, baseUrl, "/mdr/adam/{product}/datastructures/{structure}/variables", "application/json")
      .withCredentials(basicAuth).withPathParam("product", product)
      .withPathParam("structure", structure)
      .withSuccessResponse[AdamDatastructureVariables](200)
      .withErrorResponse[DefaultErrorResponse](400)
      .withErrorResponse[DefaultErrorResponse](401)
      .withErrorResponse[DefaultErrorResponse](403)
      .withErrorResponse[DefaultErrorResponse](404)
      .withErrorResponse[DefaultErrorResponse](405)
      .withErrorResponse[DefaultErrorResponse](406)
      .withErrorResponse[DefaultErrorResponse](500)
      .withErrorResponse[DefaultErrorResponse](503)
      .withErrorResponse[DefaultErrorResponse](504)
      

  /**
   * Get ADaM Variable
   * 
   * Expected answers:
   *   code 200 : AdamVariable (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param product CDISC Library Product
   * @param structure ADaM Data Structure Identifier
   * @param `var` ADaM Variable Identifier
   */
  def mdrAdamProductDatastructuresStructureVariablesVarGet(product: String, structure: String, `var`: String)(implicit basicAuth: BasicCredentials): ApiRequest[AdamVariable] =
    ApiRequest[AdamVariable](ApiMethods.GET, baseUrl, "/mdr/adam/{product}/datastructures/{structure}/variables/{var}", "application/json")
      .withCredentials(basicAuth).withPathParam("product", product)
      .withPathParam("structure", structure)
      .withPathParam("var", `var`)
      .withSuccessResponse[AdamVariable](200)
      .withErrorResponse[DefaultErrorResponse](400)
      .withErrorResponse[DefaultErrorResponse](401)
      .withErrorResponse[DefaultErrorResponse](403)
      .withErrorResponse[DefaultErrorResponse](404)
      .withErrorResponse[DefaultErrorResponse](405)
      .withErrorResponse[DefaultErrorResponse](406)
      .withErrorResponse[DefaultErrorResponse](500)
      .withErrorResponse[DefaultErrorResponse](503)
      .withErrorResponse[DefaultErrorResponse](504)
      

  /**
   * Get ADaM Variable Set List
   * 
   * Expected answers:
   *   code 200 : AdamDatastructureVarsets (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param product CDISC Library Product
   * @param structure ADaM Data Structure Identifier
   */
  def mdrAdamProductDatastructuresStructureVarsetsGet(product: String, structure: String)(implicit basicAuth: BasicCredentials): ApiRequest[AdamDatastructureVarsets] =
    ApiRequest[AdamDatastructureVarsets](ApiMethods.GET, baseUrl, "/mdr/adam/{product}/datastructures/{structure}/varsets", "application/json")
      .withCredentials(basicAuth).withPathParam("product", product)
      .withPathParam("structure", structure)
      .withSuccessResponse[AdamDatastructureVarsets](200)
      .withErrorResponse[DefaultErrorResponse](400)
      .withErrorResponse[DefaultErrorResponse](401)
      .withErrorResponse[DefaultErrorResponse](403)
      .withErrorResponse[DefaultErrorResponse](404)
      .withErrorResponse[DefaultErrorResponse](405)
      .withErrorResponse[DefaultErrorResponse](406)
      .withErrorResponse[DefaultErrorResponse](500)
      .withErrorResponse[DefaultErrorResponse](503)
      .withErrorResponse[DefaultErrorResponse](504)
      

  /**
   * Get ADaM Variable Set
   * 
   * Expected answers:
   *   code 200 : AdamVarset (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param product CDISC Library Product
   * @param structure ADaM Data Structure Identifier
   * @param varset ADaM Variable Set Identifier
   */
  def mdrAdamProductDatastructuresStructureVarsetsVarsetGet(product: String, structure: String, varset: String)(implicit basicAuth: BasicCredentials): ApiRequest[AdamVarset] =
    ApiRequest[AdamVarset](ApiMethods.GET, baseUrl, "/mdr/adam/{product}/datastructures/{structure}/varsets/{varset}", "application/json")
      .withCredentials(basicAuth).withPathParam("product", product)
      .withPathParam("structure", structure)
      .withPathParam("varset", varset)
      .withSuccessResponse[AdamVarset](200)
      .withErrorResponse[DefaultErrorResponse](400)
      .withErrorResponse[DefaultErrorResponse](401)
      .withErrorResponse[DefaultErrorResponse](403)
      .withErrorResponse[DefaultErrorResponse](404)
      .withErrorResponse[DefaultErrorResponse](405)
      .withErrorResponse[DefaultErrorResponse](406)
      .withErrorResponse[DefaultErrorResponse](500)
      .withErrorResponse[DefaultErrorResponse](503)
      .withErrorResponse[DefaultErrorResponse](504)
      

  /**
   * Get ADaM Product
   * 
   * Expected answers:
   *   code 200 : AdamProduct (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param product CDISC Library Product
   */
  def mdrAdamProductGet(product: String)(implicit basicAuth: BasicCredentials): ApiRequest[AdamProduct] =
    ApiRequest[AdamProduct](ApiMethods.GET, baseUrl, "/mdr/adam/{product}", "application/json")
      .withCredentials(basicAuth).withPathParam("product", product)
      .withSuccessResponse[AdamProduct](200)
      .withErrorResponse[DefaultErrorResponse](400)
      .withErrorResponse[DefaultErrorResponse](401)
      .withErrorResponse[DefaultErrorResponse](403)
      .withErrorResponse[DefaultErrorResponse](404)
      .withErrorResponse[DefaultErrorResponse](405)
      .withErrorResponse[DefaultErrorResponse](406)
      .withErrorResponse[DefaultErrorResponse](500)
      .withErrorResponse[DefaultErrorResponse](503)
      .withErrorResponse[DefaultErrorResponse](504)
      



}


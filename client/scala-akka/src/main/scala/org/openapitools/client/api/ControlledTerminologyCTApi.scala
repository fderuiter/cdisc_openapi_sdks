/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.CtCodelist
import org.openapitools.client.model.CtCodelistTerms
import org.openapitools.client.model.CtPackage
import org.openapitools.client.model.CtPackageCodelists
import org.openapitools.client.model.CtPackages
import org.openapitools.client.model.CtTerm
import org.openapitools.client.model.DefaultErrorResponse
import org.openapitools.client.model.ExportCtTable
import org.openapitools.client.model.RootCtCodelist
import org.openapitools.client.model.RootCtTerm
import org.openapitools.client.model.XmlCtCodelist
import org.openapitools.client.model.XmlCtCodelistTerms
import org.openapitools.client.model.XmlCtPackage
import org.openapitools.client.model.XmlCtPackageCodelists
import org.openapitools.client.model.XmlCtPackages
import org.openapitools.client.model.XmlCtTerm
import org.openapitools.client.model.XmlRootCtCodelist
import org.openapitools.client.model.XmlRootCtTerm
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object ControlledTerminologyCTApi {

  def apply(baseUrl: String = "https://library.cdisc.org/api") = new ControlledTerminologyCTApi(baseUrl)
}

class ControlledTerminologyCTApi(baseUrl: String) {

  /**
   * Get CDISC Library CT Package List
   * 
   * Expected answers:
   *   code 200 : CtPackages (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   */
  def mdrCtPackagesGet()(implicit basicAuth: BasicCredentials): ApiRequest[CtPackages] =
    ApiRequest[CtPackages](ApiMethods.GET, baseUrl, "/mdr/ct/packages", "application/json")
      .withCredentials(basicAuth).withSuccessResponse[CtPackages](200)
      .withErrorResponse[DefaultErrorResponse](400)
      .withErrorResponse[DefaultErrorResponse](401)
      .withErrorResponse[DefaultErrorResponse](403)
      .withErrorResponse[DefaultErrorResponse](404)
      .withErrorResponse[DefaultErrorResponse](405)
      .withErrorResponse[DefaultErrorResponse](406)
      .withErrorResponse[DefaultErrorResponse](500)
      .withErrorResponse[DefaultErrorResponse](503)
      .withErrorResponse[DefaultErrorResponse](504)
      

  /**
   * Get CDISC Library CT Package Codelist
   * 
   * Expected answers:
   *   code 200 : CtCodelist (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param `package` CT Package Identifier
   * @param codelist CT Codelist Identifier
   */
  def mdrCtPackagesPackageCodelistsCodelistGet(`package`: String, codelist: String)(implicit basicAuth: BasicCredentials): ApiRequest[CtCodelist] =
    ApiRequest[CtCodelist](ApiMethods.GET, baseUrl, "/mdr/ct/packages/{package}/codelists/{codelist}", "application/json")
      .withCredentials(basicAuth).withPathParam("package", `package`)
      .withPathParam("codelist", codelist)
      .withSuccessResponse[CtCodelist](200)
      .withErrorResponse[DefaultErrorResponse](400)
      .withErrorResponse[DefaultErrorResponse](401)
      .withErrorResponse[DefaultErrorResponse](403)
      .withErrorResponse[DefaultErrorResponse](404)
      .withErrorResponse[DefaultErrorResponse](405)
      .withErrorResponse[DefaultErrorResponse](406)
      .withErrorResponse[DefaultErrorResponse](500)
      .withErrorResponse[DefaultErrorResponse](503)
      .withErrorResponse[DefaultErrorResponse](504)
      

  /**
   * Get CDISC Library CT Package Codelist Term List
   * 
   * Expected answers:
   *   code 200 : CtCodelistTerms (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param `package` CT Package Identifier
   * @param codelist CT Codelist Identifier
   */
  def mdrCtPackagesPackageCodelistsCodelistTermsGet(`package`: String, codelist: String)(implicit basicAuth: BasicCredentials): ApiRequest[CtCodelistTerms] =
    ApiRequest[CtCodelistTerms](ApiMethods.GET, baseUrl, "/mdr/ct/packages/{package}/codelists/{codelist}/terms", "application/json")
      .withCredentials(basicAuth).withPathParam("package", `package`)
      .withPathParam("codelist", codelist)
      .withSuccessResponse[CtCodelistTerms](200)
      .withErrorResponse[DefaultErrorResponse](400)
      .withErrorResponse[DefaultErrorResponse](401)
      .withErrorResponse[DefaultErrorResponse](403)
      .withErrorResponse[DefaultErrorResponse](404)
      .withErrorResponse[DefaultErrorResponse](405)
      .withErrorResponse[DefaultErrorResponse](406)
      .withErrorResponse[DefaultErrorResponse](500)
      .withErrorResponse[DefaultErrorResponse](503)
      .withErrorResponse[DefaultErrorResponse](504)
      

  /**
   * Get CDISC Library CT Package Codelist Term
   * 
   * Expected answers:
   *   code 200 : CtTerm (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param `package` CT Package Product Identifier
   * @param codelist CT Codelist Identifier
   * @param term CT Codelist Term Identifier
   */
  def mdrCtPackagesPackageCodelistsCodelistTermsTermGet(`package`: String, codelist: String, term: String)(implicit basicAuth: BasicCredentials): ApiRequest[CtTerm] =
    ApiRequest[CtTerm](ApiMethods.GET, baseUrl, "/mdr/ct/packages/{package}/codelists/{codelist}/terms/{term}", "application/json")
      .withCredentials(basicAuth).withPathParam("package", `package`)
      .withPathParam("codelist", codelist)
      .withPathParam("term", term)
      .withSuccessResponse[CtTerm](200)
      .withErrorResponse[DefaultErrorResponse](400)
      .withErrorResponse[DefaultErrorResponse](401)
      .withErrorResponse[DefaultErrorResponse](403)
      .withErrorResponse[DefaultErrorResponse](404)
      .withErrorResponse[DefaultErrorResponse](405)
      .withErrorResponse[DefaultErrorResponse](406)
      .withErrorResponse[DefaultErrorResponse](500)
      .withErrorResponse[DefaultErrorResponse](503)
      .withErrorResponse[DefaultErrorResponse](504)
      

  /**
   * Get CDISC Library CT Package Codelist List
   * 
   * Expected answers:
   *   code 200 : CtPackageCodelists (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param `package` CT Package Identifier
   */
  def mdrCtPackagesPackageCodelistsGet(`package`: String)(implicit basicAuth: BasicCredentials): ApiRequest[CtPackageCodelists] =
    ApiRequest[CtPackageCodelists](ApiMethods.GET, baseUrl, "/mdr/ct/packages/{package}/codelists", "application/json")
      .withCredentials(basicAuth).withPathParam("package", `package`)
      .withSuccessResponse[CtPackageCodelists](200)
      .withErrorResponse[DefaultErrorResponse](400)
      .withErrorResponse[DefaultErrorResponse](401)
      .withErrorResponse[DefaultErrorResponse](403)
      .withErrorResponse[DefaultErrorResponse](404)
      .withErrorResponse[DefaultErrorResponse](405)
      .withErrorResponse[DefaultErrorResponse](406)
      .withErrorResponse[DefaultErrorResponse](500)
      .withErrorResponse[DefaultErrorResponse](503)
      .withErrorResponse[DefaultErrorResponse](504)
      

  /**
   * Get CDISC Library CT Package
   * 
   * Expected answers:
   *   code 200 : CtPackage (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param product CT Package Product Identifier
   */
  def mdrCtPackagesProductGet(product: String)(implicit basicAuth: BasicCredentials): ApiRequest[CtPackage] =
    ApiRequest[CtPackage](ApiMethods.GET, baseUrl, "/mdr/ct/packages/{product}", "application/json")
      .withCredentials(basicAuth).withPathParam("product", product)
      .withSuccessResponse[CtPackage](200)
      .withErrorResponse[DefaultErrorResponse](400)
      .withErrorResponse[DefaultErrorResponse](401)
      .withErrorResponse[DefaultErrorResponse](403)
      .withErrorResponse[DefaultErrorResponse](404)
      .withErrorResponse[DefaultErrorResponse](405)
      .withErrorResponse[DefaultErrorResponse](406)
      .withErrorResponse[DefaultErrorResponse](500)
      .withErrorResponse[DefaultErrorResponse](503)
      .withErrorResponse[DefaultErrorResponse](504)
      

  /**
   * Get CDISC Library Root CT Codelist
   * 
   * Expected answers:
   *   code 200 : RootCtCodelist (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param productGroup CT Product Group Identifier
   * @param codelist CT Codelist Identifier
   */
  def mdrRootCtProductGroupCodelistsCodelistGet(productGroup: String, codelist: String)(implicit basicAuth: BasicCredentials): ApiRequest[RootCtCodelist] =
    ApiRequest[RootCtCodelist](ApiMethods.GET, baseUrl, "/mdr/root/ct/{productGroup}/codelists/{codelist}", "application/json")
      .withCredentials(basicAuth).withPathParam("productGroup", productGroup)
      .withPathParam("codelist", codelist)
      .withSuccessResponse[RootCtCodelist](200)
      .withErrorResponse[DefaultErrorResponse](400)
      .withErrorResponse[DefaultErrorResponse](401)
      .withErrorResponse[DefaultErrorResponse](403)
      .withErrorResponse[DefaultErrorResponse](404)
      .withErrorResponse[DefaultErrorResponse](405)
      .withErrorResponse[DefaultErrorResponse](406)
      .withErrorResponse[DefaultErrorResponse](500)
      .withErrorResponse[DefaultErrorResponse](503)
      .withErrorResponse[DefaultErrorResponse](504)
      

  /**
   * Get CDISC Library Root CT Term
   * 
   * Expected answers:
   *   code 200 : RootCtTerm (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param productGroup CT Product Group Identifier
   * @param codelist CT Codelist Identifier
   * @param term CT Codelist Term Identifier
   */
  def mdrRootCtProductGroupCodelistsCodelistTermsTermGet(productGroup: String, codelist: String, term: String)(implicit basicAuth: BasicCredentials): ApiRequest[RootCtTerm] =
    ApiRequest[RootCtTerm](ApiMethods.GET, baseUrl, "/mdr/root/ct/{productGroup}/codelists/{codelist}/terms/{term}", "application/json")
      .withCredentials(basicAuth).withPathParam("productGroup", productGroup)
      .withPathParam("codelist", codelist)
      .withPathParam("term", term)
      .withSuccessResponse[RootCtTerm](200)
      .withErrorResponse[DefaultErrorResponse](400)
      .withErrorResponse[DefaultErrorResponse](401)
      .withErrorResponse[DefaultErrorResponse](403)
      .withErrorResponse[DefaultErrorResponse](404)
      .withErrorResponse[DefaultErrorResponse](405)
      .withErrorResponse[DefaultErrorResponse](406)
      .withErrorResponse[DefaultErrorResponse](500)
      .withErrorResponse[DefaultErrorResponse](503)
      .withErrorResponse[DefaultErrorResponse](504)
      



}


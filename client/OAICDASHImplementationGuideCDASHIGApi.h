/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICDASHImplementationGuideCDASHIGApi_H
#define OAI_OAICDASHImplementationGuideCDASHIGApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICdashigClass.h"
#include "OAICdashigClassDomains.h"
#include "OAICdashigClassScenarios.h"
#include "OAICdashigDomain.h"
#include "OAICdashigDomainField.h"
#include "OAICdashigDomainFields.h"
#include "OAICdashigProduct.h"
#include "OAICdashigProductClasses.h"
#include "OAICdashigProductDomains.h"
#include "OAICdashigProductScenarios.h"
#include "OAICdashigScenario.h"
#include "OAICdashigScenarioField.h"
#include "OAICdashigScenarioFields.h"
#include "OAIDefaultErrorResponse.h"
#include "OAIExportCdashigTable.h"
#include "OAIRootCdashigDomainField.h"
#include "OAIRootCdashigScenarioField.h"
#include "OAIXmlCdashigClass.h"
#include "OAIXmlCdashigClassDomains.h"
#include "OAIXmlCdashigClassScenarios.h"
#include "OAIXmlCdashigDomain.h"
#include "OAIXmlCdashigDomainField.h"
#include "OAIXmlCdashigDomainFields.h"
#include "OAIXmlCdashigProduct.h"
#include "OAIXmlCdashigProductClasses.h"
#include "OAIXmlCdashigProductDomains.h"
#include "OAIXmlCdashigProductScenarios.h"
#include "OAIXmlCdashigScenario.h"
#include "OAIXmlCdashigScenarioField.h"
#include "OAIXmlCdashigScenarioFields.h"
#include "OAIXmlRootCdashigDomainField.h"
#include "OAIXmlRootCdashigScenarioField.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICDASHImplementationGuideCDASHIGApi : public QObject {
    Q_OBJECT

public:
    OAICDASHImplementationGuideCDASHIGApi(const int timeOut = 0);
    ~OAICDASHImplementationGuideCDASHIGApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  version QString [required]
    * @param[in]  r_class QString [required]
    */
    virtual void mdrCdashigVersionClassesClassDomainsGet(const QString &version, const QString &r_class);

    /**
    * @param[in]  version QString [required]
    * @param[in]  r_class QString [required]
    */
    virtual void mdrCdashigVersionClassesClassGet(const QString &version, const QString &r_class);

    /**
    * @param[in]  version QString [required]
    * @param[in]  r_class QString [required]
    */
    virtual void mdrCdashigVersionClassesClassScenariosGet(const QString &version, const QString &r_class);

    /**
    * @param[in]  version QString [required]
    */
    virtual void mdrCdashigVersionClassesGet(const QString &version);

    /**
    * @param[in]  version QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  field QString [required]
    */
    virtual void mdrCdashigVersionDomainsDomainFieldsFieldGet(const QString &version, const QString &domain, const QString &field);

    /**
    * @param[in]  version QString [required]
    * @param[in]  domain QString [required]
    */
    virtual void mdrCdashigVersionDomainsDomainFieldsGet(const QString &version, const QString &domain);

    /**
    * @param[in]  version QString [required]
    * @param[in]  domain QString [required]
    */
    virtual void mdrCdashigVersionDomainsDomainGet(const QString &version, const QString &domain);

    /**
    * @param[in]  version QString [required]
    */
    virtual void mdrCdashigVersionDomainsGet(const QString &version);

    /**
    * @param[in]  version QString [required]
    */
    virtual void mdrCdashigVersionGet(const QString &version);

    /**
    * @param[in]  version QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  scenario QString [required]
    * @param[in]  field QString [required]
    */
    virtual void mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet(const QString &version, const QString &domain, const QString &scenario, const QString &field);

    /**
    * @param[in]  version QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  scenario QString [required]
    */
    virtual void mdrCdashigVersionScenariosDomainScenarioFieldsGet(const QString &version, const QString &domain, const QString &scenario);

    /**
    * @param[in]  version QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  scenario QString [required]
    */
    virtual void mdrCdashigVersionScenariosDomainScenarioGet(const QString &version, const QString &domain, const QString &scenario);

    /**
    * @param[in]  version QString [required]
    */
    virtual void mdrCdashigVersionScenariosGet(const QString &version);

    /**
    * @param[in]  domain QString [required]
    * @param[in]  field QString [required]
    */
    virtual void mdrRootCdashigDomainsDomainFieldsFieldGet(const QString &domain, const QString &field);

    /**
    * @param[in]  domain QString [required]
    * @param[in]  scenario QString [required]
    * @param[in]  field QString [required]
    */
    virtual void mdrRootCdashigScenariosDomainScenarioFieldsFieldGet(const QString &domain, const QString &scenario, const QString &field);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void mdrCdashigVersionClassesClassDomainsGetCallback(OAIHttpRequestWorker *worker);
    void mdrCdashigVersionClassesClassGetCallback(OAIHttpRequestWorker *worker);
    void mdrCdashigVersionClassesClassScenariosGetCallback(OAIHttpRequestWorker *worker);
    void mdrCdashigVersionClassesGetCallback(OAIHttpRequestWorker *worker);
    void mdrCdashigVersionDomainsDomainFieldsFieldGetCallback(OAIHttpRequestWorker *worker);
    void mdrCdashigVersionDomainsDomainFieldsGetCallback(OAIHttpRequestWorker *worker);
    void mdrCdashigVersionDomainsDomainGetCallback(OAIHttpRequestWorker *worker);
    void mdrCdashigVersionDomainsGetCallback(OAIHttpRequestWorker *worker);
    void mdrCdashigVersionGetCallback(OAIHttpRequestWorker *worker);
    void mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetCallback(OAIHttpRequestWorker *worker);
    void mdrCdashigVersionScenariosDomainScenarioFieldsGetCallback(OAIHttpRequestWorker *worker);
    void mdrCdashigVersionScenariosDomainScenarioGetCallback(OAIHttpRequestWorker *worker);
    void mdrCdashigVersionScenariosGetCallback(OAIHttpRequestWorker *worker);
    void mdrRootCdashigDomainsDomainFieldsFieldGetCallback(OAIHttpRequestWorker *worker);
    void mdrRootCdashigScenariosDomainScenarioFieldsFieldGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void mdrCdashigVersionClassesClassDomainsGetSignal(OAICdashigClassDomains summary);
    void mdrCdashigVersionClassesClassGetSignal(OAICdashigClass summary);
    void mdrCdashigVersionClassesClassScenariosGetSignal(OAICdashigClassScenarios summary);
    void mdrCdashigVersionClassesGetSignal(OAICdashigProductClasses summary);
    void mdrCdashigVersionDomainsDomainFieldsFieldGetSignal(OAICdashigDomainField summary);
    void mdrCdashigVersionDomainsDomainFieldsGetSignal(OAICdashigDomainFields summary);
    void mdrCdashigVersionDomainsDomainGetSignal(OAICdashigDomain summary);
    void mdrCdashigVersionDomainsGetSignal(OAICdashigProductDomains summary);
    void mdrCdashigVersionGetSignal(OAICdashigProduct summary);
    void mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetSignal(OAICdashigScenarioField summary);
    void mdrCdashigVersionScenariosDomainScenarioFieldsGetSignal(OAICdashigScenarioFields summary);
    void mdrCdashigVersionScenariosDomainScenarioGetSignal(OAICdashigScenario summary);
    void mdrCdashigVersionScenariosGetSignal(OAICdashigProductScenarios summary);
    void mdrRootCdashigDomainsDomainFieldsFieldGetSignal(OAIRootCdashigDomainField summary);
    void mdrRootCdashigScenariosDomainScenarioFieldsFieldGetSignal(OAIRootCdashigScenarioField summary);


    void mdrCdashigVersionClassesClassDomainsGetSignalFull(OAIHttpRequestWorker *worker, OAICdashigClassDomains summary);
    void mdrCdashigVersionClassesClassGetSignalFull(OAIHttpRequestWorker *worker, OAICdashigClass summary);
    void mdrCdashigVersionClassesClassScenariosGetSignalFull(OAIHttpRequestWorker *worker, OAICdashigClassScenarios summary);
    void mdrCdashigVersionClassesGetSignalFull(OAIHttpRequestWorker *worker, OAICdashigProductClasses summary);
    void mdrCdashigVersionDomainsDomainFieldsFieldGetSignalFull(OAIHttpRequestWorker *worker, OAICdashigDomainField summary);
    void mdrCdashigVersionDomainsDomainFieldsGetSignalFull(OAIHttpRequestWorker *worker, OAICdashigDomainFields summary);
    void mdrCdashigVersionDomainsDomainGetSignalFull(OAIHttpRequestWorker *worker, OAICdashigDomain summary);
    void mdrCdashigVersionDomainsGetSignalFull(OAIHttpRequestWorker *worker, OAICdashigProductDomains summary);
    void mdrCdashigVersionGetSignalFull(OAIHttpRequestWorker *worker, OAICdashigProduct summary);
    void mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetSignalFull(OAIHttpRequestWorker *worker, OAICdashigScenarioField summary);
    void mdrCdashigVersionScenariosDomainScenarioFieldsGetSignalFull(OAIHttpRequestWorker *worker, OAICdashigScenarioFields summary);
    void mdrCdashigVersionScenariosDomainScenarioGetSignalFull(OAIHttpRequestWorker *worker, OAICdashigScenario summary);
    void mdrCdashigVersionScenariosGetSignalFull(OAIHttpRequestWorker *worker, OAICdashigProductScenarios summary);
    void mdrRootCdashigDomainsDomainFieldsFieldGetSignalFull(OAIHttpRequestWorker *worker, OAIRootCdashigDomainField summary);
    void mdrRootCdashigScenariosDomainScenarioFieldsFieldGetSignalFull(OAIHttpRequestWorker *worker, OAIRootCdashigScenarioField summary);

    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionClassesClassDomainsGetSignalError() instead")
    void mdrCdashigVersionClassesClassDomainsGetSignalE(OAICdashigClassDomains summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionClassesClassDomainsGetSignalError(OAICdashigClassDomains summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionClassesClassGetSignalError() instead")
    void mdrCdashigVersionClassesClassGetSignalE(OAICdashigClass summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionClassesClassGetSignalError(OAICdashigClass summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionClassesClassScenariosGetSignalError() instead")
    void mdrCdashigVersionClassesClassScenariosGetSignalE(OAICdashigClassScenarios summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionClassesClassScenariosGetSignalError(OAICdashigClassScenarios summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionClassesGetSignalError() instead")
    void mdrCdashigVersionClassesGetSignalE(OAICdashigProductClasses summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionClassesGetSignalError(OAICdashigProductClasses summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionDomainsDomainFieldsFieldGetSignalError() instead")
    void mdrCdashigVersionDomainsDomainFieldsFieldGetSignalE(OAICdashigDomainField summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionDomainsDomainFieldsFieldGetSignalError(OAICdashigDomainField summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionDomainsDomainFieldsGetSignalError() instead")
    void mdrCdashigVersionDomainsDomainFieldsGetSignalE(OAICdashigDomainFields summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionDomainsDomainFieldsGetSignalError(OAICdashigDomainFields summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionDomainsDomainGetSignalError() instead")
    void mdrCdashigVersionDomainsDomainGetSignalE(OAICdashigDomain summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionDomainsDomainGetSignalError(OAICdashigDomain summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionDomainsGetSignalError() instead")
    void mdrCdashigVersionDomainsGetSignalE(OAICdashigProductDomains summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionDomainsGetSignalError(OAICdashigProductDomains summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionGetSignalError() instead")
    void mdrCdashigVersionGetSignalE(OAICdashigProduct summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionGetSignalError(OAICdashigProduct summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetSignalError() instead")
    void mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetSignalE(OAICdashigScenarioField summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetSignalError(OAICdashigScenarioField summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionScenariosDomainScenarioFieldsGetSignalError() instead")
    void mdrCdashigVersionScenariosDomainScenarioFieldsGetSignalE(OAICdashigScenarioFields summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionScenariosDomainScenarioFieldsGetSignalError(OAICdashigScenarioFields summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionScenariosDomainScenarioGetSignalError() instead")
    void mdrCdashigVersionScenariosDomainScenarioGetSignalE(OAICdashigScenario summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionScenariosDomainScenarioGetSignalError(OAICdashigScenario summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionScenariosGetSignalError() instead")
    void mdrCdashigVersionScenariosGetSignalE(OAICdashigProductScenarios summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionScenariosGetSignalError(OAICdashigProductScenarios summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrRootCdashigDomainsDomainFieldsFieldGetSignalError() instead")
    void mdrRootCdashigDomainsDomainFieldsFieldGetSignalE(OAIRootCdashigDomainField summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrRootCdashigDomainsDomainFieldsFieldGetSignalError(OAIRootCdashigDomainField summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrRootCdashigScenariosDomainScenarioFieldsFieldGetSignalError() instead")
    void mdrRootCdashigScenariosDomainScenarioFieldsFieldGetSignalE(OAIRootCdashigScenarioField summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrRootCdashigScenariosDomainScenarioFieldsFieldGetSignalError(OAIRootCdashigScenarioField summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionClassesClassDomainsGetSignalErrorFull() instead")
    void mdrCdashigVersionClassesClassDomainsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionClassesClassDomainsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionClassesClassGetSignalErrorFull() instead")
    void mdrCdashigVersionClassesClassGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionClassesClassGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionClassesClassScenariosGetSignalErrorFull() instead")
    void mdrCdashigVersionClassesClassScenariosGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionClassesClassScenariosGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionClassesGetSignalErrorFull() instead")
    void mdrCdashigVersionClassesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionClassesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionDomainsDomainFieldsFieldGetSignalErrorFull() instead")
    void mdrCdashigVersionDomainsDomainFieldsFieldGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionDomainsDomainFieldsFieldGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionDomainsDomainFieldsGetSignalErrorFull() instead")
    void mdrCdashigVersionDomainsDomainFieldsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionDomainsDomainFieldsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionDomainsDomainGetSignalErrorFull() instead")
    void mdrCdashigVersionDomainsDomainGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionDomainsDomainGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionDomainsGetSignalErrorFull() instead")
    void mdrCdashigVersionDomainsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionDomainsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionGetSignalErrorFull() instead")
    void mdrCdashigVersionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetSignalErrorFull() instead")
    void mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionScenariosDomainScenarioFieldsGetSignalErrorFull() instead")
    void mdrCdashigVersionScenariosDomainScenarioFieldsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionScenariosDomainScenarioFieldsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionScenariosDomainScenarioGetSignalErrorFull() instead")
    void mdrCdashigVersionScenariosDomainScenarioGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionScenariosDomainScenarioGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashigVersionScenariosGetSignalErrorFull() instead")
    void mdrCdashigVersionScenariosGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashigVersionScenariosGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrRootCdashigDomainsDomainFieldsFieldGetSignalErrorFull() instead")
    void mdrRootCdashigDomainsDomainFieldsFieldGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrRootCdashigDomainsDomainFieldsFieldGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrRootCdashigScenariosDomainScenarioFieldsFieldGetSignalErrorFull() instead")
    void mdrRootCdashigScenariosDomainScenarioFieldsFieldGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrRootCdashigScenariosDomainScenarioFieldsFieldGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif

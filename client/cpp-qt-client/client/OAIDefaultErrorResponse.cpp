/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultErrorResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefaultErrorResponse::OAIDefaultErrorResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefaultErrorResponse::OAIDefaultErrorResponse() {
    this->initializeModel();
}

OAIDefaultErrorResponse::~OAIDefaultErrorResponse() {}

void OAIDefaultErrorResponse::initializeModel() {

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_reason_phrase_isSet = false;
    m_reason_phrase_isValid = false;

    m_user_message_isSet = false;
    m_user_message_isValid = false;

    m_admin_message_isSet = false;
    m_admin_message_isValid = false;
}

void OAIDefaultErrorResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefaultErrorResponse::fromJsonObject(QJsonObject json) {

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_reason_phrase_isValid = ::OpenAPI::fromJsonValue(m_reason_phrase, json[QString("reasonPhrase")]);
    m_reason_phrase_isSet = !json[QString("reasonPhrase")].isNull() && m_reason_phrase_isValid;

    m_user_message_isValid = ::OpenAPI::fromJsonValue(m_user_message, json[QString("userMessage")]);
    m_user_message_isSet = !json[QString("userMessage")].isNull() && m_user_message_isValid;

    m_admin_message_isValid = ::OpenAPI::fromJsonValue(m_admin_message, json[QString("adminMessage")]);
    m_admin_message_isSet = !json[QString("adminMessage")].isNull() && m_admin_message_isValid;
}

QString OAIDefaultErrorResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefaultErrorResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_reason_phrase_isSet) {
        obj.insert(QString("reasonPhrase"), ::OpenAPI::toJsonValue(m_reason_phrase));
    }
    if (m_user_message_isSet) {
        obj.insert(QString("userMessage"), ::OpenAPI::toJsonValue(m_user_message));
    }
    if (m_admin_message_isSet) {
        obj.insert(QString("adminMessage"), ::OpenAPI::toJsonValue(m_admin_message));
    }
    return obj;
}

QString OAIDefaultErrorResponse::getStatusCode() const {
    return m_status_code;
}
void OAIDefaultErrorResponse::setStatusCode(const QString &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIDefaultErrorResponse::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIDefaultErrorResponse::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAIDefaultErrorResponse::getReasonPhrase() const {
    return m_reason_phrase;
}
void OAIDefaultErrorResponse::setReasonPhrase(const QString &reason_phrase) {
    m_reason_phrase = reason_phrase;
    m_reason_phrase_isSet = true;
}

bool OAIDefaultErrorResponse::is_reason_phrase_Set() const{
    return m_reason_phrase_isSet;
}

bool OAIDefaultErrorResponse::is_reason_phrase_Valid() const{
    return m_reason_phrase_isValid;
}

QString OAIDefaultErrorResponse::getUserMessage() const {
    return m_user_message;
}
void OAIDefaultErrorResponse::setUserMessage(const QString &user_message) {
    m_user_message = user_message;
    m_user_message_isSet = true;
}

bool OAIDefaultErrorResponse::is_user_message_Set() const{
    return m_user_message_isSet;
}

bool OAIDefaultErrorResponse::is_user_message_Valid() const{
    return m_user_message_isValid;
}

QString OAIDefaultErrorResponse::getAdminMessage() const {
    return m_admin_message;
}
void OAIDefaultErrorResponse::setAdminMessage(const QString &admin_message) {
    m_admin_message = admin_message;
    m_admin_message_isSet = true;
}

bool OAIDefaultErrorResponse::is_admin_message_Set() const{
    return m_admin_message_isSet;
}

bool OAIDefaultErrorResponse::is_admin_message_Valid() const{
    return m_admin_message_isValid;
}

bool OAIDefaultErrorResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_phrase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefaultErrorResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI

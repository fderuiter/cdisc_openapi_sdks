/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISearchesApi_H
#define OAI_OAISearchesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDefaultErrorResponse.h"
#include "OAIDefaultSearchResponse.h"
#include "OAIDefaultSearchScopes.h"
#include "OAIScopeValues.h"
#include "OAI_mdr_search_scopes_get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISearchesApi : public QObject {
    Q_OBJECT

public:
    OAISearchesApi(const int timeOut = 0);
    ~OAISearchesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  q QString [required]
    * @param[in]  highlight QString [optional]
    * @param[in]  start double [optional]
    * @param[in]  page_size double [optional]
    * @param[in]  r_class QString [optional]
    * @param[in]  codelist QString [optional]
    * @param[in]  concept_id QString [optional]
    * @param[in]  core QString [optional]
    * @param[in]  data_structure QString [optional]
    * @param[in]  dataset_structure QString [optional]
    * @param[in]  definition QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  domain QString [optional]
    * @param[in]  effective_date QString [optional]
    * @param[in]  extensible QString [optional]
    * @param[in]  href QString [optional]
    * @param[in]  label QString [optional]
    * @param[in]  measure_type QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  preferred_term QString [optional]
    * @param[in]  product QString [optional]
    * @param[in]  product_group QString [optional]
    * @param[in]  registration_status QString [optional]
    * @param[in]  role_description QString [optional]
    * @param[in]  sdtm_target QString [optional]
    * @param[in]  simple_datatype QString [optional]
    * @param[in]  submission_value QString [optional]
    * @param[in]  synonyms QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  ui_href QString [optional]
    * @param[in]  value_domain QString [optional]
    * @param[in]  variable_set QString [optional]
    * @param[in]  version QString [optional]
    */
    virtual void mdrSearchGet(const QString &q, const ::OpenAPI::OptionalParam<QString> &highlight = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &start = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &page_size = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &r_class = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &codelist = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &concept_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &core = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &data_structure = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &dataset_structure = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &definition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &domain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &effective_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extensible = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &href = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &measure_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &preferred_term = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &product = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &product_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &registration_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role_description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sdtm_target = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &simple_datatype = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &submission_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &synonyms = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ui_href = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &value_domain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &variable_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>());


    virtual void mdrSearchScopesGet();

    /**
    * @param[in]  scope OAIDefaultSearchScopes [required]
    */
    virtual void mdrSearchScopesScopeGet(const OAIDefaultSearchScopes &scope);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void mdrSearchGetCallback(OAIHttpRequestWorker *worker);
    void mdrSearchScopesGetCallback(OAIHttpRequestWorker *worker);
    void mdrSearchScopesScopeGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void mdrSearchGetSignal(OAIDefaultSearchResponse summary);
    void mdrSearchScopesGetSignal(OAI_mdr_search_scopes_get_200_response summary);
    void mdrSearchScopesScopeGetSignal(OAIScopeValues summary);


    void mdrSearchGetSignalFull(OAIHttpRequestWorker *worker, OAIDefaultSearchResponse summary);
    void mdrSearchScopesGetSignalFull(OAIHttpRequestWorker *worker, OAI_mdr_search_scopes_get_200_response summary);
    void mdrSearchScopesScopeGetSignalFull(OAIHttpRequestWorker *worker, OAIScopeValues summary);

    Q_DECL_DEPRECATED_X("Use mdrSearchGetSignalError() instead")
    void mdrSearchGetSignalE(OAIDefaultSearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSearchGetSignalError(OAIDefaultSearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSearchScopesGetSignalError() instead")
    void mdrSearchScopesGetSignalE(OAI_mdr_search_scopes_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSearchScopesGetSignalError(OAI_mdr_search_scopes_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSearchScopesScopeGetSignalError() instead")
    void mdrSearchScopesScopeGetSignalE(OAIScopeValues summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSearchScopesScopeGetSignalError(OAIScopeValues summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use mdrSearchGetSignalErrorFull() instead")
    void mdrSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSearchScopesGetSignalErrorFull() instead")
    void mdrSearchScopesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSearchScopesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSearchScopesScopeGetSignalErrorFull() instead")
    void mdrSearchScopesScopeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSearchScopesScopeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif

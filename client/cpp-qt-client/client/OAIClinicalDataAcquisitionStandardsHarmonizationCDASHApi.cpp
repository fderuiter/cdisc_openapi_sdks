/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::~OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi() {
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://library.cdisc.org/api"),
    "Production server",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://virtserver.swaggerhub.com/CDISC1/share-2.0/1.1.0"),
    "SwaggerHub API Auto Mocking",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("mdrCdashVersionClassesClassDomainsGet", defaultConf);
    _serverIndices.insert("mdrCdashVersionClassesClassDomainsGet", 0);
    _serverConfigs.insert("mdrCdashVersionClassesClassFieldsFieldGet", defaultConf);
    _serverIndices.insert("mdrCdashVersionClassesClassFieldsFieldGet", 0);
    _serverConfigs.insert("mdrCdashVersionClassesClassGet", defaultConf);
    _serverIndices.insert("mdrCdashVersionClassesClassGet", 0);
    _serverConfigs.insert("mdrCdashVersionClassesGet", defaultConf);
    _serverIndices.insert("mdrCdashVersionClassesGet", 0);
    _serverConfigs.insert("mdrCdashVersionDomainsDomainFieldsFieldGet", defaultConf);
    _serverIndices.insert("mdrCdashVersionDomainsDomainFieldsFieldGet", 0);
    _serverConfigs.insert("mdrCdashVersionDomainsDomainFieldsGet", defaultConf);
    _serverIndices.insert("mdrCdashVersionDomainsDomainFieldsGet", 0);
    _serverConfigs.insert("mdrCdashVersionDomainsDomainGet", defaultConf);
    _serverIndices.insert("mdrCdashVersionDomainsDomainGet", 0);
    _serverConfigs.insert("mdrCdashVersionDomainsGet", defaultConf);
    _serverIndices.insert("mdrCdashVersionDomainsGet", 0);
    _serverConfigs.insert("mdrCdashVersionGet", defaultConf);
    _serverIndices.insert("mdrCdashVersionGet", 0);
    _serverConfigs.insert("mdrRootCdashClassesClassFieldsFieldGet", defaultConf);
    _serverIndices.insert("mdrRootCdashClassesClassFieldsFieldGet", 0);
    _serverConfigs.insert("mdrRootCdashDomainsDomainFieldsFieldGet", defaultConf);
    _serverIndices.insert("mdrRootCdashDomainsDomainFieldsFieldGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::setUsername(const QString &username) {
    _username = username;
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::setPassword(const QString &password) {
    _password = password;
}


void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionClassesClassDomainsGet(const QString &version, const QString &r_class) {
    QString fullPath = QString(_serverConfigs["mdrCdashVersionClassesClassDomainsGet"][_serverIndices.value("mdrCdashVersionClassesClassDomainsGet")].URL()+"/mdr/cdash/{version}/classes/{class}/domains");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString r_classPathParam("{");
        r_classPathParam.append("class").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "class", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"class"+pathSuffix : pathPrefix;
        fullPath.replace(r_classPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_class)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionClassesClassDomainsGetCallback);
    connect(this, &OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionClassesClassDomainsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICdashClassDomains output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCdashVersionClassesClassDomainsGetSignal(output);
        Q_EMIT mdrCdashVersionClassesClassDomainsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCdashVersionClassesClassDomainsGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCdashVersionClassesClassDomainsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCdashVersionClassesClassDomainsGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCdashVersionClassesClassDomainsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionClassesClassFieldsFieldGet(const QString &version, const QString &r_class, const QString &field) {
    QString fullPath = QString(_serverConfigs["mdrCdashVersionClassesClassFieldsFieldGet"][_serverIndices.value("mdrCdashVersionClassesClassFieldsFieldGet")].URL()+"/mdr/cdash/{version}/classes/{class}/fields/{field}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString r_classPathParam("{");
        r_classPathParam.append("class").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "class", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"class"+pathSuffix : pathPrefix;
        fullPath.replace(r_classPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_class)));
    }
    
    {
        QString fieldPathParam("{");
        fieldPathParam.append("field").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "field", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"field"+pathSuffix : pathPrefix;
        fullPath.replace(fieldPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(field)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionClassesClassFieldsFieldGetCallback);
    connect(this, &OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionClassesClassFieldsFieldGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICdashClassField output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCdashVersionClassesClassFieldsFieldGetSignal(output);
        Q_EMIT mdrCdashVersionClassesClassFieldsFieldGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCdashVersionClassesClassFieldsFieldGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCdashVersionClassesClassFieldsFieldGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCdashVersionClassesClassFieldsFieldGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCdashVersionClassesClassFieldsFieldGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionClassesClassGet(const QString &version, const QString &r_class) {
    QString fullPath = QString(_serverConfigs["mdrCdashVersionClassesClassGet"][_serverIndices.value("mdrCdashVersionClassesClassGet")].URL()+"/mdr/cdash/{version}/classes/{class}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString r_classPathParam("{");
        r_classPathParam.append("class").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "class", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"class"+pathSuffix : pathPrefix;
        fullPath.replace(r_classPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_class)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionClassesClassGetCallback);
    connect(this, &OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionClassesClassGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICdashClass output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCdashVersionClassesClassGetSignal(output);
        Q_EMIT mdrCdashVersionClassesClassGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCdashVersionClassesClassGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCdashVersionClassesClassGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCdashVersionClassesClassGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCdashVersionClassesClassGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionClassesGet(const QString &version) {
    QString fullPath = QString(_serverConfigs["mdrCdashVersionClassesGet"][_serverIndices.value("mdrCdashVersionClassesGet")].URL()+"/mdr/cdash/{version}/classes");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionClassesGetCallback);
    connect(this, &OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionClassesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICdashProductClasses output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCdashVersionClassesGetSignal(output);
        Q_EMIT mdrCdashVersionClassesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCdashVersionClassesGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCdashVersionClassesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCdashVersionClassesGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCdashVersionClassesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionDomainsDomainFieldsFieldGet(const QString &version, const QString &domain, const QString &field) {
    QString fullPath = QString(_serverConfigs["mdrCdashVersionDomainsDomainFieldsFieldGet"][_serverIndices.value("mdrCdashVersionDomainsDomainFieldsFieldGet")].URL()+"/mdr/cdash/{version}/domains/{domain}/fields/{field}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString domainPathParam("{");
        domainPathParam.append("domain").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "domain", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"domain"+pathSuffix : pathPrefix;
        fullPath.replace(domainPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(domain)));
    }
    
    {
        QString fieldPathParam("{");
        fieldPathParam.append("field").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "field", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"field"+pathSuffix : pathPrefix;
        fullPath.replace(fieldPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(field)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionDomainsDomainFieldsFieldGetCallback);
    connect(this, &OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionDomainsDomainFieldsFieldGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICdashDomainField output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCdashVersionDomainsDomainFieldsFieldGetSignal(output);
        Q_EMIT mdrCdashVersionDomainsDomainFieldsFieldGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCdashVersionDomainsDomainFieldsFieldGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCdashVersionDomainsDomainFieldsFieldGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCdashVersionDomainsDomainFieldsFieldGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCdashVersionDomainsDomainFieldsFieldGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionDomainsDomainFieldsGet(const QString &version, const QString &domain) {
    QString fullPath = QString(_serverConfigs["mdrCdashVersionDomainsDomainFieldsGet"][_serverIndices.value("mdrCdashVersionDomainsDomainFieldsGet")].URL()+"/mdr/cdash/{version}/domains/{domain}/fields");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString domainPathParam("{");
        domainPathParam.append("domain").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "domain", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"domain"+pathSuffix : pathPrefix;
        fullPath.replace(domainPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(domain)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionDomainsDomainFieldsGetCallback);
    connect(this, &OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionDomainsDomainFieldsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICdashDomainFields output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCdashVersionDomainsDomainFieldsGetSignal(output);
        Q_EMIT mdrCdashVersionDomainsDomainFieldsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCdashVersionDomainsDomainFieldsGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCdashVersionDomainsDomainFieldsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCdashVersionDomainsDomainFieldsGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCdashVersionDomainsDomainFieldsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionDomainsDomainGet(const QString &version, const QString &domain) {
    QString fullPath = QString(_serverConfigs["mdrCdashVersionDomainsDomainGet"][_serverIndices.value("mdrCdashVersionDomainsDomainGet")].URL()+"/mdr/cdash/{version}/domains/{domain}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString domainPathParam("{");
        domainPathParam.append("domain").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "domain", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"domain"+pathSuffix : pathPrefix;
        fullPath.replace(domainPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(domain)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionDomainsDomainGetCallback);
    connect(this, &OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionDomainsDomainGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICdashDomain output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCdashVersionDomainsDomainGetSignal(output);
        Q_EMIT mdrCdashVersionDomainsDomainGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCdashVersionDomainsDomainGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCdashVersionDomainsDomainGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCdashVersionDomainsDomainGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCdashVersionDomainsDomainGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionDomainsGet(const QString &version) {
    QString fullPath = QString(_serverConfigs["mdrCdashVersionDomainsGet"][_serverIndices.value("mdrCdashVersionDomainsGet")].URL()+"/mdr/cdash/{version}/domains");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionDomainsGetCallback);
    connect(this, &OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionDomainsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICdashProductDomains output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCdashVersionDomainsGetSignal(output);
        Q_EMIT mdrCdashVersionDomainsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCdashVersionDomainsGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCdashVersionDomainsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCdashVersionDomainsGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCdashVersionDomainsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionGet(const QString &version) {
    QString fullPath = QString(_serverConfigs["mdrCdashVersionGet"][_serverIndices.value("mdrCdashVersionGet")].URL()+"/mdr/cdash/{version}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionGetCallback);
    connect(this, &OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrCdashVersionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICdashProduct output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCdashVersionGetSignal(output);
        Q_EMIT mdrCdashVersionGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCdashVersionGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCdashVersionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCdashVersionGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCdashVersionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrRootCdashClassesClassFieldsFieldGet(const QString &r_class, const QString &field) {
    QString fullPath = QString(_serverConfigs["mdrRootCdashClassesClassFieldsFieldGet"][_serverIndices.value("mdrRootCdashClassesClassFieldsFieldGet")].URL()+"/mdr/root/cdash/classes/{class}/fields/{field}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString r_classPathParam("{");
        r_classPathParam.append("class").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "class", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"class"+pathSuffix : pathPrefix;
        fullPath.replace(r_classPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_class)));
    }
    
    {
        QString fieldPathParam("{");
        fieldPathParam.append("field").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "field", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"field"+pathSuffix : pathPrefix;
        fullPath.replace(fieldPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(field)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrRootCdashClassesClassFieldsFieldGetCallback);
    connect(this, &OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrRootCdashClassesClassFieldsFieldGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRootCdashClassField output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrRootCdashClassesClassFieldsFieldGetSignal(output);
        Q_EMIT mdrRootCdashClassesClassFieldsFieldGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrRootCdashClassesClassFieldsFieldGetSignalE(output, error_type, error_str);
        Q_EMIT mdrRootCdashClassesClassFieldsFieldGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrRootCdashClassesClassFieldsFieldGetSignalError(output, error_type, error_str);
        Q_EMIT mdrRootCdashClassesClassFieldsFieldGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrRootCdashDomainsDomainFieldsFieldGet(const QString &domain, const QString &field) {
    QString fullPath = QString(_serverConfigs["mdrRootCdashDomainsDomainFieldsFieldGet"][_serverIndices.value("mdrRootCdashDomainsDomainFieldsFieldGet")].URL()+"/mdr/root/cdash/domains/{domain}/fields/{field}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString domainPathParam("{");
        domainPathParam.append("domain").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "domain", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"domain"+pathSuffix : pathPrefix;
        fullPath.replace(domainPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(domain)));
    }
    
    {
        QString fieldPathParam("{");
        fieldPathParam.append("field").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "field", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"field"+pathSuffix : pathPrefix;
        fullPath.replace(fieldPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(field)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrRootCdashDomainsDomainFieldsFieldGetCallback);
    connect(this, &OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::mdrRootCdashDomainsDomainFieldsFieldGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRootCdashDomainField output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrRootCdashDomainsDomainFieldsFieldGetSignal(output);
        Q_EMIT mdrRootCdashDomainsDomainFieldsFieldGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrRootCdashDomainsDomainFieldsFieldGetSignalE(output, error_type, error_str);
        Q_EMIT mdrRootCdashDomainsDomainFieldsFieldGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrRootCdashDomainsDomainFieldsFieldGetSignalError(output, error_type, error_str);
        Q_EMIT mdrRootCdashDomainsDomainFieldsFieldGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI

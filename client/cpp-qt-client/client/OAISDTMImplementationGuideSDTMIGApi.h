/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISDTMImplementationGuideSDTMIGApi_H
#define OAI_OAISDTMImplementationGuideSDTMIGApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDefaultErrorResponse.h"
#include "OAIExportSdtmigDatasetsTable.h"
#include "OAIExportSdtmigVariablesTable.h"
#include "OAIExportSdtmigWorkbook.h"
#include "OAIRootSdtmigDatasetVariable.h"
#include "OAISdtmigClass.h"
#include "OAISdtmigClassDatasets.h"
#include "OAISdtmigClasses.h"
#include "OAISdtmigDataset.h"
#include "OAISdtmigDatasetVariable.h"
#include "OAISdtmigDatasetVariables.h"
#include "OAISdtmigDatasets.h"
#include "OAISdtmigProduct.h"
#include "OAIXmlRootSdtmigDatasetVariable.h"
#include "OAIXmlSdtmigClass.h"
#include "OAIXmlSdtmigClassDatasets.h"
#include "OAIXmlSdtmigClasses.h"
#include "OAIXmlSdtmigDataset.h"
#include "OAIXmlSdtmigDatasetVariable.h"
#include "OAIXmlSdtmigDatasetVariables.h"
#include "OAIXmlSdtmigDatasets.h"
#include "OAIXmlSdtmigProduct.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISDTMImplementationGuideSDTMIGApi : public QObject {
    Q_OBJECT

public:
    OAISDTMImplementationGuideSDTMIGApi(const int timeOut = 0);
    ~OAISDTMImplementationGuideSDTMIGApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  dataset QString [required]
    * @param[in]  var QString [required]
    */
    virtual void mdrRootSdtmigDatasetsDatasetVariablesVarGet(const QString &dataset, const QString &var);

    /**
    * @param[in]  version QString [required]
    * @param[in]  r_class QString [required]
    */
    virtual void mdrSdtmigVersionClassesClassDatasetsGet(const QString &version, const QString &r_class);

    /**
    * @param[in]  version QString [required]
    * @param[in]  r_class QString [required]
    */
    virtual void mdrSdtmigVersionClassesClassGet(const QString &version, const QString &r_class);

    /**
    * @param[in]  version QString [required]
    */
    virtual void mdrSdtmigVersionClassesGet(const QString &version);

    /**
    * @param[in]  version QString [required]
    * @param[in]  dataset QString [required]
    */
    virtual void mdrSdtmigVersionDatasetsDatasetGet(const QString &version, const QString &dataset);

    /**
    * @param[in]  version QString [required]
    * @param[in]  dataset QString [required]
    */
    virtual void mdrSdtmigVersionDatasetsDatasetVariablesGet(const QString &version, const QString &dataset);

    /**
    * @param[in]  version QString [required]
    * @param[in]  dataset QString [required]
    * @param[in]  var QString [required]
    */
    virtual void mdrSdtmigVersionDatasetsDatasetVariablesVarGet(const QString &version, const QString &dataset, const QString &var);

    /**
    * @param[in]  version QString [required]
    */
    virtual void mdrSdtmigVersionDatasetsGet(const QString &version);

    /**
    * @param[in]  version QString [required]
    */
    virtual void mdrSdtmigVersionGet(const QString &version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void mdrRootSdtmigDatasetsDatasetVariablesVarGetCallback(OAIHttpRequestWorker *worker);
    void mdrSdtmigVersionClassesClassDatasetsGetCallback(OAIHttpRequestWorker *worker);
    void mdrSdtmigVersionClassesClassGetCallback(OAIHttpRequestWorker *worker);
    void mdrSdtmigVersionClassesGetCallback(OAIHttpRequestWorker *worker);
    void mdrSdtmigVersionDatasetsDatasetGetCallback(OAIHttpRequestWorker *worker);
    void mdrSdtmigVersionDatasetsDatasetVariablesGetCallback(OAIHttpRequestWorker *worker);
    void mdrSdtmigVersionDatasetsDatasetVariablesVarGetCallback(OAIHttpRequestWorker *worker);
    void mdrSdtmigVersionDatasetsGetCallback(OAIHttpRequestWorker *worker);
    void mdrSdtmigVersionGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void mdrRootSdtmigDatasetsDatasetVariablesVarGetSignal(OAIRootSdtmigDatasetVariable summary);
    void mdrSdtmigVersionClassesClassDatasetsGetSignal(OAISdtmigClassDatasets summary);
    void mdrSdtmigVersionClassesClassGetSignal(OAISdtmigClass summary);
    void mdrSdtmigVersionClassesGetSignal(OAISdtmigClasses summary);
    void mdrSdtmigVersionDatasetsDatasetGetSignal(OAISdtmigDataset summary);
    void mdrSdtmigVersionDatasetsDatasetVariablesGetSignal(OAISdtmigDatasetVariables summary);
    void mdrSdtmigVersionDatasetsDatasetVariablesVarGetSignal(OAISdtmigDatasetVariable summary);
    void mdrSdtmigVersionDatasetsGetSignal(OAISdtmigDatasets summary);
    void mdrSdtmigVersionGetSignal(OAISdtmigProduct summary);


    void mdrRootSdtmigDatasetsDatasetVariablesVarGetSignalFull(OAIHttpRequestWorker *worker, OAIRootSdtmigDatasetVariable summary);
    void mdrSdtmigVersionClassesClassDatasetsGetSignalFull(OAIHttpRequestWorker *worker, OAISdtmigClassDatasets summary);
    void mdrSdtmigVersionClassesClassGetSignalFull(OAIHttpRequestWorker *worker, OAISdtmigClass summary);
    void mdrSdtmigVersionClassesGetSignalFull(OAIHttpRequestWorker *worker, OAISdtmigClasses summary);
    void mdrSdtmigVersionDatasetsDatasetGetSignalFull(OAIHttpRequestWorker *worker, OAISdtmigDataset summary);
    void mdrSdtmigVersionDatasetsDatasetVariablesGetSignalFull(OAIHttpRequestWorker *worker, OAISdtmigDatasetVariables summary);
    void mdrSdtmigVersionDatasetsDatasetVariablesVarGetSignalFull(OAIHttpRequestWorker *worker, OAISdtmigDatasetVariable summary);
    void mdrSdtmigVersionDatasetsGetSignalFull(OAIHttpRequestWorker *worker, OAISdtmigDatasets summary);
    void mdrSdtmigVersionGetSignalFull(OAIHttpRequestWorker *worker, OAISdtmigProduct summary);

    Q_DECL_DEPRECATED_X("Use mdrRootSdtmigDatasetsDatasetVariablesVarGetSignalError() instead")
    void mdrRootSdtmigDatasetsDatasetVariablesVarGetSignalE(OAIRootSdtmigDatasetVariable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrRootSdtmigDatasetsDatasetVariablesVarGetSignalError(OAIRootSdtmigDatasetVariable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmigVersionClassesClassDatasetsGetSignalError() instead")
    void mdrSdtmigVersionClassesClassDatasetsGetSignalE(OAISdtmigClassDatasets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmigVersionClassesClassDatasetsGetSignalError(OAISdtmigClassDatasets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmigVersionClassesClassGetSignalError() instead")
    void mdrSdtmigVersionClassesClassGetSignalE(OAISdtmigClass summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmigVersionClassesClassGetSignalError(OAISdtmigClass summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmigVersionClassesGetSignalError() instead")
    void mdrSdtmigVersionClassesGetSignalE(OAISdtmigClasses summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmigVersionClassesGetSignalError(OAISdtmigClasses summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmigVersionDatasetsDatasetGetSignalError() instead")
    void mdrSdtmigVersionDatasetsDatasetGetSignalE(OAISdtmigDataset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmigVersionDatasetsDatasetGetSignalError(OAISdtmigDataset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmigVersionDatasetsDatasetVariablesGetSignalError() instead")
    void mdrSdtmigVersionDatasetsDatasetVariablesGetSignalE(OAISdtmigDatasetVariables summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmigVersionDatasetsDatasetVariablesGetSignalError(OAISdtmigDatasetVariables summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmigVersionDatasetsDatasetVariablesVarGetSignalError() instead")
    void mdrSdtmigVersionDatasetsDatasetVariablesVarGetSignalE(OAISdtmigDatasetVariable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmigVersionDatasetsDatasetVariablesVarGetSignalError(OAISdtmigDatasetVariable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmigVersionDatasetsGetSignalError() instead")
    void mdrSdtmigVersionDatasetsGetSignalE(OAISdtmigDatasets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmigVersionDatasetsGetSignalError(OAISdtmigDatasets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmigVersionGetSignalError() instead")
    void mdrSdtmigVersionGetSignalE(OAISdtmigProduct summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmigVersionGetSignalError(OAISdtmigProduct summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use mdrRootSdtmigDatasetsDatasetVariablesVarGetSignalErrorFull() instead")
    void mdrRootSdtmigDatasetsDatasetVariablesVarGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrRootSdtmigDatasetsDatasetVariablesVarGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmigVersionClassesClassDatasetsGetSignalErrorFull() instead")
    void mdrSdtmigVersionClassesClassDatasetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmigVersionClassesClassDatasetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmigVersionClassesClassGetSignalErrorFull() instead")
    void mdrSdtmigVersionClassesClassGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmigVersionClassesClassGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmigVersionClassesGetSignalErrorFull() instead")
    void mdrSdtmigVersionClassesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmigVersionClassesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmigVersionDatasetsDatasetGetSignalErrorFull() instead")
    void mdrSdtmigVersionDatasetsDatasetGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmigVersionDatasetsDatasetGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmigVersionDatasetsDatasetVariablesGetSignalErrorFull() instead")
    void mdrSdtmigVersionDatasetsDatasetVariablesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmigVersionDatasetsDatasetVariablesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmigVersionDatasetsDatasetVariablesVarGetSignalErrorFull() instead")
    void mdrSdtmigVersionDatasetsDatasetVariablesVarGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmigVersionDatasetsDatasetVariablesVarGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmigVersionDatasetsGetSignalErrorFull() instead")
    void mdrSdtmigVersionDatasetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmigVersionDatasetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmigVersionGetSignalErrorFull() instead")
    void mdrSdtmigVersionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmigVersionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif

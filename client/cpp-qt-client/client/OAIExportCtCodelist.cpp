/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportCtCodelist.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportCtCodelist::OAIExportCtCodelist(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportCtCodelist::OAIExportCtCodelist() {
    this->initializeModel();
}

OAIExportCtCodelist::~OAIExportCtCodelist() {}

void OAIExportCtCodelist::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_codelist_code_isSet = false;
    m_codelist_code_isValid = false;

    m_codelist_extensible__yes_no_isSet = false;
    m_codelist_extensible__yes_no_isValid = false;

    m_codelist_name_isSet = false;
    m_codelist_name_isValid = false;

    m_cdisc_submission_value_isSet = false;
    m_cdisc_submission_value_isValid = false;

    m_cdisc_synonym_s_isSet = false;
    m_cdisc_synonym_s_isValid = false;

    m_cdisc_definition_isSet = false;
    m_cdisc_definition_isValid = false;

    m_nci_preferred_term_isSet = false;
    m_nci_preferred_term_isValid = false;

    m_standard_and_date_isSet = false;
    m_standard_and_date_isValid = false;

    m__isSet = false;
    m__isValid = false;
}

void OAIExportCtCodelist::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportCtCodelist::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_codelist_code_isValid = ::OpenAPI::fromJsonValue(m_codelist_code, json[QString("Codelist Code")]);
    m_codelist_code_isSet = !json[QString("Codelist Code")].isNull() && m_codelist_code_isValid;

    m_codelist_extensible__yes_no_isValid = ::OpenAPI::fromJsonValue(m_codelist_extensible__yes_no, json[QString("Codelist Extensible (Yes/No)")]);
    m_codelist_extensible__yes_no_isSet = !json[QString("Codelist Extensible (Yes/No)")].isNull() && m_codelist_extensible__yes_no_isValid;

    m_codelist_name_isValid = ::OpenAPI::fromJsonValue(m_codelist_name, json[QString("Codelist Name")]);
    m_codelist_name_isSet = !json[QString("Codelist Name")].isNull() && m_codelist_name_isValid;

    m_cdisc_submission_value_isValid = ::OpenAPI::fromJsonValue(m_cdisc_submission_value, json[QString("CDISC Submission Value")]);
    m_cdisc_submission_value_isSet = !json[QString("CDISC Submission Value")].isNull() && m_cdisc_submission_value_isValid;

    m_cdisc_synonym_s_isValid = ::OpenAPI::fromJsonValue(m_cdisc_synonym_s, json[QString("CDISC Synonym(s)")]);
    m_cdisc_synonym_s_isSet = !json[QString("CDISC Synonym(s)")].isNull() && m_cdisc_synonym_s_isValid;

    m_cdisc_definition_isValid = ::OpenAPI::fromJsonValue(m_cdisc_definition, json[QString("CDISC Definition")]);
    m_cdisc_definition_isSet = !json[QString("CDISC Definition")].isNull() && m_cdisc_definition_isValid;

    m_nci_preferred_term_isValid = ::OpenAPI::fromJsonValue(m_nci_preferred_term, json[QString("NCI Preferred Term")]);
    m_nci_preferred_term_isSet = !json[QString("NCI Preferred Term")].isNull() && m_nci_preferred_term_isValid;

    m_standard_and_date_isValid = ::OpenAPI::fromJsonValue(m_standard_and_date, json[QString("Standard and Date")]);
    m_standard_and_date_isSet = !json[QString("Standard and Date")].isNull() && m_standard_and_date_isValid;

    m__isValid = ::OpenAPI::fromJsonValue(m_, json[QString("")]);
    m__isSet = !json[QString("")].isNull() && m__isValid;
}

QString OAIExportCtCodelist::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportCtCodelist::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_codelist_code_isSet) {
        obj.insert(QString("Codelist Code"), ::OpenAPI::toJsonValue(m_codelist_code));
    }
    if (m_codelist_extensible__yes_no_isSet) {
        obj.insert(QString("Codelist Extensible (Yes/No)"), ::OpenAPI::toJsonValue(m_codelist_extensible__yes_no));
    }
    if (m_codelist_name_isSet) {
        obj.insert(QString("Codelist Name"), ::OpenAPI::toJsonValue(m_codelist_name));
    }
    if (m_cdisc_submission_value_isSet) {
        obj.insert(QString("CDISC Submission Value"), ::OpenAPI::toJsonValue(m_cdisc_submission_value));
    }
    if (m_cdisc_synonym_s.size() > 0) {
        obj.insert(QString("CDISC Synonym(s)"), ::OpenAPI::toJsonValue(m_cdisc_synonym_s));
    }
    if (m_cdisc_definition_isSet) {
        obj.insert(QString("CDISC Definition"), ::OpenAPI::toJsonValue(m_cdisc_definition));
    }
    if (m_nci_preferred_term_isSet) {
        obj.insert(QString("NCI Preferred Term"), ::OpenAPI::toJsonValue(m_nci_preferred_term));
    }
    if (m_standard_and_date_isSet) {
        obj.insert(QString("Standard and Date"), ::OpenAPI::toJsonValue(m_standard_and_date));
    }
    if (m_.size() > 0) {
        obj.insert(QString(""), ::OpenAPI::toJsonValue(m_));
    }
    return obj;
}

QString OAIExportCtCodelist::getCode() const {
    return m_code;
}
void OAIExportCtCodelist::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIExportCtCodelist::is_code_Set() const{
    return m_code_isSet;
}

bool OAIExportCtCodelist::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIExportCtCodelist::getCodelistCode() const {
    return m_codelist_code;
}
void OAIExportCtCodelist::setCodelistCode(const QString &codelist_code) {
    m_codelist_code = codelist_code;
    m_codelist_code_isSet = true;
}

bool OAIExportCtCodelist::is_codelist_code_Set() const{
    return m_codelist_code_isSet;
}

bool OAIExportCtCodelist::is_codelist_code_Valid() const{
    return m_codelist_code_isValid;
}

QString OAIExportCtCodelist::getCodelistExtensibleYesNo() const {
    return m_codelist_extensible__yes_no;
}
void OAIExportCtCodelist::setCodelistExtensibleYesNo(const QString &codelist_extensible__yes_no) {
    m_codelist_extensible__yes_no = codelist_extensible__yes_no;
    m_codelist_extensible__yes_no_isSet = true;
}

bool OAIExportCtCodelist::is_codelist_extensible__yes_no_Set() const{
    return m_codelist_extensible__yes_no_isSet;
}

bool OAIExportCtCodelist::is_codelist_extensible__yes_no_Valid() const{
    return m_codelist_extensible__yes_no_isValid;
}

QString OAIExportCtCodelist::getCodelistName() const {
    return m_codelist_name;
}
void OAIExportCtCodelist::setCodelistName(const QString &codelist_name) {
    m_codelist_name = codelist_name;
    m_codelist_name_isSet = true;
}

bool OAIExportCtCodelist::is_codelist_name_Set() const{
    return m_codelist_name_isSet;
}

bool OAIExportCtCodelist::is_codelist_name_Valid() const{
    return m_codelist_name_isValid;
}

QString OAIExportCtCodelist::getCdiscSubmissionValue() const {
    return m_cdisc_submission_value;
}
void OAIExportCtCodelist::setCdiscSubmissionValue(const QString &cdisc_submission_value) {
    m_cdisc_submission_value = cdisc_submission_value;
    m_cdisc_submission_value_isSet = true;
}

bool OAIExportCtCodelist::is_cdisc_submission_value_Set() const{
    return m_cdisc_submission_value_isSet;
}

bool OAIExportCtCodelist::is_cdisc_submission_value_Valid() const{
    return m_cdisc_submission_value_isValid;
}

QList<QString> OAIExportCtCodelist::getCdiscSynonymS() const {
    return m_cdisc_synonym_s;
}
void OAIExportCtCodelist::setCdiscSynonymS(const QList<QString> &cdisc_synonym_s) {
    m_cdisc_synonym_s = cdisc_synonym_s;
    m_cdisc_synonym_s_isSet = true;
}

bool OAIExportCtCodelist::is_cdisc_synonym_s_Set() const{
    return m_cdisc_synonym_s_isSet;
}

bool OAIExportCtCodelist::is_cdisc_synonym_s_Valid() const{
    return m_cdisc_synonym_s_isValid;
}

QString OAIExportCtCodelist::getCdiscDefinition() const {
    return m_cdisc_definition;
}
void OAIExportCtCodelist::setCdiscDefinition(const QString &cdisc_definition) {
    m_cdisc_definition = cdisc_definition;
    m_cdisc_definition_isSet = true;
}

bool OAIExportCtCodelist::is_cdisc_definition_Set() const{
    return m_cdisc_definition_isSet;
}

bool OAIExportCtCodelist::is_cdisc_definition_Valid() const{
    return m_cdisc_definition_isValid;
}

QString OAIExportCtCodelist::getNciPreferredTerm() const {
    return m_nci_preferred_term;
}
void OAIExportCtCodelist::setNciPreferredTerm(const QString &nci_preferred_term) {
    m_nci_preferred_term = nci_preferred_term;
    m_nci_preferred_term_isSet = true;
}

bool OAIExportCtCodelist::is_nci_preferred_term_Set() const{
    return m_nci_preferred_term_isSet;
}

bool OAIExportCtCodelist::is_nci_preferred_term_Valid() const{
    return m_nci_preferred_term_isValid;
}

QString OAIExportCtCodelist::getStandardAndDate() const {
    return m_standard_and_date;
}
void OAIExportCtCodelist::setStandardAndDate(const QString &standard_and_date) {
    m_standard_and_date = standard_and_date;
    m_standard_and_date_isSet = true;
}

bool OAIExportCtCodelist::is_standard_and_date_Set() const{
    return m_standard_and_date_isSet;
}

bool OAIExportCtCodelist::is_standard_and_date_Valid() const{
    return m_standard_and_date_isValid;
}

QList<OAIExportCtTerm> OAIExportCtCodelist::get() const {
    return m_;
}
void OAIExportCtCodelist::set(const QList<OAIExportCtTerm> &) {
    m_ = ;
    m__isSet = true;
}

bool OAIExportCtCodelist::is__Set() const{
    return m__isSet;
}

bool OAIExportCtCodelist::is__Valid() const{
    return m__isValid;
}

bool OAIExportCtCodelist::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_codelist_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_codelist_extensible__yes_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_codelist_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cdisc_submission_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cdisc_synonym_s.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cdisc_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nci_preferred_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_and_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportCtCodelist::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI

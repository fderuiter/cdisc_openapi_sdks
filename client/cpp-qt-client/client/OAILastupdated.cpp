/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILastupdated.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILastupdated::OAILastupdated(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILastupdated::OAILastupdated() {
    this->initializeModel();
}

OAILastupdated::~OAILastupdated() {}

void OAILastupdated::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_overall_isSet = false;
    m_overall_isValid = false;

    m_data_analysis_isSet = false;
    m_data_analysis_isValid = false;

    m_data_collection_isSet = false;
    m_data_collection_isValid = false;

    m_data_tabulation_isSet = false;
    m_data_tabulation_isValid = false;

    m_measure_isSet = false;
    m_measure_isValid = false;

    m_terminology_isSet = false;
    m_terminology_isValid = false;
}

void OAILastupdated::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILastupdated::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_overall_isValid = ::OpenAPI::fromJsonValue(m_overall, json[QString("overall")]);
    m_overall_isSet = !json[QString("overall")].isNull() && m_overall_isValid;

    m_data_analysis_isValid = ::OpenAPI::fromJsonValue(m_data_analysis, json[QString("data-analysis")]);
    m_data_analysis_isSet = !json[QString("data-analysis")].isNull() && m_data_analysis_isValid;

    m_data_collection_isValid = ::OpenAPI::fromJsonValue(m_data_collection, json[QString("data-collection")]);
    m_data_collection_isSet = !json[QString("data-collection")].isNull() && m_data_collection_isValid;

    m_data_tabulation_isValid = ::OpenAPI::fromJsonValue(m_data_tabulation, json[QString("data-tabulation")]);
    m_data_tabulation_isSet = !json[QString("data-tabulation")].isNull() && m_data_tabulation_isValid;

    m_measure_isValid = ::OpenAPI::fromJsonValue(m_measure, json[QString("measure")]);
    m_measure_isSet = !json[QString("measure")].isNull() && m_measure_isValid;

    m_terminology_isValid = ::OpenAPI::fromJsonValue(m_terminology, json[QString("terminology")]);
    m_terminology_isSet = !json[QString("terminology")].isNull() && m_terminology_isValid;
}

QString OAILastupdated::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILastupdated::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_overall_isSet) {
        obj.insert(QString("overall"), ::OpenAPI::toJsonValue(m_overall));
    }
    if (m_data_analysis_isSet) {
        obj.insert(QString("data-analysis"), ::OpenAPI::toJsonValue(m_data_analysis));
    }
    if (m_data_collection_isSet) {
        obj.insert(QString("data-collection"), ::OpenAPI::toJsonValue(m_data_collection));
    }
    if (m_data_tabulation_isSet) {
        obj.insert(QString("data-tabulation"), ::OpenAPI::toJsonValue(m_data_tabulation));
    }
    if (m_measure_isSet) {
        obj.insert(QString("measure"), ::OpenAPI::toJsonValue(m_measure));
    }
    if (m_terminology_isSet) {
        obj.insert(QString("terminology"), ::OpenAPI::toJsonValue(m_terminology));
    }
    return obj;
}

OAILastupdatedLinks OAILastupdated::getLinks() const {
    return m__links;
}
void OAILastupdated::setLinks(const OAILastupdatedLinks &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAILastupdated::is__links_Set() const{
    return m__links_isSet;
}

bool OAILastupdated::is__links_Valid() const{
    return m__links_isValid;
}

QString OAILastupdated::getOverall() const {
    return m_overall;
}
void OAILastupdated::setOverall(const QString &overall) {
    m_overall = overall;
    m_overall_isSet = true;
}

bool OAILastupdated::is_overall_Set() const{
    return m_overall_isSet;
}

bool OAILastupdated::is_overall_Valid() const{
    return m_overall_isValid;
}

QString OAILastupdated::getDataAnalysis() const {
    return m_data_analysis;
}
void OAILastupdated::setDataAnalysis(const QString &data_analysis) {
    m_data_analysis = data_analysis;
    m_data_analysis_isSet = true;
}

bool OAILastupdated::is_data_analysis_Set() const{
    return m_data_analysis_isSet;
}

bool OAILastupdated::is_data_analysis_Valid() const{
    return m_data_analysis_isValid;
}

QString OAILastupdated::getDataCollection() const {
    return m_data_collection;
}
void OAILastupdated::setDataCollection(const QString &data_collection) {
    m_data_collection = data_collection;
    m_data_collection_isSet = true;
}

bool OAILastupdated::is_data_collection_Set() const{
    return m_data_collection_isSet;
}

bool OAILastupdated::is_data_collection_Valid() const{
    return m_data_collection_isValid;
}

QString OAILastupdated::getDataTabulation() const {
    return m_data_tabulation;
}
void OAILastupdated::setDataTabulation(const QString &data_tabulation) {
    m_data_tabulation = data_tabulation;
    m_data_tabulation_isSet = true;
}

bool OAILastupdated::is_data_tabulation_Set() const{
    return m_data_tabulation_isSet;
}

bool OAILastupdated::is_data_tabulation_Valid() const{
    return m_data_tabulation_isValid;
}

QString OAILastupdated::getMeasure() const {
    return m_measure;
}
void OAILastupdated::setMeasure(const QString &measure) {
    m_measure = measure;
    m_measure_isSet = true;
}

bool OAILastupdated::is_measure_Set() const{
    return m_measure_isSet;
}

bool OAILastupdated::is_measure_Valid() const{
    return m_measure_isValid;
}

QString OAILastupdated::getTerminology() const {
    return m_terminology;
}
void OAILastupdated::setTerminology(const QString &terminology) {
    m_terminology = terminology;
    m_terminology_isSet = true;
}

bool OAILastupdated::is_terminology_Set() const{
    return m_terminology_isSet;
}

bool OAILastupdated::is_terminology_Valid() const{
    return m_terminology_isValid;
}

bool OAILastupdated::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_analysis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_collection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_tabulation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminology_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILastupdated::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI

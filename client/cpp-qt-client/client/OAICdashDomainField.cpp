/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICdashDomainField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICdashDomainField::OAICdashDomainField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICdashDomainField::OAICdashDomainField() {
    this->initializeModel();
}

OAICdashDomainField::~OAICdashDomainField() {}

void OAICdashDomainField::initializeModel() {

    m_ordinal_isSet = false;
    m_ordinal_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_domain_specific_isSet = false;
    m_domain_specific_isValid = false;

    m_question_text_isSet = false;
    m_question_text_isValid = false;

    m_prompt_isSet = false;
    m_prompt_isValid = false;

    m_simple_datatype_isSet = false;
    m_simple_datatype_isValid = false;

    m_implementation_notes_isSet = false;
    m_implementation_notes_isValid = false;

    m_mapping_instructions_isSet = false;
    m_mapping_instructions_isValid = false;

    m__links_isSet = false;
    m__links_isValid = false;
}

void OAICdashDomainField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICdashDomainField::fromJsonObject(QJsonObject json) {

    m_ordinal_isValid = ::OpenAPI::fromJsonValue(m_ordinal, json[QString("ordinal")]);
    m_ordinal_isSet = !json[QString("ordinal")].isNull() && m_ordinal_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("definition")]);
    m_definition_isSet = !json[QString("definition")].isNull() && m_definition_isValid;

    m_domain_specific_isValid = ::OpenAPI::fromJsonValue(m_domain_specific, json[QString("domainSpecific")]);
    m_domain_specific_isSet = !json[QString("domainSpecific")].isNull() && m_domain_specific_isValid;

    m_question_text_isValid = ::OpenAPI::fromJsonValue(m_question_text, json[QString("questionText")]);
    m_question_text_isSet = !json[QString("questionText")].isNull() && m_question_text_isValid;

    m_prompt_isValid = ::OpenAPI::fromJsonValue(m_prompt, json[QString("prompt")]);
    m_prompt_isSet = !json[QString("prompt")].isNull() && m_prompt_isValid;

    m_simple_datatype_isValid = ::OpenAPI::fromJsonValue(m_simple_datatype, json[QString("simpleDatatype")]);
    m_simple_datatype_isSet = !json[QString("simpleDatatype")].isNull() && m_simple_datatype_isValid;

    m_implementation_notes_isValid = ::OpenAPI::fromJsonValue(m_implementation_notes, json[QString("implementationNotes")]);
    m_implementation_notes_isSet = !json[QString("implementationNotes")].isNull() && m_implementation_notes_isValid;

    m_mapping_instructions_isValid = ::OpenAPI::fromJsonValue(m_mapping_instructions, json[QString("mappingInstructions")]);
    m_mapping_instructions_isSet = !json[QString("mappingInstructions")].isNull() && m_mapping_instructions_isValid;

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;
}

QString OAICdashDomainField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICdashDomainField::asJsonObject() const {
    QJsonObject obj;
    if (m_ordinal_isSet) {
        obj.insert(QString("ordinal"), ::OpenAPI::toJsonValue(m_ordinal));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_definition_isSet) {
        obj.insert(QString("definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_domain_specific_isSet) {
        obj.insert(QString("domainSpecific"), ::OpenAPI::toJsonValue(m_domain_specific));
    }
    if (m_question_text_isSet) {
        obj.insert(QString("questionText"), ::OpenAPI::toJsonValue(m_question_text));
    }
    if (m_prompt_isSet) {
        obj.insert(QString("prompt"), ::OpenAPI::toJsonValue(m_prompt));
    }
    if (m_simple_datatype_isSet) {
        obj.insert(QString("simpleDatatype"), ::OpenAPI::toJsonValue(m_simple_datatype));
    }
    if (m_implementation_notes_isSet) {
        obj.insert(QString("implementationNotes"), ::OpenAPI::toJsonValue(m_implementation_notes));
    }
    if (m_mapping_instructions_isSet) {
        obj.insert(QString("mappingInstructions"), ::OpenAPI::toJsonValue(m_mapping_instructions));
    }
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    return obj;
}

QString OAICdashDomainField::getOrdinal() const {
    return m_ordinal;
}
void OAICdashDomainField::setOrdinal(const QString &ordinal) {
    m_ordinal = ordinal;
    m_ordinal_isSet = true;
}

bool OAICdashDomainField::is_ordinal_Set() const{
    return m_ordinal_isSet;
}

bool OAICdashDomainField::is_ordinal_Valid() const{
    return m_ordinal_isValid;
}

QString OAICdashDomainField::getName() const {
    return m_name;
}
void OAICdashDomainField::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICdashDomainField::is_name_Set() const{
    return m_name_isSet;
}

bool OAICdashDomainField::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICdashDomainField::getLabel() const {
    return m_label;
}
void OAICdashDomainField::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAICdashDomainField::is_label_Set() const{
    return m_label_isSet;
}

bool OAICdashDomainField::is_label_Valid() const{
    return m_label_isValid;
}

QString OAICdashDomainField::getDefinition() const {
    return m_definition;
}
void OAICdashDomainField::setDefinition(const QString &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAICdashDomainField::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAICdashDomainField::is_definition_Valid() const{
    return m_definition_isValid;
}

QString OAICdashDomainField::getDomainSpecific() const {
    return m_domain_specific;
}
void OAICdashDomainField::setDomainSpecific(const QString &domain_specific) {
    m_domain_specific = domain_specific;
    m_domain_specific_isSet = true;
}

bool OAICdashDomainField::is_domain_specific_Set() const{
    return m_domain_specific_isSet;
}

bool OAICdashDomainField::is_domain_specific_Valid() const{
    return m_domain_specific_isValid;
}

QString OAICdashDomainField::getQuestionText() const {
    return m_question_text;
}
void OAICdashDomainField::setQuestionText(const QString &question_text) {
    m_question_text = question_text;
    m_question_text_isSet = true;
}

bool OAICdashDomainField::is_question_text_Set() const{
    return m_question_text_isSet;
}

bool OAICdashDomainField::is_question_text_Valid() const{
    return m_question_text_isValid;
}

QString OAICdashDomainField::getPrompt() const {
    return m_prompt;
}
void OAICdashDomainField::setPrompt(const QString &prompt) {
    m_prompt = prompt;
    m_prompt_isSet = true;
}

bool OAICdashDomainField::is_prompt_Set() const{
    return m_prompt_isSet;
}

bool OAICdashDomainField::is_prompt_Valid() const{
    return m_prompt_isValid;
}

QString OAICdashDomainField::getSimpleDatatype() const {
    return m_simple_datatype;
}
void OAICdashDomainField::setSimpleDatatype(const QString &simple_datatype) {
    m_simple_datatype = simple_datatype;
    m_simple_datatype_isSet = true;
}

bool OAICdashDomainField::is_simple_datatype_Set() const{
    return m_simple_datatype_isSet;
}

bool OAICdashDomainField::is_simple_datatype_Valid() const{
    return m_simple_datatype_isValid;
}

QString OAICdashDomainField::getImplementationNotes() const {
    return m_implementation_notes;
}
void OAICdashDomainField::setImplementationNotes(const QString &implementation_notes) {
    m_implementation_notes = implementation_notes;
    m_implementation_notes_isSet = true;
}

bool OAICdashDomainField::is_implementation_notes_Set() const{
    return m_implementation_notes_isSet;
}

bool OAICdashDomainField::is_implementation_notes_Valid() const{
    return m_implementation_notes_isValid;
}

QString OAICdashDomainField::getMappingInstructions() const {
    return m_mapping_instructions;
}
void OAICdashDomainField::setMappingInstructions(const QString &mapping_instructions) {
    m_mapping_instructions = mapping_instructions;
    m_mapping_instructions_isSet = true;
}

bool OAICdashDomainField::is_mapping_instructions_Set() const{
    return m_mapping_instructions_isSet;
}

bool OAICdashDomainField::is_mapping_instructions_Valid() const{
    return m_mapping_instructions_isValid;
}

OAICdashDomainFieldLinks OAICdashDomainField::getLinks() const {
    return m__links;
}
void OAICdashDomainField::setLinks(const OAICdashDomainFieldLinks &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAICdashDomainField::is__links_Set() const{
    return m__links_isSet;
}

bool OAICdashDomainField::is__links_Valid() const{
    return m__links_isValid;
}

bool OAICdashDomainField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ordinal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_specific_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prompt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simple_datatype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_implementation_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapping_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICdashDomainField::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI

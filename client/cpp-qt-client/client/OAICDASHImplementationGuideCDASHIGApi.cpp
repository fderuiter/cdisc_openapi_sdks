/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICDASHImplementationGuideCDASHIGApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAICDASHImplementationGuideCDASHIGApi::OAICDASHImplementationGuideCDASHIGApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAICDASHImplementationGuideCDASHIGApi::~OAICDASHImplementationGuideCDASHIGApi() {
}

void OAICDASHImplementationGuideCDASHIGApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://library.cdisc.org/api"),
    "Production server",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://virtserver.swaggerhub.com/CDISC1/share-2.0/1.1.0"),
    "SwaggerHub API Auto Mocking",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("mdrCdashigVersionClassesClassDomainsGet", defaultConf);
    _serverIndices.insert("mdrCdashigVersionClassesClassDomainsGet", 0);
    _serverConfigs.insert("mdrCdashigVersionClassesClassGet", defaultConf);
    _serverIndices.insert("mdrCdashigVersionClassesClassGet", 0);
    _serverConfigs.insert("mdrCdashigVersionClassesClassScenariosGet", defaultConf);
    _serverIndices.insert("mdrCdashigVersionClassesClassScenariosGet", 0);
    _serverConfigs.insert("mdrCdashigVersionClassesGet", defaultConf);
    _serverIndices.insert("mdrCdashigVersionClassesGet", 0);
    _serverConfigs.insert("mdrCdashigVersionDomainsDomainFieldsFieldGet", defaultConf);
    _serverIndices.insert("mdrCdashigVersionDomainsDomainFieldsFieldGet", 0);
    _serverConfigs.insert("mdrCdashigVersionDomainsDomainFieldsGet", defaultConf);
    _serverIndices.insert("mdrCdashigVersionDomainsDomainFieldsGet", 0);
    _serverConfigs.insert("mdrCdashigVersionDomainsDomainGet", defaultConf);
    _serverIndices.insert("mdrCdashigVersionDomainsDomainGet", 0);
    _serverConfigs.insert("mdrCdashigVersionDomainsGet", defaultConf);
    _serverIndices.insert("mdrCdashigVersionDomainsGet", 0);
    _serverConfigs.insert("mdrCdashigVersionGet", defaultConf);
    _serverIndices.insert("mdrCdashigVersionGet", 0);
    _serverConfigs.insert("mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet", defaultConf);
    _serverIndices.insert("mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet", 0);
    _serverConfigs.insert("mdrCdashigVersionScenariosDomainScenarioFieldsGet", defaultConf);
    _serverIndices.insert("mdrCdashigVersionScenariosDomainScenarioFieldsGet", 0);
    _serverConfigs.insert("mdrCdashigVersionScenariosDomainScenarioGet", defaultConf);
    _serverIndices.insert("mdrCdashigVersionScenariosDomainScenarioGet", 0);
    _serverConfigs.insert("mdrCdashigVersionScenariosGet", defaultConf);
    _serverIndices.insert("mdrCdashigVersionScenariosGet", 0);
    _serverConfigs.insert("mdrRootCdashigDomainsDomainFieldsFieldGet", defaultConf);
    _serverIndices.insert("mdrRootCdashigDomainsDomainFieldsFieldGet", 0);
    _serverConfigs.insert("mdrRootCdashigScenariosDomainScenarioFieldsFieldGet", defaultConf);
    _serverIndices.insert("mdrRootCdashigScenariosDomainScenarioFieldsFieldGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAICDASHImplementationGuideCDASHIGApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAICDASHImplementationGuideCDASHIGApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAICDASHImplementationGuideCDASHIGApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAICDASHImplementationGuideCDASHIGApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAICDASHImplementationGuideCDASHIGApi::setUsername(const QString &username) {
    _username = username;
}

void OAICDASHImplementationGuideCDASHIGApi::setPassword(const QString &password) {
    _password = password;
}


void OAICDASHImplementationGuideCDASHIGApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAICDASHImplementationGuideCDASHIGApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAICDASHImplementationGuideCDASHIGApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAICDASHImplementationGuideCDASHIGApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAICDASHImplementationGuideCDASHIGApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAICDASHImplementationGuideCDASHIGApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAICDASHImplementationGuideCDASHIGApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAICDASHImplementationGuideCDASHIGApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAICDASHImplementationGuideCDASHIGApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAICDASHImplementationGuideCDASHIGApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAICDASHImplementationGuideCDASHIGApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAICDASHImplementationGuideCDASHIGApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAICDASHImplementationGuideCDASHIGApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionClassesClassDomainsGet(const QString &version, const QString &r_class) {
    QString fullPath = QString(_serverConfigs["mdrCdashigVersionClassesClassDomainsGet"][_serverIndices.value("mdrCdashigVersionClassesClassDomainsGet")].URL()+"/mdr/cdashig/{version}/classes/{class}/domains");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString r_classPathParam("{");
        r_classPathParam.append("class").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "class", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"class"+pathSuffix : pathPrefix;
        fullPath.replace(r_classPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_class)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionClassesClassDomainsGetCallback);
    connect(this, &OAICDASHImplementationGuideCDASHIGApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionClassesClassDomainsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICdashigClassDomains output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCdashigVersionClassesClassDomainsGetSignal(output);
        Q_EMIT mdrCdashigVersionClassesClassDomainsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCdashigVersionClassesClassDomainsGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionClassesClassDomainsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCdashigVersionClassesClassDomainsGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionClassesClassDomainsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionClassesClassGet(const QString &version, const QString &r_class) {
    QString fullPath = QString(_serverConfigs["mdrCdashigVersionClassesClassGet"][_serverIndices.value("mdrCdashigVersionClassesClassGet")].URL()+"/mdr/cdashig/{version}/classes/{class}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString r_classPathParam("{");
        r_classPathParam.append("class").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "class", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"class"+pathSuffix : pathPrefix;
        fullPath.replace(r_classPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_class)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionClassesClassGetCallback);
    connect(this, &OAICDASHImplementationGuideCDASHIGApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionClassesClassGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICdashigClass output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCdashigVersionClassesClassGetSignal(output);
        Q_EMIT mdrCdashigVersionClassesClassGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCdashigVersionClassesClassGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionClassesClassGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCdashigVersionClassesClassGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionClassesClassGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionClassesClassScenariosGet(const QString &version, const QString &r_class) {
    QString fullPath = QString(_serverConfigs["mdrCdashigVersionClassesClassScenariosGet"][_serverIndices.value("mdrCdashigVersionClassesClassScenariosGet")].URL()+"/mdr/cdashig/{version}/classes/{class}/scenarios");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString r_classPathParam("{");
        r_classPathParam.append("class").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "class", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"class"+pathSuffix : pathPrefix;
        fullPath.replace(r_classPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_class)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionClassesClassScenariosGetCallback);
    connect(this, &OAICDASHImplementationGuideCDASHIGApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionClassesClassScenariosGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICdashigClassScenarios output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCdashigVersionClassesClassScenariosGetSignal(output);
        Q_EMIT mdrCdashigVersionClassesClassScenariosGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCdashigVersionClassesClassScenariosGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionClassesClassScenariosGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCdashigVersionClassesClassScenariosGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionClassesClassScenariosGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionClassesGet(const QString &version) {
    QString fullPath = QString(_serverConfigs["mdrCdashigVersionClassesGet"][_serverIndices.value("mdrCdashigVersionClassesGet")].URL()+"/mdr/cdashig/{version}/classes");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionClassesGetCallback);
    connect(this, &OAICDASHImplementationGuideCDASHIGApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionClassesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICdashigProductClasses output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCdashigVersionClassesGetSignal(output);
        Q_EMIT mdrCdashigVersionClassesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCdashigVersionClassesGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionClassesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCdashigVersionClassesGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionClassesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionDomainsDomainFieldsFieldGet(const QString &version, const QString &domain, const QString &field) {
    QString fullPath = QString(_serverConfigs["mdrCdashigVersionDomainsDomainFieldsFieldGet"][_serverIndices.value("mdrCdashigVersionDomainsDomainFieldsFieldGet")].URL()+"/mdr/cdashig/{version}/domains/{domain}/fields/{field}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString domainPathParam("{");
        domainPathParam.append("domain").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "domain", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"domain"+pathSuffix : pathPrefix;
        fullPath.replace(domainPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(domain)));
    }
    
    {
        QString fieldPathParam("{");
        fieldPathParam.append("field").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "field", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"field"+pathSuffix : pathPrefix;
        fullPath.replace(fieldPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(field)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionDomainsDomainFieldsFieldGetCallback);
    connect(this, &OAICDASHImplementationGuideCDASHIGApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionDomainsDomainFieldsFieldGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICdashigDomainField output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCdashigVersionDomainsDomainFieldsFieldGetSignal(output);
        Q_EMIT mdrCdashigVersionDomainsDomainFieldsFieldGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCdashigVersionDomainsDomainFieldsFieldGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionDomainsDomainFieldsFieldGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCdashigVersionDomainsDomainFieldsFieldGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionDomainsDomainFieldsFieldGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionDomainsDomainFieldsGet(const QString &version, const QString &domain) {
    QString fullPath = QString(_serverConfigs["mdrCdashigVersionDomainsDomainFieldsGet"][_serverIndices.value("mdrCdashigVersionDomainsDomainFieldsGet")].URL()+"/mdr/cdashig/{version}/domains/{domain}/fields");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString domainPathParam("{");
        domainPathParam.append("domain").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "domain", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"domain"+pathSuffix : pathPrefix;
        fullPath.replace(domainPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(domain)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionDomainsDomainFieldsGetCallback);
    connect(this, &OAICDASHImplementationGuideCDASHIGApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionDomainsDomainFieldsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICdashigDomainFields output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCdashigVersionDomainsDomainFieldsGetSignal(output);
        Q_EMIT mdrCdashigVersionDomainsDomainFieldsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCdashigVersionDomainsDomainFieldsGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionDomainsDomainFieldsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCdashigVersionDomainsDomainFieldsGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionDomainsDomainFieldsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionDomainsDomainGet(const QString &version, const QString &domain) {
    QString fullPath = QString(_serverConfigs["mdrCdashigVersionDomainsDomainGet"][_serverIndices.value("mdrCdashigVersionDomainsDomainGet")].URL()+"/mdr/cdashig/{version}/domains/{domain}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString domainPathParam("{");
        domainPathParam.append("domain").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "domain", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"domain"+pathSuffix : pathPrefix;
        fullPath.replace(domainPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(domain)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionDomainsDomainGetCallback);
    connect(this, &OAICDASHImplementationGuideCDASHIGApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionDomainsDomainGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICdashigDomain output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCdashigVersionDomainsDomainGetSignal(output);
        Q_EMIT mdrCdashigVersionDomainsDomainGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCdashigVersionDomainsDomainGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionDomainsDomainGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCdashigVersionDomainsDomainGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionDomainsDomainGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionDomainsGet(const QString &version) {
    QString fullPath = QString(_serverConfigs["mdrCdashigVersionDomainsGet"][_serverIndices.value("mdrCdashigVersionDomainsGet")].URL()+"/mdr/cdashig/{version}/domains");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionDomainsGetCallback);
    connect(this, &OAICDASHImplementationGuideCDASHIGApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionDomainsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICdashigProductDomains output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCdashigVersionDomainsGetSignal(output);
        Q_EMIT mdrCdashigVersionDomainsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCdashigVersionDomainsGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionDomainsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCdashigVersionDomainsGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionDomainsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionGet(const QString &version) {
    QString fullPath = QString(_serverConfigs["mdrCdashigVersionGet"][_serverIndices.value("mdrCdashigVersionGet")].URL()+"/mdr/cdashig/{version}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionGetCallback);
    connect(this, &OAICDASHImplementationGuideCDASHIGApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICdashigProduct output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCdashigVersionGetSignal(output);
        Q_EMIT mdrCdashigVersionGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCdashigVersionGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCdashigVersionGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet(const QString &version, const QString &domain, const QString &scenario, const QString &field) {
    QString fullPath = QString(_serverConfigs["mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet"][_serverIndices.value("mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet")].URL()+"/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields/{field}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString domainPathParam("{");
        domainPathParam.append("domain").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "domain", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"domain"+pathSuffix : pathPrefix;
        fullPath.replace(domainPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(domain)));
    }
    
    {
        QString scenarioPathParam("{");
        scenarioPathParam.append("scenario").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scenario", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scenario"+pathSuffix : pathPrefix;
        fullPath.replace(scenarioPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scenario)));
    }
    
    {
        QString fieldPathParam("{");
        fieldPathParam.append("field").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "field", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"field"+pathSuffix : pathPrefix;
        fullPath.replace(fieldPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(field)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetCallback);
    connect(this, &OAICDASHImplementationGuideCDASHIGApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICdashigScenarioField output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetSignal(output);
        Q_EMIT mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionScenariosDomainScenarioFieldsGet(const QString &version, const QString &domain, const QString &scenario) {
    QString fullPath = QString(_serverConfigs["mdrCdashigVersionScenariosDomainScenarioFieldsGet"][_serverIndices.value("mdrCdashigVersionScenariosDomainScenarioFieldsGet")].URL()+"/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString domainPathParam("{");
        domainPathParam.append("domain").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "domain", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"domain"+pathSuffix : pathPrefix;
        fullPath.replace(domainPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(domain)));
    }
    
    {
        QString scenarioPathParam("{");
        scenarioPathParam.append("scenario").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scenario", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scenario"+pathSuffix : pathPrefix;
        fullPath.replace(scenarioPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scenario)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionScenariosDomainScenarioFieldsGetCallback);
    connect(this, &OAICDASHImplementationGuideCDASHIGApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionScenariosDomainScenarioFieldsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICdashigScenarioFields output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCdashigVersionScenariosDomainScenarioFieldsGetSignal(output);
        Q_EMIT mdrCdashigVersionScenariosDomainScenarioFieldsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCdashigVersionScenariosDomainScenarioFieldsGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionScenariosDomainScenarioFieldsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCdashigVersionScenariosDomainScenarioFieldsGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionScenariosDomainScenarioFieldsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionScenariosDomainScenarioGet(const QString &version, const QString &domain, const QString &scenario) {
    QString fullPath = QString(_serverConfigs["mdrCdashigVersionScenariosDomainScenarioGet"][_serverIndices.value("mdrCdashigVersionScenariosDomainScenarioGet")].URL()+"/mdr/cdashig/{version}/scenarios/{domain}.{scenario}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString domainPathParam("{");
        domainPathParam.append("domain").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "domain", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"domain"+pathSuffix : pathPrefix;
        fullPath.replace(domainPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(domain)));
    }
    
    {
        QString scenarioPathParam("{");
        scenarioPathParam.append("scenario").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scenario", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scenario"+pathSuffix : pathPrefix;
        fullPath.replace(scenarioPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scenario)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionScenariosDomainScenarioGetCallback);
    connect(this, &OAICDASHImplementationGuideCDASHIGApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionScenariosDomainScenarioGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICdashigScenario output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCdashigVersionScenariosDomainScenarioGetSignal(output);
        Q_EMIT mdrCdashigVersionScenariosDomainScenarioGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCdashigVersionScenariosDomainScenarioGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionScenariosDomainScenarioGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCdashigVersionScenariosDomainScenarioGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionScenariosDomainScenarioGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionScenariosGet(const QString &version) {
    QString fullPath = QString(_serverConfigs["mdrCdashigVersionScenariosGet"][_serverIndices.value("mdrCdashigVersionScenariosGet")].URL()+"/mdr/cdashig/{version}/scenarios");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionScenariosGetCallback);
    connect(this, &OAICDASHImplementationGuideCDASHIGApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICDASHImplementationGuideCDASHIGApi::mdrCdashigVersionScenariosGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICdashigProductScenarios output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrCdashigVersionScenariosGetSignal(output);
        Q_EMIT mdrCdashigVersionScenariosGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrCdashigVersionScenariosGetSignalE(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionScenariosGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrCdashigVersionScenariosGetSignalError(output, error_type, error_str);
        Q_EMIT mdrCdashigVersionScenariosGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICDASHImplementationGuideCDASHIGApi::mdrRootCdashigDomainsDomainFieldsFieldGet(const QString &domain, const QString &field) {
    QString fullPath = QString(_serverConfigs["mdrRootCdashigDomainsDomainFieldsFieldGet"][_serverIndices.value("mdrRootCdashigDomainsDomainFieldsFieldGet")].URL()+"/mdr/root/cdashig/domains/{domain}/fields/{field}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString domainPathParam("{");
        domainPathParam.append("domain").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "domain", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"domain"+pathSuffix : pathPrefix;
        fullPath.replace(domainPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(domain)));
    }
    
    {
        QString fieldPathParam("{");
        fieldPathParam.append("field").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "field", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"field"+pathSuffix : pathPrefix;
        fullPath.replace(fieldPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(field)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICDASHImplementationGuideCDASHIGApi::mdrRootCdashigDomainsDomainFieldsFieldGetCallback);
    connect(this, &OAICDASHImplementationGuideCDASHIGApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICDASHImplementationGuideCDASHIGApi::mdrRootCdashigDomainsDomainFieldsFieldGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRootCdashigDomainField output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrRootCdashigDomainsDomainFieldsFieldGetSignal(output);
        Q_EMIT mdrRootCdashigDomainsDomainFieldsFieldGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrRootCdashigDomainsDomainFieldsFieldGetSignalE(output, error_type, error_str);
        Q_EMIT mdrRootCdashigDomainsDomainFieldsFieldGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrRootCdashigDomainsDomainFieldsFieldGetSignalError(output, error_type, error_str);
        Q_EMIT mdrRootCdashigDomainsDomainFieldsFieldGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICDASHImplementationGuideCDASHIGApi::mdrRootCdashigScenariosDomainScenarioFieldsFieldGet(const QString &domain, const QString &scenario, const QString &field) {
    QString fullPath = QString(_serverConfigs["mdrRootCdashigScenariosDomainScenarioFieldsFieldGet"][_serverIndices.value("mdrRootCdashigScenariosDomainScenarioFieldsFieldGet")].URL()+"/mdr/root/cdashig/scenarios/{domain}.{scenario}/fields/{field}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString domainPathParam("{");
        domainPathParam.append("domain").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "domain", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"domain"+pathSuffix : pathPrefix;
        fullPath.replace(domainPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(domain)));
    }
    
    {
        QString scenarioPathParam("{");
        scenarioPathParam.append("scenario").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "scenario", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"scenario"+pathSuffix : pathPrefix;
        fullPath.replace(scenarioPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(scenario)));
    }
    
    {
        QString fieldPathParam("{");
        fieldPathParam.append("field").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "field", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"field"+pathSuffix : pathPrefix;
        fullPath.replace(fieldPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(field)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAICDASHImplementationGuideCDASHIGApi::mdrRootCdashigScenariosDomainScenarioFieldsFieldGetCallback);
    connect(this, &OAICDASHImplementationGuideCDASHIGApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAICDASHImplementationGuideCDASHIGApi::mdrRootCdashigScenariosDomainScenarioFieldsFieldGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRootCdashigScenarioField output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrRootCdashigScenariosDomainScenarioFieldsFieldGetSignal(output);
        Q_EMIT mdrRootCdashigScenariosDomainScenarioFieldsFieldGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrRootCdashigScenariosDomainScenarioFieldsFieldGetSignalE(output, error_type, error_str);
        Q_EMIT mdrRootCdashigScenariosDomainScenarioFieldsFieldGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrRootCdashigScenariosDomainScenarioFieldsFieldGetSignalError(output, error_type, error_str);
        Q_EMIT mdrRootCdashigScenariosDomainScenarioFieldsFieldGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAICDASHImplementationGuideCDASHIGApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI

/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportCdashigScenarioVariablesRow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportCdashigScenarioVariablesRow::OAIExportCdashigScenarioVariablesRow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportCdashigScenarioVariablesRow::OAIExportCdashigScenarioVariablesRow() {
    this->initializeModel();
}

OAIExportCdashigScenarioVariablesRow::~OAIExportCdashigScenarioVariablesRow() {}

void OAIExportCdashigScenarioVariablesRow::initializeModel() {

    m_version_isSet = false;
    m_version_isValid = false;

    m_r_class_isSet = false;
    m_r_class_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_data_collection_scenario_isSet = false;
    m_data_collection_scenario_isValid = false;

    m_variable_order_isSet = false;
    m_variable_order_isValid = false;

    m_cdashig_variable_isSet = false;
    m_cdashig_variable_isValid = false;

    m_cdashig_variable_label_isSet = false;
    m_cdashig_variable_label_isValid = false;

    m_draft_cdashig_definition_isSet = false;
    m_draft_cdashig_definition_isValid = false;

    m_question_text_isSet = false;
    m_question_text_isValid = false;

    m_prompt_isSet = false;
    m_prompt_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_cdashig_core_isSet = false;
    m_cdashig_core_isValid = false;

    m_case_report_form_completion_instructions_isSet = false;
    m_case_report_form_completion_instructions_isValid = false;

    m_sdtmig_target_isSet = false;
    m_sdtmig_target_isValid = false;

    m_mapping_instructions_isSet = false;
    m_mapping_instructions_isValid = false;

    m_controlled_terminology_codelist_name_isSet = false;
    m_controlled_terminology_codelist_name_isValid = false;

    m_implementation_notes_isSet = false;
    m_implementation_notes_isValid = false;
}

void OAIExportCdashigScenarioVariablesRow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportCdashigScenarioVariablesRow::fromJsonObject(QJsonObject json) {

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;

    m_r_class_isValid = ::OpenAPI::fromJsonValue(m_r_class, json[QString("Class")]);
    m_r_class_isSet = !json[QString("Class")].isNull() && m_r_class_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_data_collection_scenario_isValid = ::OpenAPI::fromJsonValue(m_data_collection_scenario, json[QString("Data Collection Scenario")]);
    m_data_collection_scenario_isSet = !json[QString("Data Collection Scenario")].isNull() && m_data_collection_scenario_isValid;

    m_variable_order_isValid = ::OpenAPI::fromJsonValue(m_variable_order, json[QString("Variable Order")]);
    m_variable_order_isSet = !json[QString("Variable Order")].isNull() && m_variable_order_isValid;

    m_cdashig_variable_isValid = ::OpenAPI::fromJsonValue(m_cdashig_variable, json[QString("CDASHIG Variable")]);
    m_cdashig_variable_isSet = !json[QString("CDASHIG Variable")].isNull() && m_cdashig_variable_isValid;

    m_cdashig_variable_label_isValid = ::OpenAPI::fromJsonValue(m_cdashig_variable_label, json[QString("CDASHIG Variable Label")]);
    m_cdashig_variable_label_isSet = !json[QString("CDASHIG Variable Label")].isNull() && m_cdashig_variable_label_isValid;

    m_draft_cdashig_definition_isValid = ::OpenAPI::fromJsonValue(m_draft_cdashig_definition, json[QString("DRAFT CDASHIG Definition")]);
    m_draft_cdashig_definition_isSet = !json[QString("DRAFT CDASHIG Definition")].isNull() && m_draft_cdashig_definition_isValid;

    m_question_text_isValid = ::OpenAPI::fromJsonValue(m_question_text, json[QString("Question Text")]);
    m_question_text_isSet = !json[QString("Question Text")].isNull() && m_question_text_isValid;

    m_prompt_isValid = ::OpenAPI::fromJsonValue(m_prompt, json[QString("Prompt")]);
    m_prompt_isSet = !json[QString("Prompt")].isNull() && m_prompt_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_cdashig_core_isValid = ::OpenAPI::fromJsonValue(m_cdashig_core, json[QString("CDASHIG Core")]);
    m_cdashig_core_isSet = !json[QString("CDASHIG Core")].isNull() && m_cdashig_core_isValid;

    m_case_report_form_completion_instructions_isValid = ::OpenAPI::fromJsonValue(m_case_report_form_completion_instructions, json[QString("Case Report Form Completion Instructions")]);
    m_case_report_form_completion_instructions_isSet = !json[QString("Case Report Form Completion Instructions")].isNull() && m_case_report_form_completion_instructions_isValid;

    m_sdtmig_target_isValid = ::OpenAPI::fromJsonValue(m_sdtmig_target, json[QString("SDTMIG Target")]);
    m_sdtmig_target_isSet = !json[QString("SDTMIG Target")].isNull() && m_sdtmig_target_isValid;

    m_mapping_instructions_isValid = ::OpenAPI::fromJsonValue(m_mapping_instructions, json[QString("Mapping Instructions")]);
    m_mapping_instructions_isSet = !json[QString("Mapping Instructions")].isNull() && m_mapping_instructions_isValid;

    m_controlled_terminology_codelist_name_isValid = ::OpenAPI::fromJsonValue(m_controlled_terminology_codelist_name, json[QString("Controlled Terminology Codelist Name")]);
    m_controlled_terminology_codelist_name_isSet = !json[QString("Controlled Terminology Codelist Name")].isNull() && m_controlled_terminology_codelist_name_isValid;

    m_implementation_notes_isValid = ::OpenAPI::fromJsonValue(m_implementation_notes, json[QString("Implementation Notes")]);
    m_implementation_notes_isSet = !json[QString("Implementation Notes")].isNull() && m_implementation_notes_isValid;
}

QString OAIExportCdashigScenarioVariablesRow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportCdashigScenarioVariablesRow::asJsonObject() const {
    QJsonObject obj;
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_r_class_isSet) {
        obj.insert(QString("Class"), ::OpenAPI::toJsonValue(m_r_class));
    }
    if (m_domain_isSet) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_data_collection_scenario_isSet) {
        obj.insert(QString("Data Collection Scenario"), ::OpenAPI::toJsonValue(m_data_collection_scenario));
    }
    if (m_variable_order_isSet) {
        obj.insert(QString("Variable Order"), ::OpenAPI::toJsonValue(m_variable_order));
    }
    if (m_cdashig_variable_isSet) {
        obj.insert(QString("CDASHIG Variable"), ::OpenAPI::toJsonValue(m_cdashig_variable));
    }
    if (m_cdashig_variable_label_isSet) {
        obj.insert(QString("CDASHIG Variable Label"), ::OpenAPI::toJsonValue(m_cdashig_variable_label));
    }
    if (m_draft_cdashig_definition_isSet) {
        obj.insert(QString("DRAFT CDASHIG Definition"), ::OpenAPI::toJsonValue(m_draft_cdashig_definition));
    }
    if (m_question_text_isSet) {
        obj.insert(QString("Question Text"), ::OpenAPI::toJsonValue(m_question_text));
    }
    if (m_prompt_isSet) {
        obj.insert(QString("Prompt"), ::OpenAPI::toJsonValue(m_prompt));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_cdashig_core_isSet) {
        obj.insert(QString("CDASHIG Core"), ::OpenAPI::toJsonValue(m_cdashig_core));
    }
    if (m_case_report_form_completion_instructions_isSet) {
        obj.insert(QString("Case Report Form Completion Instructions"), ::OpenAPI::toJsonValue(m_case_report_form_completion_instructions));
    }
    if (m_sdtmig_target.size() > 0) {
        obj.insert(QString("SDTMIG Target"), ::OpenAPI::toJsonValue(m_sdtmig_target));
    }
    if (m_mapping_instructions_isSet) {
        obj.insert(QString("Mapping Instructions"), ::OpenAPI::toJsonValue(m_mapping_instructions));
    }
    if (m_controlled_terminology_codelist_name_isSet) {
        obj.insert(QString("Controlled Terminology Codelist Name"), ::OpenAPI::toJsonValue(m_controlled_terminology_codelist_name));
    }
    if (m_implementation_notes_isSet) {
        obj.insert(QString("Implementation Notes"), ::OpenAPI::toJsonValue(m_implementation_notes));
    }
    return obj;
}

QString OAIExportCdashigScenarioVariablesRow::getVersion() const {
    return m_version;
}
void OAIExportCdashigScenarioVariablesRow::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIExportCdashigScenarioVariablesRow::is_version_Set() const{
    return m_version_isSet;
}

bool OAIExportCdashigScenarioVariablesRow::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIExportCdashigScenarioVariablesRow::getRClass() const {
    return m_r_class;
}
void OAIExportCdashigScenarioVariablesRow::setRClass(const QString &r_class) {
    m_r_class = r_class;
    m_r_class_isSet = true;
}

bool OAIExportCdashigScenarioVariablesRow::is_r_class_Set() const{
    return m_r_class_isSet;
}

bool OAIExportCdashigScenarioVariablesRow::is_r_class_Valid() const{
    return m_r_class_isValid;
}

QString OAIExportCdashigScenarioVariablesRow::getDomain() const {
    return m_domain;
}
void OAIExportCdashigScenarioVariablesRow::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIExportCdashigScenarioVariablesRow::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIExportCdashigScenarioVariablesRow::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIExportCdashigScenarioVariablesRow::getDataCollectionScenario() const {
    return m_data_collection_scenario;
}
void OAIExportCdashigScenarioVariablesRow::setDataCollectionScenario(const QString &data_collection_scenario) {
    m_data_collection_scenario = data_collection_scenario;
    m_data_collection_scenario_isSet = true;
}

bool OAIExportCdashigScenarioVariablesRow::is_data_collection_scenario_Set() const{
    return m_data_collection_scenario_isSet;
}

bool OAIExportCdashigScenarioVariablesRow::is_data_collection_scenario_Valid() const{
    return m_data_collection_scenario_isValid;
}

QString OAIExportCdashigScenarioVariablesRow::getVariableOrder() const {
    return m_variable_order;
}
void OAIExportCdashigScenarioVariablesRow::setVariableOrder(const QString &variable_order) {
    m_variable_order = variable_order;
    m_variable_order_isSet = true;
}

bool OAIExportCdashigScenarioVariablesRow::is_variable_order_Set() const{
    return m_variable_order_isSet;
}

bool OAIExportCdashigScenarioVariablesRow::is_variable_order_Valid() const{
    return m_variable_order_isValid;
}

QString OAIExportCdashigScenarioVariablesRow::getCdashigVariable() const {
    return m_cdashig_variable;
}
void OAIExportCdashigScenarioVariablesRow::setCdashigVariable(const QString &cdashig_variable) {
    m_cdashig_variable = cdashig_variable;
    m_cdashig_variable_isSet = true;
}

bool OAIExportCdashigScenarioVariablesRow::is_cdashig_variable_Set() const{
    return m_cdashig_variable_isSet;
}

bool OAIExportCdashigScenarioVariablesRow::is_cdashig_variable_Valid() const{
    return m_cdashig_variable_isValid;
}

QString OAIExportCdashigScenarioVariablesRow::getCdashigVariableLabel() const {
    return m_cdashig_variable_label;
}
void OAIExportCdashigScenarioVariablesRow::setCdashigVariableLabel(const QString &cdashig_variable_label) {
    m_cdashig_variable_label = cdashig_variable_label;
    m_cdashig_variable_label_isSet = true;
}

bool OAIExportCdashigScenarioVariablesRow::is_cdashig_variable_label_Set() const{
    return m_cdashig_variable_label_isSet;
}

bool OAIExportCdashigScenarioVariablesRow::is_cdashig_variable_label_Valid() const{
    return m_cdashig_variable_label_isValid;
}

QString OAIExportCdashigScenarioVariablesRow::getDraftCdashigDefinition() const {
    return m_draft_cdashig_definition;
}
void OAIExportCdashigScenarioVariablesRow::setDraftCdashigDefinition(const QString &draft_cdashig_definition) {
    m_draft_cdashig_definition = draft_cdashig_definition;
    m_draft_cdashig_definition_isSet = true;
}

bool OAIExportCdashigScenarioVariablesRow::is_draft_cdashig_definition_Set() const{
    return m_draft_cdashig_definition_isSet;
}

bool OAIExportCdashigScenarioVariablesRow::is_draft_cdashig_definition_Valid() const{
    return m_draft_cdashig_definition_isValid;
}

QString OAIExportCdashigScenarioVariablesRow::getQuestionText() const {
    return m_question_text;
}
void OAIExportCdashigScenarioVariablesRow::setQuestionText(const QString &question_text) {
    m_question_text = question_text;
    m_question_text_isSet = true;
}

bool OAIExportCdashigScenarioVariablesRow::is_question_text_Set() const{
    return m_question_text_isSet;
}

bool OAIExportCdashigScenarioVariablesRow::is_question_text_Valid() const{
    return m_question_text_isValid;
}

QString OAIExportCdashigScenarioVariablesRow::getPrompt() const {
    return m_prompt;
}
void OAIExportCdashigScenarioVariablesRow::setPrompt(const QString &prompt) {
    m_prompt = prompt;
    m_prompt_isSet = true;
}

bool OAIExportCdashigScenarioVariablesRow::is_prompt_Set() const{
    return m_prompt_isSet;
}

bool OAIExportCdashigScenarioVariablesRow::is_prompt_Valid() const{
    return m_prompt_isValid;
}

QString OAIExportCdashigScenarioVariablesRow::getType() const {
    return m_type;
}
void OAIExportCdashigScenarioVariablesRow::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIExportCdashigScenarioVariablesRow::is_type_Set() const{
    return m_type_isSet;
}

bool OAIExportCdashigScenarioVariablesRow::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIExportCdashigScenarioVariablesRow::getCdashigCore() const {
    return m_cdashig_core;
}
void OAIExportCdashigScenarioVariablesRow::setCdashigCore(const QString &cdashig_core) {
    m_cdashig_core = cdashig_core;
    m_cdashig_core_isSet = true;
}

bool OAIExportCdashigScenarioVariablesRow::is_cdashig_core_Set() const{
    return m_cdashig_core_isSet;
}

bool OAIExportCdashigScenarioVariablesRow::is_cdashig_core_Valid() const{
    return m_cdashig_core_isValid;
}

QString OAIExportCdashigScenarioVariablesRow::getCaseReportFormCompletionInstructions() const {
    return m_case_report_form_completion_instructions;
}
void OAIExportCdashigScenarioVariablesRow::setCaseReportFormCompletionInstructions(const QString &case_report_form_completion_instructions) {
    m_case_report_form_completion_instructions = case_report_form_completion_instructions;
    m_case_report_form_completion_instructions_isSet = true;
}

bool OAIExportCdashigScenarioVariablesRow::is_case_report_form_completion_instructions_Set() const{
    return m_case_report_form_completion_instructions_isSet;
}

bool OAIExportCdashigScenarioVariablesRow::is_case_report_form_completion_instructions_Valid() const{
    return m_case_report_form_completion_instructions_isValid;
}

QList<QString> OAIExportCdashigScenarioVariablesRow::getSdtmigTarget() const {
    return m_sdtmig_target;
}
void OAIExportCdashigScenarioVariablesRow::setSdtmigTarget(const QList<QString> &sdtmig_target) {
    m_sdtmig_target = sdtmig_target;
    m_sdtmig_target_isSet = true;
}

bool OAIExportCdashigScenarioVariablesRow::is_sdtmig_target_Set() const{
    return m_sdtmig_target_isSet;
}

bool OAIExportCdashigScenarioVariablesRow::is_sdtmig_target_Valid() const{
    return m_sdtmig_target_isValid;
}

QString OAIExportCdashigScenarioVariablesRow::getMappingInstructions() const {
    return m_mapping_instructions;
}
void OAIExportCdashigScenarioVariablesRow::setMappingInstructions(const QString &mapping_instructions) {
    m_mapping_instructions = mapping_instructions;
    m_mapping_instructions_isSet = true;
}

bool OAIExportCdashigScenarioVariablesRow::is_mapping_instructions_Set() const{
    return m_mapping_instructions_isSet;
}

bool OAIExportCdashigScenarioVariablesRow::is_mapping_instructions_Valid() const{
    return m_mapping_instructions_isValid;
}

QString OAIExportCdashigScenarioVariablesRow::getControlledTerminologyCodelistName() const {
    return m_controlled_terminology_codelist_name;
}
void OAIExportCdashigScenarioVariablesRow::setControlledTerminologyCodelistName(const QString &controlled_terminology_codelist_name) {
    m_controlled_terminology_codelist_name = controlled_terminology_codelist_name;
    m_controlled_terminology_codelist_name_isSet = true;
}

bool OAIExportCdashigScenarioVariablesRow::is_controlled_terminology_codelist_name_Set() const{
    return m_controlled_terminology_codelist_name_isSet;
}

bool OAIExportCdashigScenarioVariablesRow::is_controlled_terminology_codelist_name_Valid() const{
    return m_controlled_terminology_codelist_name_isValid;
}

QString OAIExportCdashigScenarioVariablesRow::getImplementationNotes() const {
    return m_implementation_notes;
}
void OAIExportCdashigScenarioVariablesRow::setImplementationNotes(const QString &implementation_notes) {
    m_implementation_notes = implementation_notes;
    m_implementation_notes_isSet = true;
}

bool OAIExportCdashigScenarioVariablesRow::is_implementation_notes_Set() const{
    return m_implementation_notes_isSet;
}

bool OAIExportCdashigScenarioVariablesRow::is_implementation_notes_Valid() const{
    return m_implementation_notes_isValid;
}

bool OAIExportCdashigScenarioVariablesRow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_collection_scenario_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cdashig_variable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cdashig_variable_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_cdashig_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prompt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cdashig_core_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_case_report_form_completion_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdtmig_target.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapping_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_controlled_terminology_codelist_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_implementation_notes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportCdashigScenarioVariablesRow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI

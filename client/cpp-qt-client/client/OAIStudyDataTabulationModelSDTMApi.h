/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStudyDataTabulationModelSDTMApi_H
#define OAI_OAIStudyDataTabulationModelSDTMApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDefaultErrorResponse.h"
#include "OAIExportSdtmDatasetsTable.h"
#include "OAIExportSdtmVariablesTable.h"
#include "OAIExportSdtmWorkbook.h"
#include "OAIRootSdtmClassVariable.h"
#include "OAIRootSdtmDatasetVariable.h"
#include "OAISdtmClass.h"
#include "OAISdtmClassDatasets.h"
#include "OAISdtmClassVariable.h"
#include "OAISdtmClassVariables.h"
#include "OAISdtmClasses.h"
#include "OAISdtmDataset.h"
#include "OAISdtmDatasetVariable.h"
#include "OAISdtmDatasetVariables.h"
#include "OAISdtmDatasets.h"
#include "OAISdtmProduct.h"
#include "OAIXmlRootSdtmClassVariable.h"
#include "OAIXmlRootSdtmDatasetVariable.h"
#include "OAIXmlSdtmClass.h"
#include "OAIXmlSdtmClassDatasets.h"
#include "OAIXmlSdtmClassVariable.h"
#include "OAIXmlSdtmClassVariables.h"
#include "OAIXmlSdtmClasses.h"
#include "OAIXmlSdtmDataset.h"
#include "OAIXmlSdtmDatasetVariable.h"
#include "OAIXmlSdtmDatasetVariables.h"
#include "OAIXmlSdtmDatasets.h"
#include "OAIXmlSdtmProduct.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStudyDataTabulationModelSDTMApi : public QObject {
    Q_OBJECT

public:
    OAIStudyDataTabulationModelSDTMApi(const int timeOut = 0);
    ~OAIStudyDataTabulationModelSDTMApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  r_class QString [required]
    * @param[in]  var QString [required]
    */
    virtual void mdrRootSdtmClassesClassVariablesVarGet(const QString &r_class, const QString &var);

    /**
    * @param[in]  dataset QString [required]
    * @param[in]  var QString [required]
    */
    virtual void mdrRootSdtmDatasetsDatasetVariablesVarGet(const QString &dataset, const QString &var);

    /**
    * @param[in]  version QString [required]
    * @param[in]  r_class QString [required]
    */
    virtual void mdrSdtmVersionClassesClassDatasetsGet(const QString &version, const QString &r_class);

    /**
    * @param[in]  version QString [required]
    * @param[in]  r_class QString [required]
    */
    virtual void mdrSdtmVersionClassesClassGet(const QString &version, const QString &r_class);

    /**
    * @param[in]  version QString [required]
    * @param[in]  r_class QString [required]
    */
    virtual void mdrSdtmVersionClassesClassVariablesGet(const QString &version, const QString &r_class);

    /**
    * @param[in]  version QString [required]
    * @param[in]  r_class QString [required]
    * @param[in]  var QString [required]
    */
    virtual void mdrSdtmVersionClassesClassVariablesVarGet(const QString &version, const QString &r_class, const QString &var);

    /**
    * @param[in]  version QString [required]
    */
    virtual void mdrSdtmVersionClassesGet(const QString &version);

    /**
    * @param[in]  version QString [required]
    * @param[in]  dataset QString [required]
    */
    virtual void mdrSdtmVersionDatasetsDatasetGet(const QString &version, const QString &dataset);

    /**
    * @param[in]  version QString [required]
    * @param[in]  dataset QString [required]
    */
    virtual void mdrSdtmVersionDatasetsDatasetVariablesGet(const QString &version, const QString &dataset);

    /**
    * @param[in]  version QString [required]
    * @param[in]  dataset QString [required]
    * @param[in]  var QString [required]
    */
    virtual void mdrSdtmVersionDatasetsDatasetVariablesVarGet(const QString &version, const QString &dataset, const QString &var);

    /**
    * @param[in]  version QString [required]
    */
    virtual void mdrSdtmVersionDatasetsGet(const QString &version);

    /**
    * @param[in]  version QString [required]
    */
    virtual void mdrSdtmVersionGet(const QString &version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void mdrRootSdtmClassesClassVariablesVarGetCallback(OAIHttpRequestWorker *worker);
    void mdrRootSdtmDatasetsDatasetVariablesVarGetCallback(OAIHttpRequestWorker *worker);
    void mdrSdtmVersionClassesClassDatasetsGetCallback(OAIHttpRequestWorker *worker);
    void mdrSdtmVersionClassesClassGetCallback(OAIHttpRequestWorker *worker);
    void mdrSdtmVersionClassesClassVariablesGetCallback(OAIHttpRequestWorker *worker);
    void mdrSdtmVersionClassesClassVariablesVarGetCallback(OAIHttpRequestWorker *worker);
    void mdrSdtmVersionClassesGetCallback(OAIHttpRequestWorker *worker);
    void mdrSdtmVersionDatasetsDatasetGetCallback(OAIHttpRequestWorker *worker);
    void mdrSdtmVersionDatasetsDatasetVariablesGetCallback(OAIHttpRequestWorker *worker);
    void mdrSdtmVersionDatasetsDatasetVariablesVarGetCallback(OAIHttpRequestWorker *worker);
    void mdrSdtmVersionDatasetsGetCallback(OAIHttpRequestWorker *worker);
    void mdrSdtmVersionGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void mdrRootSdtmClassesClassVariablesVarGetSignal(OAIRootSdtmClassVariable summary);
    void mdrRootSdtmDatasetsDatasetVariablesVarGetSignal(OAIRootSdtmDatasetVariable summary);
    void mdrSdtmVersionClassesClassDatasetsGetSignal(OAISdtmClassDatasets summary);
    void mdrSdtmVersionClassesClassGetSignal(OAISdtmClass summary);
    void mdrSdtmVersionClassesClassVariablesGetSignal(OAISdtmClassVariables summary);
    void mdrSdtmVersionClassesClassVariablesVarGetSignal(OAISdtmClassVariable summary);
    void mdrSdtmVersionClassesGetSignal(OAISdtmClasses summary);
    void mdrSdtmVersionDatasetsDatasetGetSignal(OAISdtmDataset summary);
    void mdrSdtmVersionDatasetsDatasetVariablesGetSignal(OAISdtmDatasetVariables summary);
    void mdrSdtmVersionDatasetsDatasetVariablesVarGetSignal(OAISdtmDatasetVariable summary);
    void mdrSdtmVersionDatasetsGetSignal(OAISdtmDatasets summary);
    void mdrSdtmVersionGetSignal(OAISdtmProduct summary);


    void mdrRootSdtmClassesClassVariablesVarGetSignalFull(OAIHttpRequestWorker *worker, OAIRootSdtmClassVariable summary);
    void mdrRootSdtmDatasetsDatasetVariablesVarGetSignalFull(OAIHttpRequestWorker *worker, OAIRootSdtmDatasetVariable summary);
    void mdrSdtmVersionClassesClassDatasetsGetSignalFull(OAIHttpRequestWorker *worker, OAISdtmClassDatasets summary);
    void mdrSdtmVersionClassesClassGetSignalFull(OAIHttpRequestWorker *worker, OAISdtmClass summary);
    void mdrSdtmVersionClassesClassVariablesGetSignalFull(OAIHttpRequestWorker *worker, OAISdtmClassVariables summary);
    void mdrSdtmVersionClassesClassVariablesVarGetSignalFull(OAIHttpRequestWorker *worker, OAISdtmClassVariable summary);
    void mdrSdtmVersionClassesGetSignalFull(OAIHttpRequestWorker *worker, OAISdtmClasses summary);
    void mdrSdtmVersionDatasetsDatasetGetSignalFull(OAIHttpRequestWorker *worker, OAISdtmDataset summary);
    void mdrSdtmVersionDatasetsDatasetVariablesGetSignalFull(OAIHttpRequestWorker *worker, OAISdtmDatasetVariables summary);
    void mdrSdtmVersionDatasetsDatasetVariablesVarGetSignalFull(OAIHttpRequestWorker *worker, OAISdtmDatasetVariable summary);
    void mdrSdtmVersionDatasetsGetSignalFull(OAIHttpRequestWorker *worker, OAISdtmDatasets summary);
    void mdrSdtmVersionGetSignalFull(OAIHttpRequestWorker *worker, OAISdtmProduct summary);

    Q_DECL_DEPRECATED_X("Use mdrRootSdtmClassesClassVariablesVarGetSignalError() instead")
    void mdrRootSdtmClassesClassVariablesVarGetSignalE(OAIRootSdtmClassVariable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrRootSdtmClassesClassVariablesVarGetSignalError(OAIRootSdtmClassVariable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrRootSdtmDatasetsDatasetVariablesVarGetSignalError() instead")
    void mdrRootSdtmDatasetsDatasetVariablesVarGetSignalE(OAIRootSdtmDatasetVariable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrRootSdtmDatasetsDatasetVariablesVarGetSignalError(OAIRootSdtmDatasetVariable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmVersionClassesClassDatasetsGetSignalError() instead")
    void mdrSdtmVersionClassesClassDatasetsGetSignalE(OAISdtmClassDatasets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmVersionClassesClassDatasetsGetSignalError(OAISdtmClassDatasets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmVersionClassesClassGetSignalError() instead")
    void mdrSdtmVersionClassesClassGetSignalE(OAISdtmClass summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmVersionClassesClassGetSignalError(OAISdtmClass summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmVersionClassesClassVariablesGetSignalError() instead")
    void mdrSdtmVersionClassesClassVariablesGetSignalE(OAISdtmClassVariables summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmVersionClassesClassVariablesGetSignalError(OAISdtmClassVariables summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmVersionClassesClassVariablesVarGetSignalError() instead")
    void mdrSdtmVersionClassesClassVariablesVarGetSignalE(OAISdtmClassVariable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmVersionClassesClassVariablesVarGetSignalError(OAISdtmClassVariable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmVersionClassesGetSignalError() instead")
    void mdrSdtmVersionClassesGetSignalE(OAISdtmClasses summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmVersionClassesGetSignalError(OAISdtmClasses summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmVersionDatasetsDatasetGetSignalError() instead")
    void mdrSdtmVersionDatasetsDatasetGetSignalE(OAISdtmDataset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmVersionDatasetsDatasetGetSignalError(OAISdtmDataset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmVersionDatasetsDatasetVariablesGetSignalError() instead")
    void mdrSdtmVersionDatasetsDatasetVariablesGetSignalE(OAISdtmDatasetVariables summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmVersionDatasetsDatasetVariablesGetSignalError(OAISdtmDatasetVariables summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmVersionDatasetsDatasetVariablesVarGetSignalError() instead")
    void mdrSdtmVersionDatasetsDatasetVariablesVarGetSignalE(OAISdtmDatasetVariable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmVersionDatasetsDatasetVariablesVarGetSignalError(OAISdtmDatasetVariable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmVersionDatasetsGetSignalError() instead")
    void mdrSdtmVersionDatasetsGetSignalE(OAISdtmDatasets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmVersionDatasetsGetSignalError(OAISdtmDatasets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmVersionGetSignalError() instead")
    void mdrSdtmVersionGetSignalE(OAISdtmProduct summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmVersionGetSignalError(OAISdtmProduct summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use mdrRootSdtmClassesClassVariablesVarGetSignalErrorFull() instead")
    void mdrRootSdtmClassesClassVariablesVarGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrRootSdtmClassesClassVariablesVarGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrRootSdtmDatasetsDatasetVariablesVarGetSignalErrorFull() instead")
    void mdrRootSdtmDatasetsDatasetVariablesVarGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrRootSdtmDatasetsDatasetVariablesVarGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmVersionClassesClassDatasetsGetSignalErrorFull() instead")
    void mdrSdtmVersionClassesClassDatasetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmVersionClassesClassDatasetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmVersionClassesClassGetSignalErrorFull() instead")
    void mdrSdtmVersionClassesClassGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmVersionClassesClassGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmVersionClassesClassVariablesGetSignalErrorFull() instead")
    void mdrSdtmVersionClassesClassVariablesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmVersionClassesClassVariablesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmVersionClassesClassVariablesVarGetSignalErrorFull() instead")
    void mdrSdtmVersionClassesClassVariablesVarGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmVersionClassesClassVariablesVarGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmVersionClassesGetSignalErrorFull() instead")
    void mdrSdtmVersionClassesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmVersionClassesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmVersionDatasetsDatasetGetSignalErrorFull() instead")
    void mdrSdtmVersionDatasetsDatasetGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmVersionDatasetsDatasetGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmVersionDatasetsDatasetVariablesGetSignalErrorFull() instead")
    void mdrSdtmVersionDatasetsDatasetVariablesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmVersionDatasetsDatasetVariablesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmVersionDatasetsDatasetVariablesVarGetSignalErrorFull() instead")
    void mdrSdtmVersionDatasetsDatasetVariablesVarGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmVersionDatasetsDatasetVariablesVarGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmVersionDatasetsGetSignalErrorFull() instead")
    void mdrSdtmVersionDatasetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmVersionDatasetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSdtmVersionGetSignalErrorFull() instead")
    void mdrSdtmVersionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSdtmVersionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif

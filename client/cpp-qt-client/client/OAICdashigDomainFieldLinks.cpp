/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICdashigDomainFieldLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICdashigDomainFieldLinks::OAICdashigDomainFieldLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICdashigDomainFieldLinks::OAICdashigDomainFieldLinks() {
    this->initializeModel();
}

OAICdashigDomainFieldLinks::~OAICdashigDomainFieldLinks() {}

void OAICdashigDomainFieldLinks::initializeModel() {

    m_self_isSet = false;
    m_self_isValid = false;

    m_codelist_isSet = false;
    m_codelist_isValid = false;

    m_parent_product_isSet = false;
    m_parent_product_isValid = false;

    m_parent_domain_isSet = false;
    m_parent_domain_isValid = false;

    m_root_item_isSet = false;
    m_root_item_isValid = false;

    m_prior_version_isSet = false;
    m_prior_version_isValid = false;

    m_sdtm_class_mapping_targets_isSet = false;
    m_sdtm_class_mapping_targets_isValid = false;

    m_sdtmig_dataset_mapping_targets_isSet = false;
    m_sdtmig_dataset_mapping_targets_isValid = false;
}

void OAICdashigDomainFieldLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICdashigDomainFieldLinks::fromJsonObject(QJsonObject json) {

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_codelist_isValid = ::OpenAPI::fromJsonValue(m_codelist, json[QString("codelist")]);
    m_codelist_isSet = !json[QString("codelist")].isNull() && m_codelist_isValid;

    m_parent_product_isValid = ::OpenAPI::fromJsonValue(m_parent_product, json[QString("parentProduct")]);
    m_parent_product_isSet = !json[QString("parentProduct")].isNull() && m_parent_product_isValid;

    m_parent_domain_isValid = ::OpenAPI::fromJsonValue(m_parent_domain, json[QString("parentDomain")]);
    m_parent_domain_isSet = !json[QString("parentDomain")].isNull() && m_parent_domain_isValid;

    m_root_item_isValid = ::OpenAPI::fromJsonValue(m_root_item, json[QString("rootItem")]);
    m_root_item_isSet = !json[QString("rootItem")].isNull() && m_root_item_isValid;

    m_prior_version_isValid = ::OpenAPI::fromJsonValue(m_prior_version, json[QString("priorVersion")]);
    m_prior_version_isSet = !json[QString("priorVersion")].isNull() && m_prior_version_isValid;

    m_sdtm_class_mapping_targets_isValid = ::OpenAPI::fromJsonValue(m_sdtm_class_mapping_targets, json[QString("sdtmClassMappingTargets")]);
    m_sdtm_class_mapping_targets_isSet = !json[QString("sdtmClassMappingTargets")].isNull() && m_sdtm_class_mapping_targets_isValid;

    m_sdtmig_dataset_mapping_targets_isValid = ::OpenAPI::fromJsonValue(m_sdtmig_dataset_mapping_targets, json[QString("sdtmigDatasetMappingTargets")]);
    m_sdtmig_dataset_mapping_targets_isSet = !json[QString("sdtmigDatasetMappingTargets")].isNull() && m_sdtmig_dataset_mapping_targets_isValid;
}

QString OAICdashigDomainFieldLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICdashigDomainFieldLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_codelist.size() > 0) {
        obj.insert(QString("codelist"), ::OpenAPI::toJsonValue(m_codelist));
    }
    if (m_parent_product.isSet()) {
        obj.insert(QString("parentProduct"), ::OpenAPI::toJsonValue(m_parent_product));
    }
    if (m_parent_domain.isSet()) {
        obj.insert(QString("parentDomain"), ::OpenAPI::toJsonValue(m_parent_domain));
    }
    if (m_root_item.isSet()) {
        obj.insert(QString("rootItem"), ::OpenAPI::toJsonValue(m_root_item));
    }
    if (m_prior_version.isSet()) {
        obj.insert(QString("priorVersion"), ::OpenAPI::toJsonValue(m_prior_version));
    }
    if (m_sdtm_class_mapping_targets.size() > 0) {
        obj.insert(QString("sdtmClassMappingTargets"), ::OpenAPI::toJsonValue(m_sdtm_class_mapping_targets));
    }
    if (m_sdtmig_dataset_mapping_targets.size() > 0) {
        obj.insert(QString("sdtmigDatasetMappingTargets"), ::OpenAPI::toJsonValue(m_sdtmig_dataset_mapping_targets));
    }
    return obj;
}

OAICdashigDomainFieldRef OAICdashigDomainFieldLinks::getSelf() const {
    return m_self;
}
void OAICdashigDomainFieldLinks::setSelf(const OAICdashigDomainFieldRef &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAICdashigDomainFieldLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAICdashigDomainFieldLinks::is_self_Valid() const{
    return m_self_isValid;
}

QList<OAIRootCtCodelistRefElement> OAICdashigDomainFieldLinks::getCodelist() const {
    return m_codelist;
}
void OAICdashigDomainFieldLinks::setCodelist(const QList<OAIRootCtCodelistRefElement> &codelist) {
    m_codelist = codelist;
    m_codelist_isSet = true;
}

bool OAICdashigDomainFieldLinks::is_codelist_Set() const{
    return m_codelist_isSet;
}

bool OAICdashigDomainFieldLinks::is_codelist_Valid() const{
    return m_codelist_isValid;
}

OAICdashigProductRef OAICdashigDomainFieldLinks::getParentProduct() const {
    return m_parent_product;
}
void OAICdashigDomainFieldLinks::setParentProduct(const OAICdashigProductRef &parent_product) {
    m_parent_product = parent_product;
    m_parent_product_isSet = true;
}

bool OAICdashigDomainFieldLinks::is_parent_product_Set() const{
    return m_parent_product_isSet;
}

bool OAICdashigDomainFieldLinks::is_parent_product_Valid() const{
    return m_parent_product_isValid;
}

OAICdashigDomainRef OAICdashigDomainFieldLinks::getParentDomain() const {
    return m_parent_domain;
}
void OAICdashigDomainFieldLinks::setParentDomain(const OAICdashigDomainRef &parent_domain) {
    m_parent_domain = parent_domain;
    m_parent_domain_isSet = true;
}

bool OAICdashigDomainFieldLinks::is_parent_domain_Set() const{
    return m_parent_domain_isSet;
}

bool OAICdashigDomainFieldLinks::is_parent_domain_Valid() const{
    return m_parent_domain_isValid;
}

OAIRootCdashigDomainFieldRef OAICdashigDomainFieldLinks::getRootItem() const {
    return m_root_item;
}
void OAICdashigDomainFieldLinks::setRootItem(const OAIRootCdashigDomainFieldRef &root_item) {
    m_root_item = root_item;
    m_root_item_isSet = true;
}

bool OAICdashigDomainFieldLinks::is_root_item_Set() const{
    return m_root_item_isSet;
}

bool OAICdashigDomainFieldLinks::is_root_item_Valid() const{
    return m_root_item_isValid;
}

OAICdashigDomainFieldRef OAICdashigDomainFieldLinks::getPriorVersion() const {
    return m_prior_version;
}
void OAICdashigDomainFieldLinks::setPriorVersion(const OAICdashigDomainFieldRef &prior_version) {
    m_prior_version = prior_version;
    m_prior_version_isSet = true;
}

bool OAICdashigDomainFieldLinks::is_prior_version_Set() const{
    return m_prior_version_isSet;
}

bool OAICdashigDomainFieldLinks::is_prior_version_Valid() const{
    return m_prior_version_isValid;
}

QList<OAISdtmClassVariableRefTarget> OAICdashigDomainFieldLinks::getSdtmClassMappingTargets() const {
    return m_sdtm_class_mapping_targets;
}
void OAICdashigDomainFieldLinks::setSdtmClassMappingTargets(const QList<OAISdtmClassVariableRefTarget> &sdtm_class_mapping_targets) {
    m_sdtm_class_mapping_targets = sdtm_class_mapping_targets;
    m_sdtm_class_mapping_targets_isSet = true;
}

bool OAICdashigDomainFieldLinks::is_sdtm_class_mapping_targets_Set() const{
    return m_sdtm_class_mapping_targets_isSet;
}

bool OAICdashigDomainFieldLinks::is_sdtm_class_mapping_targets_Valid() const{
    return m_sdtm_class_mapping_targets_isValid;
}

QList<OAISdtmigDatasetVariableRefTarget> OAICdashigDomainFieldLinks::getSdtmigDatasetMappingTargets() const {
    return m_sdtmig_dataset_mapping_targets;
}
void OAICdashigDomainFieldLinks::setSdtmigDatasetMappingTargets(const QList<OAISdtmigDatasetVariableRefTarget> &sdtmig_dataset_mapping_targets) {
    m_sdtmig_dataset_mapping_targets = sdtmig_dataset_mapping_targets;
    m_sdtmig_dataset_mapping_targets_isSet = true;
}

bool OAICdashigDomainFieldLinks::is_sdtmig_dataset_mapping_targets_Set() const{
    return m_sdtmig_dataset_mapping_targets_isSet;
}

bool OAICdashigDomainFieldLinks::is_sdtmig_dataset_mapping_targets_Valid() const{
    return m_sdtmig_dataset_mapping_targets_isValid;
}

bool OAICdashigDomainFieldLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_codelist.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_domain.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prior_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdtm_class_mapping_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdtmig_dataset_mapping_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICdashigDomainFieldLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI

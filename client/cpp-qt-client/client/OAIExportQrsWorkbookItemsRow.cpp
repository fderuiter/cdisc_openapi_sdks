/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportQrsWorkbookItemsRow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportQrsWorkbookItemsRow::OAIExportQrsWorkbookItemsRow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportQrsWorkbookItemsRow::OAIExportQrsWorkbookItemsRow() {
    this->initializeModel();
}

OAIExportQrsWorkbookItemsRow::~OAIExportQrsWorkbookItemsRow() {}

void OAIExportQrsWorkbookItemsRow::initializeModel() {

    m_item_sequence_isSet = false;
    m_item_sequence_isValid = false;

    m_test_name_isSet = false;
    m_test_name_isValid = false;

    m_item_text_isSet = false;
    m_item_text_isValid = false;

    m_tests_codelist_c_code_isSet = false;
    m_tests_codelist_c_code_isValid = false;

    m_tests_term_c_code_isSet = false;
    m_tests_term_c_code_isValid = false;

    m_test_codes_codelist_c_code_isSet = false;
    m_test_codes_codelist_c_code_isValid = false;

    m_test_codes_term_c_code_isSet = false;
    m_test_codes_term_c_code_isValid = false;

    m_subcategorys_codelist_c_code_isSet = false;
    m_subcategorys_codelist_c_code_isValid = false;

    m_subcategorys_term_c_code_isSet = false;
    m_subcategorys_term_c_code_isValid = false;

    m_evaluators_codelist_c_code_isSet = false;
    m_evaluators_codelist_c_code_isValid = false;

    m_evaluators_term_c_code_isSet = false;
    m_evaluators_term_c_code_isValid = false;

    m_free_form_responses_datatype_isSet = false;
    m_free_form_responses_datatype_isValid = false;

    m_response_group_isSet = false;
    m_response_group_isValid = false;
}

void OAIExportQrsWorkbookItemsRow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportQrsWorkbookItemsRow::fromJsonObject(QJsonObject json) {

    m_item_sequence_isValid = ::OpenAPI::fromJsonValue(m_item_sequence, json[QString("Item Sequence")]);
    m_item_sequence_isSet = !json[QString("Item Sequence")].isNull() && m_item_sequence_isValid;

    m_test_name_isValid = ::OpenAPI::fromJsonValue(m_test_name, json[QString("Test Name")]);
    m_test_name_isSet = !json[QString("Test Name")].isNull() && m_test_name_isValid;

    m_item_text_isValid = ::OpenAPI::fromJsonValue(m_item_text, json[QString("Item Text")]);
    m_item_text_isSet = !json[QString("Item Text")].isNull() && m_item_text_isValid;

    m_tests_codelist_c_code_isValid = ::OpenAPI::fromJsonValue(m_tests_codelist_c_code, json[QString("Test&#39;s Codelist C-Code")]);
    m_tests_codelist_c_code_isSet = !json[QString("Test&#39;s Codelist C-Code")].isNull() && m_tests_codelist_c_code_isValid;

    m_tests_term_c_code_isValid = ::OpenAPI::fromJsonValue(m_tests_term_c_code, json[QString("Test&#39;s Term C-Code")]);
    m_tests_term_c_code_isSet = !json[QString("Test&#39;s Term C-Code")].isNull() && m_tests_term_c_code_isValid;

    m_test_codes_codelist_c_code_isValid = ::OpenAPI::fromJsonValue(m_test_codes_codelist_c_code, json[QString("Test Code&#39;s Codelist C-Code")]);
    m_test_codes_codelist_c_code_isSet = !json[QString("Test Code&#39;s Codelist C-Code")].isNull() && m_test_codes_codelist_c_code_isValid;

    m_test_codes_term_c_code_isValid = ::OpenAPI::fromJsonValue(m_test_codes_term_c_code, json[QString("Test Code&#39;s Term C-Code")]);
    m_test_codes_term_c_code_isSet = !json[QString("Test Code&#39;s Term C-Code")].isNull() && m_test_codes_term_c_code_isValid;

    m_subcategorys_codelist_c_code_isValid = ::OpenAPI::fromJsonValue(m_subcategorys_codelist_c_code, json[QString("Subcategory&#39;s Codelist C-Code")]);
    m_subcategorys_codelist_c_code_isSet = !json[QString("Subcategory&#39;s Codelist C-Code")].isNull() && m_subcategorys_codelist_c_code_isValid;

    m_subcategorys_term_c_code_isValid = ::OpenAPI::fromJsonValue(m_subcategorys_term_c_code, json[QString("Subcategory&#39;s Term C-Code")]);
    m_subcategorys_term_c_code_isSet = !json[QString("Subcategory&#39;s Term C-Code")].isNull() && m_subcategorys_term_c_code_isValid;

    m_evaluators_codelist_c_code_isValid = ::OpenAPI::fromJsonValue(m_evaluators_codelist_c_code, json[QString("Evaluator&#39;s Codelist C-Code")]);
    m_evaluators_codelist_c_code_isSet = !json[QString("Evaluator&#39;s Codelist C-Code")].isNull() && m_evaluators_codelist_c_code_isValid;

    m_evaluators_term_c_code_isValid = ::OpenAPI::fromJsonValue(m_evaluators_term_c_code, json[QString("Evaluator&#39;s Term C-Code")]);
    m_evaluators_term_c_code_isSet = !json[QString("Evaluator&#39;s Term C-Code")].isNull() && m_evaluators_term_c_code_isValid;

    m_free_form_responses_datatype_isValid = ::OpenAPI::fromJsonValue(m_free_form_responses_datatype, json[QString("Free-form Response&#39;s Datatype")]);
    m_free_form_responses_datatype_isSet = !json[QString("Free-form Response&#39;s Datatype")].isNull() && m_free_form_responses_datatype_isValid;

    m_response_group_isValid = ::OpenAPI::fromJsonValue(m_response_group, json[QString("Response Group")]);
    m_response_group_isSet = !json[QString("Response Group")].isNull() && m_response_group_isValid;
}

QString OAIExportQrsWorkbookItemsRow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportQrsWorkbookItemsRow::asJsonObject() const {
    QJsonObject obj;
    if (m_item_sequence_isSet) {
        obj.insert(QString("Item Sequence"), ::OpenAPI::toJsonValue(m_item_sequence));
    }
    if (m_test_name_isSet) {
        obj.insert(QString("Test Name"), ::OpenAPI::toJsonValue(m_test_name));
    }
    if (m_item_text_isSet) {
        obj.insert(QString("Item Text"), ::OpenAPI::toJsonValue(m_item_text));
    }
    if (m_tests_codelist_c_code_isSet) {
        obj.insert(QString("Test&#39;s Codelist C-Code"), ::OpenAPI::toJsonValue(m_tests_codelist_c_code));
    }
    if (m_tests_term_c_code_isSet) {
        obj.insert(QString("Test&#39;s Term C-Code"), ::OpenAPI::toJsonValue(m_tests_term_c_code));
    }
    if (m_test_codes_codelist_c_code_isSet) {
        obj.insert(QString("Test Code&#39;s Codelist C-Code"), ::OpenAPI::toJsonValue(m_test_codes_codelist_c_code));
    }
    if (m_test_codes_term_c_code_isSet) {
        obj.insert(QString("Test Code&#39;s Term C-Code"), ::OpenAPI::toJsonValue(m_test_codes_term_c_code));
    }
    if (m_subcategorys_codelist_c_code_isSet) {
        obj.insert(QString("Subcategory&#39;s Codelist C-Code"), ::OpenAPI::toJsonValue(m_subcategorys_codelist_c_code));
    }
    if (m_subcategorys_term_c_code_isSet) {
        obj.insert(QString("Subcategory&#39;s Term C-Code"), ::OpenAPI::toJsonValue(m_subcategorys_term_c_code));
    }
    if (m_evaluators_codelist_c_code_isSet) {
        obj.insert(QString("Evaluator&#39;s Codelist C-Code"), ::OpenAPI::toJsonValue(m_evaluators_codelist_c_code));
    }
    if (m_evaluators_term_c_code_isSet) {
        obj.insert(QString("Evaluator&#39;s Term C-Code"), ::OpenAPI::toJsonValue(m_evaluators_term_c_code));
    }
    if (m_free_form_responses_datatype_isSet) {
        obj.insert(QString("Free-form Response&#39;s Datatype"), ::OpenAPI::toJsonValue(m_free_form_responses_datatype));
    }
    if (m_response_group_isSet) {
        obj.insert(QString("Response Group"), ::OpenAPI::toJsonValue(m_response_group));
    }
    return obj;
}

QString OAIExportQrsWorkbookItemsRow::getItemSequence() const {
    return m_item_sequence;
}
void OAIExportQrsWorkbookItemsRow::setItemSequence(const QString &item_sequence) {
    m_item_sequence = item_sequence;
    m_item_sequence_isSet = true;
}

bool OAIExportQrsWorkbookItemsRow::is_item_sequence_Set() const{
    return m_item_sequence_isSet;
}

bool OAIExportQrsWorkbookItemsRow::is_item_sequence_Valid() const{
    return m_item_sequence_isValid;
}

QString OAIExportQrsWorkbookItemsRow::getTestName() const {
    return m_test_name;
}
void OAIExportQrsWorkbookItemsRow::setTestName(const QString &test_name) {
    m_test_name = test_name;
    m_test_name_isSet = true;
}

bool OAIExportQrsWorkbookItemsRow::is_test_name_Set() const{
    return m_test_name_isSet;
}

bool OAIExportQrsWorkbookItemsRow::is_test_name_Valid() const{
    return m_test_name_isValid;
}

QString OAIExportQrsWorkbookItemsRow::getItemText() const {
    return m_item_text;
}
void OAIExportQrsWorkbookItemsRow::setItemText(const QString &item_text) {
    m_item_text = item_text;
    m_item_text_isSet = true;
}

bool OAIExportQrsWorkbookItemsRow::is_item_text_Set() const{
    return m_item_text_isSet;
}

bool OAIExportQrsWorkbookItemsRow::is_item_text_Valid() const{
    return m_item_text_isValid;
}

QString OAIExportQrsWorkbookItemsRow::getTestsCodelistCCode() const {
    return m_tests_codelist_c_code;
}
void OAIExportQrsWorkbookItemsRow::setTestsCodelistCCode(const QString &tests_codelist_c_code) {
    m_tests_codelist_c_code = tests_codelist_c_code;
    m_tests_codelist_c_code_isSet = true;
}

bool OAIExportQrsWorkbookItemsRow::is_tests_codelist_c_code_Set() const{
    return m_tests_codelist_c_code_isSet;
}

bool OAIExportQrsWorkbookItemsRow::is_tests_codelist_c_code_Valid() const{
    return m_tests_codelist_c_code_isValid;
}

QString OAIExportQrsWorkbookItemsRow::getTestsTermCCode() const {
    return m_tests_term_c_code;
}
void OAIExportQrsWorkbookItemsRow::setTestsTermCCode(const QString &tests_term_c_code) {
    m_tests_term_c_code = tests_term_c_code;
    m_tests_term_c_code_isSet = true;
}

bool OAIExportQrsWorkbookItemsRow::is_tests_term_c_code_Set() const{
    return m_tests_term_c_code_isSet;
}

bool OAIExportQrsWorkbookItemsRow::is_tests_term_c_code_Valid() const{
    return m_tests_term_c_code_isValid;
}

QString OAIExportQrsWorkbookItemsRow::getTestCodesCodelistCCode() const {
    return m_test_codes_codelist_c_code;
}
void OAIExportQrsWorkbookItemsRow::setTestCodesCodelistCCode(const QString &test_codes_codelist_c_code) {
    m_test_codes_codelist_c_code = test_codes_codelist_c_code;
    m_test_codes_codelist_c_code_isSet = true;
}

bool OAIExportQrsWorkbookItemsRow::is_test_codes_codelist_c_code_Set() const{
    return m_test_codes_codelist_c_code_isSet;
}

bool OAIExportQrsWorkbookItemsRow::is_test_codes_codelist_c_code_Valid() const{
    return m_test_codes_codelist_c_code_isValid;
}

QString OAIExportQrsWorkbookItemsRow::getTestCodesTermCCode() const {
    return m_test_codes_term_c_code;
}
void OAIExportQrsWorkbookItemsRow::setTestCodesTermCCode(const QString &test_codes_term_c_code) {
    m_test_codes_term_c_code = test_codes_term_c_code;
    m_test_codes_term_c_code_isSet = true;
}

bool OAIExportQrsWorkbookItemsRow::is_test_codes_term_c_code_Set() const{
    return m_test_codes_term_c_code_isSet;
}

bool OAIExportQrsWorkbookItemsRow::is_test_codes_term_c_code_Valid() const{
    return m_test_codes_term_c_code_isValid;
}

QString OAIExportQrsWorkbookItemsRow::getSubcategorysCodelistCCode() const {
    return m_subcategorys_codelist_c_code;
}
void OAIExportQrsWorkbookItemsRow::setSubcategorysCodelistCCode(const QString &subcategorys_codelist_c_code) {
    m_subcategorys_codelist_c_code = subcategorys_codelist_c_code;
    m_subcategorys_codelist_c_code_isSet = true;
}

bool OAIExportQrsWorkbookItemsRow::is_subcategorys_codelist_c_code_Set() const{
    return m_subcategorys_codelist_c_code_isSet;
}

bool OAIExportQrsWorkbookItemsRow::is_subcategorys_codelist_c_code_Valid() const{
    return m_subcategorys_codelist_c_code_isValid;
}

QString OAIExportQrsWorkbookItemsRow::getSubcategorysTermCCode() const {
    return m_subcategorys_term_c_code;
}
void OAIExportQrsWorkbookItemsRow::setSubcategorysTermCCode(const QString &subcategorys_term_c_code) {
    m_subcategorys_term_c_code = subcategorys_term_c_code;
    m_subcategorys_term_c_code_isSet = true;
}

bool OAIExportQrsWorkbookItemsRow::is_subcategorys_term_c_code_Set() const{
    return m_subcategorys_term_c_code_isSet;
}

bool OAIExportQrsWorkbookItemsRow::is_subcategorys_term_c_code_Valid() const{
    return m_subcategorys_term_c_code_isValid;
}

QString OAIExportQrsWorkbookItemsRow::getEvaluatorsCodelistCCode() const {
    return m_evaluators_codelist_c_code;
}
void OAIExportQrsWorkbookItemsRow::setEvaluatorsCodelistCCode(const QString &evaluators_codelist_c_code) {
    m_evaluators_codelist_c_code = evaluators_codelist_c_code;
    m_evaluators_codelist_c_code_isSet = true;
}

bool OAIExportQrsWorkbookItemsRow::is_evaluators_codelist_c_code_Set() const{
    return m_evaluators_codelist_c_code_isSet;
}

bool OAIExportQrsWorkbookItemsRow::is_evaluators_codelist_c_code_Valid() const{
    return m_evaluators_codelist_c_code_isValid;
}

QString OAIExportQrsWorkbookItemsRow::getEvaluatorsTermCCode() const {
    return m_evaluators_term_c_code;
}
void OAIExportQrsWorkbookItemsRow::setEvaluatorsTermCCode(const QString &evaluators_term_c_code) {
    m_evaluators_term_c_code = evaluators_term_c_code;
    m_evaluators_term_c_code_isSet = true;
}

bool OAIExportQrsWorkbookItemsRow::is_evaluators_term_c_code_Set() const{
    return m_evaluators_term_c_code_isSet;
}

bool OAIExportQrsWorkbookItemsRow::is_evaluators_term_c_code_Valid() const{
    return m_evaluators_term_c_code_isValid;
}

QString OAIExportQrsWorkbookItemsRow::getFreeFormResponsesDatatype() const {
    return m_free_form_responses_datatype;
}
void OAIExportQrsWorkbookItemsRow::setFreeFormResponsesDatatype(const QString &free_form_responses_datatype) {
    m_free_form_responses_datatype = free_form_responses_datatype;
    m_free_form_responses_datatype_isSet = true;
}

bool OAIExportQrsWorkbookItemsRow::is_free_form_responses_datatype_Set() const{
    return m_free_form_responses_datatype_isSet;
}

bool OAIExportQrsWorkbookItemsRow::is_free_form_responses_datatype_Valid() const{
    return m_free_form_responses_datatype_isValid;
}

QString OAIExportQrsWorkbookItemsRow::getResponseGroup() const {
    return m_response_group;
}
void OAIExportQrsWorkbookItemsRow::setResponseGroup(const QString &response_group) {
    m_response_group = response_group;
    m_response_group_isSet = true;
}

bool OAIExportQrsWorkbookItemsRow::is_response_group_Set() const{
    return m_response_group_isSet;
}

bool OAIExportQrsWorkbookItemsRow::is_response_group_Valid() const{
    return m_response_group_isValid;
}

bool OAIExportQrsWorkbookItemsRow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tests_codelist_c_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tests_term_c_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_codes_codelist_c_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_codes_term_c_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subcategorys_codelist_c_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subcategorys_term_c_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluators_codelist_c_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluators_term_c_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_form_responses_datatype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_group_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportQrsWorkbookItemsRow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI

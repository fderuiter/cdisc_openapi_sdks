/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAbout.h"
#include "OAIDefaultErrorResponse.h"
#include "OAILastupdated.h"
#include "OAIProductgroupDataAnalysis.h"
#include "OAIProductgroupDataCollection.h"
#include "OAIProductgroupDataTabulation.h"
#include "OAIProductgroupQrs.h"
#include "OAIProductgroupTerminology.h"
#include "OAIProducts.h"
#include "OAIXmlAbout.h"
#include "OAIXmlLastupdated.h"
#include "OAIXmlProductgroupDataAnalysis.h"
#include "OAIXmlProductgroupDataCollection.h"
#include "OAIXmlProductgroupDataTabulation.h"
#include "OAIXmlProductgroupTerminology.h"
#include "OAIXmlProducts.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void mdrAboutGet();


    virtual void mdrLastupdatedGet();


    virtual void mdrProductsDataAnalysisGet();


    virtual void mdrProductsDataCollectionGet();


    virtual void mdrProductsDataTabulationGet();


    virtual void mdrProductsGet();


    virtual void mdrProductsMeasuresGet();


    virtual void mdrProductsTerminologyGet();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void mdrAboutGetCallback(OAIHttpRequestWorker *worker);
    void mdrLastupdatedGetCallback(OAIHttpRequestWorker *worker);
    void mdrProductsDataAnalysisGetCallback(OAIHttpRequestWorker *worker);
    void mdrProductsDataCollectionGetCallback(OAIHttpRequestWorker *worker);
    void mdrProductsDataTabulationGetCallback(OAIHttpRequestWorker *worker);
    void mdrProductsGetCallback(OAIHttpRequestWorker *worker);
    void mdrProductsMeasuresGetCallback(OAIHttpRequestWorker *worker);
    void mdrProductsTerminologyGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void mdrAboutGetSignal(OAIAbout summary);
    void mdrLastupdatedGetSignal(OAILastupdated summary);
    void mdrProductsDataAnalysisGetSignal(OAIProductgroupDataAnalysis summary);
    void mdrProductsDataCollectionGetSignal(OAIProductgroupDataCollection summary);
    void mdrProductsDataTabulationGetSignal(OAIProductgroupDataTabulation summary);
    void mdrProductsGetSignal(OAIProducts summary);
    void mdrProductsMeasuresGetSignal(OAIProductgroupQrs summary);
    void mdrProductsTerminologyGetSignal(OAIProductgroupTerminology summary);


    void mdrAboutGetSignalFull(OAIHttpRequestWorker *worker, OAIAbout summary);
    void mdrLastupdatedGetSignalFull(OAIHttpRequestWorker *worker, OAILastupdated summary);
    void mdrProductsDataAnalysisGetSignalFull(OAIHttpRequestWorker *worker, OAIProductgroupDataAnalysis summary);
    void mdrProductsDataCollectionGetSignalFull(OAIHttpRequestWorker *worker, OAIProductgroupDataCollection summary);
    void mdrProductsDataTabulationGetSignalFull(OAIHttpRequestWorker *worker, OAIProductgroupDataTabulation summary);
    void mdrProductsGetSignalFull(OAIHttpRequestWorker *worker, OAIProducts summary);
    void mdrProductsMeasuresGetSignalFull(OAIHttpRequestWorker *worker, OAIProductgroupQrs summary);
    void mdrProductsTerminologyGetSignalFull(OAIHttpRequestWorker *worker, OAIProductgroupTerminology summary);

    Q_DECL_DEPRECATED_X("Use mdrAboutGetSignalError() instead")
    void mdrAboutGetSignalE(OAIAbout summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrAboutGetSignalError(OAIAbout summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrLastupdatedGetSignalError() instead")
    void mdrLastupdatedGetSignalE(OAILastupdated summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrLastupdatedGetSignalError(OAILastupdated summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrProductsDataAnalysisGetSignalError() instead")
    void mdrProductsDataAnalysisGetSignalE(OAIProductgroupDataAnalysis summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrProductsDataAnalysisGetSignalError(OAIProductgroupDataAnalysis summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrProductsDataCollectionGetSignalError() instead")
    void mdrProductsDataCollectionGetSignalE(OAIProductgroupDataCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrProductsDataCollectionGetSignalError(OAIProductgroupDataCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrProductsDataTabulationGetSignalError() instead")
    void mdrProductsDataTabulationGetSignalE(OAIProductgroupDataTabulation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrProductsDataTabulationGetSignalError(OAIProductgroupDataTabulation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrProductsGetSignalError() instead")
    void mdrProductsGetSignalE(OAIProducts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrProductsGetSignalError(OAIProducts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrProductsMeasuresGetSignalError() instead")
    void mdrProductsMeasuresGetSignalE(OAIProductgroupQrs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrProductsMeasuresGetSignalError(OAIProductgroupQrs summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrProductsTerminologyGetSignalError() instead")
    void mdrProductsTerminologyGetSignalE(OAIProductgroupTerminology summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrProductsTerminologyGetSignalError(OAIProductgroupTerminology summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use mdrAboutGetSignalErrorFull() instead")
    void mdrAboutGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrAboutGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrLastupdatedGetSignalErrorFull() instead")
    void mdrLastupdatedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrLastupdatedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrProductsDataAnalysisGetSignalErrorFull() instead")
    void mdrProductsDataAnalysisGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrProductsDataAnalysisGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrProductsDataCollectionGetSignalErrorFull() instead")
    void mdrProductsDataCollectionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrProductsDataCollectionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrProductsDataTabulationGetSignalErrorFull() instead")
    void mdrProductsDataTabulationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrProductsDataTabulationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrProductsGetSignalErrorFull() instead")
    void mdrProductsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrProductsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrProductsMeasuresGetSignalErrorFull() instead")
    void mdrProductsMeasuresGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrProductsMeasuresGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrProductsTerminologyGetSignalErrorFull() instead")
    void mdrProductsTerminologyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrProductsTerminologyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif

/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICtTerm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICtTerm::OAICtTerm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICtTerm::OAICtTerm() {
    this->initializeModel();
}

OAICtTerm::~OAICtTerm() {}

void OAICtTerm::initializeModel() {

    m_concept_id_isSet = false;
    m_concept_id_isValid = false;

    m_submission_value_isSet = false;
    m_submission_value_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_preferred_term_isSet = false;
    m_preferred_term_isValid = false;

    m_synonyms_isSet = false;
    m_synonyms_isValid = false;

    m__links_isSet = false;
    m__links_isValid = false;
}

void OAICtTerm::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICtTerm::fromJsonObject(QJsonObject json) {

    m_concept_id_isValid = ::OpenAPI::fromJsonValue(m_concept_id, json[QString("conceptId")]);
    m_concept_id_isSet = !json[QString("conceptId")].isNull() && m_concept_id_isValid;

    m_submission_value_isValid = ::OpenAPI::fromJsonValue(m_submission_value, json[QString("submissionValue")]);
    m_submission_value_isSet = !json[QString("submissionValue")].isNull() && m_submission_value_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("definition")]);
    m_definition_isSet = !json[QString("definition")].isNull() && m_definition_isValid;

    m_preferred_term_isValid = ::OpenAPI::fromJsonValue(m_preferred_term, json[QString("preferredTerm")]);
    m_preferred_term_isSet = !json[QString("preferredTerm")].isNull() && m_preferred_term_isValid;

    m_synonyms_isValid = ::OpenAPI::fromJsonValue(m_synonyms, json[QString("synonyms")]);
    m_synonyms_isSet = !json[QString("synonyms")].isNull() && m_synonyms_isValid;

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;
}

QString OAICtTerm::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICtTerm::asJsonObject() const {
    QJsonObject obj;
    if (m_concept_id_isSet) {
        obj.insert(QString("conceptId"), ::OpenAPI::toJsonValue(m_concept_id));
    }
    if (m_submission_value_isSet) {
        obj.insert(QString("submissionValue"), ::OpenAPI::toJsonValue(m_submission_value));
    }
    if (m_definition_isSet) {
        obj.insert(QString("definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_preferred_term_isSet) {
        obj.insert(QString("preferredTerm"), ::OpenAPI::toJsonValue(m_preferred_term));
    }
    if (m_synonyms.size() > 0) {
        obj.insert(QString("synonyms"), ::OpenAPI::toJsonValue(m_synonyms));
    }
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    return obj;
}

QString OAICtTerm::getConceptId() const {
    return m_concept_id;
}
void OAICtTerm::setConceptId(const QString &concept_id) {
    m_concept_id = concept_id;
    m_concept_id_isSet = true;
}

bool OAICtTerm::is_concept_id_Set() const{
    return m_concept_id_isSet;
}

bool OAICtTerm::is_concept_id_Valid() const{
    return m_concept_id_isValid;
}

QString OAICtTerm::getSubmissionValue() const {
    return m_submission_value;
}
void OAICtTerm::setSubmissionValue(const QString &submission_value) {
    m_submission_value = submission_value;
    m_submission_value_isSet = true;
}

bool OAICtTerm::is_submission_value_Set() const{
    return m_submission_value_isSet;
}

bool OAICtTerm::is_submission_value_Valid() const{
    return m_submission_value_isValid;
}

QString OAICtTerm::getDefinition() const {
    return m_definition;
}
void OAICtTerm::setDefinition(const QString &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAICtTerm::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAICtTerm::is_definition_Valid() const{
    return m_definition_isValid;
}

QString OAICtTerm::getPreferredTerm() const {
    return m_preferred_term;
}
void OAICtTerm::setPreferredTerm(const QString &preferred_term) {
    m_preferred_term = preferred_term;
    m_preferred_term_isSet = true;
}

bool OAICtTerm::is_preferred_term_Set() const{
    return m_preferred_term_isSet;
}

bool OAICtTerm::is_preferred_term_Valid() const{
    return m_preferred_term_isValid;
}

QList<QString> OAICtTerm::getSynonyms() const {
    return m_synonyms;
}
void OAICtTerm::setSynonyms(const QList<QString> &synonyms) {
    m_synonyms = synonyms;
    m_synonyms_isSet = true;
}

bool OAICtTerm::is_synonyms_Set() const{
    return m_synonyms_isSet;
}

bool OAICtTerm::is_synonyms_Valid() const{
    return m_synonyms_isValid;
}

OAICtTermLinks OAICtTerm::getLinks() const {
    return m__links;
}
void OAICtTerm::setLinks(const OAICtTermLinks &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAICtTerm::is__links_Set() const{
    return m__links_isSet;
}

bool OAICtTerm::is__links_Valid() const{
    return m__links_isValid;
}

bool OAICtTerm::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concept_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submission_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synonyms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICtTerm::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI

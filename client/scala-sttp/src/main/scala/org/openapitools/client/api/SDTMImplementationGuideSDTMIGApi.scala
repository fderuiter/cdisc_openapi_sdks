/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.DefaultErrorResponse
import org.openapitools.client.model.ExportSdtmigDatasetsTable
import org.openapitools.client.model.ExportSdtmigVariablesTable
import org.openapitools.client.model.ExportSdtmigWorkbook
import org.openapitools.client.model.RootSdtmigDatasetVariable
import org.openapitools.client.model.SdtmigClass
import org.openapitools.client.model.SdtmigClassDatasets
import org.openapitools.client.model.SdtmigClasses
import org.openapitools.client.model.SdtmigDataset
import org.openapitools.client.model.SdtmigDatasetVariable
import org.openapitools.client.model.SdtmigDatasetVariables
import org.openapitools.client.model.SdtmigDatasets
import org.openapitools.client.model.SdtmigProduct
import org.openapitools.client.model.XmlRootSdtmigDatasetVariable
import org.openapitools.client.model.XmlSdtmigClass
import org.openapitools.client.model.XmlSdtmigClassDatasets
import org.openapitools.client.model.XmlSdtmigClasses
import org.openapitools.client.model.XmlSdtmigDataset
import org.openapitools.client.model.XmlSdtmigDatasetVariable
import org.openapitools.client.model.XmlSdtmigDatasetVariables
import org.openapitools.client.model.XmlSdtmigDatasets
import org.openapitools.client.model.XmlSdtmigProduct
import org.openapitools.client.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object SDTMImplementationGuideSDTMIGApi {
  def apply(baseUrl: String = "https://library.cdisc.org/api") = new SDTMImplementationGuideSDTMIGApi(baseUrl)
}

class SDTMImplementationGuideSDTMIGApi(baseUrl: String) {

  /**
   * Get Root SDTMIG Dataset Variable
   * 
   * Expected answers:
   *   code 200 : RootSdtmigDatasetVariable (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param dataset SDTMIG Dataset Identifier
   * @param `var` SDTMIG Variable Identifier
   */
  def mdrRootSdtmigDatasetsDatasetVariablesVarGet(username: String, password: String)(dataset: String, `var`: String
): Request[Either[ResponseException[String, Exception], RootSdtmigDatasetVariable], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/root/sdtmig/datasets/${dataset}/variables/${`var`}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[RootSdtmigDatasetVariable])

  /**
   * Get SDTMIG Class Dataset List
   * 
   * Expected answers:
   *   code 200 : SdtmigClassDatasets (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param `class` SDTMIG Class Identifier
   */
  def mdrSdtmigVersionClassesClassDatasetsGet(username: String, password: String)(version: String, `class`: String
): Request[Either[ResponseException[String, Exception], SdtmigClassDatasets], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sdtmig/${version}/classes/${`class`}/datasets")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SdtmigClassDatasets])

  /**
   * Get SDTMIG Class
   * 
   * Expected answers:
   *   code 200 : SdtmigClass (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param `class` SDTMIG Class Identifier
   */
  def mdrSdtmigVersionClassesClassGet(username: String, password: String)(version: String, `class`: String
): Request[Either[ResponseException[String, Exception], SdtmigClass], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sdtmig/${version}/classes/${`class`}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SdtmigClass])

  /**
   * Get SDTMIG Class List
   * 
   * Expected answers:
   *   code 200 : SdtmigClasses (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   */
  def mdrSdtmigVersionClassesGet(username: String, password: String)(version: String
): Request[Either[ResponseException[String, Exception], SdtmigClasses], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sdtmig/${version}/classes")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SdtmigClasses])

  /**
   * Get SDTMIG Dataset
   * 
   * Expected answers:
   *   code 200 : SdtmigDataset (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param dataset SDTMIG Dataset Identifier
   */
  def mdrSdtmigVersionDatasetsDatasetGet(username: String, password: String)(version: String, dataset: String
): Request[Either[ResponseException[String, Exception], SdtmigDataset], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sdtmig/${version}/datasets/${dataset}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SdtmigDataset])

  /**
   * Get SDTMIG Dataset Variable List
   * 
   * Expected answers:
   *   code 200 : SdtmigDatasetVariables (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param dataset SDTMIG Dataset Identifier
   */
  def mdrSdtmigVersionDatasetsDatasetVariablesGet(username: String, password: String)(version: String, dataset: String
): Request[Either[ResponseException[String, Exception], SdtmigDatasetVariables], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sdtmig/${version}/datasets/${dataset}/variables")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SdtmigDatasetVariables])

  /**
   * Get SDTMIG Dataset Variable
   * 
   * Expected answers:
   *   code 200 : SdtmigDatasetVariable (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param dataset SDTMIG Dataset Identifier
   * @param `var` SDTMIG Variable Identifier
   */
  def mdrSdtmigVersionDatasetsDatasetVariablesVarGet(username: String, password: String)(version: String, dataset: String, `var`: String
): Request[Either[ResponseException[String, Exception], SdtmigDatasetVariable], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sdtmig/${version}/datasets/${dataset}/variables/${`var`}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SdtmigDatasetVariable])

  /**
   * Get SDTMIG Dataset List
   * 
   * Expected answers:
   *   code 200 : SdtmigDatasets (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   */
  def mdrSdtmigVersionDatasetsGet(username: String, password: String)(version: String
): Request[Either[ResponseException[String, Exception], SdtmigDatasets], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sdtmig/${version}/datasets")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SdtmigDatasets])

  /**
   * Get SDTMIG product
   * 
   * Expected answers:
   *   code 200 : SdtmigProduct (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   */
  def mdrSdtmigVersionGet(username: String, password: String)(version: String
): Request[Either[ResponseException[String, Exception], SdtmigProduct], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sdtmig/${version}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SdtmigProduct])

}

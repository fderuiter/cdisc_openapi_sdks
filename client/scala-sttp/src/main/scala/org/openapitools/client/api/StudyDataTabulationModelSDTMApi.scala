/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.DefaultErrorResponse
import org.openapitools.client.model.ExportSdtmDatasetsTable
import org.openapitools.client.model.ExportSdtmVariablesTable
import org.openapitools.client.model.ExportSdtmWorkbook
import org.openapitools.client.model.RootSdtmClassVariable
import org.openapitools.client.model.RootSdtmDatasetVariable
import org.openapitools.client.model.SdtmClass
import org.openapitools.client.model.SdtmClassDatasets
import org.openapitools.client.model.SdtmClassVariable
import org.openapitools.client.model.SdtmClassVariables
import org.openapitools.client.model.SdtmClasses
import org.openapitools.client.model.SdtmDataset
import org.openapitools.client.model.SdtmDatasetVariable
import org.openapitools.client.model.SdtmDatasetVariables
import org.openapitools.client.model.SdtmDatasets
import org.openapitools.client.model.SdtmProduct
import org.openapitools.client.model.XmlRootSdtmClassVariable
import org.openapitools.client.model.XmlRootSdtmDatasetVariable
import org.openapitools.client.model.XmlSdtmClass
import org.openapitools.client.model.XmlSdtmClassDatasets
import org.openapitools.client.model.XmlSdtmClassVariable
import org.openapitools.client.model.XmlSdtmClassVariables
import org.openapitools.client.model.XmlSdtmClasses
import org.openapitools.client.model.XmlSdtmDataset
import org.openapitools.client.model.XmlSdtmDatasetVariable
import org.openapitools.client.model.XmlSdtmDatasetVariables
import org.openapitools.client.model.XmlSdtmDatasets
import org.openapitools.client.model.XmlSdtmProduct
import org.openapitools.client.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object StudyDataTabulationModelSDTMApi {
  def apply(baseUrl: String = "https://library.cdisc.org/api") = new StudyDataTabulationModelSDTMApi(baseUrl)
}

class StudyDataTabulationModelSDTMApi(baseUrl: String) {

  /**
   * Get Root of SDTM Class Variable
   * 
   * Expected answers:
   *   code 200 : RootSdtmClassVariable (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param `class` SDTM Class Identifier
   * @param `var` SDTM Variable Identifier
   */
  def mdrRootSdtmClassesClassVariablesVarGet(username: String, password: String)(`class`: String, `var`: String
): Request[Either[ResponseException[String, Exception], RootSdtmClassVariable], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/root/sdtm/classes/${`class`}/variables/${`var`}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[RootSdtmClassVariable])

  /**
   * Get Root SDTM Dataset Variable
   * 
   * Expected answers:
   *   code 200 : RootSdtmDatasetVariable (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param dataset SDTM Dataset Identifier
   * @param `var` SDTM Variable Identifier
   */
  def mdrRootSdtmDatasetsDatasetVariablesVarGet(username: String, password: String)(dataset: String, `var`: String
): Request[Either[ResponseException[String, Exception], RootSdtmDatasetVariable], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/root/sdtm/datasets/${dataset}/variables/${`var`}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[RootSdtmDatasetVariable])

  /**
   * Get SDTM Class Dataset List
   * 
   * Expected answers:
   *   code 200 : SdtmClassDatasets (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param `class` SDTM Class Identifier
   */
  def mdrSdtmVersionClassesClassDatasetsGet(username: String, password: String)(version: String, `class`: String
): Request[Either[ResponseException[String, Exception], SdtmClassDatasets], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sdtm/${version}/classes/${`class`}/datasets")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SdtmClassDatasets])

  /**
   * Get SDTM Class
   * 
   * Expected answers:
   *   code 200 : SdtmClass (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param `class` SDTM Class Identifier
   */
  def mdrSdtmVersionClassesClassGet(username: String, password: String)(version: String, `class`: String
): Request[Either[ResponseException[String, Exception], SdtmClass], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sdtm/${version}/classes/${`class`}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SdtmClass])

  /**
   * Get SDTM Class Variable List
   * 
   * Expected answers:
   *   code 200 : SdtmClassVariables (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param `class` SDTM Class Identifier
   */
  def mdrSdtmVersionClassesClassVariablesGet(username: String, password: String)(version: String, `class`: String
): Request[Either[ResponseException[String, Exception], SdtmClassVariables], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sdtm/${version}/classes/${`class`}/variables")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SdtmClassVariables])

  /**
   * Get SDTM Class Variable
   * 
   * Expected answers:
   *   code 200 : SdtmClassVariable (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param `class` SDTM Class Identifier
   * @param `var` SDTM Variable Identifier
   */
  def mdrSdtmVersionClassesClassVariablesVarGet(username: String, password: String)(version: String, `class`: String, `var`: String
): Request[Either[ResponseException[String, Exception], SdtmClassVariable], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sdtm/${version}/classes/${`class`}/variables/${`var`}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SdtmClassVariable])

  /**
   * Get SDTM Class List
   * 
   * Expected answers:
   *   code 200 : SdtmClasses (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   */
  def mdrSdtmVersionClassesGet(username: String, password: String)(version: String
): Request[Either[ResponseException[String, Exception], SdtmClasses], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sdtm/${version}/classes")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SdtmClasses])

  /**
   * Get SDTM Dataset
   * 
   * Expected answers:
   *   code 200 : SdtmDataset (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param dataset SDTM Dataset Identifier
   */
  def mdrSdtmVersionDatasetsDatasetGet(username: String, password: String)(version: String, dataset: String
): Request[Either[ResponseException[String, Exception], SdtmDataset], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sdtm/${version}/datasets/${dataset}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SdtmDataset])

  /**
   * Get SDTM Dataset Variable List
   * 
   * Expected answers:
   *   code 200 : SdtmDatasetVariables (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param dataset SDTM Dataset Identifier
   */
  def mdrSdtmVersionDatasetsDatasetVariablesGet(username: String, password: String)(version: String, dataset: String
): Request[Either[ResponseException[String, Exception], SdtmDatasetVariables], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sdtm/${version}/datasets/${dataset}/variables")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SdtmDatasetVariables])

  /**
   * Get SDTM Dataset Variable
   * 
   * Expected answers:
   *   code 200 : SdtmDatasetVariable (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   * @param dataset SDTM Dataset Identifier
   * @param `var` SDTM Variable Identifier
   */
  def mdrSdtmVersionDatasetsDatasetVariablesVarGet(username: String, password: String)(version: String, dataset: String, `var`: String
): Request[Either[ResponseException[String, Exception], SdtmDatasetVariable], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sdtm/${version}/datasets/${dataset}/variables/${`var`}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SdtmDatasetVariable])

  /**
   * Get SDTM Dataset List
   * 
   * Expected answers:
   *   code 200 : SdtmDatasets (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   */
  def mdrSdtmVersionDatasetsGet(username: String, password: String)(version: String
): Request[Either[ResponseException[String, Exception], SdtmDatasets], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sdtm/${version}/datasets")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SdtmDatasets])

  /**
   * Get SDTM product
   * 
   * Expected answers:
   *   code 200 : SdtmProduct (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param version CDISC Library Product Version
   */
  def mdrSdtmVersionGet(username: String, password: String)(version: String
): Request[Either[ResponseException[String, Exception], SdtmProduct], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/sdtm/${version}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[SdtmProduct])

}

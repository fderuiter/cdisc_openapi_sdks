/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.DefaultErrorResponse
import org.openapitools.client.model.ExportQrsItemsTable
import org.openapitools.client.model.ExportQrsWorkbook
import org.openapitools.client.model.QrsItem
import org.openapitools.client.model.QrsItems
import org.openapitools.client.model.QrsProduct
import org.openapitools.client.model.QrsResponsegroup
import org.openapitools.client.model.QrsResponsegroups
import org.openapitools.client.model.XmlQrsItem
import org.openapitools.client.model.XmlQrsItems
import org.openapitools.client.model.XmlQrsProduct
import org.openapitools.client.model.XmlQrsResponsegroup
import org.openapitools.client.model.XmlQrsResponsegroups
import org.openapitools.client.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object MeasuresApi {
  def apply(baseUrl: String = "https://library.cdisc.org/api") = new MeasuresApi(baseUrl)
}

class MeasuresApi(baseUrl: String) {

  /**
   * Get QRS Product
   * 
   * Expected answers:
   *   code 200 : QrsProduct (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param measure QRS Measure Identifier
   * @param version CDISC Library Product Version
   */
  def mdrQrsMeasureVersionGet(username: String, password: String)(measure: String, version: String
): Request[Either[ResponseException[String, Exception], QrsProduct], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/qrs/${measure}/${version}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[QrsProduct])

  /**
   * Get QRS Item List
   * 
   * Expected answers:
   *   code 200 : QrsItems (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param measure QRS Measure Identifier
   * @param version CDISC Library Product Version
   */
  def mdrQrsMeasureVersionItemsGet(username: String, password: String)(measure: String, version: String
): Request[Either[ResponseException[String, Exception], QrsItems], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/qrs/${measure}/${version}/items")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[QrsItems])

  /**
   * Get QRS Item
   * 
   * Expected answers:
   *   code 200 : QrsItem (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param measure QRS Measure Identifier
   * @param version CDISC Library Product Version
   * @param item QRS Measure Item Identifier
   */
  def mdrQrsMeasureVersionItemsItemGet(username: String, password: String)(measure: String, version: String, item: String
): Request[Either[ResponseException[String, Exception], QrsItem], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/qrs/${measure}/${version}/items/${item}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[QrsItem])

  /**
   * Get QRS Response Group List
   * 
   * Expected answers:
   *   code 200 : QrsResponsegroups (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param measure QRS Measure Identifier
   * @param version CDISC Library Product Version
   */
  def mdrQrsMeasureVersionResponsegroupsGet(username: String, password: String)(measure: String, version: String
): Request[Either[ResponseException[String, Exception], QrsResponsegroups], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/qrs/${measure}/${version}/responsegroups")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[QrsResponsegroups])

  /**
   * Get QRS Response Group
   * 
   * Expected answers:
   *   code 200 : QrsResponsegroup (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param measure QRS Measure Identifier
   * @param version CDISC Library Product Version
   * @param responsegroup QRS Measure's Response Group Identifier
   */
  def mdrQrsMeasureVersionResponsegroupsResponsegroupGet(username: String, password: String)(measure: String, version: String, responsegroup: String
): Request[Either[ResponseException[String, Exception], QrsResponsegroup], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/qrs/${measure}/${version}/responsegroups/${responsegroup}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[QrsResponsegroup])

}

/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.CtCodelist
import org.openapitools.client.model.CtCodelistTerms
import org.openapitools.client.model.CtPackage
import org.openapitools.client.model.CtPackageCodelists
import org.openapitools.client.model.CtPackages
import org.openapitools.client.model.CtTerm
import org.openapitools.client.model.DefaultErrorResponse
import org.openapitools.client.model.ExportCtTable
import org.openapitools.client.model.RootCtCodelist
import org.openapitools.client.model.RootCtTerm
import org.openapitools.client.model.XmlCtCodelist
import org.openapitools.client.model.XmlCtCodelistTerms
import org.openapitools.client.model.XmlCtPackage
import org.openapitools.client.model.XmlCtPackageCodelists
import org.openapitools.client.model.XmlCtPackages
import org.openapitools.client.model.XmlCtTerm
import org.openapitools.client.model.XmlRootCtCodelist
import org.openapitools.client.model.XmlRootCtTerm
import org.openapitools.client.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object ControlledTerminologyCTApi {
  def apply(baseUrl: String = "https://library.cdisc.org/api") = new ControlledTerminologyCTApi(baseUrl)
}

class ControlledTerminologyCTApi(baseUrl: String) {

  /**
   * Get CDISC Library CT Package List
   * 
   * Expected answers:
   *   code 200 : CtPackages (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   */
  def mdrCtPackagesGet(username: String, password: String)(
): Request[Either[ResponseException[String, Exception], CtPackages], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/ct/packages")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[CtPackages])

  /**
   * Get CDISC Library CT Package Codelist
   * 
   * Expected answers:
   *   code 200 : CtCodelist (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param `package` CT Package Identifier
   * @param codelist CT Codelist Identifier
   */
  def mdrCtPackagesPackageCodelistsCodelistGet(username: String, password: String)(`package`: String, codelist: String
): Request[Either[ResponseException[String, Exception], CtCodelist], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/ct/packages/${`package`}/codelists/${codelist}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[CtCodelist])

  /**
   * Get CDISC Library CT Package Codelist Term List
   * 
   * Expected answers:
   *   code 200 : CtCodelistTerms (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param `package` CT Package Identifier
   * @param codelist CT Codelist Identifier
   */
  def mdrCtPackagesPackageCodelistsCodelistTermsGet(username: String, password: String)(`package`: String, codelist: String
): Request[Either[ResponseException[String, Exception], CtCodelistTerms], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/ct/packages/${`package`}/codelists/${codelist}/terms")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[CtCodelistTerms])

  /**
   * Get CDISC Library CT Package Codelist Term
   * 
   * Expected answers:
   *   code 200 : CtTerm (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param `package` CT Package Product Identifier
   * @param codelist CT Codelist Identifier
   * @param term CT Codelist Term Identifier
   */
  def mdrCtPackagesPackageCodelistsCodelistTermsTermGet(username: String, password: String)(`package`: String, codelist: String, term: String
): Request[Either[ResponseException[String, Exception], CtTerm], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/ct/packages/${`package`}/codelists/${codelist}/terms/${term}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[CtTerm])

  /**
   * Get CDISC Library CT Package Codelist List
   * 
   * Expected answers:
   *   code 200 : CtPackageCodelists (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param `package` CT Package Identifier
   */
  def mdrCtPackagesPackageCodelistsGet(username: String, password: String)(`package`: String
): Request[Either[ResponseException[String, Exception], CtPackageCodelists], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/ct/packages/${`package`}/codelists")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[CtPackageCodelists])

  /**
   * Get CDISC Library CT Package
   * 
   * Expected answers:
   *   code 200 : CtPackage (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param product CT Package Product Identifier
   */
  def mdrCtPackagesProductGet(username: String, password: String)(product: String
): Request[Either[ResponseException[String, Exception], CtPackage], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/ct/packages/${product}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[CtPackage])

  /**
   * Get CDISC Library Root CT Codelist
   * 
   * Expected answers:
   *   code 200 : RootCtCodelist (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param productGroup CT Product Group Identifier
   * @param codelist CT Codelist Identifier
   */
  def mdrRootCtProductGroupCodelistsCodelistGet(username: String, password: String)(productGroup: String, codelist: String
): Request[Either[ResponseException[String, Exception], RootCtCodelist], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/root/ct/${productGroup}/codelists/${codelist}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[RootCtCodelist])

  /**
   * Get CDISC Library Root CT Term
   * 
   * Expected answers:
   *   code 200 : RootCtTerm (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param productGroup CT Product Group Identifier
   * @param codelist CT Codelist Identifier
   * @param term CT Codelist Term Identifier
   */
  def mdrRootCtProductGroupCodelistsCodelistTermsTermGet(username: String, password: String)(productGroup: String, codelist: String, term: String
): Request[Either[ResponseException[String, Exception], RootCtTerm], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/root/ct/${productGroup}/codelists/${codelist}/terms/${term}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[RootCtTerm])

}

/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.AdamDatastructure
import org.openapitools.client.model.AdamDatastructureVariables
import org.openapitools.client.model.AdamDatastructureVarsets
import org.openapitools.client.model.AdamProduct
import org.openapitools.client.model.AdamProductDatastructures
import org.openapitools.client.model.AdamVariable
import org.openapitools.client.model.AdamVarset
import org.openapitools.client.model.DefaultErrorResponse
import org.openapitools.client.model.ExportAdamDatastructuresTable
import org.openapitools.client.model.ExportAdamVariablesTable
import org.openapitools.client.model.ExportAdamWorkbook
import org.openapitools.client.model.XmlAdamDatastructure
import org.openapitools.client.model.XmlAdamDatastructureVariables
import org.openapitools.client.model.XmlAdamDatastructureVarsets
import org.openapitools.client.model.XmlAdamProduct
import org.openapitools.client.model.XmlAdamProductDatastructures
import org.openapitools.client.model.XmlAdamVariable
import org.openapitools.client.model.XmlAdamVarset
import org.openapitools.client.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi {
  def apply(baseUrl: String = "https://library.cdisc.org/api") = new AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi(baseUrl)
}

class AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi(baseUrl: String) {

  /**
   * Get ADaM Data Structure List
   * 
   * Expected answers:
   *   code 200 : AdamProductDatastructures (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param product CDISC Library Product
   */
  def mdrAdamProductDatastructuresGet(username: String, password: String)(product: String
): Request[Either[ResponseException[String, Exception], AdamProductDatastructures], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/adam/${product}/datastructures")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[AdamProductDatastructures])

  /**
   * Get ADaM Data Structure
   * 
   * Expected answers:
   *   code 200 : AdamDatastructure (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param product CDISC Library Product
   * @param structure Data structure Identifier
   */
  def mdrAdamProductDatastructuresStructureGet(username: String, password: String)(product: String, structure: String
): Request[Either[ResponseException[String, Exception], AdamDatastructure], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/adam/${product}/datastructures/${structure}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[AdamDatastructure])

  /**
   * Get ADaM Variable List
   * 
   * Expected answers:
   *   code 200 : AdamDatastructureVariables (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param product CDISC Library Product
   * @param structure ADaM Data Structure Identifier
   */
  def mdrAdamProductDatastructuresStructureVariablesGet(username: String, password: String)(product: String, structure: String
): Request[Either[ResponseException[String, Exception], AdamDatastructureVariables], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/adam/${product}/datastructures/${structure}/variables")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[AdamDatastructureVariables])

  /**
   * Get ADaM Variable
   * 
   * Expected answers:
   *   code 200 : AdamVariable (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param product CDISC Library Product
   * @param structure ADaM Data Structure Identifier
   * @param `var` ADaM Variable Identifier
   */
  def mdrAdamProductDatastructuresStructureVariablesVarGet(username: String, password: String)(product: String, structure: String, `var`: String
): Request[Either[ResponseException[String, Exception], AdamVariable], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/adam/${product}/datastructures/${structure}/variables/${`var`}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[AdamVariable])

  /**
   * Get ADaM Variable Set List
   * 
   * Expected answers:
   *   code 200 : AdamDatastructureVarsets (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param product CDISC Library Product
   * @param structure ADaM Data Structure Identifier
   */
  def mdrAdamProductDatastructuresStructureVarsetsGet(username: String, password: String)(product: String, structure: String
): Request[Either[ResponseException[String, Exception], AdamDatastructureVarsets], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/adam/${product}/datastructures/${structure}/varsets")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[AdamDatastructureVarsets])

  /**
   * Get ADaM Variable Set
   * 
   * Expected answers:
   *   code 200 : AdamVarset (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param product CDISC Library Product
   * @param structure ADaM Data Structure Identifier
   * @param varset ADaM Variable Set Identifier
   */
  def mdrAdamProductDatastructuresStructureVarsetsVarsetGet(username: String, password: String)(product: String, structure: String, varset: String
): Request[Either[ResponseException[String, Exception], AdamVarset], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/adam/${product}/datastructures/${structure}/varsets/${varset}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[AdamVarset])

  /**
   * Get ADaM Product
   * 
   * Expected answers:
   *   code 200 : AdamProduct (OK)
   *   code 400 : DefaultErrorResponse (Bad Request)
   *   code 401 : DefaultErrorResponse (Unauthorized)
   *   code 403 : DefaultErrorResponse (Forbidden)
   *   code 404 : DefaultErrorResponse (Not Found)
   *   code 405 : DefaultErrorResponse (Method Not Allowed)
   *   code 406 : DefaultErrorResponse (Not Acceptable)
   *   code 500 : DefaultErrorResponse (Internal Server Error)
   *   code 503 : DefaultErrorResponse (Service Unavailable)
   *   code 504 : DefaultErrorResponse (Gateway Timeout Error)
   * 
   * Available security schemes:
   *   basicAuth (http)
   * 
   * @param product CDISC Library Product
   */
  def mdrAdamProductGet(username: String, password: String)(product: String
): Request[Either[ResponseException[String, Exception], AdamProduct], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/mdr/adam/${product}")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[AdamProduct])

}

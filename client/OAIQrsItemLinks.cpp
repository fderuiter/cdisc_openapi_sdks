/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQrsItemLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQrsItemLinks::OAIQrsItemLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQrsItemLinks::OAIQrsItemLinks() {
    this->initializeModel();
}

OAIQrsItemLinks::~OAIQrsItemLinks() {}

void OAIQrsItemLinks::initializeModel() {

    m_qrs_item_test_isSet = false;
    m_qrs_item_test_isValid = false;

    m_qrs_item_testcd_isSet = false;
    m_qrs_item_testcd_isValid = false;

    m_qrs_item_eval_isSet = false;
    m_qrs_item_eval_isValid = false;

    m_qrs_item_scat_isSet = false;
    m_qrs_item_scat_isValid = false;

    m_responsegroup_isSet = false;
    m_responsegroup_isValid = false;
}

void OAIQrsItemLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQrsItemLinks::fromJsonObject(QJsonObject json) {

    m_qrs_item_test_isValid = ::OpenAPI::fromJsonValue(m_qrs_item_test, json[QString("qrsItemTEST")]);
    m_qrs_item_test_isSet = !json[QString("qrsItemTEST")].isNull() && m_qrs_item_test_isValid;

    m_qrs_item_testcd_isValid = ::OpenAPI::fromJsonValue(m_qrs_item_testcd, json[QString("qrsItemTESTCD")]);
    m_qrs_item_testcd_isSet = !json[QString("qrsItemTESTCD")].isNull() && m_qrs_item_testcd_isValid;

    m_qrs_item_eval_isValid = ::OpenAPI::fromJsonValue(m_qrs_item_eval, json[QString("qrsItemEVAL")]);
    m_qrs_item_eval_isSet = !json[QString("qrsItemEVAL")].isNull() && m_qrs_item_eval_isValid;

    m_qrs_item_scat_isValid = ::OpenAPI::fromJsonValue(m_qrs_item_scat, json[QString("qrsItemSCAT")]);
    m_qrs_item_scat_isSet = !json[QString("qrsItemSCAT")].isNull() && m_qrs_item_scat_isValid;

    m_responsegroup_isValid = ::OpenAPI::fromJsonValue(m_responsegroup, json[QString("responsegroup")]);
    m_responsegroup_isSet = !json[QString("responsegroup")].isNull() && m_responsegroup_isValid;
}

QString OAIQrsItemLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQrsItemLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_qrs_item_test.isSet()) {
        obj.insert(QString("qrsItemTEST"), ::OpenAPI::toJsonValue(m_qrs_item_test));
    }
    if (m_qrs_item_testcd.isSet()) {
        obj.insert(QString("qrsItemTESTCD"), ::OpenAPI::toJsonValue(m_qrs_item_testcd));
    }
    if (m_qrs_item_eval.isSet()) {
        obj.insert(QString("qrsItemEVAL"), ::OpenAPI::toJsonValue(m_qrs_item_eval));
    }
    if (m_qrs_item_scat.isSet()) {
        obj.insert(QString("qrsItemSCAT"), ::OpenAPI::toJsonValue(m_qrs_item_scat));
    }
    if (m_responsegroup.isSet()) {
        obj.insert(QString("responsegroup"), ::OpenAPI::toJsonValue(m_responsegroup));
    }
    return obj;
}

OAIRootCtTermRef OAIQrsItemLinks::getQrsItemTest() const {
    return m_qrs_item_test;
}
void OAIQrsItemLinks::setQrsItemTest(const OAIRootCtTermRef &qrs_item_test) {
    m_qrs_item_test = qrs_item_test;
    m_qrs_item_test_isSet = true;
}

bool OAIQrsItemLinks::is_qrs_item_test_Set() const{
    return m_qrs_item_test_isSet;
}

bool OAIQrsItemLinks::is_qrs_item_test_Valid() const{
    return m_qrs_item_test_isValid;
}

OAIRootCtTermRef OAIQrsItemLinks::getQrsItemTestcd() const {
    return m_qrs_item_testcd;
}
void OAIQrsItemLinks::setQrsItemTestcd(const OAIRootCtTermRef &qrs_item_testcd) {
    m_qrs_item_testcd = qrs_item_testcd;
    m_qrs_item_testcd_isSet = true;
}

bool OAIQrsItemLinks::is_qrs_item_testcd_Set() const{
    return m_qrs_item_testcd_isSet;
}

bool OAIQrsItemLinks::is_qrs_item_testcd_Valid() const{
    return m_qrs_item_testcd_isValid;
}

OAIRootCtTermRef OAIQrsItemLinks::getQrsItemEval() const {
    return m_qrs_item_eval;
}
void OAIQrsItemLinks::setQrsItemEval(const OAIRootCtTermRef &qrs_item_eval) {
    m_qrs_item_eval = qrs_item_eval;
    m_qrs_item_eval_isSet = true;
}

bool OAIQrsItemLinks::is_qrs_item_eval_Set() const{
    return m_qrs_item_eval_isSet;
}

bool OAIQrsItemLinks::is_qrs_item_eval_Valid() const{
    return m_qrs_item_eval_isValid;
}

OAIRootCtTermRef OAIQrsItemLinks::getQrsItemScat() const {
    return m_qrs_item_scat;
}
void OAIQrsItemLinks::setQrsItemScat(const OAIRootCtTermRef &qrs_item_scat) {
    m_qrs_item_scat = qrs_item_scat;
    m_qrs_item_scat_isSet = true;
}

bool OAIQrsItemLinks::is_qrs_item_scat_Set() const{
    return m_qrs_item_scat_isSet;
}

bool OAIQrsItemLinks::is_qrs_item_scat_Valid() const{
    return m_qrs_item_scat_isValid;
}

OAIQrsResponsegroup OAIQrsItemLinks::getResponsegroup() const {
    return m_responsegroup;
}
void OAIQrsItemLinks::setResponsegroup(const OAIQrsResponsegroup &responsegroup) {
    m_responsegroup = responsegroup;
    m_responsegroup_isSet = true;
}

bool OAIQrsItemLinks::is_responsegroup_Set() const{
    return m_responsegroup_isSet;
}

bool OAIQrsItemLinks::is_responsegroup_Valid() const{
    return m_responsegroup_isValid;
}

bool OAIQrsItemLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_qrs_item_test.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_qrs_item_testcd.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_qrs_item_eval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_qrs_item_scat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_responsegroup.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQrsItemLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI

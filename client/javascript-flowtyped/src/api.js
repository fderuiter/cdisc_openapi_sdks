// @flow
/* eslint-disable no-use-before-define */
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH: string = "https://library.cdisc.org/api".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 */
export type FetchAPI = {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 */
export type FetchArgs = {
    url: string;
    options: {};
}

/**
 *
 * @export
 */
export type RequestOptions = {
    headers?: {};
    query?: {};
    body?: string | FormData;
}

/**
 * * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name:string = "RequiredError"
    constructor(field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 */
export type About = {
    /**
     * 
     * @type {AboutLinks}
     * @memberof About
     */
    _links?: AboutLinks;
    /**
     * 
     * @type {string}
     * @memberof About
     */
    release_notes?: string;
    /**
     * 
     * @type {string}
     * @memberof About
     */
    api_documentation?: string;
}

/**
 * 
 * @export
 */
export type AboutLinks = {
    /**
     * 
     * @type {AboutRef}
     * @memberof AboutLinks
     */
    self?: AboutRef;
    /**
     * 
     * @type {LastupdatedRef}
     * @memberof AboutLinks
     */
    lastupdated?: LastupdatedRef;
}

/**
 * 
 * @export
 */
export type AboutRef = {
    /**
     * 
     * @type {string}
     * @memberof AboutRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof AboutRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type AdamDatastructure = {
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructure
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructure
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructure
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructure
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructure
     */
    _class?: string;
    /**
     * 
     * @type {AdamDatastructureLinks}
     * @memberof AdamDatastructure
     */
    _links?: AdamDatastructureLinks;
    /**
     * 
     * @type {Array<AdamVarset>}
     * @memberof AdamDatastructure
     */
    analysisVariableSets?: Array<AdamVarset>;
}

/**
 * 
 * @export
 */
export type AdamDatastructureLinks = {
    /**
     * 
     * @type {AdamDatastructureRef}
     * @memberof AdamDatastructureLinks
     */
    self?: AdamDatastructureRef;
    /**
     * 
     * @type {AdamProductRef}
     * @memberof AdamDatastructureLinks
     */
    parentProduct?: AdamProductRef;
    /**
     * 
     * @type {AdamDatastructureRef}
     * @memberof AdamDatastructureLinks
     */
    priorVersion?: AdamDatastructureRef;
}

/**
 * 
 * @export
 */
export type AdamDatastructureRef = {
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructureRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructureRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructureRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type AdamDatastructureRefElement = {
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructureRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructureRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructureRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type AdamDatastructureVariables = {
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructureVariables
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructureVariables
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructureVariables
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructureVariables
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructureVariables
     */
    _class?: string;
    /**
     * 
     * @type {AdamDatastructureVariablesLinks}
     * @memberof AdamDatastructureVariables
     */
    _links?: AdamDatastructureVariablesLinks;
}

/**
 * 
 * @export
 */
export type AdamDatastructureVariablesLinks = {
    /**
     * 
     * @type {AdamDatastructureVariablesRef}
     * @memberof AdamDatastructureVariablesLinks
     */
    self?: AdamDatastructureVariablesRef;
    /**
     * 
     * @type {AdamProductRef}
     * @memberof AdamDatastructureVariablesLinks
     */
    parentProduct?: AdamProductRef;
    /**
     * 
     * @type {AdamDatastructureVariablesRef}
     * @memberof AdamDatastructureVariablesLinks
     */
    priorVersion?: AdamDatastructureVariablesRef;
    /**
     * 
     * @type {Array<AdamVariableRefElement>}
     * @memberof AdamDatastructureVariablesLinks
     */
    analysisVariables?: Array<AdamVariableRefElement>;
}

/**
 * 
 * @export
 */
export type AdamDatastructureVariablesRef = {
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructureVariablesRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructureVariablesRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructureVariablesRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type AdamDatastructureVarsets = {
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructureVarsets
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructureVarsets
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructureVarsets
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructureVarsets
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructureVarsets
     */
    _class?: string;
    /**
     * 
     * @type {AdamDatastructureVarsetsLinks}
     * @memberof AdamDatastructureVarsets
     */
    _links?: AdamDatastructureVarsetsLinks;
}

/**
 * 
 * @export
 */
export type AdamDatastructureVarsetsLinks = {
    /**
     * 
     * @type {AdamDatastructureVarsetsRef}
     * @memberof AdamDatastructureVarsetsLinks
     */
    self?: AdamDatastructureVarsetsRef;
    /**
     * 
     * @type {AdamProductRef}
     * @memberof AdamDatastructureVarsetsLinks
     */
    parentProduct?: AdamProductRef;
    /**
     * 
     * @type {AdamDatastructureVarsetsRef}
     * @memberof AdamDatastructureVarsetsLinks
     */
    priorVersion?: AdamDatastructureVarsetsRef;
    /**
     * 
     * @type {Array<AdamVarsetRefElement>}
     * @memberof AdamDatastructureVarsetsLinks
     */
    analysisVariableSets?: Array<AdamVarsetRefElement>;
}

/**
 * 
 * @export
 */
export type AdamDatastructureVarsetsRef = {
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructureVarsetsRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructureVarsetsRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamDatastructureVarsetsRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type AdamProduct = {
    /**
     * 
     * @type {string}
     * @memberof AdamProduct
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamProduct
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamProduct
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamProduct
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamProduct
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamProduct
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamProduct
     */
    version?: string;
    /**
     * 
     * @type {AdamProductLinks}
     * @memberof AdamProduct
     */
    _links?: AdamProductLinks;
    /**
     * 
     * @type {Array<AdamDatastructure>}
     * @memberof AdamProduct
     */
    dataStructures?: Array<AdamDatastructure>;
}

/**
 * 
 * @export
 */
export type AdamProductDatastructures = {
    /**
     * 
     * @type {string}
     * @memberof AdamProductDatastructures
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamProductDatastructures
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamProductDatastructures
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamProductDatastructures
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamProductDatastructures
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamProductDatastructures
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamProductDatastructures
     */
    version?: string;
    /**
     * 
     * @type {AdamProductDatastructuresLinks}
     * @memberof AdamProductDatastructures
     */
    _links?: AdamProductDatastructuresLinks;
}

/**
 * 
 * @export
 */
export type AdamProductDatastructuresLinks = {
    /**
     * 
     * @type {AdamProductDatastructuresRef}
     * @memberof AdamProductDatastructuresLinks
     */
    self?: AdamProductDatastructuresRef;
    /**
     * 
     * @type {AdamProductDatastructuresRef}
     * @memberof AdamProductDatastructuresLinks
     */
    priorVersion?: AdamProductDatastructuresRef;
    /**
     * 
     * @type {Array<AdamDatastructureRefElement>}
     * @memberof AdamProductDatastructuresLinks
     */
    dataStructures?: Array<AdamDatastructureRefElement>;
}

/**
 * 
 * @export
 */
export type AdamProductDatastructuresRef = {
    /**
     * 
     * @type {string}
     * @memberof AdamProductDatastructuresRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamProductDatastructuresRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamProductDatastructuresRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type AdamProductLinks = {
    /**
     * 
     * @type {AdamProductRef}
     * @memberof AdamProductLinks
     */
    self?: AdamProductRef;
    /**
     * 
     * @type {AdamProductRef}
     * @memberof AdamProductLinks
     */
    model?: AdamProductRef;
    /**
     * 
     * @type {AdamProductRef}
     * @memberof AdamProductLinks
     */
    priorVersion?: AdamProductRef;
}

/**
 * 
 * @export
 */
export type AdamProductRef = {
    /**
     * 
     * @type {string}
     * @memberof AdamProductRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamProductRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamProductRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type AdamProductRefElement = {
    /**
     * 
     * @type {string}
     * @memberof AdamProductRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamProductRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamProductRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type AdamVariable = {
    /**
     * 
     * @type {string}
     * @memberof AdamVariable
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamVariable
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamVariable
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamVariable
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamVariable
     */
    core?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamVariable
     */
    simpleDatatype?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamVariable
     */
    describedValueDomain?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdamVariable
     */
    valueList?: Array<string>;
    /**
     * 
     * @type {AdamVariableLinks}
     * @memberof AdamVariable
     */
    _links?: AdamVariableLinks;
}

/**
 * 
 * @export
 */
export type AdamVariableLinks = {
    /**
     * 
     * @type {AdamVariableRef}
     * @memberof AdamVariableLinks
     */
    self?: AdamVariableRef;
    /**
     * 
     * @type {RootCtCodelistRef}
     * @memberof AdamVariableLinks
     */
    codelist?: RootCtCodelistRef;
    /**
     * 
     * @type {AdamProductRef}
     * @memberof AdamVariableLinks
     */
    parentProduct?: AdamProductRef;
    /**
     * 
     * @type {AdamDatastructureRef}
     * @memberof AdamVariableLinks
     */
    parentDatastructure?: AdamDatastructureRef;
    /**
     * 
     * @type {AdamVarsetRef}
     * @memberof AdamVariableLinks
     */
    parentVariableSet?: AdamVarsetRef;
    /**
     * 
     * @type {AdamVariableRef}
     * @memberof AdamVariableLinks
     */
    priorVersion?: AdamVariableRef;
}

/**
 * 
 * @export
 */
export type AdamVariableRef = {
    /**
     * 
     * @type {string}
     * @memberof AdamVariableRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamVariableRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamVariableRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type AdamVariableRefElement = {
    /**
     * 
     * @type {string}
     * @memberof AdamVariableRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamVariableRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamVariableRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type AdamVarset = {
    /**
     * 
     * @type {string}
     * @memberof AdamVarset
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamVarset
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamVarset
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamVarset
     */
    description?: string;
    /**
     * 
     * @type {AdamVarsetLinks}
     * @memberof AdamVarset
     */
    _links?: AdamVarsetLinks;
    /**
     * 
     * @type {Array<AdamVariable>}
     * @memberof AdamVarset
     */
    analysisVariables?: Array<AdamVariable>;
}

/**
 * 
 * @export
 */
export type AdamVarsetLinks = {
    /**
     * 
     * @type {AdamVarsetRef}
     * @memberof AdamVarsetLinks
     */
    self?: AdamVarsetRef;
    /**
     * 
     * @type {AdamProductRef}
     * @memberof AdamVarsetLinks
     */
    parentProduct?: AdamProductRef;
    /**
     * 
     * @type {AdamDatastructureRef}
     * @memberof AdamVarsetLinks
     */
    parentDatastructure?: AdamDatastructureRef;
    /**
     * 
     * @type {AdamVarsetRef}
     * @memberof AdamVarsetLinks
     */
    priorVersion?: AdamVarsetRef;
}

/**
 * 
 * @export
 */
export type AdamVarsetRef = {
    /**
     * 
     * @type {string}
     * @memberof AdamVarsetRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamVarsetRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamVarsetRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type AdamVarsetRefElement = {
    /**
     * 
     * @type {string}
     * @memberof AdamVarsetRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamVarsetRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof AdamVarsetRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashClass = {
    /**
     * 
     * @type {string}
     * @memberof CdashClass
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClass
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClass
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClass
     */
    description?: string;
    /**
     * 
     * @type {CdashClassLinks}
     * @memberof CdashClass
     */
    _links?: CdashClassLinks;
    /**
     * 
     * @type {Array<CdashClassField>}
     * @memberof CdashClass
     */
    cdashModelFields?: Array<CdashClassField>;
}

/**
 * 
 * @export
 */
export type CdashClassDomains = {
    /**
     * 
     * @type {string}
     * @memberof CdashClassDomains
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClassDomains
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClassDomains
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClassDomains
     */
    description?: string;
    /**
     * 
     * @type {CdashClassDomainsLinks}
     * @memberof CdashClassDomains
     */
    _links?: CdashClassDomainsLinks;
}

/**
 * 
 * @export
 */
export type CdashClassDomainsLinks = {
    /**
     * 
     * @type {CdashClassDomainsRef}
     * @memberof CdashClassDomainsLinks
     */
    self?: CdashClassDomainsRef;
    /**
     * 
     * @type {Array<CdashDomainRefElement>}
     * @memberof CdashClassDomainsLinks
     */
    domains?: Array<CdashDomainRefElement>;
}

/**
 * 
 * @export
 */
export type CdashClassDomainsRef = {
    /**
     * 
     * @type {string}
     * @memberof CdashClassDomainsRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClassDomainsRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClassDomainsRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashClassField = {
    /**
     * 
     * @type {string}
     * @memberof CdashClassField
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClassField
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClassField
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClassField
     */
    definition?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClassField
     */
    questionText?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClassField
     */
    prompt?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClassField
     */
    simpleDatatype?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClassField
     */
    implementationNotes?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClassField
     */
    mappingInstructions?: string;
    /**
     * 
     * @type {CdashClassFieldLinks}
     * @memberof CdashClassField
     */
    _links?: CdashClassFieldLinks;
}

/**
 * 
 * @export
 */
export type CdashClassFieldLinks = {
    /**
     * 
     * @type {CdashClassFieldRef}
     * @memberof CdashClassFieldLinks
     */
    self?: CdashClassFieldRef;
    /**
     * 
     * @type {Array<RootCtCodelistRefElement>}
     * @memberof CdashClassFieldLinks
     */
    codelist?: Array<RootCtCodelistRefElement>;
    /**
     * 
     * @type {CdashProductRef}
     * @memberof CdashClassFieldLinks
     */
    parentProduct?: CdashProductRef;
    /**
     * 
     * @type {CdashClassRef}
     * @memberof CdashClassFieldLinks
     */
    parentClass?: CdashClassRef;
    /**
     * 
     * @type {RootCdashClassFieldRef}
     * @memberof CdashClassFieldLinks
     */
    rootItem?: RootCdashClassFieldRef;
    /**
     * 
     * @type {CdashClassFieldRef}
     * @memberof CdashClassFieldLinks
     */
    priorVersion?: CdashClassFieldRef;
    /**
     * 
     * @type {Array<SdtmClassVariableRefTarget>}
     * @memberof CdashClassFieldLinks
     */
    sdtmClassMappingTargets?: Array<SdtmClassVariableRefTarget>;
    /**
     * 
     * @type {Array<SdtmDatasetVariableRefTarget>}
     * @memberof CdashClassFieldLinks
     */
    sdtmDatasetMappingTargets?: Array<SdtmDatasetVariableRefTarget>;
}

/**
 * 
 * @export
 */
export type CdashClassFieldRef = {
    /**
     * 
     * @type {string}
     * @memberof CdashClassFieldRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClassFieldRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClassFieldRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashClassFieldRefVersion = {
    /**
     * 
     * @type {string}
     * @memberof CdashClassFieldRefVersion
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClassFieldRefVersion
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClassFieldRefVersion
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashClassLinks = {
    /**
     * 
     * @type {CdashClassRef}
     * @memberof CdashClassLinks
     */
    self?: CdashClassRef;
    /**
     * 
     * @type {CdashProductRef}
     * @memberof CdashClassLinks
     */
    parentProduct?: CdashProductRef;
    /**
     * 
     * @type {CdashClassRef}
     * @memberof CdashClassLinks
     */
    priorVersion?: CdashClassRef;
}

/**
 * 
 * @export
 */
export type CdashClassRef = {
    /**
     * 
     * @type {string}
     * @memberof CdashClassRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClassRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClassRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashClassRefElement = {
    /**
     * 
     * @type {string}
     * @memberof CdashClassRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClassRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashClassRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashDomain = {
    /**
     * 
     * @type {string}
     * @memberof CdashDomain
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomain
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomain
     */
    label?: string;
    /**
     * 
     * @type {CdashDomainLinks}
     * @memberof CdashDomain
     */
    _links?: CdashDomainLinks;
    /**
     * 
     * @type {Array<CdashDomainField>}
     * @memberof CdashDomain
     */
    fields?: Array<CdashDomainField>;
}

/**
 * 
 * @export
 */
export type CdashDomainField = {
    /**
     * 
     * @type {string}
     * @memberof CdashDomainField
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainField
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainField
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainField
     */
    definition?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainField
     */
    domainSpecific?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainField
     */
    questionText?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainField
     */
    prompt?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainField
     */
    simpleDatatype?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainField
     */
    implementationNotes?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainField
     */
    mappingInstructions?: string;
    /**
     * 
     * @type {CdashDomainFieldLinks}
     * @memberof CdashDomainField
     */
    _links?: CdashDomainFieldLinks;
}

/**
 * 
 * @export
 */
export type CdashDomainFieldLinks = {
    /**
     * 
     * @type {CdashDomainFieldRef}
     * @memberof CdashDomainFieldLinks
     */
    self?: CdashDomainFieldRef;
    /**
     * 
     * @type {Array<RootCtCodelistRefElement>}
     * @memberof CdashDomainFieldLinks
     */
    codelist?: Array<RootCtCodelistRefElement>;
    /**
     * 
     * @type {CdashProductRef}
     * @memberof CdashDomainFieldLinks
     */
    parentProduct?: CdashProductRef;
    /**
     * 
     * @type {CdashClassRef}
     * @memberof CdashDomainFieldLinks
     */
    parentClass?: CdashClassRef;
    /**
     * 
     * @type {CdashDomainRef}
     * @memberof CdashDomainFieldLinks
     */
    parentDomain?: CdashDomainRef;
    /**
     * 
     * @type {RootCdashDomainFieldRef}
     * @memberof CdashDomainFieldLinks
     */
    rootItem?: RootCdashDomainFieldRef;
    /**
     * 
     * @type {CdashDomainFieldRef}
     * @memberof CdashDomainFieldLinks
     */
    priorVersion?: CdashDomainFieldRef;
    /**
     * 
     * @type {Array<SdtmDatasetVariableRefTarget>}
     * @memberof CdashDomainFieldLinks
     */
    sdtmDatasetMappingTargets?: Array<SdtmDatasetVariableRefTarget>;
    /**
     * 
     * @type {Array<SdtmigDatasetVariableRefTarget>}
     * @memberof CdashDomainFieldLinks
     */
    sdtmigDatasetMappingTargets?: Array<SdtmigDatasetVariableRefTarget>;
}

/**
 * 
 * @export
 */
export type CdashDomainFieldRef = {
    /**
     * 
     * @type {string}
     * @memberof CdashDomainFieldRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainFieldRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainFieldRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashDomainFieldRefElement = {
    /**
     * 
     * @type {string}
     * @memberof CdashDomainFieldRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainFieldRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainFieldRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashDomainFieldRefVersion = {
    /**
     * 
     * @type {string}
     * @memberof CdashDomainFieldRefVersion
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainFieldRefVersion
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainFieldRefVersion
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashDomainFields = {
    /**
     * 
     * @type {string}
     * @memberof CdashDomainFields
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainFields
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainFields
     */
    label?: string;
    /**
     * 
     * @type {CdashDomainFieldsLinks}
     * @memberof CdashDomainFields
     */
    _links?: CdashDomainFieldsLinks;
}

/**
 * 
 * @export
 */
export type CdashDomainFieldsLinks = {
    /**
     * 
     * @type {CdashDomainFieldsRef}
     * @memberof CdashDomainFieldsLinks
     */
    self?: CdashDomainFieldsRef;
    /**
     * 
     * @type {CdashProductRef}
     * @memberof CdashDomainFieldsLinks
     */
    parentProduct?: CdashProductRef;
    /**
     * 
     * @type {CdashClassRef}
     * @memberof CdashDomainFieldsLinks
     */
    parentClass?: CdashClassRef;
    /**
     * 
     * @type {Array<CdashDomainFieldRefElement>}
     * @memberof CdashDomainFieldsLinks
     */
    fields?: Array<CdashDomainFieldRefElement>;
}

/**
 * 
 * @export
 */
export type CdashDomainFieldsRef = {
    /**
     * 
     * @type {string}
     * @memberof CdashDomainFieldsRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainFieldsRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainFieldsRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashDomainLinks = {
    /**
     * 
     * @type {CdashDomainRef}
     * @memberof CdashDomainLinks
     */
    self?: CdashDomainRef;
    /**
     * 
     * @type {CdashProductRef}
     * @memberof CdashDomainLinks
     */
    parentProduct?: CdashProductRef;
    /**
     * 
     * @type {CdashClassRef}
     * @memberof CdashDomainLinks
     */
    parentClass?: CdashClassRef;
    /**
     * 
     * @type {CdashDomainRef}
     * @memberof CdashDomainLinks
     */
    priorVersion?: CdashDomainRef;
}

/**
 * 
 * @export
 */
export type CdashDomainRef = {
    /**
     * 
     * @type {string}
     * @memberof CdashDomainRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashDomainRefElement = {
    /**
     * 
     * @type {string}
     * @memberof CdashDomainRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashDomainRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashProduct = {
    /**
     * 
     * @type {string}
     * @memberof CdashProduct
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProduct
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProduct
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProduct
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProduct
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProduct
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProduct
     */
    version?: string;
    /**
     * 
     * @type {CdashProductLinks}
     * @memberof CdashProduct
     */
    _links?: CdashProductLinks;
    /**
     * 
     * @type {Array<CdashClass>}
     * @memberof CdashProduct
     */
    classes?: Array<CdashClass>;
    /**
     * 
     * @type {Array<CdashDomain>}
     * @memberof CdashProduct
     */
    domains?: Array<CdashDomain>;
}

/**
 * 
 * @export
 */
export type CdashProductClasses = {
    /**
     * 
     * @type {string}
     * @memberof CdashProductClasses
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProductClasses
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProductClasses
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProductClasses
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProductClasses
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProductClasses
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProductClasses
     */
    version?: string;
    /**
     * 
     * @type {CdashProductClassesLinks}
     * @memberof CdashProductClasses
     */
    _links?: CdashProductClassesLinks;
}

/**
 * 
 * @export
 */
export type CdashProductClassesLinks = {
    /**
     * 
     * @type {CdashProductClassesRef}
     * @memberof CdashProductClassesLinks
     */
    self?: CdashProductClassesRef;
    /**
     * 
     * @type {CdashProductRef}
     * @memberof CdashProductClassesLinks
     */
    parentProduct?: CdashProductRef;
    /**
     * 
     * @type {Array<CdashClassRefElement>}
     * @memberof CdashProductClassesLinks
     */
    classes?: Array<CdashClassRefElement>;
}

/**
 * 
 * @export
 */
export type CdashProductClassesRef = {
    /**
     * 
     * @type {string}
     * @memberof CdashProductClassesRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProductClassesRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProductClassesRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashProductDomains = {
    /**
     * 
     * @type {string}
     * @memberof CdashProductDomains
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProductDomains
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProductDomains
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProductDomains
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProductDomains
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProductDomains
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProductDomains
     */
    version?: string;
    /**
     * 
     * @type {CdashProductDomainsLinks}
     * @memberof CdashProductDomains
     */
    _links?: CdashProductDomainsLinks;
}

/**
 * 
 * @export
 */
export type CdashProductDomainsLinks = {
    /**
     * 
     * @type {CdashProductDomainsRef}
     * @memberof CdashProductDomainsLinks
     */
    self?: CdashProductDomainsRef;
    /**
     * 
     * @type {CdashProductRef}
     * @memberof CdashProductDomainsLinks
     */
    parentProduct?: CdashProductRef;
    /**
     * 
     * @type {Array<CdashDomainRefElement>}
     * @memberof CdashProductDomainsLinks
     */
    domains?: Array<CdashDomainRefElement>;
}

/**
 * 
 * @export
 */
export type CdashProductDomainsRef = {
    /**
     * 
     * @type {string}
     * @memberof CdashProductDomainsRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProductDomainsRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProductDomainsRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashProductLinks = {
    /**
     * 
     * @type {CdashProductRef}
     * @memberof CdashProductLinks
     */
    self?: CdashProductRef;
    /**
     * 
     * @type {CdashProductRef}
     * @memberof CdashProductLinks
     */
    priorVersion?: CdashProductRef;
}

/**
 * 
 * @export
 */
export type CdashProductRef = {
    /**
     * 
     * @type {string}
     * @memberof CdashProductRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProductRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProductRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashProductRefElement = {
    /**
     * 
     * @type {string}
     * @memberof CdashProductRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProductRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashProductRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashigClass = {
    /**
     * 
     * @type {string}
     * @memberof CdashigClass
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigClass
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigClass
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigClass
     */
    description?: string;
    /**
     * 
     * @type {CdashigClassLinks}
     * @memberof CdashigClass
     */
    _links?: CdashigClassLinks;
    /**
     * 
     * @type {Array<CdashigDomain>}
     * @memberof CdashigClass
     */
    domains?: Array<CdashigDomain>;
    /**
     * 
     * @type {Array<CdashigScenario>}
     * @memberof CdashigClass
     */
    scenarios?: Array<CdashigScenario>;
}

/**
 * 
 * @export
 */
export type CdashigClassDomains = {
    /**
     * 
     * @type {string}
     * @memberof CdashigClassDomains
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigClassDomains
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigClassDomains
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigClassDomains
     */
    description?: string;
    /**
     * 
     * @type {CdashigClassDomainsLinks}
     * @memberof CdashigClassDomains
     */
    _links?: CdashigClassDomainsLinks;
}

/**
 * 
 * @export
 */
export type CdashigClassDomainsLinks = {
    /**
     * 
     * @type {CdashigClassDomainsRef}
     * @memberof CdashigClassDomainsLinks
     */
    self?: CdashigClassDomainsRef;
    /**
     * 
     * @type {Array<CdashigDomainRefElement>}
     * @memberof CdashigClassDomainsLinks
     */
    domains?: Array<CdashigDomainRefElement>;
}

/**
 * 
 * @export
 */
export type CdashigClassDomainsRef = {
    /**
     * 
     * @type {string}
     * @memberof CdashigClassDomainsRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigClassDomainsRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigClassDomainsRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashigClassLinks = {
    /**
     * 
     * @type {CdashigClassRef}
     * @memberof CdashigClassLinks
     */
    self?: CdashigClassRef;
    /**
     * 
     * @type {CdashClassRef}
     * @memberof CdashigClassLinks
     */
    modelClass?: CdashClassRef;
    /**
     * 
     * @type {CdashigProductRef}
     * @memberof CdashigClassLinks
     */
    parentProduct?: CdashigProductRef;
    /**
     * 
     * @type {CdashigClassRef}
     * @memberof CdashigClassLinks
     */
    parentClass?: CdashigClassRef;
    /**
     * 
     * @type {Array<CdashigClassRefSubclass>}
     * @memberof CdashigClassLinks
     */
    subclasses?: Array<CdashigClassRefSubclass>;
    /**
     * 
     * @type {CdashigClassRef}
     * @memberof CdashigClassLinks
     */
    priorVersion?: CdashigClassRef;
}

/**
 * 
 * @export
 */
export type CdashigClassRef = {
    /**
     * 
     * @type {string}
     * @memberof CdashigClassRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigClassRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigClassRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashigClassRefElement = {
    /**
     * 
     * @type {string}
     * @memberof CdashigClassRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigClassRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigClassRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashigClassRefSubclass = {
    /**
     * 
     * @type {string}
     * @memberof CdashigClassRefSubclass
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigClassRefSubclass
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigClassRefSubclass
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashigClassScenarios = {
    /**
     * 
     * @type {string}
     * @memberof CdashigClassScenarios
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigClassScenarios
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigClassScenarios
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigClassScenarios
     */
    description?: string;
    /**
     * 
     * @type {CdashigClassScenariosLinks}
     * @memberof CdashigClassScenarios
     */
    _links?: CdashigClassScenariosLinks;
}

/**
 * 
 * @export
 */
export type CdashigClassScenariosLinks = {
    /**
     * 
     * @type {CdashigClassScenariosRef}
     * @memberof CdashigClassScenariosLinks
     */
    self?: CdashigClassScenariosRef;
    /**
     * 
     * @type {Array<CdashigScenarioRefElement>}
     * @memberof CdashigClassScenariosLinks
     */
    scenarios?: Array<CdashigScenarioRefElement>;
}

/**
 * 
 * @export
 */
export type CdashigClassScenariosRef = {
    /**
     * 
     * @type {string}
     * @memberof CdashigClassScenariosRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigClassScenariosRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigClassScenariosRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashigDomain = {
    /**
     * 
     * @type {string}
     * @memberof CdashigDomain
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomain
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomain
     */
    label?: string;
    /**
     * 
     * @type {CdashigDomainLinks}
     * @memberof CdashigDomain
     */
    _links?: CdashigDomainLinks;
    /**
     * 
     * @type {Array<CdashigDomainField>}
     * @memberof CdashigDomain
     */
    fields?: Array<CdashigDomainField>;
}

/**
 * 
 * @export
 */
export type CdashigDomainField = {
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainField
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainField
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainField
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainField
     */
    definition?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainField
     */
    questionText?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainField
     */
    prompt?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainField
     */
    completionInstructions?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainField
     */
    implementationNotes?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainField
     */
    simpleDatatype?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainField
     */
    mappingInstructions?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainField
     */
    core?: string;
    /**
     * 
     * @type {CdashigDomainFieldLinks}
     * @memberof CdashigDomainField
     */
    _links?: CdashigDomainFieldLinks;
}

/**
 * 
 * @export
 */
export type CdashigDomainFieldLinks = {
    /**
     * 
     * @type {CdashigDomainFieldRef}
     * @memberof CdashigDomainFieldLinks
     */
    self?: CdashigDomainFieldRef;
    /**
     * 
     * @type {Array<RootCtCodelistRefElement>}
     * @memberof CdashigDomainFieldLinks
     */
    codelist?: Array<RootCtCodelistRefElement>;
    /**
     * 
     * @type {CdashigProductRef}
     * @memberof CdashigDomainFieldLinks
     */
    parentProduct?: CdashigProductRef;
    /**
     * 
     * @type {CdashigDomainRef}
     * @memberof CdashigDomainFieldLinks
     */
    parentDomain?: CdashigDomainRef;
    /**
     * 
     * @type {RootCdashigDomainFieldRef}
     * @memberof CdashigDomainFieldLinks
     */
    rootItem?: RootCdashigDomainFieldRef;
    /**
     * 
     * @type {CdashigDomainFieldRef}
     * @memberof CdashigDomainFieldLinks
     */
    priorVersion?: CdashigDomainFieldRef;
    /**
     * 
     * @type {Array<SdtmClassVariableRefTarget>}
     * @memberof CdashigDomainFieldLinks
     */
    sdtmClassMappingTargets?: Array<SdtmClassVariableRefTarget>;
    /**
     * 
     * @type {Array<SdtmigDatasetVariableRefTarget>}
     * @memberof CdashigDomainFieldLinks
     */
    sdtmigDatasetMappingTargets?: Array<SdtmigDatasetVariableRefTarget>;
}

/**
 * 
 * @export
 */
export type CdashigDomainFieldRef = {
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainFieldRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainFieldRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainFieldRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashigDomainFieldRefElement = {
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainFieldRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainFieldRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainFieldRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashigDomainFieldRefVersion = {
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainFieldRefVersion
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainFieldRefVersion
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainFieldRefVersion
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashigDomainFields = {
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainFields
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainFields
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainFields
     */
    label?: string;
    /**
     * 
     * @type {CdashigDomainFieldsLinks}
     * @memberof CdashigDomainFields
     */
    _links?: CdashigDomainFieldsLinks;
}

/**
 * 
 * @export
 */
export type CdashigDomainFieldsLinks = {
    /**
     * 
     * @type {CdashigDomainFieldsRef}
     * @memberof CdashigDomainFieldsLinks
     */
    self?: CdashigDomainFieldsRef;
    /**
     * 
     * @type {CdashigProductRef}
     * @memberof CdashigDomainFieldsLinks
     */
    parentProduct?: CdashigProductRef;
    /**
     * 
     * @type {CdashigClassRef}
     * @memberof CdashigDomainFieldsLinks
     */
    parentClass?: CdashigClassRef;
    /**
     * 
     * @type {Array<CdashigDomainFieldRefElement>}
     * @memberof CdashigDomainFieldsLinks
     */
    fields?: Array<CdashigDomainFieldRefElement>;
}

/**
 * 
 * @export
 */
export type CdashigDomainFieldsRef = {
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainFieldsRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainFieldsRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainFieldsRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashigDomainLinks = {
    /**
     * 
     * @type {CdashigDomainRef}
     * @memberof CdashigDomainLinks
     */
    self?: CdashigDomainRef;
    /**
     * 
     * @type {CdashigProductRef}
     * @memberof CdashigDomainLinks
     */
    parentProduct?: CdashigProductRef;
    /**
     * 
     * @type {CdashigClassRef}
     * @memberof CdashigDomainLinks
     */
    parentClass?: CdashigClassRef;
    /**
     * 
     * @type {CdashigDomainRef}
     * @memberof CdashigDomainLinks
     */
    priorVersion?: CdashigDomainRef;
    /**
     * 
     * @type {Array<CdashigScenarioRefElement>}
     * @memberof CdashigDomainLinks
     */
    scenarios?: Array<CdashigScenarioRefElement>;
}

/**
 * 
 * @export
 */
export type CdashigDomainRef = {
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashigDomainRefElement = {
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigDomainRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashigProduct = {
    /**
     * 
     * @type {string}
     * @memberof CdashigProduct
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProduct
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProduct
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProduct
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProduct
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProduct
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProduct
     */
    version?: string;
    /**
     * 
     * @type {CdashigProductLinks}
     * @memberof CdashigProduct
     */
    _links?: CdashigProductLinks;
    /**
     * 
     * @type {Array<CdashigClass>}
     * @memberof CdashigProduct
     */
    classes?: Array<CdashigClass>;
}

/**
 * 
 * @export
 */
export type CdashigProductClasses = {
    /**
     * 
     * @type {string}
     * @memberof CdashigProductClasses
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductClasses
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductClasses
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductClasses
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductClasses
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductClasses
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductClasses
     */
    version?: string;
    /**
     * 
     * @type {CdashigProductClassesLinks}
     * @memberof CdashigProductClasses
     */
    _links?: CdashigProductClassesLinks;
}

/**
 * 
 * @export
 */
export type CdashigProductClassesLinks = {
    /**
     * 
     * @type {CdashigProductClassesRef}
     * @memberof CdashigProductClassesLinks
     */
    self?: CdashigProductClassesRef;
    /**
     * 
     * @type {CdashigProductRef}
     * @memberof CdashigProductClassesLinks
     */
    parentProduct?: CdashigProductRef;
    /**
     * 
     * @type {Array<CdashigClassRefElement>}
     * @memberof CdashigProductClassesLinks
     */
    classes?: Array<CdashigClassRefElement>;
}

/**
 * 
 * @export
 */
export type CdashigProductClassesRef = {
    /**
     * 
     * @type {string}
     * @memberof CdashigProductClassesRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductClassesRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductClassesRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashigProductDomains = {
    /**
     * 
     * @type {string}
     * @memberof CdashigProductDomains
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductDomains
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductDomains
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductDomains
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductDomains
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductDomains
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductDomains
     */
    version?: string;
    /**
     * 
     * @type {CdashigProductDomainsLinks}
     * @memberof CdashigProductDomains
     */
    _links?: CdashigProductDomainsLinks;
}

/**
 * 
 * @export
 */
export type CdashigProductDomainsLinks = {
    /**
     * 
     * @type {CdashigProductDomainsRef}
     * @memberof CdashigProductDomainsLinks
     */
    self?: CdashigProductDomainsRef;
    /**
     * 
     * @type {CdashigProductRef}
     * @memberof CdashigProductDomainsLinks
     */
    parentProduct?: CdashigProductRef;
    /**
     * 
     * @type {Array<CdashigDomainRefElement>}
     * @memberof CdashigProductDomainsLinks
     */
    domains?: Array<CdashigDomainRefElement>;
}

/**
 * 
 * @export
 */
export type CdashigProductDomainsRef = {
    /**
     * 
     * @type {string}
     * @memberof CdashigProductDomainsRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductDomainsRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductDomainsRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashigProductLinks = {
    /**
     * 
     * @type {CdashigProductRef}
     * @memberof CdashigProductLinks
     */
    self?: CdashigProductRef;
    /**
     * 
     * @type {CdashProductRef}
     * @memberof CdashigProductLinks
     */
    model?: CdashProductRef;
    /**
     * 
     * @type {CdashigProductRef}
     * @memberof CdashigProductLinks
     */
    priorVersion?: CdashigProductRef;
}

/**
 * 
 * @export
 */
export type CdashigProductRef = {
    /**
     * 
     * @type {string}
     * @memberof CdashigProductRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashigProductRefElement = {
    /**
     * 
     * @type {string}
     * @memberof CdashigProductRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashigProductScenarios = {
    /**
     * 
     * @type {string}
     * @memberof CdashigProductScenarios
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductScenarios
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductScenarios
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductScenarios
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductScenarios
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductScenarios
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductScenarios
     */
    version?: string;
    /**
     * 
     * @type {CdashigProductScenariosLinks}
     * @memberof CdashigProductScenarios
     */
    _links?: CdashigProductScenariosLinks;
}

/**
 * 
 * @export
 */
export type CdashigProductScenariosLinks = {
    /**
     * 
     * @type {CdashigProductScenariosRef}
     * @memberof CdashigProductScenariosLinks
     */
    self?: CdashigProductScenariosRef;
    /**
     * 
     * @type {CdashigProductRef}
     * @memberof CdashigProductScenariosLinks
     */
    parentProduct?: CdashigProductRef;
    /**
     * 
     * @type {Array<CdashigScenarioRefElement>}
     * @memberof CdashigProductScenariosLinks
     */
    scenarios?: Array<CdashigScenarioRefElement>;
}

/**
 * 
 * @export
 */
export type CdashigProductScenariosRef = {
    /**
     * 
     * @type {string}
     * @memberof CdashigProductScenariosRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductScenariosRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigProductScenariosRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashigScenario = {
    /**
     * 
     * @type {string}
     * @memberof CdashigScenario
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenario
     */
    domain?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenario
     */
    scenario?: string;
    /**
     * 
     * @type {CdashigScenarioLinks}
     * @memberof CdashigScenario
     */
    _links?: CdashigScenarioLinks;
    /**
     * 
     * @type {Array<CdashigScenarioField>}
     * @memberof CdashigScenario
     */
    fields?: Array<CdashigScenarioField>;
}

/**
 * 
 * @export
 */
export type CdashigScenarioField = {
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioField
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioField
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioField
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioField
     */
    definition?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioField
     */
    questionText?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioField
     */
    prompt?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioField
     */
    completionInstructions?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioField
     */
    implementationNotes?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioField
     */
    simpleDatatype?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioField
     */
    mappingInstructions?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioField
     */
    core?: string;
    /**
     * 
     * @type {CdashigScenarioFieldLinks}
     * @memberof CdashigScenarioField
     */
    _links?: CdashigScenarioFieldLinks;
}

/**
 * 
 * @export
 */
export type CdashigScenarioFieldLinks = {
    /**
     * 
     * @type {CdashigScenarioFieldRef}
     * @memberof CdashigScenarioFieldLinks
     */
    self?: CdashigScenarioFieldRef;
    /**
     * 
     * @type {Array<RootCtCodelistRefElement>}
     * @memberof CdashigScenarioFieldLinks
     */
    codelist?: Array<RootCtCodelistRefElement>;
    /**
     * 
     * @type {CdashigProductRef}
     * @memberof CdashigScenarioFieldLinks
     */
    parentProduct?: CdashigProductRef;
    /**
     * 
     * @type {CdashigDomainRef}
     * @memberof CdashigScenarioFieldLinks
     */
    parentDomain?: CdashigDomainRef;
    /**
     * 
     * @type {CdashigScenarioRef}
     * @memberof CdashigScenarioFieldLinks
     */
    parentScenario?: CdashigScenarioRef;
    /**
     * 
     * @type {RootCdashigScenarioFieldRef}
     * @memberof CdashigScenarioFieldLinks
     */
    rootItem?: RootCdashigScenarioFieldRef;
    /**
     * 
     * @type {CdashigScenarioFieldRef}
     * @memberof CdashigScenarioFieldLinks
     */
    priorVersion?: CdashigScenarioFieldRef;
    /**
     * 
     * @type {Array<SdtmigDatasetVariableRefTarget>}
     * @memberof CdashigScenarioFieldLinks
     */
    sdtmigDatasetMappingTargets?: Array<SdtmigDatasetVariableRefTarget>;
}

/**
 * 
 * @export
 */
export type CdashigScenarioFieldRef = {
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioFieldRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioFieldRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioFieldRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashigScenarioFieldRefElement = {
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioFieldRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioFieldRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioFieldRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashigScenarioFieldRefVersion = {
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioFieldRefVersion
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioFieldRefVersion
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioFieldRefVersion
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashigScenarioFields = {
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioFields
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioFields
     */
    domain?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioFields
     */
    scenario?: string;
    /**
     * 
     * @type {CdashigScenarioFieldsLinks}
     * @memberof CdashigScenarioFields
     */
    _links?: CdashigScenarioFieldsLinks;
}

/**
 * 
 * @export
 */
export type CdashigScenarioFieldsLinks = {
    /**
     * 
     * @type {CdashigScenarioFieldsRef}
     * @memberof CdashigScenarioFieldsLinks
     */
    self?: CdashigScenarioFieldsRef;
    /**
     * 
     * @type {CdashigProductRef}
     * @memberof CdashigScenarioFieldsLinks
     */
    parentProduct?: CdashigProductRef;
    /**
     * 
     * @type {CdashigClassRef}
     * @memberof CdashigScenarioFieldsLinks
     */
    parentClass?: CdashigClassRef;
    /**
     * 
     * @type {CdashigDomainRef}
     * @memberof CdashigScenarioFieldsLinks
     */
    parentDomain?: CdashigDomainRef;
    /**
     * 
     * @type {Array<CdashigScenarioFieldRefElement>}
     * @memberof CdashigScenarioFieldsLinks
     */
    fields?: Array<CdashigScenarioFieldRefElement>;
}

/**
 * 
 * @export
 */
export type CdashigScenarioFieldsRef = {
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioFieldsRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioFieldsRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioFieldsRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashigScenarioLinks = {
    /**
     * 
     * @type {CdashigScenarioRef}
     * @memberof CdashigScenarioLinks
     */
    self?: CdashigScenarioRef;
    /**
     * 
     * @type {CdashigProductRef}
     * @memberof CdashigScenarioLinks
     */
    parentProduct?: CdashigProductRef;
    /**
     * 
     * @type {CdashigClassRef}
     * @memberof CdashigScenarioLinks
     */
    parentClass?: CdashigClassRef;
    /**
     * 
     * @type {CdashigDomainRef}
     * @memberof CdashigScenarioLinks
     */
    parentDomain?: CdashigDomainRef;
    /**
     * 
     * @type {CdashigScenarioRef}
     * @memberof CdashigScenarioLinks
     */
    priorVersion?: CdashigScenarioRef;
}

/**
 * 
 * @export
 */
export type CdashigScenarioRef = {
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CdashigScenarioRefElement = {
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CdashigScenarioRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CtCodelist = {
    /**
     * 
     * @type {string}
     * @memberof CtCodelist
     */
    conceptId?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelist
     */
    extensible?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelist
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelist
     */
    submissionValue?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelist
     */
    definition?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelist
     */
    preferredTerm?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CtCodelist
     */
    synonyms?: Array<string>;
    /**
     * 
     * @type {CtCodelistLinks}
     * @memberof CtCodelist
     */
    _links?: CtCodelistLinks;
    /**
     * 
     * @type {Array<CtPackageTerm>}
     * @memberof CtCodelist
     */
    terms?: Array<CtPackageTerm>;
}

/**
 * 
 * @export
 */
export type CtCodelistLinks = {
    /**
     * 
     * @type {CtCodelistRef}
     * @memberof CtCodelistLinks
     */
    self?: CtCodelistRef;
    /**
     * 
     * @type {CtPackageRef}
     * @memberof CtCodelistLinks
     */
    parentPackage?: CtPackageRef;
    /**
     * 
     * @type {RootCtCodelistRef}
     * @memberof CtCodelistLinks
     */
    rootItem?: RootCtCodelistRef;
    /**
     * 
     * @type {CtCodelistRef}
     * @memberof CtCodelistLinks
     */
    priorVersion?: CtCodelistRef;
}

/**
 * 
 * @export
 */
export type CtCodelistRef = {
    /**
     * 
     * @type {string}
     * @memberof CtCodelistRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelistRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelistRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CtCodelistRefElement = {
    /**
     * 
     * @type {string}
     * @memberof CtCodelistRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelistRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelistRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CtCodelistRefVersion = {
    /**
     * 
     * @type {string}
     * @memberof CtCodelistRefVersion
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelistRefVersion
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelistRefVersion
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CtCodelistTerms = {
    /**
     * 
     * @type {string}
     * @memberof CtCodelistTerms
     */
    conceptId?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelistTerms
     */
    extensible?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelistTerms
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelistTerms
     */
    submissionValue?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelistTerms
     */
    definition?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelistTerms
     */
    preferredTerm?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CtCodelistTerms
     */
    synonyms?: Array<string>;
    /**
     * 
     * @type {CtCodelistTermsLinks}
     * @memberof CtCodelistTerms
     */
    _links?: CtCodelistTermsLinks;
}

/**
 * 
 * @export
 */
export type CtCodelistTermsLinks = {
    /**
     * 
     * @type {CtCodelistTermsRef}
     * @memberof CtCodelistTermsLinks
     */
    self?: CtCodelistTermsRef;
    /**
     * 
     * @type {CtPackageRef}
     * @memberof CtCodelistTermsLinks
     */
    parentPackage?: CtPackageRef;
    /**
     * 
     * @type {RootCtCodelistRef}
     * @memberof CtCodelistTermsLinks
     */
    rootItem?: RootCtCodelistRef;
    /**
     * 
     * @type {CtCodelistTermsRef}
     * @memberof CtCodelistTermsLinks
     */
    priorVersion?: CtCodelistTermsRef;
    /**
     * 
     * @type {Array<CtTermRefElement>}
     * @memberof CtCodelistTermsLinks
     */
    terms?: Array<CtTermRefElement>;
}

/**
 * 
 * @export
 */
export type CtCodelistTermsRef = {
    /**
     * 
     * @type {string}
     * @memberof CtCodelistTermsRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelistTermsRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelistTermsRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CtPackage = {
    /**
     * 
     * @type {string}
     * @memberof CtPackage
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackage
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackage
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackage
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackage
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackage
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackage
     */
    version?: string;
    /**
     * 
     * @type {CtPackageLinks}
     * @memberof CtPackage
     */
    _links?: CtPackageLinks;
    /**
     * 
     * @type {Array<CtPackageCodelists>}
     * @memberof CtPackage
     */
    codelists?: Array<CtPackageCodelists>;
}

/**
 * 
 * @export
 */
export type CtPackageCodelists = {
    /**
     * 
     * @type {string}
     * @memberof CtPackageCodelists
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackageCodelists
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackageCodelists
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackageCodelists
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackageCodelists
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackageCodelists
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackageCodelists
     */
    version?: string;
    /**
     * 
     * @type {CtPackageCodelistsLinks}
     * @memberof CtPackageCodelists
     */
    _links?: CtPackageCodelistsLinks;
}

/**
 * 
 * @export
 */
export type CtPackageCodelistsLinks = {
    /**
     * 
     * @type {CtPackageCodelistsRef}
     * @memberof CtPackageCodelistsLinks
     */
    self?: CtPackageCodelistsRef;
    /**
     * 
     * @type {CtPackageCodelistsRef}
     * @memberof CtPackageCodelistsLinks
     */
    priorVersion?: CtPackageCodelistsRef;
    /**
     * 
     * @type {Array<CtCodelistRefElement>}
     * @memberof CtPackageCodelistsLinks
     */
    codelists?: Array<CtCodelistRefElement>;
}

/**
 * 
 * @export
 */
export type CtPackageCodelistsRef = {
    /**
     * 
     * @type {string}
     * @memberof CtPackageCodelistsRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackageCodelistsRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackageCodelistsRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CtPackageLinks = {
    /**
     * 
     * @type {CtPackageRef}
     * @memberof CtPackageLinks
     */
    self?: CtPackageRef;
    /**
     * 
     * @type {CtPackageRef}
     * @memberof CtPackageLinks
     */
    priorVersion?: CtPackageRef;
}

/**
 * 
 * @export
 */
export type CtPackageRef = {
    /**
     * 
     * @type {string}
     * @memberof CtPackageRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackageRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackageRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CtPackageRefElement = {
    /**
     * 
     * @type {string}
     * @memberof CtPackageRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackageRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackageRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CtPackageTerm = {
    /**
     * 
     * @type {string}
     * @memberof CtPackageTerm
     */
    conceptId?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackageTerm
     */
    submissionValue?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackageTerm
     */
    definition?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackageTerm
     */
    preferredTerm?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CtPackageTerm
     */
    synonyms?: Array<string>;
}

/**
 * 
 * @export
 */
export type CtPackages = {
    /**
     * 
     * @type {CtPackagesLinks}
     * @memberof CtPackages
     */
    _links?: CtPackagesLinks;
}

/**
 * 
 * @export
 */
export type CtPackagesLinks = {
    /**
     * 
     * @type {CtPackagesRef}
     * @memberof CtPackagesLinks
     */
    self?: CtPackagesRef;
    /**
     * 
     * @type {Array<CtPackageRefElement>}
     * @memberof CtPackagesLinks
     */
    packages?: Array<CtPackageRefElement>;
}

/**
 * 
 * @export
 */
export type CtPackagesRef = {
    /**
     * 
     * @type {string}
     * @memberof CtPackagesRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackagesRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CtPackagesRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CtTerm = {
    /**
     * 
     * @type {string}
     * @memberof CtTerm
     */
    conceptId?: string;
    /**
     * 
     * @type {string}
     * @memberof CtTerm
     */
    submissionValue?: string;
    /**
     * 
     * @type {string}
     * @memberof CtTerm
     */
    definition?: string;
    /**
     * 
     * @type {string}
     * @memberof CtTerm
     */
    preferredTerm?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CtTerm
     */
    synonyms?: Array<string>;
    /**
     * 
     * @type {CtTermLinks}
     * @memberof CtTerm
     */
    _links?: CtTermLinks;
}

/**
 * 
 * @export
 */
export type CtTermLinks = {
    /**
     * 
     * @type {CtTermRef}
     * @memberof CtTermLinks
     */
    self?: CtTermRef;
    /**
     * 
     * @type {CtPackageRef}
     * @memberof CtTermLinks
     */
    parentPackage?: CtPackageRef;
    /**
     * 
     * @type {CtCodelistRef}
     * @memberof CtTermLinks
     */
    parentCodelist?: CtCodelistRef;
    /**
     * 
     * @type {RootCtTermRef}
     * @memberof CtTermLinks
     */
    rootItem?: RootCtTermRef;
    /**
     * 
     * @type {CtTermRef}
     * @memberof CtTermLinks
     */
    priorVersion?: CtTermRef;
}

/**
 * 
 * @export
 */
export type CtTermRef = {
    /**
     * 
     * @type {string}
     * @memberof CtTermRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CtTermRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CtTermRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CtTermRefElement = {
    /**
     * 
     * @type {string}
     * @memberof CtTermRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CtTermRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CtTermRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type CtTermRefVersion = {
    /**
     * 
     * @type {string}
     * @memberof CtTermRefVersion
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof CtTermRefVersion
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CtTermRefVersion
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type DefaultErrorResponse = {
    /**
     * HTTP Status Code
     * @type {string}
     * @memberof DefaultErrorResponse
     */
    statusCode?: string;
    /**
     * HTTP Reason Phrase
     * @type {string}
     * @memberof DefaultErrorResponse
     */
    reasonPhrase?: string;
    /**
     * User Error Message
     * @type {string}
     * @memberof DefaultErrorResponse
     */
    userMessage?: string;
    /**
     * Admin Error Message
     * @type {string}
     * @memberof DefaultErrorResponse
     */
    adminMessage?: string;
}

/**
 * 
 * @export
 */
export type DefaultSearchResponse = {
    /**
     * 
     * @type {Array<DefaultSearchResponseHitsInner>}
     * @memberof DefaultSearchResponse
     */
    hits?: Array<DefaultSearchResponseHitsInner>;
    /**
     * 
     * @type {number}
     * @memberof DefaultSearchResponse
     */
    totalHits?: number;
}

/**
 * 
 * @export
 */
export type DefaultSearchResponseHitsInner = {
    [key: string]: string | any;

    /**
     * 
     * @type {string}
     * @memberof DefaultSearchResponseHitsInner
     */
    href: string;
    /**
     * 
     * @type {string}
     * @memberof DefaultSearchResponseHitsInner
     */
    type: string;
}

/**
 * 
 * @export
 * @enum {string}
 */
export type DefaultSearchScopes = 'class' | 'codelist' | 'conceptId' | 'core' | 'dataStructure' | 'datasetStructure' | 'definition' | 'description' | 'domain' | 'effectiveDate' | 'extensible' | 'href' | 'label' | 'measureType' | 'name' | 'preferredTerm' | 'product' | 'productGroup' | 'registrationStatus' | 'roleDescription' | 'sdtmTarget' | 'simpleDatatype' | 'submissionValue' | 'synonyms' | 'type' | 'uiHref' | 'valueDomain' | 'variableSet' | 'version';

/**
 * 
 * @export
 */
export type ExportAdamDatastructuresRow = {
    /**
     * 
     * @type {string}
     * @memberof ExportAdamDatastructuresRow
     */
    Version?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamDatastructuresRow
     */
    Data_Structure_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamDatastructuresRow
     */
    Dataset_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamDatastructuresRow
     */
    Dataset_Label?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamDatastructuresRow
     */
    Dataset_Description?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamDatastructuresRow
     */
    Class?: string;
}

/**
 * 
 * @export
 */
export type ExportAdamDatastructuresTable = {
    /**
     * 
     * @type {Array<ExportAdamDatastructuresRow>}
     * @memberof ExportAdamDatastructuresTable
     */
    datastructures?: Array<ExportAdamDatastructuresRow>;
}

/**
 * 
 * @export
 */
export type ExportAdamVariablesRow = {
    /**
     * 
     * @type {string}
     * @memberof ExportAdamVariablesRow
     */
    Version?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamVariablesRow
     */
    Data_Structure_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamVariablesRow
     */
    Dataset_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamVariablesRow
     */
    Variable_Group?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamVariablesRow
     */
    Variable_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamVariablesRow
     */
    Variable_Label?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamVariablesRow
     */
    Type?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamVariablesRow
     */
    Codelist_Controlled_Terms?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamVariablesRow
     */
    Core?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamVariablesRow
     */
    CDISC_Notes?: string;
}

/**
 * 
 * @export
 */
export type ExportAdamVariablesTable = {
    /**
     * 
     * @type {Array<ExportAdamVariablesRow>}
     * @memberof ExportAdamVariablesTable
     */
    variables?: Array<ExportAdamVariablesRow>;
}

/**
 * 
 * @export
 */
export type ExportAdamWorkbook = {
    /**
     * 
     * @type {Array<ExportAdamVariablesRow>}
     * @memberof ExportAdamWorkbook
     */
    variables?: Array<ExportAdamVariablesRow>;
    /**
     * 
     * @type {Array<ExportAdamDatastructuresRow>}
     * @memberof ExportAdamWorkbook
     */
    datastructures?: Array<ExportAdamDatastructuresRow>;
}

/**
 * 
 * @export
 */
export type ExportCdashClassVariablesRow = {
    /**
     * 
     * @type {string}
     * @memberof ExportCdashClassVariablesRow
     */
    Version?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashClassVariablesRow
     */
    Class?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashClassVariablesRow
     */
    Domain?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashClassVariablesRow
     */
    Variable_Order?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashClassVariablesRow
     */
    CDASH_Variable?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashClassVariablesRow
     */
    CDASH_Variable_Label?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashClassVariablesRow
     */
    DRAFT_CDASH_Definition?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashClassVariablesRow
     */
    Domain_Specific?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashClassVariablesRow
     */
    Question_Text?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashClassVariablesRow
     */
    Prompt?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashClassVariablesRow
     */
    Type?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ExportCdashClassVariablesRow
     */
    SDTM_Target?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashClassVariablesRow
     */
    Mapping_Instructions?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashClassVariablesRow
     */
    Controlled_Terminology_Codelist_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashClassVariablesRow
     */
    Implementation_Notes?: string;
}

/**
 * 
 * @export
 */
export type ExportCdashDomainVariablesRow = {
    /**
     * 
     * @type {string}
     * @memberof ExportCdashDomainVariablesRow
     */
    Version?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashDomainVariablesRow
     */
    Class?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashDomainVariablesRow
     */
    Domain?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashDomainVariablesRow
     */
    Variable_Order?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashDomainVariablesRow
     */
    CDASH_Variable?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashDomainVariablesRow
     */
    CDASH_Variable_Label?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashDomainVariablesRow
     */
    DRAFT_CDASH_Definition?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashDomainVariablesRow
     */
    Domain_Specific?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashDomainVariablesRow
     */
    Question_Text?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashDomainVariablesRow
     */
    Prompt?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashDomainVariablesRow
     */
    Type?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ExportCdashDomainVariablesRow
     */
    SDTM_Target?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashDomainVariablesRow
     */
    Mapping_Instructions?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashDomainVariablesRow
     */
    Controlled_Terminology_Codelist_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashDomainVariablesRow
     */
    Implementation_Notes?: string;
}

/**
 * 
 * @export
 */
export type ExportCdashTable = {
    /**
     * 
     * @type {Array<ExportCdashClassVariablesRow>}
     * @memberof ExportCdashTable
     */
    class_variables?: Array<ExportCdashClassVariablesRow>;
    /**
     * 
     * @type {Array<ExportCdashDomainVariablesRow>}
     * @memberof ExportCdashTable
     */
    domain_variables?: Array<ExportCdashDomainVariablesRow>;
}

/**
 * 
 * @export
 */
export type ExportCdashigDomainVariablesRow = {
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigDomainVariablesRow
     */
    Version?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigDomainVariablesRow
     */
    Class?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigDomainVariablesRow
     */
    Domain?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigDomainVariablesRow
     */
    Data_Collection_Scenario?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigDomainVariablesRow
     */
    Variable_Order?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigDomainVariablesRow
     */
    CDASHIG_Variable?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigDomainVariablesRow
     */
    CDASHIG_Variable_Label?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigDomainVariablesRow
     */
    DRAFT_CDASHIG_Definition?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigDomainVariablesRow
     */
    Question_Text?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigDomainVariablesRow
     */
    Prompt?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigDomainVariablesRow
     */
    Type?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigDomainVariablesRow
     */
    CDASHIG_Core?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigDomainVariablesRow
     */
    Case_Report_Form_Completion_Instructions?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ExportCdashigDomainVariablesRow
     */
    SDTMIG_Target?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigDomainVariablesRow
     */
    Mapping_Instructions?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigDomainVariablesRow
     */
    Controlled_Terminology_Codelist_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigDomainVariablesRow
     */
    Implementation_Notes?: string;
}

/**
 * 
 * @export
 */
export type ExportCdashigScenarioVariablesRow = {
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigScenarioVariablesRow
     */
    Version?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigScenarioVariablesRow
     */
    Class?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigScenarioVariablesRow
     */
    Domain?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigScenarioVariablesRow
     */
    Data_Collection_Scenario?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigScenarioVariablesRow
     */
    Variable_Order?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigScenarioVariablesRow
     */
    CDASHIG_Variable?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigScenarioVariablesRow
     */
    CDASHIG_Variable_Label?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigScenarioVariablesRow
     */
    DRAFT_CDASHIG_Definition?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigScenarioVariablesRow
     */
    Question_Text?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigScenarioVariablesRow
     */
    Prompt?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigScenarioVariablesRow
     */
    Type?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigScenarioVariablesRow
     */
    CDASHIG_Core?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigScenarioVariablesRow
     */
    Case_Report_Form_Completion_Instructions?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ExportCdashigScenarioVariablesRow
     */
    SDTMIG_Target?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigScenarioVariablesRow
     */
    Mapping_Instructions?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigScenarioVariablesRow
     */
    Controlled_Terminology_Codelist_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCdashigScenarioVariablesRow
     */
    Implementation_Notes?: string;
}

/**
 * 
 * @export
 */
export type ExportCdashigTable = {
    /**
     * 
     * @type {Array<ExportCdashigDomainVariablesRow>}
     * @memberof ExportCdashigTable
     */
    domain_variables?: Array<ExportCdashigDomainVariablesRow>;
    /**
     * 
     * @type {Array<ExportCdashigScenarioVariablesRow>}
     * @memberof ExportCdashigTable
     */
    scenario_variables?: Array<ExportCdashigScenarioVariablesRow>;
}

/**
 * 
 * @export
 */
export type ExportCtCodelist = {
    /**
     * 
     * @type {string}
     * @memberof ExportCtCodelist
     */
    Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCtCodelist
     */
    Codelist_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCtCodelist
     */
    Codelist_Extensible__Yes_No?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCtCodelist
     */
    Codelist_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCtCodelist
     */
    CDISC_Submission_Value?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ExportCtCodelist
     */
    CDISC_Synonym_s?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ExportCtCodelist
     */
    CDISC_Definition?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCtCodelist
     */
    NCI_Preferred_Term?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportCtCodelist
     */
    Standard_and_Date?: string;
    /**
     * 
     * @type {Array<ExportCtTerm>}
     * @memberof ExportCtCodelist
     */
    ?: Array<ExportCtTerm>;
}

/**
 * 
 * @export
 */
export type ExportCtTable = {
    /**
     * 
     * @type {Array<ExportCtCodelist>}
     * @memberof ExportCtTable
     */
    ct?: Array<ExportCtCodelist>;
}

/**
 * 
 * @export
 */
export type ExportCtTerm = {
    /**
     * 
     * @type {string}
     * @memberof ExportCtTerm
     */
    bundle_1?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ExportCtTerm
     */
    CDISC_Synonym_s?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ExportCtTerm
     */
    bundle_2?: string;
}

/**
 * 
 * @export
 */
export type ExportQrsCsvItemsRow = {
    /**
     * 
     * @type {string}
     * @memberof ExportQrsCsvItemsRow
     */
    QRS_Measure_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsCsvItemsRow
     */
    QRS_Measure_Label?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsCsvItemsRow
     */
    QRS_Measure_Type?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsCsvItemsRow
     */
    Item_Sequence?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsCsvItemsRow
     */
    Test_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsCsvItemsRow
     */
    Item_Text?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsCsvItemsRow
     */
    Tests_Codelist_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsCsvItemsRow
     */
    Tests_Term_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsCsvItemsRow
     */
    Test_Codes_Codelist_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsCsvItemsRow
     */
    Test_Codes_Term_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsCsvItemsRow
     */
    Subcategorys_Codelist_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsCsvItemsRow
     */
    Subcategorys_Term_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsCsvItemsRow
     */
    Evaluators_Codelist_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsCsvItemsRow
     */
    Evaluators_Term_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsCsvItemsRow
     */
    Free_form_Responses_Datatype?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsCsvItemsRow
     */
    Response_Group?: string;
}

/**
 * 
 * @export
 */
export type ExportQrsGeneral = {
    /**
     * 
     * @type {string}
     * @memberof ExportQrsGeneral
     */
    Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsGeneral
     */
    Label?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsGeneral
     */
    Effective_Date?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsGeneral
     */
    Description?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsGeneral
     */
    Type?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsGeneral
     */
    Categorys_Codelist_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsGeneral
     */
    Categorys_Term_C_Code?: string;
}

/**
 * 
 * @export
 */
export type ExportQrsItemsTable = {
    /**
     * 
     * @type {Array<ExportQrsCsvItemsRow>}
     * @memberof ExportQrsItemsTable
     */
    items?: Array<ExportQrsCsvItemsRow>;
}

/**
 * 
 * @export
 */
export type ExportQrsResponses = {
    /**
     * 
     * @type {string}
     * @memberof ExportQrsResponses
     */
    Response_Group?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsResponses
     */
    Sequence?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsResponses
     */
    Responses_Original_Result_Codelist_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsResponses
     */
    Responses_Original_Result_Term_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsResponses
     */
    Responses_Original_Result_Unit_Codelist_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsResponses
     */
    Responses_Original_Result_Unit_Term_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsResponses
     */
    Responses_Standardized_Result_Codelist_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsResponses
     */
    Responses_Standardized_Result_Term_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsResponses
     */
    Responses_Standardized_Result_Unit_Codelist_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsResponses
     */
    Responses_Standardized_Result_Unit_Term_C_Code?: string;
}

/**
 * 
 * @export
 */
export type ExportQrsWorkbook = {
    /**
     * 
     * @type {ExportQrsGeneral}
     * @memberof ExportQrsWorkbook
     */
    self?: ExportQrsGeneral;
    /**
     * 
     * @type {Array<ExportQrsWorkbookItemsRow>}
     * @memberof ExportQrsWorkbook
     */
    items?: Array<ExportQrsWorkbookItemsRow>;
    /**
     * 
     * @type {Array<ExportQrsResponses>}
     * @memberof ExportQrsWorkbook
     */
    responses?: Array<ExportQrsResponses>;
}

/**
 * 
 * @export
 */
export type ExportQrsWorkbookItemsRow = {
    /**
     * 
     * @type {string}
     * @memberof ExportQrsWorkbookItemsRow
     */
    Item_Sequence?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsWorkbookItemsRow
     */
    Test_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsWorkbookItemsRow
     */
    Item_Text?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsWorkbookItemsRow
     */
    Tests_Codelist_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsWorkbookItemsRow
     */
    Tests_Term_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsWorkbookItemsRow
     */
    Test_Codes_Codelist_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsWorkbookItemsRow
     */
    Test_Codes_Term_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsWorkbookItemsRow
     */
    Subcategorys_Codelist_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsWorkbookItemsRow
     */
    Subcategorys_Term_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsWorkbookItemsRow
     */
    Evaluators_Codelist_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsWorkbookItemsRow
     */
    Evaluators_Term_C_Code?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsWorkbookItemsRow
     */
    Free_form_Responses_Datatype?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportQrsWorkbookItemsRow
     */
    Response_Group?: string;
}

/**
 * 
 * @export
 */
export type ExportSdtmClassVariablesRow = {
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmClassVariablesRow
     */
    Version?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmClassVariablesRow
     */
    Variable_Order?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmClassVariablesRow
     */
    Class?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmClassVariablesRow
     */
    Dataset_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmClassVariablesRow
     */
    Variable_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmClassVariablesRow
     */
    Variable_Label?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmClassVariablesRow
     */
    Type?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmClassVariablesRow
     */
    Controlled_Terms_Codelist_or_Format?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmClassVariablesRow
     */
    Role?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmClassVariablesRow
     */
    Role_Description?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmClassVariablesRow
     */
    Description?: string;
}

/**
 * 
 * @export
 */
export type ExportSdtmDatasetVariablesRow = {
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmDatasetVariablesRow
     */
    Version?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmDatasetVariablesRow
     */
    Variable_Order?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmDatasetVariablesRow
     */
    Class?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmDatasetVariablesRow
     */
    Dataset_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmDatasetVariablesRow
     */
    Variable_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmDatasetVariablesRow
     */
    Variable_Label?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmDatasetVariablesRow
     */
    Type?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmDatasetVariablesRow
     */
    Controlled_Terms_Codelist_or_Format?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmDatasetVariablesRow
     */
    Role?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmDatasetVariablesRow
     */
    Role_Description?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmDatasetVariablesRow
     */
    Description?: string;
}

/**
 * 
 * @export
 */
export type ExportSdtmDatasetsRow = {
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmDatasetsRow
     */
    Version?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmDatasetsRow
     */
    Class?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmDatasetsRow
     */
    Dataset_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmDatasetsRow
     */
    Dataset_Label?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmDatasetsRow
     */
    Structure?: string;
}

/**
 * 
 * @export
 */
export type ExportSdtmDatasetsTable = {
    /**
     * 
     * @type {Array<ExportSdtmDatasetsRow>}
     * @memberof ExportSdtmDatasetsTable
     */
    datasets?: Array<ExportSdtmDatasetsRow>;
}

/**
 * 
 * @export
 */
export type ExportSdtmVariablesTable = {
    /**
     * 
     * @type {Array<ExportSdtmClassVariablesRow>}
     * @memberof ExportSdtmVariablesTable
     */
    class_variables?: Array<ExportSdtmClassVariablesRow>;
    /**
     * 
     * @type {Array<ExportSdtmDatasetVariablesRow>}
     * @memberof ExportSdtmVariablesTable
     */
    dataset_variables?: Array<ExportSdtmDatasetVariablesRow>;
}

/**
 * 
 * @export
 */
export type ExportSdtmWorkbook = {
    /**
     * 
     * @type {Array<ExportSdtmClassVariablesRow>}
     * @memberof ExportSdtmWorkbook
     */
    class_variables?: Array<ExportSdtmClassVariablesRow>;
    /**
     * 
     * @type {Array<ExportSdtmDatasetVariablesRow>}
     * @memberof ExportSdtmWorkbook
     */
    dataset_variables?: Array<ExportSdtmDatasetVariablesRow>;
    /**
     * 
     * @type {Array<ExportSdtmDatasetsRow>}
     * @memberof ExportSdtmWorkbook
     */
    datasets?: Array<ExportSdtmDatasetsRow>;
}

/**
 * 
 * @export
 */
export type ExportSdtmigDatasetsRow = {
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmigDatasetsRow
     */
    Version?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmigDatasetsRow
     */
    Class?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmigDatasetsRow
     */
    Dataset_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmigDatasetsRow
     */
    Dataset_Label?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmigDatasetsRow
     */
    Structure?: string;
}

/**
 * 
 * @export
 */
export type ExportSdtmigDatasetsTable = {
    /**
     * 
     * @type {Array<ExportSdtmigDatasetsRow>}
     * @memberof ExportSdtmigDatasetsTable
     */
    datasets?: Array<ExportSdtmigDatasetsRow>;
}

/**
 * 
 * @export
 */
export type ExportSdtmigVariablesRow = {
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmigVariablesRow
     */
    Version?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmigVariablesRow
     */
    Variable_Order?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmigVariablesRow
     */
    Class?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmigVariablesRow
     */
    Dataset_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmigVariablesRow
     */
    Variable_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmigVariablesRow
     */
    Variable_Label?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmigVariablesRow
     */
    Type?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmigVariablesRow
     */
    Controlled_Terms_Codelist_or_Format?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmigVariablesRow
     */
    Role?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmigVariablesRow
     */
    CDISC_Notes?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSdtmigVariablesRow
     */
    Core?: string;
}

/**
 * 
 * @export
 */
export type ExportSdtmigVariablesTable = {
    /**
     * 
     * @type {Array<ExportSdtmigVariablesRow>}
     * @memberof ExportSdtmigVariablesTable
     */
    variables?: Array<ExportSdtmigVariablesRow>;
}

/**
 * 
 * @export
 */
export type ExportSdtmigWorkbook = {
    /**
     * 
     * @type {Array<ExportSdtmigVariablesRow>}
     * @memberof ExportSdtmigWorkbook
     */
    variables?: Array<ExportSdtmigVariablesRow>;
    /**
     * 
     * @type {Array<ExportSdtmigDatasetsRow>}
     * @memberof ExportSdtmigWorkbook
     */
    datasets?: Array<ExportSdtmigDatasetsRow>;
}

/**
 * 
 * @export
 */
export type ExportSendigDatasetsRow = {
    /**
     * 
     * @type {string}
     * @memberof ExportSendigDatasetsRow
     */
    Version?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSendigDatasetsRow
     */
    Class?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSendigDatasetsRow
     */
    Dataset_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSendigDatasetsRow
     */
    Dataset_Label?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSendigDatasetsRow
     */
    Structure?: string;
}

/**
 * 
 * @export
 */
export type ExportSendigDatasetsTable = {
    /**
     * 
     * @type {Array<ExportSendigDatasetsRow>}
     * @memberof ExportSendigDatasetsTable
     */
    datasets?: Array<ExportSendigDatasetsRow>;
}

/**
 * 
 * @export
 */
export type ExportSendigVariablesRow = {
    /**
     * 
     * @type {string}
     * @memberof ExportSendigVariablesRow
     */
    Version?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSendigVariablesRow
     */
    Variable_Order?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSendigVariablesRow
     */
    Class?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSendigVariablesRow
     */
    Dataset_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSendigVariablesRow
     */
    Variable_Name?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSendigVariablesRow
     */
    Variable_Label?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSendigVariablesRow
     */
    Type?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSendigVariablesRow
     */
    Controlled_Terms_Codelist_or_Format?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSendigVariablesRow
     */
    Role?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSendigVariablesRow
     */
    CDISC_Notes?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportSendigVariablesRow
     */
    Core?: string;
}

/**
 * 
 * @export
 */
export type ExportSendigVariablesTable = {
    /**
     * 
     * @type {Array<ExportSendigVariablesRow>}
     * @memberof ExportSendigVariablesTable
     */
    variables?: Array<ExportSendigVariablesRow>;
}

/**
 * 
 * @export
 */
export type ExportSendigWorkbook = {
    /**
     * 
     * @type {Array<ExportSendigVariablesRow>}
     * @memberof ExportSendigWorkbook
     */
    variables?: Array<ExportSendigVariablesRow>;
    /**
     * 
     * @type {Array<ExportSendigDatasetsRow>}
     * @memberof ExportSendigWorkbook
     */
    datasets?: Array<ExportSendigDatasetsRow>;
}

/**
 * 
 * @export
 */
export type Health = {
    /**
     * 
     * @type {boolean}
     * @memberof Health
     */
    healthy?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Health
     */
    ldapAuthenticationHealthy?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Health
     */
    ldapAuthorizationHealthy?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Health
     */
    databaseHealthy?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Health
     */
    esHealthy?: boolean;
}

/**
 * 
 * @export
 */
export type Lastupdated = {
    /**
     * 
     * @type {LastupdatedLinks}
     * @memberof Lastupdated
     */
    _links?: LastupdatedLinks;
    /**
     * 
     * @type {string}
     * @memberof Lastupdated
     */
    overall?: string;
    /**
     * 
     * @type {string}
     * @memberof Lastupdated
     */
    data_analysis?: string;
    /**
     * 
     * @type {string}
     * @memberof Lastupdated
     */
    data_collection?: string;
    /**
     * 
     * @type {string}
     * @memberof Lastupdated
     */
    data_tabulation?: string;
    /**
     * 
     * @type {string}
     * @memberof Lastupdated
     */
    measure?: string;
    /**
     * 
     * @type {string}
     * @memberof Lastupdated
     */
    terminology?: string;
}

/**
 * 
 * @export
 */
export type LastupdatedLinks = {
    /**
     * 
     * @type {LastupdatedRef}
     * @memberof LastupdatedLinks
     */
    self?: LastupdatedRef;
}

/**
 * 
 * @export
 */
export type LastupdatedRef = {
    /**
     * 
     * @type {string}
     * @memberof LastupdatedRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof LastupdatedRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof LastupdatedRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type MaintenanceBody = {
    /**
     * 
     * @type {boolean}
     * @memberof MaintenanceBody
     */
    maintenanceMode?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MaintenanceBody
     */
    maintenanceMessage?: string;
}

/**
 * 
 * @export
 */
export type MdrSearchScopesGet200Response = {
    /**
     * 
     * @type {Array<DefaultSearchScopes>}
     * @memberof MdrSearchScopesGet200Response
     */
    scopes?: Array<DefaultSearchScopes>;
}

/**
 * 
 * @export
 */
export type ProductgroupDataAnalysis = {
    /**
     * 
     * @type {ProductgroupDataAnalysisLinks}
     * @memberof ProductgroupDataAnalysis
     */
    _links?: ProductgroupDataAnalysisLinks;
}

/**
 * 
 * @export
 */
export type ProductgroupDataAnalysisLinks = {
    /**
     * 
     * @type {ProductgroupRef}
     * @memberof ProductgroupDataAnalysisLinks
     */
    self?: ProductgroupRef;
    /**
     * 
     * @type {Array<AdamProductRefElement>}
     * @memberof ProductgroupDataAnalysisLinks
     */
    adam?: Array<AdamProductRefElement>;
}

/**
 * 
 * @export
 */
export type ProductgroupDataCollection = {
    /**
     * 
     * @type {ProductgroupDataCollectionLinks}
     * @memberof ProductgroupDataCollection
     */
    _links?: ProductgroupDataCollectionLinks;
}

/**
 * 
 * @export
 */
export type ProductgroupDataCollectionLinks = {
    /**
     * 
     * @type {ProductgroupRef}
     * @memberof ProductgroupDataCollectionLinks
     */
    self?: ProductgroupRef;
    /**
     * 
     * @type {Array<CdashProductRefElement>}
     * @memberof ProductgroupDataCollectionLinks
     */
    cdash?: Array<CdashProductRefElement>;
    /**
     * 
     * @type {Array<CdashigProductRefElement>}
     * @memberof ProductgroupDataCollectionLinks
     */
    cdashig?: Array<CdashigProductRefElement>;
}

/**
 * 
 * @export
 */
export type ProductgroupDataTabulation = {
    /**
     * 
     * @type {ProductgroupDataTabulationLinks}
     * @memberof ProductgroupDataTabulation
     */
    _links?: ProductgroupDataTabulationLinks;
}

/**
 * 
 * @export
 */
export type ProductgroupDataTabulationLinks = {
    /**
     * 
     * @type {ProductgroupRef}
     * @memberof ProductgroupDataTabulationLinks
     */
    self?: ProductgroupRef;
    /**
     * 
     * @type {Array<SdtmProductRefElement>}
     * @memberof ProductgroupDataTabulationLinks
     */
    sdtm?: Array<SdtmProductRefElement>;
    /**
     * 
     * @type {Array<SdtmigProductRefElement>}
     * @memberof ProductgroupDataTabulationLinks
     */
    sdtmig?: Array<SdtmigProductRefElement>;
    /**
     * 
     * @type {Array<SendigProductRefElement>}
     * @memberof ProductgroupDataTabulationLinks
     */
    sendig?: Array<SendigProductRefElement>;
}

/**
 * 
 * @export
 */
export type ProductgroupQrs = {
    /**
     * 
     * @type {ProductgroupQrsLinks}
     * @memberof ProductgroupQrs
     */
    _links?: ProductgroupQrsLinks;
}

/**
 * 
 * @export
 */
export type ProductgroupQrsLinks = {
    /**
     * 
     * @type {ProductgroupRef}
     * @memberof ProductgroupQrsLinks
     */
    self?: ProductgroupRef;
    /**
     * 
     * @type {Array<QrsRefElement>}
     * @memberof ProductgroupQrsLinks
     */
    qrs?: Array<QrsRefElement>;
}

/**
 * 
 * @export
 */
export type ProductgroupRef = {
    /**
     * 
     * @type {string}
     * @memberof ProductgroupRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductgroupRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductgroupRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type ProductgroupTerminology = {
    /**
     * 
     * @type {ProductgroupTerminologyLinks}
     * @memberof ProductgroupTerminology
     */
    _links?: ProductgroupTerminologyLinks;
}

/**
 * 
 * @export
 */
export type ProductgroupTerminologyLinks = {
    /**
     * 
     * @type {ProductgroupRef}
     * @memberof ProductgroupTerminologyLinks
     */
    self?: ProductgroupRef;
    /**
     * 
     * @type {Array<CtPackageRefElement>}
     * @memberof ProductgroupTerminologyLinks
     */
    packages?: Array<CtPackageRefElement>;
}

/**
 * 
 * @export
 */
export type Products = {
    /**
     * 
     * @type {ProductsLinks}
     * @memberof Products
     */
    _links?: ProductsLinks;
}

/**
 * 
 * @export
 */
export type ProductsLinks = {
    /**
     * 
     * @type {ProductsRef}
     * @memberof ProductsLinks
     */
    self?: ProductsRef;
    /**
     * 
     * @type {ProductgroupDataCollection}
     * @memberof ProductsLinks
     */
    data_collection?: ProductgroupDataCollection;
    /**
     * 
     * @type {ProductgroupDataTabulation}
     * @memberof ProductsLinks
     */
    data_tabulation?: ProductgroupDataTabulation;
    /**
     * 
     * @type {ProductgroupDataAnalysis}
     * @memberof ProductsLinks
     */
    data_analysis?: ProductgroupDataAnalysis;
    /**
     * 
     * @type {ProductgroupTerminology}
     * @memberof ProductsLinks
     */
    terminology?: ProductgroupTerminology;
    /**
     * 
     * @type {ProductgroupQrs}
     * @memberof ProductsLinks
     */
    measure?: ProductgroupQrs;
}

/**
 * 
 * @export
 */
export type ProductsRef = {
    /**
     * 
     * @type {string}
     * @memberof ProductsRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductsRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductsRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type QrsItem = {
    /**
     * 
     * @type {string}
     * @memberof QrsItem
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsItem
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsItem
     */
    questionText?: string;
    /**
     * 
     * @type {QrsItemLinks}
     * @memberof QrsItem
     */
    _links?: QrsItemLinks;
}

/**
 * 
 * @export
 */
export type QrsItemLinks = {
    /**
     * 
     * @type {RootCtTermRef}
     * @memberof QrsItemLinks
     */
    qrsItemTEST?: RootCtTermRef;
    /**
     * 
     * @type {RootCtTermRef}
     * @memberof QrsItemLinks
     */
    qrsItemTESTCD?: RootCtTermRef;
    /**
     * 
     * @type {RootCtTermRef}
     * @memberof QrsItemLinks
     */
    qrsItemEVAL?: RootCtTermRef;
    /**
     * 
     * @type {RootCtTermRef}
     * @memberof QrsItemLinks
     */
    qrsItemSCAT?: RootCtTermRef;
    /**
     * 
     * @type {QrsResponsegroup}
     * @memberof QrsItemLinks
     */
    responsegroup?: QrsResponsegroup;
}

/**
 * 
 * @export
 */
export type QrsItemRefElement = {
    /**
     * 
     * @type {string}
     * @memberof QrsItemRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsItemRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsItemRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type QrsItems = {
    /**
     * 
     * @type {string}
     * @memberof QrsItems
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsItems
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsItems
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsItems
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsItems
     */
    untilDate?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsItems
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsItems
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsItems
     */
    qrsType?: string;
    /**
     * 
     * @type {QrsItemsLinks}
     * @memberof QrsItems
     */
    _links?: QrsItemsLinks;
}

/**
 * 
 * @export
 */
export type QrsItemsLinks = {
    /**
     * 
     * @type {QrsItemsRef}
     * @memberof QrsItemsLinks
     */
    self?: QrsItemsRef;
    /**
     * 
     * @type {QrsProductRef}
     * @memberof QrsItemsLinks
     */
    parentProduct?: QrsProductRef;
    /**
     * 
     * @type {Array<QrsItemRefElement>}
     * @memberof QrsItemsLinks
     */
    items?: Array<QrsItemRefElement>;
}

/**
 * 
 * @export
 */
export type QrsItemsRef = {
    /**
     * 
     * @type {string}
     * @memberof QrsItemsRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsItemsRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsItemsRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type QrsProduct = {
    /**
     * 
     * @type {string}
     * @memberof QrsProduct
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsProduct
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsProduct
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsProduct
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsProduct
     */
    untilDate?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsProduct
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsProduct
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsProduct
     */
    qrsType?: string;
    /**
     * 
     * @type {QrsProductLinks}
     * @memberof QrsProduct
     */
    _links?: QrsProductLinks;
    /**
     * 
     * @type {Array<QrsItem>}
     * @memberof QrsProduct
     */
    items?: Array<QrsItem>;
}

/**
 * 
 * @export
 */
export type QrsProductLinks = {
    /**
     * 
     * @type {QrsProductRef}
     * @memberof QrsProductLinks
     */
    self?: QrsProductRef;
    /**
     * 
     * @type {QrsProductRef}
     * @memberof QrsProductLinks
     */
    priorVersion?: QrsProductRef;
    /**
     * 
     * @type {RootCtTermRef}
     * @memberof QrsProductLinks
     */
    qrsTermCAT?: RootCtTermRef;
    /**
     * 
     * @type {QrsItemsRef}
     * @memberof QrsProductLinks
     */
    qrsItems?: QrsItemsRef;
}

/**
 * 
 * @export
 */
export type QrsProductRef = {
    /**
     * 
     * @type {string}
     * @memberof QrsProductRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsProductRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsProductRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type QrsRefElement = {
    /**
     * 
     * @type {string}
     * @memberof QrsRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type QrsResponseLinks = {
    /**
     * 
     * @type {RootCtTermRef}
     * @memberof QrsResponseLinks
     */
    qrsResponseORRES?: RootCtTermRef;
    /**
     * 
     * @type {RootCtTermRef}
     * @memberof QrsResponseLinks
     */
    qrsResponseORRESU?: RootCtTermRef;
    /**
     * 
     * @type {RootCtTermRef}
     * @memberof QrsResponseLinks
     */
    qrsResponseSTRESC?: RootCtTermRef;
    /**
     * 
     * @type {RootCtTermRef}
     * @memberof QrsResponseLinks
     */
    qrsResponseSTRESCU?: RootCtTermRef;
}

/**
 * 
 * @export
 */
export type QrsResponsegroup = {
    /**
     * 
     * @type {string}
     * @memberof QrsResponsegroup
     */
    label?: string;
    /**
     * 
     * @type {QrsResponsegroupLinks}
     * @memberof QrsResponsegroup
     */
    _links?: QrsResponsegroupLinks;
}

/**
 * 
 * @export
 */
export type QrsResponsegroupLinks = {
    /**
     * 
     * @type {QrsResponsegroupRef}
     * @memberof QrsResponsegroupLinks
     */
    self?: QrsResponsegroupRef;
    /**
     * 
     * @type {Array<QrsResponses>}
     * @memberof QrsResponsegroupLinks
     */
    responses?: Array<QrsResponses>;
}

/**
 * 
 * @export
 */
export type QrsResponsegroupRef = {
    /**
     * 
     * @type {string}
     * @memberof QrsResponsegroupRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsResponsegroupRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsResponsegroupRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type QrsResponsegroupRefElement = {
    /**
     * 
     * @type {string}
     * @memberof QrsResponsegroupRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsResponsegroupRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsResponsegroupRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type QrsResponsegroups = {
    /**
     * 
     * @type {string}
     * @memberof QrsResponsegroups
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsResponsegroups
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsResponsegroups
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsResponsegroups
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsResponsegroups
     */
    untilDate?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsResponsegroups
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsResponsegroups
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsResponsegroups
     */
    qrsType?: string;
    /**
     * 
     * @type {QrsResponsegroupsLinks}
     * @memberof QrsResponsegroups
     */
    _links?: QrsResponsegroupsLinks;
}

/**
 * 
 * @export
 */
export type QrsResponsegroupsLinks = {
    /**
     * 
     * @type {QrsResponsegroupsRef}
     * @memberof QrsResponsegroupsLinks
     */
    self?: QrsResponsegroupsRef;
    /**
     * 
     * @type {Array<QrsResponsegroupRefElement>}
     * @memberof QrsResponsegroupsLinks
     */
    responsegroups?: Array<QrsResponsegroupRefElement>;
}

/**
 * 
 * @export
 */
export type QrsResponsegroupsRef = {
    /**
     * 
     * @type {string}
     * @memberof QrsResponsegroupsRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsResponsegroupsRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof QrsResponsegroupsRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type QrsResponses = {
    /**
     * 
     * @type {string}
     * @memberof QrsResponses
     */
    ordinal?: string;
    /**
     * 
     * @type {QrsResponseLinks}
     * @memberof QrsResponses
     */
    _links?: QrsResponseLinks;
}

/**
 * 
 * @export
 */
export type RootCdashClassField = {
    /**
     * 
     * @type {RootCdashClassFieldLinks}
     * @memberof RootCdashClassField
     */
    _links?: RootCdashClassFieldLinks;
}

/**
 * 
 * @export
 */
export type RootCdashClassFieldLinks = {
    /**
     * 
     * @type {RootCdashClassFieldRef}
     * @memberof RootCdashClassFieldLinks
     */
    self?: RootCdashClassFieldRef;
    /**
     * 
     * @type {Array<CdashClassFieldRefVersion>}
     * @memberof RootCdashClassFieldLinks
     */
    versions?: Array<CdashClassFieldRefVersion>;
}

/**
 * 
 * @export
 */
export type RootCdashClassFieldRef = {
    /**
     * 
     * @type {string}
     * @memberof RootCdashClassFieldRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof RootCdashClassFieldRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof RootCdashClassFieldRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type RootCdashDomainField = {
    /**
     * 
     * @type {RootCdashDomainFieldLinks}
     * @memberof RootCdashDomainField
     */
    _links?: RootCdashDomainFieldLinks;
}

/**
 * 
 * @export
 */
export type RootCdashDomainFieldLinks = {
    /**
     * 
     * @type {RootCdashDomainFieldRef}
     * @memberof RootCdashDomainFieldLinks
     */
    self?: RootCdashDomainFieldRef;
    /**
     * 
     * @type {Array<CdashDomainFieldRefVersion>}
     * @memberof RootCdashDomainFieldLinks
     */
    versions?: Array<CdashDomainFieldRefVersion>;
}

/**
 * 
 * @export
 */
export type RootCdashDomainFieldRef = {
    /**
     * 
     * @type {string}
     * @memberof RootCdashDomainFieldRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof RootCdashDomainFieldRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof RootCdashDomainFieldRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type RootCdashigDomainField = {
    /**
     * 
     * @type {RootCdashigDomainFieldLinks}
     * @memberof RootCdashigDomainField
     */
    _links?: RootCdashigDomainFieldLinks;
}

/**
 * 
 * @export
 */
export type RootCdashigDomainFieldLinks = {
    /**
     * 
     * @type {RootCdashigDomainFieldRef}
     * @memberof RootCdashigDomainFieldLinks
     */
    self?: RootCdashigDomainFieldRef;
    /**
     * 
     * @type {Array<CdashigDomainFieldRefVersion>}
     * @memberof RootCdashigDomainFieldLinks
     */
    versions?: Array<CdashigDomainFieldRefVersion>;
}

/**
 * 
 * @export
 */
export type RootCdashigDomainFieldRef = {
    /**
     * 
     * @type {string}
     * @memberof RootCdashigDomainFieldRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof RootCdashigDomainFieldRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof RootCdashigDomainFieldRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type RootCdashigScenarioField = {
    /**
     * 
     * @type {RootCdashigScenarioFieldLinks}
     * @memberof RootCdashigScenarioField
     */
    _links?: RootCdashigScenarioFieldLinks;
}

/**
 * 
 * @export
 */
export type RootCdashigScenarioFieldLinks = {
    /**
     * 
     * @type {RootCdashigScenarioFieldRef}
     * @memberof RootCdashigScenarioFieldLinks
     */
    self?: RootCdashigScenarioFieldRef;
    /**
     * 
     * @type {Array<CdashigScenarioFieldRefVersion>}
     * @memberof RootCdashigScenarioFieldLinks
     */
    versions?: Array<CdashigScenarioFieldRefVersion>;
}

/**
 * 
 * @export
 */
export type RootCdashigScenarioFieldRef = {
    /**
     * 
     * @type {string}
     * @memberof RootCdashigScenarioFieldRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof RootCdashigScenarioFieldRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof RootCdashigScenarioFieldRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type RootCtCodelist = {
    /**
     * 
     * @type {RootCtCodelistLinks}
     * @memberof RootCtCodelist
     */
    _links?: RootCtCodelistLinks;
}

/**
 * 
 * @export
 */
export type RootCtCodelistLinks = {
    /**
     * 
     * @type {RootCtCodelistRef}
     * @memberof RootCtCodelistLinks
     */
    self?: RootCtCodelistRef;
    /**
     * 
     * @type {Array<CtCodelistRefVersion>}
     * @memberof RootCtCodelistLinks
     */
    versions?: Array<CtCodelistRefVersion>;
}

/**
 * 
 * @export
 */
export type RootCtCodelistRef = {
    /**
     * 
     * @type {string}
     * @memberof RootCtCodelistRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof RootCtCodelistRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof RootCtCodelistRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type RootCtCodelistRefElement = {
    /**
     * 
     * @type {string}
     * @memberof RootCtCodelistRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof RootCtCodelistRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof RootCtCodelistRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type RootCtTerm = {
    /**
     * 
     * @type {RootCtTermLinks}
     * @memberof RootCtTerm
     */
    _links?: RootCtTermLinks;
}

/**
 * 
 * @export
 */
export type RootCtTermLinks = {
    /**
     * 
     * @type {RootCtTermRef}
     * @memberof RootCtTermLinks
     */
    self?: RootCtTermRef;
    /**
     * 
     * @type {Array<CtTermRefVersion>}
     * @memberof RootCtTermLinks
     */
    versions?: Array<CtTermRefVersion>;
}

/**
 * 
 * @export
 */
export type RootCtTermRef = {
    /**
     * 
     * @type {string}
     * @memberof RootCtTermRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof RootCtTermRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof RootCtTermRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type RootSdtmClassVariable = {
    /**
     * 
     * @type {RootSdtmClassVariableLinks}
     * @memberof RootSdtmClassVariable
     */
    _links?: RootSdtmClassVariableLinks;
}

/**
 * 
 * @export
 */
export type RootSdtmClassVariableLinks = {
    /**
     * 
     * @type {RootSdtmClassVariableRef}
     * @memberof RootSdtmClassVariableLinks
     */
    self?: RootSdtmClassVariableRef;
    /**
     * 
     * @type {Array<SdtmClassVariableRefVersion>}
     * @memberof RootSdtmClassVariableLinks
     */
    versions?: Array<SdtmClassVariableRefVersion>;
}

/**
 * 
 * @export
 */
export type RootSdtmClassVariableRef = {
    /**
     * 
     * @type {string}
     * @memberof RootSdtmClassVariableRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof RootSdtmClassVariableRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof RootSdtmClassVariableRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type RootSdtmDatasetVariable = {
    /**
     * 
     * @type {RootSdtmDatasetVariableLinks}
     * @memberof RootSdtmDatasetVariable
     */
    _links?: RootSdtmDatasetVariableLinks;
}

/**
 * 
 * @export
 */
export type RootSdtmDatasetVariableLinks = {
    /**
     * 
     * @type {RootSdtmDatasetVariableRef}
     * @memberof RootSdtmDatasetVariableLinks
     */
    self?: RootSdtmDatasetVariableRef;
    /**
     * 
     * @type {Array<SdtmDatasetVariableRefVersion>}
     * @memberof RootSdtmDatasetVariableLinks
     */
    versions?: Array<SdtmDatasetVariableRefVersion>;
}

/**
 * 
 * @export
 */
export type RootSdtmDatasetVariableRef = {
    /**
     * 
     * @type {string}
     * @memberof RootSdtmDatasetVariableRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof RootSdtmDatasetVariableRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof RootSdtmDatasetVariableRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type RootSdtmigDatasetVariable = {
    /**
     * 
     * @type {RootSdtmigDatasetVariableLinks}
     * @memberof RootSdtmigDatasetVariable
     */
    _links?: RootSdtmigDatasetVariableLinks;
}

/**
 * 
 * @export
 */
export type RootSdtmigDatasetVariableLinks = {
    /**
     * 
     * @type {RootSdtmigDatasetVariableRef}
     * @memberof RootSdtmigDatasetVariableLinks
     */
    self?: RootSdtmigDatasetVariableRef;
    /**
     * 
     * @type {Array<SdtmigDatasetVariableRefVersion>}
     * @memberof RootSdtmigDatasetVariableLinks
     */
    versions?: Array<SdtmigDatasetVariableRefVersion>;
}

/**
 * 
 * @export
 */
export type RootSdtmigDatasetVariableRef = {
    /**
     * 
     * @type {string}
     * @memberof RootSdtmigDatasetVariableRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof RootSdtmigDatasetVariableRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof RootSdtmigDatasetVariableRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type RootSendigDatasetVariable = {
    /**
     * 
     * @type {RootSendigDatasetVariableLinks}
     * @memberof RootSendigDatasetVariable
     */
    _links?: RootSendigDatasetVariableLinks;
}

/**
 * 
 * @export
 */
export type RootSendigDatasetVariableLinks = {
    /**
     * 
     * @type {RootSendigDatasetVariableRef}
     * @memberof RootSendigDatasetVariableLinks
     */
    self?: RootSendigDatasetVariableRef;
    /**
     * 
     * @type {Array<SendigDatasetVariableRefVersion>}
     * @memberof RootSendigDatasetVariableLinks
     */
    versions?: Array<SendigDatasetVariableRefVersion>;
}

/**
 * 
 * @export
 */
export type RootSendigDatasetVariableRef = {
    /**
     * 
     * @type {string}
     * @memberof RootSendigDatasetVariableRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof RootSendigDatasetVariableRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof RootSendigDatasetVariableRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type ScopeValues = {
    /**
     * 
     * @type {number}
     * @memberof ScopeValues
     */
    total?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ScopeValues
     */
    hasMore?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof ScopeValues
     */
    values?: Array<string>;
}

/**
 * 
 * @export
 */
export type SdtmClass = {
    /**
     * 
     * @type {string}
     * @memberof SdtmClass
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClass
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClass
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClass
     */
    description?: string;
    /**
     * 
     * @type {SdtmClassLinks}
     * @memberof SdtmClass
     */
    _links?: SdtmClassLinks;
    /**
     * 
     * @type {Array<SdtmClassVariable>}
     * @memberof SdtmClass
     */
    classVariables?: Array<SdtmClassVariable>;
    /**
     * 
     * @type {Array<SdtmDataset>}
     * @memberof SdtmClass
     */
    datasets?: Array<SdtmDataset>;
}

/**
 * 
 * @export
 */
export type SdtmClassDatasets = {
    /**
     * 
     * @type {string}
     * @memberof SdtmClassDatasets
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassDatasets
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassDatasets
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassDatasets
     */
    description?: string;
    /**
     * 
     * @type {SdtmClassDatasetsLinks}
     * @memberof SdtmClassDatasets
     */
    _links?: SdtmClassDatasetsLinks;
}

/**
 * 
 * @export
 */
export type SdtmClassDatasetsLinks = {
    /**
     * 
     * @type {SdtmClassDatasetsRef}
     * @memberof SdtmClassDatasetsLinks
     */
    self?: SdtmClassDatasetsRef;
    /**
     * 
     * @type {SdtmProductRef}
     * @memberof SdtmClassDatasetsLinks
     */
    parentProduct?: SdtmProductRef;
    /**
     * 
     * @type {SdtmClassDatasetsRef}
     * @memberof SdtmClassDatasetsLinks
     */
    priorVersion?: SdtmClassDatasetsRef;
    /**
     * 
     * @type {Array<SdtmDatasetRefElement>}
     * @memberof SdtmClassDatasetsLinks
     */
    datasets?: Array<SdtmDatasetRefElement>;
}

/**
 * 
 * @export
 */
export type SdtmClassDatasetsRef = {
    /**
     * 
     * @type {string}
     * @memberof SdtmClassDatasetsRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassDatasetsRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassDatasetsRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmClassLinks = {
    /**
     * 
     * @type {SdtmClassRef}
     * @memberof SdtmClassLinks
     */
    self?: SdtmClassRef;
    /**
     * 
     * @type {SdtmProductRef}
     * @memberof SdtmClassLinks
     */
    parentProduct?: SdtmProductRef;
    /**
     * 
     * @type {SdtmClassRef}
     * @memberof SdtmClassLinks
     */
    parentClass?: SdtmClassRef;
    /**
     * 
     * @type {Array<SdtmClassRefSubclass>}
     * @memberof SdtmClassLinks
     */
    subclasses?: Array<SdtmClassRefSubclass>;
    /**
     * 
     * @type {SdtmClassRef}
     * @memberof SdtmClassLinks
     */
    priorVersion?: SdtmClassRef;
}

/**
 * 
 * @export
 */
export type SdtmClassRef = {
    /**
     * 
     * @type {string}
     * @memberof SdtmClassRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmClassRefElement = {
    /**
     * 
     * @type {string}
     * @memberof SdtmClassRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmClassRefSubclass = {
    /**
     * 
     * @type {string}
     * @memberof SdtmClassRefSubclass
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassRefSubclass
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassRefSubclass
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmClassVariable = {
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariable
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariable
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariable
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariable
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariable
     */
    role?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariable
     */
    roleDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariable
     */
    simpleDatatype?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariable
     */
    describedValueDomain?: string;
    /**
     * 
     * @type {SdtmClassVariableLinks}
     * @memberof SdtmClassVariable
     */
    _links?: SdtmClassVariableLinks;
}

/**
 * 
 * @export
 */
export type SdtmClassVariableLinks = {
    /**
     * 
     * @type {SdtmClassVariableRef}
     * @memberof SdtmClassVariableLinks
     */
    self?: SdtmClassVariableRef;
    /**
     * 
     * @type {SdtmProductRef}
     * @memberof SdtmClassVariableLinks
     */
    parentProduct?: SdtmProductRef;
    /**
     * 
     * @type {SdtmClassRef}
     * @memberof SdtmClassVariableLinks
     */
    parentClass?: SdtmClassRef;
    /**
     * 
     * @type {Array<SdtmClassVariableRefQualifies>}
     * @memberof SdtmClassVariableLinks
     */
    qualifiesVariables?: Array<SdtmClassVariableRefQualifies>;
    /**
     * 
     * @type {RootSdtmClassVariableRef}
     * @memberof SdtmClassVariableLinks
     */
    rootItem?: RootSdtmClassVariableRef;
    /**
     * 
     * @type {SdtmClassVariableRef}
     * @memberof SdtmClassVariableLinks
     */
    priorVersion?: SdtmClassVariableRef;
}

/**
 * 
 * @export
 */
export type SdtmClassVariableRef = {
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariableRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariableRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariableRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmClassVariableRefElement = {
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariableRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariableRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariableRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmClassVariableRefQualifies = {
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariableRefQualifies
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariableRefQualifies
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariableRefQualifies
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmClassVariableRefTarget = {
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariableRefTarget
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariableRefTarget
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariableRefTarget
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmClassVariableRefVersion = {
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariableRefVersion
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariableRefVersion
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariableRefVersion
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmClassVariables = {
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariables
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariables
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariables
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariables
     */
    description?: string;
    /**
     * 
     * @type {SdtmClassVariablesLinks}
     * @memberof SdtmClassVariables
     */
    _links?: SdtmClassVariablesLinks;
}

/**
 * 
 * @export
 */
export type SdtmClassVariablesLinks = {
    /**
     * 
     * @type {SdtmClassVariablesRef}
     * @memberof SdtmClassVariablesLinks
     */
    self?: SdtmClassVariablesRef;
    /**
     * 
     * @type {SdtmProductRef}
     * @memberof SdtmClassVariablesLinks
     */
    parentProduct?: SdtmProductRef;
    /**
     * 
     * @type {SdtmClassVariablesRef}
     * @memberof SdtmClassVariablesLinks
     */
    priorVersion?: SdtmClassVariablesRef;
    /**
     * 
     * @type {Array<SdtmClassVariableRefElement>}
     * @memberof SdtmClassVariablesLinks
     */
    classVariables?: Array<SdtmClassVariableRefElement>;
}

/**
 * 
 * @export
 */
export type SdtmClassVariablesRef = {
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariablesRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariablesRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassVariablesRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmClasses = {
    /**
     * 
     * @type {string}
     * @memberof SdtmClasses
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClasses
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClasses
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClasses
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClasses
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClasses
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClasses
     */
    version?: string;
    /**
     * 
     * @type {SdtmClassesLinks}
     * @memberof SdtmClasses
     */
    _links?: SdtmClassesLinks;
}

/**
 * 
 * @export
 */
export type SdtmClassesLinks = {
    /**
     * 
     * @type {SdtmClassesRef}
     * @memberof SdtmClassesLinks
     */
    self?: SdtmClassesRef;
    /**
     * 
     * @type {SdtmClassesRef}
     * @memberof SdtmClassesLinks
     */
    priorVersion?: SdtmClassesRef;
    /**
     * 
     * @type {Array<SdtmClassRefElement>}
     * @memberof SdtmClassesLinks
     */
    classes?: Array<SdtmClassRefElement>;
}

/**
 * 
 * @export
 */
export type SdtmClassesRef = {
    /**
     * 
     * @type {string}
     * @memberof SdtmClassesRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassesRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmClassesRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmDataset = {
    /**
     * 
     * @type {string}
     * @memberof SdtmDataset
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDataset
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDataset
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDataset
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDataset
     */
    datasetStructure?: string;
    /**
     * 
     * @type {SdtmDatasetLinks}
     * @memberof SdtmDataset
     */
    _links?: SdtmDatasetLinks;
    /**
     * 
     * @type {Array<SdtmDatasetVariable>}
     * @memberof SdtmDataset
     */
    datasetVariables?: Array<SdtmDatasetVariable>;
}

/**
 * 
 * @export
 */
export type SdtmDatasetLinks = {
    /**
     * 
     * @type {SdtmDatasetRef}
     * @memberof SdtmDatasetLinks
     */
    self?: SdtmDatasetRef;
    /**
     * 
     * @type {SdtmProductRef}
     * @memberof SdtmDatasetLinks
     */
    parentProduct?: SdtmProductRef;
    /**
     * 
     * @type {SdtmClassRef}
     * @memberof SdtmDatasetLinks
     */
    parentClass?: SdtmClassRef;
    /**
     * 
     * @type {SdtmDatasetRef}
     * @memberof SdtmDatasetLinks
     */
    priorVersion?: SdtmDatasetRef;
}

/**
 * 
 * @export
 */
export type SdtmDatasetRef = {
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmDatasetRefElement = {
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmDatasetVariable = {
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariable
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariable
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariable
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariable
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariable
     */
    role?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariable
     */
    roleDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariable
     */
    simpleDatatype?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariable
     */
    describedValueDomain?: string;
    /**
     * 
     * @type {SdtmDatasetVariableLinks}
     * @memberof SdtmDatasetVariable
     */
    _links?: SdtmDatasetVariableLinks;
}

/**
 * 
 * @export
 */
export type SdtmDatasetVariableLinks = {
    /**
     * 
     * @type {SdtmDatasetVariableRef}
     * @memberof SdtmDatasetVariableLinks
     */
    self?: SdtmDatasetVariableRef;
    /**
     * 
     * @type {SdtmProductRef}
     * @memberof SdtmDatasetVariableLinks
     */
    parentProduct?: SdtmProductRef;
    /**
     * 
     * @type {SdtmDatasetRef}
     * @memberof SdtmDatasetVariableLinks
     */
    parentDataset?: SdtmDatasetRef;
    /**
     * 
     * @type {RootSdtmDatasetVariableRef}
     * @memberof SdtmDatasetVariableLinks
     */
    rootItem?: RootSdtmDatasetVariableRef;
    /**
     * 
     * @type {SdtmDatasetVariableRef}
     * @memberof SdtmDatasetVariableLinks
     */
    priorVersion?: SdtmDatasetVariableRef;
}

/**
 * 
 * @export
 */
export type SdtmDatasetVariableRef = {
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariableRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariableRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariableRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmDatasetVariableRefElement = {
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariableRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariableRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariableRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmDatasetVariableRefTarget = {
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariableRefTarget
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariableRefTarget
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariableRefTarget
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmDatasetVariableRefVersion = {
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariableRefVersion
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariableRefVersion
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariableRefVersion
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmDatasetVariables = {
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariables
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariables
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariables
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariables
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariables
     */
    datasetStructure?: string;
    /**
     * 
     * @type {SdtmDatasetVariablesLinks}
     * @memberof SdtmDatasetVariables
     */
    _links?: SdtmDatasetVariablesLinks;
}

/**
 * 
 * @export
 */
export type SdtmDatasetVariablesLinks = {
    /**
     * 
     * @type {SdtmDatasetVariablesRef}
     * @memberof SdtmDatasetVariablesLinks
     */
    self?: SdtmDatasetVariablesRef;
    /**
     * 
     * @type {SdtmProductRef}
     * @memberof SdtmDatasetVariablesLinks
     */
    parentProduct?: SdtmProductRef;
    /**
     * 
     * @type {SdtmClassRef}
     * @memberof SdtmDatasetVariablesLinks
     */
    parentClass?: SdtmClassRef;
    /**
     * 
     * @type {SdtmDatasetVariablesRef}
     * @memberof SdtmDatasetVariablesLinks
     */
    priorVersion?: SdtmDatasetVariablesRef;
    /**
     * 
     * @type {Array<SdtmDatasetVariableRefElement>}
     * @memberof SdtmDatasetVariablesLinks
     */
    datasetVariables?: Array<SdtmDatasetVariableRefElement>;
}

/**
 * 
 * @export
 */
export type SdtmDatasetVariablesRef = {
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariablesRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariablesRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetVariablesRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmDatasets = {
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasets
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasets
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasets
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasets
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasets
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasets
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasets
     */
    version?: string;
    /**
     * 
     * @type {SdtmDatasetsLinks}
     * @memberof SdtmDatasets
     */
    _links?: SdtmDatasetsLinks;
}

/**
 * 
 * @export
 */
export type SdtmDatasetsLinks = {
    /**
     * 
     * @type {SdtmDatasetsRef}
     * @memberof SdtmDatasetsLinks
     */
    self?: SdtmDatasetsRef;
    /**
     * 
     * @type {SdtmProductRef}
     * @memberof SdtmDatasetsLinks
     */
    parentProduct?: SdtmProductRef;
    /**
     * 
     * @type {SdtmDatasetsRef}
     * @memberof SdtmDatasetsLinks
     */
    priorVersion?: SdtmDatasetsRef;
    /**
     * 
     * @type {Array<SdtmDatasetRefElement>}
     * @memberof SdtmDatasetsLinks
     */
    datasets?: Array<SdtmDatasetRefElement>;
}

/**
 * 
 * @export
 */
export type SdtmDatasetsRef = {
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetsRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetsRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmDatasetsRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmProduct = {
    /**
     * 
     * @type {string}
     * @memberof SdtmProduct
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmProduct
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmProduct
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmProduct
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmProduct
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmProduct
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmProduct
     */
    version?: string;
    /**
     * 
     * @type {SdtmProductLinks}
     * @memberof SdtmProduct
     */
    _links?: SdtmProductLinks;
    /**
     * 
     * @type {Array<SdtmClass>}
     * @memberof SdtmProduct
     */
    classes?: Array<SdtmClass>;
    /**
     * 
     * @type {Array<SdtmDataset>}
     * @memberof SdtmProduct
     */
    datasets?: Array<SdtmDataset>;
}

/**
 * 
 * @export
 */
export type SdtmProductLinks = {
    /**
     * 
     * @type {SdtmProductRef}
     * @memberof SdtmProductLinks
     */
    self?: SdtmProductRef;
    /**
     * 
     * @type {SdtmProductRef}
     * @memberof SdtmProductLinks
     */
    priorVersion?: SdtmProductRef;
}

/**
 * 
 * @export
 */
export type SdtmProductRef = {
    /**
     * 
     * @type {string}
     * @memberof SdtmProductRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmProductRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmProductRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmProductRefElement = {
    /**
     * 
     * @type {string}
     * @memberof SdtmProductRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmProductRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmProductRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmigClass = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigClass
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigClass
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigClass
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigClass
     */
    description?: string;
    /**
     * 
     * @type {SdtmigClassLinks}
     * @memberof SdtmigClass
     */
    _links?: SdtmigClassLinks;
    /**
     * 
     * @type {Array<SdtmigDataset>}
     * @memberof SdtmigClass
     */
    datasets?: Array<SdtmigDataset>;
}

/**
 * 
 * @export
 */
export type SdtmigClassDatasets = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigClassDatasets
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigClassDatasets
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigClassDatasets
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigClassDatasets
     */
    description?: string;
    /**
     * 
     * @type {SdtmigClassDatasetsLinks}
     * @memberof SdtmigClassDatasets
     */
    _links?: SdtmigClassDatasetsLinks;
}

/**
 * 
 * @export
 */
export type SdtmigClassDatasetsLinks = {
    /**
     * 
     * @type {SdtmigClassDatasetsRef}
     * @memberof SdtmigClassDatasetsLinks
     */
    self?: SdtmigClassDatasetsRef;
    /**
     * 
     * @type {SdtmigProductRef}
     * @memberof SdtmigClassDatasetsLinks
     */
    parentProduct?: SdtmigProductRef;
    /**
     * 
     * @type {SdtmigClassDatasetsRef}
     * @memberof SdtmigClassDatasetsLinks
     */
    priorVersion?: SdtmigClassDatasetsRef;
    /**
     * 
     * @type {Array<SdtmigDatasetRefElement>}
     * @memberof SdtmigClassDatasetsLinks
     */
    datasets?: Array<SdtmigDatasetRefElement>;
}

/**
 * 
 * @export
 */
export type SdtmigClassDatasetsRef = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigClassDatasetsRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigClassDatasetsRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigClassDatasetsRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmigClassLinks = {
    /**
     * 
     * @type {SdtmigClassRef}
     * @memberof SdtmigClassLinks
     */
    self?: SdtmigClassRef;
    /**
     * 
     * @type {SdtmClassRef}
     * @memberof SdtmigClassLinks
     */
    modelClass?: SdtmClassRef;
    /**
     * 
     * @type {SdtmigProductRef}
     * @memberof SdtmigClassLinks
     */
    parentProduct?: SdtmigProductRef;
    /**
     * 
     * @type {SdtmigClassRef}
     * @memberof SdtmigClassLinks
     */
    parentClass?: SdtmigClassRef;
    /**
     * 
     * @type {Array<SdtmigClassRefSubclass>}
     * @memberof SdtmigClassLinks
     */
    subclasses?: Array<SdtmigClassRefSubclass>;
    /**
     * 
     * @type {SdtmigClassRef}
     * @memberof SdtmigClassLinks
     */
    priorVersion?: SdtmigClassRef;
}

/**
 * 
 * @export
 */
export type SdtmigClassRef = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigClassRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigClassRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigClassRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmigClassRefElement = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigClassRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigClassRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigClassRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmigClassRefSubclass = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigClassRefSubclass
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigClassRefSubclass
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigClassRefSubclass
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmigClasses = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigClasses
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigClasses
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigClasses
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigClasses
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigClasses
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigClasses
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigClasses
     */
    version?: string;
    /**
     * 
     * @type {SdtmigClassesLinks}
     * @memberof SdtmigClasses
     */
    _links?: SdtmigClassesLinks;
}

/**
 * 
 * @export
 */
export type SdtmigClassesLinks = {
    /**
     * 
     * @type {SdtmigClassesRef}
     * @memberof SdtmigClassesLinks
     */
    self?: SdtmigClassesRef;
    /**
     * 
     * @type {SdtmigClassesRef}
     * @memberof SdtmigClassesLinks
     */
    priorVersion?: SdtmigClassesRef;
    /**
     * 
     * @type {Array<SdtmigClassRefElement>}
     * @memberof SdtmigClassesLinks
     */
    classes?: Array<SdtmigClassRefElement>;
}

/**
 * 
 * @export
 */
export type SdtmigClassesRef = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigClassesRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigClassesRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigClassesRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmigDataset = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigDataset
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDataset
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDataset
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDataset
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDataset
     */
    datasetStructure?: string;
    /**
     * 
     * @type {SdtmigDatasetLinks}
     * @memberof SdtmigDataset
     */
    _links?: SdtmigDatasetLinks;
    /**
     * 
     * @type {Array<SdtmigDatasetVariable>}
     * @memberof SdtmigDataset
     */
    datasetVariables?: Array<SdtmigDatasetVariable>;
}

/**
 * 
 * @export
 */
export type SdtmigDatasetLinks = {
    /**
     * 
     * @type {SdtmigDatasetRef}
     * @memberof SdtmigDatasetLinks
     */
    self?: SdtmigDatasetRef;
    /**
     * 
     * @type {SdtmDatasetRef}
     * @memberof SdtmigDatasetLinks
     */
    modelDataset?: SdtmDatasetRef;
    /**
     * 
     * @type {SdtmigProductRef}
     * @memberof SdtmigDatasetLinks
     */
    parentProduct?: SdtmigProductRef;
    /**
     * 
     * @type {SdtmigClassRef}
     * @memberof SdtmigDatasetLinks
     */
    parentClass?: SdtmigClassRef;
    /**
     * 
     * @type {SdtmigDatasetRef}
     * @memberof SdtmigDatasetLinks
     */
    priorVersion?: SdtmigDatasetRef;
}

/**
 * 
 * @export
 */
export type SdtmigDatasetRef = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmigDatasetRefElement = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmigDatasetVariable = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariable
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariable
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariable
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariable
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariable
     */
    role?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariable
     */
    simpleDatatype?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariable
     */
    core?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariable
     */
    describedValueDomain?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SdtmigDatasetVariable
     */
    valueList?: Array<string>;
    /**
     * 
     * @type {SdtmigDatasetVariableLinks}
     * @memberof SdtmigDatasetVariable
     */
    _links?: SdtmigDatasetVariableLinks;
}

/**
 * 
 * @export
 */
export type SdtmigDatasetVariableLinks = {
    /**
     * 
     * @type {SdtmigDatasetVariableRef}
     * @memberof SdtmigDatasetVariableLinks
     */
    self?: SdtmigDatasetVariableRef;
    /**
     * 
     * @type {Array<RootCtCodelistRefElement>}
     * @memberof SdtmigDatasetVariableLinks
     */
    codelist?: Array<RootCtCodelistRefElement>;
    /**
     * 
     * @type {SdtmClassVariableRef}
     * @memberof SdtmigDatasetVariableLinks
     */
    modelClassVariable?: SdtmClassVariableRef;
    /**
     * 
     * @type {SdtmDatasetVariableRef}
     * @memberof SdtmigDatasetVariableLinks
     */
    modelDatasetVariable?: SdtmDatasetVariableRef;
    /**
     * 
     * @type {SdtmigProductRef}
     * @memberof SdtmigDatasetVariableLinks
     */
    parentProduct?: SdtmigProductRef;
    /**
     * 
     * @type {SdtmigDatasetRef}
     * @memberof SdtmigDatasetVariableLinks
     */
    parentDataset?: SdtmigDatasetRef;
    /**
     * 
     * @type {RootSdtmigDatasetVariableRef}
     * @memberof SdtmigDatasetVariableLinks
     */
    rootItem?: RootSdtmigDatasetVariableRef;
    /**
     * 
     * @type {SdtmigDatasetVariableRef}
     * @memberof SdtmigDatasetVariableLinks
     */
    priorVersion?: SdtmigDatasetVariableRef;
}

/**
 * 
 * @export
 */
export type SdtmigDatasetVariableRef = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariableRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariableRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariableRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmigDatasetVariableRefElement = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariableRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariableRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariableRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmigDatasetVariableRefTarget = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariableRefTarget
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariableRefTarget
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariableRefTarget
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmigDatasetVariableRefVersion = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariableRefVersion
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariableRefVersion
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariableRefVersion
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmigDatasetVariables = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariables
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariables
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariables
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariables
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariables
     */
    datasetStructure?: string;
    /**
     * 
     * @type {SdtmigDatasetVariablesLinks}
     * @memberof SdtmigDatasetVariables
     */
    _links?: SdtmigDatasetVariablesLinks;
}

/**
 * 
 * @export
 */
export type SdtmigDatasetVariablesLinks = {
    /**
     * 
     * @type {SdtmigDatasetVariablesRef}
     * @memberof SdtmigDatasetVariablesLinks
     */
    self?: SdtmigDatasetVariablesRef;
    /**
     * 
     * @type {SdtmDatasetRef}
     * @memberof SdtmigDatasetVariablesLinks
     */
    modelDataset?: SdtmDatasetRef;
    /**
     * 
     * @type {SdtmigProductRef}
     * @memberof SdtmigDatasetVariablesLinks
     */
    parentProduct?: SdtmigProductRef;
    /**
     * 
     * @type {SdtmigClassRef}
     * @memberof SdtmigDatasetVariablesLinks
     */
    parentClass?: SdtmigClassRef;
    /**
     * 
     * @type {SdtmigDatasetVariablesRef}
     * @memberof SdtmigDatasetVariablesLinks
     */
    priorVersion?: SdtmigDatasetVariablesRef;
    /**
     * 
     * @type {Array<SdtmigDatasetVariableRefElement>}
     * @memberof SdtmigDatasetVariablesLinks
     */
    datasetVariables?: Array<SdtmigDatasetVariableRefElement>;
}

/**
 * 
 * @export
 */
export type SdtmigDatasetVariablesRef = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariablesRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariablesRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetVariablesRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmigDatasets = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasets
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasets
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasets
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasets
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasets
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasets
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasets
     */
    version?: string;
    /**
     * 
     * @type {SdtmigDatasetsLinks}
     * @memberof SdtmigDatasets
     */
    _links?: SdtmigDatasetsLinks;
}

/**
 * 
 * @export
 */
export type SdtmigDatasetsLinks = {
    /**
     * 
     * @type {SdtmigDatasetsRef}
     * @memberof SdtmigDatasetsLinks
     */
    self?: SdtmigDatasetsRef;
    /**
     * 
     * @type {SdtmigProductRef}
     * @memberof SdtmigDatasetsLinks
     */
    parentProduct?: SdtmigProductRef;
    /**
     * 
     * @type {SdtmigDatasetsRef}
     * @memberof SdtmigDatasetsLinks
     */
    priorVersion?: SdtmigDatasetsRef;
    /**
     * 
     * @type {Array<SdtmigDatasetRefElement>}
     * @memberof SdtmigDatasetsLinks
     */
    datasets?: Array<SdtmigDatasetRefElement>;
}

/**
 * 
 * @export
 */
export type SdtmigDatasetsRef = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetsRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetsRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigDatasetsRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmigProduct = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigProduct
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigProduct
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigProduct
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigProduct
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigProduct
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigProduct
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigProduct
     */
    version?: string;
    /**
     * 
     * @type {SdtmigProductLinks}
     * @memberof SdtmigProduct
     */
    _links?: SdtmigProductLinks;
    /**
     * 
     * @type {Array<SdtmigClass>}
     * @memberof SdtmigProduct
     */
    classes?: Array<SdtmigClass>;
}

/**
 * 
 * @export
 */
export type SdtmigProductLinks = {
    /**
     * 
     * @type {SdtmigProductRef}
     * @memberof SdtmigProductLinks
     */
    self?: SdtmigProductRef;
    /**
     * 
     * @type {SdtmProductRef}
     * @memberof SdtmigProductLinks
     */
    model?: SdtmProductRef;
    /**
     * 
     * @type {SdtmigProductRef}
     * @memberof SdtmigProductLinks
     */
    priorVersion?: SdtmigProductRef;
}

/**
 * 
 * @export
 */
export type SdtmigProductRef = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigProductRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigProductRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigProductRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SdtmigProductRefElement = {
    /**
     * 
     * @type {string}
     * @memberof SdtmigProductRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigProductRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SdtmigProductRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SendigClass = {
    /**
     * 
     * @type {string}
     * @memberof SendigClass
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigClass
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigClass
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigClass
     */
    description?: string;
    /**
     * 
     * @type {SendigClassLinks}
     * @memberof SendigClass
     */
    _links?: SendigClassLinks;
    /**
     * 
     * @type {Array<SendigDataset>}
     * @memberof SendigClass
     */
    datasets?: Array<SendigDataset>;
}

/**
 * 
 * @export
 */
export type SendigClassDatasets = {
    /**
     * 
     * @type {string}
     * @memberof SendigClassDatasets
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigClassDatasets
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigClassDatasets
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigClassDatasets
     */
    description?: string;
    /**
     * 
     * @type {SendigClassDatasetsLinks}
     * @memberof SendigClassDatasets
     */
    _links?: SendigClassDatasetsLinks;
}

/**
 * 
 * @export
 */
export type SendigClassDatasetsLinks = {
    /**
     * 
     * @type {SendigClassDatasetsRef}
     * @memberof SendigClassDatasetsLinks
     */
    self?: SendigClassDatasetsRef;
    /**
     * 
     * @type {SendigProductRef}
     * @memberof SendigClassDatasetsLinks
     */
    parentProduct?: SendigProductRef;
    /**
     * 
     * @type {Array<SendigDatasetRefElement>}
     * @memberof SendigClassDatasetsLinks
     */
    datasets?: Array<SendigDatasetRefElement>;
}

/**
 * 
 * @export
 */
export type SendigClassDatasetsRef = {
    /**
     * 
     * @type {string}
     * @memberof SendigClassDatasetsRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigClassDatasetsRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigClassDatasetsRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SendigClassLinks = {
    /**
     * 
     * @type {SendigClassRef}
     * @memberof SendigClassLinks
     */
    self?: SendigClassRef;
    /**
     * 
     * @type {SdtmClassRef}
     * @memberof SendigClassLinks
     */
    modelClass?: SdtmClassRef;
    /**
     * 
     * @type {SendigProductRef}
     * @memberof SendigClassLinks
     */
    parentProduct?: SendigProductRef;
    /**
     * 
     * @type {SendigClassRef}
     * @memberof SendigClassLinks
     */
    parentClass?: SendigClassRef;
    /**
     * 
     * @type {Array<SendigClassRefSubclass>}
     * @memberof SendigClassLinks
     */
    subclasses?: Array<SendigClassRefSubclass>;
    /**
     * 
     * @type {SendigClassRef}
     * @memberof SendigClassLinks
     */
    priorVersion?: SendigClassRef;
}

/**
 * 
 * @export
 */
export type SendigClassRef = {
    /**
     * 
     * @type {string}
     * @memberof SendigClassRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigClassRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigClassRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SendigClassRefElement = {
    /**
     * 
     * @type {string}
     * @memberof SendigClassRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigClassRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigClassRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SendigClassRefSubclass = {
    /**
     * 
     * @type {string}
     * @memberof SendigClassRefSubclass
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigClassRefSubclass
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigClassRefSubclass
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SendigClasses = {
    /**
     * 
     * @type {string}
     * @memberof SendigClasses
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigClasses
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigClasses
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigClasses
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigClasses
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigClasses
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigClasses
     */
    version?: string;
    /**
     * 
     * @type {SendigClassesLinks}
     * @memberof SendigClasses
     */
    _links?: SendigClassesLinks;
}

/**
 * 
 * @export
 */
export type SendigClassesLinks = {
    /**
     * 
     * @type {SendigClassesRef}
     * @memberof SendigClassesLinks
     */
    self?: SendigClassesRef;
    /**
     * 
     * @type {SendigClassesRef}
     * @memberof SendigClassesLinks
     */
    priorVersion?: SendigClassesRef;
    /**
     * 
     * @type {Array<SendigClassRefElement>}
     * @memberof SendigClassesLinks
     */
    classes?: Array<SendigClassRefElement>;
}

/**
 * 
 * @export
 */
export type SendigClassesRef = {
    /**
     * 
     * @type {string}
     * @memberof SendigClassesRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigClassesRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigClassesRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SendigDataset = {
    /**
     * 
     * @type {string}
     * @memberof SendigDataset
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDataset
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDataset
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDataset
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDataset
     */
    datasetStructure?: string;
    /**
     * 
     * @type {SendigDatasetLinks}
     * @memberof SendigDataset
     */
    _links?: SendigDatasetLinks;
    /**
     * 
     * @type {Array<SendigDatasetVariable>}
     * @memberof SendigDataset
     */
    datasetVariables?: Array<SendigDatasetVariable>;
}

/**
 * 
 * @export
 */
export type SendigDatasetLinks = {
    /**
     * 
     * @type {SendigDatasetRef}
     * @memberof SendigDatasetLinks
     */
    self?: SendigDatasetRef;
    /**
     * 
     * @type {SdtmDatasetRef}
     * @memberof SendigDatasetLinks
     */
    modelDataset?: SdtmDatasetRef;
    /**
     * 
     * @type {SendigProductRef}
     * @memberof SendigDatasetLinks
     */
    parentProduct?: SendigProductRef;
    /**
     * 
     * @type {SendigClassRef}
     * @memberof SendigDatasetLinks
     */
    parentClass?: SendigClassRef;
    /**
     * 
     * @type {SendigDatasetRef}
     * @memberof SendigDatasetLinks
     */
    priorVersion?: SendigDatasetRef;
}

/**
 * 
 * @export
 */
export type SendigDatasetRef = {
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SendigDatasetRefElement = {
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SendigDatasetVariable = {
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariable
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariable
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariable
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariable
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariable
     */
    role?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariable
     */
    simpleDatatype?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariable
     */
    core?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariable
     */
    describedValueDomain?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SendigDatasetVariable
     */
    valueList?: Array<string>;
    /**
     * 
     * @type {SendigDatasetVariableLinks}
     * @memberof SendigDatasetVariable
     */
    _links?: SendigDatasetVariableLinks;
}

/**
 * 
 * @export
 */
export type SendigDatasetVariableLinks = {
    /**
     * 
     * @type {SendigDatasetVariableRef}
     * @memberof SendigDatasetVariableLinks
     */
    self?: SendigDatasetVariableRef;
    /**
     * 
     * @type {Array<RootCtCodelistRefElement>}
     * @memberof SendigDatasetVariableLinks
     */
    codelist?: Array<RootCtCodelistRefElement>;
    /**
     * 
     * @type {SdtmClassVariableRef}
     * @memberof SendigDatasetVariableLinks
     */
    modelClassVariable?: SdtmClassVariableRef;
    /**
     * 
     * @type {SdtmDatasetVariableRef}
     * @memberof SendigDatasetVariableLinks
     */
    modelDatasetVariable?: SdtmDatasetVariableRef;
    /**
     * 
     * @type {SendigProductRef}
     * @memberof SendigDatasetVariableLinks
     */
    parentProduct?: SendigProductRef;
    /**
     * 
     * @type {SendigDatasetRef}
     * @memberof SendigDatasetVariableLinks
     */
    parentDataset?: SendigDatasetRef;
    /**
     * 
     * @type {RootSendigDatasetVariableRef}
     * @memberof SendigDatasetVariableLinks
     */
    rootItem?: RootSendigDatasetVariableRef;
    /**
     * 
     * @type {SendigDatasetVariableRef}
     * @memberof SendigDatasetVariableLinks
     */
    priorVersion?: SendigDatasetVariableRef;
}

/**
 * 
 * @export
 */
export type SendigDatasetVariableRef = {
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariableRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariableRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariableRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SendigDatasetVariableRefElement = {
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariableRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariableRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariableRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SendigDatasetVariableRefVersion = {
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariableRefVersion
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariableRefVersion
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariableRefVersion
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SendigDatasetVariables = {
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariables
     */
    ordinal?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariables
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariables
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariables
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariables
     */
    datasetStructure?: string;
    /**
     * 
     * @type {SendigDatasetVariablesLinks}
     * @memberof SendigDatasetVariables
     */
    _links?: SendigDatasetVariablesLinks;
}

/**
 * 
 * @export
 */
export type SendigDatasetVariablesLinks = {
    /**
     * 
     * @type {SendigDatasetVariablesRef}
     * @memberof SendigDatasetVariablesLinks
     */
    self?: SendigDatasetVariablesRef;
    /**
     * 
     * @type {SdtmDatasetRef}
     * @memberof SendigDatasetVariablesLinks
     */
    modelDataset?: SdtmDatasetRef;
    /**
     * 
     * @type {SendigProductRef}
     * @memberof SendigDatasetVariablesLinks
     */
    parentProduct?: SendigProductRef;
    /**
     * 
     * @type {SendigClassRef}
     * @memberof SendigDatasetVariablesLinks
     */
    parentClass?: SendigClassRef;
    /**
     * 
     * @type {SendigDatasetVariablesRef}
     * @memberof SendigDatasetVariablesLinks
     */
    priorVersion?: SendigDatasetVariablesRef;
    /**
     * 
     * @type {Array<SendigDatasetVariableRefElement>}
     * @memberof SendigDatasetVariablesLinks
     */
    datasetVariables?: Array<SendigDatasetVariableRefElement>;
}

/**
 * 
 * @export
 */
export type SendigDatasetVariablesRef = {
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariablesRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariablesRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetVariablesRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SendigDatasets = {
    /**
     * 
     * @type {string}
     * @memberof SendigDatasets
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasets
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasets
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasets
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasets
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasets
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasets
     */
    version?: string;
    /**
     * 
     * @type {SendigDatasetsLinks}
     * @memberof SendigDatasets
     */
    _links?: SendigDatasetsLinks;
}

/**
 * 
 * @export
 */
export type SendigDatasetsLinks = {
    /**
     * 
     * @type {SendigDatasetsRef}
     * @memberof SendigDatasetsLinks
     */
    self?: SendigDatasetsRef;
    /**
     * 
     * @type {SendigProductRef}
     * @memberof SendigDatasetsLinks
     */
    parentProduct?: SendigProductRef;
    /**
     * 
     * @type {Array<SendigDatasetRefElement>}
     * @memberof SendigDatasetsLinks
     */
    datasets?: Array<SendigDatasetRefElement>;
}

/**
 * 
 * @export
 */
export type SendigDatasetsRef = {
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetsRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetsRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigDatasetsRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SendigProduct = {
    /**
     * 
     * @type {string}
     * @memberof SendigProduct
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigProduct
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigProduct
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigProduct
     */
    source?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigProduct
     */
    effectiveDate?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigProduct
     */
    registrationStatus?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigProduct
     */
    version?: string;
    /**
     * 
     * @type {SendigProductLinks}
     * @memberof SendigProduct
     */
    _links?: SendigProductLinks;
    /**
     * 
     * @type {Array<SendigClass>}
     * @memberof SendigProduct
     */
    classes?: Array<SendigClass>;
}

/**
 * 
 * @export
 */
export type SendigProductLinks = {
    /**
     * 
     * @type {SendigProductRef}
     * @memberof SendigProductLinks
     */
    self?: SendigProductRef;
    /**
     * 
     * @type {SdtmProductRef}
     * @memberof SendigProductLinks
     */
    model?: SdtmProductRef;
    /**
     * 
     * @type {SendigProductRef}
     * @memberof SendigProductLinks
     */
    priorVersion?: SendigProductRef;
}

/**
 * 
 * @export
 */
export type SendigProductRef = {
    /**
     * 
     * @type {string}
     * @memberof SendigProductRef
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigProductRef
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigProductRef
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type SendigProductRefElement = {
    /**
     * 
     * @type {string}
     * @memberof SendigProductRefElement
     */
    href?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigProductRefElement
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof SendigProductRefElement
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type XmlAbout = {
    /**
     * 
     * @type {About}
     * @memberof XmlAbout
     */
    self?: About;
}

/**
 * 
 * @export
 */
export type XmlAdamDatastructure = {
    /**
     * 
     * @type {AdamDatastructure}
     * @memberof XmlAdamDatastructure
     */
    self?: AdamDatastructure;
}

/**
 * 
 * @export
 */
export type XmlAdamDatastructureVariables = {
    /**
     * 
     * @type {AdamDatastructureVariables}
     * @memberof XmlAdamDatastructureVariables
     */
    self?: AdamDatastructureVariables;
}

/**
 * 
 * @export
 */
export type XmlAdamDatastructureVarsets = {
    /**
     * 
     * @type {AdamDatastructureVarsets}
     * @memberof XmlAdamDatastructureVarsets
     */
    self?: AdamDatastructureVarsets;
}

/**
 * 
 * @export
 */
export type XmlAdamProduct = {
    /**
     * 
     * @type {AdamProduct}
     * @memberof XmlAdamProduct
     */
    self?: AdamProduct;
}

/**
 * 
 * @export
 */
export type XmlAdamProductDatastructures = {
    /**
     * 
     * @type {AdamProductDatastructures}
     * @memberof XmlAdamProductDatastructures
     */
    self?: AdamProductDatastructures;
}

/**
 * 
 * @export
 */
export type XmlAdamVariable = {
    /**
     * 
     * @type {AdamVariable}
     * @memberof XmlAdamVariable
     */
    self?: AdamVariable;
}

/**
 * 
 * @export
 */
export type XmlAdamVarset = {
    /**
     * 
     * @type {AdamVarset}
     * @memberof XmlAdamVarset
     */
    self?: AdamVarset;
}

/**
 * 
 * @export
 */
export type XmlCdashClass = {
    /**
     * 
     * @type {CdashClass}
     * @memberof XmlCdashClass
     */
    self?: CdashClass;
}

/**
 * 
 * @export
 */
export type XmlCdashClassDomains = {
    /**
     * 
     * @type {CdashClassDomains}
     * @memberof XmlCdashClassDomains
     */
    self?: CdashClassDomains;
}

/**
 * 
 * @export
 */
export type XmlCdashClassField = {
    /**
     * 
     * @type {CdashClassField}
     * @memberof XmlCdashClassField
     */
    self?: CdashClassField;
}

/**
 * 
 * @export
 */
export type XmlCdashDomain = {
    /**
     * 
     * @type {CdashDomain}
     * @memberof XmlCdashDomain
     */
    self?: CdashDomain;
}

/**
 * 
 * @export
 */
export type XmlCdashDomainField = {
    /**
     * 
     * @type {CdashDomainField}
     * @memberof XmlCdashDomainField
     */
    self?: CdashDomainField;
}

/**
 * 
 * @export
 */
export type XmlCdashDomainFields = {
    /**
     * 
     * @type {CdashDomainFields}
     * @memberof XmlCdashDomainFields
     */
    self?: CdashDomainFields;
}

/**
 * 
 * @export
 */
export type XmlCdashProduct = {
    /**
     * 
     * @type {CdashProduct}
     * @memberof XmlCdashProduct
     */
    self?: CdashProduct;
}

/**
 * 
 * @export
 */
export type XmlCdashProductClasses = {
    /**
     * 
     * @type {CdashProductClasses}
     * @memberof XmlCdashProductClasses
     */
    self?: CdashProductClasses;
}

/**
 * 
 * @export
 */
export type XmlCdashProductDomains = {
    /**
     * 
     * @type {CdashProductDomains}
     * @memberof XmlCdashProductDomains
     */
    self?: CdashProductDomains;
}

/**
 * 
 * @export
 */
export type XmlCdashigClass = {
    /**
     * 
     * @type {CdashigClass}
     * @memberof XmlCdashigClass
     */
    self?: CdashigClass;
}

/**
 * 
 * @export
 */
export type XmlCdashigClassDomains = {
    /**
     * 
     * @type {CdashigClassDomains}
     * @memberof XmlCdashigClassDomains
     */
    self?: CdashigClassDomains;
}

/**
 * 
 * @export
 */
export type XmlCdashigClassScenarios = {
    /**
     * 
     * @type {CdashigClassScenarios}
     * @memberof XmlCdashigClassScenarios
     */
    self?: CdashigClassScenarios;
}

/**
 * 
 * @export
 */
export type XmlCdashigDomain = {
    /**
     * 
     * @type {CdashigDomain}
     * @memberof XmlCdashigDomain
     */
    self?: CdashigDomain;
}

/**
 * 
 * @export
 */
export type XmlCdashigDomainField = {
    /**
     * 
     * @type {CdashigDomainField}
     * @memberof XmlCdashigDomainField
     */
    self?: CdashigDomainField;
}

/**
 * 
 * @export
 */
export type XmlCdashigDomainFields = {
    /**
     * 
     * @type {CdashigDomainFields}
     * @memberof XmlCdashigDomainFields
     */
    self?: CdashigDomainFields;
}

/**
 * 
 * @export
 */
export type XmlCdashigProduct = {
    /**
     * 
     * @type {CdashigProduct}
     * @memberof XmlCdashigProduct
     */
    self?: CdashigProduct;
}

/**
 * 
 * @export
 */
export type XmlCdashigProductClasses = {
    /**
     * 
     * @type {CdashigProductClasses}
     * @memberof XmlCdashigProductClasses
     */
    self?: CdashigProductClasses;
}

/**
 * 
 * @export
 */
export type XmlCdashigProductDomains = {
    /**
     * 
     * @type {CdashigProductDomains}
     * @memberof XmlCdashigProductDomains
     */
    self?: CdashigProductDomains;
}

/**
 * 
 * @export
 */
export type XmlCdashigProductScenarios = {
    /**
     * 
     * @type {CdashigProductScenarios}
     * @memberof XmlCdashigProductScenarios
     */
    self?: CdashigProductScenarios;
}

/**
 * 
 * @export
 */
export type XmlCdashigScenario = {
    /**
     * 
     * @type {CdashigScenario}
     * @memberof XmlCdashigScenario
     */
    self?: CdashigScenario;
}

/**
 * 
 * @export
 */
export type XmlCdashigScenarioField = {
    /**
     * 
     * @type {CdashigScenarioField}
     * @memberof XmlCdashigScenarioField
     */
    self?: CdashigScenarioField;
}

/**
 * 
 * @export
 */
export type XmlCdashigScenarioFields = {
    /**
     * 
     * @type {CdashigScenarioFields}
     * @memberof XmlCdashigScenarioFields
     */
    self?: CdashigScenarioFields;
}

/**
 * 
 * @export
 */
export type XmlCtCodelist = {
    /**
     * 
     * @type {CtCodelist}
     * @memberof XmlCtCodelist
     */
    self?: CtCodelist;
}

/**
 * 
 * @export
 */
export type XmlCtCodelistTerms = {
    /**
     * 
     * @type {CtCodelistTerms}
     * @memberof XmlCtCodelistTerms
     */
    self?: CtCodelistTerms;
}

/**
 * 
 * @export
 */
export type XmlCtPackage = {
    /**
     * 
     * @type {CtPackage}
     * @memberof XmlCtPackage
     */
    self?: CtPackage;
}

/**
 * 
 * @export
 */
export type XmlCtPackageCodelists = {
    /**
     * 
     * @type {CtPackageCodelists}
     * @memberof XmlCtPackageCodelists
     */
    self?: CtPackageCodelists;
}

/**
 * 
 * @export
 */
export type XmlCtPackages = {
    /**
     * 
     * @type {CtPackages}
     * @memberof XmlCtPackages
     */
    self?: CtPackages;
}

/**
 * 
 * @export
 */
export type XmlCtTerm = {
    /**
     * 
     * @type {CtTerm}
     * @memberof XmlCtTerm
     */
    self?: CtTerm;
}

/**
 * 
 * @export
 */
export type XmlLastupdated = {
    /**
     * 
     * @type {Lastupdated}
     * @memberof XmlLastupdated
     */
    self?: Lastupdated;
}

/**
 * 
 * @export
 */
export type XmlProductgroupDataAnalysis = {
    /**
     * 
     * @type {ProductgroupDataAnalysis}
     * @memberof XmlProductgroupDataAnalysis
     */
    self?: ProductgroupDataAnalysis;
}

/**
 * 
 * @export
 */
export type XmlProductgroupDataCollection = {
    /**
     * 
     * @type {ProductgroupDataCollection}
     * @memberof XmlProductgroupDataCollection
     */
    self?: ProductgroupDataCollection;
}

/**
 * 
 * @export
 */
export type XmlProductgroupDataTabulation = {
    /**
     * 
     * @type {ProductgroupDataTabulation}
     * @memberof XmlProductgroupDataTabulation
     */
    self?: ProductgroupDataTabulation;
}

/**
 * 
 * @export
 */
export type XmlProductgroupTerminology = {
    /**
     * 
     * @type {ProductgroupTerminology}
     * @memberof XmlProductgroupTerminology
     */
    self?: ProductgroupTerminology;
}

/**
 * 
 * @export
 */
export type XmlProducts = {
    /**
     * 
     * @type {Products}
     * @memberof XmlProducts
     */
    self?: Products;
}

/**
 * 
 * @export
 */
export type XmlQrsItem = {
    /**
     * 
     * @type {QrsItem}
     * @memberof XmlQrsItem
     */
    self?: QrsItem;
}

/**
 * 
 * @export
 */
export type XmlQrsItems = {
    /**
     * 
     * @type {QrsItems}
     * @memberof XmlQrsItems
     */
    self?: QrsItems;
}

/**
 * 
 * @export
 */
export type XmlQrsProduct = {
    /**
     * 
     * @type {QrsProduct}
     * @memberof XmlQrsProduct
     */
    self?: QrsProduct;
}

/**
 * 
 * @export
 */
export type XmlQrsResponsegroup = {
    /**
     * 
     * @type {QrsResponsegroup}
     * @memberof XmlQrsResponsegroup
     */
    self?: QrsResponsegroup;
}

/**
 * 
 * @export
 */
export type XmlQrsResponsegroups = {
    /**
     * 
     * @type {QrsResponsegroups}
     * @memberof XmlQrsResponsegroups
     */
    self?: QrsResponsegroups;
}

/**
 * 
 * @export
 */
export type XmlRootCdashClassField = {
    /**
     * 
     * @type {RootCdashClassField}
     * @memberof XmlRootCdashClassField
     */
    self?: RootCdashClassField;
}

/**
 * 
 * @export
 */
export type XmlRootCdashDomainField = {
    /**
     * 
     * @type {RootCdashDomainField}
     * @memberof XmlRootCdashDomainField
     */
    self?: RootCdashDomainField;
}

/**
 * 
 * @export
 */
export type XmlRootCdashigDomainField = {
    /**
     * 
     * @type {RootCdashigDomainField}
     * @memberof XmlRootCdashigDomainField
     */
    self?: RootCdashigDomainField;
}

/**
 * 
 * @export
 */
export type XmlRootCdashigScenarioField = {
    /**
     * 
     * @type {RootCdashigScenarioField}
     * @memberof XmlRootCdashigScenarioField
     */
    self?: RootCdashigScenarioField;
}

/**
 * 
 * @export
 */
export type XmlRootCtCodelist = {
    /**
     * 
     * @type {RootCtCodelist}
     * @memberof XmlRootCtCodelist
     */
    self?: RootCtCodelist;
}

/**
 * 
 * @export
 */
export type XmlRootCtTerm = {
    /**
     * 
     * @type {RootCtTerm}
     * @memberof XmlRootCtTerm
     */
    self?: RootCtTerm;
}

/**
 * 
 * @export
 */
export type XmlRootSdtmClassVariable = {
    /**
     * 
     * @type {RootSdtmClassVariable}
     * @memberof XmlRootSdtmClassVariable
     */
    self?: RootSdtmClassVariable;
}

/**
 * 
 * @export
 */
export type XmlRootSdtmDatasetVariable = {
    /**
     * 
     * @type {RootSdtmDatasetVariable}
     * @memberof XmlRootSdtmDatasetVariable
     */
    self?: RootSdtmDatasetVariable;
}

/**
 * 
 * @export
 */
export type XmlRootSdtmigDatasetVariable = {
    /**
     * 
     * @type {RootSdtmigDatasetVariable}
     * @memberof XmlRootSdtmigDatasetVariable
     */
    self?: RootSdtmigDatasetVariable;
}

/**
 * 
 * @export
 */
export type XmlRootSendigDatasetVariable = {
    /**
     * 
     * @type {RootSendigDatasetVariable}
     * @memberof XmlRootSendigDatasetVariable
     */
    self?: RootSendigDatasetVariable;
}

/**
 * 
 * @export
 */
export type XmlSdtmClass = {
    /**
     * 
     * @type {SdtmClass}
     * @memberof XmlSdtmClass
     */
    self?: SdtmClass;
}

/**
 * 
 * @export
 */
export type XmlSdtmClassDatasets = {
    /**
     * 
     * @type {SdtmClassDatasets}
     * @memberof XmlSdtmClassDatasets
     */
    self?: SdtmClassDatasets;
}

/**
 * 
 * @export
 */
export type XmlSdtmClassVariable = {
    /**
     * 
     * @type {SdtmClassVariable}
     * @memberof XmlSdtmClassVariable
     */
    self?: SdtmClassVariable;
}

/**
 * 
 * @export
 */
export type XmlSdtmClassVariables = {
    /**
     * 
     * @type {SdtmClassVariables}
     * @memberof XmlSdtmClassVariables
     */
    self?: SdtmClassVariables;
}

/**
 * 
 * @export
 */
export type XmlSdtmClasses = {
    /**
     * 
     * @type {SdtmClasses}
     * @memberof XmlSdtmClasses
     */
    self?: SdtmClasses;
}

/**
 * 
 * @export
 */
export type XmlSdtmDataset = {
    /**
     * 
     * @type {SdtmDataset}
     * @memberof XmlSdtmDataset
     */
    self?: SdtmDataset;
}

/**
 * 
 * @export
 */
export type XmlSdtmDatasetVariable = {
    /**
     * 
     * @type {SdtmDatasetVariable}
     * @memberof XmlSdtmDatasetVariable
     */
    self?: SdtmDatasetVariable;
}

/**
 * 
 * @export
 */
export type XmlSdtmDatasetVariables = {
    /**
     * 
     * @type {SdtmDatasetVariables}
     * @memberof XmlSdtmDatasetVariables
     */
    self?: SdtmDatasetVariables;
}

/**
 * 
 * @export
 */
export type XmlSdtmDatasets = {
    /**
     * 
     * @type {SdtmDatasets}
     * @memberof XmlSdtmDatasets
     */
    self?: SdtmDatasets;
}

/**
 * 
 * @export
 */
export type XmlSdtmProduct = {
    /**
     * 
     * @type {SdtmProduct}
     * @memberof XmlSdtmProduct
     */
    self?: SdtmProduct;
}

/**
 * 
 * @export
 */
export type XmlSdtmigClass = {
    /**
     * 
     * @type {SdtmigClass}
     * @memberof XmlSdtmigClass
     */
    self?: SdtmigClass;
}

/**
 * 
 * @export
 */
export type XmlSdtmigClassDatasets = {
    /**
     * 
     * @type {SdtmigClassDatasets}
     * @memberof XmlSdtmigClassDatasets
     */
    self?: SdtmigClassDatasets;
}

/**
 * 
 * @export
 */
export type XmlSdtmigClasses = {
    /**
     * 
     * @type {SdtmigClasses}
     * @memberof XmlSdtmigClasses
     */
    self?: SdtmigClasses;
}

/**
 * 
 * @export
 */
export type XmlSdtmigDataset = {
    /**
     * 
     * @type {SdtmigDataset}
     * @memberof XmlSdtmigDataset
     */
    self?: SdtmigDataset;
}

/**
 * 
 * @export
 */
export type XmlSdtmigDatasetVariable = {
    /**
     * 
     * @type {SdtmigDatasetVariable}
     * @memberof XmlSdtmigDatasetVariable
     */
    self?: SdtmigDatasetVariable;
}

/**
 * 
 * @export
 */
export type XmlSdtmigDatasetVariables = {
    /**
     * 
     * @type {SdtmigDatasetVariables}
     * @memberof XmlSdtmigDatasetVariables
     */
    self?: SdtmigDatasetVariables;
}

/**
 * 
 * @export
 */
export type XmlSdtmigDatasets = {
    /**
     * 
     * @type {SdtmigDatasets}
     * @memberof XmlSdtmigDatasets
     */
    self?: SdtmigDatasets;
}

/**
 * 
 * @export
 */
export type XmlSdtmigProduct = {
    /**
     * 
     * @type {SdtmigProduct}
     * @memberof XmlSdtmigProduct
     */
    self?: SdtmigProduct;
}

/**
 * 
 * @export
 */
export type XmlSendigClass = {
    /**
     * 
     * @type {SendigClass}
     * @memberof XmlSendigClass
     */
    self?: SendigClass;
}

/**
 * 
 * @export
 */
export type XmlSendigClassDatasets = {
    /**
     * 
     * @type {SendigClassDatasets}
     * @memberof XmlSendigClassDatasets
     */
    self?: SendigClassDatasets;
}

/**
 * 
 * @export
 */
export type XmlSendigClasses = {
    /**
     * 
     * @type {SendigClasses}
     * @memberof XmlSendigClasses
     */
    self?: SendigClasses;
}

/**
 * 
 * @export
 */
export type XmlSendigDataset = {
    /**
     * 
     * @type {SendigDataset}
     * @memberof XmlSendigDataset
     */
    self?: SendigDataset;
}

/**
 * 
 * @export
 */
export type XmlSendigDatasetVariable = {
    /**
     * 
     * @type {SendigDatasetVariable}
     * @memberof XmlSendigDatasetVariable
     */
    self?: SendigDatasetVariable;
}

/**
 * 
 * @export
 */
export type XmlSendigDatasetVariables = {
    /**
     * 
     * @type {SendigDatasetVariables}
     * @memberof XmlSendigDatasetVariables
     */
    self?: SendigDatasetVariables;
}

/**
 * 
 * @export
 */
export type XmlSendigDatasets = {
    /**
     * 
     * @type {SendigDatasets}
     * @memberof XmlSendigDatasets
     */
    self?: SendigDatasets;
}

/**
 * 
 * @export
 */
export type XmlSendigProduct = {
    /**
     * 
     * @type {SendigProduct}
     * @memberof XmlSendigProduct
     */
    self?: SendigProduct;
}



/**
 * AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi - fetch parameter creator
 * @export
 */
export const AnalysisDataModelAndImplementationGuideADaMAndADaMIGApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get ADaM Data Structure List
         * @throws {RequiredError}
         */
        mdrAdamProductDatastructuresGet(product: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling mdrAdamProductDatastructuresGet.');
            }
            const localVarPath = `/mdr/adam/{product}/datastructures`
                .replace(`{${"product"}}`, encodeURIComponent(String(product)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get ADaM Data Structure
         * @throws {RequiredError}
         */
        mdrAdamProductDatastructuresStructureGet(product: string, structure: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling mdrAdamProductDatastructuresStructureGet.');
            }
            // verify required parameter 'structure' is not null or undefined
            if (structure === null || structure === undefined) {
                throw new RequiredError('structure','Required parameter structure was null or undefined when calling mdrAdamProductDatastructuresStructureGet.');
            }
            const localVarPath = `/mdr/adam/{product}/datastructures/{structure}`
                .replace(`{${"product"}}`, encodeURIComponent(String(product)))
                .replace(`{${"structure"}}`, encodeURIComponent(String(structure)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get ADaM Variable List
         * @throws {RequiredError}
         */
        mdrAdamProductDatastructuresStructureVariablesGet(product: string, structure: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesGet.');
            }
            // verify required parameter 'structure' is not null or undefined
            if (structure === null || structure === undefined) {
                throw new RequiredError('structure','Required parameter structure was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesGet.');
            }
            const localVarPath = `/mdr/adam/{product}/datastructures/{structure}/variables`
                .replace(`{${"product"}}`, encodeURIComponent(String(product)))
                .replace(`{${"structure"}}`, encodeURIComponent(String(structure)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get ADaM Variable
         * @throws {RequiredError}
         */
        mdrAdamProductDatastructuresStructureVariablesVarGet(product: string, structure: string, _var: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesVarGet.');
            }
            // verify required parameter 'structure' is not null or undefined
            if (structure === null || structure === undefined) {
                throw new RequiredError('structure','Required parameter structure was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesVarGet.');
            }
            // verify required parameter '_var' is not null or undefined
            if (_var === null || _var === undefined) {
                throw new RequiredError('_var','Required parameter _var was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesVarGet.');
            }
            const localVarPath = `/mdr/adam/{product}/datastructures/{structure}/variables/{var}`
                .replace(`{${"product"}}`, encodeURIComponent(String(product)))
                .replace(`{${"structure"}}`, encodeURIComponent(String(structure)))
                .replace(`{${"var"}}`, encodeURIComponent(String(_var)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get ADaM Variable Set List
         * @throws {RequiredError}
         */
        mdrAdamProductDatastructuresStructureVarsetsGet(product: string, structure: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsGet.');
            }
            // verify required parameter 'structure' is not null or undefined
            if (structure === null || structure === undefined) {
                throw new RequiredError('structure','Required parameter structure was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsGet.');
            }
            const localVarPath = `/mdr/adam/{product}/datastructures/{structure}/varsets`
                .replace(`{${"product"}}`, encodeURIComponent(String(product)))
                .replace(`{${"structure"}}`, encodeURIComponent(String(structure)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get ADaM Variable Set
         * @throws {RequiredError}
         */
        mdrAdamProductDatastructuresStructureVarsetsVarsetGet(product: string, structure: string, varset: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet.');
            }
            // verify required parameter 'structure' is not null or undefined
            if (structure === null || structure === undefined) {
                throw new RequiredError('structure','Required parameter structure was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet.');
            }
            // verify required parameter 'varset' is not null or undefined
            if (varset === null || varset === undefined) {
                throw new RequiredError('varset','Required parameter varset was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet.');
            }
            const localVarPath = `/mdr/adam/{product}/datastructures/{structure}/varsets/{varset}`
                .replace(`{${"product"}}`, encodeURIComponent(String(product)))
                .replace(`{${"structure"}}`, encodeURIComponent(String(structure)))
                .replace(`{${"varset"}}`, encodeURIComponent(String(varset)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get ADaM Product
         * @throws {RequiredError}
         */
        mdrAdamProductGet(product: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling mdrAdamProductGet.');
            }
            const localVarPath = `/mdr/adam/{product}`
                .replace(`{${"product"}}`, encodeURIComponent(String(product)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type AnalysisDataModelAndImplementationGuideADaMAndADaMIGApiType = { 
    mdrAdamProductDatastructuresGet(product: string, options?: RequestOptions): Promise<AdamProductDatastructures>,

    mdrAdamProductDatastructuresStructureGet(product: string, structure: string, options?: RequestOptions): Promise<AdamDatastructure>,

    mdrAdamProductDatastructuresStructureVariablesGet(product: string, structure: string, options?: RequestOptions): Promise<AdamDatastructureVariables>,

    mdrAdamProductDatastructuresStructureVariablesVarGet(product: string, structure: string, _var: string, options?: RequestOptions): Promise<AdamVariable>,

    mdrAdamProductDatastructuresStructureVarsetsGet(product: string, structure: string, options?: RequestOptions): Promise<AdamDatastructureVarsets>,

    mdrAdamProductDatastructuresStructureVarsetsVarsetGet(product: string, structure: string, varset: string, options?: RequestOptions): Promise<AdamVarset>,

    mdrAdamProductGet(product: string, options?: RequestOptions): Promise<AdamProduct>,
}

/**
 * AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi - factory function to inject configuration 
 * @export
 */
export const AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): AnalysisDataModelAndImplementationGuideADaMAndADaMIGApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get ADaM Data Structure List
         * @throws {RequiredError}
         */
        mdrAdamProductDatastructuresGet(product: string, options?: RequestOptions = {}): Promise<AdamProductDatastructures> {
            const localVarFetchArgs = AnalysisDataModelAndImplementationGuideADaMAndADaMIGApiFetchParamCreator(configuration).mdrAdamProductDatastructuresGet(product, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get ADaM Data Structure
         * @throws {RequiredError}
         */
        mdrAdamProductDatastructuresStructureGet(product: string, structure: string, options?: RequestOptions = {}): Promise<AdamDatastructure> {
            const localVarFetchArgs = AnalysisDataModelAndImplementationGuideADaMAndADaMIGApiFetchParamCreator(configuration).mdrAdamProductDatastructuresStructureGet(product, structure, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get ADaM Variable List
         * @throws {RequiredError}
         */
        mdrAdamProductDatastructuresStructureVariablesGet(product: string, structure: string, options?: RequestOptions = {}): Promise<AdamDatastructureVariables> {
            const localVarFetchArgs = AnalysisDataModelAndImplementationGuideADaMAndADaMIGApiFetchParamCreator(configuration).mdrAdamProductDatastructuresStructureVariablesGet(product, structure, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get ADaM Variable
         * @throws {RequiredError}
         */
        mdrAdamProductDatastructuresStructureVariablesVarGet(product: string, structure: string, _var: string, options?: RequestOptions = {}): Promise<AdamVariable> {
            const localVarFetchArgs = AnalysisDataModelAndImplementationGuideADaMAndADaMIGApiFetchParamCreator(configuration).mdrAdamProductDatastructuresStructureVariablesVarGet(product, structure, _var, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get ADaM Variable Set List
         * @throws {RequiredError}
         */
        mdrAdamProductDatastructuresStructureVarsetsGet(product: string, structure: string, options?: RequestOptions = {}): Promise<AdamDatastructureVarsets> {
            const localVarFetchArgs = AnalysisDataModelAndImplementationGuideADaMAndADaMIGApiFetchParamCreator(configuration).mdrAdamProductDatastructuresStructureVarsetsGet(product, structure, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get ADaM Variable Set
         * @throws {RequiredError}
         */
        mdrAdamProductDatastructuresStructureVarsetsVarsetGet(product: string, structure: string, varset: string, options?: RequestOptions = {}): Promise<AdamVarset> {
            const localVarFetchArgs = AnalysisDataModelAndImplementationGuideADaMAndADaMIGApiFetchParamCreator(configuration).mdrAdamProductDatastructuresStructureVarsetsVarsetGet(product, structure, varset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get ADaM Product
         * @throws {RequiredError}
         */
        mdrAdamProductGet(product: string, options?: RequestOptions = {}): Promise<AdamProduct> {
            const localVarFetchArgs = AnalysisDataModelAndImplementationGuideADaMAndADaMIGApiFetchParamCreator(configuration).mdrAdamProductGet(product, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * CDASHImplementationGuideCDASHIGApi - fetch parameter creator
 * @export
 */
export const CDASHImplementationGuideCDASHIGApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get CDASHIG Class Domain List
         * @throws {RequiredError}
         */
        mdrCdashigVersionClassesClassDomainsGet(version: string, _class: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrCdashigVersionClassesClassDomainsGet.');
            }
            // verify required parameter '_class' is not null or undefined
            if (_class === null || _class === undefined) {
                throw new RequiredError('_class','Required parameter _class was null or undefined when calling mdrCdashigVersionClassesClassDomainsGet.');
            }
            const localVarPath = `/mdr/cdashig/{version}/classes/{class}/domains`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"class"}}`, encodeURIComponent(String(_class)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDASHIG Class
         * @throws {RequiredError}
         */
        mdrCdashigVersionClassesClassGet(version: string, _class: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrCdashigVersionClassesClassGet.');
            }
            // verify required parameter '_class' is not null or undefined
            if (_class === null || _class === undefined) {
                throw new RequiredError('_class','Required parameter _class was null or undefined when calling mdrCdashigVersionClassesClassGet.');
            }
            const localVarPath = `/mdr/cdashig/{version}/classes/{class}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"class"}}`, encodeURIComponent(String(_class)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDASHIG Class Scenario List
         * @throws {RequiredError}
         */
        mdrCdashigVersionClassesClassScenariosGet(version: string, _class: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrCdashigVersionClassesClassScenariosGet.');
            }
            // verify required parameter '_class' is not null or undefined
            if (_class === null || _class === undefined) {
                throw new RequiredError('_class','Required parameter _class was null or undefined when calling mdrCdashigVersionClassesClassScenariosGet.');
            }
            const localVarPath = `/mdr/cdashig/{version}/classes/{class}/scenarios`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"class"}}`, encodeURIComponent(String(_class)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDASHIG Class List
         * @throws {RequiredError}
         */
        mdrCdashigVersionClassesGet(version: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrCdashigVersionClassesGet.');
            }
            const localVarPath = `/mdr/cdashig/{version}/classes`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDASHIG Domain Field
         * @throws {RequiredError}
         */
        mdrCdashigVersionDomainsDomainFieldsFieldGet(version: string, domain: string, field: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrCdashigVersionDomainsDomainFieldsFieldGet.');
            }
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain','Required parameter domain was null or undefined when calling mdrCdashigVersionDomainsDomainFieldsFieldGet.');
            }
            // verify required parameter 'field' is not null or undefined
            if (field === null || field === undefined) {
                throw new RequiredError('field','Required parameter field was null or undefined when calling mdrCdashigVersionDomainsDomainFieldsFieldGet.');
            }
            const localVarPath = `/mdr/cdashig/{version}/domains/{domain}/fields/{field}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDASHIG Domain Field List
         * @throws {RequiredError}
         */
        mdrCdashigVersionDomainsDomainFieldsGet(version: string, domain: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrCdashigVersionDomainsDomainFieldsGet.');
            }
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain','Required parameter domain was null or undefined when calling mdrCdashigVersionDomainsDomainFieldsGet.');
            }
            const localVarPath = `/mdr/cdashig/{version}/domains/{domain}/fields`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDASHIG Domain
         * @throws {RequiredError}
         */
        mdrCdashigVersionDomainsDomainGet(version: string, domain: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrCdashigVersionDomainsDomainGet.');
            }
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain','Required parameter domain was null or undefined when calling mdrCdashigVersionDomainsDomainGet.');
            }
            const localVarPath = `/mdr/cdashig/{version}/domains/{domain}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDASHIG Domain List
         * @throws {RequiredError}
         */
        mdrCdashigVersionDomainsGet(version: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrCdashigVersionDomainsGet.');
            }
            const localVarPath = `/mdr/cdashig/{version}/domains`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDASHIG Product
         * @throws {RequiredError}
         */
        mdrCdashigVersionGet(version: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrCdashigVersionGet.');
            }
            const localVarPath = `/mdr/cdashig/{version}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDASHIG Scenario Field
         * @throws {RequiredError}
         */
        mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet(version: string, domain: string, scenario: string, field: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet.');
            }
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain','Required parameter domain was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet.');
            }
            // verify required parameter 'scenario' is not null or undefined
            if (scenario === null || scenario === undefined) {
                throw new RequiredError('scenario','Required parameter scenario was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet.');
            }
            // verify required parameter 'field' is not null or undefined
            if (field === null || field === undefined) {
                throw new RequiredError('field','Required parameter field was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet.');
            }
            const localVarPath = `/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields/{field}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)))
                .replace(`{${"scenario"}}`, encodeURIComponent(String(scenario)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDASHIG Scenario Field List
         * @throws {RequiredError}
         */
        mdrCdashigVersionScenariosDomainScenarioFieldsGet(version: string, domain: string, scenario: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet.');
            }
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain','Required parameter domain was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet.');
            }
            // verify required parameter 'scenario' is not null or undefined
            if (scenario === null || scenario === undefined) {
                throw new RequiredError('scenario','Required parameter scenario was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet.');
            }
            const localVarPath = `/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)))
                .replace(`{${"scenario"}}`, encodeURIComponent(String(scenario)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDASHIG Scenario
         * @throws {RequiredError}
         */
        mdrCdashigVersionScenariosDomainScenarioGet(version: string, domain: string, scenario: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioGet.');
            }
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain','Required parameter domain was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioGet.');
            }
            // verify required parameter 'scenario' is not null or undefined
            if (scenario === null || scenario === undefined) {
                throw new RequiredError('scenario','Required parameter scenario was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioGet.');
            }
            const localVarPath = `/mdr/cdashig/{version}/scenarios/{domain}.{scenario}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)))
                .replace(`{${"scenario"}}`, encodeURIComponent(String(scenario)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDASHIG Scenario List
         * @throws {RequiredError}
         */
        mdrCdashigVersionScenariosGet(version: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrCdashigVersionScenariosGet.');
            }
            const localVarPath = `/mdr/cdashig/{version}/scenarios`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Root CDASHIG Domain Field
         * @throws {RequiredError}
         */
        mdrRootCdashigDomainsDomainFieldsFieldGet(domain: string, field: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain','Required parameter domain was null or undefined when calling mdrRootCdashigDomainsDomainFieldsFieldGet.');
            }
            // verify required parameter 'field' is not null or undefined
            if (field === null || field === undefined) {
                throw new RequiredError('field','Required parameter field was null or undefined when calling mdrRootCdashigDomainsDomainFieldsFieldGet.');
            }
            const localVarPath = `/mdr/root/cdashig/domains/{domain}/fields/{field}`
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Root CDASHIG Scenario Field
         * @throws {RequiredError}
         */
        mdrRootCdashigScenariosDomainScenarioFieldsFieldGet(domain: string, scenario: string, field: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain','Required parameter domain was null or undefined when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet.');
            }
            // verify required parameter 'scenario' is not null or undefined
            if (scenario === null || scenario === undefined) {
                throw new RequiredError('scenario','Required parameter scenario was null or undefined when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet.');
            }
            // verify required parameter 'field' is not null or undefined
            if (field === null || field === undefined) {
                throw new RequiredError('field','Required parameter field was null or undefined when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet.');
            }
            const localVarPath = `/mdr/root/cdashig/scenarios/{domain}.{scenario}/fields/{field}`
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)))
                .replace(`{${"scenario"}}`, encodeURIComponent(String(scenario)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type CDASHImplementationGuideCDASHIGApiType = { 
    mdrCdashigVersionClassesClassDomainsGet(version: string, _class: string, options?: RequestOptions): Promise<CdashigClassDomains>,

    mdrCdashigVersionClassesClassGet(version: string, _class: string, options?: RequestOptions): Promise<CdashigClass>,

    mdrCdashigVersionClassesClassScenariosGet(version: string, _class: string, options?: RequestOptions): Promise<CdashigClassScenarios>,

    mdrCdashigVersionClassesGet(version: string, options?: RequestOptions): Promise<CdashigProductClasses>,

    mdrCdashigVersionDomainsDomainFieldsFieldGet(version: string, domain: string, field: string, options?: RequestOptions): Promise<CdashigDomainField>,

    mdrCdashigVersionDomainsDomainFieldsGet(version: string, domain: string, options?: RequestOptions): Promise<CdashigDomainFields>,

    mdrCdashigVersionDomainsDomainGet(version: string, domain: string, options?: RequestOptions): Promise<CdashigDomain>,

    mdrCdashigVersionDomainsGet(version: string, options?: RequestOptions): Promise<CdashigProductDomains>,

    mdrCdashigVersionGet(version: string, options?: RequestOptions): Promise<CdashigProduct>,

    mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet(version: string, domain: string, scenario: string, field: string, options?: RequestOptions): Promise<CdashigScenarioField>,

    mdrCdashigVersionScenariosDomainScenarioFieldsGet(version: string, domain: string, scenario: string, options?: RequestOptions): Promise<CdashigScenarioFields>,

    mdrCdashigVersionScenariosDomainScenarioGet(version: string, domain: string, scenario: string, options?: RequestOptions): Promise<CdashigScenario>,

    mdrCdashigVersionScenariosGet(version: string, options?: RequestOptions): Promise<CdashigProductScenarios>,

    mdrRootCdashigDomainsDomainFieldsFieldGet(domain: string, field: string, options?: RequestOptions): Promise<RootCdashigDomainField>,

    mdrRootCdashigScenariosDomainScenarioFieldsFieldGet(domain: string, scenario: string, field: string, options?: RequestOptions): Promise<RootCdashigScenarioField>,
}

/**
 * CDASHImplementationGuideCDASHIGApi - factory function to inject configuration 
 * @export
 */
export const CDASHImplementationGuideCDASHIGApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): CDASHImplementationGuideCDASHIGApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get CDASHIG Class Domain List
         * @throws {RequiredError}
         */
        mdrCdashigVersionClassesClassDomainsGet(version: string, _class: string, options?: RequestOptions = {}): Promise<CdashigClassDomains> {
            const localVarFetchArgs = CDASHImplementationGuideCDASHIGApiFetchParamCreator(configuration).mdrCdashigVersionClassesClassDomainsGet(version, _class, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDASHIG Class
         * @throws {RequiredError}
         */
        mdrCdashigVersionClassesClassGet(version: string, _class: string, options?: RequestOptions = {}): Promise<CdashigClass> {
            const localVarFetchArgs = CDASHImplementationGuideCDASHIGApiFetchParamCreator(configuration).mdrCdashigVersionClassesClassGet(version, _class, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDASHIG Class Scenario List
         * @throws {RequiredError}
         */
        mdrCdashigVersionClassesClassScenariosGet(version: string, _class: string, options?: RequestOptions = {}): Promise<CdashigClassScenarios> {
            const localVarFetchArgs = CDASHImplementationGuideCDASHIGApiFetchParamCreator(configuration).mdrCdashigVersionClassesClassScenariosGet(version, _class, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDASHIG Class List
         * @throws {RequiredError}
         */
        mdrCdashigVersionClassesGet(version: string, options?: RequestOptions = {}): Promise<CdashigProductClasses> {
            const localVarFetchArgs = CDASHImplementationGuideCDASHIGApiFetchParamCreator(configuration).mdrCdashigVersionClassesGet(version, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDASHIG Domain Field
         * @throws {RequiredError}
         */
        mdrCdashigVersionDomainsDomainFieldsFieldGet(version: string, domain: string, field: string, options?: RequestOptions = {}): Promise<CdashigDomainField> {
            const localVarFetchArgs = CDASHImplementationGuideCDASHIGApiFetchParamCreator(configuration).mdrCdashigVersionDomainsDomainFieldsFieldGet(version, domain, field, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDASHIG Domain Field List
         * @throws {RequiredError}
         */
        mdrCdashigVersionDomainsDomainFieldsGet(version: string, domain: string, options?: RequestOptions = {}): Promise<CdashigDomainFields> {
            const localVarFetchArgs = CDASHImplementationGuideCDASHIGApiFetchParamCreator(configuration).mdrCdashigVersionDomainsDomainFieldsGet(version, domain, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDASHIG Domain
         * @throws {RequiredError}
         */
        mdrCdashigVersionDomainsDomainGet(version: string, domain: string, options?: RequestOptions = {}): Promise<CdashigDomain> {
            const localVarFetchArgs = CDASHImplementationGuideCDASHIGApiFetchParamCreator(configuration).mdrCdashigVersionDomainsDomainGet(version, domain, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDASHIG Domain List
         * @throws {RequiredError}
         */
        mdrCdashigVersionDomainsGet(version: string, options?: RequestOptions = {}): Promise<CdashigProductDomains> {
            const localVarFetchArgs = CDASHImplementationGuideCDASHIGApiFetchParamCreator(configuration).mdrCdashigVersionDomainsGet(version, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDASHIG Product
         * @throws {RequiredError}
         */
        mdrCdashigVersionGet(version: string, options?: RequestOptions = {}): Promise<CdashigProduct> {
            const localVarFetchArgs = CDASHImplementationGuideCDASHIGApiFetchParamCreator(configuration).mdrCdashigVersionGet(version, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDASHIG Scenario Field
         * @throws {RequiredError}
         */
        mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet(version: string, domain: string, scenario: string, field: string, options?: RequestOptions = {}): Promise<CdashigScenarioField> {
            const localVarFetchArgs = CDASHImplementationGuideCDASHIGApiFetchParamCreator(configuration).mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet(version, domain, scenario, field, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDASHIG Scenario Field List
         * @throws {RequiredError}
         */
        mdrCdashigVersionScenariosDomainScenarioFieldsGet(version: string, domain: string, scenario: string, options?: RequestOptions = {}): Promise<CdashigScenarioFields> {
            const localVarFetchArgs = CDASHImplementationGuideCDASHIGApiFetchParamCreator(configuration).mdrCdashigVersionScenariosDomainScenarioFieldsGet(version, domain, scenario, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDASHIG Scenario
         * @throws {RequiredError}
         */
        mdrCdashigVersionScenariosDomainScenarioGet(version: string, domain: string, scenario: string, options?: RequestOptions = {}): Promise<CdashigScenario> {
            const localVarFetchArgs = CDASHImplementationGuideCDASHIGApiFetchParamCreator(configuration).mdrCdashigVersionScenariosDomainScenarioGet(version, domain, scenario, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDASHIG Scenario List
         * @throws {RequiredError}
         */
        mdrCdashigVersionScenariosGet(version: string, options?: RequestOptions = {}): Promise<CdashigProductScenarios> {
            const localVarFetchArgs = CDASHImplementationGuideCDASHIGApiFetchParamCreator(configuration).mdrCdashigVersionScenariosGet(version, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get Root CDASHIG Domain Field
         * @throws {RequiredError}
         */
        mdrRootCdashigDomainsDomainFieldsFieldGet(domain: string, field: string, options?: RequestOptions = {}): Promise<RootCdashigDomainField> {
            const localVarFetchArgs = CDASHImplementationGuideCDASHIGApiFetchParamCreator(configuration).mdrRootCdashigDomainsDomainFieldsFieldGet(domain, field, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get Root CDASHIG Scenario Field
         * @throws {RequiredError}
         */
        mdrRootCdashigScenariosDomainScenarioFieldsFieldGet(domain: string, scenario: string, field: string, options?: RequestOptions = {}): Promise<RootCdashigScenarioField> {
            const localVarFetchArgs = CDASHImplementationGuideCDASHIGApiFetchParamCreator(configuration).mdrRootCdashigScenariosDomainScenarioFieldsFieldGet(domain, scenario, field, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * ClinicalDataAcquisitionStandardsHarmonizationCDASHApi - fetch parameter creator
 * @export
 */
export const ClinicalDataAcquisitionStandardsHarmonizationCDASHApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get CDASH Class Domain List
         * @throws {RequiredError}
         */
        mdrCdashVersionClassesClassDomainsGet(version: string, _class: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrCdashVersionClassesClassDomainsGet.');
            }
            // verify required parameter '_class' is not null or undefined
            if (_class === null || _class === undefined) {
                throw new RequiredError('_class','Required parameter _class was null or undefined when calling mdrCdashVersionClassesClassDomainsGet.');
            }
            const localVarPath = `/mdr/cdash/{version}/classes/{class}/domains`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"class"}}`, encodeURIComponent(String(_class)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDASH Class Field
         * @throws {RequiredError}
         */
        mdrCdashVersionClassesClassFieldsFieldGet(version: string, _class: string, field: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrCdashVersionClassesClassFieldsFieldGet.');
            }
            // verify required parameter '_class' is not null or undefined
            if (_class === null || _class === undefined) {
                throw new RequiredError('_class','Required parameter _class was null or undefined when calling mdrCdashVersionClassesClassFieldsFieldGet.');
            }
            // verify required parameter 'field' is not null or undefined
            if (field === null || field === undefined) {
                throw new RequiredError('field','Required parameter field was null or undefined when calling mdrCdashVersionClassesClassFieldsFieldGet.');
            }
            const localVarPath = `/mdr/cdash/{version}/classes/{class}/fields/{field}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"class"}}`, encodeURIComponent(String(_class)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDASH Class
         * @throws {RequiredError}
         */
        mdrCdashVersionClassesClassGet(version: string, _class: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrCdashVersionClassesClassGet.');
            }
            // verify required parameter '_class' is not null or undefined
            if (_class === null || _class === undefined) {
                throw new RequiredError('_class','Required parameter _class was null or undefined when calling mdrCdashVersionClassesClassGet.');
            }
            const localVarPath = `/mdr/cdash/{version}/classes/{class}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"class"}}`, encodeURIComponent(String(_class)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDASH Class List
         * @throws {RequiredError}
         */
        mdrCdashVersionClassesGet(version: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrCdashVersionClassesGet.');
            }
            const localVarPath = `/mdr/cdash/{version}/classes`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDASH Domain Field
         * @throws {RequiredError}
         */
        mdrCdashVersionDomainsDomainFieldsFieldGet(version: string, domain: string, field: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrCdashVersionDomainsDomainFieldsFieldGet.');
            }
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain','Required parameter domain was null or undefined when calling mdrCdashVersionDomainsDomainFieldsFieldGet.');
            }
            // verify required parameter 'field' is not null or undefined
            if (field === null || field === undefined) {
                throw new RequiredError('field','Required parameter field was null or undefined when calling mdrCdashVersionDomainsDomainFieldsFieldGet.');
            }
            const localVarPath = `/mdr/cdash/{version}/domains/{domain}/fields/{field}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDASH Domain Field List
         * @throws {RequiredError}
         */
        mdrCdashVersionDomainsDomainFieldsGet(version: string, domain: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrCdashVersionDomainsDomainFieldsGet.');
            }
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain','Required parameter domain was null or undefined when calling mdrCdashVersionDomainsDomainFieldsGet.');
            }
            const localVarPath = `/mdr/cdash/{version}/domains/{domain}/fields`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDASH Domain
         * @throws {RequiredError}
         */
        mdrCdashVersionDomainsDomainGet(version: string, domain: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrCdashVersionDomainsDomainGet.');
            }
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain','Required parameter domain was null or undefined when calling mdrCdashVersionDomainsDomainGet.');
            }
            const localVarPath = `/mdr/cdash/{version}/domains/{domain}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDASH Domain List
         * @throws {RequiredError}
         */
        mdrCdashVersionDomainsGet(version: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrCdashVersionDomainsGet.');
            }
            const localVarPath = `/mdr/cdash/{version}/domains`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDASH Product
         * @throws {RequiredError}
         */
        mdrCdashVersionGet(version: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrCdashVersionGet.');
            }
            const localVarPath = `/mdr/cdash/{version}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Root CDASH Class Field
         * @throws {RequiredError}
         */
        mdrRootCdashClassesClassFieldsFieldGet(_class: string, field: string, options: RequestOptions): FetchArgs {
            // verify required parameter '_class' is not null or undefined
            if (_class === null || _class === undefined) {
                throw new RequiredError('_class','Required parameter _class was null or undefined when calling mdrRootCdashClassesClassFieldsFieldGet.');
            }
            // verify required parameter 'field' is not null or undefined
            if (field === null || field === undefined) {
                throw new RequiredError('field','Required parameter field was null or undefined when calling mdrRootCdashClassesClassFieldsFieldGet.');
            }
            const localVarPath = `/mdr/root/cdash/classes/{class}/fields/{field}`
                .replace(`{${"class"}}`, encodeURIComponent(String(_class)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Root CDASH Domain Field
         * @throws {RequiredError}
         */
        mdrRootCdashDomainsDomainFieldsFieldGet(domain: string, field: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'domain' is not null or undefined
            if (domain === null || domain === undefined) {
                throw new RequiredError('domain','Required parameter domain was null or undefined when calling mdrRootCdashDomainsDomainFieldsFieldGet.');
            }
            // verify required parameter 'field' is not null or undefined
            if (field === null || field === undefined) {
                throw new RequiredError('field','Required parameter field was null or undefined when calling mdrRootCdashDomainsDomainFieldsFieldGet.');
            }
            const localVarPath = `/mdr/root/cdash/domains/{domain}/fields/{field}`
                .replace(`{${"domain"}}`, encodeURIComponent(String(domain)))
                .replace(`{${"field"}}`, encodeURIComponent(String(field)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type ClinicalDataAcquisitionStandardsHarmonizationCDASHApiType = { 
    mdrCdashVersionClassesClassDomainsGet(version: string, _class: string, options?: RequestOptions): Promise<CdashClassDomains>,

    mdrCdashVersionClassesClassFieldsFieldGet(version: string, _class: string, field: string, options?: RequestOptions): Promise<CdashClassField>,

    mdrCdashVersionClassesClassGet(version: string, _class: string, options?: RequestOptions): Promise<CdashClass>,

    mdrCdashVersionClassesGet(version: string, options?: RequestOptions): Promise<CdashProductClasses>,

    mdrCdashVersionDomainsDomainFieldsFieldGet(version: string, domain: string, field: string, options?: RequestOptions): Promise<CdashDomainField>,

    mdrCdashVersionDomainsDomainFieldsGet(version: string, domain: string, options?: RequestOptions): Promise<CdashDomainFields>,

    mdrCdashVersionDomainsDomainGet(version: string, domain: string, options?: RequestOptions): Promise<CdashDomain>,

    mdrCdashVersionDomainsGet(version: string, options?: RequestOptions): Promise<CdashProductDomains>,

    mdrCdashVersionGet(version: string, options?: RequestOptions): Promise<CdashProduct>,

    mdrRootCdashClassesClassFieldsFieldGet(_class: string, field: string, options?: RequestOptions): Promise<RootCdashClassField>,

    mdrRootCdashDomainsDomainFieldsFieldGet(domain: string, field: string, options?: RequestOptions): Promise<RootCdashDomainField>,
}

/**
 * ClinicalDataAcquisitionStandardsHarmonizationCDASHApi - factory function to inject configuration 
 * @export
 */
export const ClinicalDataAcquisitionStandardsHarmonizationCDASHApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): ClinicalDataAcquisitionStandardsHarmonizationCDASHApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get CDASH Class Domain List
         * @throws {RequiredError}
         */
        mdrCdashVersionClassesClassDomainsGet(version: string, _class: string, options?: RequestOptions = {}): Promise<CdashClassDomains> {
            const localVarFetchArgs = ClinicalDataAcquisitionStandardsHarmonizationCDASHApiFetchParamCreator(configuration).mdrCdashVersionClassesClassDomainsGet(version, _class, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDASH Class Field
         * @throws {RequiredError}
         */
        mdrCdashVersionClassesClassFieldsFieldGet(version: string, _class: string, field: string, options?: RequestOptions = {}): Promise<CdashClassField> {
            const localVarFetchArgs = ClinicalDataAcquisitionStandardsHarmonizationCDASHApiFetchParamCreator(configuration).mdrCdashVersionClassesClassFieldsFieldGet(version, _class, field, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDASH Class
         * @throws {RequiredError}
         */
        mdrCdashVersionClassesClassGet(version: string, _class: string, options?: RequestOptions = {}): Promise<CdashClass> {
            const localVarFetchArgs = ClinicalDataAcquisitionStandardsHarmonizationCDASHApiFetchParamCreator(configuration).mdrCdashVersionClassesClassGet(version, _class, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDASH Class List
         * @throws {RequiredError}
         */
        mdrCdashVersionClassesGet(version: string, options?: RequestOptions = {}): Promise<CdashProductClasses> {
            const localVarFetchArgs = ClinicalDataAcquisitionStandardsHarmonizationCDASHApiFetchParamCreator(configuration).mdrCdashVersionClassesGet(version, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDASH Domain Field
         * @throws {RequiredError}
         */
        mdrCdashVersionDomainsDomainFieldsFieldGet(version: string, domain: string, field: string, options?: RequestOptions = {}): Promise<CdashDomainField> {
            const localVarFetchArgs = ClinicalDataAcquisitionStandardsHarmonizationCDASHApiFetchParamCreator(configuration).mdrCdashVersionDomainsDomainFieldsFieldGet(version, domain, field, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDASH Domain Field List
         * @throws {RequiredError}
         */
        mdrCdashVersionDomainsDomainFieldsGet(version: string, domain: string, options?: RequestOptions = {}): Promise<CdashDomainFields> {
            const localVarFetchArgs = ClinicalDataAcquisitionStandardsHarmonizationCDASHApiFetchParamCreator(configuration).mdrCdashVersionDomainsDomainFieldsGet(version, domain, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDASH Domain
         * @throws {RequiredError}
         */
        mdrCdashVersionDomainsDomainGet(version: string, domain: string, options?: RequestOptions = {}): Promise<CdashDomain> {
            const localVarFetchArgs = ClinicalDataAcquisitionStandardsHarmonizationCDASHApiFetchParamCreator(configuration).mdrCdashVersionDomainsDomainGet(version, domain, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDASH Domain List
         * @throws {RequiredError}
         */
        mdrCdashVersionDomainsGet(version: string, options?: RequestOptions = {}): Promise<CdashProductDomains> {
            const localVarFetchArgs = ClinicalDataAcquisitionStandardsHarmonizationCDASHApiFetchParamCreator(configuration).mdrCdashVersionDomainsGet(version, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDASH Product
         * @throws {RequiredError}
         */
        mdrCdashVersionGet(version: string, options?: RequestOptions = {}): Promise<CdashProduct> {
            const localVarFetchArgs = ClinicalDataAcquisitionStandardsHarmonizationCDASHApiFetchParamCreator(configuration).mdrCdashVersionGet(version, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get Root CDASH Class Field
         * @throws {RequiredError}
         */
        mdrRootCdashClassesClassFieldsFieldGet(_class: string, field: string, options?: RequestOptions = {}): Promise<RootCdashClassField> {
            const localVarFetchArgs = ClinicalDataAcquisitionStandardsHarmonizationCDASHApiFetchParamCreator(configuration).mdrRootCdashClassesClassFieldsFieldGet(_class, field, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get Root CDASH Domain Field
         * @throws {RequiredError}
         */
        mdrRootCdashDomainsDomainFieldsFieldGet(domain: string, field: string, options?: RequestOptions = {}): Promise<RootCdashDomainField> {
            const localVarFetchArgs = ClinicalDataAcquisitionStandardsHarmonizationCDASHApiFetchParamCreator(configuration).mdrRootCdashDomainsDomainFieldsFieldGet(domain, field, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * ControlledTerminologyCTApi - fetch parameter creator
 * @export
 */
export const ControlledTerminologyCTApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get CDISC Library CT Package List
         * @throws {RequiredError}
         */
        mdrCtPackagesGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/mdr/ct/packages`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDISC Library CT Package Codelist
         * @throws {RequiredError}
         */
        mdrCtPackagesPackageCodelistsCodelistGet(_package: string, codelist: string, options: RequestOptions): FetchArgs {
            // verify required parameter '_package' is not null or undefined
            if (_package === null || _package === undefined) {
                throw new RequiredError('_package','Required parameter _package was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistGet.');
            }
            // verify required parameter 'codelist' is not null or undefined
            if (codelist === null || codelist === undefined) {
                throw new RequiredError('codelist','Required parameter codelist was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistGet.');
            }
            const localVarPath = `/mdr/ct/packages/{package}/codelists/{codelist}`
                .replace(`{${"package"}}`, encodeURIComponent(String(_package)))
                .replace(`{${"codelist"}}`, encodeURIComponent(String(codelist)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDISC Library CT Package Codelist Term List
         * @throws {RequiredError}
         */
        mdrCtPackagesPackageCodelistsCodelistTermsGet(_package: string, codelist: string, options: RequestOptions): FetchArgs {
            // verify required parameter '_package' is not null or undefined
            if (_package === null || _package === undefined) {
                throw new RequiredError('_package','Required parameter _package was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistTermsGet.');
            }
            // verify required parameter 'codelist' is not null or undefined
            if (codelist === null || codelist === undefined) {
                throw new RequiredError('codelist','Required parameter codelist was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistTermsGet.');
            }
            const localVarPath = `/mdr/ct/packages/{package}/codelists/{codelist}/terms`
                .replace(`{${"package"}}`, encodeURIComponent(String(_package)))
                .replace(`{${"codelist"}}`, encodeURIComponent(String(codelist)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDISC Library CT Package Codelist Term
         * @throws {RequiredError}
         */
        mdrCtPackagesPackageCodelistsCodelistTermsTermGet(_package: string, codelist: string, term: string, options: RequestOptions): FetchArgs {
            // verify required parameter '_package' is not null or undefined
            if (_package === null || _package === undefined) {
                throw new RequiredError('_package','Required parameter _package was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet.');
            }
            // verify required parameter 'codelist' is not null or undefined
            if (codelist === null || codelist === undefined) {
                throw new RequiredError('codelist','Required parameter codelist was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet.');
            }
            // verify required parameter 'term' is not null or undefined
            if (term === null || term === undefined) {
                throw new RequiredError('term','Required parameter term was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet.');
            }
            const localVarPath = `/mdr/ct/packages/{package}/codelists/{codelist}/terms/{term}`
                .replace(`{${"package"}}`, encodeURIComponent(String(_package)))
                .replace(`{${"codelist"}}`, encodeURIComponent(String(codelist)))
                .replace(`{${"term"}}`, encodeURIComponent(String(term)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDISC Library CT Package Codelist List
         * @throws {RequiredError}
         */
        mdrCtPackagesPackageCodelistsGet(_package: string, options: RequestOptions): FetchArgs {
            // verify required parameter '_package' is not null or undefined
            if (_package === null || _package === undefined) {
                throw new RequiredError('_package','Required parameter _package was null or undefined when calling mdrCtPackagesPackageCodelistsGet.');
            }
            const localVarPath = `/mdr/ct/packages/{package}/codelists`
                .replace(`{${"package"}}`, encodeURIComponent(String(_package)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDISC Library CT Package
         * @throws {RequiredError}
         */
        mdrCtPackagesProductGet(product: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling mdrCtPackagesProductGet.');
            }
            const localVarPath = `/mdr/ct/packages/{product}`
                .replace(`{${"product"}}`, encodeURIComponent(String(product)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDISC Library Root CT Codelist
         * @throws {RequiredError}
         */
        mdrRootCtProductGroupCodelistsCodelistGet(productGroup: string, codelist: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'productGroup' is not null or undefined
            if (productGroup === null || productGroup === undefined) {
                throw new RequiredError('productGroup','Required parameter productGroup was null or undefined when calling mdrRootCtProductGroupCodelistsCodelistGet.');
            }
            // verify required parameter 'codelist' is not null or undefined
            if (codelist === null || codelist === undefined) {
                throw new RequiredError('codelist','Required parameter codelist was null or undefined when calling mdrRootCtProductGroupCodelistsCodelistGet.');
            }
            const localVarPath = `/mdr/root/ct/{productGroup}/codelists/{codelist}`
                .replace(`{${"productGroup"}}`, encodeURIComponent(String(productGroup)))
                .replace(`{${"codelist"}}`, encodeURIComponent(String(codelist)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDISC Library Root CT Term
         * @throws {RequiredError}
         */
        mdrRootCtProductGroupCodelistsCodelistTermsTermGet(productGroup: string, codelist: string, term: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'productGroup' is not null or undefined
            if (productGroup === null || productGroup === undefined) {
                throw new RequiredError('productGroup','Required parameter productGroup was null or undefined when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet.');
            }
            // verify required parameter 'codelist' is not null or undefined
            if (codelist === null || codelist === undefined) {
                throw new RequiredError('codelist','Required parameter codelist was null or undefined when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet.');
            }
            // verify required parameter 'term' is not null or undefined
            if (term === null || term === undefined) {
                throw new RequiredError('term','Required parameter term was null or undefined when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet.');
            }
            const localVarPath = `/mdr/root/ct/{productGroup}/codelists/{codelist}/terms/{term}`
                .replace(`{${"productGroup"}}`, encodeURIComponent(String(productGroup)))
                .replace(`{${"codelist"}}`, encodeURIComponent(String(codelist)))
                .replace(`{${"term"}}`, encodeURIComponent(String(term)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type ControlledTerminologyCTApiType = { 
    mdrCtPackagesGet(options?: RequestOptions): Promise<CtPackages>,

    mdrCtPackagesPackageCodelistsCodelistGet(_package: string, codelist: string, options?: RequestOptions): Promise<CtCodelist>,

    mdrCtPackagesPackageCodelistsCodelistTermsGet(_package: string, codelist: string, options?: RequestOptions): Promise<CtCodelistTerms>,

    mdrCtPackagesPackageCodelistsCodelistTermsTermGet(_package: string, codelist: string, term: string, options?: RequestOptions): Promise<CtTerm>,

    mdrCtPackagesPackageCodelistsGet(_package: string, options?: RequestOptions): Promise<CtPackageCodelists>,

    mdrCtPackagesProductGet(product: string, options?: RequestOptions): Promise<CtPackage>,

    mdrRootCtProductGroupCodelistsCodelistGet(productGroup: string, codelist: string, options?: RequestOptions): Promise<RootCtCodelist>,

    mdrRootCtProductGroupCodelistsCodelistTermsTermGet(productGroup: string, codelist: string, term: string, options?: RequestOptions): Promise<RootCtTerm>,
}

/**
 * ControlledTerminologyCTApi - factory function to inject configuration 
 * @export
 */
export const ControlledTerminologyCTApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): ControlledTerminologyCTApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get CDISC Library CT Package List
         * @throws {RequiredError}
         */
        mdrCtPackagesGet(options?: RequestOptions = {}): Promise<CtPackages> {
            const localVarFetchArgs = ControlledTerminologyCTApiFetchParamCreator(configuration).mdrCtPackagesGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDISC Library CT Package Codelist
         * @throws {RequiredError}
         */
        mdrCtPackagesPackageCodelistsCodelistGet(_package: string, codelist: string, options?: RequestOptions = {}): Promise<CtCodelist> {
            const localVarFetchArgs = ControlledTerminologyCTApiFetchParamCreator(configuration).mdrCtPackagesPackageCodelistsCodelistGet(_package, codelist, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDISC Library CT Package Codelist Term List
         * @throws {RequiredError}
         */
        mdrCtPackagesPackageCodelistsCodelistTermsGet(_package: string, codelist: string, options?: RequestOptions = {}): Promise<CtCodelistTerms> {
            const localVarFetchArgs = ControlledTerminologyCTApiFetchParamCreator(configuration).mdrCtPackagesPackageCodelistsCodelistTermsGet(_package, codelist, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDISC Library CT Package Codelist Term
         * @throws {RequiredError}
         */
        mdrCtPackagesPackageCodelistsCodelistTermsTermGet(_package: string, codelist: string, term: string, options?: RequestOptions = {}): Promise<CtTerm> {
            const localVarFetchArgs = ControlledTerminologyCTApiFetchParamCreator(configuration).mdrCtPackagesPackageCodelistsCodelistTermsTermGet(_package, codelist, term, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDISC Library CT Package Codelist List
         * @throws {RequiredError}
         */
        mdrCtPackagesPackageCodelistsGet(_package: string, options?: RequestOptions = {}): Promise<CtPackageCodelists> {
            const localVarFetchArgs = ControlledTerminologyCTApiFetchParamCreator(configuration).mdrCtPackagesPackageCodelistsGet(_package, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDISC Library CT Package
         * @throws {RequiredError}
         */
        mdrCtPackagesProductGet(product: string, options?: RequestOptions = {}): Promise<CtPackage> {
            const localVarFetchArgs = ControlledTerminologyCTApiFetchParamCreator(configuration).mdrCtPackagesProductGet(product, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDISC Library Root CT Codelist
         * @throws {RequiredError}
         */
        mdrRootCtProductGroupCodelistsCodelistGet(productGroup: string, codelist: string, options?: RequestOptions = {}): Promise<RootCtCodelist> {
            const localVarFetchArgs = ControlledTerminologyCTApiFetchParamCreator(configuration).mdrRootCtProductGroupCodelistsCodelistGet(productGroup, codelist, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDISC Library Root CT Term
         * @throws {RequiredError}
         */
        mdrRootCtProductGroupCodelistsCodelistTermsTermGet(productGroup: string, codelist: string, term: string, options?: RequestOptions = {}): Promise<RootCtTerm> {
            const localVarFetchArgs = ControlledTerminologyCTApiFetchParamCreator(configuration).mdrRootCtProductGroupCodelistsCodelistTermsTermGet(productGroup, codelist, term, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Information About CDISC Library
         * @throws {RequiredError}
         */
        mdrAboutGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/mdr/about`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDISC Library Last Updated
         * @throws {RequiredError}
         */
        mdrLastupdatedGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/mdr/lastupdated`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDISC Library Product Group Data Analysis
         * @throws {RequiredError}
         */
        mdrProductsDataAnalysisGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/mdr/products/DataAnalysis`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDISC Library Product Group Data Collection
         * @throws {RequiredError}
         */
        mdrProductsDataCollectionGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/mdr/products/DataCollection`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDISC Library Product Group Data Tabulation
         * @throws {RequiredError}
         */
        mdrProductsDataTabulationGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/mdr/products/DataTabulation`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDISC Library Products
         * @throws {RequiredError}
         */
        mdrProductsGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/mdr/products`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDISC Library Product Group QRS
         * @throws {RequiredError}
         */
        mdrProductsMeasuresGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/mdr/products/Measures`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get CDISC Library Product Group Terminology
         * @throws {RequiredError}
         */
        mdrProductsTerminologyGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/mdr/products/Terminology`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type DefaultApiType = { 
    mdrAboutGet(options?: RequestOptions): Promise<About>,

    mdrLastupdatedGet(options?: RequestOptions): Promise<Lastupdated>,

    mdrProductsDataAnalysisGet(options?: RequestOptions): Promise<ProductgroupDataAnalysis>,

    mdrProductsDataCollectionGet(options?: RequestOptions): Promise<ProductgroupDataCollection>,

    mdrProductsDataTabulationGet(options?: RequestOptions): Promise<ProductgroupDataTabulation>,

    mdrProductsGet(options?: RequestOptions): Promise<Products>,

    mdrProductsMeasuresGet(options?: RequestOptions): Promise<ProductgroupQrs>,

    mdrProductsTerminologyGet(options?: RequestOptions): Promise<ProductgroupTerminology>,
}

/**
 * DefaultApi - factory function to inject configuration 
 * @export
 */
export const DefaultApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): DefaultApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get Information About CDISC Library
         * @throws {RequiredError}
         */
        mdrAboutGet(options?: RequestOptions = {}): Promise<About> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).mdrAboutGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDISC Library Last Updated
         * @throws {RequiredError}
         */
        mdrLastupdatedGet(options?: RequestOptions = {}): Promise<Lastupdated> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).mdrLastupdatedGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDISC Library Product Group Data Analysis
         * @throws {RequiredError}
         */
        mdrProductsDataAnalysisGet(options?: RequestOptions = {}): Promise<ProductgroupDataAnalysis> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).mdrProductsDataAnalysisGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDISC Library Product Group Data Collection
         * @throws {RequiredError}
         */
        mdrProductsDataCollectionGet(options?: RequestOptions = {}): Promise<ProductgroupDataCollection> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).mdrProductsDataCollectionGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDISC Library Product Group Data Tabulation
         * @throws {RequiredError}
         */
        mdrProductsDataTabulationGet(options?: RequestOptions = {}): Promise<ProductgroupDataTabulation> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).mdrProductsDataTabulationGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDISC Library Products
         * @throws {RequiredError}
         */
        mdrProductsGet(options?: RequestOptions = {}): Promise<Products> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).mdrProductsGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDISC Library Product Group QRS
         * @throws {RequiredError}
         */
        mdrProductsMeasuresGet(options?: RequestOptions = {}): Promise<ProductgroupQrs> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).mdrProductsMeasuresGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get CDISC Library Product Group Terminology
         * @throws {RequiredError}
         */
        mdrProductsTerminologyGet(options?: RequestOptions = {}): Promise<ProductgroupTerminology> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).mdrProductsTerminologyGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * MeasuresApi - fetch parameter creator
 * @export
 */
export const MeasuresApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get QRS Product
         * @throws {RequiredError}
         */
        mdrQrsMeasureVersionGet(measure: string, version: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'measure' is not null or undefined
            if (measure === null || measure === undefined) {
                throw new RequiredError('measure','Required parameter measure was null or undefined when calling mdrQrsMeasureVersionGet.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrQrsMeasureVersionGet.');
            }
            const localVarPath = `/mdr/qrs/{measure}/{version}`
                .replace(`{${"measure"}}`, encodeURIComponent(String(measure)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get QRS Item List
         * @throws {RequiredError}
         */
        mdrQrsMeasureVersionItemsGet(measure: string, version: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'measure' is not null or undefined
            if (measure === null || measure === undefined) {
                throw new RequiredError('measure','Required parameter measure was null or undefined when calling mdrQrsMeasureVersionItemsGet.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrQrsMeasureVersionItemsGet.');
            }
            const localVarPath = `/mdr/qrs/{measure}/{version}/items`
                .replace(`{${"measure"}}`, encodeURIComponent(String(measure)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get QRS Item
         * @throws {RequiredError}
         */
        mdrQrsMeasureVersionItemsItemGet(measure: string, version: string, item: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'measure' is not null or undefined
            if (measure === null || measure === undefined) {
                throw new RequiredError('measure','Required parameter measure was null or undefined when calling mdrQrsMeasureVersionItemsItemGet.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrQrsMeasureVersionItemsItemGet.');
            }
            // verify required parameter 'item' is not null or undefined
            if (item === null || item === undefined) {
                throw new RequiredError('item','Required parameter item was null or undefined when calling mdrQrsMeasureVersionItemsItemGet.');
            }
            const localVarPath = `/mdr/qrs/{measure}/{version}/items/{item}`
                .replace(`{${"measure"}}`, encodeURIComponent(String(measure)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"item"}}`, encodeURIComponent(String(item)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get QRS Response Group List
         * @throws {RequiredError}
         */
        mdrQrsMeasureVersionResponsegroupsGet(measure: string, version: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'measure' is not null or undefined
            if (measure === null || measure === undefined) {
                throw new RequiredError('measure','Required parameter measure was null or undefined when calling mdrQrsMeasureVersionResponsegroupsGet.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrQrsMeasureVersionResponsegroupsGet.');
            }
            const localVarPath = `/mdr/qrs/{measure}/{version}/responsegroups`
                .replace(`{${"measure"}}`, encodeURIComponent(String(measure)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get QRS Response Group
         * @throws {RequiredError}
         */
        mdrQrsMeasureVersionResponsegroupsResponsegroupGet(measure: string, version: string, responsegroup: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'measure' is not null or undefined
            if (measure === null || measure === undefined) {
                throw new RequiredError('measure','Required parameter measure was null or undefined when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet.');
            }
            // verify required parameter 'responsegroup' is not null or undefined
            if (responsegroup === null || responsegroup === undefined) {
                throw new RequiredError('responsegroup','Required parameter responsegroup was null or undefined when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet.');
            }
            const localVarPath = `/mdr/qrs/{measure}/{version}/responsegroups/{responsegroup}`
                .replace(`{${"measure"}}`, encodeURIComponent(String(measure)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"responsegroup"}}`, encodeURIComponent(String(responsegroup)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type MeasuresApiType = { 
    mdrQrsMeasureVersionGet(measure: string, version: string, options?: RequestOptions): Promise<QrsProduct>,

    mdrQrsMeasureVersionItemsGet(measure: string, version: string, options?: RequestOptions): Promise<QrsItems>,

    mdrQrsMeasureVersionItemsItemGet(measure: string, version: string, item: string, options?: RequestOptions): Promise<QrsItem>,

    mdrQrsMeasureVersionResponsegroupsGet(measure: string, version: string, options?: RequestOptions): Promise<QrsResponsegroups>,

    mdrQrsMeasureVersionResponsegroupsResponsegroupGet(measure: string, version: string, responsegroup: string, options?: RequestOptions): Promise<QrsResponsegroup>,
}

/**
 * MeasuresApi - factory function to inject configuration 
 * @export
 */
export const MeasuresApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): MeasuresApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get QRS Product
         * @throws {RequiredError}
         */
        mdrQrsMeasureVersionGet(measure: string, version: string, options?: RequestOptions = {}): Promise<QrsProduct> {
            const localVarFetchArgs = MeasuresApiFetchParamCreator(configuration).mdrQrsMeasureVersionGet(measure, version, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get QRS Item List
         * @throws {RequiredError}
         */
        mdrQrsMeasureVersionItemsGet(measure: string, version: string, options?: RequestOptions = {}): Promise<QrsItems> {
            const localVarFetchArgs = MeasuresApiFetchParamCreator(configuration).mdrQrsMeasureVersionItemsGet(measure, version, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get QRS Item
         * @throws {RequiredError}
         */
        mdrQrsMeasureVersionItemsItemGet(measure: string, version: string, item: string, options?: RequestOptions = {}): Promise<QrsItem> {
            const localVarFetchArgs = MeasuresApiFetchParamCreator(configuration).mdrQrsMeasureVersionItemsItemGet(measure, version, item, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get QRS Response Group List
         * @throws {RequiredError}
         */
        mdrQrsMeasureVersionResponsegroupsGet(measure: string, version: string, options?: RequestOptions = {}): Promise<QrsResponsegroups> {
            const localVarFetchArgs = MeasuresApiFetchParamCreator(configuration).mdrQrsMeasureVersionResponsegroupsGet(measure, version, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get QRS Response Group
         * @throws {RequiredError}
         */
        mdrQrsMeasureVersionResponsegroupsResponsegroupGet(measure: string, version: string, responsegroup: string, options?: RequestOptions = {}): Promise<QrsResponsegroup> {
            const localVarFetchArgs = MeasuresApiFetchParamCreator(configuration).mdrQrsMeasureVersionResponsegroupsResponsegroupGet(measure, version, responsegroup, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * SDTMImplementationGuideSDTMIGApi - fetch parameter creator
 * @export
 */
export const SDTMImplementationGuideSDTMIGApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Root SDTMIG Dataset Variable
         * @throws {RequiredError}
         */
        mdrRootSdtmigDatasetsDatasetVariablesVarGet(dataset: string, _var: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling mdrRootSdtmigDatasetsDatasetVariablesVarGet.');
            }
            // verify required parameter '_var' is not null or undefined
            if (_var === null || _var === undefined) {
                throw new RequiredError('_var','Required parameter _var was null or undefined when calling mdrRootSdtmigDatasetsDatasetVariablesVarGet.');
            }
            const localVarPath = `/mdr/root/sdtmig/datasets/{dataset}/variables/{var}`
                .replace(`{${"dataset"}}`, encodeURIComponent(String(dataset)))
                .replace(`{${"var"}}`, encodeURIComponent(String(_var)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SDTMIG Class Dataset List
         * @throws {RequiredError}
         */
        mdrSdtmigVersionClassesClassDatasetsGet(version: string, _class: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSdtmigVersionClassesClassDatasetsGet.');
            }
            // verify required parameter '_class' is not null or undefined
            if (_class === null || _class === undefined) {
                throw new RequiredError('_class','Required parameter _class was null or undefined when calling mdrSdtmigVersionClassesClassDatasetsGet.');
            }
            const localVarPath = `/mdr/sdtmig/{version}/classes/{class}/datasets`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"class"}}`, encodeURIComponent(String(_class)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SDTMIG Class
         * @throws {RequiredError}
         */
        mdrSdtmigVersionClassesClassGet(version: string, _class: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSdtmigVersionClassesClassGet.');
            }
            // verify required parameter '_class' is not null or undefined
            if (_class === null || _class === undefined) {
                throw new RequiredError('_class','Required parameter _class was null or undefined when calling mdrSdtmigVersionClassesClassGet.');
            }
            const localVarPath = `/mdr/sdtmig/{version}/classes/{class}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"class"}}`, encodeURIComponent(String(_class)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SDTMIG Class List
         * @throws {RequiredError}
         */
        mdrSdtmigVersionClassesGet(version: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSdtmigVersionClassesGet.');
            }
            const localVarPath = `/mdr/sdtmig/{version}/classes`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SDTMIG Dataset
         * @throws {RequiredError}
         */
        mdrSdtmigVersionDatasetsDatasetGet(version: string, dataset: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSdtmigVersionDatasetsDatasetGet.');
            }
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling mdrSdtmigVersionDatasetsDatasetGet.');
            }
            const localVarPath = `/mdr/sdtmig/{version}/datasets/{dataset}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"dataset"}}`, encodeURIComponent(String(dataset)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SDTMIG Dataset Variable List
         * @throws {RequiredError}
         */
        mdrSdtmigVersionDatasetsDatasetVariablesGet(version: string, dataset: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSdtmigVersionDatasetsDatasetVariablesGet.');
            }
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling mdrSdtmigVersionDatasetsDatasetVariablesGet.');
            }
            const localVarPath = `/mdr/sdtmig/{version}/datasets/{dataset}/variables`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"dataset"}}`, encodeURIComponent(String(dataset)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SDTMIG Dataset Variable
         * @throws {RequiredError}
         */
        mdrSdtmigVersionDatasetsDatasetVariablesVarGet(version: string, dataset: string, _var: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet.');
            }
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet.');
            }
            // verify required parameter '_var' is not null or undefined
            if (_var === null || _var === undefined) {
                throw new RequiredError('_var','Required parameter _var was null or undefined when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet.');
            }
            const localVarPath = `/mdr/sdtmig/{version}/datasets/{dataset}/variables/{var}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"dataset"}}`, encodeURIComponent(String(dataset)))
                .replace(`{${"var"}}`, encodeURIComponent(String(_var)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SDTMIG Dataset List
         * @throws {RequiredError}
         */
        mdrSdtmigVersionDatasetsGet(version: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSdtmigVersionDatasetsGet.');
            }
            const localVarPath = `/mdr/sdtmig/{version}/datasets`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SDTMIG product
         * @throws {RequiredError}
         */
        mdrSdtmigVersionGet(version: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSdtmigVersionGet.');
            }
            const localVarPath = `/mdr/sdtmig/{version}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type SDTMImplementationGuideSDTMIGApiType = { 
    mdrRootSdtmigDatasetsDatasetVariablesVarGet(dataset: string, _var: string, options?: RequestOptions): Promise<RootSdtmigDatasetVariable>,

    mdrSdtmigVersionClassesClassDatasetsGet(version: string, _class: string, options?: RequestOptions): Promise<SdtmigClassDatasets>,

    mdrSdtmigVersionClassesClassGet(version: string, _class: string, options?: RequestOptions): Promise<SdtmigClass>,

    mdrSdtmigVersionClassesGet(version: string, options?: RequestOptions): Promise<SdtmigClasses>,

    mdrSdtmigVersionDatasetsDatasetGet(version: string, dataset: string, options?: RequestOptions): Promise<SdtmigDataset>,

    mdrSdtmigVersionDatasetsDatasetVariablesGet(version: string, dataset: string, options?: RequestOptions): Promise<SdtmigDatasetVariables>,

    mdrSdtmigVersionDatasetsDatasetVariablesVarGet(version: string, dataset: string, _var: string, options?: RequestOptions): Promise<SdtmigDatasetVariable>,

    mdrSdtmigVersionDatasetsGet(version: string, options?: RequestOptions): Promise<SdtmigDatasets>,

    mdrSdtmigVersionGet(version: string, options?: RequestOptions): Promise<SdtmigProduct>,
}

/**
 * SDTMImplementationGuideSDTMIGApi - factory function to inject configuration 
 * @export
 */
export const SDTMImplementationGuideSDTMIGApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): SDTMImplementationGuideSDTMIGApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get Root SDTMIG Dataset Variable
         * @throws {RequiredError}
         */
        mdrRootSdtmigDatasetsDatasetVariablesVarGet(dataset: string, _var: string, options?: RequestOptions = {}): Promise<RootSdtmigDatasetVariable> {
            const localVarFetchArgs = SDTMImplementationGuideSDTMIGApiFetchParamCreator(configuration).mdrRootSdtmigDatasetsDatasetVariablesVarGet(dataset, _var, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SDTMIG Class Dataset List
         * @throws {RequiredError}
         */
        mdrSdtmigVersionClassesClassDatasetsGet(version: string, _class: string, options?: RequestOptions = {}): Promise<SdtmigClassDatasets> {
            const localVarFetchArgs = SDTMImplementationGuideSDTMIGApiFetchParamCreator(configuration).mdrSdtmigVersionClassesClassDatasetsGet(version, _class, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SDTMIG Class
         * @throws {RequiredError}
         */
        mdrSdtmigVersionClassesClassGet(version: string, _class: string, options?: RequestOptions = {}): Promise<SdtmigClass> {
            const localVarFetchArgs = SDTMImplementationGuideSDTMIGApiFetchParamCreator(configuration).mdrSdtmigVersionClassesClassGet(version, _class, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SDTMIG Class List
         * @throws {RequiredError}
         */
        mdrSdtmigVersionClassesGet(version: string, options?: RequestOptions = {}): Promise<SdtmigClasses> {
            const localVarFetchArgs = SDTMImplementationGuideSDTMIGApiFetchParamCreator(configuration).mdrSdtmigVersionClassesGet(version, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SDTMIG Dataset
         * @throws {RequiredError}
         */
        mdrSdtmigVersionDatasetsDatasetGet(version: string, dataset: string, options?: RequestOptions = {}): Promise<SdtmigDataset> {
            const localVarFetchArgs = SDTMImplementationGuideSDTMIGApiFetchParamCreator(configuration).mdrSdtmigVersionDatasetsDatasetGet(version, dataset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SDTMIG Dataset Variable List
         * @throws {RequiredError}
         */
        mdrSdtmigVersionDatasetsDatasetVariablesGet(version: string, dataset: string, options?: RequestOptions = {}): Promise<SdtmigDatasetVariables> {
            const localVarFetchArgs = SDTMImplementationGuideSDTMIGApiFetchParamCreator(configuration).mdrSdtmigVersionDatasetsDatasetVariablesGet(version, dataset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SDTMIG Dataset Variable
         * @throws {RequiredError}
         */
        mdrSdtmigVersionDatasetsDatasetVariablesVarGet(version: string, dataset: string, _var: string, options?: RequestOptions = {}): Promise<SdtmigDatasetVariable> {
            const localVarFetchArgs = SDTMImplementationGuideSDTMIGApiFetchParamCreator(configuration).mdrSdtmigVersionDatasetsDatasetVariablesVarGet(version, dataset, _var, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SDTMIG Dataset List
         * @throws {RequiredError}
         */
        mdrSdtmigVersionDatasetsGet(version: string, options?: RequestOptions = {}): Promise<SdtmigDatasets> {
            const localVarFetchArgs = SDTMImplementationGuideSDTMIGApiFetchParamCreator(configuration).mdrSdtmigVersionDatasetsGet(version, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SDTMIG product
         * @throws {RequiredError}
         */
        mdrSdtmigVersionGet(version: string, options?: RequestOptions = {}): Promise<SdtmigProduct> {
            const localVarFetchArgs = SDTMImplementationGuideSDTMIGApiFetchParamCreator(configuration).mdrSdtmigVersionGet(version, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * SENDImplementationGuideSENDIGApi - fetch parameter creator
 * @export
 */
export const SENDImplementationGuideSENDIGApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Root SENDIG Dataset Variable
         * @throws {RequiredError}
         */
        mdrRootSendigDatasetsDatasetVariablesVarGet(dataset: string, _var: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling mdrRootSendigDatasetsDatasetVariablesVarGet.');
            }
            // verify required parameter '_var' is not null or undefined
            if (_var === null || _var === undefined) {
                throw new RequiredError('_var','Required parameter _var was null or undefined when calling mdrRootSendigDatasetsDatasetVariablesVarGet.');
            }
            const localVarPath = `/mdr/root/sendig/datasets/{dataset}/variables/{var}`
                .replace(`{${"dataset"}}`, encodeURIComponent(String(dataset)))
                .replace(`{${"var"}}`, encodeURIComponent(String(_var)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SENDIG Class Dataset List
         * @throws {RequiredError}
         */
        mdrSendigVersionClassesClassDatasetsGet(version: string, _class: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSendigVersionClassesClassDatasetsGet.');
            }
            // verify required parameter '_class' is not null or undefined
            if (_class === null || _class === undefined) {
                throw new RequiredError('_class','Required parameter _class was null or undefined when calling mdrSendigVersionClassesClassDatasetsGet.');
            }
            const localVarPath = `/mdr/sendig/{version}/classes/{class}/datasets`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"class"}}`, encodeURIComponent(String(_class)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SENDIG Class
         * @throws {RequiredError}
         */
        mdrSendigVersionClassesClassGet(version: string, _class: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSendigVersionClassesClassGet.');
            }
            // verify required parameter '_class' is not null or undefined
            if (_class === null || _class === undefined) {
                throw new RequiredError('_class','Required parameter _class was null or undefined when calling mdrSendigVersionClassesClassGet.');
            }
            const localVarPath = `/mdr/sendig/{version}/classes/{class}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"class"}}`, encodeURIComponent(String(_class)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SENDIG Class List
         * @throws {RequiredError}
         */
        mdrSendigVersionClassesGet(version: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSendigVersionClassesGet.');
            }
            const localVarPath = `/mdr/sendig/{version}/classes`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SENDIG Dataset
         * @throws {RequiredError}
         */
        mdrSendigVersionDatasetsDatasetGet(version: string, dataset: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSendigVersionDatasetsDatasetGet.');
            }
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling mdrSendigVersionDatasetsDatasetGet.');
            }
            const localVarPath = `/mdr/sendig/{version}/datasets/{dataset}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"dataset"}}`, encodeURIComponent(String(dataset)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SENDIG Dataset Variable List
         * @throws {RequiredError}
         */
        mdrSendigVersionDatasetsDatasetVariablesGet(version: string, dataset: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSendigVersionDatasetsDatasetVariablesGet.');
            }
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling mdrSendigVersionDatasetsDatasetVariablesGet.');
            }
            const localVarPath = `/mdr/sendig/{version}/datasets/{dataset}/variables`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"dataset"}}`, encodeURIComponent(String(dataset)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SENDIG Dataset Variable
         * @throws {RequiredError}
         */
        mdrSendigVersionDatasetsDatasetVariablesVarGet(version: string, dataset: string, _var: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSendigVersionDatasetsDatasetVariablesVarGet.');
            }
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling mdrSendigVersionDatasetsDatasetVariablesVarGet.');
            }
            // verify required parameter '_var' is not null or undefined
            if (_var === null || _var === undefined) {
                throw new RequiredError('_var','Required parameter _var was null or undefined when calling mdrSendigVersionDatasetsDatasetVariablesVarGet.');
            }
            const localVarPath = `/mdr/sendig/{version}/datasets/{dataset}/variables/{var}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"dataset"}}`, encodeURIComponent(String(dataset)))
                .replace(`{${"var"}}`, encodeURIComponent(String(_var)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SENDIG Dataset List
         * @throws {RequiredError}
         */
        mdrSendigVersionDatasetsGet(version: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSendigVersionDatasetsGet.');
            }
            const localVarPath = `/mdr/sendig/{version}/datasets`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SENDIG product
         * @throws {RequiredError}
         */
        mdrSendigVersionGet(version: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSendigVersionGet.');
            }
            const localVarPath = `/mdr/sendig/{version}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type SENDImplementationGuideSENDIGApiType = { 
    mdrRootSendigDatasetsDatasetVariablesVarGet(dataset: string, _var: string, options?: RequestOptions): Promise<RootSendigDatasetVariable>,

    mdrSendigVersionClassesClassDatasetsGet(version: string, _class: string, options?: RequestOptions): Promise<SendigClassDatasets>,

    mdrSendigVersionClassesClassGet(version: string, _class: string, options?: RequestOptions): Promise<SendigClass>,

    mdrSendigVersionClassesGet(version: string, options?: RequestOptions): Promise<SendigClasses>,

    mdrSendigVersionDatasetsDatasetGet(version: string, dataset: string, options?: RequestOptions): Promise<SendigDataset>,

    mdrSendigVersionDatasetsDatasetVariablesGet(version: string, dataset: string, options?: RequestOptions): Promise<SendigDatasetVariables>,

    mdrSendigVersionDatasetsDatasetVariablesVarGet(version: string, dataset: string, _var: string, options?: RequestOptions): Promise<SendigDatasetVariable>,

    mdrSendigVersionDatasetsGet(version: string, options?: RequestOptions): Promise<SendigDatasets>,

    mdrSendigVersionGet(version: string, options?: RequestOptions): Promise<SendigProduct>,
}

/**
 * SENDImplementationGuideSENDIGApi - factory function to inject configuration 
 * @export
 */
export const SENDImplementationGuideSENDIGApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): SENDImplementationGuideSENDIGApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get Root SENDIG Dataset Variable
         * @throws {RequiredError}
         */
        mdrRootSendigDatasetsDatasetVariablesVarGet(dataset: string, _var: string, options?: RequestOptions = {}): Promise<RootSendigDatasetVariable> {
            const localVarFetchArgs = SENDImplementationGuideSENDIGApiFetchParamCreator(configuration).mdrRootSendigDatasetsDatasetVariablesVarGet(dataset, _var, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SENDIG Class Dataset List
         * @throws {RequiredError}
         */
        mdrSendigVersionClassesClassDatasetsGet(version: string, _class: string, options?: RequestOptions = {}): Promise<SendigClassDatasets> {
            const localVarFetchArgs = SENDImplementationGuideSENDIGApiFetchParamCreator(configuration).mdrSendigVersionClassesClassDatasetsGet(version, _class, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SENDIG Class
         * @throws {RequiredError}
         */
        mdrSendigVersionClassesClassGet(version: string, _class: string, options?: RequestOptions = {}): Promise<SendigClass> {
            const localVarFetchArgs = SENDImplementationGuideSENDIGApiFetchParamCreator(configuration).mdrSendigVersionClassesClassGet(version, _class, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SENDIG Class List
         * @throws {RequiredError}
         */
        mdrSendigVersionClassesGet(version: string, options?: RequestOptions = {}): Promise<SendigClasses> {
            const localVarFetchArgs = SENDImplementationGuideSENDIGApiFetchParamCreator(configuration).mdrSendigVersionClassesGet(version, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SENDIG Dataset
         * @throws {RequiredError}
         */
        mdrSendigVersionDatasetsDatasetGet(version: string, dataset: string, options?: RequestOptions = {}): Promise<SendigDataset> {
            const localVarFetchArgs = SENDImplementationGuideSENDIGApiFetchParamCreator(configuration).mdrSendigVersionDatasetsDatasetGet(version, dataset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SENDIG Dataset Variable List
         * @throws {RequiredError}
         */
        mdrSendigVersionDatasetsDatasetVariablesGet(version: string, dataset: string, options?: RequestOptions = {}): Promise<SendigDatasetVariables> {
            const localVarFetchArgs = SENDImplementationGuideSENDIGApiFetchParamCreator(configuration).mdrSendigVersionDatasetsDatasetVariablesGet(version, dataset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SENDIG Dataset Variable
         * @throws {RequiredError}
         */
        mdrSendigVersionDatasetsDatasetVariablesVarGet(version: string, dataset: string, _var: string, options?: RequestOptions = {}): Promise<SendigDatasetVariable> {
            const localVarFetchArgs = SENDImplementationGuideSENDIGApiFetchParamCreator(configuration).mdrSendigVersionDatasetsDatasetVariablesVarGet(version, dataset, _var, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SENDIG Dataset List
         * @throws {RequiredError}
         */
        mdrSendigVersionDatasetsGet(version: string, options?: RequestOptions = {}): Promise<SendigDatasets> {
            const localVarFetchArgs = SENDImplementationGuideSENDIGApiFetchParamCreator(configuration).mdrSendigVersionDatasetsGet(version, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SENDIG product
         * @throws {RequiredError}
         */
        mdrSendigVersionGet(version: string, options?: RequestOptions = {}): Promise<SendigProduct> {
            const localVarFetchArgs = SENDImplementationGuideSENDIGApiFetchParamCreator(configuration).mdrSendigVersionGet(version, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * SearchesApi - fetch parameter creator
 * @export
 */
export const SearchesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Search Results Across CDISC Library
         * @throws {RequiredError}
         */
        mdrSearchGet(q: string, highlight?: string, start?: number, pageSize?: number, _class?: string, codelist?: string, conceptId?: string, core?: string, dataStructure?: string, datasetStructure?: string, definition?: string, description?: string, domain?: string, effectiveDate?: string, extensible?: string, href?: string, label?: string, measureType?: string, name?: string, preferredTerm?: string, product?: string, productGroup?: string, registrationStatus?: string, roleDescription?: string, sdtmTarget?: string, simpleDatatype?: string, submissionValue?: string, synonyms?: string, type?: string, uiHref?: string, valueDomain?: string, variableSet?: string, version?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'q' is not null or undefined
            if (q === null || q === undefined) {
                throw new RequiredError('q','Required parameter q was null or undefined when calling mdrSearchGet.');
            }
            const localVarPath = `/mdr/search`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = ((q:any):string);
            }

            if (highlight !== undefined) {
                localVarQueryParameter['highlight'] = ((highlight:any):string);
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = ((start:any):string);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = ((pageSize:any):string);
            }

            if (_class !== undefined) {
                localVarQueryParameter['class'] = ((_class:any):string);
            }

            if (codelist !== undefined) {
                localVarQueryParameter['codelist'] = ((codelist:any):string);
            }

            if (conceptId !== undefined) {
                localVarQueryParameter['conceptId'] = ((conceptId:any):string);
            }

            if (core !== undefined) {
                localVarQueryParameter['core'] = ((core:any):string);
            }

            if (dataStructure !== undefined) {
                localVarQueryParameter['dataStructure'] = ((dataStructure:any):string);
            }

            if (datasetStructure !== undefined) {
                localVarQueryParameter['datasetStructure'] = ((datasetStructure:any):string);
            }

            if (definition !== undefined) {
                localVarQueryParameter['definition'] = ((definition:any):string);
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = ((description:any):string);
            }

            if (domain !== undefined) {
                localVarQueryParameter['domain'] = ((domain:any):string);
            }

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = ((effectiveDate:any):string);
            }

            if (extensible !== undefined) {
                localVarQueryParameter['extensible'] = ((extensible:any):string);
            }

            if (href !== undefined) {
                localVarQueryParameter['href'] = ((href:any):string);
            }

            if (label !== undefined) {
                localVarQueryParameter['label'] = ((label:any):string);
            }

            if (measureType !== undefined) {
                localVarQueryParameter['measureType'] = ((measureType:any):string);
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = ((name:any):string);
            }

            if (preferredTerm !== undefined) {
                localVarQueryParameter['preferredTerm'] = ((preferredTerm:any):string);
            }

            if (product !== undefined) {
                localVarQueryParameter['product'] = ((product:any):string);
            }

            if (productGroup !== undefined) {
                localVarQueryParameter['productGroup'] = ((productGroup:any):string);
            }

            if (registrationStatus !== undefined) {
                localVarQueryParameter['registrationStatus'] = ((registrationStatus:any):string);
            }

            if (roleDescription !== undefined) {
                localVarQueryParameter['roleDescription'] = ((roleDescription:any):string);
            }

            if (sdtmTarget !== undefined) {
                localVarQueryParameter['sdtmTarget'] = ((sdtmTarget:any):string);
            }

            if (simpleDatatype !== undefined) {
                localVarQueryParameter['simpleDatatype'] = ((simpleDatatype:any):string);
            }

            if (submissionValue !== undefined) {
                localVarQueryParameter['submissionValue'] = ((submissionValue:any):string);
            }

            if (synonyms !== undefined) {
                localVarQueryParameter['synonyms'] = ((synonyms:any):string);
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = ((type:any):string);
            }

            if (uiHref !== undefined) {
                localVarQueryParameter['uiHref'] = ((uiHref:any):string);
            }

            if (valueDomain !== undefined) {
                localVarQueryParameter['valueDomain'] = ((valueDomain:any):string);
            }

            if (variableSet !== undefined) {
                localVarQueryParameter['variableSet'] = ((variableSet:any):string);
            }

            if (version !== undefined) {
                localVarQueryParameter['version'] = ((version:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Search Results Across CDISC Library
         * @throws {RequiredError}
         */
        mdrSearchScopesGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/mdr/search/scopes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Search Results Limited to Scope
         * @throws {RequiredError}
         */
        mdrSearchScopesScopeGet(scope: DefaultSearchScopes, options: RequestOptions): FetchArgs {
            // verify required parameter 'scope' is not null or undefined
            if (scope === null || scope === undefined) {
                throw new RequiredError('scope','Required parameter scope was null or undefined when calling mdrSearchScopesScopeGet.');
            }
            const localVarPath = `/mdr/search/scopes/{scope}`
                .replace(`{${"scope"}}`, encodeURIComponent(String(scope)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type SearchesApiType = { 
    mdrSearchGet(q: string, highlight?: string, start?: number, pageSize?: number, _class?: string, codelist?: string, conceptId?: string, core?: string, dataStructure?: string, datasetStructure?: string, definition?: string, description?: string, domain?: string, effectiveDate?: string, extensible?: string, href?: string, label?: string, measureType?: string, name?: string, preferredTerm?: string, product?: string, productGroup?: string, registrationStatus?: string, roleDescription?: string, sdtmTarget?: string, simpleDatatype?: string, submissionValue?: string, synonyms?: string, type?: string, uiHref?: string, valueDomain?: string, variableSet?: string, version?: string, options?: RequestOptions): Promise<DefaultSearchResponse>,

    mdrSearchScopesGet(options?: RequestOptions): Promise<MdrSearchScopesGet200Response>,

    mdrSearchScopesScopeGet(scope: DefaultSearchScopes, options?: RequestOptions): Promise<ScopeValues>,
}

/**
 * SearchesApi - factory function to inject configuration 
 * @export
 */
export const SearchesApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): SearchesApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get Search Results Across CDISC Library
         * @throws {RequiredError}
         */
        mdrSearchGet(q: string, highlight?: string, start?: number, pageSize?: number, _class?: string, codelist?: string, conceptId?: string, core?: string, dataStructure?: string, datasetStructure?: string, definition?: string, description?: string, domain?: string, effectiveDate?: string, extensible?: string, href?: string, label?: string, measureType?: string, name?: string, preferredTerm?: string, product?: string, productGroup?: string, registrationStatus?: string, roleDescription?: string, sdtmTarget?: string, simpleDatatype?: string, submissionValue?: string, synonyms?: string, type?: string, uiHref?: string, valueDomain?: string, variableSet?: string, version?: string, options?: RequestOptions = {}): Promise<DefaultSearchResponse> {
            const localVarFetchArgs = SearchesApiFetchParamCreator(configuration).mdrSearchGet(q, highlight, start, pageSize, _class, codelist, conceptId, core, dataStructure, datasetStructure, definition, description, domain, effectiveDate, extensible, href, label, measureType, name, preferredTerm, product, productGroup, registrationStatus, roleDescription, sdtmTarget, simpleDatatype, submissionValue, synonyms, type, uiHref, valueDomain, variableSet, version, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get Search Results Across CDISC Library
         * @throws {RequiredError}
         */
        mdrSearchScopesGet(options?: RequestOptions = {}): Promise<MdrSearchScopesGet200Response> {
            const localVarFetchArgs = SearchesApiFetchParamCreator(configuration).mdrSearchScopesGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get Search Results Limited to Scope
         * @throws {RequiredError}
         */
        mdrSearchScopesScopeGet(scope: DefaultSearchScopes, options?: RequestOptions = {}): Promise<ScopeValues> {
            const localVarFetchArgs = SearchesApiFetchParamCreator(configuration).mdrSearchScopesScopeGet(scope, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * StatusesApi - fetch parameter creator
 * @export
 */
export const StatusesApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Check health of system components
         * @throws {RequiredError}
         */
        healthGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/health`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set maintenance mode and message
         * @throws {RequiredError}
         */
        mdrMaintenanceGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/mdr/maintenance`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type StatusesApiType = { 
    healthGet(options?: RequestOptions): Promise<Health>,

    mdrMaintenanceGet(options?: RequestOptions): Promise<MaintenanceBody>,
}

/**
 * StatusesApi - factory function to inject configuration 
 * @export
 */
export const StatusesApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): StatusesApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Check health of system components
         * @throws {RequiredError}
         */
        healthGet(options?: RequestOptions = {}): Promise<Health> {
            const localVarFetchArgs = StatusesApiFetchParamCreator(configuration).healthGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Set maintenance mode and message
         * @throws {RequiredError}
         */
        mdrMaintenanceGet(options?: RequestOptions = {}): Promise<MaintenanceBody> {
            const localVarFetchArgs = StatusesApiFetchParamCreator(configuration).mdrMaintenanceGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


/**
 * StudyDataTabulationModelSDTMApi - fetch parameter creator
 * @export
 */
export const StudyDataTabulationModelSDTMApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get Root of SDTM Class Variable
         * @throws {RequiredError}
         */
        mdrRootSdtmClassesClassVariablesVarGet(_class: string, _var: string, options: RequestOptions): FetchArgs {
            // verify required parameter '_class' is not null or undefined
            if (_class === null || _class === undefined) {
                throw new RequiredError('_class','Required parameter _class was null or undefined when calling mdrRootSdtmClassesClassVariablesVarGet.');
            }
            // verify required parameter '_var' is not null or undefined
            if (_var === null || _var === undefined) {
                throw new RequiredError('_var','Required parameter _var was null or undefined when calling mdrRootSdtmClassesClassVariablesVarGet.');
            }
            const localVarPath = `/mdr/root/sdtm/classes/{class}/variables/{var}`
                .replace(`{${"class"}}`, encodeURIComponent(String(_class)))
                .replace(`{${"var"}}`, encodeURIComponent(String(_var)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Root SDTM Dataset Variable
         * @throws {RequiredError}
         */
        mdrRootSdtmDatasetsDatasetVariablesVarGet(dataset: string, _var: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling mdrRootSdtmDatasetsDatasetVariablesVarGet.');
            }
            // verify required parameter '_var' is not null or undefined
            if (_var === null || _var === undefined) {
                throw new RequiredError('_var','Required parameter _var was null or undefined when calling mdrRootSdtmDatasetsDatasetVariablesVarGet.');
            }
            const localVarPath = `/mdr/root/sdtm/datasets/{dataset}/variables/{var}`
                .replace(`{${"dataset"}}`, encodeURIComponent(String(dataset)))
                .replace(`{${"var"}}`, encodeURIComponent(String(_var)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SDTM Class Dataset List
         * @throws {RequiredError}
         */
        mdrSdtmVersionClassesClassDatasetsGet(version: string, _class: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSdtmVersionClassesClassDatasetsGet.');
            }
            // verify required parameter '_class' is not null or undefined
            if (_class === null || _class === undefined) {
                throw new RequiredError('_class','Required parameter _class was null or undefined when calling mdrSdtmVersionClassesClassDatasetsGet.');
            }
            const localVarPath = `/mdr/sdtm/{version}/classes/{class}/datasets`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"class"}}`, encodeURIComponent(String(_class)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SDTM Class
         * @throws {RequiredError}
         */
        mdrSdtmVersionClassesClassGet(version: string, _class: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSdtmVersionClassesClassGet.');
            }
            // verify required parameter '_class' is not null or undefined
            if (_class === null || _class === undefined) {
                throw new RequiredError('_class','Required parameter _class was null or undefined when calling mdrSdtmVersionClassesClassGet.');
            }
            const localVarPath = `/mdr/sdtm/{version}/classes/{class}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"class"}}`, encodeURIComponent(String(_class)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SDTM Class Variable List
         * @throws {RequiredError}
         */
        mdrSdtmVersionClassesClassVariablesGet(version: string, _class: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSdtmVersionClassesClassVariablesGet.');
            }
            // verify required parameter '_class' is not null or undefined
            if (_class === null || _class === undefined) {
                throw new RequiredError('_class','Required parameter _class was null or undefined when calling mdrSdtmVersionClassesClassVariablesGet.');
            }
            const localVarPath = `/mdr/sdtm/{version}/classes/{class}/variables`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"class"}}`, encodeURIComponent(String(_class)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SDTM Class Variable
         * @throws {RequiredError}
         */
        mdrSdtmVersionClassesClassVariablesVarGet(version: string, _class: string, _var: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSdtmVersionClassesClassVariablesVarGet.');
            }
            // verify required parameter '_class' is not null or undefined
            if (_class === null || _class === undefined) {
                throw new RequiredError('_class','Required parameter _class was null or undefined when calling mdrSdtmVersionClassesClassVariablesVarGet.');
            }
            // verify required parameter '_var' is not null or undefined
            if (_var === null || _var === undefined) {
                throw new RequiredError('_var','Required parameter _var was null or undefined when calling mdrSdtmVersionClassesClassVariablesVarGet.');
            }
            const localVarPath = `/mdr/sdtm/{version}/classes/{class}/variables/{var}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"class"}}`, encodeURIComponent(String(_class)))
                .replace(`{${"var"}}`, encodeURIComponent(String(_var)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SDTM Class List
         * @throws {RequiredError}
         */
        mdrSdtmVersionClassesGet(version: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSdtmVersionClassesGet.');
            }
            const localVarPath = `/mdr/sdtm/{version}/classes`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SDTM Dataset
         * @throws {RequiredError}
         */
        mdrSdtmVersionDatasetsDatasetGet(version: string, dataset: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSdtmVersionDatasetsDatasetGet.');
            }
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling mdrSdtmVersionDatasetsDatasetGet.');
            }
            const localVarPath = `/mdr/sdtm/{version}/datasets/{dataset}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"dataset"}}`, encodeURIComponent(String(dataset)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SDTM Dataset Variable List
         * @throws {RequiredError}
         */
        mdrSdtmVersionDatasetsDatasetVariablesGet(version: string, dataset: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesGet.');
            }
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesGet.');
            }
            const localVarPath = `/mdr/sdtm/{version}/datasets/{dataset}/variables`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"dataset"}}`, encodeURIComponent(String(dataset)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SDTM Dataset Variable
         * @throws {RequiredError}
         */
        mdrSdtmVersionDatasetsDatasetVariablesVarGet(version: string, dataset: string, _var: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet.');
            }
            // verify required parameter 'dataset' is not null or undefined
            if (dataset === null || dataset === undefined) {
                throw new RequiredError('dataset','Required parameter dataset was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet.');
            }
            // verify required parameter '_var' is not null or undefined
            if (_var === null || _var === undefined) {
                throw new RequiredError('_var','Required parameter _var was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet.');
            }
            const localVarPath = `/mdr/sdtm/{version}/datasets/{dataset}/variables/{var}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"dataset"}}`, encodeURIComponent(String(dataset)))
                .replace(`{${"var"}}`, encodeURIComponent(String(_var)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SDTM Dataset List
         * @throws {RequiredError}
         */
        mdrSdtmVersionDatasetsGet(version: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSdtmVersionDatasetsGet.');
            }
            const localVarPath = `/mdr/sdtm/{version}/datasets`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get SDTM product
         * @throws {RequiredError}
         */
        mdrSdtmVersionGet(version: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling mdrSdtmVersionGet.');
            }
            const localVarPath = `/mdr/sdtm/{version}`
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication basicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type StudyDataTabulationModelSDTMApiType = { 
    mdrRootSdtmClassesClassVariablesVarGet(_class: string, _var: string, options?: RequestOptions): Promise<RootSdtmClassVariable>,

    mdrRootSdtmDatasetsDatasetVariablesVarGet(dataset: string, _var: string, options?: RequestOptions): Promise<RootSdtmDatasetVariable>,

    mdrSdtmVersionClassesClassDatasetsGet(version: string, _class: string, options?: RequestOptions): Promise<SdtmClassDatasets>,

    mdrSdtmVersionClassesClassGet(version: string, _class: string, options?: RequestOptions): Promise<SdtmClass>,

    mdrSdtmVersionClassesClassVariablesGet(version: string, _class: string, options?: RequestOptions): Promise<SdtmClassVariables>,

    mdrSdtmVersionClassesClassVariablesVarGet(version: string, _class: string, _var: string, options?: RequestOptions): Promise<SdtmClassVariable>,

    mdrSdtmVersionClassesGet(version: string, options?: RequestOptions): Promise<SdtmClasses>,

    mdrSdtmVersionDatasetsDatasetGet(version: string, dataset: string, options?: RequestOptions): Promise<SdtmDataset>,

    mdrSdtmVersionDatasetsDatasetVariablesGet(version: string, dataset: string, options?: RequestOptions): Promise<SdtmDatasetVariables>,

    mdrSdtmVersionDatasetsDatasetVariablesVarGet(version: string, dataset: string, _var: string, options?: RequestOptions): Promise<SdtmDatasetVariable>,

    mdrSdtmVersionDatasetsGet(version: string, options?: RequestOptions): Promise<SdtmDatasets>,

    mdrSdtmVersionGet(version: string, options?: RequestOptions): Promise<SdtmProduct>,
}

/**
 * StudyDataTabulationModelSDTMApi - factory function to inject configuration 
 * @export
 */
export const StudyDataTabulationModelSDTMApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): StudyDataTabulationModelSDTMApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Get Root of SDTM Class Variable
         * @throws {RequiredError}
         */
        mdrRootSdtmClassesClassVariablesVarGet(_class: string, _var: string, options?: RequestOptions = {}): Promise<RootSdtmClassVariable> {
            const localVarFetchArgs = StudyDataTabulationModelSDTMApiFetchParamCreator(configuration).mdrRootSdtmClassesClassVariablesVarGet(_class, _var, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get Root SDTM Dataset Variable
         * @throws {RequiredError}
         */
        mdrRootSdtmDatasetsDatasetVariablesVarGet(dataset: string, _var: string, options?: RequestOptions = {}): Promise<RootSdtmDatasetVariable> {
            const localVarFetchArgs = StudyDataTabulationModelSDTMApiFetchParamCreator(configuration).mdrRootSdtmDatasetsDatasetVariablesVarGet(dataset, _var, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SDTM Class Dataset List
         * @throws {RequiredError}
         */
        mdrSdtmVersionClassesClassDatasetsGet(version: string, _class: string, options?: RequestOptions = {}): Promise<SdtmClassDatasets> {
            const localVarFetchArgs = StudyDataTabulationModelSDTMApiFetchParamCreator(configuration).mdrSdtmVersionClassesClassDatasetsGet(version, _class, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SDTM Class
         * @throws {RequiredError}
         */
        mdrSdtmVersionClassesClassGet(version: string, _class: string, options?: RequestOptions = {}): Promise<SdtmClass> {
            const localVarFetchArgs = StudyDataTabulationModelSDTMApiFetchParamCreator(configuration).mdrSdtmVersionClassesClassGet(version, _class, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SDTM Class Variable List
         * @throws {RequiredError}
         */
        mdrSdtmVersionClassesClassVariablesGet(version: string, _class: string, options?: RequestOptions = {}): Promise<SdtmClassVariables> {
            const localVarFetchArgs = StudyDataTabulationModelSDTMApiFetchParamCreator(configuration).mdrSdtmVersionClassesClassVariablesGet(version, _class, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SDTM Class Variable
         * @throws {RequiredError}
         */
        mdrSdtmVersionClassesClassVariablesVarGet(version: string, _class: string, _var: string, options?: RequestOptions = {}): Promise<SdtmClassVariable> {
            const localVarFetchArgs = StudyDataTabulationModelSDTMApiFetchParamCreator(configuration).mdrSdtmVersionClassesClassVariablesVarGet(version, _class, _var, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SDTM Class List
         * @throws {RequiredError}
         */
        mdrSdtmVersionClassesGet(version: string, options?: RequestOptions = {}): Promise<SdtmClasses> {
            const localVarFetchArgs = StudyDataTabulationModelSDTMApiFetchParamCreator(configuration).mdrSdtmVersionClassesGet(version, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SDTM Dataset
         * @throws {RequiredError}
         */
        mdrSdtmVersionDatasetsDatasetGet(version: string, dataset: string, options?: RequestOptions = {}): Promise<SdtmDataset> {
            const localVarFetchArgs = StudyDataTabulationModelSDTMApiFetchParamCreator(configuration).mdrSdtmVersionDatasetsDatasetGet(version, dataset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SDTM Dataset Variable List
         * @throws {RequiredError}
         */
        mdrSdtmVersionDatasetsDatasetVariablesGet(version: string, dataset: string, options?: RequestOptions = {}): Promise<SdtmDatasetVariables> {
            const localVarFetchArgs = StudyDataTabulationModelSDTMApiFetchParamCreator(configuration).mdrSdtmVersionDatasetsDatasetVariablesGet(version, dataset, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SDTM Dataset Variable
         * @throws {RequiredError}
         */
        mdrSdtmVersionDatasetsDatasetVariablesVarGet(version: string, dataset: string, _var: string, options?: RequestOptions = {}): Promise<SdtmDatasetVariable> {
            const localVarFetchArgs = StudyDataTabulationModelSDTMApiFetchParamCreator(configuration).mdrSdtmVersionDatasetsDatasetVariablesVarGet(version, dataset, _var, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SDTM Dataset List
         * @throws {RequiredError}
         */
        mdrSdtmVersionDatasetsGet(version: string, options?: RequestOptions = {}): Promise<SdtmDatasets> {
            const localVarFetchArgs = StudyDataTabulationModelSDTMApiFetchParamCreator(configuration).mdrSdtmVersionDatasetsGet(version, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get SDTM product
         * @throws {RequiredError}
         */
        mdrSdtmVersionGet(version: string, options?: RequestOptions = {}): Promise<SdtmProduct> {
            const localVarFetchArgs = StudyDataTabulationModelSDTMApiFetchParamCreator(configuration).mdrSdtmVersionGet(version, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


export type ApiTypes = { 
    AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi: AnalysisDataModelAndImplementationGuideADaMAndADaMIGApiType,

    CDASHImplementationGuideCDASHIGApi: CDASHImplementationGuideCDASHIGApiType,

    ClinicalDataAcquisitionStandardsHarmonizationCDASHApi: ClinicalDataAcquisitionStandardsHarmonizationCDASHApiType,

    ControlledTerminologyCTApi: ControlledTerminologyCTApiType,

    DefaultApi: DefaultApiType,

    MeasuresApi: MeasuresApiType,

    SDTMImplementationGuideSDTMIGApi: SDTMImplementationGuideSDTMIGApiType,

    SENDImplementationGuideSENDIGApi: SENDImplementationGuideSENDIGApiType,

    SearchesApi: SearchesApiType,

    StatusesApi: StatusesApiType,

    StudyDataTabulationModelSDTMApi: StudyDataTabulationModelSDTMApiType,
 }

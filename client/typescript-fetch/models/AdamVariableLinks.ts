/* tslint:disable */
/* eslint-disable */
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RootCtCodelistRef } from './RootCtCodelistRef';
import {
    RootCtCodelistRefFromJSON,
    RootCtCodelistRefFromJSONTyped,
    RootCtCodelistRefToJSON,
    RootCtCodelistRefToJSONTyped,
} from './RootCtCodelistRef';
import type { AdamVarsetRef } from './AdamVarsetRef';
import {
    AdamVarsetRefFromJSON,
    AdamVarsetRefFromJSONTyped,
    AdamVarsetRefToJSON,
    AdamVarsetRefToJSONTyped,
} from './AdamVarsetRef';
import type { AdamDatastructureRef } from './AdamDatastructureRef';
import {
    AdamDatastructureRefFromJSON,
    AdamDatastructureRefFromJSONTyped,
    AdamDatastructureRefToJSON,
    AdamDatastructureRefToJSONTyped,
} from './AdamDatastructureRef';
import type { AdamVariableRef } from './AdamVariableRef';
import {
    AdamVariableRefFromJSON,
    AdamVariableRefFromJSONTyped,
    AdamVariableRefToJSON,
    AdamVariableRefToJSONTyped,
} from './AdamVariableRef';
import type { AdamProductRef } from './AdamProductRef';
import {
    AdamProductRefFromJSON,
    AdamProductRefFromJSONTyped,
    AdamProductRefToJSON,
    AdamProductRefToJSONTyped,
} from './AdamProductRef';

/**
 * 
 * @export
 * @interface AdamVariableLinks
 */
export interface AdamVariableLinks {
    /**
     * 
     * @type {AdamVariableRef}
     * @memberof AdamVariableLinks
     */
    self?: AdamVariableRef;
    /**
     * 
     * @type {RootCtCodelistRef}
     * @memberof AdamVariableLinks
     */
    codelist?: RootCtCodelistRef;
    /**
     * 
     * @type {AdamProductRef}
     * @memberof AdamVariableLinks
     */
    parentProduct?: AdamProductRef;
    /**
     * 
     * @type {AdamDatastructureRef}
     * @memberof AdamVariableLinks
     */
    parentDatastructure?: AdamDatastructureRef;
    /**
     * 
     * @type {AdamVarsetRef}
     * @memberof AdamVariableLinks
     */
    parentVariableSet?: AdamVarsetRef;
    /**
     * 
     * @type {AdamVariableRef}
     * @memberof AdamVariableLinks
     */
    priorVersion?: AdamVariableRef;
}

/**
 * Check if a given object implements the AdamVariableLinks interface.
 */
export function instanceOfAdamVariableLinks(value: object): value is AdamVariableLinks {
    return true;
}

export function AdamVariableLinksFromJSON(json: any): AdamVariableLinks {
    return AdamVariableLinksFromJSONTyped(json, false);
}

export function AdamVariableLinksFromJSONTyped(json: any, ignoreDiscriminator: boolean): AdamVariableLinks {
    if (json == null) {
        return json;
    }
    return {
        
        'self': json['self'] == null ? undefined : AdamVariableRefFromJSON(json['self']),
        'codelist': json['codelist'] == null ? undefined : RootCtCodelistRefFromJSON(json['codelist']),
        'parentProduct': json['parentProduct'] == null ? undefined : AdamProductRefFromJSON(json['parentProduct']),
        'parentDatastructure': json['parentDatastructure'] == null ? undefined : AdamDatastructureRefFromJSON(json['parentDatastructure']),
        'parentVariableSet': json['parentVariableSet'] == null ? undefined : AdamVarsetRefFromJSON(json['parentVariableSet']),
        'priorVersion': json['priorVersion'] == null ? undefined : AdamVariableRefFromJSON(json['priorVersion']),
    };
}

export function AdamVariableLinksToJSON(json: any): AdamVariableLinks {
    return AdamVariableLinksToJSONTyped(json, false);
}

export function AdamVariableLinksToJSONTyped(value?: AdamVariableLinks | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'self': AdamVariableRefToJSON(value['self']),
        'codelist': RootCtCodelistRefToJSON(value['codelist']),
        'parentProduct': AdamProductRefToJSON(value['parentProduct']),
        'parentDatastructure': AdamDatastructureRefToJSON(value['parentDatastructure']),
        'parentVariableSet': AdamVarsetRefToJSON(value['parentVariableSet']),
        'priorVersion': AdamVariableRefToJSON(value['priorVersion']),
    };
}


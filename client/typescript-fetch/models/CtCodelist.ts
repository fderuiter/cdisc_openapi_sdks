/* tslint:disable */
/* eslint-disable */
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CtPackageTerm } from './CtPackageTerm';
import {
    CtPackageTermFromJSON,
    CtPackageTermFromJSONTyped,
    CtPackageTermToJSON,
    CtPackageTermToJSONTyped,
} from './CtPackageTerm';
import type { CtCodelistLinks } from './CtCodelistLinks';
import {
    CtCodelistLinksFromJSON,
    CtCodelistLinksFromJSONTyped,
    CtCodelistLinksToJSON,
    CtCodelistLinksToJSONTyped,
} from './CtCodelistLinks';

/**
 * 
 * @export
 * @interface CtCodelist
 */
export interface CtCodelist {
    /**
     * 
     * @type {string}
     * @memberof CtCodelist
     */
    conceptId?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelist
     */
    extensible?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelist
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelist
     */
    submissionValue?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelist
     */
    definition?: string;
    /**
     * 
     * @type {string}
     * @memberof CtCodelist
     */
    preferredTerm?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CtCodelist
     */
    synonyms?: Array<string>;
    /**
     * 
     * @type {CtCodelistLinks}
     * @memberof CtCodelist
     */
    links?: CtCodelistLinks;
    /**
     * 
     * @type {Array<CtPackageTerm>}
     * @memberof CtCodelist
     */
    terms?: Array<CtPackageTerm>;
}

/**
 * Check if a given object implements the CtCodelist interface.
 */
export function instanceOfCtCodelist(value: object): value is CtCodelist {
    return true;
}

export function CtCodelistFromJSON(json: any): CtCodelist {
    return CtCodelistFromJSONTyped(json, false);
}

export function CtCodelistFromJSONTyped(json: any, ignoreDiscriminator: boolean): CtCodelist {
    if (json == null) {
        return json;
    }
    return {
        
        'conceptId': json['conceptId'] == null ? undefined : json['conceptId'],
        'extensible': json['extensible'] == null ? undefined : json['extensible'],
        'name': json['name'] == null ? undefined : json['name'],
        'submissionValue': json['submissionValue'] == null ? undefined : json['submissionValue'],
        'definition': json['definition'] == null ? undefined : json['definition'],
        'preferredTerm': json['preferredTerm'] == null ? undefined : json['preferredTerm'],
        'synonyms': json['synonyms'] == null ? undefined : json['synonyms'],
        'links': json['_links'] == null ? undefined : CtCodelistLinksFromJSON(json['_links']),
        'terms': json['terms'] == null ? undefined : ((json['terms'] as Array<any>).map(CtPackageTermFromJSON)),
    };
}

export function CtCodelistToJSON(json: any): CtCodelist {
    return CtCodelistToJSONTyped(json, false);
}

export function CtCodelistToJSONTyped(value?: CtCodelist | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'conceptId': value['conceptId'],
        'extensible': value['extensible'],
        'name': value['name'],
        'submissionValue': value['submissionValue'],
        'definition': value['definition'],
        'preferredTerm': value['preferredTerm'],
        'synonyms': value['synonyms'],
        '_links': CtCodelistLinksToJSON(value['links']),
        'terms': value['terms'] == null ? undefined : ((value['terms'] as Array<any>).map(CtPackageTermToJSON)),
    };
}


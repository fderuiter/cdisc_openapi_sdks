/* tslint:disable */
/* eslint-disable */
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ExportAdamVariablesRow
 */
export interface ExportAdamVariablesRow {
    /**
     * 
     * @type {string}
     * @memberof ExportAdamVariablesRow
     */
    version?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamVariablesRow
     */
    dataStructureName?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamVariablesRow
     */
    datasetName?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamVariablesRow
     */
    variableGroup?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamVariablesRow
     */
    variableName?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamVariablesRow
     */
    variableLabel?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamVariablesRow
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamVariablesRow
     */
    codelistControlledTerms?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamVariablesRow
     */
    core?: string;
    /**
     * 
     * @type {string}
     * @memberof ExportAdamVariablesRow
     */
    cDISCNotes?: string;
}

/**
 * Check if a given object implements the ExportAdamVariablesRow interface.
 */
export function instanceOfExportAdamVariablesRow(value: object): value is ExportAdamVariablesRow {
    return true;
}

export function ExportAdamVariablesRowFromJSON(json: any): ExportAdamVariablesRow {
    return ExportAdamVariablesRowFromJSONTyped(json, false);
}

export function ExportAdamVariablesRowFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExportAdamVariablesRow {
    if (json == null) {
        return json;
    }
    return {
        
        'version': json['Version'] == null ? undefined : json['Version'],
        'dataStructureName': json['Data Structure Name'] == null ? undefined : json['Data Structure Name'],
        'datasetName': json['Dataset Name'] == null ? undefined : json['Dataset Name'],
        'variableGroup': json['Variable Group'] == null ? undefined : json['Variable Group'],
        'variableName': json['Variable Name'] == null ? undefined : json['Variable Name'],
        'variableLabel': json['Variable Label'] == null ? undefined : json['Variable Label'],
        'type': json['Type'] == null ? undefined : json['Type'],
        'codelistControlledTerms': json['Codelist/Controlled Terms'] == null ? undefined : json['Codelist/Controlled Terms'],
        'core': json['Core'] == null ? undefined : json['Core'],
        'cDISCNotes': json['CDISC Notes'] == null ? undefined : json['CDISC Notes'],
    };
}

export function ExportAdamVariablesRowToJSON(json: any): ExportAdamVariablesRow {
    return ExportAdamVariablesRowToJSONTyped(json, false);
}

export function ExportAdamVariablesRowToJSONTyped(value?: ExportAdamVariablesRow | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Version': value['version'],
        'Data Structure Name': value['dataStructureName'],
        'Dataset Name': value['datasetName'],
        'Variable Group': value['variableGroup'],
        'Variable Name': value['variableName'],
        'Variable Label': value['variableLabel'],
        'Type': value['type'],
        'Codelist/Controlled Terms': value['codelistControlledTerms'],
        'Core': value['core'],
        'CDISC Notes': value['cDISCNotes'],
    };
}


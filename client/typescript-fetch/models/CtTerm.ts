/* tslint:disable */
/* eslint-disable */
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CtTermLinks } from './CtTermLinks';
import {
    CtTermLinksFromJSON,
    CtTermLinksFromJSONTyped,
    CtTermLinksToJSON,
    CtTermLinksToJSONTyped,
} from './CtTermLinks';

/**
 * 
 * @export
 * @interface CtTerm
 */
export interface CtTerm {
    /**
     * 
     * @type {string}
     * @memberof CtTerm
     */
    conceptId?: string;
    /**
     * 
     * @type {string}
     * @memberof CtTerm
     */
    submissionValue?: string;
    /**
     * 
     * @type {string}
     * @memberof CtTerm
     */
    definition?: string;
    /**
     * 
     * @type {string}
     * @memberof CtTerm
     */
    preferredTerm?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CtTerm
     */
    synonyms?: Array<string>;
    /**
     * 
     * @type {CtTermLinks}
     * @memberof CtTerm
     */
    links?: CtTermLinks;
}

/**
 * Check if a given object implements the CtTerm interface.
 */
export function instanceOfCtTerm(value: object): value is CtTerm {
    return true;
}

export function CtTermFromJSON(json: any): CtTerm {
    return CtTermFromJSONTyped(json, false);
}

export function CtTermFromJSONTyped(json: any, ignoreDiscriminator: boolean): CtTerm {
    if (json == null) {
        return json;
    }
    return {
        
        'conceptId': json['conceptId'] == null ? undefined : json['conceptId'],
        'submissionValue': json['submissionValue'] == null ? undefined : json['submissionValue'],
        'definition': json['definition'] == null ? undefined : json['definition'],
        'preferredTerm': json['preferredTerm'] == null ? undefined : json['preferredTerm'],
        'synonyms': json['synonyms'] == null ? undefined : json['synonyms'],
        'links': json['_links'] == null ? undefined : CtTermLinksFromJSON(json['_links']),
    };
}

export function CtTermToJSON(json: any): CtTerm {
    return CtTermToJSONTyped(json, false);
}

export function CtTermToJSONTyped(value?: CtTerm | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'conceptId': value['conceptId'],
        'submissionValue': value['submissionValue'],
        'definition': value['definition'],
        'preferredTerm': value['preferredTerm'],
        'synonyms': value['synonyms'],
        '_links': CtTermLinksToJSON(value['links']),
    };
}


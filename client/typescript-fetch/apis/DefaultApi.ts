/* tslint:disable */
/* eslint-disable */
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  About,
  DefaultErrorResponse,
  Lastupdated,
  ProductgroupDataAnalysis,
  ProductgroupDataCollection,
  ProductgroupDataTabulation,
  ProductgroupQrs,
  ProductgroupTerminology,
  Products,
  XmlAbout,
  XmlLastupdated,
  XmlProductgroupDataAnalysis,
  XmlProductgroupDataCollection,
  XmlProductgroupDataTabulation,
  XmlProductgroupTerminology,
  XmlProducts,
} from '../models/index';
import {
    AboutFromJSON,
    AboutToJSON,
    DefaultErrorResponseFromJSON,
    DefaultErrorResponseToJSON,
    LastupdatedFromJSON,
    LastupdatedToJSON,
    ProductgroupDataAnalysisFromJSON,
    ProductgroupDataAnalysisToJSON,
    ProductgroupDataCollectionFromJSON,
    ProductgroupDataCollectionToJSON,
    ProductgroupDataTabulationFromJSON,
    ProductgroupDataTabulationToJSON,
    ProductgroupQrsFromJSON,
    ProductgroupQrsToJSON,
    ProductgroupTerminologyFromJSON,
    ProductgroupTerminologyToJSON,
    ProductsFromJSON,
    ProductsToJSON,
    XmlAboutFromJSON,
    XmlAboutToJSON,
    XmlLastupdatedFromJSON,
    XmlLastupdatedToJSON,
    XmlProductgroupDataAnalysisFromJSON,
    XmlProductgroupDataAnalysisToJSON,
    XmlProductgroupDataCollectionFromJSON,
    XmlProductgroupDataCollectionToJSON,
    XmlProductgroupDataTabulationFromJSON,
    XmlProductgroupDataTabulationToJSON,
    XmlProductgroupTerminologyFromJSON,
    XmlProductgroupTerminologyToJSON,
    XmlProductsFromJSON,
    XmlProductsToJSON,
} from '../models/index';

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get Information About CDISC Library
     */
    async mdrAboutGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<About>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/about`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AboutFromJSON(jsonValue));
    }

    /**
     * Get Information About CDISC Library
     */
    async mdrAboutGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<About> {
        const response = await this.mdrAboutGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get CDISC Library Last Updated
     */
    async mdrLastupdatedGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Lastupdated>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/lastupdated`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LastupdatedFromJSON(jsonValue));
    }

    /**
     * Get CDISC Library Last Updated
     */
    async mdrLastupdatedGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Lastupdated> {
        const response = await this.mdrLastupdatedGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get CDISC Library Product Group Data Analysis
     */
    async mdrProductsDataAnalysisGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductgroupDataAnalysis>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/products/DataAnalysis`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductgroupDataAnalysisFromJSON(jsonValue));
    }

    /**
     * Get CDISC Library Product Group Data Analysis
     */
    async mdrProductsDataAnalysisGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductgroupDataAnalysis> {
        const response = await this.mdrProductsDataAnalysisGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get CDISC Library Product Group Data Collection
     */
    async mdrProductsDataCollectionGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductgroupDataCollection>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/products/DataCollection`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductgroupDataCollectionFromJSON(jsonValue));
    }

    /**
     * Get CDISC Library Product Group Data Collection
     */
    async mdrProductsDataCollectionGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductgroupDataCollection> {
        const response = await this.mdrProductsDataCollectionGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get CDISC Library Product Group Data Tabulation
     */
    async mdrProductsDataTabulationGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductgroupDataTabulation>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/products/DataTabulation`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductgroupDataTabulationFromJSON(jsonValue));
    }

    /**
     * Get CDISC Library Product Group Data Tabulation
     */
    async mdrProductsDataTabulationGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductgroupDataTabulation> {
        const response = await this.mdrProductsDataTabulationGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get CDISC Library Products
     */
    async mdrProductsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Products>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/products`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductsFromJSON(jsonValue));
    }

    /**
     * Get CDISC Library Products
     */
    async mdrProductsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Products> {
        const response = await this.mdrProductsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get CDISC Library Product Group QRS
     */
    async mdrProductsMeasuresGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductgroupQrs>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/products/Measures`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductgroupQrsFromJSON(jsonValue));
    }

    /**
     * Get CDISC Library Product Group QRS
     */
    async mdrProductsMeasuresGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductgroupQrs> {
        const response = await this.mdrProductsMeasuresGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get CDISC Library Product Group Terminology
     */
    async mdrProductsTerminologyGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductgroupTerminology>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/products/Terminology`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductgroupTerminologyFromJSON(jsonValue));
    }

    /**
     * Get CDISC Library Product Group Terminology
     */
    async mdrProductsTerminologyGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductgroupTerminology> {
        const response = await this.mdrProductsTerminologyGetRaw(initOverrides);
        return await response.value();
    }

}

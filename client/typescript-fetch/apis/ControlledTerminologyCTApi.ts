/* tslint:disable */
/* eslint-disable */
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CtCodelist,
  CtCodelistTerms,
  CtPackage,
  CtPackageCodelists,
  CtPackages,
  CtTerm,
  DefaultErrorResponse,
  ExportCtTable,
  RootCtCodelist,
  RootCtTerm,
  XmlCtCodelist,
  XmlCtCodelistTerms,
  XmlCtPackage,
  XmlCtPackageCodelists,
  XmlCtPackages,
  XmlCtTerm,
  XmlRootCtCodelist,
  XmlRootCtTerm,
} from '../models/index';
import {
    CtCodelistFromJSON,
    CtCodelistToJSON,
    CtCodelistTermsFromJSON,
    CtCodelistTermsToJSON,
    CtPackageFromJSON,
    CtPackageToJSON,
    CtPackageCodelistsFromJSON,
    CtPackageCodelistsToJSON,
    CtPackagesFromJSON,
    CtPackagesToJSON,
    CtTermFromJSON,
    CtTermToJSON,
    DefaultErrorResponseFromJSON,
    DefaultErrorResponseToJSON,
    ExportCtTableFromJSON,
    ExportCtTableToJSON,
    RootCtCodelistFromJSON,
    RootCtCodelistToJSON,
    RootCtTermFromJSON,
    RootCtTermToJSON,
    XmlCtCodelistFromJSON,
    XmlCtCodelistToJSON,
    XmlCtCodelistTermsFromJSON,
    XmlCtCodelistTermsToJSON,
    XmlCtPackageFromJSON,
    XmlCtPackageToJSON,
    XmlCtPackageCodelistsFromJSON,
    XmlCtPackageCodelistsToJSON,
    XmlCtPackagesFromJSON,
    XmlCtPackagesToJSON,
    XmlCtTermFromJSON,
    XmlCtTermToJSON,
    XmlRootCtCodelistFromJSON,
    XmlRootCtCodelistToJSON,
    XmlRootCtTermFromJSON,
    XmlRootCtTermToJSON,
} from '../models/index';

export interface MdrCtPackagesPackageCodelistsCodelistGetRequest {
    _package: string;
    codelist: string;
}

export interface MdrCtPackagesPackageCodelistsCodelistTermsGetRequest {
    _package: string;
    codelist: string;
}

export interface MdrCtPackagesPackageCodelistsCodelistTermsTermGetRequest {
    _package: string;
    codelist: string;
    term: string;
}

export interface MdrCtPackagesPackageCodelistsGetRequest {
    _package: string;
}

export interface MdrCtPackagesProductGetRequest {
    product: string;
}

export interface MdrRootCtProductGroupCodelistsCodelistGetRequest {
    productGroup: string;
    codelist: string;
}

export interface MdrRootCtProductGroupCodelistsCodelistTermsTermGetRequest {
    productGroup: string;
    codelist: string;
    term: string;
}

/**
 * 
 */
export class ControlledTerminologyCTApi extends runtime.BaseAPI {

    /**
     * Get CDISC Library CT Package List
     */
    async mdrCtPackagesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CtPackages>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/ct/packages`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CtPackagesFromJSON(jsonValue));
    }

    /**
     * Get CDISC Library CT Package List
     */
    async mdrCtPackagesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CtPackages> {
        const response = await this.mdrCtPackagesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get CDISC Library CT Package Codelist
     */
    async mdrCtPackagesPackageCodelistsCodelistGetRaw(requestParameters: MdrCtPackagesPackageCodelistsCodelistGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CtCodelist>> {
        if (requestParameters['_package'] == null) {
            throw new runtime.RequiredError(
                '_package',
                'Required parameter "_package" was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistGet().'
            );
        }

        if (requestParameters['codelist'] == null) {
            throw new runtime.RequiredError(
                'codelist',
                'Required parameter "codelist" was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/ct/packages/{package}/codelists/{codelist}`;
        urlPath = urlPath.replace(`{${"package"}}`, encodeURIComponent(String(requestParameters['_package'])));
        urlPath = urlPath.replace(`{${"codelist"}}`, encodeURIComponent(String(requestParameters['codelist'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CtCodelistFromJSON(jsonValue));
    }

    /**
     * Get CDISC Library CT Package Codelist
     */
    async mdrCtPackagesPackageCodelistsCodelistGet(requestParameters: MdrCtPackagesPackageCodelistsCodelistGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CtCodelist> {
        const response = await this.mdrCtPackagesPackageCodelistsCodelistGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDISC Library CT Package Codelist Term List
     */
    async mdrCtPackagesPackageCodelistsCodelistTermsGetRaw(requestParameters: MdrCtPackagesPackageCodelistsCodelistTermsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CtCodelistTerms>> {
        if (requestParameters['_package'] == null) {
            throw new runtime.RequiredError(
                '_package',
                'Required parameter "_package" was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistTermsGet().'
            );
        }

        if (requestParameters['codelist'] == null) {
            throw new runtime.RequiredError(
                'codelist',
                'Required parameter "codelist" was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistTermsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/ct/packages/{package}/codelists/{codelist}/terms`;
        urlPath = urlPath.replace(`{${"package"}}`, encodeURIComponent(String(requestParameters['_package'])));
        urlPath = urlPath.replace(`{${"codelist"}}`, encodeURIComponent(String(requestParameters['codelist'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CtCodelistTermsFromJSON(jsonValue));
    }

    /**
     * Get CDISC Library CT Package Codelist Term List
     */
    async mdrCtPackagesPackageCodelistsCodelistTermsGet(requestParameters: MdrCtPackagesPackageCodelistsCodelistTermsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CtCodelistTerms> {
        const response = await this.mdrCtPackagesPackageCodelistsCodelistTermsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDISC Library CT Package Codelist Term
     */
    async mdrCtPackagesPackageCodelistsCodelistTermsTermGetRaw(requestParameters: MdrCtPackagesPackageCodelistsCodelistTermsTermGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CtTerm>> {
        if (requestParameters['_package'] == null) {
            throw new runtime.RequiredError(
                '_package',
                'Required parameter "_package" was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet().'
            );
        }

        if (requestParameters['codelist'] == null) {
            throw new runtime.RequiredError(
                'codelist',
                'Required parameter "codelist" was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet().'
            );
        }

        if (requestParameters['term'] == null) {
            throw new runtime.RequiredError(
                'term',
                'Required parameter "term" was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/ct/packages/{package}/codelists/{codelist}/terms/{term}`;
        urlPath = urlPath.replace(`{${"package"}}`, encodeURIComponent(String(requestParameters['_package'])));
        urlPath = urlPath.replace(`{${"codelist"}}`, encodeURIComponent(String(requestParameters['codelist'])));
        urlPath = urlPath.replace(`{${"term"}}`, encodeURIComponent(String(requestParameters['term'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CtTermFromJSON(jsonValue));
    }

    /**
     * Get CDISC Library CT Package Codelist Term
     */
    async mdrCtPackagesPackageCodelistsCodelistTermsTermGet(requestParameters: MdrCtPackagesPackageCodelistsCodelistTermsTermGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CtTerm> {
        const response = await this.mdrCtPackagesPackageCodelistsCodelistTermsTermGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDISC Library CT Package Codelist List
     */
    async mdrCtPackagesPackageCodelistsGetRaw(requestParameters: MdrCtPackagesPackageCodelistsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CtPackageCodelists>> {
        if (requestParameters['_package'] == null) {
            throw new runtime.RequiredError(
                '_package',
                'Required parameter "_package" was null or undefined when calling mdrCtPackagesPackageCodelistsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/ct/packages/{package}/codelists`;
        urlPath = urlPath.replace(`{${"package"}}`, encodeURIComponent(String(requestParameters['_package'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CtPackageCodelistsFromJSON(jsonValue));
    }

    /**
     * Get CDISC Library CT Package Codelist List
     */
    async mdrCtPackagesPackageCodelistsGet(requestParameters: MdrCtPackagesPackageCodelistsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CtPackageCodelists> {
        const response = await this.mdrCtPackagesPackageCodelistsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDISC Library CT Package
     */
    async mdrCtPackagesProductGetRaw(requestParameters: MdrCtPackagesProductGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CtPackage>> {
        if (requestParameters['product'] == null) {
            throw new runtime.RequiredError(
                'product',
                'Required parameter "product" was null or undefined when calling mdrCtPackagesProductGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/ct/packages/{product}`;
        urlPath = urlPath.replace(`{${"product"}}`, encodeURIComponent(String(requestParameters['product'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CtPackageFromJSON(jsonValue));
    }

    /**
     * Get CDISC Library CT Package
     */
    async mdrCtPackagesProductGet(requestParameters: MdrCtPackagesProductGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CtPackage> {
        const response = await this.mdrCtPackagesProductGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDISC Library Root CT Codelist
     */
    async mdrRootCtProductGroupCodelistsCodelistGetRaw(requestParameters: MdrRootCtProductGroupCodelistsCodelistGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootCtCodelist>> {
        if (requestParameters['productGroup'] == null) {
            throw new runtime.RequiredError(
                'productGroup',
                'Required parameter "productGroup" was null or undefined when calling mdrRootCtProductGroupCodelistsCodelistGet().'
            );
        }

        if (requestParameters['codelist'] == null) {
            throw new runtime.RequiredError(
                'codelist',
                'Required parameter "codelist" was null or undefined when calling mdrRootCtProductGroupCodelistsCodelistGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/root/ct/{productGroup}/codelists/{codelist}`;
        urlPath = urlPath.replace(`{${"productGroup"}}`, encodeURIComponent(String(requestParameters['productGroup'])));
        urlPath = urlPath.replace(`{${"codelist"}}`, encodeURIComponent(String(requestParameters['codelist'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RootCtCodelistFromJSON(jsonValue));
    }

    /**
     * Get CDISC Library Root CT Codelist
     */
    async mdrRootCtProductGroupCodelistsCodelistGet(requestParameters: MdrRootCtProductGroupCodelistsCodelistGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootCtCodelist> {
        const response = await this.mdrRootCtProductGroupCodelistsCodelistGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get CDISC Library Root CT Term
     */
    async mdrRootCtProductGroupCodelistsCodelistTermsTermGetRaw(requestParameters: MdrRootCtProductGroupCodelistsCodelistTermsTermGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RootCtTerm>> {
        if (requestParameters['productGroup'] == null) {
            throw new runtime.RequiredError(
                'productGroup',
                'Required parameter "productGroup" was null or undefined when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet().'
            );
        }

        if (requestParameters['codelist'] == null) {
            throw new runtime.RequiredError(
                'codelist',
                'Required parameter "codelist" was null or undefined when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet().'
            );
        }

        if (requestParameters['term'] == null) {
            throw new runtime.RequiredError(
                'term',
                'Required parameter "term" was null or undefined when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/root/ct/{productGroup}/codelists/{codelist}/terms/{term}`;
        urlPath = urlPath.replace(`{${"productGroup"}}`, encodeURIComponent(String(requestParameters['productGroup'])));
        urlPath = urlPath.replace(`{${"codelist"}}`, encodeURIComponent(String(requestParameters['codelist'])));
        urlPath = urlPath.replace(`{${"term"}}`, encodeURIComponent(String(requestParameters['term'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RootCtTermFromJSON(jsonValue));
    }

    /**
     * Get CDISC Library Root CT Term
     */
    async mdrRootCtProductGroupCodelistsCodelistTermsTermGet(requestParameters: MdrRootCtProductGroupCodelistsCodelistTermsTermGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RootCtTerm> {
        const response = await this.mdrRootCtProductGroupCodelistsCodelistTermsTermGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

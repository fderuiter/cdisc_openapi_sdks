/* tslint:disable */
/* eslint-disable */
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdamDatastructure,
  AdamDatastructureVariables,
  AdamDatastructureVarsets,
  AdamProduct,
  AdamProductDatastructures,
  AdamVariable,
  AdamVarset,
  DefaultErrorResponse,
  ExportAdamDatastructuresTable,
  ExportAdamVariablesTable,
  ExportAdamWorkbook,
  XmlAdamDatastructure,
  XmlAdamDatastructureVariables,
  XmlAdamDatastructureVarsets,
  XmlAdamProduct,
  XmlAdamProductDatastructures,
  XmlAdamVariable,
  XmlAdamVarset,
} from '../models/index';
import {
    AdamDatastructureFromJSON,
    AdamDatastructureToJSON,
    AdamDatastructureVariablesFromJSON,
    AdamDatastructureVariablesToJSON,
    AdamDatastructureVarsetsFromJSON,
    AdamDatastructureVarsetsToJSON,
    AdamProductFromJSON,
    AdamProductToJSON,
    AdamProductDatastructuresFromJSON,
    AdamProductDatastructuresToJSON,
    AdamVariableFromJSON,
    AdamVariableToJSON,
    AdamVarsetFromJSON,
    AdamVarsetToJSON,
    DefaultErrorResponseFromJSON,
    DefaultErrorResponseToJSON,
    ExportAdamDatastructuresTableFromJSON,
    ExportAdamDatastructuresTableToJSON,
    ExportAdamVariablesTableFromJSON,
    ExportAdamVariablesTableToJSON,
    ExportAdamWorkbookFromJSON,
    ExportAdamWorkbookToJSON,
    XmlAdamDatastructureFromJSON,
    XmlAdamDatastructureToJSON,
    XmlAdamDatastructureVariablesFromJSON,
    XmlAdamDatastructureVariablesToJSON,
    XmlAdamDatastructureVarsetsFromJSON,
    XmlAdamDatastructureVarsetsToJSON,
    XmlAdamProductFromJSON,
    XmlAdamProductToJSON,
    XmlAdamProductDatastructuresFromJSON,
    XmlAdamProductDatastructuresToJSON,
    XmlAdamVariableFromJSON,
    XmlAdamVariableToJSON,
    XmlAdamVarsetFromJSON,
    XmlAdamVarsetToJSON,
} from '../models/index';

export interface MdrAdamProductDatastructuresGetRequest {
    product: string;
}

export interface MdrAdamProductDatastructuresStructureGetRequest {
    product: string;
    structure: string;
}

export interface MdrAdamProductDatastructuresStructureVariablesGetRequest {
    product: string;
    structure: string;
}

export interface MdrAdamProductDatastructuresStructureVariablesVarGetRequest {
    product: string;
    structure: string;
    _var: string;
}

export interface MdrAdamProductDatastructuresStructureVarsetsGetRequest {
    product: string;
    structure: string;
}

export interface MdrAdamProductDatastructuresStructureVarsetsVarsetGetRequest {
    product: string;
    structure: string;
    varset: string;
}

export interface MdrAdamProductGetRequest {
    product: string;
}

/**
 * 
 */
export class AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi extends runtime.BaseAPI {

    /**
     * Get ADaM Data Structure List
     */
    async mdrAdamProductDatastructuresGetRaw(requestParameters: MdrAdamProductDatastructuresGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdamProductDatastructures>> {
        if (requestParameters['product'] == null) {
            throw new runtime.RequiredError(
                'product',
                'Required parameter "product" was null or undefined when calling mdrAdamProductDatastructuresGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/adam/{product}/datastructures`;
        urlPath = urlPath.replace(`{${"product"}}`, encodeURIComponent(String(requestParameters['product'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdamProductDatastructuresFromJSON(jsonValue));
    }

    /**
     * Get ADaM Data Structure List
     */
    async mdrAdamProductDatastructuresGet(requestParameters: MdrAdamProductDatastructuresGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdamProductDatastructures> {
        const response = await this.mdrAdamProductDatastructuresGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get ADaM Data Structure
     */
    async mdrAdamProductDatastructuresStructureGetRaw(requestParameters: MdrAdamProductDatastructuresStructureGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdamDatastructure>> {
        if (requestParameters['product'] == null) {
            throw new runtime.RequiredError(
                'product',
                'Required parameter "product" was null or undefined when calling mdrAdamProductDatastructuresStructureGet().'
            );
        }

        if (requestParameters['structure'] == null) {
            throw new runtime.RequiredError(
                'structure',
                'Required parameter "structure" was null or undefined when calling mdrAdamProductDatastructuresStructureGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/adam/{product}/datastructures/{structure}`;
        urlPath = urlPath.replace(`{${"product"}}`, encodeURIComponent(String(requestParameters['product'])));
        urlPath = urlPath.replace(`{${"structure"}}`, encodeURIComponent(String(requestParameters['structure'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdamDatastructureFromJSON(jsonValue));
    }

    /**
     * Get ADaM Data Structure
     */
    async mdrAdamProductDatastructuresStructureGet(requestParameters: MdrAdamProductDatastructuresStructureGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdamDatastructure> {
        const response = await this.mdrAdamProductDatastructuresStructureGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get ADaM Variable List
     */
    async mdrAdamProductDatastructuresStructureVariablesGetRaw(requestParameters: MdrAdamProductDatastructuresStructureVariablesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdamDatastructureVariables>> {
        if (requestParameters['product'] == null) {
            throw new runtime.RequiredError(
                'product',
                'Required parameter "product" was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesGet().'
            );
        }

        if (requestParameters['structure'] == null) {
            throw new runtime.RequiredError(
                'structure',
                'Required parameter "structure" was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/adam/{product}/datastructures/{structure}/variables`;
        urlPath = urlPath.replace(`{${"product"}}`, encodeURIComponent(String(requestParameters['product'])));
        urlPath = urlPath.replace(`{${"structure"}}`, encodeURIComponent(String(requestParameters['structure'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdamDatastructureVariablesFromJSON(jsonValue));
    }

    /**
     * Get ADaM Variable List
     */
    async mdrAdamProductDatastructuresStructureVariablesGet(requestParameters: MdrAdamProductDatastructuresStructureVariablesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdamDatastructureVariables> {
        const response = await this.mdrAdamProductDatastructuresStructureVariablesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get ADaM Variable
     */
    async mdrAdamProductDatastructuresStructureVariablesVarGetRaw(requestParameters: MdrAdamProductDatastructuresStructureVariablesVarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdamVariable>> {
        if (requestParameters['product'] == null) {
            throw new runtime.RequiredError(
                'product',
                'Required parameter "product" was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesVarGet().'
            );
        }

        if (requestParameters['structure'] == null) {
            throw new runtime.RequiredError(
                'structure',
                'Required parameter "structure" was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesVarGet().'
            );
        }

        if (requestParameters['_var'] == null) {
            throw new runtime.RequiredError(
                '_var',
                'Required parameter "_var" was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesVarGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/adam/{product}/datastructures/{structure}/variables/{var}`;
        urlPath = urlPath.replace(`{${"product"}}`, encodeURIComponent(String(requestParameters['product'])));
        urlPath = urlPath.replace(`{${"structure"}}`, encodeURIComponent(String(requestParameters['structure'])));
        urlPath = urlPath.replace(`{${"var"}}`, encodeURIComponent(String(requestParameters['_var'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdamVariableFromJSON(jsonValue));
    }

    /**
     * Get ADaM Variable
     */
    async mdrAdamProductDatastructuresStructureVariablesVarGet(requestParameters: MdrAdamProductDatastructuresStructureVariablesVarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdamVariable> {
        const response = await this.mdrAdamProductDatastructuresStructureVariablesVarGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get ADaM Variable Set List
     */
    async mdrAdamProductDatastructuresStructureVarsetsGetRaw(requestParameters: MdrAdamProductDatastructuresStructureVarsetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdamDatastructureVarsets>> {
        if (requestParameters['product'] == null) {
            throw new runtime.RequiredError(
                'product',
                'Required parameter "product" was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsGet().'
            );
        }

        if (requestParameters['structure'] == null) {
            throw new runtime.RequiredError(
                'structure',
                'Required parameter "structure" was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/adam/{product}/datastructures/{structure}/varsets`;
        urlPath = urlPath.replace(`{${"product"}}`, encodeURIComponent(String(requestParameters['product'])));
        urlPath = urlPath.replace(`{${"structure"}}`, encodeURIComponent(String(requestParameters['structure'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdamDatastructureVarsetsFromJSON(jsonValue));
    }

    /**
     * Get ADaM Variable Set List
     */
    async mdrAdamProductDatastructuresStructureVarsetsGet(requestParameters: MdrAdamProductDatastructuresStructureVarsetsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdamDatastructureVarsets> {
        const response = await this.mdrAdamProductDatastructuresStructureVarsetsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get ADaM Variable Set
     */
    async mdrAdamProductDatastructuresStructureVarsetsVarsetGetRaw(requestParameters: MdrAdamProductDatastructuresStructureVarsetsVarsetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdamVarset>> {
        if (requestParameters['product'] == null) {
            throw new runtime.RequiredError(
                'product',
                'Required parameter "product" was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet().'
            );
        }

        if (requestParameters['structure'] == null) {
            throw new runtime.RequiredError(
                'structure',
                'Required parameter "structure" was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet().'
            );
        }

        if (requestParameters['varset'] == null) {
            throw new runtime.RequiredError(
                'varset',
                'Required parameter "varset" was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/adam/{product}/datastructures/{structure}/varsets/{varset}`;
        urlPath = urlPath.replace(`{${"product"}}`, encodeURIComponent(String(requestParameters['product'])));
        urlPath = urlPath.replace(`{${"structure"}}`, encodeURIComponent(String(requestParameters['structure'])));
        urlPath = urlPath.replace(`{${"varset"}}`, encodeURIComponent(String(requestParameters['varset'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdamVarsetFromJSON(jsonValue));
    }

    /**
     * Get ADaM Variable Set
     */
    async mdrAdamProductDatastructuresStructureVarsetsVarsetGet(requestParameters: MdrAdamProductDatastructuresStructureVarsetsVarsetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdamVarset> {
        const response = await this.mdrAdamProductDatastructuresStructureVarsetsVarsetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get ADaM Product
     */
    async mdrAdamProductGetRaw(requestParameters: MdrAdamProductGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdamProduct>> {
        if (requestParameters['product'] == null) {
            throw new runtime.RequiredError(
                'product',
                'Required parameter "product" was null or undefined when calling mdrAdamProductGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }

        let urlPath = `/mdr/adam/{product}`;
        urlPath = urlPath.replace(`{${"product"}}`, encodeURIComponent(String(requestParameters['product'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdamProductFromJSON(jsonValue));
    }

    /**
     * Get ADaM Product
     */
    async mdrAdamProductGet(requestParameters: MdrAdamProductGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdamProduct> {
        const response = await this.mdrAdamProductGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi_H
#define OAI_OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdamDatastructure.h"
#include "OAIAdamDatastructureVariables.h"
#include "OAIAdamDatastructureVarsets.h"
#include "OAIAdamProduct.h"
#include "OAIAdamProductDatastructures.h"
#include "OAIAdamVariable.h"
#include "OAIAdamVarset.h"
#include "OAIDefaultErrorResponse.h"
#include "OAIExportAdamDatastructuresTable.h"
#include "OAIExportAdamVariablesTable.h"
#include "OAIExportAdamWorkbook.h"
#include "OAIXmlAdamDatastructure.h"
#include "OAIXmlAdamDatastructureVariables.h"
#include "OAIXmlAdamDatastructureVarsets.h"
#include "OAIXmlAdamProduct.h"
#include "OAIXmlAdamProductDatastructures.h"
#include "OAIXmlAdamVariable.h"
#include "OAIXmlAdamVarset.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi : public QObject {
    Q_OBJECT

public:
    OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi(const int timeOut = 0);
    ~OAIAnalysisDataModelAndImplementationGuideADaMAndADaMIGApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  product QString [required]
    */
    virtual void mdrAdamProductDatastructuresGet(const QString &product);

    /**
    * @param[in]  product QString [required]
    * @param[in]  structure QString [required]
    */
    virtual void mdrAdamProductDatastructuresStructureGet(const QString &product, const QString &structure);

    /**
    * @param[in]  product QString [required]
    * @param[in]  structure QString [required]
    */
    virtual void mdrAdamProductDatastructuresStructureVariablesGet(const QString &product, const QString &structure);

    /**
    * @param[in]  product QString [required]
    * @param[in]  structure QString [required]
    * @param[in]  var QString [required]
    */
    virtual void mdrAdamProductDatastructuresStructureVariablesVarGet(const QString &product, const QString &structure, const QString &var);

    /**
    * @param[in]  product QString [required]
    * @param[in]  structure QString [required]
    */
    virtual void mdrAdamProductDatastructuresStructureVarsetsGet(const QString &product, const QString &structure);

    /**
    * @param[in]  product QString [required]
    * @param[in]  structure QString [required]
    * @param[in]  varset QString [required]
    */
    virtual void mdrAdamProductDatastructuresStructureVarsetsVarsetGet(const QString &product, const QString &structure, const QString &varset);

    /**
    * @param[in]  product QString [required]
    */
    virtual void mdrAdamProductGet(const QString &product);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void mdrAdamProductDatastructuresGetCallback(OAIHttpRequestWorker *worker);
    void mdrAdamProductDatastructuresStructureGetCallback(OAIHttpRequestWorker *worker);
    void mdrAdamProductDatastructuresStructureVariablesGetCallback(OAIHttpRequestWorker *worker);
    void mdrAdamProductDatastructuresStructureVariablesVarGetCallback(OAIHttpRequestWorker *worker);
    void mdrAdamProductDatastructuresStructureVarsetsGetCallback(OAIHttpRequestWorker *worker);
    void mdrAdamProductDatastructuresStructureVarsetsVarsetGetCallback(OAIHttpRequestWorker *worker);
    void mdrAdamProductGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void mdrAdamProductDatastructuresGetSignal(OAIAdamProductDatastructures summary);
    void mdrAdamProductDatastructuresStructureGetSignal(OAIAdamDatastructure summary);
    void mdrAdamProductDatastructuresStructureVariablesGetSignal(OAIAdamDatastructureVariables summary);
    void mdrAdamProductDatastructuresStructureVariablesVarGetSignal(OAIAdamVariable summary);
    void mdrAdamProductDatastructuresStructureVarsetsGetSignal(OAIAdamDatastructureVarsets summary);
    void mdrAdamProductDatastructuresStructureVarsetsVarsetGetSignal(OAIAdamVarset summary);
    void mdrAdamProductGetSignal(OAIAdamProduct summary);


    void mdrAdamProductDatastructuresGetSignalFull(OAIHttpRequestWorker *worker, OAIAdamProductDatastructures summary);
    void mdrAdamProductDatastructuresStructureGetSignalFull(OAIHttpRequestWorker *worker, OAIAdamDatastructure summary);
    void mdrAdamProductDatastructuresStructureVariablesGetSignalFull(OAIHttpRequestWorker *worker, OAIAdamDatastructureVariables summary);
    void mdrAdamProductDatastructuresStructureVariablesVarGetSignalFull(OAIHttpRequestWorker *worker, OAIAdamVariable summary);
    void mdrAdamProductDatastructuresStructureVarsetsGetSignalFull(OAIHttpRequestWorker *worker, OAIAdamDatastructureVarsets summary);
    void mdrAdamProductDatastructuresStructureVarsetsVarsetGetSignalFull(OAIHttpRequestWorker *worker, OAIAdamVarset summary);
    void mdrAdamProductGetSignalFull(OAIHttpRequestWorker *worker, OAIAdamProduct summary);

    Q_DECL_DEPRECATED_X("Use mdrAdamProductDatastructuresGetSignalError() instead")
    void mdrAdamProductDatastructuresGetSignalE(OAIAdamProductDatastructures summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrAdamProductDatastructuresGetSignalError(OAIAdamProductDatastructures summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrAdamProductDatastructuresStructureGetSignalError() instead")
    void mdrAdamProductDatastructuresStructureGetSignalE(OAIAdamDatastructure summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrAdamProductDatastructuresStructureGetSignalError(OAIAdamDatastructure summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrAdamProductDatastructuresStructureVariablesGetSignalError() instead")
    void mdrAdamProductDatastructuresStructureVariablesGetSignalE(OAIAdamDatastructureVariables summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrAdamProductDatastructuresStructureVariablesGetSignalError(OAIAdamDatastructureVariables summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrAdamProductDatastructuresStructureVariablesVarGetSignalError() instead")
    void mdrAdamProductDatastructuresStructureVariablesVarGetSignalE(OAIAdamVariable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrAdamProductDatastructuresStructureVariablesVarGetSignalError(OAIAdamVariable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrAdamProductDatastructuresStructureVarsetsGetSignalError() instead")
    void mdrAdamProductDatastructuresStructureVarsetsGetSignalE(OAIAdamDatastructureVarsets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrAdamProductDatastructuresStructureVarsetsGetSignalError(OAIAdamDatastructureVarsets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrAdamProductDatastructuresStructureVarsetsVarsetGetSignalError() instead")
    void mdrAdamProductDatastructuresStructureVarsetsVarsetGetSignalE(OAIAdamVarset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrAdamProductDatastructuresStructureVarsetsVarsetGetSignalError(OAIAdamVarset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrAdamProductGetSignalError() instead")
    void mdrAdamProductGetSignalE(OAIAdamProduct summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrAdamProductGetSignalError(OAIAdamProduct summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use mdrAdamProductDatastructuresGetSignalErrorFull() instead")
    void mdrAdamProductDatastructuresGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrAdamProductDatastructuresGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrAdamProductDatastructuresStructureGetSignalErrorFull() instead")
    void mdrAdamProductDatastructuresStructureGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrAdamProductDatastructuresStructureGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrAdamProductDatastructuresStructureVariablesGetSignalErrorFull() instead")
    void mdrAdamProductDatastructuresStructureVariablesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrAdamProductDatastructuresStructureVariablesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrAdamProductDatastructuresStructureVariablesVarGetSignalErrorFull() instead")
    void mdrAdamProductDatastructuresStructureVariablesVarGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrAdamProductDatastructuresStructureVariablesVarGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrAdamProductDatastructuresStructureVarsetsGetSignalErrorFull() instead")
    void mdrAdamProductDatastructuresStructureVarsetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrAdamProductDatastructuresStructureVarsetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrAdamProductDatastructuresStructureVarsetsVarsetGetSignalErrorFull() instead")
    void mdrAdamProductDatastructuresStructureVarsetsVarsetGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrAdamProductDatastructuresStructureVarsetsVarsetGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrAdamProductGetSignalErrorFull() instead")
    void mdrAdamProductGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrAdamProductGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif

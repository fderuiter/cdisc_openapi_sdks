# NOTE: This file is auto generated by OpenAPI Generator 7.16.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule CDISCLibraryAPI.Api.ControlledTerminologyCT do
  @moduledoc """
  API calls for all endpoints tagged `ControlledTerminologyCT`.
  """

  alias CDISCLibraryAPI.Connection
  import CDISCLibraryAPI.RequestBuilder

  @doc """
  Get CDISC Library CT Package List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CtPackages.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_ct_packages_get(Tesla.Env.client, keyword()) :: {:ok, CDISCLibraryAPI.Model.CtPackages.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_ct_packages_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/ct/packages")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CtPackages},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDISC Library CT Package Codelist

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `package` (String.t): CT Package Identifier
  - `codelist` (String.t): CT Codelist Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CtCodelist.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_ct_packages_package_codelists_codelist_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.CtCodelist.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_ct_packages_package_codelists_codelist_get(connection, package, codelist, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/ct/packages/#{package}/codelists/#{codelist}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CtCodelist},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDISC Library CT Package Codelist Term List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `package` (String.t): CT Package Identifier
  - `codelist` (String.t): CT Codelist Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CtCodelistTerms.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_ct_packages_package_codelists_codelist_terms_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.CtCodelistTerms.t} | {:error, Tesla.Env.t}
  def mdr_ct_packages_package_codelists_codelist_terms_get(connection, package, codelist, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/ct/packages/#{package}/codelists/#{codelist}/terms")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CtCodelistTerms},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDISC Library CT Package Codelist Term

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `package` (String.t): CT Package Product Identifier
  - `codelist` (String.t): CT Codelist Identifier
  - `term` (String.t): CT Codelist Term Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CtTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_ct_packages_package_codelists_codelist_terms_term_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.CtTerm.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_ct_packages_package_codelists_codelist_terms_term_get(connection, package, codelist, term, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/ct/packages/#{package}/codelists/#{codelist}/terms/#{term}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CtTerm},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDISC Library CT Package Codelist List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `package` (String.t): CT Package Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CtPackageCodelists.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_ct_packages_package_codelists_get(Tesla.Env.client, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.CtPackageCodelists.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_ct_packages_package_codelists_get(connection, package, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/ct/packages/#{package}/codelists")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CtPackageCodelists},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDISC Library CT Package

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `product` (String.t): CT Package Product Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CtPackage.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_ct_packages_product_get(Tesla.Env.client, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.CtPackage.t} | {:error, Tesla.Env.t}
  def mdr_ct_packages_product_get(connection, product, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/ct/packages/#{product}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CtPackage},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDISC Library Root CT Codelist

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `product_group` (String.t): CT Product Group Identifier
  - `codelist` (String.t): CT Codelist Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.RootCtCodelist.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_root_ct_product_group_codelists_codelist_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.RootCtCodelist.t} | {:error, Tesla.Env.t}
  def mdr_root_ct_product_group_codelists_codelist_get(connection, product_group, codelist, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/root/ct/#{product_group}/codelists/#{codelist}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.RootCtCodelist},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDISC Library Root CT Term

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `product_group` (String.t): CT Product Group Identifier
  - `codelist` (String.t): CT Codelist Identifier
  - `term` (String.t): CT Codelist Term Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.RootCtTerm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_root_ct_product_group_codelists_codelist_terms_term_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.RootCtTerm.t} | {:error, Tesla.Env.t}
  def mdr_root_ct_product_group_codelists_codelist_terms_term_get(connection, product_group, codelist, term, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/root/ct/#{product_group}/codelists/#{codelist}/terms/#{term}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.RootCtTerm},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end
end

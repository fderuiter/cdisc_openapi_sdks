# NOTE: This file is auto generated by OpenAPI Generator 7.16.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule CDISCLibraryAPI.Api.AnalysisDataModelAndImplementationGuideADaMAndADaMIG do
  @moduledoc """
  API calls for all endpoints tagged `AnalysisDataModelAndImplementationGuideADaMAndADaMIG`.
  """

  alias CDISCLibraryAPI.Connection
  import CDISCLibraryAPI.RequestBuilder

  @doc """
  Get ADaM Data Structure List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `product` (String.t): CDISC Library Product
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.AdamProductDatastructures.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_adam_product_datastructures_get(Tesla.Env.client, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.AdamProductDatastructures.t} | {:error, Tesla.Env.t}
  def mdr_adam_product_datastructures_get(connection, product, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/adam/#{product}/datastructures")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.AdamProductDatastructures},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get ADaM Data Structure

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `product` (String.t): CDISC Library Product
  - `structure` (String.t): Data structure Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.AdamDatastructure.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_adam_product_datastructures_structure_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.AdamDatastructure.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_adam_product_datastructures_structure_get(connection, product, structure, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/adam/#{product}/datastructures/#{structure}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.AdamDatastructure},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get ADaM Variable List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `product` (String.t): CDISC Library Product
  - `structure` (String.t): ADaM Data Structure Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.AdamDatastructureVariables.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_adam_product_datastructures_structure_variables_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.AdamDatastructureVariables.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_adam_product_datastructures_structure_variables_get(connection, product, structure, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/adam/#{product}/datastructures/#{structure}/variables")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.AdamDatastructureVariables},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get ADaM Variable

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `product` (String.t): CDISC Library Product
  - `structure` (String.t): ADaM Data Structure Identifier
  - `var` (String.t): ADaM Variable Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.AdamVariable.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_adam_product_datastructures_structure_variables_var_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.AdamVariable.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_adam_product_datastructures_structure_variables_var_get(connection, product, structure, var, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/adam/#{product}/datastructures/#{structure}/variables/#{var}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.AdamVariable},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get ADaM Variable Set List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `product` (String.t): CDISC Library Product
  - `structure` (String.t): ADaM Data Structure Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.AdamDatastructureVarsets.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_adam_product_datastructures_structure_varsets_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.AdamDatastructureVarsets.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_adam_product_datastructures_structure_varsets_get(connection, product, structure, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/adam/#{product}/datastructures/#{structure}/varsets")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.AdamDatastructureVarsets},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get ADaM Variable Set

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `product` (String.t): CDISC Library Product
  - `structure` (String.t): ADaM Data Structure Identifier
  - `varset` (String.t): ADaM Variable Set Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.AdamVarset.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_adam_product_datastructures_structure_varsets_varset_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.AdamVarset.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_adam_product_datastructures_structure_varsets_varset_get(connection, product, structure, varset, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/adam/#{product}/datastructures/#{structure}/varsets/#{varset}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.AdamVarset},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get ADaM Product

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `product` (String.t): CDISC Library Product
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.AdamProduct.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_adam_product_get(Tesla.Env.client, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.AdamProduct.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_adam_product_get(connection, product, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/adam/#{product}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.AdamProduct},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end
end

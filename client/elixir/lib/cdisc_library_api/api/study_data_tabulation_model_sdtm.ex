# NOTE: This file is auto generated by OpenAPI Generator 7.16.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule CDISCLibraryAPI.Api.StudyDataTabulationModelSDTM do
  @moduledoc """
  API calls for all endpoints tagged `StudyDataTabulationModelSDTM`.
  """

  alias CDISCLibraryAPI.Connection
  import CDISCLibraryAPI.RequestBuilder

  @doc """
  Get Root of SDTM Class Variable

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `class` (String.t): SDTM Class Identifier
  - `var` (String.t): SDTM Variable Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.RootSdtmClassVariable.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_root_sdtm_classes_class_variables_var_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.RootSdtmClassVariable.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_root_sdtm_classes_class_variables_var_get(connection, class, var, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/root/sdtm/classes/#{class}/variables/#{var}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.RootSdtmClassVariable},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get Root SDTM Dataset Variable

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `dataset` (String.t): SDTM Dataset Identifier
  - `var` (String.t): SDTM Variable Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.RootSdtmDatasetVariable.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_root_sdtm_datasets_dataset_variables_var_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.RootSdtmDatasetVariable.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_root_sdtm_datasets_dataset_variables_var_get(connection, dataset, var, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/root/sdtm/datasets/#{dataset}/variables/#{var}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.RootSdtmDatasetVariable},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SDTM Class Dataset List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `class` (String.t): SDTM Class Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SdtmClassDatasets.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sdtm_version_classes_class_datasets_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.SdtmClassDatasets.t} | {:error, Tesla.Env.t}
  def mdr_sdtm_version_classes_class_datasets_get(connection, version, class, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sdtm/#{version}/classes/#{class}/datasets")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SdtmClassDatasets},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SDTM Class

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `class` (String.t): SDTM Class Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SdtmClass.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sdtm_version_classes_class_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.SdtmClass.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_sdtm_version_classes_class_get(connection, version, class, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sdtm/#{version}/classes/#{class}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SdtmClass},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SDTM Class Variable List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `class` (String.t): SDTM Class Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SdtmClassVariables.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sdtm_version_classes_class_variables_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.SdtmClassVariables.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_sdtm_version_classes_class_variables_get(connection, version, class, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sdtm/#{version}/classes/#{class}/variables")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SdtmClassVariables},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SDTM Class Variable

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `class` (String.t): SDTM Class Identifier
  - `var` (String.t): SDTM Variable Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SdtmClassVariable.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sdtm_version_classes_class_variables_var_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.SdtmClassVariable.t} | {:error, Tesla.Env.t}
  def mdr_sdtm_version_classes_class_variables_var_get(connection, version, class, var, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sdtm/#{version}/classes/#{class}/variables/#{var}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SdtmClassVariable},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SDTM Class List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SdtmClasses.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sdtm_version_classes_get(Tesla.Env.client, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.SdtmClasses.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_sdtm_version_classes_get(connection, version, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sdtm/#{version}/classes")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SdtmClasses},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SDTM Dataset

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `dataset` (String.t): SDTM Dataset Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SdtmDataset.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sdtm_version_datasets_dataset_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.SdtmDataset.t} | {:error, Tesla.Env.t}
  def mdr_sdtm_version_datasets_dataset_get(connection, version, dataset, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sdtm/#{version}/datasets/#{dataset}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SdtmDataset},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SDTM Dataset Variable List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `dataset` (String.t): SDTM Dataset Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SdtmDatasetVariables.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sdtm_version_datasets_dataset_variables_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.SdtmDatasetVariables.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_sdtm_version_datasets_dataset_variables_get(connection, version, dataset, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sdtm/#{version}/datasets/#{dataset}/variables")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SdtmDatasetVariables},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SDTM Dataset Variable

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `dataset` (String.t): SDTM Dataset Identifier
  - `var` (String.t): SDTM Variable Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SdtmDatasetVariable.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sdtm_version_datasets_dataset_variables_var_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.SdtmDatasetVariable.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_sdtm_version_datasets_dataset_variables_var_get(connection, version, dataset, var, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sdtm/#{version}/datasets/#{dataset}/variables/#{var}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SdtmDatasetVariable},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SDTM Dataset List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SdtmDatasets.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sdtm_version_datasets_get(Tesla.Env.client, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.SdtmDatasets.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_sdtm_version_datasets_get(connection, version, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sdtm/#{version}/datasets")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SdtmDatasets},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get SDTM product

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.SdtmProduct.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_sdtm_version_get(Tesla.Env.client, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.SdtmProduct.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_sdtm_version_get(connection, version, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/sdtm/#{version}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.SdtmProduct},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end
end

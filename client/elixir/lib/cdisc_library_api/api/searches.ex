# NOTE: This file is auto generated by OpenAPI Generator 7.16.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule CDISCLibraryAPI.Api.Searches do
  @moduledoc """
  API calls for all endpoints tagged `Searches`.
  """

  alias CDISCLibraryAPI.Connection
  import CDISCLibraryAPI.RequestBuilder

  @doc """
  Get Search Results Across CDISC Library

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `q` (String.t): Search Term Expression
  - `opts` (keyword): Optional parameters
    - `:highlight` (String.t): Search Highlight Expression
    - `:start` (number()): Initial Search Result Index
    - `:pageSize` (number()): Number of Search Results to Return
    - `:class` (String.t): Limit Search by Setting Scope to Class
    - `:codelist` (String.t): Limit Search by Setting Scope to Codelist
    - `:conceptId` (String.t): Limit Search by Setting Scope to Concept ID
    - `:core` (String.t): Limit Search by Setting Scope to Core
    - `:dataStructure` (String.t): Limit Search by Setting Scope to Data Structure
    - `:datasetStructure` (String.t): Limit Search by Setting Scope to Dataset Structure
    - `:definition` (String.t): Limit Search by Setting Scope to Definition
    - `:description` (String.t): Limit Search by Setting Scope to Description
    - `:domain` (String.t): Limit Search by Setting Scope to Domain
    - `:effectiveDate` (String.t): Limit Search by Setting Scope to Effective Date
    - `:extensible` (String.t): Limit Search by Setting Scope to Extensible
    - `:href` (String.t): Limit Search by Setting Scope to Href
    - `:label` (String.t): Limit Search by Setting Scope to Label
    - `:measureType` (String.t): SLimit Search by Setting Scope to Measure Type
    - `:name` (String.t): Limit Search by Setting Scope to Name
    - `:preferredTerm` (String.t): Limit Search by Setting Scope to Preferred Term
    - `:product` (String.t): Limit Search by Setting Scope to Product
    - `:productGroup` (String.t): Limit Search by Setting Scope to Product Group
    - `:registrationStatus` (String.t): Limit Search by Setting Scope to Registration Status
    - `:roleDescription` (String.t): Limit Search by Setting Scope to Role Description
    - `:sdtmTarget` (String.t): Limit Search by Setting Scope to SDTM Target
    - `:simpleDatatype` (String.t): Limit Search by Setting Scope to Simple Datatype
    - `:submissionValue` (String.t): Limit Search by Setting Scope to Submission Value
    - `:synonyms` (String.t): Limit Search by Setting Scope to Synonyms
    - `:type` (String.t): Limit Search by Setting Scope to Type
    - `:uiHref` (String.t): Limit Search by Setting Scope to UI Href
    - `:valueDomain` (String.t): Limit Search by Setting Scope to Value Domain
    - `:variableSet` (String.t): Limit Search by Setting Scope to Variable Set
    - `:version` (String.t): Limit Search by Setting Scope to Version

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.DefaultSearchResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_search_get(Tesla.Env.client, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultSearchResponse.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_search_get(connection, q, opts \\ []) do
    optional_params = %{
      :highlight => :query,
      :start => :query,
      :pageSize => :query,
      :class => :query,
      :codelist => :query,
      :conceptId => :query,
      :core => :query,
      :dataStructure => :query,
      :datasetStructure => :query,
      :definition => :query,
      :description => :query,
      :domain => :query,
      :effectiveDate => :query,
      :extensible => :query,
      :href => :query,
      :label => :query,
      :measureType => :query,
      :name => :query,
      :preferredTerm => :query,
      :product => :query,
      :productGroup => :query,
      :registrationStatus => :query,
      :roleDescription => :query,
      :sdtmTarget => :query,
      :simpleDatatype => :query,
      :submissionValue => :query,
      :synonyms => :query,
      :type => :query,
      :uiHref => :query,
      :valueDomain => :query,
      :variableSet => :query,
      :version => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/mdr/search")
      |> add_param(:query, :q, q)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.DefaultSearchResponse},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get Search Results Across CDISC Library

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.MdrSearchScopesGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_search_scopes_get(Tesla.Env.client, keyword()) :: {:ok, CDISCLibraryAPI.Model.MdrSearchScopesGet200Response.t} | {:error, Tesla.Env.t}
  def mdr_search_scopes_get(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/search/scopes")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.MdrSearchScopesGet200Response}
    ])
  end

  @doc """
  Get Search Results Limited to Scope

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `scope` (DefaultSearchScopes): Search Scope
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.ScopeValues.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_search_scopes_scope_get(Tesla.Env.client, CDISCLibraryAPI.Model.DefaultSearchScopes.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.ScopeValues.t} | {:error, Tesla.Env.t}
  def mdr_search_scopes_scope_get(connection, scope, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/search/scopes/#{scope}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.ScopeValues}
    ])
  end
end

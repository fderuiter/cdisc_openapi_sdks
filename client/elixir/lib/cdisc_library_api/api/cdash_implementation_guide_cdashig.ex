# NOTE: This file is auto generated by OpenAPI Generator 7.16.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule CDISCLibraryAPI.Api.CDASHImplementationGuideCDASHIG do
  @moduledoc """
  API calls for all endpoints tagged `CDASHImplementationGuideCDASHIG`.
  """

  alias CDISCLibraryAPI.Connection
  import CDISCLibraryAPI.RequestBuilder

  @doc """
  Get CDASHIG Class Domain List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `class` (String.t): CDASHIG Class Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CdashigClassDomains.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_cdashig_version_classes_class_domains_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.CdashigClassDomains.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_cdashig_version_classes_class_domains_get(connection, version, class, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/cdashig/#{version}/classes/#{class}/domains")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CdashigClassDomains},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDASHIG Class

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `class` (String.t): CDASHIG Class Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CdashigClass.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_cdashig_version_classes_class_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.CdashigClass.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_cdashig_version_classes_class_get(connection, version, class, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/cdashig/#{version}/classes/#{class}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CdashigClass},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDASHIG Class Scenario List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `class` (String.t): CDASHIG Class Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CdashigClassScenarios.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_cdashig_version_classes_class_scenarios_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.CdashigClassScenarios.t} | {:error, Tesla.Env.t}
  def mdr_cdashig_version_classes_class_scenarios_get(connection, version, class, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/cdashig/#{version}/classes/#{class}/scenarios")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CdashigClassScenarios},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDASHIG Class List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CdashigProductClasses.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_cdashig_version_classes_get(Tesla.Env.client, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.CdashigProductClasses.t} | {:error, Tesla.Env.t}
  def mdr_cdashig_version_classes_get(connection, version, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/cdashig/#{version}/classes")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CdashigProductClasses},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDASHIG Domain Field

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `domain` (String.t): CDASHIG Domain Identifier
  - `field` (String.t): CDASHIG Field Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CdashigDomainField.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_cdashig_version_domains_domain_fields_field_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.CdashigDomainField.t} | {:error, Tesla.Env.t}
  def mdr_cdashig_version_domains_domain_fields_field_get(connection, version, domain, field, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/cdashig/#{version}/domains/#{domain}/fields/#{field}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CdashigDomainField},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDASHIG Domain Field List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `domain` (String.t): CDASHIG Domain Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CdashigDomainFields.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_cdashig_version_domains_domain_fields_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.CdashigDomainFields.t} | {:error, Tesla.Env.t}
  def mdr_cdashig_version_domains_domain_fields_get(connection, version, domain, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/cdashig/#{version}/domains/#{domain}/fields")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CdashigDomainFields},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDASHIG Domain

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `domain` (String.t): CDASHIG Domain Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CdashigDomain.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_cdashig_version_domains_domain_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.CdashigDomain.t} | {:error, Tesla.Env.t}
  def mdr_cdashig_version_domains_domain_get(connection, version, domain, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/cdashig/#{version}/domains/#{domain}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CdashigDomain},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDASHIG Domain List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CdashigProductDomains.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_cdashig_version_domains_get(Tesla.Env.client, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.CdashigProductDomains.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_cdashig_version_domains_get(connection, version, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/cdashig/#{version}/domains")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CdashigProductDomains},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDASHIG Product

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CdashigProduct.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_cdashig_version_get(Tesla.Env.client, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.CdashigProduct.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_cdashig_version_get(connection, version, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/cdashig/#{version}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CdashigProduct},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDASHIG Scenario Field

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `domain` (String.t): CDASHIG Domain Identifier
  - `scenario` (String.t): CDASHIG Scenario Identifier
  - `field` (String.t): CDASHIG Field Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CdashigScenarioField.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_cdashig_version_scenarios_domain_scenario_fields_field_get(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.CdashigScenarioField.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_cdashig_version_scenarios_domain_scenario_fields_field_get(connection, version, domain, scenario, field, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/cdashig/#{version}/scenarios/#{domain}.#{scenario}/fields/#{field}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CdashigScenarioField},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDASHIG Scenario Field List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `domain` (String.t): CDASHIG Domain Identifier
  - `scenario` (String.t): CDASHIG Scenario Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CdashigScenarioFields.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_cdashig_version_scenarios_domain_scenario_fields_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:ok, CDISCLibraryAPI.Model.CdashigScenarioFields.t} | {:error, Tesla.Env.t}
  def mdr_cdashig_version_scenarios_domain_scenario_fields_get(connection, version, domain, scenario, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/cdashig/#{version}/scenarios/#{domain}.#{scenario}/fields")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CdashigScenarioFields},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDASHIG Scenario

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `domain` (String.t): CDASHIG Domain Identifier
  - `scenario` (String.t): CDASHIG Scenario Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CdashigScenario.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_cdashig_version_scenarios_domain_scenario_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.CdashigScenario.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_cdashig_version_scenarios_domain_scenario_get(connection, version, domain, scenario, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/cdashig/#{version}/scenarios/#{domain}.#{scenario}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CdashigScenario},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get CDASHIG Scenario List

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `version` (String.t): CDISC Library Product Version
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.CdashigProductScenarios.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_cdashig_version_scenarios_get(Tesla.Env.client, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.CdashigProductScenarios.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_cdashig_version_scenarios_get(connection, version, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/cdashig/#{version}/scenarios")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.CdashigProductScenarios},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get Root CDASHIG Domain Field

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `domain` (String.t): CDASHIG Domain Identifier
  - `field` (String.t): CDASHIG Field Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.RootCdashigDomainField.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_root_cdashig_domains_domain_fields_field_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.RootCdashigDomainField.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_root_cdashig_domains_domain_fields_field_get(connection, domain, field, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/root/cdashig/domains/#{domain}/fields/#{field}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.RootCdashigDomainField},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end

  @doc """
  Get Root CDASHIG Scenario Field

  ### Parameters

  - `connection` (CDISCLibraryAPI.Connection): Connection to server
  - `domain` (String.t): CDASHIG Domain Identifier
  - `scenario` (String.t): CDASHIG Scenario Identifier
  - `field` (String.t): CDASHIG Field Identifier
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, CDISCLibraryAPI.Model.RootCdashigScenarioField.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec mdr_root_cdashig_scenarios_domain_scenario_fields_field_get(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, CDISCLibraryAPI.Model.RootCdashigScenarioField.t} | {:ok, CDISCLibraryAPI.Model.DefaultErrorResponse.t} | {:error, Tesla.Env.t}
  def mdr_root_cdashig_scenarios_domain_scenario_fields_field_get(connection, domain, scenario, field, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mdr/root/cdashig/scenarios/#{domain}.#{scenario}/fields/#{field}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, CDISCLibraryAPI.Model.RootCdashigScenarioField},
      {400, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {401, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {403, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {404, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {405, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {406, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {500, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {503, CDISCLibraryAPI.Model.DefaultErrorResponse},
      {504, CDISCLibraryAPI.Model.DefaultErrorResponse}
    ])
  end
end

/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMeasuresApi_H
#define OAI_OAIMeasuresApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDefaultErrorResponse.h"
#include "OAIExportQrsItemsTable.h"
#include "OAIExportQrsWorkbook.h"
#include "OAIQrsItem.h"
#include "OAIQrsItems.h"
#include "OAIQrsProduct.h"
#include "OAIQrsResponsegroup.h"
#include "OAIQrsResponsegroups.h"
#include "OAIXmlQrsItem.h"
#include "OAIXmlQrsItems.h"
#include "OAIXmlQrsProduct.h"
#include "OAIXmlQrsResponsegroup.h"
#include "OAIXmlQrsResponsegroups.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMeasuresApi : public QObject {
    Q_OBJECT

public:
    OAIMeasuresApi(const int timeOut = 0);
    ~OAIMeasuresApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  measure QString [required]
    * @param[in]  version QString [required]
    */
    virtual void mdrQrsMeasureVersionGet(const QString &measure, const QString &version);

    /**
    * @param[in]  measure QString [required]
    * @param[in]  version QString [required]
    */
    virtual void mdrQrsMeasureVersionItemsGet(const QString &measure, const QString &version);

    /**
    * @param[in]  measure QString [required]
    * @param[in]  version QString [required]
    * @param[in]  item QString [required]
    */
    virtual void mdrQrsMeasureVersionItemsItemGet(const QString &measure, const QString &version, const QString &item);

    /**
    * @param[in]  measure QString [required]
    * @param[in]  version QString [required]
    */
    virtual void mdrQrsMeasureVersionResponsegroupsGet(const QString &measure, const QString &version);

    /**
    * @param[in]  measure QString [required]
    * @param[in]  version QString [required]
    * @param[in]  responsegroup QString [required]
    */
    virtual void mdrQrsMeasureVersionResponsegroupsResponsegroupGet(const QString &measure, const QString &version, const QString &responsegroup);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void mdrQrsMeasureVersionGetCallback(OAIHttpRequestWorker *worker);
    void mdrQrsMeasureVersionItemsGetCallback(OAIHttpRequestWorker *worker);
    void mdrQrsMeasureVersionItemsItemGetCallback(OAIHttpRequestWorker *worker);
    void mdrQrsMeasureVersionResponsegroupsGetCallback(OAIHttpRequestWorker *worker);
    void mdrQrsMeasureVersionResponsegroupsResponsegroupGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void mdrQrsMeasureVersionGetSignal(OAIQrsProduct summary);
    void mdrQrsMeasureVersionItemsGetSignal(OAIQrsItems summary);
    void mdrQrsMeasureVersionItemsItemGetSignal(OAIQrsItem summary);
    void mdrQrsMeasureVersionResponsegroupsGetSignal(OAIQrsResponsegroups summary);
    void mdrQrsMeasureVersionResponsegroupsResponsegroupGetSignal(OAIQrsResponsegroup summary);


    void mdrQrsMeasureVersionGetSignalFull(OAIHttpRequestWorker *worker, OAIQrsProduct summary);
    void mdrQrsMeasureVersionItemsGetSignalFull(OAIHttpRequestWorker *worker, OAIQrsItems summary);
    void mdrQrsMeasureVersionItemsItemGetSignalFull(OAIHttpRequestWorker *worker, OAIQrsItem summary);
    void mdrQrsMeasureVersionResponsegroupsGetSignalFull(OAIHttpRequestWorker *worker, OAIQrsResponsegroups summary);
    void mdrQrsMeasureVersionResponsegroupsResponsegroupGetSignalFull(OAIHttpRequestWorker *worker, OAIQrsResponsegroup summary);

    Q_DECL_DEPRECATED_X("Use mdrQrsMeasureVersionGetSignalError() instead")
    void mdrQrsMeasureVersionGetSignalE(OAIQrsProduct summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrQrsMeasureVersionGetSignalError(OAIQrsProduct summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrQrsMeasureVersionItemsGetSignalError() instead")
    void mdrQrsMeasureVersionItemsGetSignalE(OAIQrsItems summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrQrsMeasureVersionItemsGetSignalError(OAIQrsItems summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrQrsMeasureVersionItemsItemGetSignalError() instead")
    void mdrQrsMeasureVersionItemsItemGetSignalE(OAIQrsItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrQrsMeasureVersionItemsItemGetSignalError(OAIQrsItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrQrsMeasureVersionResponsegroupsGetSignalError() instead")
    void mdrQrsMeasureVersionResponsegroupsGetSignalE(OAIQrsResponsegroups summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrQrsMeasureVersionResponsegroupsGetSignalError(OAIQrsResponsegroups summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrQrsMeasureVersionResponsegroupsResponsegroupGetSignalError() instead")
    void mdrQrsMeasureVersionResponsegroupsResponsegroupGetSignalE(OAIQrsResponsegroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrQrsMeasureVersionResponsegroupsResponsegroupGetSignalError(OAIQrsResponsegroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use mdrQrsMeasureVersionGetSignalErrorFull() instead")
    void mdrQrsMeasureVersionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrQrsMeasureVersionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrQrsMeasureVersionItemsGetSignalErrorFull() instead")
    void mdrQrsMeasureVersionItemsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrQrsMeasureVersionItemsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrQrsMeasureVersionItemsItemGetSignalErrorFull() instead")
    void mdrQrsMeasureVersionItemsItemGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrQrsMeasureVersionItemsItemGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrQrsMeasureVersionResponsegroupsGetSignalErrorFull() instead")
    void mdrQrsMeasureVersionResponsegroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrQrsMeasureVersionResponsegroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrQrsMeasureVersionResponsegroupsResponsegroupGetSignalErrorFull() instead")
    void mdrQrsMeasureVersionResponsegroupsResponsegroupGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrQrsMeasureVersionResponsegroupsResponsegroupGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif

<?php
/**
 * CdashClassField
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CDISC Library API
 *
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CdashClassField Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CdashClassField implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CdashClassField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ordinal' => 'string',
        'name' => 'string',
        'label' => 'string',
        'definition' => 'string',
        'question_text' => 'string',
        'prompt' => 'string',
        'simple_datatype' => 'string',
        'implementation_notes' => 'string',
        'mapping_instructions' => 'string',
        '_links' => '\OpenAPI\Client\Model\CdashClassFieldLinks'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ordinal' => null,
        'name' => null,
        'label' => null,
        'definition' => null,
        'question_text' => null,
        'prompt' => null,
        'simple_datatype' => null,
        'implementation_notes' => null,
        'mapping_instructions' => null,
        '_links' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ordinal' => false,
        'name' => false,
        'label' => false,
        'definition' => false,
        'question_text' => false,
        'prompt' => false,
        'simple_datatype' => false,
        'implementation_notes' => false,
        'mapping_instructions' => false,
        '_links' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ordinal' => 'ordinal',
        'name' => 'name',
        'label' => 'label',
        'definition' => 'definition',
        'question_text' => 'questionText',
        'prompt' => 'prompt',
        'simple_datatype' => 'simpleDatatype',
        'implementation_notes' => 'implementationNotes',
        'mapping_instructions' => 'mappingInstructions',
        '_links' => '_links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ordinal' => 'setOrdinal',
        'name' => 'setName',
        'label' => 'setLabel',
        'definition' => 'setDefinition',
        'question_text' => 'setQuestionText',
        'prompt' => 'setPrompt',
        'simple_datatype' => 'setSimpleDatatype',
        'implementation_notes' => 'setImplementationNotes',
        'mapping_instructions' => 'setMappingInstructions',
        '_links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ordinal' => 'getOrdinal',
        'name' => 'getName',
        'label' => 'getLabel',
        'definition' => 'getDefinition',
        'question_text' => 'getQuestionText',
        'prompt' => 'getPrompt',
        'simple_datatype' => 'getSimpleDatatype',
        'implementation_notes' => 'getImplementationNotes',
        'mapping_instructions' => 'getMappingInstructions',
        '_links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('ordinal', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('definition', $data ?? [], null);
        $this->setIfExists('question_text', $data ?? [], null);
        $this->setIfExists('prompt', $data ?? [], null);
        $this->setIfExists('simple_datatype', $data ?? [], null);
        $this->setIfExists('implementation_notes', $data ?? [], null);
        $this->setIfExists('mapping_instructions', $data ?? [], null);
        $this->setIfExists('_links', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ordinal
     *
     * @return string|null
     */
    public function getOrdinal()
    {
        return $this->container['ordinal'];
    }

    /**
     * Sets ordinal
     *
     * @param string|null $ordinal ordinal
     *
     * @return self
     */
    public function setOrdinal($ordinal)
    {
        if (is_null($ordinal)) {
            throw new \InvalidArgumentException('non-nullable ordinal cannot be null');
        }
        $this->container['ordinal'] = $ordinal;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        if (is_null($label)) {
            throw new \InvalidArgumentException('non-nullable label cannot be null');
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets definition
     *
     * @return string|null
     */
    public function getDefinition()
    {
        return $this->container['definition'];
    }

    /**
     * Sets definition
     *
     * @param string|null $definition definition
     *
     * @return self
     */
    public function setDefinition($definition)
    {
        if (is_null($definition)) {
            throw new \InvalidArgumentException('non-nullable definition cannot be null');
        }
        $this->container['definition'] = $definition;

        return $this;
    }

    /**
     * Gets question_text
     *
     * @return string|null
     */
    public function getQuestionText()
    {
        return $this->container['question_text'];
    }

    /**
     * Sets question_text
     *
     * @param string|null $question_text question_text
     *
     * @return self
     */
    public function setQuestionText($question_text)
    {
        if (is_null($question_text)) {
            throw new \InvalidArgumentException('non-nullable question_text cannot be null');
        }
        $this->container['question_text'] = $question_text;

        return $this;
    }

    /**
     * Gets prompt
     *
     * @return string|null
     */
    public function getPrompt()
    {
        return $this->container['prompt'];
    }

    /**
     * Sets prompt
     *
     * @param string|null $prompt prompt
     *
     * @return self
     */
    public function setPrompt($prompt)
    {
        if (is_null($prompt)) {
            throw new \InvalidArgumentException('non-nullable prompt cannot be null');
        }
        $this->container['prompt'] = $prompt;

        return $this;
    }

    /**
     * Gets simple_datatype
     *
     * @return string|null
     */
    public function getSimpleDatatype()
    {
        return $this->container['simple_datatype'];
    }

    /**
     * Sets simple_datatype
     *
     * @param string|null $simple_datatype simple_datatype
     *
     * @return self
     */
    public function setSimpleDatatype($simple_datatype)
    {
        if (is_null($simple_datatype)) {
            throw new \InvalidArgumentException('non-nullable simple_datatype cannot be null');
        }
        $this->container['simple_datatype'] = $simple_datatype;

        return $this;
    }

    /**
     * Gets implementation_notes
     *
     * @return string|null
     */
    public function getImplementationNotes()
    {
        return $this->container['implementation_notes'];
    }

    /**
     * Sets implementation_notes
     *
     * @param string|null $implementation_notes implementation_notes
     *
     * @return self
     */
    public function setImplementationNotes($implementation_notes)
    {
        if (is_null($implementation_notes)) {
            throw new \InvalidArgumentException('non-nullable implementation_notes cannot be null');
        }
        $this->container['implementation_notes'] = $implementation_notes;

        return $this;
    }

    /**
     * Gets mapping_instructions
     *
     * @return string|null
     */
    public function getMappingInstructions()
    {
        return $this->container['mapping_instructions'];
    }

    /**
     * Sets mapping_instructions
     *
     * @param string|null $mapping_instructions mapping_instructions
     *
     * @return self
     */
    public function setMappingInstructions($mapping_instructions)
    {
        if (is_null($mapping_instructions)) {
            throw new \InvalidArgumentException('non-nullable mapping_instructions cannot be null');
        }
        $this->container['mapping_instructions'] = $mapping_instructions;

        return $this;
    }

    /**
     * Gets _links
     *
     * @return \OpenAPI\Client\Model\CdashClassFieldLinks|null
     */
    public function getLinks()
    {
        return $this->container['_links'];
    }

    /**
     * Sets _links
     *
     * @param \OpenAPI\Client\Model\CdashClassFieldLinks|null $_links _links
     *
     * @return self
     */
    public function setLinks($_links)
    {
        if (is_null($_links)) {
            throw new \InvalidArgumentException('non-nullable _links cannot be null');
        }
        $this->container['_links'] = $_links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



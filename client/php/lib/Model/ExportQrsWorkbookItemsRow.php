<?php
/**
 * ExportQrsWorkbookItemsRow
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CDISC Library API
 *
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ExportQrsWorkbookItemsRow Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ExportQrsWorkbookItemsRow implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ExportQrsWorkbookItemsRow';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'item_sequence' => 'string',
        'test_name' => 'string',
        'item_text' => 'string',
        'tests_codelist_c_code' => 'string',
        'tests_term_c_code' => 'string',
        'test_codes_codelist_c_code' => 'string',
        'test_codes_term_c_code' => 'string',
        'subcategorys_codelist_c_code' => 'string',
        'subcategorys_term_c_code' => 'string',
        'evaluators_codelist_c_code' => 'string',
        'evaluators_term_c_code' => 'string',
        'free_form_responses_datatype' => 'string',
        'response_group' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'item_sequence' => null,
        'test_name' => null,
        'item_text' => null,
        'tests_codelist_c_code' => null,
        'tests_term_c_code' => null,
        'test_codes_codelist_c_code' => null,
        'test_codes_term_c_code' => null,
        'subcategorys_codelist_c_code' => null,
        'subcategorys_term_c_code' => null,
        'evaluators_codelist_c_code' => null,
        'evaluators_term_c_code' => null,
        'free_form_responses_datatype' => null,
        'response_group' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'item_sequence' => false,
        'test_name' => false,
        'item_text' => false,
        'tests_codelist_c_code' => false,
        'tests_term_c_code' => false,
        'test_codes_codelist_c_code' => false,
        'test_codes_term_c_code' => false,
        'subcategorys_codelist_c_code' => false,
        'subcategorys_term_c_code' => false,
        'evaluators_codelist_c_code' => false,
        'evaluators_term_c_code' => false,
        'free_form_responses_datatype' => false,
        'response_group' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item_sequence' => 'Item Sequence',
        'test_name' => 'Test Name',
        'item_text' => 'Item Text',
        'tests_codelist_c_code' => 'Test&#39;s Codelist C-Code',
        'tests_term_c_code' => 'Test&#39;s Term C-Code',
        'test_codes_codelist_c_code' => 'Test Code&#39;s Codelist C-Code',
        'test_codes_term_c_code' => 'Test Code&#39;s Term C-Code',
        'subcategorys_codelist_c_code' => 'Subcategory&#39;s Codelist C-Code',
        'subcategorys_term_c_code' => 'Subcategory&#39;s Term C-Code',
        'evaluators_codelist_c_code' => 'Evaluator&#39;s Codelist C-Code',
        'evaluators_term_c_code' => 'Evaluator&#39;s Term C-Code',
        'free_form_responses_datatype' => 'Free-form Response&#39;s Datatype',
        'response_group' => 'Response Group'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item_sequence' => 'setItemSequence',
        'test_name' => 'setTestName',
        'item_text' => 'setItemText',
        'tests_codelist_c_code' => 'setTestsCodelistCCode',
        'tests_term_c_code' => 'setTestsTermCCode',
        'test_codes_codelist_c_code' => 'setTestCodesCodelistCCode',
        'test_codes_term_c_code' => 'setTestCodesTermCCode',
        'subcategorys_codelist_c_code' => 'setSubcategorysCodelistCCode',
        'subcategorys_term_c_code' => 'setSubcategorysTermCCode',
        'evaluators_codelist_c_code' => 'setEvaluatorsCodelistCCode',
        'evaluators_term_c_code' => 'setEvaluatorsTermCCode',
        'free_form_responses_datatype' => 'setFreeFormResponsesDatatype',
        'response_group' => 'setResponseGroup'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item_sequence' => 'getItemSequence',
        'test_name' => 'getTestName',
        'item_text' => 'getItemText',
        'tests_codelist_c_code' => 'getTestsCodelistCCode',
        'tests_term_c_code' => 'getTestsTermCCode',
        'test_codes_codelist_c_code' => 'getTestCodesCodelistCCode',
        'test_codes_term_c_code' => 'getTestCodesTermCCode',
        'subcategorys_codelist_c_code' => 'getSubcategorysCodelistCCode',
        'subcategorys_term_c_code' => 'getSubcategorysTermCCode',
        'evaluators_codelist_c_code' => 'getEvaluatorsCodelistCCode',
        'evaluators_term_c_code' => 'getEvaluatorsTermCCode',
        'free_form_responses_datatype' => 'getFreeFormResponsesDatatype',
        'response_group' => 'getResponseGroup'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('item_sequence', $data ?? [], null);
        $this->setIfExists('test_name', $data ?? [], null);
        $this->setIfExists('item_text', $data ?? [], null);
        $this->setIfExists('tests_codelist_c_code', $data ?? [], null);
        $this->setIfExists('tests_term_c_code', $data ?? [], null);
        $this->setIfExists('test_codes_codelist_c_code', $data ?? [], null);
        $this->setIfExists('test_codes_term_c_code', $data ?? [], null);
        $this->setIfExists('subcategorys_codelist_c_code', $data ?? [], null);
        $this->setIfExists('subcategorys_term_c_code', $data ?? [], null);
        $this->setIfExists('evaluators_codelist_c_code', $data ?? [], null);
        $this->setIfExists('evaluators_term_c_code', $data ?? [], null);
        $this->setIfExists('free_form_responses_datatype', $data ?? [], null);
        $this->setIfExists('response_group', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item_sequence
     *
     * @return string|null
     */
    public function getItemSequence()
    {
        return $this->container['item_sequence'];
    }

    /**
     * Sets item_sequence
     *
     * @param string|null $item_sequence item_sequence
     *
     * @return self
     */
    public function setItemSequence($item_sequence)
    {
        if (is_null($item_sequence)) {
            throw new \InvalidArgumentException('non-nullable item_sequence cannot be null');
        }
        $this->container['item_sequence'] = $item_sequence;

        return $this;
    }

    /**
     * Gets test_name
     *
     * @return string|null
     */
    public function getTestName()
    {
        return $this->container['test_name'];
    }

    /**
     * Sets test_name
     *
     * @param string|null $test_name test_name
     *
     * @return self
     */
    public function setTestName($test_name)
    {
        if (is_null($test_name)) {
            throw new \InvalidArgumentException('non-nullable test_name cannot be null');
        }
        $this->container['test_name'] = $test_name;

        return $this;
    }

    /**
     * Gets item_text
     *
     * @return string|null
     */
    public function getItemText()
    {
        return $this->container['item_text'];
    }

    /**
     * Sets item_text
     *
     * @param string|null $item_text item_text
     *
     * @return self
     */
    public function setItemText($item_text)
    {
        if (is_null($item_text)) {
            throw new \InvalidArgumentException('non-nullable item_text cannot be null');
        }
        $this->container['item_text'] = $item_text;

        return $this;
    }

    /**
     * Gets tests_codelist_c_code
     *
     * @return string|null
     */
    public function getTestsCodelistCCode()
    {
        return $this->container['tests_codelist_c_code'];
    }

    /**
     * Sets tests_codelist_c_code
     *
     * @param string|null $tests_codelist_c_code tests_codelist_c_code
     *
     * @return self
     */
    public function setTestsCodelistCCode($tests_codelist_c_code)
    {
        if (is_null($tests_codelist_c_code)) {
            throw new \InvalidArgumentException('non-nullable tests_codelist_c_code cannot be null');
        }
        $this->container['tests_codelist_c_code'] = $tests_codelist_c_code;

        return $this;
    }

    /**
     * Gets tests_term_c_code
     *
     * @return string|null
     */
    public function getTestsTermCCode()
    {
        return $this->container['tests_term_c_code'];
    }

    /**
     * Sets tests_term_c_code
     *
     * @param string|null $tests_term_c_code tests_term_c_code
     *
     * @return self
     */
    public function setTestsTermCCode($tests_term_c_code)
    {
        if (is_null($tests_term_c_code)) {
            throw new \InvalidArgumentException('non-nullable tests_term_c_code cannot be null');
        }
        $this->container['tests_term_c_code'] = $tests_term_c_code;

        return $this;
    }

    /**
     * Gets test_codes_codelist_c_code
     *
     * @return string|null
     */
    public function getTestCodesCodelistCCode()
    {
        return $this->container['test_codes_codelist_c_code'];
    }

    /**
     * Sets test_codes_codelist_c_code
     *
     * @param string|null $test_codes_codelist_c_code test_codes_codelist_c_code
     *
     * @return self
     */
    public function setTestCodesCodelistCCode($test_codes_codelist_c_code)
    {
        if (is_null($test_codes_codelist_c_code)) {
            throw new \InvalidArgumentException('non-nullable test_codes_codelist_c_code cannot be null');
        }
        $this->container['test_codes_codelist_c_code'] = $test_codes_codelist_c_code;

        return $this;
    }

    /**
     * Gets test_codes_term_c_code
     *
     * @return string|null
     */
    public function getTestCodesTermCCode()
    {
        return $this->container['test_codes_term_c_code'];
    }

    /**
     * Sets test_codes_term_c_code
     *
     * @param string|null $test_codes_term_c_code test_codes_term_c_code
     *
     * @return self
     */
    public function setTestCodesTermCCode($test_codes_term_c_code)
    {
        if (is_null($test_codes_term_c_code)) {
            throw new \InvalidArgumentException('non-nullable test_codes_term_c_code cannot be null');
        }
        $this->container['test_codes_term_c_code'] = $test_codes_term_c_code;

        return $this;
    }

    /**
     * Gets subcategorys_codelist_c_code
     *
     * @return string|null
     */
    public function getSubcategorysCodelistCCode()
    {
        return $this->container['subcategorys_codelist_c_code'];
    }

    /**
     * Sets subcategorys_codelist_c_code
     *
     * @param string|null $subcategorys_codelist_c_code subcategorys_codelist_c_code
     *
     * @return self
     */
    public function setSubcategorysCodelistCCode($subcategorys_codelist_c_code)
    {
        if (is_null($subcategorys_codelist_c_code)) {
            throw new \InvalidArgumentException('non-nullable subcategorys_codelist_c_code cannot be null');
        }
        $this->container['subcategorys_codelist_c_code'] = $subcategorys_codelist_c_code;

        return $this;
    }

    /**
     * Gets subcategorys_term_c_code
     *
     * @return string|null
     */
    public function getSubcategorysTermCCode()
    {
        return $this->container['subcategorys_term_c_code'];
    }

    /**
     * Sets subcategorys_term_c_code
     *
     * @param string|null $subcategorys_term_c_code subcategorys_term_c_code
     *
     * @return self
     */
    public function setSubcategorysTermCCode($subcategorys_term_c_code)
    {
        if (is_null($subcategorys_term_c_code)) {
            throw new \InvalidArgumentException('non-nullable subcategorys_term_c_code cannot be null');
        }
        $this->container['subcategorys_term_c_code'] = $subcategorys_term_c_code;

        return $this;
    }

    /**
     * Gets evaluators_codelist_c_code
     *
     * @return string|null
     */
    public function getEvaluatorsCodelistCCode()
    {
        return $this->container['evaluators_codelist_c_code'];
    }

    /**
     * Sets evaluators_codelist_c_code
     *
     * @param string|null $evaluators_codelist_c_code evaluators_codelist_c_code
     *
     * @return self
     */
    public function setEvaluatorsCodelistCCode($evaluators_codelist_c_code)
    {
        if (is_null($evaluators_codelist_c_code)) {
            throw new \InvalidArgumentException('non-nullable evaluators_codelist_c_code cannot be null');
        }
        $this->container['evaluators_codelist_c_code'] = $evaluators_codelist_c_code;

        return $this;
    }

    /**
     * Gets evaluators_term_c_code
     *
     * @return string|null
     */
    public function getEvaluatorsTermCCode()
    {
        return $this->container['evaluators_term_c_code'];
    }

    /**
     * Sets evaluators_term_c_code
     *
     * @param string|null $evaluators_term_c_code evaluators_term_c_code
     *
     * @return self
     */
    public function setEvaluatorsTermCCode($evaluators_term_c_code)
    {
        if (is_null($evaluators_term_c_code)) {
            throw new \InvalidArgumentException('non-nullable evaluators_term_c_code cannot be null');
        }
        $this->container['evaluators_term_c_code'] = $evaluators_term_c_code;

        return $this;
    }

    /**
     * Gets free_form_responses_datatype
     *
     * @return string|null
     */
    public function getFreeFormResponsesDatatype()
    {
        return $this->container['free_form_responses_datatype'];
    }

    /**
     * Sets free_form_responses_datatype
     *
     * @param string|null $free_form_responses_datatype free_form_responses_datatype
     *
     * @return self
     */
    public function setFreeFormResponsesDatatype($free_form_responses_datatype)
    {
        if (is_null($free_form_responses_datatype)) {
            throw new \InvalidArgumentException('non-nullable free_form_responses_datatype cannot be null');
        }
        $this->container['free_form_responses_datatype'] = $free_form_responses_datatype;

        return $this;
    }

    /**
     * Gets response_group
     *
     * @return string|null
     */
    public function getResponseGroup()
    {
        return $this->container['response_group'];
    }

    /**
     * Sets response_group
     *
     * @param string|null $response_group response_group
     *
     * @return self
     */
    public function setResponseGroup($response_group)
    {
        if (is_null($response_group)) {
            throw new \InvalidArgumentException('non-nullable response_group cannot be null');
        }
        $this->container['response_group'] = $response_group;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



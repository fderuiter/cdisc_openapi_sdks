<?php
/**
 * ExportCtCodelist
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CDISC Library API
 *
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ExportCtCodelist Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ExportCtCodelist implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ExportCtCodelist';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'code' => 'string',
        'codelist_code' => 'string',
        'codelist_extensible__yes_no' => 'string',
        'codelist_name' => 'string',
        'cdisc_submission_value' => 'string',
        'cdisc_synonym_s' => 'string[]',
        'cdisc_definition' => 'string',
        'nci_preferred_term' => 'string',
        'standard_and_date' => 'string',
        '' => '\OpenAPI\Client\Model\ExportCtTerm[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'code' => null,
        'codelist_code' => null,
        'codelist_extensible__yes_no' => null,
        'codelist_name' => null,
        'cdisc_submission_value' => null,
        'cdisc_synonym_s' => null,
        'cdisc_definition' => null,
        'nci_preferred_term' => null,
        'standard_and_date' => null,
        '' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'code' => false,
        'codelist_code' => false,
        'codelist_extensible__yes_no' => false,
        'codelist_name' => false,
        'cdisc_submission_value' => false,
        'cdisc_synonym_s' => false,
        'cdisc_definition' => false,
        'nci_preferred_term' => false,
        'standard_and_date' => false,
        '' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'Code',
        'codelist_code' => 'Codelist Code',
        'codelist_extensible__yes_no' => 'Codelist Extensible (Yes/No)',
        'codelist_name' => 'Codelist Name',
        'cdisc_submission_value' => 'CDISC Submission Value',
        'cdisc_synonym_s' => 'CDISC Synonym(s)',
        'cdisc_definition' => 'CDISC Definition',
        'nci_preferred_term' => 'NCI Preferred Term',
        'standard_and_date' => 'Standard and Date',
        '' => ''
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'codelist_code' => 'setCodelistCode',
        'codelist_extensible__yes_no' => 'setCodelistExtensibleYesNo',
        'codelist_name' => 'setCodelistName',
        'cdisc_submission_value' => 'setCdiscSubmissionValue',
        'cdisc_synonym_s' => 'setCdiscSynonymS',
        'cdisc_definition' => 'setCdiscDefinition',
        'nci_preferred_term' => 'setNciPreferredTerm',
        'standard_and_date' => 'setStandardAndDate',
        '' => 'set'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'codelist_code' => 'getCodelistCode',
        'codelist_extensible__yes_no' => 'getCodelistExtensibleYesNo',
        'codelist_name' => 'getCodelistName',
        'cdisc_submission_value' => 'getCdiscSubmissionValue',
        'cdisc_synonym_s' => 'getCdiscSynonymS',
        'cdisc_definition' => 'getCdiscDefinition',
        'nci_preferred_term' => 'getNciPreferredTerm',
        'standard_and_date' => 'getStandardAndDate',
        '' => 'get'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('codelist_code', $data ?? [], null);
        $this->setIfExists('codelist_extensible__yes_no', $data ?? [], null);
        $this->setIfExists('codelist_name', $data ?? [], null);
        $this->setIfExists('cdisc_submission_value', $data ?? [], null);
        $this->setIfExists('cdisc_synonym_s', $data ?? [], null);
        $this->setIfExists('cdisc_definition', $data ?? [], null);
        $this->setIfExists('nci_preferred_term', $data ?? [], null);
        $this->setIfExists('standard_and_date', $data ?? [], null);
        $this->setIfExists('', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets codelist_code
     *
     * @return string|null
     */
    public function getCodelistCode()
    {
        return $this->container['codelist_code'];
    }

    /**
     * Sets codelist_code
     *
     * @param string|null $codelist_code codelist_code
     *
     * @return self
     */
    public function setCodelistCode($codelist_code)
    {
        if (is_null($codelist_code)) {
            throw new \InvalidArgumentException('non-nullable codelist_code cannot be null');
        }
        $this->container['codelist_code'] = $codelist_code;

        return $this;
    }

    /**
     * Gets codelist_extensible__yes_no
     *
     * @return string|null
     */
    public function getCodelistExtensibleYesNo()
    {
        return $this->container['codelist_extensible__yes_no'];
    }

    /**
     * Sets codelist_extensible__yes_no
     *
     * @param string|null $codelist_extensible__yes_no codelist_extensible__yes_no
     *
     * @return self
     */
    public function setCodelistExtensibleYesNo($codelist_extensible__yes_no)
    {
        if (is_null($codelist_extensible__yes_no)) {
            throw new \InvalidArgumentException('non-nullable codelist_extensible__yes_no cannot be null');
        }
        $this->container['codelist_extensible__yes_no'] = $codelist_extensible__yes_no;

        return $this;
    }

    /**
     * Gets codelist_name
     *
     * @return string|null
     */
    public function getCodelistName()
    {
        return $this->container['codelist_name'];
    }

    /**
     * Sets codelist_name
     *
     * @param string|null $codelist_name codelist_name
     *
     * @return self
     */
    public function setCodelistName($codelist_name)
    {
        if (is_null($codelist_name)) {
            throw new \InvalidArgumentException('non-nullable codelist_name cannot be null');
        }
        $this->container['codelist_name'] = $codelist_name;

        return $this;
    }

    /**
     * Gets cdisc_submission_value
     *
     * @return string|null
     */
    public function getCdiscSubmissionValue()
    {
        return $this->container['cdisc_submission_value'];
    }

    /**
     * Sets cdisc_submission_value
     *
     * @param string|null $cdisc_submission_value cdisc_submission_value
     *
     * @return self
     */
    public function setCdiscSubmissionValue($cdisc_submission_value)
    {
        if (is_null($cdisc_submission_value)) {
            throw new \InvalidArgumentException('non-nullable cdisc_submission_value cannot be null');
        }
        $this->container['cdisc_submission_value'] = $cdisc_submission_value;

        return $this;
    }

    /**
     * Gets cdisc_synonym_s
     *
     * @return string[]|null
     */
    public function getCdiscSynonymS()
    {
        return $this->container['cdisc_synonym_s'];
    }

    /**
     * Sets cdisc_synonym_s
     *
     * @param string[]|null $cdisc_synonym_s cdisc_synonym_s
     *
     * @return self
     */
    public function setCdiscSynonymS($cdisc_synonym_s)
    {
        if (is_null($cdisc_synonym_s)) {
            throw new \InvalidArgumentException('non-nullable cdisc_synonym_s cannot be null');
        }
        $this->container['cdisc_synonym_s'] = $cdisc_synonym_s;

        return $this;
    }

    /**
     * Gets cdisc_definition
     *
     * @return string|null
     */
    public function getCdiscDefinition()
    {
        return $this->container['cdisc_definition'];
    }

    /**
     * Sets cdisc_definition
     *
     * @param string|null $cdisc_definition cdisc_definition
     *
     * @return self
     */
    public function setCdiscDefinition($cdisc_definition)
    {
        if (is_null($cdisc_definition)) {
            throw new \InvalidArgumentException('non-nullable cdisc_definition cannot be null');
        }
        $this->container['cdisc_definition'] = $cdisc_definition;

        return $this;
    }

    /**
     * Gets nci_preferred_term
     *
     * @return string|null
     */
    public function getNciPreferredTerm()
    {
        return $this->container['nci_preferred_term'];
    }

    /**
     * Sets nci_preferred_term
     *
     * @param string|null $nci_preferred_term nci_preferred_term
     *
     * @return self
     */
    public function setNciPreferredTerm($nci_preferred_term)
    {
        if (is_null($nci_preferred_term)) {
            throw new \InvalidArgumentException('non-nullable nci_preferred_term cannot be null');
        }
        $this->container['nci_preferred_term'] = $nci_preferred_term;

        return $this;
    }

    /**
     * Gets standard_and_date
     *
     * @return string|null
     */
    public function getStandardAndDate()
    {
        return $this->container['standard_and_date'];
    }

    /**
     * Sets standard_and_date
     *
     * @param string|null $standard_and_date standard_and_date
     *
     * @return self
     */
    public function setStandardAndDate($standard_and_date)
    {
        if (is_null($standard_and_date)) {
            throw new \InvalidArgumentException('non-nullable standard_and_date cannot be null');
        }
        $this->container['standard_and_date'] = $standard_and_date;

        return $this;
    }

    /**
     * Gets 
     *
     * @return \OpenAPI\Client\Model\ExportCtTerm[]|null
     */
    public function get()
    {
        return $this->container[''];
    }

    /**
     * Sets 
     *
     * @param \OpenAPI\Client\Model\ExportCtTerm[]|null $ 
     *
     * @return self
     */
    public function set($)
    {
        if (is_null($)) {
            throw new \InvalidArgumentException('non-nullable  cannot be null');
        }
        $this->container[''] = $;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



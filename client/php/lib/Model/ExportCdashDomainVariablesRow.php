<?php
/**
 * ExportCdashDomainVariablesRow
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CDISC Library API
 *
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ExportCdashDomainVariablesRow Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ExportCdashDomainVariablesRow implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ExportCdashDomainVariablesRow';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'version' => 'string',
        'class' => 'string',
        'domain' => 'string',
        'variable_order' => 'string',
        'cdash_variable' => 'string',
        'cdash_variable_label' => 'string',
        'draft_cdash_definition' => 'string',
        'domain_specific' => 'string',
        'question_text' => 'string',
        'prompt' => 'string',
        'type' => 'string',
        'sdtm_target' => 'string[]',
        'mapping_instructions' => 'string',
        'controlled_terminology_codelist_name' => 'string',
        'implementation_notes' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'version' => null,
        'class' => null,
        'domain' => null,
        'variable_order' => null,
        'cdash_variable' => null,
        'cdash_variable_label' => null,
        'draft_cdash_definition' => null,
        'domain_specific' => null,
        'question_text' => null,
        'prompt' => null,
        'type' => null,
        'sdtm_target' => null,
        'mapping_instructions' => null,
        'controlled_terminology_codelist_name' => null,
        'implementation_notes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'version' => false,
        'class' => false,
        'domain' => false,
        'variable_order' => false,
        'cdash_variable' => false,
        'cdash_variable_label' => false,
        'draft_cdash_definition' => false,
        'domain_specific' => false,
        'question_text' => false,
        'prompt' => false,
        'type' => false,
        'sdtm_target' => false,
        'mapping_instructions' => false,
        'controlled_terminology_codelist_name' => false,
        'implementation_notes' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'version' => 'Version',
        'class' => 'Class',
        'domain' => 'Domain',
        'variable_order' => 'Variable Order',
        'cdash_variable' => 'CDASH Variable',
        'cdash_variable_label' => 'CDASH Variable Label',
        'draft_cdash_definition' => 'DRAFT CDASH Definition',
        'domain_specific' => 'Domain Specific',
        'question_text' => 'Question Text',
        'prompt' => 'Prompt',
        'type' => 'Type',
        'sdtm_target' => 'SDTM Target',
        'mapping_instructions' => 'Mapping Instructions',
        'controlled_terminology_codelist_name' => 'Controlled Terminology Codelist Name',
        'implementation_notes' => 'Implementation Notes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'version' => 'setVersion',
        'class' => 'setClass',
        'domain' => 'setDomain',
        'variable_order' => 'setVariableOrder',
        'cdash_variable' => 'setCdashVariable',
        'cdash_variable_label' => 'setCdashVariableLabel',
        'draft_cdash_definition' => 'setDraftCdashDefinition',
        'domain_specific' => 'setDomainSpecific',
        'question_text' => 'setQuestionText',
        'prompt' => 'setPrompt',
        'type' => 'setType',
        'sdtm_target' => 'setSdtmTarget',
        'mapping_instructions' => 'setMappingInstructions',
        'controlled_terminology_codelist_name' => 'setControlledTerminologyCodelistName',
        'implementation_notes' => 'setImplementationNotes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'version' => 'getVersion',
        'class' => 'getClass',
        'domain' => 'getDomain',
        'variable_order' => 'getVariableOrder',
        'cdash_variable' => 'getCdashVariable',
        'cdash_variable_label' => 'getCdashVariableLabel',
        'draft_cdash_definition' => 'getDraftCdashDefinition',
        'domain_specific' => 'getDomainSpecific',
        'question_text' => 'getQuestionText',
        'prompt' => 'getPrompt',
        'type' => 'getType',
        'sdtm_target' => 'getSdtmTarget',
        'mapping_instructions' => 'getMappingInstructions',
        'controlled_terminology_codelist_name' => 'getControlledTerminologyCodelistName',
        'implementation_notes' => 'getImplementationNotes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('class', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('variable_order', $data ?? [], null);
        $this->setIfExists('cdash_variable', $data ?? [], null);
        $this->setIfExists('cdash_variable_label', $data ?? [], null);
        $this->setIfExists('draft_cdash_definition', $data ?? [], null);
        $this->setIfExists('domain_specific', $data ?? [], null);
        $this->setIfExists('question_text', $data ?? [], null);
        $this->setIfExists('prompt', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('sdtm_target', $data ?? [], null);
        $this->setIfExists('mapping_instructions', $data ?? [], null);
        $this->setIfExists('controlled_terminology_codelist_name', $data ?? [], null);
        $this->setIfExists('implementation_notes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets class
     *
     * @return string|null
     */
    public function getClass()
    {
        return $this->container['class'];
    }

    /**
     * Sets class
     *
     * @param string|null $class class
     *
     * @return self
     */
    public function setClass($class)
    {
        if (is_null($class)) {
            throw new \InvalidArgumentException('non-nullable class cannot be null');
        }
        $this->container['class'] = $class;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets variable_order
     *
     * @return string|null
     */
    public function getVariableOrder()
    {
        return $this->container['variable_order'];
    }

    /**
     * Sets variable_order
     *
     * @param string|null $variable_order variable_order
     *
     * @return self
     */
    public function setVariableOrder($variable_order)
    {
        if (is_null($variable_order)) {
            throw new \InvalidArgumentException('non-nullable variable_order cannot be null');
        }
        $this->container['variable_order'] = $variable_order;

        return $this;
    }

    /**
     * Gets cdash_variable
     *
     * @return string|null
     */
    public function getCdashVariable()
    {
        return $this->container['cdash_variable'];
    }

    /**
     * Sets cdash_variable
     *
     * @param string|null $cdash_variable cdash_variable
     *
     * @return self
     */
    public function setCdashVariable($cdash_variable)
    {
        if (is_null($cdash_variable)) {
            throw new \InvalidArgumentException('non-nullable cdash_variable cannot be null');
        }
        $this->container['cdash_variable'] = $cdash_variable;

        return $this;
    }

    /**
     * Gets cdash_variable_label
     *
     * @return string|null
     */
    public function getCdashVariableLabel()
    {
        return $this->container['cdash_variable_label'];
    }

    /**
     * Sets cdash_variable_label
     *
     * @param string|null $cdash_variable_label cdash_variable_label
     *
     * @return self
     */
    public function setCdashVariableLabel($cdash_variable_label)
    {
        if (is_null($cdash_variable_label)) {
            throw new \InvalidArgumentException('non-nullable cdash_variable_label cannot be null');
        }
        $this->container['cdash_variable_label'] = $cdash_variable_label;

        return $this;
    }

    /**
     * Gets draft_cdash_definition
     *
     * @return string|null
     */
    public function getDraftCdashDefinition()
    {
        return $this->container['draft_cdash_definition'];
    }

    /**
     * Sets draft_cdash_definition
     *
     * @param string|null $draft_cdash_definition draft_cdash_definition
     *
     * @return self
     */
    public function setDraftCdashDefinition($draft_cdash_definition)
    {
        if (is_null($draft_cdash_definition)) {
            throw new \InvalidArgumentException('non-nullable draft_cdash_definition cannot be null');
        }
        $this->container['draft_cdash_definition'] = $draft_cdash_definition;

        return $this;
    }

    /**
     * Gets domain_specific
     *
     * @return string|null
     */
    public function getDomainSpecific()
    {
        return $this->container['domain_specific'];
    }

    /**
     * Sets domain_specific
     *
     * @param string|null $domain_specific domain_specific
     *
     * @return self
     */
    public function setDomainSpecific($domain_specific)
    {
        if (is_null($domain_specific)) {
            throw new \InvalidArgumentException('non-nullable domain_specific cannot be null');
        }
        $this->container['domain_specific'] = $domain_specific;

        return $this;
    }

    /**
     * Gets question_text
     *
     * @return string|null
     */
    public function getQuestionText()
    {
        return $this->container['question_text'];
    }

    /**
     * Sets question_text
     *
     * @param string|null $question_text question_text
     *
     * @return self
     */
    public function setQuestionText($question_text)
    {
        if (is_null($question_text)) {
            throw new \InvalidArgumentException('non-nullable question_text cannot be null');
        }
        $this->container['question_text'] = $question_text;

        return $this;
    }

    /**
     * Gets prompt
     *
     * @return string|null
     */
    public function getPrompt()
    {
        return $this->container['prompt'];
    }

    /**
     * Sets prompt
     *
     * @param string|null $prompt prompt
     *
     * @return self
     */
    public function setPrompt($prompt)
    {
        if (is_null($prompt)) {
            throw new \InvalidArgumentException('non-nullable prompt cannot be null');
        }
        $this->container['prompt'] = $prompt;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets sdtm_target
     *
     * @return string[]|null
     */
    public function getSdtmTarget()
    {
        return $this->container['sdtm_target'];
    }

    /**
     * Sets sdtm_target
     *
     * @param string[]|null $sdtm_target sdtm_target
     *
     * @return self
     */
    public function setSdtmTarget($sdtm_target)
    {
        if (is_null($sdtm_target)) {
            throw new \InvalidArgumentException('non-nullable sdtm_target cannot be null');
        }
        $this->container['sdtm_target'] = $sdtm_target;

        return $this;
    }

    /**
     * Gets mapping_instructions
     *
     * @return string|null
     */
    public function getMappingInstructions()
    {
        return $this->container['mapping_instructions'];
    }

    /**
     * Sets mapping_instructions
     *
     * @param string|null $mapping_instructions mapping_instructions
     *
     * @return self
     */
    public function setMappingInstructions($mapping_instructions)
    {
        if (is_null($mapping_instructions)) {
            throw new \InvalidArgumentException('non-nullable mapping_instructions cannot be null');
        }
        $this->container['mapping_instructions'] = $mapping_instructions;

        return $this;
    }

    /**
     * Gets controlled_terminology_codelist_name
     *
     * @return string|null
     */
    public function getControlledTerminologyCodelistName()
    {
        return $this->container['controlled_terminology_codelist_name'];
    }

    /**
     * Sets controlled_terminology_codelist_name
     *
     * @param string|null $controlled_terminology_codelist_name controlled_terminology_codelist_name
     *
     * @return self
     */
    public function setControlledTerminologyCodelistName($controlled_terminology_codelist_name)
    {
        if (is_null($controlled_terminology_codelist_name)) {
            throw new \InvalidArgumentException('non-nullable controlled_terminology_codelist_name cannot be null');
        }
        $this->container['controlled_terminology_codelist_name'] = $controlled_terminology_codelist_name;

        return $this;
    }

    /**
     * Gets implementation_notes
     *
     * @return string|null
     */
    public function getImplementationNotes()
    {
        return $this->container['implementation_notes'];
    }

    /**
     * Sets implementation_notes
     *
     * @param string|null $implementation_notes implementation_notes
     *
     * @return self
     */
    public function setImplementationNotes($implementation_notes)
    {
        if (is_null($implementation_notes)) {
            throw new \InvalidArgumentException('non-nullable implementation_notes cannot be null');
        }
        $this->container['implementation_notes'] = $implementation_notes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * SearchesApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CDISC Library API
 *
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * SearchesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SearchesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'mdrSearchGet' => [
            'application/json',
        ],
        'mdrSearchScopesGet' => [
            'application/json',
        ],
        'mdrSearchScopesScopeGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation mdrSearchGet
     *
     * @param  string $q Search Term Expression (required)
     * @param  string|null $highlight Search Highlight Expression (optional)
     * @param  float|null $start Initial Search Result Index (optional, default to 0)
     * @param  float|null $page_size Number of Search Results to Return (optional, default to 100)
     * @param  string|null $class Limit Search by Setting Scope to Class (optional)
     * @param  string|null $codelist Limit Search by Setting Scope to Codelist (optional)
     * @param  string|null $concept_id Limit Search by Setting Scope to Concept ID (optional)
     * @param  string|null $core Limit Search by Setting Scope to Core (optional)
     * @param  string|null $data_structure Limit Search by Setting Scope to Data Structure (optional)
     * @param  string|null $dataset_structure Limit Search by Setting Scope to Dataset Structure (optional)
     * @param  string|null $definition Limit Search by Setting Scope to Definition (optional)
     * @param  string|null $description Limit Search by Setting Scope to Description (optional)
     * @param  string|null $domain Limit Search by Setting Scope to Domain (optional)
     * @param  string|null $effective_date Limit Search by Setting Scope to Effective Date (optional)
     * @param  string|null $extensible Limit Search by Setting Scope to Extensible (optional)
     * @param  string|null $href Limit Search by Setting Scope to Href (optional)
     * @param  string|null $label Limit Search by Setting Scope to Label (optional)
     * @param  string|null $measure_type SLimit Search by Setting Scope to Measure Type (optional)
     * @param  string|null $name Limit Search by Setting Scope to Name (optional)
     * @param  string|null $preferred_term Limit Search by Setting Scope to Preferred Term (optional)
     * @param  string|null $product Limit Search by Setting Scope to Product (optional)
     * @param  string|null $product_group Limit Search by Setting Scope to Product Group (optional)
     * @param  string|null $registration_status Limit Search by Setting Scope to Registration Status (optional)
     * @param  string|null $role_description Limit Search by Setting Scope to Role Description (optional)
     * @param  string|null $sdtm_target Limit Search by Setting Scope to SDTM Target (optional)
     * @param  string|null $simple_datatype Limit Search by Setting Scope to Simple Datatype (optional)
     * @param  string|null $submission_value Limit Search by Setting Scope to Submission Value (optional)
     * @param  string|null $synonyms Limit Search by Setting Scope to Synonyms (optional)
     * @param  string|null $type Limit Search by Setting Scope to Type (optional)
     * @param  string|null $ui_href Limit Search by Setting Scope to UI Href (optional)
     * @param  string|null $value_domain Limit Search by Setting Scope to Value Domain (optional)
     * @param  string|null $variable_set Limit Search by Setting Scope to Variable Set (optional)
     * @param  string|null $version Limit Search by Setting Scope to Version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSearchGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSearchResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrSearchGet($q, $highlight = null, $start = 0, $page_size = 100, $class = null, $codelist = null, $concept_id = null, $core = null, $data_structure = null, $dataset_structure = null, $definition = null, $description = null, $domain = null, $effective_date = null, $extensible = null, $href = null, $label = null, $measure_type = null, $name = null, $preferred_term = null, $product = null, $product_group = null, $registration_status = null, $role_description = null, $sdtm_target = null, $simple_datatype = null, $submission_value = null, $synonyms = null, $type = null, $ui_href = null, $value_domain = null, $variable_set = null, $version = null, string $contentType = self::contentTypes['mdrSearchGet'][0])
    {
        list($response) = $this->mdrSearchGetWithHttpInfo($q, $highlight, $start, $page_size, $class, $codelist, $concept_id, $core, $data_structure, $dataset_structure, $definition, $description, $domain, $effective_date, $extensible, $href, $label, $measure_type, $name, $preferred_term, $product, $product_group, $registration_status, $role_description, $sdtm_target, $simple_datatype, $submission_value, $synonyms, $type, $ui_href, $value_domain, $variable_set, $version, $contentType);
        return $response;
    }

    /**
     * Operation mdrSearchGetWithHttpInfo
     *
     * @param  string $q Search Term Expression (required)
     * @param  string|null $highlight Search Highlight Expression (optional)
     * @param  float|null $start Initial Search Result Index (optional, default to 0)
     * @param  float|null $page_size Number of Search Results to Return (optional, default to 100)
     * @param  string|null $class Limit Search by Setting Scope to Class (optional)
     * @param  string|null $codelist Limit Search by Setting Scope to Codelist (optional)
     * @param  string|null $concept_id Limit Search by Setting Scope to Concept ID (optional)
     * @param  string|null $core Limit Search by Setting Scope to Core (optional)
     * @param  string|null $data_structure Limit Search by Setting Scope to Data Structure (optional)
     * @param  string|null $dataset_structure Limit Search by Setting Scope to Dataset Structure (optional)
     * @param  string|null $definition Limit Search by Setting Scope to Definition (optional)
     * @param  string|null $description Limit Search by Setting Scope to Description (optional)
     * @param  string|null $domain Limit Search by Setting Scope to Domain (optional)
     * @param  string|null $effective_date Limit Search by Setting Scope to Effective Date (optional)
     * @param  string|null $extensible Limit Search by Setting Scope to Extensible (optional)
     * @param  string|null $href Limit Search by Setting Scope to Href (optional)
     * @param  string|null $label Limit Search by Setting Scope to Label (optional)
     * @param  string|null $measure_type SLimit Search by Setting Scope to Measure Type (optional)
     * @param  string|null $name Limit Search by Setting Scope to Name (optional)
     * @param  string|null $preferred_term Limit Search by Setting Scope to Preferred Term (optional)
     * @param  string|null $product Limit Search by Setting Scope to Product (optional)
     * @param  string|null $product_group Limit Search by Setting Scope to Product Group (optional)
     * @param  string|null $registration_status Limit Search by Setting Scope to Registration Status (optional)
     * @param  string|null $role_description Limit Search by Setting Scope to Role Description (optional)
     * @param  string|null $sdtm_target Limit Search by Setting Scope to SDTM Target (optional)
     * @param  string|null $simple_datatype Limit Search by Setting Scope to Simple Datatype (optional)
     * @param  string|null $submission_value Limit Search by Setting Scope to Submission Value (optional)
     * @param  string|null $synonyms Limit Search by Setting Scope to Synonyms (optional)
     * @param  string|null $type Limit Search by Setting Scope to Type (optional)
     * @param  string|null $ui_href Limit Search by Setting Scope to UI Href (optional)
     * @param  string|null $value_domain Limit Search by Setting Scope to Value Domain (optional)
     * @param  string|null $variable_set Limit Search by Setting Scope to Variable Set (optional)
     * @param  string|null $version Limit Search by Setting Scope to Version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSearchGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSearchResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrSearchGetWithHttpInfo($q, $highlight = null, $start = 0, $page_size = 100, $class = null, $codelist = null, $concept_id = null, $core = null, $data_structure = null, $dataset_structure = null, $definition = null, $description = null, $domain = null, $effective_date = null, $extensible = null, $href = null, $label = null, $measure_type = null, $name = null, $preferred_term = null, $product = null, $product_group = null, $registration_status = null, $role_description = null, $sdtm_target = null, $simple_datatype = null, $submission_value = null, $synonyms = null, $type = null, $ui_href = null, $value_domain = null, $variable_set = null, $version = null, string $contentType = self::contentTypes['mdrSearchGet'][0])
    {
        $request = $this->mdrSearchGetRequest($q, $highlight, $start, $page_size, $class, $codelist, $concept_id, $core, $data_structure, $dataset_structure, $definition, $description, $domain, $effective_date, $extensible, $href, $label, $measure_type, $name, $preferred_term, $product, $product_group, $registration_status, $role_description, $sdtm_target, $simple_datatype, $submission_value, $synonyms, $type, $ui_href, $value_domain, $variable_set, $version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultSearchResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\DefaultSearchResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSearchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrSearchGetAsync
     *
     * @param  string $q Search Term Expression (required)
     * @param  string|null $highlight Search Highlight Expression (optional)
     * @param  float|null $start Initial Search Result Index (optional, default to 0)
     * @param  float|null $page_size Number of Search Results to Return (optional, default to 100)
     * @param  string|null $class Limit Search by Setting Scope to Class (optional)
     * @param  string|null $codelist Limit Search by Setting Scope to Codelist (optional)
     * @param  string|null $concept_id Limit Search by Setting Scope to Concept ID (optional)
     * @param  string|null $core Limit Search by Setting Scope to Core (optional)
     * @param  string|null $data_structure Limit Search by Setting Scope to Data Structure (optional)
     * @param  string|null $dataset_structure Limit Search by Setting Scope to Dataset Structure (optional)
     * @param  string|null $definition Limit Search by Setting Scope to Definition (optional)
     * @param  string|null $description Limit Search by Setting Scope to Description (optional)
     * @param  string|null $domain Limit Search by Setting Scope to Domain (optional)
     * @param  string|null $effective_date Limit Search by Setting Scope to Effective Date (optional)
     * @param  string|null $extensible Limit Search by Setting Scope to Extensible (optional)
     * @param  string|null $href Limit Search by Setting Scope to Href (optional)
     * @param  string|null $label Limit Search by Setting Scope to Label (optional)
     * @param  string|null $measure_type SLimit Search by Setting Scope to Measure Type (optional)
     * @param  string|null $name Limit Search by Setting Scope to Name (optional)
     * @param  string|null $preferred_term Limit Search by Setting Scope to Preferred Term (optional)
     * @param  string|null $product Limit Search by Setting Scope to Product (optional)
     * @param  string|null $product_group Limit Search by Setting Scope to Product Group (optional)
     * @param  string|null $registration_status Limit Search by Setting Scope to Registration Status (optional)
     * @param  string|null $role_description Limit Search by Setting Scope to Role Description (optional)
     * @param  string|null $sdtm_target Limit Search by Setting Scope to SDTM Target (optional)
     * @param  string|null $simple_datatype Limit Search by Setting Scope to Simple Datatype (optional)
     * @param  string|null $submission_value Limit Search by Setting Scope to Submission Value (optional)
     * @param  string|null $synonyms Limit Search by Setting Scope to Synonyms (optional)
     * @param  string|null $type Limit Search by Setting Scope to Type (optional)
     * @param  string|null $ui_href Limit Search by Setting Scope to UI Href (optional)
     * @param  string|null $value_domain Limit Search by Setting Scope to Value Domain (optional)
     * @param  string|null $variable_set Limit Search by Setting Scope to Variable Set (optional)
     * @param  string|null $version Limit Search by Setting Scope to Version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSearchGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSearchGetAsync($q, $highlight = null, $start = 0, $page_size = 100, $class = null, $codelist = null, $concept_id = null, $core = null, $data_structure = null, $dataset_structure = null, $definition = null, $description = null, $domain = null, $effective_date = null, $extensible = null, $href = null, $label = null, $measure_type = null, $name = null, $preferred_term = null, $product = null, $product_group = null, $registration_status = null, $role_description = null, $sdtm_target = null, $simple_datatype = null, $submission_value = null, $synonyms = null, $type = null, $ui_href = null, $value_domain = null, $variable_set = null, $version = null, string $contentType = self::contentTypes['mdrSearchGet'][0])
    {
        return $this->mdrSearchGetAsyncWithHttpInfo($q, $highlight, $start, $page_size, $class, $codelist, $concept_id, $core, $data_structure, $dataset_structure, $definition, $description, $domain, $effective_date, $extensible, $href, $label, $measure_type, $name, $preferred_term, $product, $product_group, $registration_status, $role_description, $sdtm_target, $simple_datatype, $submission_value, $synonyms, $type, $ui_href, $value_domain, $variable_set, $version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrSearchGetAsyncWithHttpInfo
     *
     * @param  string $q Search Term Expression (required)
     * @param  string|null $highlight Search Highlight Expression (optional)
     * @param  float|null $start Initial Search Result Index (optional, default to 0)
     * @param  float|null $page_size Number of Search Results to Return (optional, default to 100)
     * @param  string|null $class Limit Search by Setting Scope to Class (optional)
     * @param  string|null $codelist Limit Search by Setting Scope to Codelist (optional)
     * @param  string|null $concept_id Limit Search by Setting Scope to Concept ID (optional)
     * @param  string|null $core Limit Search by Setting Scope to Core (optional)
     * @param  string|null $data_structure Limit Search by Setting Scope to Data Structure (optional)
     * @param  string|null $dataset_structure Limit Search by Setting Scope to Dataset Structure (optional)
     * @param  string|null $definition Limit Search by Setting Scope to Definition (optional)
     * @param  string|null $description Limit Search by Setting Scope to Description (optional)
     * @param  string|null $domain Limit Search by Setting Scope to Domain (optional)
     * @param  string|null $effective_date Limit Search by Setting Scope to Effective Date (optional)
     * @param  string|null $extensible Limit Search by Setting Scope to Extensible (optional)
     * @param  string|null $href Limit Search by Setting Scope to Href (optional)
     * @param  string|null $label Limit Search by Setting Scope to Label (optional)
     * @param  string|null $measure_type SLimit Search by Setting Scope to Measure Type (optional)
     * @param  string|null $name Limit Search by Setting Scope to Name (optional)
     * @param  string|null $preferred_term Limit Search by Setting Scope to Preferred Term (optional)
     * @param  string|null $product Limit Search by Setting Scope to Product (optional)
     * @param  string|null $product_group Limit Search by Setting Scope to Product Group (optional)
     * @param  string|null $registration_status Limit Search by Setting Scope to Registration Status (optional)
     * @param  string|null $role_description Limit Search by Setting Scope to Role Description (optional)
     * @param  string|null $sdtm_target Limit Search by Setting Scope to SDTM Target (optional)
     * @param  string|null $simple_datatype Limit Search by Setting Scope to Simple Datatype (optional)
     * @param  string|null $submission_value Limit Search by Setting Scope to Submission Value (optional)
     * @param  string|null $synonyms Limit Search by Setting Scope to Synonyms (optional)
     * @param  string|null $type Limit Search by Setting Scope to Type (optional)
     * @param  string|null $ui_href Limit Search by Setting Scope to UI Href (optional)
     * @param  string|null $value_domain Limit Search by Setting Scope to Value Domain (optional)
     * @param  string|null $variable_set Limit Search by Setting Scope to Variable Set (optional)
     * @param  string|null $version Limit Search by Setting Scope to Version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSearchGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSearchGetAsyncWithHttpInfo($q, $highlight = null, $start = 0, $page_size = 100, $class = null, $codelist = null, $concept_id = null, $core = null, $data_structure = null, $dataset_structure = null, $definition = null, $description = null, $domain = null, $effective_date = null, $extensible = null, $href = null, $label = null, $measure_type = null, $name = null, $preferred_term = null, $product = null, $product_group = null, $registration_status = null, $role_description = null, $sdtm_target = null, $simple_datatype = null, $submission_value = null, $synonyms = null, $type = null, $ui_href = null, $value_domain = null, $variable_set = null, $version = null, string $contentType = self::contentTypes['mdrSearchGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSearchResponse';
        $request = $this->mdrSearchGetRequest($q, $highlight, $start, $page_size, $class, $codelist, $concept_id, $core, $data_structure, $dataset_structure, $definition, $description, $domain, $effective_date, $extensible, $href, $label, $measure_type, $name, $preferred_term, $product, $product_group, $registration_status, $role_description, $sdtm_target, $simple_datatype, $submission_value, $synonyms, $type, $ui_href, $value_domain, $variable_set, $version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrSearchGet'
     *
     * @param  string $q Search Term Expression (required)
     * @param  string|null $highlight Search Highlight Expression (optional)
     * @param  float|null $start Initial Search Result Index (optional, default to 0)
     * @param  float|null $page_size Number of Search Results to Return (optional, default to 100)
     * @param  string|null $class Limit Search by Setting Scope to Class (optional)
     * @param  string|null $codelist Limit Search by Setting Scope to Codelist (optional)
     * @param  string|null $concept_id Limit Search by Setting Scope to Concept ID (optional)
     * @param  string|null $core Limit Search by Setting Scope to Core (optional)
     * @param  string|null $data_structure Limit Search by Setting Scope to Data Structure (optional)
     * @param  string|null $dataset_structure Limit Search by Setting Scope to Dataset Structure (optional)
     * @param  string|null $definition Limit Search by Setting Scope to Definition (optional)
     * @param  string|null $description Limit Search by Setting Scope to Description (optional)
     * @param  string|null $domain Limit Search by Setting Scope to Domain (optional)
     * @param  string|null $effective_date Limit Search by Setting Scope to Effective Date (optional)
     * @param  string|null $extensible Limit Search by Setting Scope to Extensible (optional)
     * @param  string|null $href Limit Search by Setting Scope to Href (optional)
     * @param  string|null $label Limit Search by Setting Scope to Label (optional)
     * @param  string|null $measure_type SLimit Search by Setting Scope to Measure Type (optional)
     * @param  string|null $name Limit Search by Setting Scope to Name (optional)
     * @param  string|null $preferred_term Limit Search by Setting Scope to Preferred Term (optional)
     * @param  string|null $product Limit Search by Setting Scope to Product (optional)
     * @param  string|null $product_group Limit Search by Setting Scope to Product Group (optional)
     * @param  string|null $registration_status Limit Search by Setting Scope to Registration Status (optional)
     * @param  string|null $role_description Limit Search by Setting Scope to Role Description (optional)
     * @param  string|null $sdtm_target Limit Search by Setting Scope to SDTM Target (optional)
     * @param  string|null $simple_datatype Limit Search by Setting Scope to Simple Datatype (optional)
     * @param  string|null $submission_value Limit Search by Setting Scope to Submission Value (optional)
     * @param  string|null $synonyms Limit Search by Setting Scope to Synonyms (optional)
     * @param  string|null $type Limit Search by Setting Scope to Type (optional)
     * @param  string|null $ui_href Limit Search by Setting Scope to UI Href (optional)
     * @param  string|null $value_domain Limit Search by Setting Scope to Value Domain (optional)
     * @param  string|null $variable_set Limit Search by Setting Scope to Variable Set (optional)
     * @param  string|null $version Limit Search by Setting Scope to Version (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSearchGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrSearchGetRequest($q, $highlight = null, $start = 0, $page_size = 100, $class = null, $codelist = null, $concept_id = null, $core = null, $data_structure = null, $dataset_structure = null, $definition = null, $description = null, $domain = null, $effective_date = null, $extensible = null, $href = null, $label = null, $measure_type = null, $name = null, $preferred_term = null, $product = null, $product_group = null, $registration_status = null, $role_description = null, $sdtm_target = null, $simple_datatype = null, $submission_value = null, $synonyms = null, $type = null, $ui_href = null, $value_domain = null, $variable_set = null, $version = null, string $contentType = self::contentTypes['mdrSearchGet'][0])
    {

        // verify the required parameter 'q' is set
        if ($q === null || (is_array($q) && count($q) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $q when calling mdrSearchGet'
            );
        }


































        $resourcePath = '/mdr/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $highlight,
            'highlight', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $start,
            'start', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $class,
            'class', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $codelist,
            'codelist', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $concept_id,
            'conceptId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $core,
            'core', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $data_structure,
            'dataStructure', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $dataset_structure,
            'datasetStructure', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $definition,
            'definition', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $description,
            'description', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $domain,
            'domain', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $effective_date,
            'effectiveDate', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $extensible,
            'extensible', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $href,
            'href', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $label,
            'label', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $measure_type,
            'measureType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $preferred_term,
            'preferredTerm', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product,
            'product', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $product_group,
            'productGroup', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $registration_status,
            'registrationStatus', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $role_description,
            'roleDescription', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sdtm_target,
            'sdtmTarget', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $simple_datatype,
            'simpleDatatype', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $submission_value,
            'submissionValue', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $synonyms,
            'synonyms', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ui_href,
            'uiHref', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $value_domain,
            'valueDomain', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $variable_set,
            'variableSet', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $version,
            'version', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrSearchScopesGet
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSearchScopesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MdrSearchScopesGet200Response
     */
    public function mdrSearchScopesGet(string $contentType = self::contentTypes['mdrSearchScopesGet'][0])
    {
        list($response) = $this->mdrSearchScopesGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation mdrSearchScopesGetWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSearchScopesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MdrSearchScopesGet200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrSearchScopesGetWithHttpInfo(string $contentType = self::contentTypes['mdrSearchScopesGet'][0])
    {
        $request = $this->mdrSearchScopesGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\MdrSearchScopesGet200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\MdrSearchScopesGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MdrSearchScopesGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrSearchScopesGetAsync
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSearchScopesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSearchScopesGetAsync(string $contentType = self::contentTypes['mdrSearchScopesGet'][0])
    {
        return $this->mdrSearchScopesGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrSearchScopesGetAsyncWithHttpInfo
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSearchScopesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSearchScopesGetAsyncWithHttpInfo(string $contentType = self::contentTypes['mdrSearchScopesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MdrSearchScopesGet200Response';
        $request = $this->mdrSearchScopesGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrSearchScopesGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSearchScopesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrSearchScopesGetRequest(string $contentType = self::contentTypes['mdrSearchScopesGet'][0])
    {


        $resourcePath = '/mdr/search/scopes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrSearchScopesScopeGet
     *
     * @param  \OpenAPI\Client\Model\DefaultSearchScopes $scope Search Scope (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSearchScopesScopeGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ScopeValues
     */
    public function mdrSearchScopesScopeGet($scope, string $contentType = self::contentTypes['mdrSearchScopesScopeGet'][0])
    {
        list($response) = $this->mdrSearchScopesScopeGetWithHttpInfo($scope, $contentType);
        return $response;
    }

    /**
     * Operation mdrSearchScopesScopeGetWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\DefaultSearchScopes $scope Search Scope (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSearchScopesScopeGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ScopeValues, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrSearchScopesScopeGetWithHttpInfo($scope, string $contentType = self::contentTypes['mdrSearchScopesScopeGet'][0])
    {
        $request = $this->mdrSearchScopesScopeGetRequest($scope, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ScopeValues',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\ScopeValues',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ScopeValues',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrSearchScopesScopeGetAsync
     *
     * @param  \OpenAPI\Client\Model\DefaultSearchScopes $scope Search Scope (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSearchScopesScopeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSearchScopesScopeGetAsync($scope, string $contentType = self::contentTypes['mdrSearchScopesScopeGet'][0])
    {
        return $this->mdrSearchScopesScopeGetAsyncWithHttpInfo($scope, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrSearchScopesScopeGetAsyncWithHttpInfo
     *
     * @param  \OpenAPI\Client\Model\DefaultSearchScopes $scope Search Scope (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSearchScopesScopeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrSearchScopesScopeGetAsyncWithHttpInfo($scope, string $contentType = self::contentTypes['mdrSearchScopesScopeGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ScopeValues';
        $request = $this->mdrSearchScopesScopeGetRequest($scope, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrSearchScopesScopeGet'
     *
     * @param  \OpenAPI\Client\Model\DefaultSearchScopes $scope Search Scope (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrSearchScopesScopeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrSearchScopesScopeGetRequest($scope, string $contentType = self::contentTypes['mdrSearchScopesScopeGet'][0])
    {

        // verify the required parameter 'scope' is set
        if ($scope === null || (is_array($scope) && count($scope) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $scope when calling mdrSearchScopesScopeGet'
            );
        }


        $resourcePath = '/mdr/search/scopes/{scope}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($scope !== null) {
            $resourcePath = str_replace(
                '{' . 'scope' . '}',
                ObjectSerializer::toPathValue($scope),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}

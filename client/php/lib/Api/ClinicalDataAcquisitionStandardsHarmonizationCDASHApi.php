<?php
/**
 * ClinicalDataAcquisitionStandardsHarmonizationCDASHApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CDISC Library API
 *
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.16.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ClinicalDataAcquisitionStandardsHarmonizationCDASHApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ClinicalDataAcquisitionStandardsHarmonizationCDASHApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'mdrCdashVersionClassesClassDomainsGet' => [
            'application/json',
        ],
        'mdrCdashVersionClassesClassFieldsFieldGet' => [
            'application/json',
        ],
        'mdrCdashVersionClassesClassGet' => [
            'application/json',
        ],
        'mdrCdashVersionClassesGet' => [
            'application/json',
        ],
        'mdrCdashVersionDomainsDomainFieldsFieldGet' => [
            'application/json',
        ],
        'mdrCdashVersionDomainsDomainFieldsGet' => [
            'application/json',
        ],
        'mdrCdashVersionDomainsDomainGet' => [
            'application/json',
        ],
        'mdrCdashVersionDomainsGet' => [
            'application/json',
        ],
        'mdrCdashVersionGet' => [
            'application/json',
        ],
        'mdrRootCdashClassesClassFieldsFieldGet' => [
            'application/json',
        ],
        'mdrRootCdashDomainsDomainFieldsFieldGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation mdrCdashVersionClassesClassDomainsGet
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class CDASH Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionClassesClassDomainsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CdashClassDomains|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrCdashVersionClassesClassDomainsGet($version, $class, string $contentType = self::contentTypes['mdrCdashVersionClassesClassDomainsGet'][0])
    {
        list($response) = $this->mdrCdashVersionClassesClassDomainsGetWithHttpInfo($version, $class, $contentType);
        return $response;
    }

    /**
     * Operation mdrCdashVersionClassesClassDomainsGetWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class CDASH Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionClassesClassDomainsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CdashClassDomains|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrCdashVersionClassesClassDomainsGetWithHttpInfo($version, $class, string $contentType = self::contentTypes['mdrCdashVersionClassesClassDomainsGet'][0])
    {
        $request = $this->mdrCdashVersionClassesClassDomainsGetRequest($version, $class, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CdashClassDomains',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\CdashClassDomains',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CdashClassDomains',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrCdashVersionClassesClassDomainsGetAsync
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class CDASH Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionClassesClassDomainsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrCdashVersionClassesClassDomainsGetAsync($version, $class, string $contentType = self::contentTypes['mdrCdashVersionClassesClassDomainsGet'][0])
    {
        return $this->mdrCdashVersionClassesClassDomainsGetAsyncWithHttpInfo($version, $class, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrCdashVersionClassesClassDomainsGetAsyncWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class CDASH Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionClassesClassDomainsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrCdashVersionClassesClassDomainsGetAsyncWithHttpInfo($version, $class, string $contentType = self::contentTypes['mdrCdashVersionClassesClassDomainsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CdashClassDomains';
        $request = $this->mdrCdashVersionClassesClassDomainsGetRequest($version, $class, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrCdashVersionClassesClassDomainsGet'
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class CDASH Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionClassesClassDomainsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrCdashVersionClassesClassDomainsGetRequest($version, $class, string $contentType = self::contentTypes['mdrCdashVersionClassesClassDomainsGet'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling mdrCdashVersionClassesClassDomainsGet'
            );
        }

        // verify the required parameter 'class' is set
        if ($class === null || (is_array($class) && count($class) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $class when calling mdrCdashVersionClassesClassDomainsGet'
            );
        }


        $resourcePath = '/mdr/cdash/{version}/classes/{class}/domains';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                '{' . 'class' . '}',
                ObjectSerializer::toPathValue($class),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrCdashVersionClassesClassFieldsFieldGet
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class CDASH Class Identifier (required)
     * @param  string $field CDASH Field Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionClassesClassFieldsFieldGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CdashClassField|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrCdashVersionClassesClassFieldsFieldGet($version, $class, $field, string $contentType = self::contentTypes['mdrCdashVersionClassesClassFieldsFieldGet'][0])
    {
        list($response) = $this->mdrCdashVersionClassesClassFieldsFieldGetWithHttpInfo($version, $class, $field, $contentType);
        return $response;
    }

    /**
     * Operation mdrCdashVersionClassesClassFieldsFieldGetWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class CDASH Class Identifier (required)
     * @param  string $field CDASH Field Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionClassesClassFieldsFieldGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CdashClassField|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrCdashVersionClassesClassFieldsFieldGetWithHttpInfo($version, $class, $field, string $contentType = self::contentTypes['mdrCdashVersionClassesClassFieldsFieldGet'][0])
    {
        $request = $this->mdrCdashVersionClassesClassFieldsFieldGetRequest($version, $class, $field, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CdashClassField',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\CdashClassField',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CdashClassField',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrCdashVersionClassesClassFieldsFieldGetAsync
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class CDASH Class Identifier (required)
     * @param  string $field CDASH Field Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionClassesClassFieldsFieldGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrCdashVersionClassesClassFieldsFieldGetAsync($version, $class, $field, string $contentType = self::contentTypes['mdrCdashVersionClassesClassFieldsFieldGet'][0])
    {
        return $this->mdrCdashVersionClassesClassFieldsFieldGetAsyncWithHttpInfo($version, $class, $field, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrCdashVersionClassesClassFieldsFieldGetAsyncWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class CDASH Class Identifier (required)
     * @param  string $field CDASH Field Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionClassesClassFieldsFieldGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrCdashVersionClassesClassFieldsFieldGetAsyncWithHttpInfo($version, $class, $field, string $contentType = self::contentTypes['mdrCdashVersionClassesClassFieldsFieldGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CdashClassField';
        $request = $this->mdrCdashVersionClassesClassFieldsFieldGetRequest($version, $class, $field, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrCdashVersionClassesClassFieldsFieldGet'
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class CDASH Class Identifier (required)
     * @param  string $field CDASH Field Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionClassesClassFieldsFieldGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrCdashVersionClassesClassFieldsFieldGetRequest($version, $class, $field, string $contentType = self::contentTypes['mdrCdashVersionClassesClassFieldsFieldGet'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling mdrCdashVersionClassesClassFieldsFieldGet'
            );
        }

        // verify the required parameter 'class' is set
        if ($class === null || (is_array($class) && count($class) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $class when calling mdrCdashVersionClassesClassFieldsFieldGet'
            );
        }

        // verify the required parameter 'field' is set
        if ($field === null || (is_array($field) && count($field) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field when calling mdrCdashVersionClassesClassFieldsFieldGet'
            );
        }


        $resourcePath = '/mdr/cdash/{version}/classes/{class}/fields/{field}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                '{' . 'class' . '}',
                ObjectSerializer::toPathValue($class),
                $resourcePath
            );
        }
        // path params
        if ($field !== null) {
            $resourcePath = str_replace(
                '{' . 'field' . '}',
                ObjectSerializer::toPathValue($field),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrCdashVersionClassesClassGet
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class CDASH Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionClassesClassGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CdashClass|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrCdashVersionClassesClassGet($version, $class, string $contentType = self::contentTypes['mdrCdashVersionClassesClassGet'][0])
    {
        list($response) = $this->mdrCdashVersionClassesClassGetWithHttpInfo($version, $class, $contentType);
        return $response;
    }

    /**
     * Operation mdrCdashVersionClassesClassGetWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class CDASH Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionClassesClassGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CdashClass|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrCdashVersionClassesClassGetWithHttpInfo($version, $class, string $contentType = self::contentTypes['mdrCdashVersionClassesClassGet'][0])
    {
        $request = $this->mdrCdashVersionClassesClassGetRequest($version, $class, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CdashClass',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\CdashClass',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CdashClass',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrCdashVersionClassesClassGetAsync
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class CDASH Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionClassesClassGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrCdashVersionClassesClassGetAsync($version, $class, string $contentType = self::contentTypes['mdrCdashVersionClassesClassGet'][0])
    {
        return $this->mdrCdashVersionClassesClassGetAsyncWithHttpInfo($version, $class, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrCdashVersionClassesClassGetAsyncWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class CDASH Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionClassesClassGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrCdashVersionClassesClassGetAsyncWithHttpInfo($version, $class, string $contentType = self::contentTypes['mdrCdashVersionClassesClassGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CdashClass';
        $request = $this->mdrCdashVersionClassesClassGetRequest($version, $class, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrCdashVersionClassesClassGet'
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $class CDASH Class Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionClassesClassGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrCdashVersionClassesClassGetRequest($version, $class, string $contentType = self::contentTypes['mdrCdashVersionClassesClassGet'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling mdrCdashVersionClassesClassGet'
            );
        }

        // verify the required parameter 'class' is set
        if ($class === null || (is_array($class) && count($class) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $class when calling mdrCdashVersionClassesClassGet'
            );
        }


        $resourcePath = '/mdr/cdash/{version}/classes/{class}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                '{' . 'class' . '}',
                ObjectSerializer::toPathValue($class),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrCdashVersionClassesGet
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionClassesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CdashProductClasses|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrCdashVersionClassesGet($version, string $contentType = self::contentTypes['mdrCdashVersionClassesGet'][0])
    {
        list($response) = $this->mdrCdashVersionClassesGetWithHttpInfo($version, $contentType);
        return $response;
    }

    /**
     * Operation mdrCdashVersionClassesGetWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionClassesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CdashProductClasses|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrCdashVersionClassesGetWithHttpInfo($version, string $contentType = self::contentTypes['mdrCdashVersionClassesGet'][0])
    {
        $request = $this->mdrCdashVersionClassesGetRequest($version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CdashProductClasses',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\CdashProductClasses',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CdashProductClasses',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrCdashVersionClassesGetAsync
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionClassesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrCdashVersionClassesGetAsync($version, string $contentType = self::contentTypes['mdrCdashVersionClassesGet'][0])
    {
        return $this->mdrCdashVersionClassesGetAsyncWithHttpInfo($version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrCdashVersionClassesGetAsyncWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionClassesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrCdashVersionClassesGetAsyncWithHttpInfo($version, string $contentType = self::contentTypes['mdrCdashVersionClassesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CdashProductClasses';
        $request = $this->mdrCdashVersionClassesGetRequest($version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrCdashVersionClassesGet'
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionClassesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrCdashVersionClassesGetRequest($version, string $contentType = self::contentTypes['mdrCdashVersionClassesGet'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling mdrCdashVersionClassesGet'
            );
        }


        $resourcePath = '/mdr/cdash/{version}/classes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrCdashVersionDomainsDomainFieldsFieldGet
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $domain CDASH Domain Identifier (required)
     * @param  string $field CDASH Field Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionDomainsDomainFieldsFieldGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CdashDomainField|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrCdashVersionDomainsDomainFieldsFieldGet($version, $domain, $field, string $contentType = self::contentTypes['mdrCdashVersionDomainsDomainFieldsFieldGet'][0])
    {
        list($response) = $this->mdrCdashVersionDomainsDomainFieldsFieldGetWithHttpInfo($version, $domain, $field, $contentType);
        return $response;
    }

    /**
     * Operation mdrCdashVersionDomainsDomainFieldsFieldGetWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $domain CDASH Domain Identifier (required)
     * @param  string $field CDASH Field Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionDomainsDomainFieldsFieldGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CdashDomainField|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrCdashVersionDomainsDomainFieldsFieldGetWithHttpInfo($version, $domain, $field, string $contentType = self::contentTypes['mdrCdashVersionDomainsDomainFieldsFieldGet'][0])
    {
        $request = $this->mdrCdashVersionDomainsDomainFieldsFieldGetRequest($version, $domain, $field, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CdashDomainField',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\CdashDomainField',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CdashDomainField',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrCdashVersionDomainsDomainFieldsFieldGetAsync
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $domain CDASH Domain Identifier (required)
     * @param  string $field CDASH Field Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionDomainsDomainFieldsFieldGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrCdashVersionDomainsDomainFieldsFieldGetAsync($version, $domain, $field, string $contentType = self::contentTypes['mdrCdashVersionDomainsDomainFieldsFieldGet'][0])
    {
        return $this->mdrCdashVersionDomainsDomainFieldsFieldGetAsyncWithHttpInfo($version, $domain, $field, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrCdashVersionDomainsDomainFieldsFieldGetAsyncWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $domain CDASH Domain Identifier (required)
     * @param  string $field CDASH Field Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionDomainsDomainFieldsFieldGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrCdashVersionDomainsDomainFieldsFieldGetAsyncWithHttpInfo($version, $domain, $field, string $contentType = self::contentTypes['mdrCdashVersionDomainsDomainFieldsFieldGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CdashDomainField';
        $request = $this->mdrCdashVersionDomainsDomainFieldsFieldGetRequest($version, $domain, $field, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrCdashVersionDomainsDomainFieldsFieldGet'
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $domain CDASH Domain Identifier (required)
     * @param  string $field CDASH Field Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionDomainsDomainFieldsFieldGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrCdashVersionDomainsDomainFieldsFieldGetRequest($version, $domain, $field, string $contentType = self::contentTypes['mdrCdashVersionDomainsDomainFieldsFieldGet'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling mdrCdashVersionDomainsDomainFieldsFieldGet'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling mdrCdashVersionDomainsDomainFieldsFieldGet'
            );
        }

        // verify the required parameter 'field' is set
        if ($field === null || (is_array($field) && count($field) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field when calling mdrCdashVersionDomainsDomainFieldsFieldGet'
            );
        }


        $resourcePath = '/mdr/cdash/{version}/domains/{domain}/fields/{field}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }
        // path params
        if ($field !== null) {
            $resourcePath = str_replace(
                '{' . 'field' . '}',
                ObjectSerializer::toPathValue($field),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrCdashVersionDomainsDomainFieldsGet
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $domain CDASH Domain Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionDomainsDomainFieldsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CdashDomainFields|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrCdashVersionDomainsDomainFieldsGet($version, $domain, string $contentType = self::contentTypes['mdrCdashVersionDomainsDomainFieldsGet'][0])
    {
        list($response) = $this->mdrCdashVersionDomainsDomainFieldsGetWithHttpInfo($version, $domain, $contentType);
        return $response;
    }

    /**
     * Operation mdrCdashVersionDomainsDomainFieldsGetWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $domain CDASH Domain Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionDomainsDomainFieldsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CdashDomainFields|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrCdashVersionDomainsDomainFieldsGetWithHttpInfo($version, $domain, string $contentType = self::contentTypes['mdrCdashVersionDomainsDomainFieldsGet'][0])
    {
        $request = $this->mdrCdashVersionDomainsDomainFieldsGetRequest($version, $domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CdashDomainFields',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\CdashDomainFields',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CdashDomainFields',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrCdashVersionDomainsDomainFieldsGetAsync
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $domain CDASH Domain Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionDomainsDomainFieldsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrCdashVersionDomainsDomainFieldsGetAsync($version, $domain, string $contentType = self::contentTypes['mdrCdashVersionDomainsDomainFieldsGet'][0])
    {
        return $this->mdrCdashVersionDomainsDomainFieldsGetAsyncWithHttpInfo($version, $domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrCdashVersionDomainsDomainFieldsGetAsyncWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $domain CDASH Domain Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionDomainsDomainFieldsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrCdashVersionDomainsDomainFieldsGetAsyncWithHttpInfo($version, $domain, string $contentType = self::contentTypes['mdrCdashVersionDomainsDomainFieldsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CdashDomainFields';
        $request = $this->mdrCdashVersionDomainsDomainFieldsGetRequest($version, $domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrCdashVersionDomainsDomainFieldsGet'
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $domain CDASH Domain Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionDomainsDomainFieldsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrCdashVersionDomainsDomainFieldsGetRequest($version, $domain, string $contentType = self::contentTypes['mdrCdashVersionDomainsDomainFieldsGet'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling mdrCdashVersionDomainsDomainFieldsGet'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling mdrCdashVersionDomainsDomainFieldsGet'
            );
        }


        $resourcePath = '/mdr/cdash/{version}/domains/{domain}/fields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrCdashVersionDomainsDomainGet
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $domain CDASH Domain Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionDomainsDomainGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CdashDomain|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrCdashVersionDomainsDomainGet($version, $domain, string $contentType = self::contentTypes['mdrCdashVersionDomainsDomainGet'][0])
    {
        list($response) = $this->mdrCdashVersionDomainsDomainGetWithHttpInfo($version, $domain, $contentType);
        return $response;
    }

    /**
     * Operation mdrCdashVersionDomainsDomainGetWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $domain CDASH Domain Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionDomainsDomainGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CdashDomain|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrCdashVersionDomainsDomainGetWithHttpInfo($version, $domain, string $contentType = self::contentTypes['mdrCdashVersionDomainsDomainGet'][0])
    {
        $request = $this->mdrCdashVersionDomainsDomainGetRequest($version, $domain, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CdashDomain',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\CdashDomain',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CdashDomain',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrCdashVersionDomainsDomainGetAsync
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $domain CDASH Domain Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionDomainsDomainGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrCdashVersionDomainsDomainGetAsync($version, $domain, string $contentType = self::contentTypes['mdrCdashVersionDomainsDomainGet'][0])
    {
        return $this->mdrCdashVersionDomainsDomainGetAsyncWithHttpInfo($version, $domain, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrCdashVersionDomainsDomainGetAsyncWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $domain CDASH Domain Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionDomainsDomainGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrCdashVersionDomainsDomainGetAsyncWithHttpInfo($version, $domain, string $contentType = self::contentTypes['mdrCdashVersionDomainsDomainGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CdashDomain';
        $request = $this->mdrCdashVersionDomainsDomainGetRequest($version, $domain, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrCdashVersionDomainsDomainGet'
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $domain CDASH Domain Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionDomainsDomainGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrCdashVersionDomainsDomainGetRequest($version, $domain, string $contentType = self::contentTypes['mdrCdashVersionDomainsDomainGet'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling mdrCdashVersionDomainsDomainGet'
            );
        }

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling mdrCdashVersionDomainsDomainGet'
            );
        }


        $resourcePath = '/mdr/cdash/{version}/domains/{domain}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }
        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrCdashVersionDomainsGet
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionDomainsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CdashProductDomains|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrCdashVersionDomainsGet($version, string $contentType = self::contentTypes['mdrCdashVersionDomainsGet'][0])
    {
        list($response) = $this->mdrCdashVersionDomainsGetWithHttpInfo($version, $contentType);
        return $response;
    }

    /**
     * Operation mdrCdashVersionDomainsGetWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionDomainsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CdashProductDomains|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrCdashVersionDomainsGetWithHttpInfo($version, string $contentType = self::contentTypes['mdrCdashVersionDomainsGet'][0])
    {
        $request = $this->mdrCdashVersionDomainsGetRequest($version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CdashProductDomains',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\CdashProductDomains',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CdashProductDomains',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrCdashVersionDomainsGetAsync
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionDomainsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrCdashVersionDomainsGetAsync($version, string $contentType = self::contentTypes['mdrCdashVersionDomainsGet'][0])
    {
        return $this->mdrCdashVersionDomainsGetAsyncWithHttpInfo($version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrCdashVersionDomainsGetAsyncWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionDomainsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrCdashVersionDomainsGetAsyncWithHttpInfo($version, string $contentType = self::contentTypes['mdrCdashVersionDomainsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CdashProductDomains';
        $request = $this->mdrCdashVersionDomainsGetRequest($version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrCdashVersionDomainsGet'
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionDomainsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrCdashVersionDomainsGetRequest($version, string $contentType = self::contentTypes['mdrCdashVersionDomainsGet'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling mdrCdashVersionDomainsGet'
            );
        }


        $resourcePath = '/mdr/cdash/{version}/domains';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrCdashVersionGet
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CdashProduct|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrCdashVersionGet($version, string $contentType = self::contentTypes['mdrCdashVersionGet'][0])
    {
        list($response) = $this->mdrCdashVersionGetWithHttpInfo($version, $contentType);
        return $response;
    }

    /**
     * Operation mdrCdashVersionGetWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CdashProduct|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrCdashVersionGetWithHttpInfo($version, string $contentType = self::contentTypes['mdrCdashVersionGet'][0])
    {
        $request = $this->mdrCdashVersionGetRequest($version, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\CdashProduct',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\CdashProduct',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CdashProduct',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrCdashVersionGetAsync
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrCdashVersionGetAsync($version, string $contentType = self::contentTypes['mdrCdashVersionGet'][0])
    {
        return $this->mdrCdashVersionGetAsyncWithHttpInfo($version, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrCdashVersionGetAsyncWithHttpInfo
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrCdashVersionGetAsyncWithHttpInfo($version, string $contentType = self::contentTypes['mdrCdashVersionGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CdashProduct';
        $request = $this->mdrCdashVersionGetRequest($version, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrCdashVersionGet'
     *
     * @param  string $version CDISC Library Product Version (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrCdashVersionGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrCdashVersionGetRequest($version, string $contentType = self::contentTypes['mdrCdashVersionGet'][0])
    {

        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling mdrCdashVersionGet'
            );
        }


        $resourcePath = '/mdr/cdash/{version}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrRootCdashClassesClassFieldsFieldGet
     *
     * @param  string $class CDASH Class Identifier (required)
     * @param  string $field CDASH Field Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrRootCdashClassesClassFieldsFieldGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RootCdashClassField|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrRootCdashClassesClassFieldsFieldGet($class, $field, string $contentType = self::contentTypes['mdrRootCdashClassesClassFieldsFieldGet'][0])
    {
        list($response) = $this->mdrRootCdashClassesClassFieldsFieldGetWithHttpInfo($class, $field, $contentType);
        return $response;
    }

    /**
     * Operation mdrRootCdashClassesClassFieldsFieldGetWithHttpInfo
     *
     * @param  string $class CDASH Class Identifier (required)
     * @param  string $field CDASH Field Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrRootCdashClassesClassFieldsFieldGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RootCdashClassField|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrRootCdashClassesClassFieldsFieldGetWithHttpInfo($class, $field, string $contentType = self::contentTypes['mdrRootCdashClassesClassFieldsFieldGet'][0])
    {
        $request = $this->mdrRootCdashClassesClassFieldsFieldGetRequest($class, $field, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\RootCdashClassField',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\RootCdashClassField',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RootCdashClassField',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrRootCdashClassesClassFieldsFieldGetAsync
     *
     * @param  string $class CDASH Class Identifier (required)
     * @param  string $field CDASH Field Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrRootCdashClassesClassFieldsFieldGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrRootCdashClassesClassFieldsFieldGetAsync($class, $field, string $contentType = self::contentTypes['mdrRootCdashClassesClassFieldsFieldGet'][0])
    {
        return $this->mdrRootCdashClassesClassFieldsFieldGetAsyncWithHttpInfo($class, $field, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrRootCdashClassesClassFieldsFieldGetAsyncWithHttpInfo
     *
     * @param  string $class CDASH Class Identifier (required)
     * @param  string $field CDASH Field Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrRootCdashClassesClassFieldsFieldGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrRootCdashClassesClassFieldsFieldGetAsyncWithHttpInfo($class, $field, string $contentType = self::contentTypes['mdrRootCdashClassesClassFieldsFieldGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RootCdashClassField';
        $request = $this->mdrRootCdashClassesClassFieldsFieldGetRequest($class, $field, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrRootCdashClassesClassFieldsFieldGet'
     *
     * @param  string $class CDASH Class Identifier (required)
     * @param  string $field CDASH Field Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrRootCdashClassesClassFieldsFieldGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrRootCdashClassesClassFieldsFieldGetRequest($class, $field, string $contentType = self::contentTypes['mdrRootCdashClassesClassFieldsFieldGet'][0])
    {

        // verify the required parameter 'class' is set
        if ($class === null || (is_array($class) && count($class) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $class when calling mdrRootCdashClassesClassFieldsFieldGet'
            );
        }

        // verify the required parameter 'field' is set
        if ($field === null || (is_array($field) && count($field) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field when calling mdrRootCdashClassesClassFieldsFieldGet'
            );
        }


        $resourcePath = '/mdr/root/cdash/classes/{class}/fields/{field}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                '{' . 'class' . '}',
                ObjectSerializer::toPathValue($class),
                $resourcePath
            );
        }
        // path params
        if ($field !== null) {
            $resourcePath = str_replace(
                '{' . 'field' . '}',
                ObjectSerializer::toPathValue($field),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation mdrRootCdashDomainsDomainFieldsFieldGet
     *
     * @param  string $domain CDASH Domain Identifier (required)
     * @param  string $field CDASH Field Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrRootCdashDomainsDomainFieldsFieldGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RootCdashDomainField|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse
     */
    public function mdrRootCdashDomainsDomainFieldsFieldGet($domain, $field, string $contentType = self::contentTypes['mdrRootCdashDomainsDomainFieldsFieldGet'][0])
    {
        list($response) = $this->mdrRootCdashDomainsDomainFieldsFieldGetWithHttpInfo($domain, $field, $contentType);
        return $response;
    }

    /**
     * Operation mdrRootCdashDomainsDomainFieldsFieldGetWithHttpInfo
     *
     * @param  string $domain CDASH Domain Identifier (required)
     * @param  string $field CDASH Field Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrRootCdashDomainsDomainFieldsFieldGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RootCdashDomainField|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse|\OpenAPI\Client\Model\DefaultErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function mdrRootCdashDomainsDomainFieldsFieldGetWithHttpInfo($domain, $field, string $contentType = self::contentTypes['mdrRootCdashDomainsDomainFieldsFieldGet'][0])
    {
        $request = $this->mdrRootCdashDomainsDomainFieldsFieldGetRequest($domain, $field, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\RootCdashDomainField',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 405:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 406:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 503:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
                case 504:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\RootCdashDomainField',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RootCdashDomainField',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation mdrRootCdashDomainsDomainFieldsFieldGetAsync
     *
     * @param  string $domain CDASH Domain Identifier (required)
     * @param  string $field CDASH Field Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrRootCdashDomainsDomainFieldsFieldGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrRootCdashDomainsDomainFieldsFieldGetAsync($domain, $field, string $contentType = self::contentTypes['mdrRootCdashDomainsDomainFieldsFieldGet'][0])
    {
        return $this->mdrRootCdashDomainsDomainFieldsFieldGetAsyncWithHttpInfo($domain, $field, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation mdrRootCdashDomainsDomainFieldsFieldGetAsyncWithHttpInfo
     *
     * @param  string $domain CDASH Domain Identifier (required)
     * @param  string $field CDASH Field Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrRootCdashDomainsDomainFieldsFieldGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function mdrRootCdashDomainsDomainFieldsFieldGetAsyncWithHttpInfo($domain, $field, string $contentType = self::contentTypes['mdrRootCdashDomainsDomainFieldsFieldGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RootCdashDomainField';
        $request = $this->mdrRootCdashDomainsDomainFieldsFieldGetRequest($domain, $field, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'mdrRootCdashDomainsDomainFieldsFieldGet'
     *
     * @param  string $domain CDASH Domain Identifier (required)
     * @param  string $field CDASH Field Identifier (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['mdrRootCdashDomainsDomainFieldsFieldGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function mdrRootCdashDomainsDomainFieldsFieldGetRequest($domain, $field, string $contentType = self::contentTypes['mdrRootCdashDomainsDomainFieldsFieldGet'][0])
    {

        // verify the required parameter 'domain' is set
        if ($domain === null || (is_array($domain) && count($domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domain when calling mdrRootCdashDomainsDomainFieldsFieldGet'
            );
        }

        // verify the required parameter 'field' is set
        if ($field === null || (is_array($field) && count($field) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $field when calling mdrRootCdashDomainsDomainFieldsFieldGet'
            );
        }


        $resourcePath = '/mdr/root/cdash/domains/{domain}/fields/{field}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($domain !== null) {
            $resourcePath = str_replace(
                '{' . 'domain' . '}',
                ObjectSerializer::toPathValue($domain),
                $resourcePath
            );
        }
        // path params
        if ($field !== null) {
            $resourcePath = str_replace(
                '{' . 'field' . '}',
                ObjectSerializer::toPathValue($field),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}

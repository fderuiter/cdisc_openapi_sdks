/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISENDImplementationGuideSENDIGApi_H
#define OAI_OAISENDImplementationGuideSENDIGApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDefaultErrorResponse.h"
#include "OAIExportSendigDatasetsTable.h"
#include "OAIExportSendigVariablesTable.h"
#include "OAIExportSendigWorkbook.h"
#include "OAIRootSendigDatasetVariable.h"
#include "OAISendigClass.h"
#include "OAISendigClassDatasets.h"
#include "OAISendigClasses.h"
#include "OAISendigDataset.h"
#include "OAISendigDatasetVariable.h"
#include "OAISendigDatasetVariables.h"
#include "OAISendigDatasets.h"
#include "OAISendigProduct.h"
#include "OAIXmlRootSendigDatasetVariable.h"
#include "OAIXmlSendigClass.h"
#include "OAIXmlSendigClassDatasets.h"
#include "OAIXmlSendigClasses.h"
#include "OAIXmlSendigDataset.h"
#include "OAIXmlSendigDatasetVariable.h"
#include "OAIXmlSendigDatasetVariables.h"
#include "OAIXmlSendigDatasets.h"
#include "OAIXmlSendigProduct.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISENDImplementationGuideSENDIGApi : public QObject {
    Q_OBJECT

public:
    OAISENDImplementationGuideSENDIGApi(const int timeOut = 0);
    ~OAISENDImplementationGuideSENDIGApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  dataset QString [required]
    * @param[in]  var QString [required]
    */
    virtual void mdrRootSendigDatasetsDatasetVariablesVarGet(const QString &dataset, const QString &var);

    /**
    * @param[in]  version QString [required]
    * @param[in]  r_class QString [required]
    */
    virtual void mdrSendigVersionClassesClassDatasetsGet(const QString &version, const QString &r_class);

    /**
    * @param[in]  version QString [required]
    * @param[in]  r_class QString [required]
    */
    virtual void mdrSendigVersionClassesClassGet(const QString &version, const QString &r_class);

    /**
    * @param[in]  version QString [required]
    */
    virtual void mdrSendigVersionClassesGet(const QString &version);

    /**
    * @param[in]  version QString [required]
    * @param[in]  dataset QString [required]
    */
    virtual void mdrSendigVersionDatasetsDatasetGet(const QString &version, const QString &dataset);

    /**
    * @param[in]  version QString [required]
    * @param[in]  dataset QString [required]
    */
    virtual void mdrSendigVersionDatasetsDatasetVariablesGet(const QString &version, const QString &dataset);

    /**
    * @param[in]  version QString [required]
    * @param[in]  dataset QString [required]
    * @param[in]  var QString [required]
    */
    virtual void mdrSendigVersionDatasetsDatasetVariablesVarGet(const QString &version, const QString &dataset, const QString &var);

    /**
    * @param[in]  version QString [required]
    */
    virtual void mdrSendigVersionDatasetsGet(const QString &version);

    /**
    * @param[in]  version QString [required]
    */
    virtual void mdrSendigVersionGet(const QString &version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void mdrRootSendigDatasetsDatasetVariablesVarGetCallback(OAIHttpRequestWorker *worker);
    void mdrSendigVersionClassesClassDatasetsGetCallback(OAIHttpRequestWorker *worker);
    void mdrSendigVersionClassesClassGetCallback(OAIHttpRequestWorker *worker);
    void mdrSendigVersionClassesGetCallback(OAIHttpRequestWorker *worker);
    void mdrSendigVersionDatasetsDatasetGetCallback(OAIHttpRequestWorker *worker);
    void mdrSendigVersionDatasetsDatasetVariablesGetCallback(OAIHttpRequestWorker *worker);
    void mdrSendigVersionDatasetsDatasetVariablesVarGetCallback(OAIHttpRequestWorker *worker);
    void mdrSendigVersionDatasetsGetCallback(OAIHttpRequestWorker *worker);
    void mdrSendigVersionGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void mdrRootSendigDatasetsDatasetVariablesVarGetSignal(OAIRootSendigDatasetVariable summary);
    void mdrSendigVersionClassesClassDatasetsGetSignal(OAISendigClassDatasets summary);
    void mdrSendigVersionClassesClassGetSignal(OAISendigClass summary);
    void mdrSendigVersionClassesGetSignal(OAISendigClasses summary);
    void mdrSendigVersionDatasetsDatasetGetSignal(OAISendigDataset summary);
    void mdrSendigVersionDatasetsDatasetVariablesGetSignal(OAISendigDatasetVariables summary);
    void mdrSendigVersionDatasetsDatasetVariablesVarGetSignal(OAISendigDatasetVariable summary);
    void mdrSendigVersionDatasetsGetSignal(OAISendigDatasets summary);
    void mdrSendigVersionGetSignal(OAISendigProduct summary);


    void mdrRootSendigDatasetsDatasetVariablesVarGetSignalFull(OAIHttpRequestWorker *worker, OAIRootSendigDatasetVariable summary);
    void mdrSendigVersionClassesClassDatasetsGetSignalFull(OAIHttpRequestWorker *worker, OAISendigClassDatasets summary);
    void mdrSendigVersionClassesClassGetSignalFull(OAIHttpRequestWorker *worker, OAISendigClass summary);
    void mdrSendigVersionClassesGetSignalFull(OAIHttpRequestWorker *worker, OAISendigClasses summary);
    void mdrSendigVersionDatasetsDatasetGetSignalFull(OAIHttpRequestWorker *worker, OAISendigDataset summary);
    void mdrSendigVersionDatasetsDatasetVariablesGetSignalFull(OAIHttpRequestWorker *worker, OAISendigDatasetVariables summary);
    void mdrSendigVersionDatasetsDatasetVariablesVarGetSignalFull(OAIHttpRequestWorker *worker, OAISendigDatasetVariable summary);
    void mdrSendigVersionDatasetsGetSignalFull(OAIHttpRequestWorker *worker, OAISendigDatasets summary);
    void mdrSendigVersionGetSignalFull(OAIHttpRequestWorker *worker, OAISendigProduct summary);

    Q_DECL_DEPRECATED_X("Use mdrRootSendigDatasetsDatasetVariablesVarGetSignalError() instead")
    void mdrRootSendigDatasetsDatasetVariablesVarGetSignalE(OAIRootSendigDatasetVariable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrRootSendigDatasetsDatasetVariablesVarGetSignalError(OAIRootSendigDatasetVariable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSendigVersionClassesClassDatasetsGetSignalError() instead")
    void mdrSendigVersionClassesClassDatasetsGetSignalE(OAISendigClassDatasets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSendigVersionClassesClassDatasetsGetSignalError(OAISendigClassDatasets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSendigVersionClassesClassGetSignalError() instead")
    void mdrSendigVersionClassesClassGetSignalE(OAISendigClass summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSendigVersionClassesClassGetSignalError(OAISendigClass summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSendigVersionClassesGetSignalError() instead")
    void mdrSendigVersionClassesGetSignalE(OAISendigClasses summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSendigVersionClassesGetSignalError(OAISendigClasses summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSendigVersionDatasetsDatasetGetSignalError() instead")
    void mdrSendigVersionDatasetsDatasetGetSignalE(OAISendigDataset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSendigVersionDatasetsDatasetGetSignalError(OAISendigDataset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSendigVersionDatasetsDatasetVariablesGetSignalError() instead")
    void mdrSendigVersionDatasetsDatasetVariablesGetSignalE(OAISendigDatasetVariables summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSendigVersionDatasetsDatasetVariablesGetSignalError(OAISendigDatasetVariables summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSendigVersionDatasetsDatasetVariablesVarGetSignalError() instead")
    void mdrSendigVersionDatasetsDatasetVariablesVarGetSignalE(OAISendigDatasetVariable summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSendigVersionDatasetsDatasetVariablesVarGetSignalError(OAISendigDatasetVariable summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSendigVersionDatasetsGetSignalError() instead")
    void mdrSendigVersionDatasetsGetSignalE(OAISendigDatasets summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSendigVersionDatasetsGetSignalError(OAISendigDatasets summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSendigVersionGetSignalError() instead")
    void mdrSendigVersionGetSignalE(OAISendigProduct summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSendigVersionGetSignalError(OAISendigProduct summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use mdrRootSendigDatasetsDatasetVariablesVarGetSignalErrorFull() instead")
    void mdrRootSendigDatasetsDatasetVariablesVarGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrRootSendigDatasetsDatasetVariablesVarGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSendigVersionClassesClassDatasetsGetSignalErrorFull() instead")
    void mdrSendigVersionClassesClassDatasetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSendigVersionClassesClassDatasetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSendigVersionClassesClassGetSignalErrorFull() instead")
    void mdrSendigVersionClassesClassGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSendigVersionClassesClassGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSendigVersionClassesGetSignalErrorFull() instead")
    void mdrSendigVersionClassesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSendigVersionClassesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSendigVersionDatasetsDatasetGetSignalErrorFull() instead")
    void mdrSendigVersionDatasetsDatasetGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSendigVersionDatasetsDatasetGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSendigVersionDatasetsDatasetVariablesGetSignalErrorFull() instead")
    void mdrSendigVersionDatasetsDatasetVariablesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSendigVersionDatasetsDatasetVariablesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSendigVersionDatasetsDatasetVariablesVarGetSignalErrorFull() instead")
    void mdrSendigVersionDatasetsDatasetVariablesVarGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSendigVersionDatasetsDatasetVariablesVarGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSendigVersionDatasetsGetSignalErrorFull() instead")
    void mdrSendigVersionDatasetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSendigVersionDatasetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrSendigVersionGetSignalErrorFull() instead")
    void mdrSendigVersionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrSendigVersionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif

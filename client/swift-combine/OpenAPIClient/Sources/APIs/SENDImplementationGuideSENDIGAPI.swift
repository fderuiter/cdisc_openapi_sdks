//
// SENDImplementationGuideSENDIGAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class SENDImplementationGuideSENDIGAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://library.cdisc.org/api")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    public enum MdrRootSendigDatasetsDatasetVariablesVarGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrRootSendigDatasetsDatasetVariablesVarGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrRootSendigDatasetsDatasetVariablesVarGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrRootSendigDatasetsDatasetVariablesVarGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrRootSendigDatasetsDatasetVariablesVarGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrRootSendigDatasetsDatasetVariablesVarGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrRootSendigDatasetsDatasetVariablesVarGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrRootSendigDatasetsDatasetVariablesVarGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrRootSendigDatasetsDatasetVariablesVarGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrRootSendigDatasetsDatasetVariablesVarGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/root/sendig/datasets/{dataset}/variables/{var}
    /// - Get Root SENDIG Dataset Variable
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter dataset: (path) SENDIG Dataset Identifier 
    /// - parameter _var: (path) SENDIG Variable Identifier 
    /// - returns: AnyPublisher<RootSendigDatasetVariable, Error> 
    open func mdrRootSendigDatasetsDatasetVariablesVarGet(dataset: String, _var: String) -> AnyPublisher<RootSendigDatasetVariable, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/root/sendig/datasets/{dataset}/variables/{var}"
                localVarPath = localVarPath.replacingOccurrences(of: "{dataset}", with: dataset)
                localVarPath = localVarPath.replacingOccurrences(of: "{var}", with: _var)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<RootSendigDatasetVariable, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrRootSendigDatasetsDatasetVariablesVarGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrRootSendigDatasetsDatasetVariablesVarGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrRootSendigDatasetsDatasetVariablesVarGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrRootSendigDatasetsDatasetVariablesVarGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrRootSendigDatasetsDatasetVariablesVarGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrRootSendigDatasetsDatasetVariablesVarGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrRootSendigDatasetsDatasetVariablesVarGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrRootSendigDatasetsDatasetVariablesVarGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrRootSendigDatasetsDatasetVariablesVarGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(RootSendigDatasetVariable.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum MdrSendigVersionClassesClassDatasetsGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrSendigVersionClassesClassDatasetsGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrSendigVersionClassesClassDatasetsGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrSendigVersionClassesClassDatasetsGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrSendigVersionClassesClassDatasetsGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrSendigVersionClassesClassDatasetsGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrSendigVersionClassesClassDatasetsGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrSendigVersionClassesClassDatasetsGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrSendigVersionClassesClassDatasetsGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrSendigVersionClassesClassDatasetsGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/sendig/{version}/classes/{class}/datasets
    /// - Get SENDIG Class Dataset List
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter version: (path) CDISC Library Product Version 
    /// - parameter _class: (path) SENDIG Class Identifier 
    /// - returns: AnyPublisher<SendigClassDatasets, Error> 
    open func mdrSendigVersionClassesClassDatasetsGet(version: String, _class: String) -> AnyPublisher<SendigClassDatasets, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/sendig/{version}/classes/{class}/datasets"
                localVarPath = localVarPath.replacingOccurrences(of: "{version}", with: version)
                localVarPath = localVarPath.replacingOccurrences(of: "{class}", with: _class)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<SendigClassDatasets, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesClassDatasetsGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesClassDatasetsGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesClassDatasetsGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesClassDatasetsGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesClassDatasetsGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesClassDatasetsGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesClassDatasetsGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesClassDatasetsGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesClassDatasetsGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(SendigClassDatasets.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum MdrSendigVersionClassesClassGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrSendigVersionClassesClassGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrSendigVersionClassesClassGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrSendigVersionClassesClassGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrSendigVersionClassesClassGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrSendigVersionClassesClassGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrSendigVersionClassesClassGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrSendigVersionClassesClassGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrSendigVersionClassesClassGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrSendigVersionClassesClassGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/sendig/{version}/classes/{class}
    /// - Get SENDIG Class
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter version: (path) CDISC Library Product Version 
    /// - parameter _class: (path) SENDIG Class Identifier 
    /// - returns: AnyPublisher<SendigClass, Error> 
    open func mdrSendigVersionClassesClassGet(version: String, _class: String) -> AnyPublisher<SendigClass, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/sendig/{version}/classes/{class}"
                localVarPath = localVarPath.replacingOccurrences(of: "{version}", with: version)
                localVarPath = localVarPath.replacingOccurrences(of: "{class}", with: _class)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<SendigClass, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesClassGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesClassGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesClassGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesClassGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesClassGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesClassGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesClassGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesClassGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesClassGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(SendigClass.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum MdrSendigVersionClassesGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrSendigVersionClassesGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrSendigVersionClassesGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrSendigVersionClassesGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrSendigVersionClassesGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrSendigVersionClassesGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrSendigVersionClassesGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrSendigVersionClassesGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrSendigVersionClassesGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrSendigVersionClassesGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/sendig/{version}/classes
    /// - Get SENDIG Class List
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter version: (path) CDISC Library Product Version 
    /// - returns: AnyPublisher<SendigClasses, Error> 
    open func mdrSendigVersionClassesGet(version: String) -> AnyPublisher<SendigClasses, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/sendig/{version}/classes"
                localVarPath = localVarPath.replacingOccurrences(of: "{version}", with: version)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<SendigClasses, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionClassesGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(SendigClasses.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum MdrSendigVersionDatasetsDatasetGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrSendigVersionDatasetsDatasetGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrSendigVersionDatasetsDatasetGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrSendigVersionDatasetsDatasetGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrSendigVersionDatasetsDatasetGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrSendigVersionDatasetsDatasetGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrSendigVersionDatasetsDatasetGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrSendigVersionDatasetsDatasetGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrSendigVersionDatasetsDatasetGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrSendigVersionDatasetsDatasetGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/sendig/{version}/datasets/{dataset}
    /// - Get SENDIG Dataset
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter version: (path) CDISC Library Product Version 
    /// - parameter dataset: (path) SENDIG Class Identifier 
    /// - returns: AnyPublisher<SendigDataset, Error> 
    open func mdrSendigVersionDatasetsDatasetGet(version: String, dataset: String) -> AnyPublisher<SendigDataset, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/sendig/{version}/datasets/{dataset}"
                localVarPath = localVarPath.replacingOccurrences(of: "{version}", with: version)
                localVarPath = localVarPath.replacingOccurrences(of: "{dataset}", with: dataset)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<SendigDataset, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(SendigDataset.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum MdrSendigVersionDatasetsDatasetVariablesGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrSendigVersionDatasetsDatasetVariablesGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrSendigVersionDatasetsDatasetVariablesGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrSendigVersionDatasetsDatasetVariablesGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrSendigVersionDatasetsDatasetVariablesGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrSendigVersionDatasetsDatasetVariablesGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrSendigVersionDatasetsDatasetVariablesGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrSendigVersionDatasetsDatasetVariablesGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrSendigVersionDatasetsDatasetVariablesGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrSendigVersionDatasetsDatasetVariablesGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/sendig/{version}/datasets/{dataset}/variables
    /// - Get SENDIG Dataset Variable List
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter version: (path) CDISC Library Product Version 
    /// - parameter dataset: (path) SENDIG Class Identifier 
    /// - returns: AnyPublisher<SendigDatasetVariables, Error> 
    open func mdrSendigVersionDatasetsDatasetVariablesGet(version: String, dataset: String) -> AnyPublisher<SendigDatasetVariables, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/sendig/{version}/datasets/{dataset}/variables"
                localVarPath = localVarPath.replacingOccurrences(of: "{version}", with: version)
                localVarPath = localVarPath.replacingOccurrences(of: "{dataset}", with: dataset)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<SendigDatasetVariables, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetVariablesGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetVariablesGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetVariablesGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetVariablesGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetVariablesGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetVariablesGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetVariablesGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetVariablesGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetVariablesGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(SendigDatasetVariables.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum MdrSendigVersionDatasetsDatasetVariablesVarGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrSendigVersionDatasetsDatasetVariablesVarGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrSendigVersionDatasetsDatasetVariablesVarGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrSendigVersionDatasetsDatasetVariablesVarGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrSendigVersionDatasetsDatasetVariablesVarGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrSendigVersionDatasetsDatasetVariablesVarGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrSendigVersionDatasetsDatasetVariablesVarGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrSendigVersionDatasetsDatasetVariablesVarGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrSendigVersionDatasetsDatasetVariablesVarGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrSendigVersionDatasetsDatasetVariablesVarGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/sendig/{version}/datasets/{dataset}/variables/{var}
    /// - Get SENDIG Dataset Variable
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter version: (path) CDISC Library Product Version 
    /// - parameter dataset: (path) SENDIG Class Identifier 
    /// - parameter _var: (path) SENDIG Variable Identifier 
    /// - returns: AnyPublisher<SendigDatasetVariable, Error> 
    open func mdrSendigVersionDatasetsDatasetVariablesVarGet(version: String, dataset: String, _var: String) -> AnyPublisher<SendigDatasetVariable, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/sendig/{version}/datasets/{dataset}/variables/{var}"
                localVarPath = localVarPath.replacingOccurrences(of: "{version}", with: version)
                localVarPath = localVarPath.replacingOccurrences(of: "{dataset}", with: dataset)
                localVarPath = localVarPath.replacingOccurrences(of: "{var}", with: _var)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<SendigDatasetVariable, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetVariablesVarGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetVariablesVarGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetVariablesVarGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetVariablesVarGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetVariablesVarGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetVariablesVarGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetVariablesVarGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetVariablesVarGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsDatasetVariablesVarGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(SendigDatasetVariable.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum MdrSendigVersionDatasetsGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrSendigVersionDatasetsGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrSendigVersionDatasetsGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrSendigVersionDatasetsGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrSendigVersionDatasetsGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrSendigVersionDatasetsGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrSendigVersionDatasetsGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrSendigVersionDatasetsGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrSendigVersionDatasetsGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrSendigVersionDatasetsGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/sendig/{version}/datasets
    /// - Get SENDIG Dataset List
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter version: (path) CDISC Library Product Version 
    /// - returns: AnyPublisher<SendigDatasets, Error> 
    open func mdrSendigVersionDatasetsGet(version: String) -> AnyPublisher<SendigDatasets, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/sendig/{version}/datasets"
                localVarPath = localVarPath.replacingOccurrences(of: "{version}", with: version)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<SendigDatasets, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionDatasetsGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(SendigDatasets.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum MdrSendigVersionGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrSendigVersionGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrSendigVersionGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrSendigVersionGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrSendigVersionGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrSendigVersionGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrSendigVersionGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrSendigVersionGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrSendigVersionGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrSendigVersionGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/sendig/{version}
    /// - Get SENDIG product
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter version: (path) CDISC Library Product Version 
    /// - returns: AnyPublisher<SendigProduct, Error> 
    open func mdrSendigVersionGet(version: String) -> AnyPublisher<SendigProduct, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/sendig/{version}"
                localVarPath = localVarPath.replacingOccurrences(of: "{version}", with: version)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<SendigProduct, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSendigVersionGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(SendigProduct.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}

//
// CtCodelistTermsLinks.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct CtCodelistTermsLinks: Codable {
    public var _self: CtCodelistTermsRef?
    public var parentPackage: CtPackageRef?
    public var rootItem: RootCtCodelistRef?
    public var priorVersion: CtCodelistTermsRef?
    public var terms: [CtTermRefElement]?

    public init(_self: CtCodelistTermsRef? = nil, parentPackage: CtPackageRef? = nil, rootItem: RootCtCodelistRef? = nil, priorVersion: CtCodelistTermsRef? = nil, terms: [CtTermRefElement]? = nil) {
        self._self = _self
        self.parentPackage = parentPackage
        self.rootItem = rootItem
        self.priorVersion = priorVersion
        self.terms = terms
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _self = "self"
        case parentPackage
        case rootItem
        case priorVersion
        case terms
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        _self = try container.decodeIfPresent(CtCodelistTermsRef.self, forKey: ._self)
        parentPackage = try container.decodeIfPresent(CtPackageRef.self, forKey: .parentPackage)
        rootItem = try container.decodeIfPresent(RootCtCodelistRef.self, forKey: .rootItem)
        priorVersion = try container.decodeIfPresent(CtCodelistTermsRef.self, forKey: .priorVersion)
        terms = try container.decodeIfPresent([CtTermRefElement].self, forKey: .terms)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_self, forKey: ._self)
        try container.encodeIfPresent(parentPackage, forKey: .parentPackage)
        try container.encodeIfPresent(rootItem, forKey: .rootItem)
        try container.encodeIfPresent(priorVersion, forKey: .priorVersion)
        try container.encodeIfPresent(terms, forKey: .terms)
    }
}

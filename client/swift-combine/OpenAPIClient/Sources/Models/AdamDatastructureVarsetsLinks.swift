//
// AdamDatastructureVarsetsLinks.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct AdamDatastructureVarsetsLinks: Codable {
    public var _self: AdamDatastructureVarsetsRef?
    public var parentProduct: AdamProductRef?
    public var priorVersion: AdamDatastructureVarsetsRef?
    public var analysisVariableSets: [AdamVarsetRefElement]?

    public init(_self: AdamDatastructureVarsetsRef? = nil, parentProduct: AdamProductRef? = nil, priorVersion: AdamDatastructureVarsetsRef? = nil, analysisVariableSets: [AdamVarsetRefElement]? = nil) {
        self._self = _self
        self.parentProduct = parentProduct
        self.priorVersion = priorVersion
        self.analysisVariableSets = analysisVariableSets
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _self = "self"
        case parentProduct
        case priorVersion
        case analysisVariableSets
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        _self = try container.decodeIfPresent(AdamDatastructureVarsetsRef.self, forKey: ._self)
        parentProduct = try container.decodeIfPresent(AdamProductRef.self, forKey: .parentProduct)
        priorVersion = try container.decodeIfPresent(AdamDatastructureVarsetsRef.self, forKey: .priorVersion)
        analysisVariableSets = try container.decodeIfPresent([AdamVarsetRefElement].self, forKey: .analysisVariableSets)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_self, forKey: ._self)
        try container.encodeIfPresent(parentProduct, forKey: .parentProduct)
        try container.encodeIfPresent(priorVersion, forKey: .priorVersion)
        try container.encodeIfPresent(analysisVariableSets, forKey: .analysisVariableSets)
    }
}

//
// SdtmigDatasetVariableLinks.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct SdtmigDatasetVariableLinks: Codable {
    public var _self: SdtmigDatasetVariableRef?
    public var codelist: [RootCtCodelistRefElement]?
    public var modelClassVariable: SdtmClassVariableRef?
    public var modelDatasetVariable: SdtmDatasetVariableRef?
    public var parentProduct: SdtmigProductRef?
    public var parentDataset: SdtmigDatasetRef?
    public var rootItem: RootSdtmigDatasetVariableRef?
    public var priorVersion: SdtmigDatasetVariableRef?

    public init(_self: SdtmigDatasetVariableRef? = nil, codelist: [RootCtCodelistRefElement]? = nil, modelClassVariable: SdtmClassVariableRef? = nil, modelDatasetVariable: SdtmDatasetVariableRef? = nil, parentProduct: SdtmigProductRef? = nil, parentDataset: SdtmigDatasetRef? = nil, rootItem: RootSdtmigDatasetVariableRef? = nil, priorVersion: SdtmigDatasetVariableRef? = nil) {
        self._self = _self
        self.codelist = codelist
        self.modelClassVariable = modelClassVariable
        self.modelDatasetVariable = modelDatasetVariable
        self.parentProduct = parentProduct
        self.parentDataset = parentDataset
        self.rootItem = rootItem
        self.priorVersion = priorVersion
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _self = "self"
        case codelist
        case modelClassVariable
        case modelDatasetVariable
        case parentProduct
        case parentDataset
        case rootItem
        case priorVersion
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        _self = try container.decodeIfPresent(SdtmigDatasetVariableRef.self, forKey: ._self)
        codelist = try container.decodeIfPresent([RootCtCodelistRefElement].self, forKey: .codelist)
        modelClassVariable = try container.decodeIfPresent(SdtmClassVariableRef.self, forKey: .modelClassVariable)
        modelDatasetVariable = try container.decodeIfPresent(SdtmDatasetVariableRef.self, forKey: .modelDatasetVariable)
        parentProduct = try container.decodeIfPresent(SdtmigProductRef.self, forKey: .parentProduct)
        parentDataset = try container.decodeIfPresent(SdtmigDatasetRef.self, forKey: .parentDataset)
        rootItem = try container.decodeIfPresent(RootSdtmigDatasetVariableRef.self, forKey: .rootItem)
        priorVersion = try container.decodeIfPresent(SdtmigDatasetVariableRef.self, forKey: .priorVersion)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_self, forKey: ._self)
        try container.encodeIfPresent(codelist, forKey: .codelist)
        try container.encodeIfPresent(modelClassVariable, forKey: .modelClassVariable)
        try container.encodeIfPresent(modelDatasetVariable, forKey: .modelDatasetVariable)
        try container.encodeIfPresent(parentProduct, forKey: .parentProduct)
        try container.encodeIfPresent(parentDataset, forKey: .parentDataset)
        try container.encodeIfPresent(rootItem, forKey: .rootItem)
        try container.encodeIfPresent(priorVersion, forKey: .priorVersion)
    }
}

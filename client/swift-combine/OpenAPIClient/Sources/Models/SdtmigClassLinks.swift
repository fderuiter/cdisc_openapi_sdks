//
// SdtmigClassLinks.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct SdtmigClassLinks: Codable {
    public var _self: SdtmigClassRef?
    public var modelClass: SdtmClassRef?
    public var parentProduct: SdtmigProductRef?
    public var parentClass: SdtmigClassRef?
    public var subclasses: [SdtmigClassRefSubclass]?
    public var priorVersion: SdtmigClassRef?

    public init(_self: SdtmigClassRef? = nil, modelClass: SdtmClassRef? = nil, parentProduct: SdtmigProductRef? = nil, parentClass: SdtmigClassRef? = nil, subclasses: [SdtmigClassRefSubclass]? = nil, priorVersion: SdtmigClassRef? = nil) {
        self._self = _self
        self.modelClass = modelClass
        self.parentProduct = parentProduct
        self.parentClass = parentClass
        self.subclasses = subclasses
        self.priorVersion = priorVersion
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _self = "self"
        case modelClass
        case parentProduct
        case parentClass
        case subclasses
        case priorVersion
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        _self = try container.decodeIfPresent(SdtmigClassRef.self, forKey: ._self)
        modelClass = try container.decodeIfPresent(SdtmClassRef.self, forKey: .modelClass)
        parentProduct = try container.decodeIfPresent(SdtmigProductRef.self, forKey: .parentProduct)
        parentClass = try container.decodeIfPresent(SdtmigClassRef.self, forKey: .parentClass)
        subclasses = try container.decodeIfPresent([SdtmigClassRefSubclass].self, forKey: .subclasses)
        priorVersion = try container.decodeIfPresent(SdtmigClassRef.self, forKey: .priorVersion)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_self, forKey: ._self)
        try container.encodeIfPresent(modelClass, forKey: .modelClass)
        try container.encodeIfPresent(parentProduct, forKey: .parentProduct)
        try container.encodeIfPresent(parentClass, forKey: .parentClass)
        try container.encodeIfPresent(subclasses, forKey: .subclasses)
        try container.encodeIfPresent(priorVersion, forKey: .priorVersion)
    }
}

//
// ProductgroupDataTabulationLinks.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ProductgroupDataTabulationLinks: Codable {
    public var _self: ProductgroupRef?
    public var sdtm: [SdtmProductRefElement]?
    public var sdtmig: [SdtmigProductRefElement]?
    public var sendig: [SendigProductRefElement]?

    public init(_self: ProductgroupRef? = nil, sdtm: [SdtmProductRefElement]? = nil, sdtmig: [SdtmigProductRefElement]? = nil, sendig: [SendigProductRefElement]? = nil) {
        self._self = _self
        self.sdtm = sdtm
        self.sdtmig = sdtmig
        self.sendig = sendig
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _self = "self"
        case sdtm
        case sdtmig
        case sendig
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        _self = try container.decodeIfPresent(ProductgroupRef.self, forKey: ._self)
        sdtm = try container.decodeIfPresent([SdtmProductRefElement].self, forKey: .sdtm)
        sdtmig = try container.decodeIfPresent([SdtmigProductRefElement].self, forKey: .sdtmig)
        sendig = try container.decodeIfPresent([SendigProductRefElement].self, forKey: .sendig)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_self, forKey: ._self)
        try container.encodeIfPresent(sdtm, forKey: .sdtm)
        try container.encodeIfPresent(sdtmig, forKey: .sdtmig)
        try container.encodeIfPresent(sendig, forKey: .sendig)
    }
}

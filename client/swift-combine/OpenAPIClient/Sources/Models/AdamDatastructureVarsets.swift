//
// AdamDatastructureVarsets.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct AdamDatastructureVarsets: Codable {
    public var ordinal: String?
    public var name: String?
    public var label: String?
    public var description: String?
    public var _class: String?
    public var links: AdamDatastructureVarsetsLinks?

    public init(ordinal: String? = nil, name: String? = nil, label: String? = nil, description: String? = nil, _class: String? = nil, links: AdamDatastructureVarsetsLinks? = nil) {
        self.ordinal = ordinal
        self.name = name
        self.label = label
        self.description = description
        self._class = _class
        self.links = links
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case ordinal
        case name
        case label
        case description
        case _class = "class"
        case links = "_links"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        ordinal = try container.decodeIfPresent(String.self, forKey: .ordinal)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        label = try container.decodeIfPresent(String.self, forKey: .label)
        description = try container.decodeIfPresent(String.self, forKey: .description)
        _class = try container.decodeIfPresent(String.self, forKey: ._class)
        links = try container.decodeIfPresent(AdamDatastructureVarsetsLinks.self, forKey: .links)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(ordinal, forKey: .ordinal)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(_class, forKey: ._class)
        try container.encodeIfPresent(links, forKey: .links)
    }
}

//
// QrsProduct.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct QrsProduct: Codable {
    public var name: String?
    public var label: String?
    public var description: String?
    public var effectiveDate: String?
    public var untilDate: String?
    public var registrationStatus: String?
    public var version: String?
    public var qrsType: String?
    public var links: QrsProductLinks?
    public var items: [QrsItem]?

    public init(name: String? = nil, label: String? = nil, description: String? = nil, effectiveDate: String? = nil, untilDate: String? = nil, registrationStatus: String? = nil, version: String? = nil, qrsType: String? = nil, links: QrsProductLinks? = nil, items: [QrsItem]? = nil) {
        self.name = name
        self.label = label
        self.description = description
        self.effectiveDate = effectiveDate
        self.untilDate = untilDate
        self.registrationStatus = registrationStatus
        self.version = version
        self.qrsType = qrsType
        self.links = links
        self.items = items
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case label
        case description
        case effectiveDate
        case untilDate
        case registrationStatus
        case version
        case qrsType
        case links = "_links"
        case items
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        label = try container.decodeIfPresent(String.self, forKey: .label)
        description = try container.decodeIfPresent(String.self, forKey: .description)
        effectiveDate = try container.decodeIfPresent(String.self, forKey: .effectiveDate)
        untilDate = try container.decodeIfPresent(String.self, forKey: .untilDate)
        registrationStatus = try container.decodeIfPresent(String.self, forKey: .registrationStatus)
        version = try container.decodeIfPresent(String.self, forKey: .version)
        qrsType = try container.decodeIfPresent(String.self, forKey: .qrsType)
        links = try container.decodeIfPresent(QrsProductLinks.self, forKey: .links)
        items = try container.decodeIfPresent([QrsItem].self, forKey: .items)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(effectiveDate, forKey: .effectiveDate)
        try container.encodeIfPresent(untilDate, forKey: .untilDate)
        try container.encodeIfPresent(registrationStatus, forKey: .registrationStatus)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(qrsType, forKey: .qrsType)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(items, forKey: .items)
    }
}

//
// SdtmigDatasets.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct SdtmigDatasets: Codable {
    public var name: String?
    public var label: String?
    public var description: String?
    public var source: String?
    public var effectiveDate: String?
    public var registrationStatus: String?
    public var version: String?
    public var links: SdtmigDatasetsLinks?

    public init(name: String? = nil, label: String? = nil, description: String? = nil, source: String? = nil, effectiveDate: String? = nil, registrationStatus: String? = nil, version: String? = nil, links: SdtmigDatasetsLinks? = nil) {
        self.name = name
        self.label = label
        self.description = description
        self.source = source
        self.effectiveDate = effectiveDate
        self.registrationStatus = registrationStatus
        self.version = version
        self.links = links
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case label
        case description
        case source
        case effectiveDate
        case registrationStatus
        case version
        case links = "_links"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        label = try container.decodeIfPresent(String.self, forKey: .label)
        description = try container.decodeIfPresent(String.self, forKey: .description)
        source = try container.decodeIfPresent(String.self, forKey: .source)
        effectiveDate = try container.decodeIfPresent(String.self, forKey: .effectiveDate)
        registrationStatus = try container.decodeIfPresent(String.self, forKey: .registrationStatus)
        version = try container.decodeIfPresent(String.self, forKey: .version)
        links = try container.decodeIfPresent(SdtmigDatasetsLinks.self, forKey: .links)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(source, forKey: .source)
        try container.encodeIfPresent(effectiveDate, forKey: .effectiveDate)
        try container.encodeIfPresent(registrationStatus, forKey: .registrationStatus)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(links, forKey: .links)
    }
}

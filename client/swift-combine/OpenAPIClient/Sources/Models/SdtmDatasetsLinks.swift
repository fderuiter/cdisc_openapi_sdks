//
// SdtmDatasetsLinks.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct SdtmDatasetsLinks: Codable {
    public var _self: SdtmDatasetsRef?
    public var parentProduct: SdtmProductRef?
    public var priorVersion: SdtmDatasetsRef?
    public var datasets: [SdtmDatasetRefElement]?

    public init(_self: SdtmDatasetsRef? = nil, parentProduct: SdtmProductRef? = nil, priorVersion: SdtmDatasetsRef? = nil, datasets: [SdtmDatasetRefElement]? = nil) {
        self._self = _self
        self.parentProduct = parentProduct
        self.priorVersion = priorVersion
        self.datasets = datasets
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _self = "self"
        case parentProduct
        case priorVersion
        case datasets
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        _self = try container.decodeIfPresent(SdtmDatasetsRef.self, forKey: ._self)
        parentProduct = try container.decodeIfPresent(SdtmProductRef.self, forKey: .parentProduct)
        priorVersion = try container.decodeIfPresent(SdtmDatasetsRef.self, forKey: .priorVersion)
        datasets = try container.decodeIfPresent([SdtmDatasetRefElement].self, forKey: .datasets)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_self, forKey: ._self)
        try container.encodeIfPresent(parentProduct, forKey: .parentProduct)
        try container.encodeIfPresent(priorVersion, forKey: .priorVersion)
        try container.encodeIfPresent(datasets, forKey: .datasets)
    }
}

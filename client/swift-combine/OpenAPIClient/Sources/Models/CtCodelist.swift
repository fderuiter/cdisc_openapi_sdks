//
// CtCodelist.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct CtCodelist: Codable {
    public var conceptId: String?
    public var extensible: String?
    public var name: String?
    public var submissionValue: String?
    public var definition: String?
    public var preferredTerm: String?
    public var synonyms: [String]?
    public var links: CtCodelistLinks?
    public var terms: [CtPackageTerm]?

    public init(conceptId: String? = nil, extensible: String? = nil, name: String? = nil, submissionValue: String? = nil, definition: String? = nil, preferredTerm: String? = nil, synonyms: [String]? = nil, links: CtCodelistLinks? = nil, terms: [CtPackageTerm]? = nil) {
        self.conceptId = conceptId
        self.extensible = extensible
        self.name = name
        self.submissionValue = submissionValue
        self.definition = definition
        self.preferredTerm = preferredTerm
        self.synonyms = synonyms
        self.links = links
        self.terms = terms
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case conceptId
        case extensible
        case name
        case submissionValue
        case definition
        case preferredTerm
        case synonyms
        case links = "_links"
        case terms
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        conceptId = try container.decodeIfPresent(String.self, forKey: .conceptId)
        extensible = try container.decodeIfPresent(String.self, forKey: .extensible)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        submissionValue = try container.decodeIfPresent(String.self, forKey: .submissionValue)
        definition = try container.decodeIfPresent(String.self, forKey: .definition)
        preferredTerm = try container.decodeIfPresent(String.self, forKey: .preferredTerm)
        synonyms = try container.decodeIfPresent([String].self, forKey: .synonyms)
        links = try container.decodeIfPresent(CtCodelistLinks.self, forKey: .links)
        terms = try container.decodeIfPresent([CtPackageTerm].self, forKey: .terms)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(conceptId, forKey: .conceptId)
        try container.encodeIfPresent(extensible, forKey: .extensible)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(submissionValue, forKey: .submissionValue)
        try container.encodeIfPresent(definition, forKey: .definition)
        try container.encodeIfPresent(preferredTerm, forKey: .preferredTerm)
        try container.encodeIfPresent(synonyms, forKey: .synonyms)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(terms, forKey: .terms)
    }
}

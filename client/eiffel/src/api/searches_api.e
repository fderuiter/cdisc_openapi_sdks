note
 description:"[
		CDISC Library API
 		REST API Documentation for CDISC Library in production server
  		The version of the OpenAPI document: 1.1.0
 	    Contact: cdisc_library_support@cdisc.org

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	SEARCHES_API

inherit

    API_I


feature -- API Access


	mdr_search_get (q: STRING_32; highlight: STRING_32; start: REAL_32; page_size: REAL_32; var_class: STRING_32; codelist: STRING_32; concept_id: STRING_32; core: STRING_32; data_structure: STRING_32; dataset_structure: STRING_32; definition: STRING_32; description: STRING_32; domain: STRING_32; effective_date: STRING_32; extensible: STRING_32; href: STRING_32; label: STRING_32; measure_type: STRING_32; name: STRING_32; preferred_term: STRING_32; product: STRING_32; product_group: STRING_32; registration_status: STRING_32; role_description: STRING_32; sdtm_target: STRING_32; simple_datatype: STRING_32; submission_value: STRING_32; synonyms: STRING_32; type: STRING_32; ui_href: STRING_32; value_domain: STRING_32; variable_set: STRING_32; version: STRING_32): detachable DEFAULT_SEARCH_RESPONSE
			-- 
			-- Get Search Results Across CDISC Library
			-- 
			-- argument: q Search Term Expression (required)
			-- 
			-- argument: highlight Search Highlight Expression (optional, default to null)
			-- 
			-- argument: start Initial Search Result Index (optional, default to 0)
			-- 
			-- argument: page_size Number of Search Results to Return (optional, default to 100)
			-- 
			-- argument: var_class Limit Search by Setting Scope to Class (optional, default to null)
			-- 
			-- argument: codelist Limit Search by Setting Scope to Codelist (optional, default to null)
			-- 
			-- argument: concept_id Limit Search by Setting Scope to Concept ID (optional, default to null)
			-- 
			-- argument: core Limit Search by Setting Scope to Core (optional, default to null)
			-- 
			-- argument: data_structure Limit Search by Setting Scope to Data Structure (optional, default to null)
			-- 
			-- argument: dataset_structure Limit Search by Setting Scope to Dataset Structure (optional, default to null)
			-- 
			-- argument: definition Limit Search by Setting Scope to Definition (optional, default to null)
			-- 
			-- argument: description Limit Search by Setting Scope to Description (optional, default to null)
			-- 
			-- argument: domain Limit Search by Setting Scope to Domain (optional, default to null)
			-- 
			-- argument: effective_date Limit Search by Setting Scope to Effective Date (optional, default to null)
			-- 
			-- argument: extensible Limit Search by Setting Scope to Extensible (optional, default to null)
			-- 
			-- argument: href Limit Search by Setting Scope to Href (optional, default to null)
			-- 
			-- argument: label Limit Search by Setting Scope to Label (optional, default to null)
			-- 
			-- argument: measure_type SLimit Search by Setting Scope to Measure Type (optional, default to null)
			-- 
			-- argument: name Limit Search by Setting Scope to Name (optional, default to null)
			-- 
			-- argument: preferred_term Limit Search by Setting Scope to Preferred Term (optional, default to null)
			-- 
			-- argument: product Limit Search by Setting Scope to Product (optional, default to null)
			-- 
			-- argument: product_group Limit Search by Setting Scope to Product Group (optional, default to null)
			-- 
			-- argument: registration_status Limit Search by Setting Scope to Registration Status (optional, default to null)
			-- 
			-- argument: role_description Limit Search by Setting Scope to Role Description (optional, default to null)
			-- 
			-- argument: sdtm_target Limit Search by Setting Scope to SDTM Target (optional, default to null)
			-- 
			-- argument: simple_datatype Limit Search by Setting Scope to Simple Datatype (optional, default to null)
			-- 
			-- argument: submission_value Limit Search by Setting Scope to Submission Value (optional, default to null)
			-- 
			-- argument: synonyms Limit Search by Setting Scope to Synonyms (optional, default to null)
			-- 
			-- argument: type Limit Search by Setting Scope to Type (optional, default to null)
			-- 
			-- argument: ui_href Limit Search by Setting Scope to UI Href (optional, default to null)
			-- 
			-- argument: value_domain Limit Search by Setting Scope to Value Domain (optional, default to null)
			-- 
			-- argument: variable_set Limit Search by Setting Scope to Variable Set (optional, default to null)
			-- 
			-- argument: version Limit Search by Setting Scope to Version (optional, default to null)
			-- 
			-- 
			-- Result DEFAULT_SEARCH_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/search"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "q", q));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "highlight", highlight));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "start", start));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "pageSize", page_size));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "class", var_class));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "codelist", codelist));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "conceptId", concept_id));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "core", core));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "dataStructure", data_structure));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "datasetStructure", dataset_structure));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "definition", definition));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "description", description));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "domain", domain));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "effectiveDate", effective_date));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "extensible", extensible));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "href", href));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "label", label));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "measureType", measure_type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "name", name));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "preferredTerm", preferred_term));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "product", product));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "productGroup", product_group));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "registrationStatus", registration_status));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "roleDescription", role_description));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "sdtmTarget", sdtm_target));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "simpleDatatype", simple_datatype));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "submissionValue", submission_value));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "synonyms", synonyms));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "type", type));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "uiHref", ui_href));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "valueDomain", value_domain));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "variableSet", variable_set));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "version", version));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { DEFAULT_SEARCH_RESPONSE } l_response.data ({ DEFAULT_SEARCH_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_search_scopes_get : detachable MODEL_MDR_SEARCH_SCOPES_GET_200_RESPONSE
			-- 
			-- Get Search Results Across CDISC Library
			-- 
			-- 
			-- Result MODEL_MDR_SEARCH_SCOPES_GET_200_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/search/scopes"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { MODEL_MDR_SEARCH_SCOPES_GET_200_RESPONSE } l_response.data ({ MODEL_MDR_SEARCH_SCOPES_GET_200_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_search_scopes_scope_get (scope: DEFAULT_SEARCH_SCOPES): detachable SCOPE_VALUES
			-- 
			-- Get Search Results Limited to Scope
			-- 
			-- argument: scope Search Scope (required)
			-- 
			-- 
			-- Result SCOPE_VALUES
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/search/scopes/{scope}"
			l_path.replace_substring_all ("{"+"scope"+"}", api_client.url_encode (scope.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { SCOPE_VALUES } l_response.data ({ SCOPE_VALUES }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end

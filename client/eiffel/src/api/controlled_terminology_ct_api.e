note
 description:"[
		CDISC Library API
 		REST API Documentation for CDISC Library in production server
  		The version of the OpenAPI document: 1.1.0
 	    Contact: cdisc_library_support@cdisc.org

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	CONTROLLEDTERMINOLOGYCT_API

inherit

    API_I


feature -- API Access


	mdr_ct_packages_get : detachable CT_PACKAGES
			-- 
			-- Get CDISC Library CT Package List
			-- 
			-- 
			-- Result CT_PACKAGES
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/ct/packages"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CT_PACKAGES } l_response.data ({ CT_PACKAGES }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_ct_packages_package_codelists_codelist_get (package: STRING_32; codelist: STRING_32): detachable CT_CODELIST
			-- 
			-- Get CDISC Library CT Package Codelist
			-- 
			-- argument: package CT Package Identifier (required)
			-- 
			-- argument: codelist CT Codelist Identifier (required)
			-- 
			-- 
			-- Result CT_CODELIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/ct/packages/{package}/codelists/{codelist}"
			l_path.replace_substring_all ("{"+"package"+"}", api_client.url_encode (package.out))
			l_path.replace_substring_all ("{"+"codelist"+"}", api_client.url_encode (codelist.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CT_CODELIST } l_response.data ({ CT_CODELIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_ct_packages_package_codelists_codelist_terms_get (package: STRING_32; codelist: STRING_32): detachable CT_CODELIST_TERMS
			-- 
			-- Get CDISC Library CT Package Codelist Term List
			-- 
			-- argument: package CT Package Identifier (required)
			-- 
			-- argument: codelist CT Codelist Identifier (required)
			-- 
			-- 
			-- Result CT_CODELIST_TERMS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/ct/packages/{package}/codelists/{codelist}/terms"
			l_path.replace_substring_all ("{"+"package"+"}", api_client.url_encode (package.out))
			l_path.replace_substring_all ("{"+"codelist"+"}", api_client.url_encode (codelist.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CT_CODELIST_TERMS } l_response.data ({ CT_CODELIST_TERMS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_ct_packages_package_codelists_codelist_terms_term_get (package: STRING_32; codelist: STRING_32; term: STRING_32): detachable CT_TERM
			-- 
			-- Get CDISC Library CT Package Codelist Term
			-- 
			-- argument: package CT Package Product Identifier (required)
			-- 
			-- argument: codelist CT Codelist Identifier (required)
			-- 
			-- argument: term CT Codelist Term Identifier (required)
			-- 
			-- 
			-- Result CT_TERM
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/ct/packages/{package}/codelists/{codelist}/terms/{term}"
			l_path.replace_substring_all ("{"+"package"+"}", api_client.url_encode (package.out))
			l_path.replace_substring_all ("{"+"codelist"+"}", api_client.url_encode (codelist.out))
			l_path.replace_substring_all ("{"+"term"+"}", api_client.url_encode (term.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CT_TERM } l_response.data ({ CT_TERM }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_ct_packages_package_codelists_get (package: STRING_32): detachable CT_PACKAGE_CODELISTS
			-- 
			-- Get CDISC Library CT Package Codelist List
			-- 
			-- argument: package CT Package Identifier (required)
			-- 
			-- 
			-- Result CT_PACKAGE_CODELISTS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/ct/packages/{package}/codelists"
			l_path.replace_substring_all ("{"+"package"+"}", api_client.url_encode (package.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CT_PACKAGE_CODELISTS } l_response.data ({ CT_PACKAGE_CODELISTS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_ct_packages_product_get (product: STRING_32): detachable CT_PACKAGE
			-- 
			-- Get CDISC Library CT Package
			-- 
			-- argument: product CT Package Product Identifier (required)
			-- 
			-- 
			-- Result CT_PACKAGE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/ct/packages/{product}"
			l_path.replace_substring_all ("{"+"product"+"}", api_client.url_encode (product.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CT_PACKAGE } l_response.data ({ CT_PACKAGE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_root_ct_product_group_codelists_codelist_get (product_group: STRING_32; codelist: STRING_32): detachable ROOT_CT_CODELIST
			-- 
			-- Get CDISC Library Root CT Codelist
			-- 
			-- argument: product_group CT Product Group Identifier (required)
			-- 
			-- argument: codelist CT Codelist Identifier (required)
			-- 
			-- 
			-- Result ROOT_CT_CODELIST
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/root/ct/{productGroup}/codelists/{codelist}"
			l_path.replace_substring_all ("{"+"productGroup"+"}", api_client.url_encode (product_group.out))
			l_path.replace_substring_all ("{"+"codelist"+"}", api_client.url_encode (codelist.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ROOT_CT_CODELIST } l_response.data ({ ROOT_CT_CODELIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_root_ct_product_group_codelists_codelist_terms_term_get (product_group: STRING_32; codelist: STRING_32; term: STRING_32): detachable ROOT_CT_TERM
			-- 
			-- Get CDISC Library Root CT Term
			-- 
			-- argument: product_group CT Product Group Identifier (required)
			-- 
			-- argument: codelist CT Codelist Identifier (required)
			-- 
			-- argument: term CT Codelist Term Identifier (required)
			-- 
			-- 
			-- Result ROOT_CT_TERM
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/root/ct/{productGroup}/codelists/{codelist}/terms/{term}"
			l_path.replace_substring_all ("{"+"productGroup"+"}", api_client.url_encode (product_group.out))
			l_path.replace_substring_all ("{"+"codelist"+"}", api_client.url_encode (codelist.out))
			l_path.replace_substring_all ("{"+"term"+"}", api_client.url_encode (term.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ROOT_CT_TERM } l_response.data ({ ROOT_CT_TERM }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end

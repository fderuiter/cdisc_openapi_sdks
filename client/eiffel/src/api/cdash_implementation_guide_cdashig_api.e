note
 description:"[
		CDISC Library API
 		REST API Documentation for CDISC Library in production server
  		The version of the OpenAPI document: 1.1.0
 	    Contact: cdisc_library_support@cdisc.org

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	CDASHIMPLEMENTATIONGUIDECDASHIG_API

inherit

    API_I


feature -- API Access


	mdr_cdashig_version_classes_class_domains_get (version: STRING_32; var_class: STRING_32): detachable CDASHIG_CLASS_DOMAINS
			-- 
			-- Get CDASHIG Class Domain List
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: var_class CDASHIG Class Identifier (required)
			-- 
			-- 
			-- Result CDASHIG_CLASS_DOMAINS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/cdashig/{version}/classes/{class}/domains"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"class"+"}", api_client.url_encode (var_class.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CDASHIG_CLASS_DOMAINS } l_response.data ({ CDASHIG_CLASS_DOMAINS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_cdashig_version_classes_class_get (version: STRING_32; var_class: STRING_32): detachable CDASHIG_CLASS
			-- 
			-- Get CDASHIG Class
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: var_class CDASHIG Class Identifier (required)
			-- 
			-- 
			-- Result CDASHIG_CLASS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/cdashig/{version}/classes/{class}"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"class"+"}", api_client.url_encode (var_class.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CDASHIG_CLASS } l_response.data ({ CDASHIG_CLASS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_cdashig_version_classes_class_scenarios_get (version: STRING_32; var_class: STRING_32): detachable CDASHIG_CLASS_SCENARIOS
			-- 
			-- Get CDASHIG Class Scenario List
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: var_class CDASHIG Class Identifier (required)
			-- 
			-- 
			-- Result CDASHIG_CLASS_SCENARIOS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/cdashig/{version}/classes/{class}/scenarios"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"class"+"}", api_client.url_encode (var_class.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CDASHIG_CLASS_SCENARIOS } l_response.data ({ CDASHIG_CLASS_SCENARIOS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_cdashig_version_classes_get (version: STRING_32): detachable CDASHIG_PRODUCT_CLASSES
			-- 
			-- Get CDASHIG Class List
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- 
			-- Result CDASHIG_PRODUCT_CLASSES
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/cdashig/{version}/classes"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CDASHIG_PRODUCT_CLASSES } l_response.data ({ CDASHIG_PRODUCT_CLASSES }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_cdashig_version_domains_domain_fields_field_get (version: STRING_32; domain: STRING_32; field: STRING_32): detachable CDASHIG_DOMAIN_FIELD
			-- 
			-- Get CDASHIG Domain Field
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: domain CDASHIG Domain Identifier (required)
			-- 
			-- argument: field CDASHIG Field Identifier (required)
			-- 
			-- 
			-- Result CDASHIG_DOMAIN_FIELD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/cdashig/{version}/domains/{domain}/fields/{field}"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"domain"+"}", api_client.url_encode (domain.out))
			l_path.replace_substring_all ("{"+"field"+"}", api_client.url_encode (field.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CDASHIG_DOMAIN_FIELD } l_response.data ({ CDASHIG_DOMAIN_FIELD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_cdashig_version_domains_domain_fields_get (version: STRING_32; domain: STRING_32): detachable CDASHIG_DOMAIN_FIELDS
			-- 
			-- Get CDASHIG Domain Field List
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: domain CDASHIG Domain Identifier (required)
			-- 
			-- 
			-- Result CDASHIG_DOMAIN_FIELDS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/cdashig/{version}/domains/{domain}/fields"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"domain"+"}", api_client.url_encode (domain.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CDASHIG_DOMAIN_FIELDS } l_response.data ({ CDASHIG_DOMAIN_FIELDS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_cdashig_version_domains_domain_get (version: STRING_32; domain: STRING_32): detachable CDASHIG_DOMAIN
			-- 
			-- Get CDASHIG Domain
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: domain CDASHIG Domain Identifier (required)
			-- 
			-- 
			-- Result CDASHIG_DOMAIN
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/cdashig/{version}/domains/{domain}"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"domain"+"}", api_client.url_encode (domain.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CDASHIG_DOMAIN } l_response.data ({ CDASHIG_DOMAIN }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_cdashig_version_domains_get (version: STRING_32): detachable CDASHIG_PRODUCT_DOMAINS
			-- 
			-- Get CDASHIG Domain List
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- 
			-- Result CDASHIG_PRODUCT_DOMAINS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/cdashig/{version}/domains"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CDASHIG_PRODUCT_DOMAINS } l_response.data ({ CDASHIG_PRODUCT_DOMAINS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_cdashig_version_get (version: STRING_32): detachable CDASHIG_PRODUCT
			-- 
			-- Get CDASHIG Product
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- 
			-- Result CDASHIG_PRODUCT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/cdashig/{version}"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CDASHIG_PRODUCT } l_response.data ({ CDASHIG_PRODUCT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_cdashig_version_scenarios_domain_scenario_fields_field_get (version: STRING_32; domain: STRING_32; scenario: STRING_32; field: STRING_32): detachable CDASHIG_SCENARIO_FIELD
			-- 
			-- Get CDASHIG Scenario Field
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: domain CDASHIG Domain Identifier (required)
			-- 
			-- argument: scenario CDASHIG Scenario Identifier (required)
			-- 
			-- argument: field CDASHIG Field Identifier (required)
			-- 
			-- 
			-- Result CDASHIG_SCENARIO_FIELD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields/{field}"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"domain"+"}", api_client.url_encode (domain.out))
			l_path.replace_substring_all ("{"+"scenario"+"}", api_client.url_encode (scenario.out))
			l_path.replace_substring_all ("{"+"field"+"}", api_client.url_encode (field.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CDASHIG_SCENARIO_FIELD } l_response.data ({ CDASHIG_SCENARIO_FIELD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_cdashig_version_scenarios_domain_scenario_fields_get (version: STRING_32; domain: STRING_32; scenario: STRING_32): detachable CDASHIG_SCENARIO_FIELDS
			-- 
			-- Get CDASHIG Scenario Field List
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: domain CDASHIG Domain Identifier (required)
			-- 
			-- argument: scenario CDASHIG Scenario Identifier (required)
			-- 
			-- 
			-- Result CDASHIG_SCENARIO_FIELDS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"domain"+"}", api_client.url_encode (domain.out))
			l_path.replace_substring_all ("{"+"scenario"+"}", api_client.url_encode (scenario.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CDASHIG_SCENARIO_FIELDS } l_response.data ({ CDASHIG_SCENARIO_FIELDS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_cdashig_version_scenarios_domain_scenario_get (version: STRING_32; domain: STRING_32; scenario: STRING_32): detachable CDASHIG_SCENARIO
			-- 
			-- Get CDASHIG Scenario
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- argument: domain CDASHIG Domain Identifier (required)
			-- 
			-- argument: scenario CDASHIG Scenario Identifier (required)
			-- 
			-- 
			-- Result CDASHIG_SCENARIO
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/cdashig/{version}/scenarios/{domain}.{scenario}"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))
			l_path.replace_substring_all ("{"+"domain"+"}", api_client.url_encode (domain.out))
			l_path.replace_substring_all ("{"+"scenario"+"}", api_client.url_encode (scenario.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CDASHIG_SCENARIO } l_response.data ({ CDASHIG_SCENARIO }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_cdashig_version_scenarios_get (version: STRING_32): detachable CDASHIG_PRODUCT_SCENARIOS
			-- 
			-- Get CDASHIG Scenario List
			-- 
			-- argument: version CDISC Library Product Version (required)
			-- 
			-- 
			-- Result CDASHIG_PRODUCT_SCENARIOS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/cdashig/{version}/scenarios"
			l_path.replace_substring_all ("{"+"version"+"}", api_client.url_encode (version.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { CDASHIG_PRODUCT_SCENARIOS } l_response.data ({ CDASHIG_PRODUCT_SCENARIOS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_root_cdashig_domains_domain_fields_field_get (domain: STRING_32; field: STRING_32): detachable ROOT_CDASHIG_DOMAIN_FIELD
			-- 
			-- Get Root CDASHIG Domain Field
			-- 
			-- argument: domain CDASHIG Domain Identifier (required)
			-- 
			-- argument: field CDASHIG Field Identifier (required)
			-- 
			-- 
			-- Result ROOT_CDASHIG_DOMAIN_FIELD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/root/cdashig/domains/{domain}/fields/{field}"
			l_path.replace_substring_all ("{"+"domain"+"}", api_client.url_encode (domain.out))
			l_path.replace_substring_all ("{"+"field"+"}", api_client.url_encode (field.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ROOT_CDASHIG_DOMAIN_FIELD } l_response.data ({ ROOT_CDASHIG_DOMAIN_FIELD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_root_cdashig_scenarios_domain_scenario_fields_field_get (domain: STRING_32; scenario: STRING_32; field: STRING_32): detachable ROOT_CDASHIG_SCENARIO_FIELD
			-- 
			-- Get Root CDASHIG Scenario Field
			-- 
			-- argument: domain CDASHIG Domain Identifier (required)
			-- 
			-- argument: scenario CDASHIG Scenario Identifier (required)
			-- 
			-- argument: field CDASHIG Field Identifier (required)
			-- 
			-- 
			-- Result ROOT_CDASHIG_SCENARIO_FIELD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/root/cdashig/scenarios/{domain}.{scenario}/fields/{field}"
			l_path.replace_substring_all ("{"+"domain"+"}", api_client.url_encode (domain.out))
			l_path.replace_substring_all ("{"+"scenario"+"}", api_client.url_encode (scenario.out))
			l_path.replace_substring_all ("{"+"field"+"}", api_client.url_encode (field.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ROOT_CDASHIG_SCENARIO_FIELD } l_response.data ({ ROOT_CDASHIG_SCENARIO_FIELD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end

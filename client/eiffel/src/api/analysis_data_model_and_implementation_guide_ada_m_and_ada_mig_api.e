note
 description:"[
		CDISC Library API
 		REST API Documentation for CDISC Library in production server
  		The version of the OpenAPI document: 1.1.0
 	    Contact: cdisc_library_support@cdisc.org

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	ANALYSISDATAMODELANDIMPLEMENTATIONGUIDEADAMANDADAMIG_API

inherit

    API_I


feature -- API Access


	mdr_adam_product_datastructures_get (product: STRING_32): detachable ADAM_PRODUCT_DATASTRUCTURES
			-- 
			-- Get ADaM Data Structure List
			-- 
			-- argument: product CDISC Library Product (required)
			-- 
			-- 
			-- Result ADAM_PRODUCT_DATASTRUCTURES
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/adam/{product}/datastructures"
			l_path.replace_substring_all ("{"+"product"+"}", api_client.url_encode (product.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml", "text/csv">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ADAM_PRODUCT_DATASTRUCTURES } l_response.data ({ ADAM_PRODUCT_DATASTRUCTURES }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_adam_product_datastructures_structure_get (product: STRING_32; structure: STRING_32): detachable ADAM_DATASTRUCTURE
			-- 
			-- Get ADaM Data Structure
			-- 
			-- argument: product CDISC Library Product (required)
			-- 
			-- argument: structure Data structure Identifier (required)
			-- 
			-- 
			-- Result ADAM_DATASTRUCTURE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/adam/{product}/datastructures/{structure}"
			l_path.replace_substring_all ("{"+"product"+"}", api_client.url_encode (product.out))
			l_path.replace_substring_all ("{"+"structure"+"}", api_client.url_encode (structure.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ADAM_DATASTRUCTURE } l_response.data ({ ADAM_DATASTRUCTURE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_adam_product_datastructures_structure_variables_get (product: STRING_32; structure: STRING_32): detachable ADAM_DATASTRUCTURE_VARIABLES
			-- 
			-- Get ADaM Variable List
			-- 
			-- argument: product CDISC Library Product (required)
			-- 
			-- argument: structure ADaM Data Structure Identifier (required)
			-- 
			-- 
			-- Result ADAM_DATASTRUCTURE_VARIABLES
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/adam/{product}/datastructures/{structure}/variables"
			l_path.replace_substring_all ("{"+"product"+"}", api_client.url_encode (product.out))
			l_path.replace_substring_all ("{"+"structure"+"}", api_client.url_encode (structure.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ADAM_DATASTRUCTURE_VARIABLES } l_response.data ({ ADAM_DATASTRUCTURE_VARIABLES }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_adam_product_datastructures_structure_variables_var_get (product: STRING_32; structure: STRING_32; var: STRING_32): detachable ADAM_VARIABLE
			-- 
			-- Get ADaM Variable
			-- 
			-- argument: product CDISC Library Product (required)
			-- 
			-- argument: structure ADaM Data Structure Identifier (required)
			-- 
			-- argument: var ADaM Variable Identifier (required)
			-- 
			-- 
			-- Result ADAM_VARIABLE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/adam/{product}/datastructures/{structure}/variables/{var}"
			l_path.replace_substring_all ("{"+"product"+"}", api_client.url_encode (product.out))
			l_path.replace_substring_all ("{"+"structure"+"}", api_client.url_encode (structure.out))
			l_path.replace_substring_all ("{"+"var"+"}", api_client.url_encode (var.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ADAM_VARIABLE } l_response.data ({ ADAM_VARIABLE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_adam_product_datastructures_structure_varsets_get (product: STRING_32; structure: STRING_32): detachable ADAM_DATASTRUCTURE_VARSETS
			-- 
			-- Get ADaM Variable Set List
			-- 
			-- argument: product CDISC Library Product (required)
			-- 
			-- argument: structure ADaM Data Structure Identifier (required)
			-- 
			-- 
			-- Result ADAM_DATASTRUCTURE_VARSETS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/adam/{product}/datastructures/{structure}/varsets"
			l_path.replace_substring_all ("{"+"product"+"}", api_client.url_encode (product.out))
			l_path.replace_substring_all ("{"+"structure"+"}", api_client.url_encode (structure.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ADAM_DATASTRUCTURE_VARSETS } l_response.data ({ ADAM_DATASTRUCTURE_VARSETS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_adam_product_datastructures_structure_varsets_varset_get (product: STRING_32; structure: STRING_32; varset: STRING_32): detachable ADAM_VARSET
			-- 
			-- Get ADaM Variable Set
			-- 
			-- argument: product CDISC Library Product (required)
			-- 
			-- argument: structure ADaM Data Structure Identifier (required)
			-- 
			-- argument: varset ADaM Variable Set Identifier (required)
			-- 
			-- 
			-- Result ADAM_VARSET
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/adam/{product}/datastructures/{structure}/varsets/{varset}"
			l_path.replace_substring_all ("{"+"product"+"}", api_client.url_encode (product.out))
			l_path.replace_substring_all ("{"+"structure"+"}", api_client.url_encode (structure.out))
			l_path.replace_substring_all ("{"+"varset"+"}", api_client.url_encode (varset.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ADAM_VARSET } l_response.data ({ ADAM_VARSET }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	mdr_adam_product_get (product: STRING_32): detachable ADAM_PRODUCT
			-- 
			-- Get ADaM Product
			-- 
			-- argument: product CDISC Library Product (required)
			-- 
			-- 
			-- Result ADAM_PRODUCT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/mdr/adam/{product}"
			l_path.replace_substring_all ("{"+"product"+"}", api_client.url_encode (product.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json", "application/xml", "text/csv", "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"basicAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { ADAM_PRODUCT } l_response.data ({ ADAM_PRODUCT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end

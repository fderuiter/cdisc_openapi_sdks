note
 description:"[
		CDISC Library API
 		REST API Documentation for CDISC Library in production server
  		The version of the OpenAPI document: 1.1.0
 	    Contact: cdisc_library_support@cdisc.org

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class EXPORT_SDTM_DATASET_VARIABLES_ROW




feature --Access

    version: detachable STRING_32
      
    variable__order: detachable STRING_32
      
    var_class: detachable STRING_32
      
    dataset__name: detachable STRING_32
      
    variable__name: detachable STRING_32
      
    variable__label: detachable STRING_32
      
    type: detachable STRING_32
      
    controlled__terms__codelist_or__format: detachable STRING_32
      
    role: detachable STRING_32
      
    role__description: detachable STRING_32
      
    description: detachable STRING_32
      

feature -- Change Element

    set_version (a_name: like version)
        -- Set 'version' with 'a_name'.
      do
        version := a_name
      ensure
        version_set: version = a_name
      end

    set_variable__order (a_name: like variable__order)
        -- Set 'variable__order' with 'a_name'.
      do
        variable__order := a_name
      ensure
        variable__order_set: variable__order = a_name
      end

    set_var_class (a_name: like var_class)
        -- Set 'var_class' with 'a_name'.
      do
        var_class := a_name
      ensure
        var_class_set: var_class = a_name
      end

    set_dataset__name (a_name: like dataset__name)
        -- Set 'dataset__name' with 'a_name'.
      do
        dataset__name := a_name
      ensure
        dataset__name_set: dataset__name = a_name
      end

    set_variable__name (a_name: like variable__name)
        -- Set 'variable__name' with 'a_name'.
      do
        variable__name := a_name
      ensure
        variable__name_set: variable__name = a_name
      end

    set_variable__label (a_name: like variable__label)
        -- Set 'variable__label' with 'a_name'.
      do
        variable__label := a_name
      ensure
        variable__label_set: variable__label = a_name
      end

    set_type (a_name: like type)
        -- Set 'type' with 'a_name'.
      do
        type := a_name
      ensure
        type_set: type = a_name
      end

    set_controlled__terms__codelist_or__format (a_name: like controlled__terms__codelist_or__format)
        -- Set 'controlled__terms__codelist_or__format' with 'a_name'.
      do
        controlled__terms__codelist_or__format := a_name
      ensure
        controlled__terms__codelist_or__format_set: controlled__terms__codelist_or__format = a_name
      end

    set_role (a_name: like role)
        -- Set 'role' with 'a_name'.
      do
        role := a_name
      ensure
        role_set: role = a_name
      end

    set_role__description (a_name: like role__description)
        -- Set 'role__description' with 'a_name'.
      do
        role__description := a_name
      ensure
        role__description_set: role__description = a_name
      end

    set_description (a_name: like description)
        -- Set 'description' with 'a_name'.
      do
        description := a_name
      ensure
        description_set: description = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass EXPORT_SDTM_DATASET_VARIABLES_ROW%N")
        if attached version as l_version then
          Result.append ("%Nversion:")
          Result.append (l_version.out)
          Result.append ("%N")
        end
        if attached variable__order as l_variable__order then
          Result.append ("%Nvariable__order:")
          Result.append (l_variable__order.out)
          Result.append ("%N")
        end
        if attached var_class as l_var_class then
          Result.append ("%Nvar_class:")
          Result.append (l_var_class.out)
          Result.append ("%N")
        end
        if attached dataset__name as l_dataset__name then
          Result.append ("%Ndataset__name:")
          Result.append (l_dataset__name.out)
          Result.append ("%N")
        end
        if attached variable__name as l_variable__name then
          Result.append ("%Nvariable__name:")
          Result.append (l_variable__name.out)
          Result.append ("%N")
        end
        if attached variable__label as l_variable__label then
          Result.append ("%Nvariable__label:")
          Result.append (l_variable__label.out)
          Result.append ("%N")
        end
        if attached type as l_type then
          Result.append ("%Ntype:")
          Result.append (l_type.out)
          Result.append ("%N")
        end
        if attached controlled__terms__codelist_or__format as l_controlled__terms__codelist_or__format then
          Result.append ("%Ncontrolled__terms__codelist_or__format:")
          Result.append (l_controlled__terms__codelist_or__format.out)
          Result.append ("%N")
        end
        if attached role as l_role then
          Result.append ("%Nrole:")
          Result.append (l_role.out)
          Result.append ("%N")
        end
        if attached role__description as l_role__description then
          Result.append ("%Nrole__description:")
          Result.append (l_role__description.out)
          Result.append ("%N")
        end
        if attached description as l_description then
          Result.append ("%Ndescription:")
          Result.append (l_description.out)
          Result.append ("%N")
        end
      end
end


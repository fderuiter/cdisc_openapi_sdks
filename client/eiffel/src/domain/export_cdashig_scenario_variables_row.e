note
 description:"[
		CDISC Library API
 		REST API Documentation for CDISC Library in production server
  		The version of the OpenAPI document: 1.1.0
 	    Contact: cdisc_library_support@cdisc.org

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class EXPORT_CDASHIG_SCENARIO_VARIABLES_ROW




feature --Access

    version: detachable STRING_32
      
    var_class: detachable STRING_32
      
    domain: detachable STRING_32
      
    data__collection__scenario: detachable STRING_32
      
    variable__order: detachable STRING_32
      
    c_da_sh_ig__variable: detachable STRING_32
      
    c_da_sh_ig__variable__label: detachable STRING_32
      
    d_ra_ft__cd_as_hi_g__definition: detachable STRING_32
      
    question__text: detachable STRING_32
      
    prompt: detachable STRING_32
      
    type: detachable STRING_32
      
    c_da_sh_ig__core: detachable STRING_32
      
    case__report__form__completion__instructions: detachable STRING_32
      
    s_dt_mi_g__target: detachable LIST [STRING_32]
      
    mapping__instructions: detachable STRING_32
      
    controlled__terminology__codelist__name: detachable STRING_32
      
    implementation__notes: detachable STRING_32
      

feature -- Change Element

    set_version (a_name: like version)
        -- Set 'version' with 'a_name'.
      do
        version := a_name
      ensure
        version_set: version = a_name
      end

    set_var_class (a_name: like var_class)
        -- Set 'var_class' with 'a_name'.
      do
        var_class := a_name
      ensure
        var_class_set: var_class = a_name
      end

    set_domain (a_name: like domain)
        -- Set 'domain' with 'a_name'.
      do
        domain := a_name
      ensure
        domain_set: domain = a_name
      end

    set_data__collection__scenario (a_name: like data__collection__scenario)
        -- Set 'data__collection__scenario' with 'a_name'.
      do
        data__collection__scenario := a_name
      ensure
        data__collection__scenario_set: data__collection__scenario = a_name
      end

    set_variable__order (a_name: like variable__order)
        -- Set 'variable__order' with 'a_name'.
      do
        variable__order := a_name
      ensure
        variable__order_set: variable__order = a_name
      end

    set_c_da_sh_ig__variable (a_name: like c_da_sh_ig__variable)
        -- Set 'c_da_sh_ig__variable' with 'a_name'.
      do
        c_da_sh_ig__variable := a_name
      ensure
        c_da_sh_ig__variable_set: c_da_sh_ig__variable = a_name
      end

    set_c_da_sh_ig__variable__label (a_name: like c_da_sh_ig__variable__label)
        -- Set 'c_da_sh_ig__variable__label' with 'a_name'.
      do
        c_da_sh_ig__variable__label := a_name
      ensure
        c_da_sh_ig__variable__label_set: c_da_sh_ig__variable__label = a_name
      end

    set_d_ra_ft__cd_as_hi_g__definition (a_name: like d_ra_ft__cd_as_hi_g__definition)
        -- Set 'd_ra_ft__cd_as_hi_g__definition' with 'a_name'.
      do
        d_ra_ft__cd_as_hi_g__definition := a_name
      ensure
        d_ra_ft__cd_as_hi_g__definition_set: d_ra_ft__cd_as_hi_g__definition = a_name
      end

    set_question__text (a_name: like question__text)
        -- Set 'question__text' with 'a_name'.
      do
        question__text := a_name
      ensure
        question__text_set: question__text = a_name
      end

    set_prompt (a_name: like prompt)
        -- Set 'prompt' with 'a_name'.
      do
        prompt := a_name
      ensure
        prompt_set: prompt = a_name
      end

    set_type (a_name: like type)
        -- Set 'type' with 'a_name'.
      do
        type := a_name
      ensure
        type_set: type = a_name
      end

    set_c_da_sh_ig__core (a_name: like c_da_sh_ig__core)
        -- Set 'c_da_sh_ig__core' with 'a_name'.
      do
        c_da_sh_ig__core := a_name
      ensure
        c_da_sh_ig__core_set: c_da_sh_ig__core = a_name
      end

    set_case__report__form__completion__instructions (a_name: like case__report__form__completion__instructions)
        -- Set 'case__report__form__completion__instructions' with 'a_name'.
      do
        case__report__form__completion__instructions := a_name
      ensure
        case__report__form__completion__instructions_set: case__report__form__completion__instructions = a_name
      end

    set_s_dt_mi_g__target (a_name: like s_dt_mi_g__target)
        -- Set 's_dt_mi_g__target' with 'a_name'.
      do
        s_dt_mi_g__target := a_name
      ensure
        s_dt_mi_g__target_set: s_dt_mi_g__target = a_name
      end

    set_mapping__instructions (a_name: like mapping__instructions)
        -- Set 'mapping__instructions' with 'a_name'.
      do
        mapping__instructions := a_name
      ensure
        mapping__instructions_set: mapping__instructions = a_name
      end

    set_controlled__terminology__codelist__name (a_name: like controlled__terminology__codelist__name)
        -- Set 'controlled__terminology__codelist__name' with 'a_name'.
      do
        controlled__terminology__codelist__name := a_name
      ensure
        controlled__terminology__codelist__name_set: controlled__terminology__codelist__name = a_name
      end

    set_implementation__notes (a_name: like implementation__notes)
        -- Set 'implementation__notes' with 'a_name'.
      do
        implementation__notes := a_name
      ensure
        implementation__notes_set: implementation__notes = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass EXPORT_CDASHIG_SCENARIO_VARIABLES_ROW%N")
        if attached version as l_version then
          Result.append ("%Nversion:")
          Result.append (l_version.out)
          Result.append ("%N")
        end
        if attached var_class as l_var_class then
          Result.append ("%Nvar_class:")
          Result.append (l_var_class.out)
          Result.append ("%N")
        end
        if attached domain as l_domain then
          Result.append ("%Ndomain:")
          Result.append (l_domain.out)
          Result.append ("%N")
        end
        if attached data__collection__scenario as l_data__collection__scenario then
          Result.append ("%Ndata__collection__scenario:")
          Result.append (l_data__collection__scenario.out)
          Result.append ("%N")
        end
        if attached variable__order as l_variable__order then
          Result.append ("%Nvariable__order:")
          Result.append (l_variable__order.out)
          Result.append ("%N")
        end
        if attached c_da_sh_ig__variable as l_c_da_sh_ig__variable then
          Result.append ("%Nc_da_sh_ig__variable:")
          Result.append (l_c_da_sh_ig__variable.out)
          Result.append ("%N")
        end
        if attached c_da_sh_ig__variable__label as l_c_da_sh_ig__variable__label then
          Result.append ("%Nc_da_sh_ig__variable__label:")
          Result.append (l_c_da_sh_ig__variable__label.out)
          Result.append ("%N")
        end
        if attached d_ra_ft__cd_as_hi_g__definition as l_d_ra_ft__cd_as_hi_g__definition then
          Result.append ("%Nd_ra_ft__cd_as_hi_g__definition:")
          Result.append (l_d_ra_ft__cd_as_hi_g__definition.out)
          Result.append ("%N")
        end
        if attached question__text as l_question__text then
          Result.append ("%Nquestion__text:")
          Result.append (l_question__text.out)
          Result.append ("%N")
        end
        if attached prompt as l_prompt then
          Result.append ("%Nprompt:")
          Result.append (l_prompt.out)
          Result.append ("%N")
        end
        if attached type as l_type then
          Result.append ("%Ntype:")
          Result.append (l_type.out)
          Result.append ("%N")
        end
        if attached c_da_sh_ig__core as l_c_da_sh_ig__core then
          Result.append ("%Nc_da_sh_ig__core:")
          Result.append (l_c_da_sh_ig__core.out)
          Result.append ("%N")
        end
        if attached case__report__form__completion__instructions as l_case__report__form__completion__instructions then
          Result.append ("%Ncase__report__form__completion__instructions:")
          Result.append (l_case__report__form__completion__instructions.out)
          Result.append ("%N")
        end
        if attached s_dt_mi_g__target as l_s_dt_mi_g__target then
          across l_s_dt_mi_g__target as ic loop
            Result.append ("%N s_dt_mi_g__target:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached mapping__instructions as l_mapping__instructions then
          Result.append ("%Nmapping__instructions:")
          Result.append (l_mapping__instructions.out)
          Result.append ("%N")
        end
        if attached controlled__terminology__codelist__name as l_controlled__terminology__codelist__name then
          Result.append ("%Ncontrolled__terminology__codelist__name:")
          Result.append (l_controlled__terminology__codelist__name.out)
          Result.append ("%N")
        end
        if attached implementation__notes as l_implementation__notes then
          Result.append ("%Nimplementation__notes:")
          Result.append (l_implementation__notes.out)
          Result.append ("%N")
        end
      end
end


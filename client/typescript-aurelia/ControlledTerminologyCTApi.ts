/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  CtTerm,
  CtPackages,
  RootCtCodelist,
  RootCtTerm,
  CtPackage,
  CtCodelistTerms,
  CtCodelist,
  CtPackageCodelists,
} from './models';

/**
 * mdrCtPackagesGet - parameters interface
 */
export interface IMdrCtPackagesGetParams {
}

/**
 * mdrCtPackagesPackageCodelistsCodelistGet - parameters interface
 */
export interface IMdrCtPackagesPackageCodelistsCodelistGetParams {
  _package: string;
  codelist: string;
}

/**
 * mdrCtPackagesPackageCodelistsCodelistTermsGet - parameters interface
 */
export interface IMdrCtPackagesPackageCodelistsCodelistTermsGetParams {
  _package: string;
  codelist: string;
}

/**
 * mdrCtPackagesPackageCodelistsCodelistTermsTermGet - parameters interface
 */
export interface IMdrCtPackagesPackageCodelistsCodelistTermsTermGetParams {
  _package: string;
  codelist: string;
  term: string;
}

/**
 * mdrCtPackagesPackageCodelistsGet - parameters interface
 */
export interface IMdrCtPackagesPackageCodelistsGetParams {
  _package: string;
}

/**
 * mdrCtPackagesProductGet - parameters interface
 */
export interface IMdrCtPackagesProductGetParams {
  product: string;
}

/**
 * mdrRootCtProductGroupCodelistsCodelistGet - parameters interface
 */
export interface IMdrRootCtProductGroupCodelistsCodelistGetParams {
  productGroup: string;
  codelist: string;
}

/**
 * mdrRootCtProductGroupCodelistsCodelistTermsTermGet - parameters interface
 */
export interface IMdrRootCtProductGroupCodelistsCodelistTermsTermGetParams {
  productGroup: string;
  codelist: string;
  term: string;
}

/**
 * ControlledTerminologyCTApi - API class
 */
@autoinject()
export class ControlledTerminologyCTApi extends Api {

  /**
   * Creates a new ControlledTerminologyCTApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get CDISC Library CT Package List
   */
  async mdrCtPackagesGet(): Promise<CtPackages> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/mdr/ct/packages`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDISC Library CT Package Codelist
   * @param params._package CT Package Identifier
   * @param params.codelist CT Codelist Identifier
   */
  async mdrCtPackagesPackageCodelistsCodelistGet(params: IMdrCtPackagesPackageCodelistsCodelistGetParams): Promise<CtCodelist> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCtPackagesPackageCodelistsCodelistGet', params, '_package');
    this.ensureParamIsSet('mdrCtPackagesPackageCodelistsCodelistGet', params, 'codelist');

    // Create URL to call
    const url = `${this.basePath}/mdr/ct/packages/{package}/codelists/{codelist}`
      .replace(`{${'package'}}`, encodeURIComponent(`${params['_package']}`))
      .replace(`{${'codelist'}}`, encodeURIComponent(`${params['codelist']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDISC Library CT Package Codelist Term List
   * @param params._package CT Package Identifier
   * @param params.codelist CT Codelist Identifier
   */
  async mdrCtPackagesPackageCodelistsCodelistTermsGet(params: IMdrCtPackagesPackageCodelistsCodelistTermsGetParams): Promise<CtCodelistTerms> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCtPackagesPackageCodelistsCodelistTermsGet', params, '_package');
    this.ensureParamIsSet('mdrCtPackagesPackageCodelistsCodelistTermsGet', params, 'codelist');

    // Create URL to call
    const url = `${this.basePath}/mdr/ct/packages/{package}/codelists/{codelist}/terms`
      .replace(`{${'package'}}`, encodeURIComponent(`${params['_package']}`))
      .replace(`{${'codelist'}}`, encodeURIComponent(`${params['codelist']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDISC Library CT Package Codelist Term
   * @param params._package CT Package Product Identifier
   * @param params.codelist CT Codelist Identifier
   * @param params.term CT Codelist Term Identifier
   */
  async mdrCtPackagesPackageCodelistsCodelistTermsTermGet(params: IMdrCtPackagesPackageCodelistsCodelistTermsTermGetParams): Promise<CtTerm> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCtPackagesPackageCodelistsCodelistTermsTermGet', params, '_package');
    this.ensureParamIsSet('mdrCtPackagesPackageCodelistsCodelistTermsTermGet', params, 'codelist');
    this.ensureParamIsSet('mdrCtPackagesPackageCodelistsCodelistTermsTermGet', params, 'term');

    // Create URL to call
    const url = `${this.basePath}/mdr/ct/packages/{package}/codelists/{codelist}/terms/{term}`
      .replace(`{${'package'}}`, encodeURIComponent(`${params['_package']}`))
      .replace(`{${'codelist'}}`, encodeURIComponent(`${params['codelist']}`))
      .replace(`{${'term'}}`, encodeURIComponent(`${params['term']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDISC Library CT Package Codelist List
   * @param params._package CT Package Identifier
   */
  async mdrCtPackagesPackageCodelistsGet(params: IMdrCtPackagesPackageCodelistsGetParams): Promise<CtPackageCodelists> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCtPackagesPackageCodelistsGet', params, '_package');

    // Create URL to call
    const url = `${this.basePath}/mdr/ct/packages/{package}/codelists`
      .replace(`{${'package'}}`, encodeURIComponent(`${params['_package']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDISC Library CT Package
   * @param params.product CT Package Product Identifier
   */
  async mdrCtPackagesProductGet(params: IMdrCtPackagesProductGetParams): Promise<CtPackage> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCtPackagesProductGet', params, 'product');

    // Create URL to call
    const url = `${this.basePath}/mdr/ct/packages/{product}`
      .replace(`{${'product'}}`, encodeURIComponent(`${params['product']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDISC Library Root CT Codelist
   * @param params.productGroup CT Product Group Identifier
   * @param params.codelist CT Codelist Identifier
   */
  async mdrRootCtProductGroupCodelistsCodelistGet(params: IMdrRootCtProductGroupCodelistsCodelistGetParams): Promise<RootCtCodelist> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrRootCtProductGroupCodelistsCodelistGet', params, 'productGroup');
    this.ensureParamIsSet('mdrRootCtProductGroupCodelistsCodelistGet', params, 'codelist');

    // Create URL to call
    const url = `${this.basePath}/mdr/root/ct/{productGroup}/codelists/{codelist}`
      .replace(`{${'productGroup'}}`, encodeURIComponent(`${params['productGroup']}`))
      .replace(`{${'codelist'}}`, encodeURIComponent(`${params['codelist']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDISC Library Root CT Term
   * @param params.productGroup CT Product Group Identifier
   * @param params.codelist CT Codelist Identifier
   * @param params.term CT Codelist Term Identifier
   */
  async mdrRootCtProductGroupCodelistsCodelistTermsTermGet(params: IMdrRootCtProductGroupCodelistsCodelistTermsTermGetParams): Promise<RootCtTerm> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrRootCtProductGroupCodelistsCodelistTermsTermGet', params, 'productGroup');
    this.ensureParamIsSet('mdrRootCtProductGroupCodelistsCodelistTermsTermGet', params, 'codelist');
    this.ensureParamIsSet('mdrRootCtProductGroupCodelistsCodelistTermsTermGet', params, 'term');

    // Create URL to call
    const url = `${this.basePath}/mdr/root/ct/{productGroup}/codelists/{codelist}/terms/{term}`
      .replace(`{${'productGroup'}}`, encodeURIComponent(`${params['productGroup']}`))
      .replace(`{${'codelist'}}`, encodeURIComponent(`${params['codelist']}`))
      .replace(`{${'term'}}`, encodeURIComponent(`${params['term']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}


/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  SdtmDatasets,
  RootSdtmDatasetVariable,
  RootSdtmClassVariable,
  SdtmClass,
  SdtmClassVariables,
  SdtmDataset,
  SdtmClassDatasets,
  SdtmDatasetVariables,
  SdtmProduct,
  SdtmClassVariable,
  SdtmClasses,
  SdtmDatasetVariable,
} from './models';

/**
 * mdrRootSdtmClassesClassVariablesVarGet - parameters interface
 */
export interface IMdrRootSdtmClassesClassVariablesVarGetParams {
  _class: string;
  _var: string;
}

/**
 * mdrRootSdtmDatasetsDatasetVariablesVarGet - parameters interface
 */
export interface IMdrRootSdtmDatasetsDatasetVariablesVarGetParams {
  dataset: string;
  _var: string;
}

/**
 * mdrSdtmVersionClassesClassDatasetsGet - parameters interface
 */
export interface IMdrSdtmVersionClassesClassDatasetsGetParams {
  version: string;
  _class: string;
}

/**
 * mdrSdtmVersionClassesClassGet - parameters interface
 */
export interface IMdrSdtmVersionClassesClassGetParams {
  version: string;
  _class: string;
}

/**
 * mdrSdtmVersionClassesClassVariablesGet - parameters interface
 */
export interface IMdrSdtmVersionClassesClassVariablesGetParams {
  version: string;
  _class: string;
}

/**
 * mdrSdtmVersionClassesClassVariablesVarGet - parameters interface
 */
export interface IMdrSdtmVersionClassesClassVariablesVarGetParams {
  version: string;
  _class: string;
  _var: string;
}

/**
 * mdrSdtmVersionClassesGet - parameters interface
 */
export interface IMdrSdtmVersionClassesGetParams {
  version: string;
}

/**
 * mdrSdtmVersionDatasetsDatasetGet - parameters interface
 */
export interface IMdrSdtmVersionDatasetsDatasetGetParams {
  version: string;
  dataset: string;
}

/**
 * mdrSdtmVersionDatasetsDatasetVariablesGet - parameters interface
 */
export interface IMdrSdtmVersionDatasetsDatasetVariablesGetParams {
  version: string;
  dataset: string;
}

/**
 * mdrSdtmVersionDatasetsDatasetVariablesVarGet - parameters interface
 */
export interface IMdrSdtmVersionDatasetsDatasetVariablesVarGetParams {
  version: string;
  dataset: string;
  _var: string;
}

/**
 * mdrSdtmVersionDatasetsGet - parameters interface
 */
export interface IMdrSdtmVersionDatasetsGetParams {
  version: string;
}

/**
 * mdrSdtmVersionGet - parameters interface
 */
export interface IMdrSdtmVersionGetParams {
  version: string;
}

/**
 * StudyDataTabulationModelSDTMApi - API class
 */
@autoinject()
export class StudyDataTabulationModelSDTMApi extends Api {

  /**
   * Creates a new StudyDataTabulationModelSDTMApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get Root of SDTM Class Variable
   * @param params._class SDTM Class Identifier
   * @param params._var SDTM Variable Identifier
   */
  async mdrRootSdtmClassesClassVariablesVarGet(params: IMdrRootSdtmClassesClassVariablesVarGetParams): Promise<RootSdtmClassVariable> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrRootSdtmClassesClassVariablesVarGet', params, '_class');
    this.ensureParamIsSet('mdrRootSdtmClassesClassVariablesVarGet', params, '_var');

    // Create URL to call
    const url = `${this.basePath}/mdr/root/sdtm/classes/{class}/variables/{var}`
      .replace(`{${'class'}}`, encodeURIComponent(`${params['_class']}`))
      .replace(`{${'var'}}`, encodeURIComponent(`${params['_var']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Root SDTM Dataset Variable
   * @param params.dataset SDTM Dataset Identifier
   * @param params._var SDTM Variable Identifier
   */
  async mdrRootSdtmDatasetsDatasetVariablesVarGet(params: IMdrRootSdtmDatasetsDatasetVariablesVarGetParams): Promise<RootSdtmDatasetVariable> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrRootSdtmDatasetsDatasetVariablesVarGet', params, 'dataset');
    this.ensureParamIsSet('mdrRootSdtmDatasetsDatasetVariablesVarGet', params, '_var');

    // Create URL to call
    const url = `${this.basePath}/mdr/root/sdtm/datasets/{dataset}/variables/{var}`
      .replace(`{${'dataset'}}`, encodeURIComponent(`${params['dataset']}`))
      .replace(`{${'var'}}`, encodeURIComponent(`${params['_var']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SDTM Class Dataset List
   * @param params.version CDISC Library Product Version
   * @param params._class SDTM Class Identifier
   */
  async mdrSdtmVersionClassesClassDatasetsGet(params: IMdrSdtmVersionClassesClassDatasetsGetParams): Promise<SdtmClassDatasets> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSdtmVersionClassesClassDatasetsGet', params, 'version');
    this.ensureParamIsSet('mdrSdtmVersionClassesClassDatasetsGet', params, '_class');

    // Create URL to call
    const url = `${this.basePath}/mdr/sdtm/{version}/classes/{class}/datasets`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'class'}}`, encodeURIComponent(`${params['_class']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SDTM Class
   * @param params.version CDISC Library Product Version
   * @param params._class SDTM Class Identifier
   */
  async mdrSdtmVersionClassesClassGet(params: IMdrSdtmVersionClassesClassGetParams): Promise<SdtmClass> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSdtmVersionClassesClassGet', params, 'version');
    this.ensureParamIsSet('mdrSdtmVersionClassesClassGet', params, '_class');

    // Create URL to call
    const url = `${this.basePath}/mdr/sdtm/{version}/classes/{class}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'class'}}`, encodeURIComponent(`${params['_class']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SDTM Class Variable List
   * @param params.version CDISC Library Product Version
   * @param params._class SDTM Class Identifier
   */
  async mdrSdtmVersionClassesClassVariablesGet(params: IMdrSdtmVersionClassesClassVariablesGetParams): Promise<SdtmClassVariables> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSdtmVersionClassesClassVariablesGet', params, 'version');
    this.ensureParamIsSet('mdrSdtmVersionClassesClassVariablesGet', params, '_class');

    // Create URL to call
    const url = `${this.basePath}/mdr/sdtm/{version}/classes/{class}/variables`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'class'}}`, encodeURIComponent(`${params['_class']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SDTM Class Variable
   * @param params.version CDISC Library Product Version
   * @param params._class SDTM Class Identifier
   * @param params._var SDTM Variable Identifier
   */
  async mdrSdtmVersionClassesClassVariablesVarGet(params: IMdrSdtmVersionClassesClassVariablesVarGetParams): Promise<SdtmClassVariable> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSdtmVersionClassesClassVariablesVarGet', params, 'version');
    this.ensureParamIsSet('mdrSdtmVersionClassesClassVariablesVarGet', params, '_class');
    this.ensureParamIsSet('mdrSdtmVersionClassesClassVariablesVarGet', params, '_var');

    // Create URL to call
    const url = `${this.basePath}/mdr/sdtm/{version}/classes/{class}/variables/{var}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'class'}}`, encodeURIComponent(`${params['_class']}`))
      .replace(`{${'var'}}`, encodeURIComponent(`${params['_var']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SDTM Class List
   * @param params.version CDISC Library Product Version
   */
  async mdrSdtmVersionClassesGet(params: IMdrSdtmVersionClassesGetParams): Promise<SdtmClasses> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSdtmVersionClassesGet', params, 'version');

    // Create URL to call
    const url = `${this.basePath}/mdr/sdtm/{version}/classes`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SDTM Dataset
   * @param params.version CDISC Library Product Version
   * @param params.dataset SDTM Dataset Identifier
   */
  async mdrSdtmVersionDatasetsDatasetGet(params: IMdrSdtmVersionDatasetsDatasetGetParams): Promise<SdtmDataset> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSdtmVersionDatasetsDatasetGet', params, 'version');
    this.ensureParamIsSet('mdrSdtmVersionDatasetsDatasetGet', params, 'dataset');

    // Create URL to call
    const url = `${this.basePath}/mdr/sdtm/{version}/datasets/{dataset}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'dataset'}}`, encodeURIComponent(`${params['dataset']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SDTM Dataset Variable List
   * @param params.version CDISC Library Product Version
   * @param params.dataset SDTM Dataset Identifier
   */
  async mdrSdtmVersionDatasetsDatasetVariablesGet(params: IMdrSdtmVersionDatasetsDatasetVariablesGetParams): Promise<SdtmDatasetVariables> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSdtmVersionDatasetsDatasetVariablesGet', params, 'version');
    this.ensureParamIsSet('mdrSdtmVersionDatasetsDatasetVariablesGet', params, 'dataset');

    // Create URL to call
    const url = `${this.basePath}/mdr/sdtm/{version}/datasets/{dataset}/variables`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'dataset'}}`, encodeURIComponent(`${params['dataset']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SDTM Dataset Variable
   * @param params.version CDISC Library Product Version
   * @param params.dataset SDTM Dataset Identifier
   * @param params._var SDTM Variable Identifier
   */
  async mdrSdtmVersionDatasetsDatasetVariablesVarGet(params: IMdrSdtmVersionDatasetsDatasetVariablesVarGetParams): Promise<SdtmDatasetVariable> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSdtmVersionDatasetsDatasetVariablesVarGet', params, 'version');
    this.ensureParamIsSet('mdrSdtmVersionDatasetsDatasetVariablesVarGet', params, 'dataset');
    this.ensureParamIsSet('mdrSdtmVersionDatasetsDatasetVariablesVarGet', params, '_var');

    // Create URL to call
    const url = `${this.basePath}/mdr/sdtm/{version}/datasets/{dataset}/variables/{var}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'dataset'}}`, encodeURIComponent(`${params['dataset']}`))
      .replace(`{${'var'}}`, encodeURIComponent(`${params['_var']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SDTM Dataset List
   * @param params.version CDISC Library Product Version
   */
  async mdrSdtmVersionDatasetsGet(params: IMdrSdtmVersionDatasetsGetParams): Promise<SdtmDatasets> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSdtmVersionDatasetsGet', params, 'version');

    // Create URL to call
    const url = `${this.basePath}/mdr/sdtm/{version}/datasets`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get SDTM product
   * @param params.version CDISC Library Product Version
   */
  async mdrSdtmVersionGet(params: IMdrSdtmVersionGetParams): Promise<SdtmProduct> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSdtmVersionGet', params, 'version');

    // Create URL to call
    const url = `${this.basePath}/mdr/sdtm/{version}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}


/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  MdrSearchScopesGet200Response,
  DefaultSearchResponse,
  DefaultSearchScopes,
  ScopeValues,
} from './models';

/**
 * mdrSearchGet - parameters interface
 */
export interface IMdrSearchGetParams {
  q: string;
  highlight?: string;
  start?: number;
  pageSize?: number;
  _class?: string;
  codelist?: string;
  conceptId?: string;
  core?: string;
  dataStructure?: string;
  datasetStructure?: string;
  definition?: string;
  description?: string;
  domain?: string;
  effectiveDate?: string;
  extensible?: string;
  href?: string;
  label?: string;
  measureType?: string;
  name?: string;
  preferredTerm?: string;
  product?: string;
  productGroup?: string;
  registrationStatus?: string;
  roleDescription?: string;
  sdtmTarget?: string;
  simpleDatatype?: string;
  submissionValue?: string;
  synonyms?: string;
  type?: string;
  uiHref?: string;
  valueDomain?: string;
  variableSet?: string;
  version?: string;
}

/**
 * mdrSearchScopesGet - parameters interface
 */
export interface IMdrSearchScopesGetParams {
}

/**
 * mdrSearchScopesScopeGet - parameters interface
 */
export interface IMdrSearchScopesScopeGetParams {
  scope: DefaultSearchScopes;
}

/**
 * SearchesApi - API class
 */
@autoinject()
export class SearchesApi extends Api {

  /**
   * Creates a new SearchesApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get Search Results Across CDISC Library
   * @param params.q Search Term Expression
   * @param params.highlight Search Highlight Expression
   * @param params.start Initial Search Result Index
   * @param params.pageSize Number of Search Results to Return
   * @param params._class Limit Search by Setting Scope to Class
   * @param params.codelist Limit Search by Setting Scope to Codelist
   * @param params.conceptId Limit Search by Setting Scope to Concept ID
   * @param params.core Limit Search by Setting Scope to Core
   * @param params.dataStructure Limit Search by Setting Scope to Data Structure
   * @param params.datasetStructure Limit Search by Setting Scope to Dataset Structure
   * @param params.definition Limit Search by Setting Scope to Definition
   * @param params.description Limit Search by Setting Scope to Description
   * @param params.domain Limit Search by Setting Scope to Domain
   * @param params.effectiveDate Limit Search by Setting Scope to Effective Date
   * @param params.extensible Limit Search by Setting Scope to Extensible
   * @param params.href Limit Search by Setting Scope to Href
   * @param params.label Limit Search by Setting Scope to Label
   * @param params.measureType SLimit Search by Setting Scope to Measure Type
   * @param params.name Limit Search by Setting Scope to Name
   * @param params.preferredTerm Limit Search by Setting Scope to Preferred Term
   * @param params.product Limit Search by Setting Scope to Product
   * @param params.productGroup Limit Search by Setting Scope to Product Group
   * @param params.registrationStatus Limit Search by Setting Scope to Registration Status
   * @param params.roleDescription Limit Search by Setting Scope to Role Description
   * @param params.sdtmTarget Limit Search by Setting Scope to SDTM Target
   * @param params.simpleDatatype Limit Search by Setting Scope to Simple Datatype
   * @param params.submissionValue Limit Search by Setting Scope to Submission Value
   * @param params.synonyms Limit Search by Setting Scope to Synonyms
   * @param params.type Limit Search by Setting Scope to Type
   * @param params.uiHref Limit Search by Setting Scope to UI Href
   * @param params.valueDomain Limit Search by Setting Scope to Value Domain
   * @param params.variableSet Limit Search by Setting Scope to Variable Set
   * @param params.version Limit Search by Setting Scope to Version
   */
  async mdrSearchGet(params: IMdrSearchGetParams): Promise<DefaultSearchResponse> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSearchGet', params, 'q');

    // Create URL to call
    const url = `${this.basePath}/mdr/search`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'q': params['q'],
        'highlight': params['highlight'],
        'start': params['start'],
        'pageSize': params['pageSize'],
        'class': params['_class'],
        'codelist': params['codelist'],
        'conceptId': params['conceptId'],
        'core': params['core'],
        'dataStructure': params['dataStructure'],
        'datasetStructure': params['datasetStructure'],
        'definition': params['definition'],
        'description': params['description'],
        'domain': params['domain'],
        'effectiveDate': params['effectiveDate'],
        'extensible': params['extensible'],
        'href': params['href'],
        'label': params['label'],
        'measureType': params['measureType'],
        'name': params['name'],
        'preferredTerm': params['preferredTerm'],
        'product': params['product'],
        'productGroup': params['productGroup'],
        'registrationStatus': params['registrationStatus'],
        'roleDescription': params['roleDescription'],
        'sdtmTarget': params['sdtmTarget'],
        'simpleDatatype': params['simpleDatatype'],
        'submissionValue': params['submissionValue'],
        'synonyms': params['synonyms'],
        'type': params['type'],
        'uiHref': params['uiHref'],
        'valueDomain': params['valueDomain'],
        'variableSet': params['variableSet'],
        'version': params['version'],
      })

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Search Results Across CDISC Library
   */
  async mdrSearchScopesGet(): Promise<MdrSearchScopesGet200Response> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/mdr/search/scopes`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Search Results Limited to Scope
   * @param params.scope Search Scope
   */
  async mdrSearchScopesScopeGet(params: IMdrSearchScopesScopeGetParams): Promise<ScopeValues> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrSearchScopesScopeGet', params, 'scope');

    // Create URL to call
    const url = `${this.basePath}/mdr/search/scopes/{scope}`
      .replace(`{${'scope'}}`, encodeURIComponent(`${params['scope']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}


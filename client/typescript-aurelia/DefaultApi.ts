/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  ProductgroupTerminology,
  Products,
  Lastupdated,
  ProductgroupQrs,
  ProductgroupDataTabulation,
  ProductgroupDataCollection,
  ProductgroupDataAnalysis,
  About,
} from './models';

/**
 * mdrAboutGet - parameters interface
 */
export interface IMdrAboutGetParams {
}

/**
 * mdrLastupdatedGet - parameters interface
 */
export interface IMdrLastupdatedGetParams {
}

/**
 * mdrProductsDataAnalysisGet - parameters interface
 */
export interface IMdrProductsDataAnalysisGetParams {
}

/**
 * mdrProductsDataCollectionGet - parameters interface
 */
export interface IMdrProductsDataCollectionGetParams {
}

/**
 * mdrProductsDataTabulationGet - parameters interface
 */
export interface IMdrProductsDataTabulationGetParams {
}

/**
 * mdrProductsGet - parameters interface
 */
export interface IMdrProductsGetParams {
}

/**
 * mdrProductsMeasuresGet - parameters interface
 */
export interface IMdrProductsMeasuresGetParams {
}

/**
 * mdrProductsTerminologyGet - parameters interface
 */
export interface IMdrProductsTerminologyGetParams {
}

/**
 * DefaultApi - API class
 */
@autoinject()
export class DefaultApi extends Api {

  /**
   * Creates a new DefaultApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get Information About CDISC Library
   */
  async mdrAboutGet(): Promise<About> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/mdr/about`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDISC Library Last Updated
   */
  async mdrLastupdatedGet(): Promise<Lastupdated> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/mdr/lastupdated`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDISC Library Product Group Data Analysis
   */
  async mdrProductsDataAnalysisGet(): Promise<ProductgroupDataAnalysis> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/mdr/products/DataAnalysis`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDISC Library Product Group Data Collection
   */
  async mdrProductsDataCollectionGet(): Promise<ProductgroupDataCollection> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/mdr/products/DataCollection`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDISC Library Product Group Data Tabulation
   */
  async mdrProductsDataTabulationGet(): Promise<ProductgroupDataTabulation> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/mdr/products/DataTabulation`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDISC Library Products
   */
  async mdrProductsGet(): Promise<Products> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/mdr/products`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDISC Library Product Group QRS
   */
  async mdrProductsMeasuresGet(): Promise<ProductgroupQrs> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/mdr/products/Measures`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDISC Library Product Group Terminology
   */
  async mdrProductsTerminologyGet(): Promise<ProductgroupTerminology> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/mdr/products/Terminology`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}


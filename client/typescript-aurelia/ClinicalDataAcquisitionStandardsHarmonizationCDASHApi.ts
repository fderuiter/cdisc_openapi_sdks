/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  CdashProductClasses,
  CdashDomain,
  CdashProductDomains,
  RootCdashClassField,
  CdashProduct,
  RootCdashDomainField,
  CdashClassDomains,
  CdashDomainFields,
  CdashClassField,
  CdashClass,
  CdashDomainField,
} from './models';

/**
 * mdrCdashVersionClassesClassDomainsGet - parameters interface
 */
export interface IMdrCdashVersionClassesClassDomainsGetParams {
  version: string;
  _class: string;
}

/**
 * mdrCdashVersionClassesClassFieldsFieldGet - parameters interface
 */
export interface IMdrCdashVersionClassesClassFieldsFieldGetParams {
  version: string;
  _class: string;
  field: string;
}

/**
 * mdrCdashVersionClassesClassGet - parameters interface
 */
export interface IMdrCdashVersionClassesClassGetParams {
  version: string;
  _class: string;
}

/**
 * mdrCdashVersionClassesGet - parameters interface
 */
export interface IMdrCdashVersionClassesGetParams {
  version: string;
}

/**
 * mdrCdashVersionDomainsDomainFieldsFieldGet - parameters interface
 */
export interface IMdrCdashVersionDomainsDomainFieldsFieldGetParams {
  version: string;
  domain: string;
  field: string;
}

/**
 * mdrCdashVersionDomainsDomainFieldsGet - parameters interface
 */
export interface IMdrCdashVersionDomainsDomainFieldsGetParams {
  version: string;
  domain: string;
}

/**
 * mdrCdashVersionDomainsDomainGet - parameters interface
 */
export interface IMdrCdashVersionDomainsDomainGetParams {
  version: string;
  domain: string;
}

/**
 * mdrCdashVersionDomainsGet - parameters interface
 */
export interface IMdrCdashVersionDomainsGetParams {
  version: string;
}

/**
 * mdrCdashVersionGet - parameters interface
 */
export interface IMdrCdashVersionGetParams {
  version: string;
}

/**
 * mdrRootCdashClassesClassFieldsFieldGet - parameters interface
 */
export interface IMdrRootCdashClassesClassFieldsFieldGetParams {
  _class: string;
  field: string;
}

/**
 * mdrRootCdashDomainsDomainFieldsFieldGet - parameters interface
 */
export interface IMdrRootCdashDomainsDomainFieldsFieldGetParams {
  domain: string;
  field: string;
}

/**
 * ClinicalDataAcquisitionStandardsHarmonizationCDASHApi - API class
 */
@autoinject()
export class ClinicalDataAcquisitionStandardsHarmonizationCDASHApi extends Api {

  /**
   * Creates a new ClinicalDataAcquisitionStandardsHarmonizationCDASHApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get CDASH Class Domain List
   * @param params.version CDISC Library Product Version
   * @param params._class CDASH Class Identifier
   */
  async mdrCdashVersionClassesClassDomainsGet(params: IMdrCdashVersionClassesClassDomainsGetParams): Promise<CdashClassDomains> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCdashVersionClassesClassDomainsGet', params, 'version');
    this.ensureParamIsSet('mdrCdashVersionClassesClassDomainsGet', params, '_class');

    // Create URL to call
    const url = `${this.basePath}/mdr/cdash/{version}/classes/{class}/domains`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'class'}}`, encodeURIComponent(`${params['_class']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDASH Class Field
   * @param params.version CDISC Library Product Version
   * @param params._class CDASH Class Identifier
   * @param params.field CDASH Field Identifier
   */
  async mdrCdashVersionClassesClassFieldsFieldGet(params: IMdrCdashVersionClassesClassFieldsFieldGetParams): Promise<CdashClassField> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCdashVersionClassesClassFieldsFieldGet', params, 'version');
    this.ensureParamIsSet('mdrCdashVersionClassesClassFieldsFieldGet', params, '_class');
    this.ensureParamIsSet('mdrCdashVersionClassesClassFieldsFieldGet', params, 'field');

    // Create URL to call
    const url = `${this.basePath}/mdr/cdash/{version}/classes/{class}/fields/{field}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'class'}}`, encodeURIComponent(`${params['_class']}`))
      .replace(`{${'field'}}`, encodeURIComponent(`${params['field']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDASH Class
   * @param params.version CDISC Library Product Version
   * @param params._class CDASH Class Identifier
   */
  async mdrCdashVersionClassesClassGet(params: IMdrCdashVersionClassesClassGetParams): Promise<CdashClass> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCdashVersionClassesClassGet', params, 'version');
    this.ensureParamIsSet('mdrCdashVersionClassesClassGet', params, '_class');

    // Create URL to call
    const url = `${this.basePath}/mdr/cdash/{version}/classes/{class}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'class'}}`, encodeURIComponent(`${params['_class']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDASH Class List
   * @param params.version CDISC Library Product Version
   */
  async mdrCdashVersionClassesGet(params: IMdrCdashVersionClassesGetParams): Promise<CdashProductClasses> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCdashVersionClassesGet', params, 'version');

    // Create URL to call
    const url = `${this.basePath}/mdr/cdash/{version}/classes`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDASH Domain Field
   * @param params.version CDISC Library Product Version
   * @param params.domain CDASH Domain Identifier
   * @param params.field CDASH Field Identifier
   */
  async mdrCdashVersionDomainsDomainFieldsFieldGet(params: IMdrCdashVersionDomainsDomainFieldsFieldGetParams): Promise<CdashDomainField> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCdashVersionDomainsDomainFieldsFieldGet', params, 'version');
    this.ensureParamIsSet('mdrCdashVersionDomainsDomainFieldsFieldGet', params, 'domain');
    this.ensureParamIsSet('mdrCdashVersionDomainsDomainFieldsFieldGet', params, 'field');

    // Create URL to call
    const url = `${this.basePath}/mdr/cdash/{version}/domains/{domain}/fields/{field}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'domain'}}`, encodeURIComponent(`${params['domain']}`))
      .replace(`{${'field'}}`, encodeURIComponent(`${params['field']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDASH Domain Field List
   * @param params.version CDISC Library Product Version
   * @param params.domain CDASH Domain Identifier
   */
  async mdrCdashVersionDomainsDomainFieldsGet(params: IMdrCdashVersionDomainsDomainFieldsGetParams): Promise<CdashDomainFields> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCdashVersionDomainsDomainFieldsGet', params, 'version');
    this.ensureParamIsSet('mdrCdashVersionDomainsDomainFieldsGet', params, 'domain');

    // Create URL to call
    const url = `${this.basePath}/mdr/cdash/{version}/domains/{domain}/fields`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'domain'}}`, encodeURIComponent(`${params['domain']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDASH Domain
   * @param params.version CDISC Library Product Version
   * @param params.domain CDASH Domain Identifier
   */
  async mdrCdashVersionDomainsDomainGet(params: IMdrCdashVersionDomainsDomainGetParams): Promise<CdashDomain> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCdashVersionDomainsDomainGet', params, 'version');
    this.ensureParamIsSet('mdrCdashVersionDomainsDomainGet', params, 'domain');

    // Create URL to call
    const url = `${this.basePath}/mdr/cdash/{version}/domains/{domain}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'domain'}}`, encodeURIComponent(`${params['domain']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDASH Domain List
   * @param params.version CDISC Library Product Version
   */
  async mdrCdashVersionDomainsGet(params: IMdrCdashVersionDomainsGetParams): Promise<CdashProductDomains> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCdashVersionDomainsGet', params, 'version');

    // Create URL to call
    const url = `${this.basePath}/mdr/cdash/{version}/domains`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDASH Product
   * @param params.version CDISC Library Product Version
   */
  async mdrCdashVersionGet(params: IMdrCdashVersionGetParams): Promise<CdashProduct> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCdashVersionGet', params, 'version');

    // Create URL to call
    const url = `${this.basePath}/mdr/cdash/{version}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Root CDASH Class Field
   * @param params._class CDASH Class Identifier
   * @param params.field CDASH Field Identifier
   */
  async mdrRootCdashClassesClassFieldsFieldGet(params: IMdrRootCdashClassesClassFieldsFieldGetParams): Promise<RootCdashClassField> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrRootCdashClassesClassFieldsFieldGet', params, '_class');
    this.ensureParamIsSet('mdrRootCdashClassesClassFieldsFieldGet', params, 'field');

    // Create URL to call
    const url = `${this.basePath}/mdr/root/cdash/classes/{class}/fields/{field}`
      .replace(`{${'class'}}`, encodeURIComponent(`${params['_class']}`))
      .replace(`{${'field'}}`, encodeURIComponent(`${params['field']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Root CDASH Domain Field
   * @param params.domain CDASH Domain Identifier
   * @param params.field CDASH Field Identifier
   */
  async mdrRootCdashDomainsDomainFieldsFieldGet(params: IMdrRootCdashDomainsDomainFieldsFieldGetParams): Promise<RootCdashDomainField> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrRootCdashDomainsDomainFieldsFieldGet', params, 'domain');
    this.ensureParamIsSet('mdrRootCdashDomainsDomainFieldsFieldGet', params, 'field');

    // Create URL to call
    const url = `${this.basePath}/mdr/root/cdash/domains/{domain}/fields/{field}`
      .replace(`{${'domain'}}`, encodeURIComponent(`${params['domain']}`))
      .replace(`{${'field'}}`, encodeURIComponent(`${params['field']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}


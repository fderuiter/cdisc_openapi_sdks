/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  AdamProductDatastructures,
  AdamDatastructureVarsets,
  AdamDatastructureVariables,
  AdamProduct,
  AdamDatastructure,
  AdamVariable,
  AdamVarset,
} from './models';

/**
 * mdrAdamProductDatastructuresGet - parameters interface
 */
export interface IMdrAdamProductDatastructuresGetParams {
  product: string;
}

/**
 * mdrAdamProductDatastructuresStructureGet - parameters interface
 */
export interface IMdrAdamProductDatastructuresStructureGetParams {
  product: string;
  structure: string;
}

/**
 * mdrAdamProductDatastructuresStructureVariablesGet - parameters interface
 */
export interface IMdrAdamProductDatastructuresStructureVariablesGetParams {
  product: string;
  structure: string;
}

/**
 * mdrAdamProductDatastructuresStructureVariablesVarGet - parameters interface
 */
export interface IMdrAdamProductDatastructuresStructureVariablesVarGetParams {
  product: string;
  structure: string;
  _var: string;
}

/**
 * mdrAdamProductDatastructuresStructureVarsetsGet - parameters interface
 */
export interface IMdrAdamProductDatastructuresStructureVarsetsGetParams {
  product: string;
  structure: string;
}

/**
 * mdrAdamProductDatastructuresStructureVarsetsVarsetGet - parameters interface
 */
export interface IMdrAdamProductDatastructuresStructureVarsetsVarsetGetParams {
  product: string;
  structure: string;
  varset: string;
}

/**
 * mdrAdamProductGet - parameters interface
 */
export interface IMdrAdamProductGetParams {
  product: string;
}

/**
 * AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi - API class
 */
@autoinject()
export class AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi extends Api {

  /**
   * Creates a new AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get ADaM Data Structure List
   * @param params.product CDISC Library Product
   */
  async mdrAdamProductDatastructuresGet(params: IMdrAdamProductDatastructuresGetParams): Promise<AdamProductDatastructures> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrAdamProductDatastructuresGet', params, 'product');

    // Create URL to call
    const url = `${this.basePath}/mdr/adam/{product}/datastructures`
      .replace(`{${'product'}}`, encodeURIComponent(`${params['product']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get ADaM Data Structure
   * @param params.product CDISC Library Product
   * @param params.structure Data structure Identifier
   */
  async mdrAdamProductDatastructuresStructureGet(params: IMdrAdamProductDatastructuresStructureGetParams): Promise<AdamDatastructure> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrAdamProductDatastructuresStructureGet', params, 'product');
    this.ensureParamIsSet('mdrAdamProductDatastructuresStructureGet', params, 'structure');

    // Create URL to call
    const url = `${this.basePath}/mdr/adam/{product}/datastructures/{structure}`
      .replace(`{${'product'}}`, encodeURIComponent(`${params['product']}`))
      .replace(`{${'structure'}}`, encodeURIComponent(`${params['structure']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get ADaM Variable List
   * @param params.product CDISC Library Product
   * @param params.structure ADaM Data Structure Identifier
   */
  async mdrAdamProductDatastructuresStructureVariablesGet(params: IMdrAdamProductDatastructuresStructureVariablesGetParams): Promise<AdamDatastructureVariables> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrAdamProductDatastructuresStructureVariablesGet', params, 'product');
    this.ensureParamIsSet('mdrAdamProductDatastructuresStructureVariablesGet', params, 'structure');

    // Create URL to call
    const url = `${this.basePath}/mdr/adam/{product}/datastructures/{structure}/variables`
      .replace(`{${'product'}}`, encodeURIComponent(`${params['product']}`))
      .replace(`{${'structure'}}`, encodeURIComponent(`${params['structure']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get ADaM Variable
   * @param params.product CDISC Library Product
   * @param params.structure ADaM Data Structure Identifier
   * @param params._var ADaM Variable Identifier
   */
  async mdrAdamProductDatastructuresStructureVariablesVarGet(params: IMdrAdamProductDatastructuresStructureVariablesVarGetParams): Promise<AdamVariable> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrAdamProductDatastructuresStructureVariablesVarGet', params, 'product');
    this.ensureParamIsSet('mdrAdamProductDatastructuresStructureVariablesVarGet', params, 'structure');
    this.ensureParamIsSet('mdrAdamProductDatastructuresStructureVariablesVarGet', params, '_var');

    // Create URL to call
    const url = `${this.basePath}/mdr/adam/{product}/datastructures/{structure}/variables/{var}`
      .replace(`{${'product'}}`, encodeURIComponent(`${params['product']}`))
      .replace(`{${'structure'}}`, encodeURIComponent(`${params['structure']}`))
      .replace(`{${'var'}}`, encodeURIComponent(`${params['_var']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get ADaM Variable Set List
   * @param params.product CDISC Library Product
   * @param params.structure ADaM Data Structure Identifier
   */
  async mdrAdamProductDatastructuresStructureVarsetsGet(params: IMdrAdamProductDatastructuresStructureVarsetsGetParams): Promise<AdamDatastructureVarsets> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrAdamProductDatastructuresStructureVarsetsGet', params, 'product');
    this.ensureParamIsSet('mdrAdamProductDatastructuresStructureVarsetsGet', params, 'structure');

    // Create URL to call
    const url = `${this.basePath}/mdr/adam/{product}/datastructures/{structure}/varsets`
      .replace(`{${'product'}}`, encodeURIComponent(`${params['product']}`))
      .replace(`{${'structure'}}`, encodeURIComponent(`${params['structure']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get ADaM Variable Set
   * @param params.product CDISC Library Product
   * @param params.structure ADaM Data Structure Identifier
   * @param params.varset ADaM Variable Set Identifier
   */
  async mdrAdamProductDatastructuresStructureVarsetsVarsetGet(params: IMdrAdamProductDatastructuresStructureVarsetsVarsetGetParams): Promise<AdamVarset> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrAdamProductDatastructuresStructureVarsetsVarsetGet', params, 'product');
    this.ensureParamIsSet('mdrAdamProductDatastructuresStructureVarsetsVarsetGet', params, 'structure');
    this.ensureParamIsSet('mdrAdamProductDatastructuresStructureVarsetsVarsetGet', params, 'varset');

    // Create URL to call
    const url = `${this.basePath}/mdr/adam/{product}/datastructures/{structure}/varsets/{varset}`
      .replace(`{${'product'}}`, encodeURIComponent(`${params['product']}`))
      .replace(`{${'structure'}}`, encodeURIComponent(`${params['structure']}`))
      .replace(`{${'varset'}}`, encodeURIComponent(`${params['varset']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get ADaM Product
   * @param params.product CDISC Library Product
   */
  async mdrAdamProductGet(params: IMdrAdamProductGetParams): Promise<AdamProduct> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrAdamProductGet', params, 'product');

    // Create URL to call
    const url = `${this.basePath}/mdr/adam/{product}`
      .replace(`{${'product'}}`, encodeURIComponent(`${params['product']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}


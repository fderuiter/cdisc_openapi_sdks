/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  CdashigDomain,
  CdashigDomainField,
  CdashigProductClasses,
  CdashigProductScenarios,
  RootCdashigScenarioField,
  CdashigClass,
  CdashigProduct,
  CdashigScenario,
  RootCdashigDomainField,
  CdashigClassScenarios,
  CdashigClassDomains,
  CdashigScenarioFields,
  CdashigDomainFields,
  CdashigProductDomains,
  CdashigScenarioField,
} from './models';

/**
 * mdrCdashigVersionClassesClassDomainsGet - parameters interface
 */
export interface IMdrCdashigVersionClassesClassDomainsGetParams {
  version: string;
  _class: string;
}

/**
 * mdrCdashigVersionClassesClassGet - parameters interface
 */
export interface IMdrCdashigVersionClassesClassGetParams {
  version: string;
  _class: string;
}

/**
 * mdrCdashigVersionClassesClassScenariosGet - parameters interface
 */
export interface IMdrCdashigVersionClassesClassScenariosGetParams {
  version: string;
  _class: string;
}

/**
 * mdrCdashigVersionClassesGet - parameters interface
 */
export interface IMdrCdashigVersionClassesGetParams {
  version: string;
}

/**
 * mdrCdashigVersionDomainsDomainFieldsFieldGet - parameters interface
 */
export interface IMdrCdashigVersionDomainsDomainFieldsFieldGetParams {
  version: string;
  domain: string;
  field: string;
}

/**
 * mdrCdashigVersionDomainsDomainFieldsGet - parameters interface
 */
export interface IMdrCdashigVersionDomainsDomainFieldsGetParams {
  version: string;
  domain: string;
}

/**
 * mdrCdashigVersionDomainsDomainGet - parameters interface
 */
export interface IMdrCdashigVersionDomainsDomainGetParams {
  version: string;
  domain: string;
}

/**
 * mdrCdashigVersionDomainsGet - parameters interface
 */
export interface IMdrCdashigVersionDomainsGetParams {
  version: string;
}

/**
 * mdrCdashigVersionGet - parameters interface
 */
export interface IMdrCdashigVersionGetParams {
  version: string;
}

/**
 * mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet - parameters interface
 */
export interface IMdrCdashigVersionScenariosDomainScenarioFieldsFieldGetParams {
  version: string;
  domain: string;
  scenario: string;
  field: string;
}

/**
 * mdrCdashigVersionScenariosDomainScenarioFieldsGet - parameters interface
 */
export interface IMdrCdashigVersionScenariosDomainScenarioFieldsGetParams {
  version: string;
  domain: string;
  scenario: string;
}

/**
 * mdrCdashigVersionScenariosDomainScenarioGet - parameters interface
 */
export interface IMdrCdashigVersionScenariosDomainScenarioGetParams {
  version: string;
  domain: string;
  scenario: string;
}

/**
 * mdrCdashigVersionScenariosGet - parameters interface
 */
export interface IMdrCdashigVersionScenariosGetParams {
  version: string;
}

/**
 * mdrRootCdashigDomainsDomainFieldsFieldGet - parameters interface
 */
export interface IMdrRootCdashigDomainsDomainFieldsFieldGetParams {
  domain: string;
  field: string;
}

/**
 * mdrRootCdashigScenariosDomainScenarioFieldsFieldGet - parameters interface
 */
export interface IMdrRootCdashigScenariosDomainScenarioFieldsFieldGetParams {
  domain: string;
  scenario: string;
  field: string;
}

/**
 * CDASHImplementationGuideCDASHIGApi - API class
 */
@autoinject()
export class CDASHImplementationGuideCDASHIGApi extends Api {

  /**
   * Creates a new CDASHImplementationGuideCDASHIGApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Get CDASHIG Class Domain List
   * @param params.version CDISC Library Product Version
   * @param params._class CDASHIG Class Identifier
   */
  async mdrCdashigVersionClassesClassDomainsGet(params: IMdrCdashigVersionClassesClassDomainsGetParams): Promise<CdashigClassDomains> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCdashigVersionClassesClassDomainsGet', params, 'version');
    this.ensureParamIsSet('mdrCdashigVersionClassesClassDomainsGet', params, '_class');

    // Create URL to call
    const url = `${this.basePath}/mdr/cdashig/{version}/classes/{class}/domains`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'class'}}`, encodeURIComponent(`${params['_class']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDASHIG Class
   * @param params.version CDISC Library Product Version
   * @param params._class CDASHIG Class Identifier
   */
  async mdrCdashigVersionClassesClassGet(params: IMdrCdashigVersionClassesClassGetParams): Promise<CdashigClass> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCdashigVersionClassesClassGet', params, 'version');
    this.ensureParamIsSet('mdrCdashigVersionClassesClassGet', params, '_class');

    // Create URL to call
    const url = `${this.basePath}/mdr/cdashig/{version}/classes/{class}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'class'}}`, encodeURIComponent(`${params['_class']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDASHIG Class Scenario List
   * @param params.version CDISC Library Product Version
   * @param params._class CDASHIG Class Identifier
   */
  async mdrCdashigVersionClassesClassScenariosGet(params: IMdrCdashigVersionClassesClassScenariosGetParams): Promise<CdashigClassScenarios> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCdashigVersionClassesClassScenariosGet', params, 'version');
    this.ensureParamIsSet('mdrCdashigVersionClassesClassScenariosGet', params, '_class');

    // Create URL to call
    const url = `${this.basePath}/mdr/cdashig/{version}/classes/{class}/scenarios`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'class'}}`, encodeURIComponent(`${params['_class']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDASHIG Class List
   * @param params.version CDISC Library Product Version
   */
  async mdrCdashigVersionClassesGet(params: IMdrCdashigVersionClassesGetParams): Promise<CdashigProductClasses> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCdashigVersionClassesGet', params, 'version');

    // Create URL to call
    const url = `${this.basePath}/mdr/cdashig/{version}/classes`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDASHIG Domain Field
   * @param params.version CDISC Library Product Version
   * @param params.domain CDASHIG Domain Identifier
   * @param params.field CDASHIG Field Identifier
   */
  async mdrCdashigVersionDomainsDomainFieldsFieldGet(params: IMdrCdashigVersionDomainsDomainFieldsFieldGetParams): Promise<CdashigDomainField> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCdashigVersionDomainsDomainFieldsFieldGet', params, 'version');
    this.ensureParamIsSet('mdrCdashigVersionDomainsDomainFieldsFieldGet', params, 'domain');
    this.ensureParamIsSet('mdrCdashigVersionDomainsDomainFieldsFieldGet', params, 'field');

    // Create URL to call
    const url = `${this.basePath}/mdr/cdashig/{version}/domains/{domain}/fields/{field}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'domain'}}`, encodeURIComponent(`${params['domain']}`))
      .replace(`{${'field'}}`, encodeURIComponent(`${params['field']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDASHIG Domain Field List
   * @param params.version CDISC Library Product Version
   * @param params.domain CDASHIG Domain Identifier
   */
  async mdrCdashigVersionDomainsDomainFieldsGet(params: IMdrCdashigVersionDomainsDomainFieldsGetParams): Promise<CdashigDomainFields> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCdashigVersionDomainsDomainFieldsGet', params, 'version');
    this.ensureParamIsSet('mdrCdashigVersionDomainsDomainFieldsGet', params, 'domain');

    // Create URL to call
    const url = `${this.basePath}/mdr/cdashig/{version}/domains/{domain}/fields`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'domain'}}`, encodeURIComponent(`${params['domain']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDASHIG Domain
   * @param params.version CDISC Library Product Version
   * @param params.domain CDASHIG Domain Identifier
   */
  async mdrCdashigVersionDomainsDomainGet(params: IMdrCdashigVersionDomainsDomainGetParams): Promise<CdashigDomain> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCdashigVersionDomainsDomainGet', params, 'version');
    this.ensureParamIsSet('mdrCdashigVersionDomainsDomainGet', params, 'domain');

    // Create URL to call
    const url = `${this.basePath}/mdr/cdashig/{version}/domains/{domain}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'domain'}}`, encodeURIComponent(`${params['domain']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDASHIG Domain List
   * @param params.version CDISC Library Product Version
   */
  async mdrCdashigVersionDomainsGet(params: IMdrCdashigVersionDomainsGetParams): Promise<CdashigProductDomains> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCdashigVersionDomainsGet', params, 'version');

    // Create URL to call
    const url = `${this.basePath}/mdr/cdashig/{version}/domains`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDASHIG Product
   * @param params.version CDISC Library Product Version
   */
  async mdrCdashigVersionGet(params: IMdrCdashigVersionGetParams): Promise<CdashigProduct> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCdashigVersionGet', params, 'version');

    // Create URL to call
    const url = `${this.basePath}/mdr/cdashig/{version}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDASHIG Scenario Field
   * @param params.version CDISC Library Product Version
   * @param params.domain CDASHIG Domain Identifier
   * @param params.scenario CDASHIG Scenario Identifier
   * @param params.field CDASHIG Field Identifier
   */
  async mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet(params: IMdrCdashigVersionScenariosDomainScenarioFieldsFieldGetParams): Promise<CdashigScenarioField> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet', params, 'version');
    this.ensureParamIsSet('mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet', params, 'domain');
    this.ensureParamIsSet('mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet', params, 'scenario');
    this.ensureParamIsSet('mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet', params, 'field');

    // Create URL to call
    const url = `${this.basePath}/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields/{field}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'domain'}}`, encodeURIComponent(`${params['domain']}`))
      .replace(`{${'scenario'}}`, encodeURIComponent(`${params['scenario']}`))
      .replace(`{${'field'}}`, encodeURIComponent(`${params['field']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDASHIG Scenario Field List
   * @param params.version CDISC Library Product Version
   * @param params.domain CDASHIG Domain Identifier
   * @param params.scenario CDASHIG Scenario Identifier
   */
  async mdrCdashigVersionScenariosDomainScenarioFieldsGet(params: IMdrCdashigVersionScenariosDomainScenarioFieldsGetParams): Promise<CdashigScenarioFields> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCdashigVersionScenariosDomainScenarioFieldsGet', params, 'version');
    this.ensureParamIsSet('mdrCdashigVersionScenariosDomainScenarioFieldsGet', params, 'domain');
    this.ensureParamIsSet('mdrCdashigVersionScenariosDomainScenarioFieldsGet', params, 'scenario');

    // Create URL to call
    const url = `${this.basePath}/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'domain'}}`, encodeURIComponent(`${params['domain']}`))
      .replace(`{${'scenario'}}`, encodeURIComponent(`${params['scenario']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDASHIG Scenario
   * @param params.version CDISC Library Product Version
   * @param params.domain CDASHIG Domain Identifier
   * @param params.scenario CDASHIG Scenario Identifier
   */
  async mdrCdashigVersionScenariosDomainScenarioGet(params: IMdrCdashigVersionScenariosDomainScenarioGetParams): Promise<CdashigScenario> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCdashigVersionScenariosDomainScenarioGet', params, 'version');
    this.ensureParamIsSet('mdrCdashigVersionScenariosDomainScenarioGet', params, 'domain');
    this.ensureParamIsSet('mdrCdashigVersionScenariosDomainScenarioGet', params, 'scenario');

    // Create URL to call
    const url = `${this.basePath}/mdr/cdashig/{version}/scenarios/{domain}.{scenario}`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`))
      .replace(`{${'domain'}}`, encodeURIComponent(`${params['domain']}`))
      .replace(`{${'scenario'}}`, encodeURIComponent(`${params['scenario']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get CDASHIG Scenario List
   * @param params.version CDISC Library Product Version
   */
  async mdrCdashigVersionScenariosGet(params: IMdrCdashigVersionScenariosGetParams): Promise<CdashigProductScenarios> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrCdashigVersionScenariosGet', params, 'version');

    // Create URL to call
    const url = `${this.basePath}/mdr/cdashig/{version}/scenarios`
      .replace(`{${'version'}}`, encodeURIComponent(`${params['version']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Root CDASHIG Domain Field
   * @param params.domain CDASHIG Domain Identifier
   * @param params.field CDASHIG Field Identifier
   */
  async mdrRootCdashigDomainsDomainFieldsFieldGet(params: IMdrRootCdashigDomainsDomainFieldsFieldGetParams): Promise<RootCdashigDomainField> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrRootCdashigDomainsDomainFieldsFieldGet', params, 'domain');
    this.ensureParamIsSet('mdrRootCdashigDomainsDomainFieldsFieldGet', params, 'field');

    // Create URL to call
    const url = `${this.basePath}/mdr/root/cdashig/domains/{domain}/fields/{field}`
      .replace(`{${'domain'}}`, encodeURIComponent(`${params['domain']}`))
      .replace(`{${'field'}}`, encodeURIComponent(`${params['field']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get Root CDASHIG Scenario Field
   * @param params.domain CDASHIG Domain Identifier
   * @param params.scenario CDASHIG Scenario Identifier
   * @param params.field CDASHIG Field Identifier
   */
  async mdrRootCdashigScenariosDomainScenarioFieldsFieldGet(params: IMdrRootCdashigScenariosDomainScenarioFieldsFieldGetParams): Promise<RootCdashigScenarioField> {
    // Verify required parameters are set
    this.ensureParamIsSet('mdrRootCdashigScenariosDomainScenarioFieldsFieldGet', params, 'domain');
    this.ensureParamIsSet('mdrRootCdashigScenariosDomainScenarioFieldsFieldGet', params, 'scenario');
    this.ensureParamIsSet('mdrRootCdashigScenariosDomainScenarioFieldsFieldGet', params, 'field');

    // Create URL to call
    const url = `${this.basePath}/mdr/root/cdashig/scenarios/{domain}.{scenario}/fields/{field}`
      .replace(`{${'domain'}}`, encodeURIComponent(`${params['domain']}`))
      .replace(`{${'scenario'}}`, encodeURIComponent(`${params['scenario']}`))
      .replace(`{${'field'}}`, encodeURIComponent(`${params['field']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'basicAuth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}


/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { CtCodelist } from '../model/ctCodelist';
import { CtCodelistTerms } from '../model/ctCodelistTerms';
import { CtPackage } from '../model/ctPackage';
import { CtPackageCodelists } from '../model/ctPackageCodelists';
import { CtPackages } from '../model/ctPackages';
import { CtTerm } from '../model/ctTerm';
import { DefaultErrorResponse } from '../model/defaultErrorResponse';
import { ExportCtTable } from '../model/exportCtTable';
import { RootCtCodelist } from '../model/rootCtCodelist';
import { RootCtTerm } from '../model/rootCtTerm';
import { XmlCtCodelist } from '../model/xmlCtCodelist';
import { XmlCtCodelistTerms } from '../model/xmlCtCodelistTerms';
import { XmlCtPackage } from '../model/xmlCtPackage';
import { XmlCtPackageCodelists } from '../model/xmlCtPackageCodelists';
import { XmlCtPackages } from '../model/xmlCtPackages';
import { XmlCtTerm } from '../model/xmlCtTerm';
import { XmlRootCtCodelist } from '../model/xmlRootCtCodelist';
import { XmlRootCtTerm } from '../model/xmlRootCtTerm';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class ControlledTerminologyCTService {
    private basePath: string = 'https://library.cdisc.org/api';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * 
     * Get CDISC Library CT Package List
     
     */
    public mdrCtPackagesGet(observe?: 'body', headers?: Headers): Observable<CtPackages>;
    public mdrCtPackagesGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<CtPackages>>;
    public mdrCtPackagesGet(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CtPackages>> = this.httpClient.get(`${this.basePath}/mdr/ct/packages`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CtPackages>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDISC Library CT Package Codelist
     * @param _package CT Package Identifier
     * @param codelist CT Codelist Identifier
     
     */
    public mdrCtPackagesPackageCodelistsCodelistGet(_package: string, codelist: string, observe?: 'body', headers?: Headers): Observable<CtCodelist>;
    public mdrCtPackagesPackageCodelistsCodelistGet(_package: string, codelist: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CtCodelist>>;
    public mdrCtPackagesPackageCodelistsCodelistGet(_package: string, codelist: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (_package === null || _package === undefined){
            throw new Error('Required parameter _package was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistGet.');
        }

        if (codelist === null || codelist === undefined){
            throw new Error('Required parameter codelist was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CtCodelist>> = this.httpClient.get(`${this.basePath}/mdr/ct/packages/${encodeURIComponent(String(_package))}/codelists/${encodeURIComponent(String(codelist))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CtCodelist>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDISC Library CT Package Codelist Term List
     * @param _package CT Package Identifier
     * @param codelist CT Codelist Identifier
     
     */
    public mdrCtPackagesPackageCodelistsCodelistTermsGet(_package: string, codelist: string, observe?: 'body', headers?: Headers): Observable<CtCodelistTerms>;
    public mdrCtPackagesPackageCodelistsCodelistTermsGet(_package: string, codelist: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CtCodelistTerms>>;
    public mdrCtPackagesPackageCodelistsCodelistTermsGet(_package: string, codelist: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (_package === null || _package === undefined){
            throw new Error('Required parameter _package was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistTermsGet.');
        }

        if (codelist === null || codelist === undefined){
            throw new Error('Required parameter codelist was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistTermsGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CtCodelistTerms>> = this.httpClient.get(`${this.basePath}/mdr/ct/packages/${encodeURIComponent(String(_package))}/codelists/${encodeURIComponent(String(codelist))}/terms`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CtCodelistTerms>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDISC Library CT Package Codelist Term
     * @param _package CT Package Product Identifier
     * @param codelist CT Codelist Identifier
     * @param term CT Codelist Term Identifier
     
     */
    public mdrCtPackagesPackageCodelistsCodelistTermsTermGet(_package: string, codelist: string, term: string, observe?: 'body', headers?: Headers): Observable<CtTerm>;
    public mdrCtPackagesPackageCodelistsCodelistTermsTermGet(_package: string, codelist: string, term: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CtTerm>>;
    public mdrCtPackagesPackageCodelistsCodelistTermsTermGet(_package: string, codelist: string, term: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (_package === null || _package === undefined){
            throw new Error('Required parameter _package was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet.');
        }

        if (codelist === null || codelist === undefined){
            throw new Error('Required parameter codelist was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet.');
        }

        if (term === null || term === undefined){
            throw new Error('Required parameter term was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CtTerm>> = this.httpClient.get(`${this.basePath}/mdr/ct/packages/${encodeURIComponent(String(_package))}/codelists/${encodeURIComponent(String(codelist))}/terms/${encodeURIComponent(String(term))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CtTerm>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDISC Library CT Package Codelist List
     * @param _package CT Package Identifier
     
     */
    public mdrCtPackagesPackageCodelistsGet(_package: string, observe?: 'body', headers?: Headers): Observable<CtPackageCodelists>;
    public mdrCtPackagesPackageCodelistsGet(_package: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CtPackageCodelists>>;
    public mdrCtPackagesPackageCodelistsGet(_package: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (_package === null || _package === undefined){
            throw new Error('Required parameter _package was null or undefined when calling mdrCtPackagesPackageCodelistsGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CtPackageCodelists>> = this.httpClient.get(`${this.basePath}/mdr/ct/packages/${encodeURIComponent(String(_package))}/codelists`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CtPackageCodelists>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDISC Library CT Package
     * @param product CT Package Product Identifier
     
     */
    public mdrCtPackagesProductGet(product: string, observe?: 'body', headers?: Headers): Observable<CtPackage>;
    public mdrCtPackagesProductGet(product: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CtPackage>>;
    public mdrCtPackagesProductGet(product: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (product === null || product === undefined){
            throw new Error('Required parameter product was null or undefined when calling mdrCtPackagesProductGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml, text/csv, application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';

        const response: Observable<HttpResponse<CtPackage>> = this.httpClient.get(`${this.basePath}/mdr/ct/packages/${encodeURIComponent(String(product))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CtPackage>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDISC Library Root CT Codelist
     * @param productGroup CT Product Group Identifier
     * @param codelist CT Codelist Identifier
     
     */
    public mdrRootCtProductGroupCodelistsCodelistGet(productGroup: string, codelist: string, observe?: 'body', headers?: Headers): Observable<RootCtCodelist>;
    public mdrRootCtProductGroupCodelistsCodelistGet(productGroup: string, codelist: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<RootCtCodelist>>;
    public mdrRootCtProductGroupCodelistsCodelistGet(productGroup: string, codelist: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (productGroup === null || productGroup === undefined){
            throw new Error('Required parameter productGroup was null or undefined when calling mdrRootCtProductGroupCodelistsCodelistGet.');
        }

        if (codelist === null || codelist === undefined){
            throw new Error('Required parameter codelist was null or undefined when calling mdrRootCtProductGroupCodelistsCodelistGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<RootCtCodelist>> = this.httpClient.get(`${this.basePath}/mdr/root/ct/${encodeURIComponent(String(productGroup))}/codelists/${encodeURIComponent(String(codelist))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <RootCtCodelist>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDISC Library Root CT Term
     * @param productGroup CT Product Group Identifier
     * @param codelist CT Codelist Identifier
     * @param term CT Codelist Term Identifier
     
     */
    public mdrRootCtProductGroupCodelistsCodelistTermsTermGet(productGroup: string, codelist: string, term: string, observe?: 'body', headers?: Headers): Observable<RootCtTerm>;
    public mdrRootCtProductGroupCodelistsCodelistTermsTermGet(productGroup: string, codelist: string, term: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<RootCtTerm>>;
    public mdrRootCtProductGroupCodelistsCodelistTermsTermGet(productGroup: string, codelist: string, term: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (productGroup === null || productGroup === undefined){
            throw new Error('Required parameter productGroup was null or undefined when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet.');
        }

        if (codelist === null || codelist === undefined){
            throw new Error('Required parameter codelist was null or undefined when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet.');
        }

        if (term === null || term === undefined){
            throw new Error('Required parameter term was null or undefined when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<RootCtTerm>> = this.httpClient.get(`${this.basePath}/mdr/root/ct/${encodeURIComponent(String(productGroup))}/codelists/${encodeURIComponent(String(codelist))}/terms/${encodeURIComponent(String(term))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <RootCtTerm>(httpResponse.response))
               );
        }
        return response;
    }

}

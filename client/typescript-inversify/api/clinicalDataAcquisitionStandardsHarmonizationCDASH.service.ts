/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { CdashClass } from '../model/cdashClass';
import { CdashClassDomains } from '../model/cdashClassDomains';
import { CdashClassField } from '../model/cdashClassField';
import { CdashDomain } from '../model/cdashDomain';
import { CdashDomainField } from '../model/cdashDomainField';
import { CdashDomainFields } from '../model/cdashDomainFields';
import { CdashProduct } from '../model/cdashProduct';
import { CdashProductClasses } from '../model/cdashProductClasses';
import { CdashProductDomains } from '../model/cdashProductDomains';
import { DefaultErrorResponse } from '../model/defaultErrorResponse';
import { ExportCdashTable } from '../model/exportCdashTable';
import { RootCdashClassField } from '../model/rootCdashClassField';
import { RootCdashDomainField } from '../model/rootCdashDomainField';
import { XmlCdashClass } from '../model/xmlCdashClass';
import { XmlCdashClassDomains } from '../model/xmlCdashClassDomains';
import { XmlCdashClassField } from '../model/xmlCdashClassField';
import { XmlCdashDomain } from '../model/xmlCdashDomain';
import { XmlCdashDomainField } from '../model/xmlCdashDomainField';
import { XmlCdashDomainFields } from '../model/xmlCdashDomainFields';
import { XmlCdashProduct } from '../model/xmlCdashProduct';
import { XmlCdashProductClasses } from '../model/xmlCdashProductClasses';
import { XmlCdashProductDomains } from '../model/xmlCdashProductDomains';
import { XmlRootCdashClassField } from '../model/xmlRootCdashClassField';
import { XmlRootCdashDomainField } from '../model/xmlRootCdashDomainField';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class ClinicalDataAcquisitionStandardsHarmonizationCDASHService {
    private basePath: string = 'https://library.cdisc.org/api';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * 
     * Get CDASH Class Domain List
     * @param version CDISC Library Product Version
     * @param _class CDASH Class Identifier
     
     */
    public mdrCdashVersionClassesClassDomainsGet(version: string, _class: string, observe?: 'body', headers?: Headers): Observable<CdashClassDomains>;
    public mdrCdashVersionClassesClassDomainsGet(version: string, _class: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CdashClassDomains>>;
    public mdrCdashVersionClassesClassDomainsGet(version: string, _class: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrCdashVersionClassesClassDomainsGet.');
        }

        if (_class === null || _class === undefined){
            throw new Error('Required parameter _class was null or undefined when calling mdrCdashVersionClassesClassDomainsGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CdashClassDomains>> = this.httpClient.get(`${this.basePath}/mdr/cdash/${encodeURIComponent(String(version))}/classes/${encodeURIComponent(String(_class))}/domains`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CdashClassDomains>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDASH Class Field
     * @param version CDISC Library Product Version
     * @param _class CDASH Class Identifier
     * @param field CDASH Field Identifier
     
     */
    public mdrCdashVersionClassesClassFieldsFieldGet(version: string, _class: string, field: string, observe?: 'body', headers?: Headers): Observable<CdashClassField>;
    public mdrCdashVersionClassesClassFieldsFieldGet(version: string, _class: string, field: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CdashClassField>>;
    public mdrCdashVersionClassesClassFieldsFieldGet(version: string, _class: string, field: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrCdashVersionClassesClassFieldsFieldGet.');
        }

        if (_class === null || _class === undefined){
            throw new Error('Required parameter _class was null or undefined when calling mdrCdashVersionClassesClassFieldsFieldGet.');
        }

        if (field === null || field === undefined){
            throw new Error('Required parameter field was null or undefined when calling mdrCdashVersionClassesClassFieldsFieldGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CdashClassField>> = this.httpClient.get(`${this.basePath}/mdr/cdash/${encodeURIComponent(String(version))}/classes/${encodeURIComponent(String(_class))}/fields/${encodeURIComponent(String(field))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CdashClassField>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDASH Class
     * @param version CDISC Library Product Version
     * @param _class CDASH Class Identifier
     
     */
    public mdrCdashVersionClassesClassGet(version: string, _class: string, observe?: 'body', headers?: Headers): Observable<CdashClass>;
    public mdrCdashVersionClassesClassGet(version: string, _class: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CdashClass>>;
    public mdrCdashVersionClassesClassGet(version: string, _class: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrCdashVersionClassesClassGet.');
        }

        if (_class === null || _class === undefined){
            throw new Error('Required parameter _class was null or undefined when calling mdrCdashVersionClassesClassGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CdashClass>> = this.httpClient.get(`${this.basePath}/mdr/cdash/${encodeURIComponent(String(version))}/classes/${encodeURIComponent(String(_class))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CdashClass>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDASH Class List
     * @param version CDISC Library Product Version
     
     */
    public mdrCdashVersionClassesGet(version: string, observe?: 'body', headers?: Headers): Observable<CdashProductClasses>;
    public mdrCdashVersionClassesGet(version: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CdashProductClasses>>;
    public mdrCdashVersionClassesGet(version: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrCdashVersionClassesGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CdashProductClasses>> = this.httpClient.get(`${this.basePath}/mdr/cdash/${encodeURIComponent(String(version))}/classes`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CdashProductClasses>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDASH Domain Field
     * @param version CDISC Library Product Version
     * @param domain CDASH Domain Identifier
     * @param field CDASH Field Identifier
     
     */
    public mdrCdashVersionDomainsDomainFieldsFieldGet(version: string, domain: string, field: string, observe?: 'body', headers?: Headers): Observable<CdashDomainField>;
    public mdrCdashVersionDomainsDomainFieldsFieldGet(version: string, domain: string, field: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CdashDomainField>>;
    public mdrCdashVersionDomainsDomainFieldsFieldGet(version: string, domain: string, field: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrCdashVersionDomainsDomainFieldsFieldGet.');
        }

        if (domain === null || domain === undefined){
            throw new Error('Required parameter domain was null or undefined when calling mdrCdashVersionDomainsDomainFieldsFieldGet.');
        }

        if (field === null || field === undefined){
            throw new Error('Required parameter field was null or undefined when calling mdrCdashVersionDomainsDomainFieldsFieldGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CdashDomainField>> = this.httpClient.get(`${this.basePath}/mdr/cdash/${encodeURIComponent(String(version))}/domains/${encodeURIComponent(String(domain))}/fields/${encodeURIComponent(String(field))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CdashDomainField>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDASH Domain Field List
     * @param version CDISC Library Product Version
     * @param domain CDASH Domain Identifier
     
     */
    public mdrCdashVersionDomainsDomainFieldsGet(version: string, domain: string, observe?: 'body', headers?: Headers): Observable<CdashDomainFields>;
    public mdrCdashVersionDomainsDomainFieldsGet(version: string, domain: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CdashDomainFields>>;
    public mdrCdashVersionDomainsDomainFieldsGet(version: string, domain: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrCdashVersionDomainsDomainFieldsGet.');
        }

        if (domain === null || domain === undefined){
            throw new Error('Required parameter domain was null or undefined when calling mdrCdashVersionDomainsDomainFieldsGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CdashDomainFields>> = this.httpClient.get(`${this.basePath}/mdr/cdash/${encodeURIComponent(String(version))}/domains/${encodeURIComponent(String(domain))}/fields`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CdashDomainFields>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDASH Domain
     * @param version CDISC Library Product Version
     * @param domain CDASH Domain Identifier
     
     */
    public mdrCdashVersionDomainsDomainGet(version: string, domain: string, observe?: 'body', headers?: Headers): Observable<CdashDomain>;
    public mdrCdashVersionDomainsDomainGet(version: string, domain: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CdashDomain>>;
    public mdrCdashVersionDomainsDomainGet(version: string, domain: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrCdashVersionDomainsDomainGet.');
        }

        if (domain === null || domain === undefined){
            throw new Error('Required parameter domain was null or undefined when calling mdrCdashVersionDomainsDomainGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CdashDomain>> = this.httpClient.get(`${this.basePath}/mdr/cdash/${encodeURIComponent(String(version))}/domains/${encodeURIComponent(String(domain))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CdashDomain>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDASH Domain List
     * @param version CDISC Library Product Version
     
     */
    public mdrCdashVersionDomainsGet(version: string, observe?: 'body', headers?: Headers): Observable<CdashProductDomains>;
    public mdrCdashVersionDomainsGet(version: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CdashProductDomains>>;
    public mdrCdashVersionDomainsGet(version: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrCdashVersionDomainsGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CdashProductDomains>> = this.httpClient.get(`${this.basePath}/mdr/cdash/${encodeURIComponent(String(version))}/domains`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CdashProductDomains>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDASH Product
     * @param version CDISC Library Product Version
     
     */
    public mdrCdashVersionGet(version: string, observe?: 'body', headers?: Headers): Observable<CdashProduct>;
    public mdrCdashVersionGet(version: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CdashProduct>>;
    public mdrCdashVersionGet(version: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrCdashVersionGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml, text/csv, application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';

        const response: Observable<HttpResponse<CdashProduct>> = this.httpClient.get(`${this.basePath}/mdr/cdash/${encodeURIComponent(String(version))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CdashProduct>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get Root CDASH Class Field
     * @param _class CDASH Class Identifier
     * @param field CDASH Field Identifier
     
     */
    public mdrRootCdashClassesClassFieldsFieldGet(_class: string, field: string, observe?: 'body', headers?: Headers): Observable<RootCdashClassField>;
    public mdrRootCdashClassesClassFieldsFieldGet(_class: string, field: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<RootCdashClassField>>;
    public mdrRootCdashClassesClassFieldsFieldGet(_class: string, field: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (_class === null || _class === undefined){
            throw new Error('Required parameter _class was null or undefined when calling mdrRootCdashClassesClassFieldsFieldGet.');
        }

        if (field === null || field === undefined){
            throw new Error('Required parameter field was null or undefined when calling mdrRootCdashClassesClassFieldsFieldGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<RootCdashClassField>> = this.httpClient.get(`${this.basePath}/mdr/root/cdash/classes/${encodeURIComponent(String(_class))}/fields/${encodeURIComponent(String(field))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <RootCdashClassField>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get Root CDASH Domain Field
     * @param domain CDASH Domain Identifier
     * @param field CDASH Field Identifier
     
     */
    public mdrRootCdashDomainsDomainFieldsFieldGet(domain: string, field: string, observe?: 'body', headers?: Headers): Observable<RootCdashDomainField>;
    public mdrRootCdashDomainsDomainFieldsFieldGet(domain: string, field: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<RootCdashDomainField>>;
    public mdrRootCdashDomainsDomainFieldsFieldGet(domain: string, field: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (domain === null || domain === undefined){
            throw new Error('Required parameter domain was null or undefined when calling mdrRootCdashDomainsDomainFieldsFieldGet.');
        }

        if (field === null || field === undefined){
            throw new Error('Required parameter field was null or undefined when calling mdrRootCdashDomainsDomainFieldsFieldGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<RootCdashDomainField>> = this.httpClient.get(`${this.basePath}/mdr/root/cdash/domains/${encodeURIComponent(String(domain))}/fields/${encodeURIComponent(String(field))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <RootCdashDomainField>(httpResponse.response))
               );
        }
        return response;
    }

}

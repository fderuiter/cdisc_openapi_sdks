/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { DefaultErrorResponse } from '../model/defaultErrorResponse';
import { ExportQrsItemsTable } from '../model/exportQrsItemsTable';
import { ExportQrsWorkbook } from '../model/exportQrsWorkbook';
import { QrsItem } from '../model/qrsItem';
import { QrsItems } from '../model/qrsItems';
import { QrsProduct } from '../model/qrsProduct';
import { QrsResponsegroup } from '../model/qrsResponsegroup';
import { QrsResponsegroups } from '../model/qrsResponsegroups';
import { XmlQrsItem } from '../model/xmlQrsItem';
import { XmlQrsItems } from '../model/xmlQrsItems';
import { XmlQrsProduct } from '../model/xmlQrsProduct';
import { XmlQrsResponsegroup } from '../model/xmlQrsResponsegroup';
import { XmlQrsResponsegroups } from '../model/xmlQrsResponsegroups';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class MeasuresService {
    private basePath: string = 'https://library.cdisc.org/api';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * 
     * Get QRS Product
     * @param measure QRS Measure Identifier
     * @param version CDISC Library Product Version
     
     */
    public mdrQrsMeasureVersionGet(measure: string, version: string, observe?: 'body', headers?: Headers): Observable<QrsProduct>;
    public mdrQrsMeasureVersionGet(measure: string, version: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<QrsProduct>>;
    public mdrQrsMeasureVersionGet(measure: string, version: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (measure === null || measure === undefined){
            throw new Error('Required parameter measure was null or undefined when calling mdrQrsMeasureVersionGet.');
        }

        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrQrsMeasureVersionGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml, text/csv, application/vnd.ms-excel';

        const response: Observable<HttpResponse<QrsProduct>> = this.httpClient.get(`${this.basePath}/mdr/qrs/${encodeURIComponent(String(measure))}/${encodeURIComponent(String(version))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <QrsProduct>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get QRS Item List
     * @param measure QRS Measure Identifier
     * @param version CDISC Library Product Version
     
     */
    public mdrQrsMeasureVersionItemsGet(measure: string, version: string, observe?: 'body', headers?: Headers): Observable<QrsItems>;
    public mdrQrsMeasureVersionItemsGet(measure: string, version: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<QrsItems>>;
    public mdrQrsMeasureVersionItemsGet(measure: string, version: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (measure === null || measure === undefined){
            throw new Error('Required parameter measure was null or undefined when calling mdrQrsMeasureVersionItemsGet.');
        }

        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrQrsMeasureVersionItemsGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<QrsItems>> = this.httpClient.get(`${this.basePath}/mdr/qrs/${encodeURIComponent(String(measure))}/${encodeURIComponent(String(version))}/items`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <QrsItems>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get QRS Item
     * @param measure QRS Measure Identifier
     * @param version CDISC Library Product Version
     * @param item QRS Measure Item Identifier
     
     */
    public mdrQrsMeasureVersionItemsItemGet(measure: string, version: string, item: string, observe?: 'body', headers?: Headers): Observable<QrsItem>;
    public mdrQrsMeasureVersionItemsItemGet(measure: string, version: string, item: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<QrsItem>>;
    public mdrQrsMeasureVersionItemsItemGet(measure: string, version: string, item: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (measure === null || measure === undefined){
            throw new Error('Required parameter measure was null or undefined when calling mdrQrsMeasureVersionItemsItemGet.');
        }

        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrQrsMeasureVersionItemsItemGet.');
        }

        if (item === null || item === undefined){
            throw new Error('Required parameter item was null or undefined when calling mdrQrsMeasureVersionItemsItemGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<QrsItem>> = this.httpClient.get(`${this.basePath}/mdr/qrs/${encodeURIComponent(String(measure))}/${encodeURIComponent(String(version))}/items/${encodeURIComponent(String(item))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <QrsItem>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get QRS Response Group List
     * @param measure QRS Measure Identifier
     * @param version CDISC Library Product Version
     
     */
    public mdrQrsMeasureVersionResponsegroupsGet(measure: string, version: string, observe?: 'body', headers?: Headers): Observable<QrsResponsegroups>;
    public mdrQrsMeasureVersionResponsegroupsGet(measure: string, version: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<QrsResponsegroups>>;
    public mdrQrsMeasureVersionResponsegroupsGet(measure: string, version: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (measure === null || measure === undefined){
            throw new Error('Required parameter measure was null or undefined when calling mdrQrsMeasureVersionResponsegroupsGet.');
        }

        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrQrsMeasureVersionResponsegroupsGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<QrsResponsegroups>> = this.httpClient.get(`${this.basePath}/mdr/qrs/${encodeURIComponent(String(measure))}/${encodeURIComponent(String(version))}/responsegroups`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <QrsResponsegroups>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get QRS Response Group
     * @param measure QRS Measure Identifier
     * @param version CDISC Library Product Version
     * @param responsegroup QRS Measure\&#39;s Response Group Identifier
     
     */
    public mdrQrsMeasureVersionResponsegroupsResponsegroupGet(measure: string, version: string, responsegroup: string, observe?: 'body', headers?: Headers): Observable<QrsResponsegroup>;
    public mdrQrsMeasureVersionResponsegroupsResponsegroupGet(measure: string, version: string, responsegroup: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<QrsResponsegroup>>;
    public mdrQrsMeasureVersionResponsegroupsResponsegroupGet(measure: string, version: string, responsegroup: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (measure === null || measure === undefined){
            throw new Error('Required parameter measure was null or undefined when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet.');
        }

        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet.');
        }

        if (responsegroup === null || responsegroup === undefined){
            throw new Error('Required parameter responsegroup was null or undefined when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<QrsResponsegroup>> = this.httpClient.get(`${this.basePath}/mdr/qrs/${encodeURIComponent(String(measure))}/${encodeURIComponent(String(version))}/responsegroups/${encodeURIComponent(String(responsegroup))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <QrsResponsegroup>(httpResponse.response))
               );
        }
        return response;
    }

}

/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { DefaultErrorResponse } from '../model/defaultErrorResponse';
import { DefaultSearchResponse } from '../model/defaultSearchResponse';
import { DefaultSearchScopes } from '../model/defaultSearchScopes';
import { MdrSearchScopesGet200Response } from '../model/mdrSearchScopesGet200Response';
import { ScopeValues } from '../model/scopeValues';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class SearchesService {
    private basePath: string = 'https://library.cdisc.org/api';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * 
     * Get Search Results Across CDISC Library
     * @param q Search Term Expression
     * @param highlight Search Highlight Expression
     * @param start Initial Search Result Index
     * @param pageSize Number of Search Results to Return
     * @param _class Limit Search by Setting Scope to Class
     * @param codelist Limit Search by Setting Scope to Codelist
     * @param conceptId Limit Search by Setting Scope to Concept ID
     * @param core Limit Search by Setting Scope to Core
     * @param dataStructure Limit Search by Setting Scope to Data Structure
     * @param datasetStructure Limit Search by Setting Scope to Dataset Structure
     * @param definition Limit Search by Setting Scope to Definition
     * @param description Limit Search by Setting Scope to Description
     * @param domain Limit Search by Setting Scope to Domain
     * @param effectiveDate Limit Search by Setting Scope to Effective Date
     * @param extensible Limit Search by Setting Scope to Extensible
     * @param href Limit Search by Setting Scope to Href
     * @param label Limit Search by Setting Scope to Label
     * @param measureType SLimit Search by Setting Scope to Measure Type
     * @param name Limit Search by Setting Scope to Name
     * @param preferredTerm Limit Search by Setting Scope to Preferred Term
     * @param product Limit Search by Setting Scope to Product
     * @param productGroup Limit Search by Setting Scope to Product Group
     * @param registrationStatus Limit Search by Setting Scope to Registration Status
     * @param roleDescription Limit Search by Setting Scope to Role Description
     * @param sdtmTarget Limit Search by Setting Scope to SDTM Target
     * @param simpleDatatype Limit Search by Setting Scope to Simple Datatype
     * @param submissionValue Limit Search by Setting Scope to Submission Value
     * @param synonyms Limit Search by Setting Scope to Synonyms
     * @param type Limit Search by Setting Scope to Type
     * @param uiHref Limit Search by Setting Scope to UI Href
     * @param valueDomain Limit Search by Setting Scope to Value Domain
     * @param variableSet Limit Search by Setting Scope to Variable Set
     * @param version Limit Search by Setting Scope to Version
     
     */
    public mdrSearchGet(q: string, highlight?: string, start?: number, pageSize?: number, _class?: string, codelist?: string, conceptId?: string, core?: string, dataStructure?: string, datasetStructure?: string, definition?: string, description?: string, domain?: string, effectiveDate?: string, extensible?: string, href?: string, label?: string, measureType?: string, name?: string, preferredTerm?: string, product?: string, productGroup?: string, registrationStatus?: string, roleDescription?: string, sdtmTarget?: string, simpleDatatype?: string, submissionValue?: string, synonyms?: string, type?: string, uiHref?: string, valueDomain?: string, variableSet?: string, version?: string, observe?: 'body', headers?: Headers): Observable<DefaultSearchResponse>;
    public mdrSearchGet(q: string, highlight?: string, start?: number, pageSize?: number, _class?: string, codelist?: string, conceptId?: string, core?: string, dataStructure?: string, datasetStructure?: string, definition?: string, description?: string, domain?: string, effectiveDate?: string, extensible?: string, href?: string, label?: string, measureType?: string, name?: string, preferredTerm?: string, product?: string, productGroup?: string, registrationStatus?: string, roleDescription?: string, sdtmTarget?: string, simpleDatatype?: string, submissionValue?: string, synonyms?: string, type?: string, uiHref?: string, valueDomain?: string, variableSet?: string, version?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<DefaultSearchResponse>>;
    public mdrSearchGet(q: string, highlight?: string, start?: number, pageSize?: number, _class?: string, codelist?: string, conceptId?: string, core?: string, dataStructure?: string, datasetStructure?: string, definition?: string, description?: string, domain?: string, effectiveDate?: string, extensible?: string, href?: string, label?: string, measureType?: string, name?: string, preferredTerm?: string, product?: string, productGroup?: string, registrationStatus?: string, roleDescription?: string, sdtmTarget?: string, simpleDatatype?: string, submissionValue?: string, synonyms?: string, type?: string, uiHref?: string, valueDomain?: string, variableSet?: string, version?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (q === null || q === undefined){
            throw new Error('Required parameter q was null or undefined when calling mdrSearchGet.');
        }

        let queryParameters: string[] = [];
        if (q !== undefined) {
            queryParameters.push('q='+encodeURIComponent(String(q)));
        }
        if (highlight !== undefined) {
            queryParameters.push('highlight='+encodeURIComponent(String(highlight)));
        }
        if (start !== undefined) {
            queryParameters.push('start='+encodeURIComponent(String(start)));
        }
        if (pageSize !== undefined) {
            queryParameters.push('pageSize='+encodeURIComponent(String(pageSize)));
        }
        if (_class !== undefined) {
            queryParameters.push('_class='+encodeURIComponent(String(_class)));
        }
        if (codelist !== undefined) {
            queryParameters.push('codelist='+encodeURIComponent(String(codelist)));
        }
        if (conceptId !== undefined) {
            queryParameters.push('conceptId='+encodeURIComponent(String(conceptId)));
        }
        if (core !== undefined) {
            queryParameters.push('core='+encodeURIComponent(String(core)));
        }
        if (dataStructure !== undefined) {
            queryParameters.push('dataStructure='+encodeURIComponent(String(dataStructure)));
        }
        if (datasetStructure !== undefined) {
            queryParameters.push('datasetStructure='+encodeURIComponent(String(datasetStructure)));
        }
        if (definition !== undefined) {
            queryParameters.push('definition='+encodeURIComponent(String(definition)));
        }
        if (description !== undefined) {
            queryParameters.push('description='+encodeURIComponent(String(description)));
        }
        if (domain !== undefined) {
            queryParameters.push('domain='+encodeURIComponent(String(domain)));
        }
        if (effectiveDate !== undefined) {
            queryParameters.push('effectiveDate='+encodeURIComponent(String(effectiveDate)));
        }
        if (extensible !== undefined) {
            queryParameters.push('extensible='+encodeURIComponent(String(extensible)));
        }
        if (href !== undefined) {
            queryParameters.push('href='+encodeURIComponent(String(href)));
        }
        if (label !== undefined) {
            queryParameters.push('label='+encodeURIComponent(String(label)));
        }
        if (measureType !== undefined) {
            queryParameters.push('measureType='+encodeURIComponent(String(measureType)));
        }
        if (name !== undefined) {
            queryParameters.push('name='+encodeURIComponent(String(name)));
        }
        if (preferredTerm !== undefined) {
            queryParameters.push('preferredTerm='+encodeURIComponent(String(preferredTerm)));
        }
        if (product !== undefined) {
            queryParameters.push('product='+encodeURIComponent(String(product)));
        }
        if (productGroup !== undefined) {
            queryParameters.push('productGroup='+encodeURIComponent(String(productGroup)));
        }
        if (registrationStatus !== undefined) {
            queryParameters.push('registrationStatus='+encodeURIComponent(String(registrationStatus)));
        }
        if (roleDescription !== undefined) {
            queryParameters.push('roleDescription='+encodeURIComponent(String(roleDescription)));
        }
        if (sdtmTarget !== undefined) {
            queryParameters.push('sdtmTarget='+encodeURIComponent(String(sdtmTarget)));
        }
        if (simpleDatatype !== undefined) {
            queryParameters.push('simpleDatatype='+encodeURIComponent(String(simpleDatatype)));
        }
        if (submissionValue !== undefined) {
            queryParameters.push('submissionValue='+encodeURIComponent(String(submissionValue)));
        }
        if (synonyms !== undefined) {
            queryParameters.push('synonyms='+encodeURIComponent(String(synonyms)));
        }
        if (type !== undefined) {
            queryParameters.push('type='+encodeURIComponent(String(type)));
        }
        if (uiHref !== undefined) {
            queryParameters.push('uiHref='+encodeURIComponent(String(uiHref)));
        }
        if (valueDomain !== undefined) {
            queryParameters.push('valueDomain='+encodeURIComponent(String(valueDomain)));
        }
        if (variableSet !== undefined) {
            queryParameters.push('variableSet='+encodeURIComponent(String(variableSet)));
        }
        if (version !== undefined) {
            queryParameters.push('version='+encodeURIComponent(String(version)));
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<DefaultSearchResponse>> = this.httpClient.get(`${this.basePath}/mdr/search?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <DefaultSearchResponse>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get Search Results Across CDISC Library
     
     */
    public mdrSearchScopesGet(observe?: 'body', headers?: Headers): Observable<MdrSearchScopesGet200Response>;
    public mdrSearchScopesGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<MdrSearchScopesGet200Response>>;
    public mdrSearchScopesGet(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<MdrSearchScopesGet200Response>> = this.httpClient.get(`${this.basePath}/mdr/search/scopes`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <MdrSearchScopesGet200Response>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get Search Results Limited to Scope
     * @param scope Search Scope
     
     */
    public mdrSearchScopesScopeGet(scope: DefaultSearchScopes, observe?: 'body', headers?: Headers): Observable<ScopeValues>;
    public mdrSearchScopesScopeGet(scope: DefaultSearchScopes, observe?: 'response', headers?: Headers): Observable<HttpResponse<ScopeValues>>;
    public mdrSearchScopesScopeGet(scope: DefaultSearchScopes, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (scope === null || scope === undefined){
            throw new Error('Required parameter scope was null or undefined when calling mdrSearchScopesScopeGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<ScopeValues>> = this.httpClient.get(`${this.basePath}/mdr/search/scopes/${encodeURIComponent(String(scope))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ScopeValues>(httpResponse.response))
               );
        }
        return response;
    }

}

/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { About } from '../model/about';
import { DefaultErrorResponse } from '../model/defaultErrorResponse';
import { Lastupdated } from '../model/lastupdated';
import { ProductgroupDataAnalysis } from '../model/productgroupDataAnalysis';
import { ProductgroupDataCollection } from '../model/productgroupDataCollection';
import { ProductgroupDataTabulation } from '../model/productgroupDataTabulation';
import { ProductgroupQrs } from '../model/productgroupQrs';
import { ProductgroupTerminology } from '../model/productgroupTerminology';
import { Products } from '../model/products';
import { XmlAbout } from '../model/xmlAbout';
import { XmlLastupdated } from '../model/xmlLastupdated';
import { XmlProductgroupDataAnalysis } from '../model/xmlProductgroupDataAnalysis';
import { XmlProductgroupDataCollection } from '../model/xmlProductgroupDataCollection';
import { XmlProductgroupDataTabulation } from '../model/xmlProductgroupDataTabulation';
import { XmlProductgroupTerminology } from '../model/xmlProductgroupTerminology';
import { XmlProducts } from '../model/xmlProducts';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class DefaultService {
    private basePath: string = 'https://library.cdisc.org/api';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * 
     * Get Information About CDISC Library
     
     */
    public mdrAboutGet(observe?: 'body', headers?: Headers): Observable<About>;
    public mdrAboutGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<About>>;
    public mdrAboutGet(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<About>> = this.httpClient.get(`${this.basePath}/mdr/about`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <About>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDISC Library Last Updated
     
     */
    public mdrLastupdatedGet(observe?: 'body', headers?: Headers): Observable<Lastupdated>;
    public mdrLastupdatedGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<Lastupdated>>;
    public mdrLastupdatedGet(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<Lastupdated>> = this.httpClient.get(`${this.basePath}/mdr/lastupdated`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Lastupdated>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDISC Library Product Group Data Analysis
     
     */
    public mdrProductsDataAnalysisGet(observe?: 'body', headers?: Headers): Observable<ProductgroupDataAnalysis>;
    public mdrProductsDataAnalysisGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<ProductgroupDataAnalysis>>;
    public mdrProductsDataAnalysisGet(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<ProductgroupDataAnalysis>> = this.httpClient.get(`${this.basePath}/mdr/products/DataAnalysis`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ProductgroupDataAnalysis>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDISC Library Product Group Data Collection
     
     */
    public mdrProductsDataCollectionGet(observe?: 'body', headers?: Headers): Observable<ProductgroupDataCollection>;
    public mdrProductsDataCollectionGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<ProductgroupDataCollection>>;
    public mdrProductsDataCollectionGet(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<ProductgroupDataCollection>> = this.httpClient.get(`${this.basePath}/mdr/products/DataCollection`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ProductgroupDataCollection>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDISC Library Product Group Data Tabulation
     
     */
    public mdrProductsDataTabulationGet(observe?: 'body', headers?: Headers): Observable<ProductgroupDataTabulation>;
    public mdrProductsDataTabulationGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<ProductgroupDataTabulation>>;
    public mdrProductsDataTabulationGet(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<ProductgroupDataTabulation>> = this.httpClient.get(`${this.basePath}/mdr/products/DataTabulation`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ProductgroupDataTabulation>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDISC Library Products
     
     */
    public mdrProductsGet(observe?: 'body', headers?: Headers): Observable<Products>;
    public mdrProductsGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<Products>>;
    public mdrProductsGet(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<Products>> = this.httpClient.get(`${this.basePath}/mdr/products`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Products>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDISC Library Product Group QRS
     
     */
    public mdrProductsMeasuresGet(observe?: 'body', headers?: Headers): Observable<ProductgroupQrs>;
    public mdrProductsMeasuresGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<ProductgroupQrs>>;
    public mdrProductsMeasuresGet(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<ProductgroupQrs>> = this.httpClient.get(`${this.basePath}/mdr/products/Measures`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ProductgroupQrs>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDISC Library Product Group Terminology
     
     */
    public mdrProductsTerminologyGet(observe?: 'body', headers?: Headers): Observable<ProductgroupTerminology>;
    public mdrProductsTerminologyGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<ProductgroupTerminology>>;
    public mdrProductsTerminologyGet(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<ProductgroupTerminology>> = this.httpClient.get(`${this.basePath}/mdr/products/Terminology`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <ProductgroupTerminology>(httpResponse.response))
               );
        }
        return response;
    }

}

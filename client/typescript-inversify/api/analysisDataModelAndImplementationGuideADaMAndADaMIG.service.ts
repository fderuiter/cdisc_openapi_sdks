/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { AdamDatastructure } from '../model/adamDatastructure';
import { AdamDatastructureVariables } from '../model/adamDatastructureVariables';
import { AdamDatastructureVarsets } from '../model/adamDatastructureVarsets';
import { AdamProduct } from '../model/adamProduct';
import { AdamProductDatastructures } from '../model/adamProductDatastructures';
import { AdamVariable } from '../model/adamVariable';
import { AdamVarset } from '../model/adamVarset';
import { DefaultErrorResponse } from '../model/defaultErrorResponse';
import { ExportAdamDatastructuresTable } from '../model/exportAdamDatastructuresTable';
import { ExportAdamVariablesTable } from '../model/exportAdamVariablesTable';
import { ExportAdamWorkbook } from '../model/exportAdamWorkbook';
import { XmlAdamDatastructure } from '../model/xmlAdamDatastructure';
import { XmlAdamDatastructureVariables } from '../model/xmlAdamDatastructureVariables';
import { XmlAdamDatastructureVarsets } from '../model/xmlAdamDatastructureVarsets';
import { XmlAdamProduct } from '../model/xmlAdamProduct';
import { XmlAdamProductDatastructures } from '../model/xmlAdamProductDatastructures';
import { XmlAdamVariable } from '../model/xmlAdamVariable';
import { XmlAdamVarset } from '../model/xmlAdamVarset';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class AnalysisDataModelAndImplementationGuideADaMAndADaMIGService {
    private basePath: string = 'https://library.cdisc.org/api';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * 
     * Get ADaM Data Structure List
     * @param product CDISC Library Product
     
     */
    public mdrAdamProductDatastructuresGet(product: string, observe?: 'body', headers?: Headers): Observable<AdamProductDatastructures>;
    public mdrAdamProductDatastructuresGet(product: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<AdamProductDatastructures>>;
    public mdrAdamProductDatastructuresGet(product: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (product === null || product === undefined){
            throw new Error('Required parameter product was null or undefined when calling mdrAdamProductDatastructuresGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml, text/csv';

        const response: Observable<HttpResponse<AdamProductDatastructures>> = this.httpClient.get(`${this.basePath}/mdr/adam/${encodeURIComponent(String(product))}/datastructures`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <AdamProductDatastructures>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get ADaM Data Structure
     * @param product CDISC Library Product
     * @param structure Data structure Identifier
     
     */
    public mdrAdamProductDatastructuresStructureGet(product: string, structure: string, observe?: 'body', headers?: Headers): Observable<AdamDatastructure>;
    public mdrAdamProductDatastructuresStructureGet(product: string, structure: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<AdamDatastructure>>;
    public mdrAdamProductDatastructuresStructureGet(product: string, structure: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (product === null || product === undefined){
            throw new Error('Required parameter product was null or undefined when calling mdrAdamProductDatastructuresStructureGet.');
        }

        if (structure === null || structure === undefined){
            throw new Error('Required parameter structure was null or undefined when calling mdrAdamProductDatastructuresStructureGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<AdamDatastructure>> = this.httpClient.get(`${this.basePath}/mdr/adam/${encodeURIComponent(String(product))}/datastructures/${encodeURIComponent(String(structure))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <AdamDatastructure>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get ADaM Variable List
     * @param product CDISC Library Product
     * @param structure ADaM Data Structure Identifier
     
     */
    public mdrAdamProductDatastructuresStructureVariablesGet(product: string, structure: string, observe?: 'body', headers?: Headers): Observable<AdamDatastructureVariables>;
    public mdrAdamProductDatastructuresStructureVariablesGet(product: string, structure: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<AdamDatastructureVariables>>;
    public mdrAdamProductDatastructuresStructureVariablesGet(product: string, structure: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (product === null || product === undefined){
            throw new Error('Required parameter product was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesGet.');
        }

        if (structure === null || structure === undefined){
            throw new Error('Required parameter structure was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<AdamDatastructureVariables>> = this.httpClient.get(`${this.basePath}/mdr/adam/${encodeURIComponent(String(product))}/datastructures/${encodeURIComponent(String(structure))}/variables`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <AdamDatastructureVariables>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get ADaM Variable
     * @param product CDISC Library Product
     * @param structure ADaM Data Structure Identifier
     * @param _var ADaM Variable Identifier
     
     */
    public mdrAdamProductDatastructuresStructureVariablesVarGet(product: string, structure: string, _var: string, observe?: 'body', headers?: Headers): Observable<AdamVariable>;
    public mdrAdamProductDatastructuresStructureVariablesVarGet(product: string, structure: string, _var: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<AdamVariable>>;
    public mdrAdamProductDatastructuresStructureVariablesVarGet(product: string, structure: string, _var: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (product === null || product === undefined){
            throw new Error('Required parameter product was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesVarGet.');
        }

        if (structure === null || structure === undefined){
            throw new Error('Required parameter structure was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesVarGet.');
        }

        if (_var === null || _var === undefined){
            throw new Error('Required parameter _var was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesVarGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<AdamVariable>> = this.httpClient.get(`${this.basePath}/mdr/adam/${encodeURIComponent(String(product))}/datastructures/${encodeURIComponent(String(structure))}/variables/${encodeURIComponent(String(_var))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <AdamVariable>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get ADaM Variable Set List
     * @param product CDISC Library Product
     * @param structure ADaM Data Structure Identifier
     
     */
    public mdrAdamProductDatastructuresStructureVarsetsGet(product: string, structure: string, observe?: 'body', headers?: Headers): Observable<AdamDatastructureVarsets>;
    public mdrAdamProductDatastructuresStructureVarsetsGet(product: string, structure: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<AdamDatastructureVarsets>>;
    public mdrAdamProductDatastructuresStructureVarsetsGet(product: string, structure: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (product === null || product === undefined){
            throw new Error('Required parameter product was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsGet.');
        }

        if (structure === null || structure === undefined){
            throw new Error('Required parameter structure was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<AdamDatastructureVarsets>> = this.httpClient.get(`${this.basePath}/mdr/adam/${encodeURIComponent(String(product))}/datastructures/${encodeURIComponent(String(structure))}/varsets`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <AdamDatastructureVarsets>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get ADaM Variable Set
     * @param product CDISC Library Product
     * @param structure ADaM Data Structure Identifier
     * @param varset ADaM Variable Set Identifier
     
     */
    public mdrAdamProductDatastructuresStructureVarsetsVarsetGet(product: string, structure: string, varset: string, observe?: 'body', headers?: Headers): Observable<AdamVarset>;
    public mdrAdamProductDatastructuresStructureVarsetsVarsetGet(product: string, structure: string, varset: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<AdamVarset>>;
    public mdrAdamProductDatastructuresStructureVarsetsVarsetGet(product: string, structure: string, varset: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (product === null || product === undefined){
            throw new Error('Required parameter product was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet.');
        }

        if (structure === null || structure === undefined){
            throw new Error('Required parameter structure was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet.');
        }

        if (varset === null || varset === undefined){
            throw new Error('Required parameter varset was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<AdamVarset>> = this.httpClient.get(`${this.basePath}/mdr/adam/${encodeURIComponent(String(product))}/datastructures/${encodeURIComponent(String(structure))}/varsets/${encodeURIComponent(String(varset))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <AdamVarset>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get ADaM Product
     * @param product CDISC Library Product
     
     */
    public mdrAdamProductGet(product: string, observe?: 'body', headers?: Headers): Observable<AdamProduct>;
    public mdrAdamProductGet(product: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<AdamProduct>>;
    public mdrAdamProductGet(product: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (product === null || product === undefined){
            throw new Error('Required parameter product was null or undefined when calling mdrAdamProductGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml, text/csv, application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';

        const response: Observable<HttpResponse<AdamProduct>> = this.httpClient.get(`${this.basePath}/mdr/adam/${encodeURIComponent(String(product))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <AdamProduct>(httpResponse.response))
               );
        }
        return response;
    }

}

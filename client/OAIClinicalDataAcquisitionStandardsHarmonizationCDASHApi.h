/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi_H
#define OAI_OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICdashClass.h"
#include "OAICdashClassDomains.h"
#include "OAICdashClassField.h"
#include "OAICdashDomain.h"
#include "OAICdashDomainField.h"
#include "OAICdashDomainFields.h"
#include "OAICdashProduct.h"
#include "OAICdashProductClasses.h"
#include "OAICdashProductDomains.h"
#include "OAIDefaultErrorResponse.h"
#include "OAIExportCdashTable.h"
#include "OAIRootCdashClassField.h"
#include "OAIRootCdashDomainField.h"
#include "OAIXmlCdashClass.h"
#include "OAIXmlCdashClassDomains.h"
#include "OAIXmlCdashClassField.h"
#include "OAIXmlCdashDomain.h"
#include "OAIXmlCdashDomainField.h"
#include "OAIXmlCdashDomainFields.h"
#include "OAIXmlCdashProduct.h"
#include "OAIXmlCdashProductClasses.h"
#include "OAIXmlCdashProductDomains.h"
#include "OAIXmlRootCdashClassField.h"
#include "OAIXmlRootCdashDomainField.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi : public QObject {
    Q_OBJECT

public:
    OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi(const int timeOut = 0);
    ~OAIClinicalDataAcquisitionStandardsHarmonizationCDASHApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  version QString [required]
    * @param[in]  r_class QString [required]
    */
    virtual void mdrCdashVersionClassesClassDomainsGet(const QString &version, const QString &r_class);

    /**
    * @param[in]  version QString [required]
    * @param[in]  r_class QString [required]
    * @param[in]  field QString [required]
    */
    virtual void mdrCdashVersionClassesClassFieldsFieldGet(const QString &version, const QString &r_class, const QString &field);

    /**
    * @param[in]  version QString [required]
    * @param[in]  r_class QString [required]
    */
    virtual void mdrCdashVersionClassesClassGet(const QString &version, const QString &r_class);

    /**
    * @param[in]  version QString [required]
    */
    virtual void mdrCdashVersionClassesGet(const QString &version);

    /**
    * @param[in]  version QString [required]
    * @param[in]  domain QString [required]
    * @param[in]  field QString [required]
    */
    virtual void mdrCdashVersionDomainsDomainFieldsFieldGet(const QString &version, const QString &domain, const QString &field);

    /**
    * @param[in]  version QString [required]
    * @param[in]  domain QString [required]
    */
    virtual void mdrCdashVersionDomainsDomainFieldsGet(const QString &version, const QString &domain);

    /**
    * @param[in]  version QString [required]
    * @param[in]  domain QString [required]
    */
    virtual void mdrCdashVersionDomainsDomainGet(const QString &version, const QString &domain);

    /**
    * @param[in]  version QString [required]
    */
    virtual void mdrCdashVersionDomainsGet(const QString &version);

    /**
    * @param[in]  version QString [required]
    */
    virtual void mdrCdashVersionGet(const QString &version);

    /**
    * @param[in]  r_class QString [required]
    * @param[in]  field QString [required]
    */
    virtual void mdrRootCdashClassesClassFieldsFieldGet(const QString &r_class, const QString &field);

    /**
    * @param[in]  domain QString [required]
    * @param[in]  field QString [required]
    */
    virtual void mdrRootCdashDomainsDomainFieldsFieldGet(const QString &domain, const QString &field);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void mdrCdashVersionClassesClassDomainsGetCallback(OAIHttpRequestWorker *worker);
    void mdrCdashVersionClassesClassFieldsFieldGetCallback(OAIHttpRequestWorker *worker);
    void mdrCdashVersionClassesClassGetCallback(OAIHttpRequestWorker *worker);
    void mdrCdashVersionClassesGetCallback(OAIHttpRequestWorker *worker);
    void mdrCdashVersionDomainsDomainFieldsFieldGetCallback(OAIHttpRequestWorker *worker);
    void mdrCdashVersionDomainsDomainFieldsGetCallback(OAIHttpRequestWorker *worker);
    void mdrCdashVersionDomainsDomainGetCallback(OAIHttpRequestWorker *worker);
    void mdrCdashVersionDomainsGetCallback(OAIHttpRequestWorker *worker);
    void mdrCdashVersionGetCallback(OAIHttpRequestWorker *worker);
    void mdrRootCdashClassesClassFieldsFieldGetCallback(OAIHttpRequestWorker *worker);
    void mdrRootCdashDomainsDomainFieldsFieldGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void mdrCdashVersionClassesClassDomainsGetSignal(OAICdashClassDomains summary);
    void mdrCdashVersionClassesClassFieldsFieldGetSignal(OAICdashClassField summary);
    void mdrCdashVersionClassesClassGetSignal(OAICdashClass summary);
    void mdrCdashVersionClassesGetSignal(OAICdashProductClasses summary);
    void mdrCdashVersionDomainsDomainFieldsFieldGetSignal(OAICdashDomainField summary);
    void mdrCdashVersionDomainsDomainFieldsGetSignal(OAICdashDomainFields summary);
    void mdrCdashVersionDomainsDomainGetSignal(OAICdashDomain summary);
    void mdrCdashVersionDomainsGetSignal(OAICdashProductDomains summary);
    void mdrCdashVersionGetSignal(OAICdashProduct summary);
    void mdrRootCdashClassesClassFieldsFieldGetSignal(OAIRootCdashClassField summary);
    void mdrRootCdashDomainsDomainFieldsFieldGetSignal(OAIRootCdashDomainField summary);


    void mdrCdashVersionClassesClassDomainsGetSignalFull(OAIHttpRequestWorker *worker, OAICdashClassDomains summary);
    void mdrCdashVersionClassesClassFieldsFieldGetSignalFull(OAIHttpRequestWorker *worker, OAICdashClassField summary);
    void mdrCdashVersionClassesClassGetSignalFull(OAIHttpRequestWorker *worker, OAICdashClass summary);
    void mdrCdashVersionClassesGetSignalFull(OAIHttpRequestWorker *worker, OAICdashProductClasses summary);
    void mdrCdashVersionDomainsDomainFieldsFieldGetSignalFull(OAIHttpRequestWorker *worker, OAICdashDomainField summary);
    void mdrCdashVersionDomainsDomainFieldsGetSignalFull(OAIHttpRequestWorker *worker, OAICdashDomainFields summary);
    void mdrCdashVersionDomainsDomainGetSignalFull(OAIHttpRequestWorker *worker, OAICdashDomain summary);
    void mdrCdashVersionDomainsGetSignalFull(OAIHttpRequestWorker *worker, OAICdashProductDomains summary);
    void mdrCdashVersionGetSignalFull(OAIHttpRequestWorker *worker, OAICdashProduct summary);
    void mdrRootCdashClassesClassFieldsFieldGetSignalFull(OAIHttpRequestWorker *worker, OAIRootCdashClassField summary);
    void mdrRootCdashDomainsDomainFieldsFieldGetSignalFull(OAIHttpRequestWorker *worker, OAIRootCdashDomainField summary);

    Q_DECL_DEPRECATED_X("Use mdrCdashVersionClassesClassDomainsGetSignalError() instead")
    void mdrCdashVersionClassesClassDomainsGetSignalE(OAICdashClassDomains summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashVersionClassesClassDomainsGetSignalError(OAICdashClassDomains summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashVersionClassesClassFieldsFieldGetSignalError() instead")
    void mdrCdashVersionClassesClassFieldsFieldGetSignalE(OAICdashClassField summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashVersionClassesClassFieldsFieldGetSignalError(OAICdashClassField summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashVersionClassesClassGetSignalError() instead")
    void mdrCdashVersionClassesClassGetSignalE(OAICdashClass summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashVersionClassesClassGetSignalError(OAICdashClass summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashVersionClassesGetSignalError() instead")
    void mdrCdashVersionClassesGetSignalE(OAICdashProductClasses summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashVersionClassesGetSignalError(OAICdashProductClasses summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashVersionDomainsDomainFieldsFieldGetSignalError() instead")
    void mdrCdashVersionDomainsDomainFieldsFieldGetSignalE(OAICdashDomainField summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashVersionDomainsDomainFieldsFieldGetSignalError(OAICdashDomainField summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashVersionDomainsDomainFieldsGetSignalError() instead")
    void mdrCdashVersionDomainsDomainFieldsGetSignalE(OAICdashDomainFields summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashVersionDomainsDomainFieldsGetSignalError(OAICdashDomainFields summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashVersionDomainsDomainGetSignalError() instead")
    void mdrCdashVersionDomainsDomainGetSignalE(OAICdashDomain summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashVersionDomainsDomainGetSignalError(OAICdashDomain summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashVersionDomainsGetSignalError() instead")
    void mdrCdashVersionDomainsGetSignalE(OAICdashProductDomains summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashVersionDomainsGetSignalError(OAICdashProductDomains summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashVersionGetSignalError() instead")
    void mdrCdashVersionGetSignalE(OAICdashProduct summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashVersionGetSignalError(OAICdashProduct summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrRootCdashClassesClassFieldsFieldGetSignalError() instead")
    void mdrRootCdashClassesClassFieldsFieldGetSignalE(OAIRootCdashClassField summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrRootCdashClassesClassFieldsFieldGetSignalError(OAIRootCdashClassField summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrRootCdashDomainsDomainFieldsFieldGetSignalError() instead")
    void mdrRootCdashDomainsDomainFieldsFieldGetSignalE(OAIRootCdashDomainField summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrRootCdashDomainsDomainFieldsFieldGetSignalError(OAIRootCdashDomainField summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use mdrCdashVersionClassesClassDomainsGetSignalErrorFull() instead")
    void mdrCdashVersionClassesClassDomainsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashVersionClassesClassDomainsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashVersionClassesClassFieldsFieldGetSignalErrorFull() instead")
    void mdrCdashVersionClassesClassFieldsFieldGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashVersionClassesClassFieldsFieldGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashVersionClassesClassGetSignalErrorFull() instead")
    void mdrCdashVersionClassesClassGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashVersionClassesClassGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashVersionClassesGetSignalErrorFull() instead")
    void mdrCdashVersionClassesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashVersionClassesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashVersionDomainsDomainFieldsFieldGetSignalErrorFull() instead")
    void mdrCdashVersionDomainsDomainFieldsFieldGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashVersionDomainsDomainFieldsFieldGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashVersionDomainsDomainFieldsGetSignalErrorFull() instead")
    void mdrCdashVersionDomainsDomainFieldsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashVersionDomainsDomainFieldsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashVersionDomainsDomainGetSignalErrorFull() instead")
    void mdrCdashVersionDomainsDomainGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashVersionDomainsDomainGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashVersionDomainsGetSignalErrorFull() instead")
    void mdrCdashVersionDomainsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashVersionDomainsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCdashVersionGetSignalErrorFull() instead")
    void mdrCdashVersionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCdashVersionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrRootCdashClassesClassFieldsFieldGetSignalErrorFull() instead")
    void mdrRootCdashClassesClassFieldsFieldGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrRootCdashClassesClassFieldsFieldGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrRootCdashDomainsDomainFieldsFieldGetSignalErrorFull() instead")
    void mdrRootCdashDomainsDomainFieldsFieldGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrRootCdashDomainsDomainFieldsFieldGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif

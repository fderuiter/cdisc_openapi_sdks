# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExportSendigVariablesRow(BaseModel):
    """
    ExportSendigVariablesRow
    """ # noqa: E501
    version: Optional[StrictStr] = Field(default=None, alias="Version")
    variable_order: Optional[StrictStr] = Field(default=None, alias="Variable Order")
    var_class: Optional[StrictStr] = Field(default=None, alias="Class")
    dataset_name: Optional[StrictStr] = Field(default=None, alias="Dataset Name")
    variable_name: Optional[StrictStr] = Field(default=None, alias="Variable Name")
    variable_label: Optional[StrictStr] = Field(default=None, alias="Variable Label")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    controlled_terms_codelist_or_format: Optional[StrictStr] = Field(default=None, alias="Controlled Terms, Codelist or Format")
    role: Optional[StrictStr] = Field(default=None, alias="Role")
    cdisc_notes: Optional[StrictStr] = Field(default=None, alias="CDISC Notes")
    core: Optional[StrictStr] = Field(default=None, alias="Core")
    __properties: ClassVar[List[str]] = ["Version", "Variable Order", "Class", "Dataset Name", "Variable Name", "Variable Label", "Type", "Controlled Terms, Codelist or Format", "Role", "CDISC Notes", "Core"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportSendigVariablesRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportSendigVariablesRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Version": obj.get("Version"),
            "Variable Order": obj.get("Variable Order"),
            "Class": obj.get("Class"),
            "Dataset Name": obj.get("Dataset Name"),
            "Variable Name": obj.get("Variable Name"),
            "Variable Label": obj.get("Variable Label"),
            "Type": obj.get("Type"),
            "Controlled Terms, Codelist or Format": obj.get("Controlled Terms, Codelist or Format"),
            "Role": obj.get("Role"),
            "CDISC Notes": obj.get("CDISC Notes"),
            "Core": obj.get("Core")
        })
        return _obj



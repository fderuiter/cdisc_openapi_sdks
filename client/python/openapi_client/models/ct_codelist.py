# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ct_codelist_links import CtCodelistLinks
from openapi_client.models.ct_package_term import CtPackageTerm
from typing import Optional, Set
from typing_extensions import Self

class CtCodelist(BaseModel):
    """
    CtCodelist
    """ # noqa: E501
    concept_id: Optional[StrictStr] = Field(default=None, alias="conceptId")
    extensible: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    submission_value: Optional[StrictStr] = Field(default=None, alias="submissionValue")
    definition: Optional[StrictStr] = None
    preferred_term: Optional[StrictStr] = Field(default=None, alias="preferredTerm")
    synonyms: Optional[List[StrictStr]] = None
    links: Optional[CtCodelistLinks] = Field(default=None, alias="_links")
    terms: Optional[List[CtPackageTerm]] = None
    __properties: ClassVar[List[str]] = ["conceptId", "extensible", "name", "submissionValue", "definition", "preferredTerm", "synonyms", "_links", "terms"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CtCodelist from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in terms (list)
        _items = []
        if self.terms:
            for _item_terms in self.terms:
                if _item_terms:
                    _items.append(_item_terms.to_dict())
            _dict['terms'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CtCodelist from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conceptId": obj.get("conceptId"),
            "extensible": obj.get("extensible"),
            "name": obj.get("name"),
            "submissionValue": obj.get("submissionValue"),
            "definition": obj.get("definition"),
            "preferredTerm": obj.get("preferredTerm"),
            "synonyms": obj.get("synonyms"),
            "_links": CtCodelistLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "terms": [CtPackageTerm.from_dict(_item) for _item in obj["terms"]] if obj.get("terms") is not None else None
        })
        return _obj



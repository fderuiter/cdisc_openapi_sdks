# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.qrs_items_ref import QrsItemsRef
from openapi_client.models.qrs_product_ref import QrsProductRef
from openapi_client.models.root_ct_term_ref import RootCtTermRef
from typing import Optional, Set
from typing_extensions import Self

class QrsProductLinks(BaseModel):
    """
    QrsProductLinks
    """ # noqa: E501
    var_self: Optional[QrsProductRef] = Field(default=None, alias="self")
    prior_version: Optional[QrsProductRef] = Field(default=None, alias="priorVersion")
    qrs_term_cat: Optional[RootCtTermRef] = Field(default=None, alias="qrsTermCAT")
    qrs_items: Optional[QrsItemsRef] = Field(default=None, alias="qrsItems")
    __properties: ClassVar[List[str]] = ["self", "priorVersion", "qrsTermCAT", "qrsItems"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QrsProductLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_self
        if self.var_self:
            _dict['self'] = self.var_self.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prior_version
        if self.prior_version:
            _dict['priorVersion'] = self.prior_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of qrs_term_cat
        if self.qrs_term_cat:
            _dict['qrsTermCAT'] = self.qrs_term_cat.to_dict()
        # override the default output from pydantic by calling `to_dict()` of qrs_items
        if self.qrs_items:
            _dict['qrsItems'] = self.qrs_items.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QrsProductLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "self": QrsProductRef.from_dict(obj["self"]) if obj.get("self") is not None else None,
            "priorVersion": QrsProductRef.from_dict(obj["priorVersion"]) if obj.get("priorVersion") is not None else None,
            "qrsTermCAT": RootCtTermRef.from_dict(obj["qrsTermCAT"]) if obj.get("qrsTermCAT") is not None else None,
            "qrsItems": QrsItemsRef.from_dict(obj["qrsItems"]) if obj.get("qrsItems") is not None else None
        })
        return _obj



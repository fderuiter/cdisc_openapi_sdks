# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cdashig_domain_field_links import CdashigDomainFieldLinks
from typing import Optional, Set
from typing_extensions import Self

class CdashigDomainField(BaseModel):
    """
    CdashigDomainField
    """ # noqa: E501
    ordinal: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    label: Optional[StrictStr] = None
    definition: Optional[StrictStr] = None
    question_text: Optional[StrictStr] = Field(default=None, alias="questionText")
    prompt: Optional[StrictStr] = None
    completion_instructions: Optional[StrictStr] = Field(default=None, alias="completionInstructions")
    implementation_notes: Optional[StrictStr] = Field(default=None, alias="implementationNotes")
    simple_datatype: Optional[StrictStr] = Field(default=None, alias="simpleDatatype")
    mapping_instructions: Optional[StrictStr] = Field(default=None, alias="mappingInstructions")
    core: Optional[StrictStr] = None
    links: Optional[CdashigDomainFieldLinks] = Field(default=None, alias="_links")
    __properties: ClassVar[List[str]] = ["ordinal", "name", "label", "definition", "questionText", "prompt", "completionInstructions", "implementationNotes", "simpleDatatype", "mappingInstructions", "core", "_links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CdashigDomainField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CdashigDomainField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ordinal": obj.get("ordinal"),
            "name": obj.get("name"),
            "label": obj.get("label"),
            "definition": obj.get("definition"),
            "questionText": obj.get("questionText"),
            "prompt": obj.get("prompt"),
            "completionInstructions": obj.get("completionInstructions"),
            "implementationNotes": obj.get("implementationNotes"),
            "simpleDatatype": obj.get("simpleDatatype"),
            "mappingInstructions": obj.get("mappingInstructions"),
            "core": obj.get("core"),
            "_links": CdashigDomainFieldLinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None
        })
        return _obj



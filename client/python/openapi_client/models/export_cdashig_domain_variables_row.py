# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ExportCdashigDomainVariablesRow(BaseModel):
    """
    ExportCdashigDomainVariablesRow
    """ # noqa: E501
    version: Optional[StrictStr] = Field(default=None, alias="Version")
    var_class: Optional[StrictStr] = Field(default=None, alias="Class")
    domain: Optional[StrictStr] = Field(default=None, alias="Domain")
    data_collection_scenario: Optional[StrictStr] = Field(default=None, alias="Data Collection Scenario")
    variable_order: Optional[StrictStr] = Field(default=None, alias="Variable Order")
    cdashig_variable: Optional[StrictStr] = Field(default=None, alias="CDASHIG Variable")
    cdashig_variable_label: Optional[StrictStr] = Field(default=None, alias="CDASHIG Variable Label")
    draft_cdashig_definition: Optional[StrictStr] = Field(default=None, alias="DRAFT CDASHIG Definition")
    question_text: Optional[StrictStr] = Field(default=None, alias="Question Text")
    prompt: Optional[StrictStr] = Field(default=None, alias="Prompt")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    cdashig_core: Optional[StrictStr] = Field(default=None, alias="CDASHIG Core")
    case_report_form_completion_instructions: Optional[StrictStr] = Field(default=None, alias="Case Report Form Completion Instructions")
    sdtmig_target: Optional[List[StrictStr]] = Field(default=None, alias="SDTMIG Target")
    mapping_instructions: Optional[StrictStr] = Field(default=None, alias="Mapping Instructions")
    controlled_terminology_codelist_name: Optional[StrictStr] = Field(default=None, alias="Controlled Terminology Codelist Name")
    implementation_notes: Optional[StrictStr] = Field(default=None, alias="Implementation Notes")
    __properties: ClassVar[List[str]] = ["Version", "Class", "Domain", "Data Collection Scenario", "Variable Order", "CDASHIG Variable", "CDASHIG Variable Label", "DRAFT CDASHIG Definition", "Question Text", "Prompt", "Type", "CDASHIG Core", "Case Report Form Completion Instructions", "SDTMIG Target", "Mapping Instructions", "Controlled Terminology Codelist Name", "Implementation Notes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportCdashigDomainVariablesRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportCdashigDomainVariablesRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Version": obj.get("Version"),
            "Class": obj.get("Class"),
            "Domain": obj.get("Domain"),
            "Data Collection Scenario": obj.get("Data Collection Scenario"),
            "Variable Order": obj.get("Variable Order"),
            "CDASHIG Variable": obj.get("CDASHIG Variable"),
            "CDASHIG Variable Label": obj.get("CDASHIG Variable Label"),
            "DRAFT CDASHIG Definition": obj.get("DRAFT CDASHIG Definition"),
            "Question Text": obj.get("Question Text"),
            "Prompt": obj.get("Prompt"),
            "Type": obj.get("Type"),
            "CDASHIG Core": obj.get("CDASHIG Core"),
            "Case Report Form Completion Instructions": obj.get("Case Report Form Completion Instructions"),
            "SDTMIG Target": obj.get("SDTMIG Target"),
            "Mapping Instructions": obj.get("Mapping Instructions"),
            "Controlled Terminology Codelist Name": obj.get("Controlled Terminology Codelist Name"),
            "Implementation Notes": obj.get("Implementation Notes")
        })
        return _obj



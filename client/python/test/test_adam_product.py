# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.adam_product import AdamProduct

class TestAdamProduct(unittest.TestCase):
    """AdamProduct unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AdamProduct:
        """Test AdamProduct
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AdamProduct`
        """
        model = AdamProduct()
        if include_optional:
            return AdamProduct(
                name = 'ADaMIG v1.1',
                label = 'Analysis Data Model Implementation Guide Version 1.1',
                description = 'This document comprises the Clinical Data Interchange Standards Consortium (CDISC) Version 1.1 of the Analysis Data Model Implementation Guide (ADaMIG), which has been prepared by the Analysis Data Model (ADaM) Team of CDISC. The ADaMIG specifies ADaM standard dataset structures and variables, including naming conventions. It also specifies standard solutions to implementation issues.

The ADaMIG must be used in close concert with the current version of the document titled "Analysis Data Model (ADaM)" which is available for download at http://www.cdisc.org/adam. That document explains the purpose of the Analysis Data Model. It describes fundamental principles that apply to all analysis datasets, with the driving principle being that the design of ADaM datasets and associated metadata facilitate explicit communication of the content of, input to, and purpose of submitted ADaM datasets. The Analysis Data Model supports efficient generation, replication, and review of analysis results.',
                source = 'Prepared by the CDISC Analysis Data Model Team',
                effective_date = '2016-02-12',
                registration_status = 'Final',
                version = '1.1',
                links = openapi_client.models.adam_product_links.AdamProductLinks(
                    self = openapi_client.models.adam_product_ref.AdamProductRef(
                        href = '/mdr/adam/adamig-1-1', 
                        title = 'Analysis Data Model Implementation Guide Version 1.1', 
                        type = 'Implementation Guide', ), 
                    model = openapi_client.models.adam_product_ref.AdamProductRef(
                        href = '/mdr/adam/adamig-1-1', 
                        title = 'Analysis Data Model Implementation Guide Version 1.1', 
                        type = 'Implementation Guide', ), 
                    prior_version = , ),
                data_structures = [
                    openapi_client.models.adam_datastructure.AdamDatastructure(
                        ordinal = '1', 
                        name = 'ADSL', 
                        label = 'Subject-Level Analysis Dataset Structure', 
                        description = 'One record per subject.', 
                        class = 'ADSL', 
                        _links = openapi_client.models.adam_datastructure_links.AdamDatastructureLinks(
                            self = openapi_client.models.adam_datastructure_ref.AdamDatastructureRef(
                                href = '/mdr/adam/adamig-1-1/datastructures/ADSL', 
                                title = 'Subject-Level Analysis Dataset Structure', 
                                type = 'Data Structure', ), 
                            parent_product = openapi_client.models.adam_product_ref.AdamProductRef(
                                href = '/mdr/adam/adamig-1-1', 
                                title = 'Analysis Data Model Implementation Guide Version 1.1', 
                                type = 'Implementation Guide', ), 
                            prior_version = openapi_client.models.adam_datastructure_ref.AdamDatastructureRef(
                                href = '/mdr/adam/adamig-1-1/datastructures/ADSL', 
                                title = 'Subject-Level Analysis Dataset Structure', 
                                type = 'Data Structure', ), ), 
                        analysis_variable_sets = [
                            openapi_client.models.adam_varset.AdamVarset(
                                ordinal = '1', 
                                name = 'ADSL', 
                                label = 'Subject-Level Analysis Dataset Structure', 
                                description = 'One record per subject.', 
                                analysis_variables = [
                                    openapi_client.models.adam_variable.AdamVariable(
                                        ordinal = '5', 
                                        name = 'SITEGRy', 
                                        label = 'Pooled Site Group y', 
                                        description = 'Character description of a grouping or pooling of clinical sites for analysis purposes. For example, SITEGR3 is the name of a variable containing site group (pooled site) names, where the grouping has been done according to the third site grouping algorithm, defined in variable metadata; SITEGR3 does not mean the third group of sites.', 
                                        core = 'Perm', 
                                        simple_datatype = 'Char', 
                                        described_value_domain = 'Some codelist', 
                                        value_list = TODO, )
                                    ], )
                            ], )
                    ]
            )
        else:
            return AdamProduct(
        )
        """

    def testAdamProduct(self):
        """Test AdamProduct"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

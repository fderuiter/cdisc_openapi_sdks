# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cdash_domain_field_links import CdashDomainFieldLinks

class TestCdashDomainFieldLinks(unittest.TestCase):
    """CdashDomainFieldLinks unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CdashDomainFieldLinks:
        """Test CdashDomainFieldLinks
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CdashDomainFieldLinks`
        """
        model = CdashDomainFieldLinks()
        if include_optional:
            return CdashDomainFieldLinks(
                var_self = openapi_client.models.cdash_domain_field_ref.CdashDomainFieldRef(
                    href = '/mdr/cdash/1-1/domains/DM/fields/AGE', 
                    title = 'Age', 
                    type = 'Data Collection Field', ),
                codelist = [
                    openapi_client.models.root_ct_codelist_ref_element.RootCtCodelistRefElement(
                        href = '/mdr/ct/packages/sdtmct-2019-12-20/codelists/C67154', 
                        title = 'CDISC SDTM Laboratory Test Name Terminology', 
                        type = 'Code List', )
                    ],
                parent_product = openapi_client.models.cdash_product_ref.CdashProductRef(
                    href = '/mdr/cdash/1-1', 
                    title = 'Clinical Data Acquisition Standards Harmonization Model Version 1.1', 
                    type = 'Foundational Model', ),
                parent_class = openapi_client.models.cdash_class_ref.CdashClassRef(
                    href = '/mdr/cdash/1-1/classes/Timing', 
                    title = 'Timing Class', 
                    type = 'Class', ),
                parent_domain = openapi_client.models.cdash_domain_ref.CdashDomainRef(
                    href = '/mdr/cdash/1-1/domains/DM', 
                    title = 'Demographics', 
                    type = 'CDASH Domain', ),
                root_item = openapi_client.models.root_cdash_domain_field_ref.RootCdashDomainFieldRef(
                    href = '/mdr/root/cdash/domains/DM/fields/AGE', 
                    title = 'Version-agnostic anchor element for field DM.AGE', 
                    type = 'Has Root Data Element', ),
                prior_version = openapi_client.models.cdash_domain_field_ref.CdashDomainFieldRef(
                    href = '/mdr/cdash/1-1/domains/DM/fields/AGE', 
                    title = 'Age', 
                    type = 'Data Collection Field', ),
                sdtm_dataset_mapping_targets = [
                    openapi_client.models.sdtm_dataset_variable_ref_target.SdtmDatasetVariableRefTarget(
                        href = '/mdr/sdtm/1-8/datasets/DM/variables/SUBJID', 
                        title = 'Subject Identifier for the Study', 
                        type = 'SDTM Dataset Variable', )
                    ],
                sdtmig_dataset_mapping_targets = [
                    openapi_client.models.sdtmig_dataset_variable_ref_target.SdtmigDatasetVariableRefTarget(
                        href = '/mdr/sdtmig/3-3/datasets/LB/variables/LBDTC', 
                        title = 'Date/Time of Specimen Collection', 
                        type = 'SDTM Dataset Variable', )
                    ]
            )
        else:
            return CdashDomainFieldLinks(
        )
        """

    def testCdashDomainFieldLinks(self):
        """Test CdashDomainFieldLinks"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CtCodelistTerms type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CtCodelistTerms{}

// CtCodelistTerms struct for CtCodelistTerms
type CtCodelistTerms struct {
	ConceptId *string `json:"conceptId,omitempty"`
	Extensible *string `json:"extensible,omitempty"`
	Name *string `json:"name,omitempty"`
	SubmissionValue *string `json:"submissionValue,omitempty"`
	Definition *string `json:"definition,omitempty"`
	PreferredTerm *string `json:"preferredTerm,omitempty"`
	Synonyms []string `json:"synonyms,omitempty"`
	Links *CtCodelistTermsLinks `json:"_links,omitempty"`
}

// NewCtCodelistTerms instantiates a new CtCodelistTerms object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCtCodelistTerms() *CtCodelistTerms {
	this := CtCodelistTerms{}
	return &this
}

// NewCtCodelistTermsWithDefaults instantiates a new CtCodelistTerms object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCtCodelistTermsWithDefaults() *CtCodelistTerms {
	this := CtCodelistTerms{}
	return &this
}

// GetConceptId returns the ConceptId field value if set, zero value otherwise.
func (o *CtCodelistTerms) GetConceptId() string {
	if o == nil || IsNil(o.ConceptId) {
		var ret string
		return ret
	}
	return *o.ConceptId
}

// GetConceptIdOk returns a tuple with the ConceptId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CtCodelistTerms) GetConceptIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConceptId) {
		return nil, false
	}
	return o.ConceptId, true
}

// HasConceptId returns a boolean if a field has been set.
func (o *CtCodelistTerms) HasConceptId() bool {
	if o != nil && !IsNil(o.ConceptId) {
		return true
	}

	return false
}

// SetConceptId gets a reference to the given string and assigns it to the ConceptId field.
func (o *CtCodelistTerms) SetConceptId(v string) {
	o.ConceptId = &v
}

// GetExtensible returns the Extensible field value if set, zero value otherwise.
func (o *CtCodelistTerms) GetExtensible() string {
	if o == nil || IsNil(o.Extensible) {
		var ret string
		return ret
	}
	return *o.Extensible
}

// GetExtensibleOk returns a tuple with the Extensible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CtCodelistTerms) GetExtensibleOk() (*string, bool) {
	if o == nil || IsNil(o.Extensible) {
		return nil, false
	}
	return o.Extensible, true
}

// HasExtensible returns a boolean if a field has been set.
func (o *CtCodelistTerms) HasExtensible() bool {
	if o != nil && !IsNil(o.Extensible) {
		return true
	}

	return false
}

// SetExtensible gets a reference to the given string and assigns it to the Extensible field.
func (o *CtCodelistTerms) SetExtensible(v string) {
	o.Extensible = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CtCodelistTerms) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CtCodelistTerms) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CtCodelistTerms) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CtCodelistTerms) SetName(v string) {
	o.Name = &v
}

// GetSubmissionValue returns the SubmissionValue field value if set, zero value otherwise.
func (o *CtCodelistTerms) GetSubmissionValue() string {
	if o == nil || IsNil(o.SubmissionValue) {
		var ret string
		return ret
	}
	return *o.SubmissionValue
}

// GetSubmissionValueOk returns a tuple with the SubmissionValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CtCodelistTerms) GetSubmissionValueOk() (*string, bool) {
	if o == nil || IsNil(o.SubmissionValue) {
		return nil, false
	}
	return o.SubmissionValue, true
}

// HasSubmissionValue returns a boolean if a field has been set.
func (o *CtCodelistTerms) HasSubmissionValue() bool {
	if o != nil && !IsNil(o.SubmissionValue) {
		return true
	}

	return false
}

// SetSubmissionValue gets a reference to the given string and assigns it to the SubmissionValue field.
func (o *CtCodelistTerms) SetSubmissionValue(v string) {
	o.SubmissionValue = &v
}

// GetDefinition returns the Definition field value if set, zero value otherwise.
func (o *CtCodelistTerms) GetDefinition() string {
	if o == nil || IsNil(o.Definition) {
		var ret string
		return ret
	}
	return *o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CtCodelistTerms) GetDefinitionOk() (*string, bool) {
	if o == nil || IsNil(o.Definition) {
		return nil, false
	}
	return o.Definition, true
}

// HasDefinition returns a boolean if a field has been set.
func (o *CtCodelistTerms) HasDefinition() bool {
	if o != nil && !IsNil(o.Definition) {
		return true
	}

	return false
}

// SetDefinition gets a reference to the given string and assigns it to the Definition field.
func (o *CtCodelistTerms) SetDefinition(v string) {
	o.Definition = &v
}

// GetPreferredTerm returns the PreferredTerm field value if set, zero value otherwise.
func (o *CtCodelistTerms) GetPreferredTerm() string {
	if o == nil || IsNil(o.PreferredTerm) {
		var ret string
		return ret
	}
	return *o.PreferredTerm
}

// GetPreferredTermOk returns a tuple with the PreferredTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CtCodelistTerms) GetPreferredTermOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredTerm) {
		return nil, false
	}
	return o.PreferredTerm, true
}

// HasPreferredTerm returns a boolean if a field has been set.
func (o *CtCodelistTerms) HasPreferredTerm() bool {
	if o != nil && !IsNil(o.PreferredTerm) {
		return true
	}

	return false
}

// SetPreferredTerm gets a reference to the given string and assigns it to the PreferredTerm field.
func (o *CtCodelistTerms) SetPreferredTerm(v string) {
	o.PreferredTerm = &v
}

// GetSynonyms returns the Synonyms field value if set, zero value otherwise.
func (o *CtCodelistTerms) GetSynonyms() []string {
	if o == nil || IsNil(o.Synonyms) {
		var ret []string
		return ret
	}
	return o.Synonyms
}

// GetSynonymsOk returns a tuple with the Synonyms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CtCodelistTerms) GetSynonymsOk() ([]string, bool) {
	if o == nil || IsNil(o.Synonyms) {
		return nil, false
	}
	return o.Synonyms, true
}

// HasSynonyms returns a boolean if a field has been set.
func (o *CtCodelistTerms) HasSynonyms() bool {
	if o != nil && !IsNil(o.Synonyms) {
		return true
	}

	return false
}

// SetSynonyms gets a reference to the given []string and assigns it to the Synonyms field.
func (o *CtCodelistTerms) SetSynonyms(v []string) {
	o.Synonyms = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *CtCodelistTerms) GetLinks() CtCodelistTermsLinks {
	if o == nil || IsNil(o.Links) {
		var ret CtCodelistTermsLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CtCodelistTerms) GetLinksOk() (*CtCodelistTermsLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *CtCodelistTerms) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given CtCodelistTermsLinks and assigns it to the Links field.
func (o *CtCodelistTerms) SetLinks(v CtCodelistTermsLinks) {
	o.Links = &v
}

func (o CtCodelistTerms) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CtCodelistTerms) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConceptId) {
		toSerialize["conceptId"] = o.ConceptId
	}
	if !IsNil(o.Extensible) {
		toSerialize["extensible"] = o.Extensible
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SubmissionValue) {
		toSerialize["submissionValue"] = o.SubmissionValue
	}
	if !IsNil(o.Definition) {
		toSerialize["definition"] = o.Definition
	}
	if !IsNil(o.PreferredTerm) {
		toSerialize["preferredTerm"] = o.PreferredTerm
	}
	if !IsNil(o.Synonyms) {
		toSerialize["synonyms"] = o.Synonyms
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableCtCodelistTerms struct {
	value *CtCodelistTerms
	isSet bool
}

func (v NullableCtCodelistTerms) Get() *CtCodelistTerms {
	return v.value
}

func (v *NullableCtCodelistTerms) Set(val *CtCodelistTerms) {
	v.value = val
	v.isSet = true
}

func (v NullableCtCodelistTerms) IsSet() bool {
	return v.isSet
}

func (v *NullableCtCodelistTerms) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCtCodelistTerms(val *CtCodelistTerms) *NullableCtCodelistTerms {
	return &NullableCtCodelistTerms{value: val, isSet: true}
}

func (v NullableCtCodelistTerms) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCtCodelistTerms) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



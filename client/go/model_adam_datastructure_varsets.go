/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AdamDatastructureVarsets type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdamDatastructureVarsets{}

// AdamDatastructureVarsets struct for AdamDatastructureVarsets
type AdamDatastructureVarsets struct {
	Ordinal *string `json:"ordinal,omitempty"`
	Name *string `json:"name,omitempty"`
	Label *string `json:"label,omitempty"`
	Description *string `json:"description,omitempty"`
	Class *string `json:"class,omitempty"`
	Links *AdamDatastructureVarsetsLinks `json:"_links,omitempty"`
}

// NewAdamDatastructureVarsets instantiates a new AdamDatastructureVarsets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdamDatastructureVarsets() *AdamDatastructureVarsets {
	this := AdamDatastructureVarsets{}
	return &this
}

// NewAdamDatastructureVarsetsWithDefaults instantiates a new AdamDatastructureVarsets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdamDatastructureVarsetsWithDefaults() *AdamDatastructureVarsets {
	this := AdamDatastructureVarsets{}
	return &this
}

// GetOrdinal returns the Ordinal field value if set, zero value otherwise.
func (o *AdamDatastructureVarsets) GetOrdinal() string {
	if o == nil || IsNil(o.Ordinal) {
		var ret string
		return ret
	}
	return *o.Ordinal
}

// GetOrdinalOk returns a tuple with the Ordinal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdamDatastructureVarsets) GetOrdinalOk() (*string, bool) {
	if o == nil || IsNil(o.Ordinal) {
		return nil, false
	}
	return o.Ordinal, true
}

// HasOrdinal returns a boolean if a field has been set.
func (o *AdamDatastructureVarsets) HasOrdinal() bool {
	if o != nil && !IsNil(o.Ordinal) {
		return true
	}

	return false
}

// SetOrdinal gets a reference to the given string and assigns it to the Ordinal field.
func (o *AdamDatastructureVarsets) SetOrdinal(v string) {
	o.Ordinal = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AdamDatastructureVarsets) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdamDatastructureVarsets) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AdamDatastructureVarsets) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AdamDatastructureVarsets) SetName(v string) {
	o.Name = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *AdamDatastructureVarsets) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdamDatastructureVarsets) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *AdamDatastructureVarsets) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *AdamDatastructureVarsets) SetLabel(v string) {
	o.Label = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AdamDatastructureVarsets) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdamDatastructureVarsets) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AdamDatastructureVarsets) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AdamDatastructureVarsets) SetDescription(v string) {
	o.Description = &v
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *AdamDatastructureVarsets) GetClass() string {
	if o == nil || IsNil(o.Class) {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdamDatastructureVarsets) GetClassOk() (*string, bool) {
	if o == nil || IsNil(o.Class) {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *AdamDatastructureVarsets) HasClass() bool {
	if o != nil && !IsNil(o.Class) {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *AdamDatastructureVarsets) SetClass(v string) {
	o.Class = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *AdamDatastructureVarsets) GetLinks() AdamDatastructureVarsetsLinks {
	if o == nil || IsNil(o.Links) {
		var ret AdamDatastructureVarsetsLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdamDatastructureVarsets) GetLinksOk() (*AdamDatastructureVarsetsLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *AdamDatastructureVarsets) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given AdamDatastructureVarsetsLinks and assigns it to the Links field.
func (o *AdamDatastructureVarsets) SetLinks(v AdamDatastructureVarsetsLinks) {
	o.Links = &v
}

func (o AdamDatastructureVarsets) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdamDatastructureVarsets) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ordinal) {
		toSerialize["ordinal"] = o.Ordinal
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Class) {
		toSerialize["class"] = o.Class
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableAdamDatastructureVarsets struct {
	value *AdamDatastructureVarsets
	isSet bool
}

func (v NullableAdamDatastructureVarsets) Get() *AdamDatastructureVarsets {
	return v.value
}

func (v *NullableAdamDatastructureVarsets) Set(val *AdamDatastructureVarsets) {
	v.value = val
	v.isSet = true
}

func (v NullableAdamDatastructureVarsets) IsSet() bool {
	return v.isSet
}

func (v *NullableAdamDatastructureVarsets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdamDatastructureVarsets(val *AdamDatastructureVarsets) *NullableAdamDatastructureVarsets {
	return &NullableAdamDatastructureVarsets{value: val, isSet: true}
}

func (v NullableAdamDatastructureVarsets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdamDatastructureVarsets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



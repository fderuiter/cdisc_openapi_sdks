/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Health type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Health{}

// Health struct for Health
type Health struct {
	Healthy *bool `json:"healthy,omitempty"`
	LdapAuthenticationHealthy *bool `json:"ldapAuthenticationHealthy,omitempty"`
	LdapAuthorizationHealthy *bool `json:"ldapAuthorizationHealthy,omitempty"`
	DatabaseHealthy *bool `json:"databaseHealthy,omitempty"`
	EsHealthy *bool `json:"esHealthy,omitempty"`
}

// NewHealth instantiates a new Health object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealth() *Health {
	this := Health{}
	return &this
}

// NewHealthWithDefaults instantiates a new Health object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthWithDefaults() *Health {
	this := Health{}
	return &this
}

// GetHealthy returns the Healthy field value if set, zero value otherwise.
func (o *Health) GetHealthy() bool {
	if o == nil || IsNil(o.Healthy) {
		var ret bool
		return ret
	}
	return *o.Healthy
}

// GetHealthyOk returns a tuple with the Healthy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Health) GetHealthyOk() (*bool, bool) {
	if o == nil || IsNil(o.Healthy) {
		return nil, false
	}
	return o.Healthy, true
}

// HasHealthy returns a boolean if a field has been set.
func (o *Health) HasHealthy() bool {
	if o != nil && !IsNil(o.Healthy) {
		return true
	}

	return false
}

// SetHealthy gets a reference to the given bool and assigns it to the Healthy field.
func (o *Health) SetHealthy(v bool) {
	o.Healthy = &v
}

// GetLdapAuthenticationHealthy returns the LdapAuthenticationHealthy field value if set, zero value otherwise.
func (o *Health) GetLdapAuthenticationHealthy() bool {
	if o == nil || IsNil(o.LdapAuthenticationHealthy) {
		var ret bool
		return ret
	}
	return *o.LdapAuthenticationHealthy
}

// GetLdapAuthenticationHealthyOk returns a tuple with the LdapAuthenticationHealthy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Health) GetLdapAuthenticationHealthyOk() (*bool, bool) {
	if o == nil || IsNil(o.LdapAuthenticationHealthy) {
		return nil, false
	}
	return o.LdapAuthenticationHealthy, true
}

// HasLdapAuthenticationHealthy returns a boolean if a field has been set.
func (o *Health) HasLdapAuthenticationHealthy() bool {
	if o != nil && !IsNil(o.LdapAuthenticationHealthy) {
		return true
	}

	return false
}

// SetLdapAuthenticationHealthy gets a reference to the given bool and assigns it to the LdapAuthenticationHealthy field.
func (o *Health) SetLdapAuthenticationHealthy(v bool) {
	o.LdapAuthenticationHealthy = &v
}

// GetLdapAuthorizationHealthy returns the LdapAuthorizationHealthy field value if set, zero value otherwise.
func (o *Health) GetLdapAuthorizationHealthy() bool {
	if o == nil || IsNil(o.LdapAuthorizationHealthy) {
		var ret bool
		return ret
	}
	return *o.LdapAuthorizationHealthy
}

// GetLdapAuthorizationHealthyOk returns a tuple with the LdapAuthorizationHealthy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Health) GetLdapAuthorizationHealthyOk() (*bool, bool) {
	if o == nil || IsNil(o.LdapAuthorizationHealthy) {
		return nil, false
	}
	return o.LdapAuthorizationHealthy, true
}

// HasLdapAuthorizationHealthy returns a boolean if a field has been set.
func (o *Health) HasLdapAuthorizationHealthy() bool {
	if o != nil && !IsNil(o.LdapAuthorizationHealthy) {
		return true
	}

	return false
}

// SetLdapAuthorizationHealthy gets a reference to the given bool and assigns it to the LdapAuthorizationHealthy field.
func (o *Health) SetLdapAuthorizationHealthy(v bool) {
	o.LdapAuthorizationHealthy = &v
}

// GetDatabaseHealthy returns the DatabaseHealthy field value if set, zero value otherwise.
func (o *Health) GetDatabaseHealthy() bool {
	if o == nil || IsNil(o.DatabaseHealthy) {
		var ret bool
		return ret
	}
	return *o.DatabaseHealthy
}

// GetDatabaseHealthyOk returns a tuple with the DatabaseHealthy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Health) GetDatabaseHealthyOk() (*bool, bool) {
	if o == nil || IsNil(o.DatabaseHealthy) {
		return nil, false
	}
	return o.DatabaseHealthy, true
}

// HasDatabaseHealthy returns a boolean if a field has been set.
func (o *Health) HasDatabaseHealthy() bool {
	if o != nil && !IsNil(o.DatabaseHealthy) {
		return true
	}

	return false
}

// SetDatabaseHealthy gets a reference to the given bool and assigns it to the DatabaseHealthy field.
func (o *Health) SetDatabaseHealthy(v bool) {
	o.DatabaseHealthy = &v
}

// GetEsHealthy returns the EsHealthy field value if set, zero value otherwise.
func (o *Health) GetEsHealthy() bool {
	if o == nil || IsNil(o.EsHealthy) {
		var ret bool
		return ret
	}
	return *o.EsHealthy
}

// GetEsHealthyOk returns a tuple with the EsHealthy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Health) GetEsHealthyOk() (*bool, bool) {
	if o == nil || IsNil(o.EsHealthy) {
		return nil, false
	}
	return o.EsHealthy, true
}

// HasEsHealthy returns a boolean if a field has been set.
func (o *Health) HasEsHealthy() bool {
	if o != nil && !IsNil(o.EsHealthy) {
		return true
	}

	return false
}

// SetEsHealthy gets a reference to the given bool and assigns it to the EsHealthy field.
func (o *Health) SetEsHealthy(v bool) {
	o.EsHealthy = &v
}

func (o Health) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Health) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Healthy) {
		toSerialize["healthy"] = o.Healthy
	}
	if !IsNil(o.LdapAuthenticationHealthy) {
		toSerialize["ldapAuthenticationHealthy"] = o.LdapAuthenticationHealthy
	}
	if !IsNil(o.LdapAuthorizationHealthy) {
		toSerialize["ldapAuthorizationHealthy"] = o.LdapAuthorizationHealthy
	}
	if !IsNil(o.DatabaseHealthy) {
		toSerialize["databaseHealthy"] = o.DatabaseHealthy
	}
	if !IsNil(o.EsHealthy) {
		toSerialize["esHealthy"] = o.EsHealthy
	}
	return toSerialize, nil
}

type NullableHealth struct {
	value *Health
	isSet bool
}

func (v NullableHealth) Get() *Health {
	return v.value
}

func (v *NullableHealth) Set(val *Health) {
	v.value = val
	v.isSet = true
}

func (v NullableHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealth(val *Health) *NullableHealth {
	return &NullableHealth{value: val, isSet: true}
}

func (v NullableHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



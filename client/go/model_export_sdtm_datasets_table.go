/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExportSdtmDatasetsTable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportSdtmDatasetsTable{}

// ExportSdtmDatasetsTable struct for ExportSdtmDatasetsTable
type ExportSdtmDatasetsTable struct {
	Datasets []ExportSdtmDatasetsRow `json:"datasets,omitempty"`
}

// NewExportSdtmDatasetsTable instantiates a new ExportSdtmDatasetsTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportSdtmDatasetsTable() *ExportSdtmDatasetsTable {
	this := ExportSdtmDatasetsTable{}
	return &this
}

// NewExportSdtmDatasetsTableWithDefaults instantiates a new ExportSdtmDatasetsTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportSdtmDatasetsTableWithDefaults() *ExportSdtmDatasetsTable {
	this := ExportSdtmDatasetsTable{}
	return &this
}

// GetDatasets returns the Datasets field value if set, zero value otherwise.
func (o *ExportSdtmDatasetsTable) GetDatasets() []ExportSdtmDatasetsRow {
	if o == nil || IsNil(o.Datasets) {
		var ret []ExportSdtmDatasetsRow
		return ret
	}
	return o.Datasets
}

// GetDatasetsOk returns a tuple with the Datasets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportSdtmDatasetsTable) GetDatasetsOk() ([]ExportSdtmDatasetsRow, bool) {
	if o == nil || IsNil(o.Datasets) {
		return nil, false
	}
	return o.Datasets, true
}

// HasDatasets returns a boolean if a field has been set.
func (o *ExportSdtmDatasetsTable) HasDatasets() bool {
	if o != nil && !IsNil(o.Datasets) {
		return true
	}

	return false
}

// SetDatasets gets a reference to the given []ExportSdtmDatasetsRow and assigns it to the Datasets field.
func (o *ExportSdtmDatasetsTable) SetDatasets(v []ExportSdtmDatasetsRow) {
	o.Datasets = v
}

func (o ExportSdtmDatasetsTable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportSdtmDatasetsTable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Datasets) {
		toSerialize["datasets"] = o.Datasets
	}
	return toSerialize, nil
}

type NullableExportSdtmDatasetsTable struct {
	value *ExportSdtmDatasetsTable
	isSet bool
}

func (v NullableExportSdtmDatasetsTable) Get() *ExportSdtmDatasetsTable {
	return v.value
}

func (v *NullableExportSdtmDatasetsTable) Set(val *ExportSdtmDatasetsTable) {
	v.value = val
	v.isSet = true
}

func (v NullableExportSdtmDatasetsTable) IsSet() bool {
	return v.isSet
}

func (v *NullableExportSdtmDatasetsTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportSdtmDatasetsTable(val *ExportSdtmDatasetsTable) *NullableExportSdtmDatasetsTable {
	return &NullableExportSdtmDatasetsTable{value: val, isSet: true}
}

func (v NullableExportSdtmDatasetsTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportSdtmDatasetsTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



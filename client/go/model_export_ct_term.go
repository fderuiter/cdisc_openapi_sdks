/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExportCtTerm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportCtTerm{}

// ExportCtTerm struct for ExportCtTerm
type ExportCtTerm struct {
	Bundle1 *string `json:"bundle-1,omitempty"`
	CDISCSynonymS []string `json:"CDISC Synonym(s),omitempty"`
	Bundle2 *string `json:"bundle-2,omitempty"`
}

// NewExportCtTerm instantiates a new ExportCtTerm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportCtTerm() *ExportCtTerm {
	this := ExportCtTerm{}
	return &this
}

// NewExportCtTermWithDefaults instantiates a new ExportCtTerm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportCtTermWithDefaults() *ExportCtTerm {
	this := ExportCtTerm{}
	return &this
}

// GetBundle1 returns the Bundle1 field value if set, zero value otherwise.
func (o *ExportCtTerm) GetBundle1() string {
	if o == nil || IsNil(o.Bundle1) {
		var ret string
		return ret
	}
	return *o.Bundle1
}

// GetBundle1Ok returns a tuple with the Bundle1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCtTerm) GetBundle1Ok() (*string, bool) {
	if o == nil || IsNil(o.Bundle1) {
		return nil, false
	}
	return o.Bundle1, true
}

// HasBundle1 returns a boolean if a field has been set.
func (o *ExportCtTerm) HasBundle1() bool {
	if o != nil && !IsNil(o.Bundle1) {
		return true
	}

	return false
}

// SetBundle1 gets a reference to the given string and assigns it to the Bundle1 field.
func (o *ExportCtTerm) SetBundle1(v string) {
	o.Bundle1 = &v
}

// GetCDISCSynonymS returns the CDISCSynonymS field value if set, zero value otherwise.
func (o *ExportCtTerm) GetCDISCSynonymS() []string {
	if o == nil || IsNil(o.CDISCSynonymS) {
		var ret []string
		return ret
	}
	return o.CDISCSynonymS
}

// GetCDISCSynonymSOk returns a tuple with the CDISCSynonymS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCtTerm) GetCDISCSynonymSOk() ([]string, bool) {
	if o == nil || IsNil(o.CDISCSynonymS) {
		return nil, false
	}
	return o.CDISCSynonymS, true
}

// HasCDISCSynonymS returns a boolean if a field has been set.
func (o *ExportCtTerm) HasCDISCSynonymS() bool {
	if o != nil && !IsNil(o.CDISCSynonymS) {
		return true
	}

	return false
}

// SetCDISCSynonymS gets a reference to the given []string and assigns it to the CDISCSynonymS field.
func (o *ExportCtTerm) SetCDISCSynonymS(v []string) {
	o.CDISCSynonymS = v
}

// GetBundle2 returns the Bundle2 field value if set, zero value otherwise.
func (o *ExportCtTerm) GetBundle2() string {
	if o == nil || IsNil(o.Bundle2) {
		var ret string
		return ret
	}
	return *o.Bundle2
}

// GetBundle2Ok returns a tuple with the Bundle2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCtTerm) GetBundle2Ok() (*string, bool) {
	if o == nil || IsNil(o.Bundle2) {
		return nil, false
	}
	return o.Bundle2, true
}

// HasBundle2 returns a boolean if a field has been set.
func (o *ExportCtTerm) HasBundle2() bool {
	if o != nil && !IsNil(o.Bundle2) {
		return true
	}

	return false
}

// SetBundle2 gets a reference to the given string and assigns it to the Bundle2 field.
func (o *ExportCtTerm) SetBundle2(v string) {
	o.Bundle2 = &v
}

func (o ExportCtTerm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportCtTerm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bundle1) {
		toSerialize["bundle-1"] = o.Bundle1
	}
	if !IsNil(o.CDISCSynonymS) {
		toSerialize["CDISC Synonym(s)"] = o.CDISCSynonymS
	}
	if !IsNil(o.Bundle2) {
		toSerialize["bundle-2"] = o.Bundle2
	}
	return toSerialize, nil
}

type NullableExportCtTerm struct {
	value *ExportCtTerm
	isSet bool
}

func (v NullableExportCtTerm) Get() *ExportCtTerm {
	return v.value
}

func (v *NullableExportCtTerm) Set(val *ExportCtTerm) {
	v.value = val
	v.isSet = true
}

func (v NullableExportCtTerm) IsSet() bool {
	return v.isSet
}

func (v *NullableExportCtTerm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportCtTerm(val *ExportCtTerm) *NullableExportCtTerm {
	return &NullableExportCtTerm{value: val, isSet: true}
}

func (v NullableExportCtTerm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportCtTerm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExportCtTable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportCtTable{}

// ExportCtTable struct for ExportCtTable
type ExportCtTable struct {
	Ct []ExportCtCodelist `json:"ct,omitempty"`
}

// NewExportCtTable instantiates a new ExportCtTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportCtTable() *ExportCtTable {
	this := ExportCtTable{}
	return &this
}

// NewExportCtTableWithDefaults instantiates a new ExportCtTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportCtTableWithDefaults() *ExportCtTable {
	this := ExportCtTable{}
	return &this
}

// GetCt returns the Ct field value if set, zero value otherwise.
func (o *ExportCtTable) GetCt() []ExportCtCodelist {
	if o == nil || IsNil(o.Ct) {
		var ret []ExportCtCodelist
		return ret
	}
	return o.Ct
}

// GetCtOk returns a tuple with the Ct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCtTable) GetCtOk() ([]ExportCtCodelist, bool) {
	if o == nil || IsNil(o.Ct) {
		return nil, false
	}
	return o.Ct, true
}

// HasCt returns a boolean if a field has been set.
func (o *ExportCtTable) HasCt() bool {
	if o != nil && !IsNil(o.Ct) {
		return true
	}

	return false
}

// SetCt gets a reference to the given []ExportCtCodelist and assigns it to the Ct field.
func (o *ExportCtTable) SetCt(v []ExportCtCodelist) {
	o.Ct = v
}

func (o ExportCtTable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportCtTable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ct) {
		toSerialize["ct"] = o.Ct
	}
	return toSerialize, nil
}

type NullableExportCtTable struct {
	value *ExportCtTable
	isSet bool
}

func (v NullableExportCtTable) Get() *ExportCtTable {
	return v.value
}

func (v *NullableExportCtTable) Set(val *ExportCtTable) {
	v.value = val
	v.isSet = true
}

func (v NullableExportCtTable) IsSet() bool {
	return v.isSet
}

func (v *NullableExportCtTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportCtTable(val *ExportCtTable) *NullableExportCtTable {
	return &NullableExportCtTable{value: val, isSet: true}
}

func (v NullableExportCtTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportCtTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



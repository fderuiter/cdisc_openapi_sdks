/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExportSdtmDatasetsRow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportSdtmDatasetsRow{}

// ExportSdtmDatasetsRow struct for ExportSdtmDatasetsRow
type ExportSdtmDatasetsRow struct {
	Version *string `json:"Version,omitempty"`
	Class *string `json:"Class,omitempty"`
	DatasetName *string `json:"Dataset Name,omitempty"`
	DatasetLabel *string `json:"Dataset Label,omitempty"`
	Structure *string `json:"Structure,omitempty"`
}

// NewExportSdtmDatasetsRow instantiates a new ExportSdtmDatasetsRow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportSdtmDatasetsRow() *ExportSdtmDatasetsRow {
	this := ExportSdtmDatasetsRow{}
	return &this
}

// NewExportSdtmDatasetsRowWithDefaults instantiates a new ExportSdtmDatasetsRow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportSdtmDatasetsRowWithDefaults() *ExportSdtmDatasetsRow {
	this := ExportSdtmDatasetsRow{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ExportSdtmDatasetsRow) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportSdtmDatasetsRow) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ExportSdtmDatasetsRow) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ExportSdtmDatasetsRow) SetVersion(v string) {
	o.Version = &v
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *ExportSdtmDatasetsRow) GetClass() string {
	if o == nil || IsNil(o.Class) {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportSdtmDatasetsRow) GetClassOk() (*string, bool) {
	if o == nil || IsNil(o.Class) {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *ExportSdtmDatasetsRow) HasClass() bool {
	if o != nil && !IsNil(o.Class) {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *ExportSdtmDatasetsRow) SetClass(v string) {
	o.Class = &v
}

// GetDatasetName returns the DatasetName field value if set, zero value otherwise.
func (o *ExportSdtmDatasetsRow) GetDatasetName() string {
	if o == nil || IsNil(o.DatasetName) {
		var ret string
		return ret
	}
	return *o.DatasetName
}

// GetDatasetNameOk returns a tuple with the DatasetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportSdtmDatasetsRow) GetDatasetNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatasetName) {
		return nil, false
	}
	return o.DatasetName, true
}

// HasDatasetName returns a boolean if a field has been set.
func (o *ExportSdtmDatasetsRow) HasDatasetName() bool {
	if o != nil && !IsNil(o.DatasetName) {
		return true
	}

	return false
}

// SetDatasetName gets a reference to the given string and assigns it to the DatasetName field.
func (o *ExportSdtmDatasetsRow) SetDatasetName(v string) {
	o.DatasetName = &v
}

// GetDatasetLabel returns the DatasetLabel field value if set, zero value otherwise.
func (o *ExportSdtmDatasetsRow) GetDatasetLabel() string {
	if o == nil || IsNil(o.DatasetLabel) {
		var ret string
		return ret
	}
	return *o.DatasetLabel
}

// GetDatasetLabelOk returns a tuple with the DatasetLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportSdtmDatasetsRow) GetDatasetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DatasetLabel) {
		return nil, false
	}
	return o.DatasetLabel, true
}

// HasDatasetLabel returns a boolean if a field has been set.
func (o *ExportSdtmDatasetsRow) HasDatasetLabel() bool {
	if o != nil && !IsNil(o.DatasetLabel) {
		return true
	}

	return false
}

// SetDatasetLabel gets a reference to the given string and assigns it to the DatasetLabel field.
func (o *ExportSdtmDatasetsRow) SetDatasetLabel(v string) {
	o.DatasetLabel = &v
}

// GetStructure returns the Structure field value if set, zero value otherwise.
func (o *ExportSdtmDatasetsRow) GetStructure() string {
	if o == nil || IsNil(o.Structure) {
		var ret string
		return ret
	}
	return *o.Structure
}

// GetStructureOk returns a tuple with the Structure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportSdtmDatasetsRow) GetStructureOk() (*string, bool) {
	if o == nil || IsNil(o.Structure) {
		return nil, false
	}
	return o.Structure, true
}

// HasStructure returns a boolean if a field has been set.
func (o *ExportSdtmDatasetsRow) HasStructure() bool {
	if o != nil && !IsNil(o.Structure) {
		return true
	}

	return false
}

// SetStructure gets a reference to the given string and assigns it to the Structure field.
func (o *ExportSdtmDatasetsRow) SetStructure(v string) {
	o.Structure = &v
}

func (o ExportSdtmDatasetsRow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportSdtmDatasetsRow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	if !IsNil(o.Class) {
		toSerialize["Class"] = o.Class
	}
	if !IsNil(o.DatasetName) {
		toSerialize["Dataset Name"] = o.DatasetName
	}
	if !IsNil(o.DatasetLabel) {
		toSerialize["Dataset Label"] = o.DatasetLabel
	}
	if !IsNil(o.Structure) {
		toSerialize["Structure"] = o.Structure
	}
	return toSerialize, nil
}

type NullableExportSdtmDatasetsRow struct {
	value *ExportSdtmDatasetsRow
	isSet bool
}

func (v NullableExportSdtmDatasetsRow) Get() *ExportSdtmDatasetsRow {
	return v.value
}

func (v *NullableExportSdtmDatasetsRow) Set(val *ExportSdtmDatasetsRow) {
	v.value = val
	v.isSet = true
}

func (v NullableExportSdtmDatasetsRow) IsSet() bool {
	return v.isSet
}

func (v *NullableExportSdtmDatasetsRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportSdtmDatasetsRow(val *ExportSdtmDatasetsRow) *NullableExportSdtmDatasetsRow {
	return &NullableExportSdtmDatasetsRow{value: val, isSet: true}
}

func (v NullableExportSdtmDatasetsRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportSdtmDatasetsRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
CDISC Library API

Testing MeasuresAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_MeasuresAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MeasuresAPIService MdrQrsMeasureVersionGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var measure string
		var version string

		resp, httpRes, err := apiClient.MeasuresAPI.MdrQrsMeasureVersionGet(context.Background(), measure, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MeasuresAPIService MdrQrsMeasureVersionItemsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var measure string
		var version string

		resp, httpRes, err := apiClient.MeasuresAPI.MdrQrsMeasureVersionItemsGet(context.Background(), measure, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MeasuresAPIService MdrQrsMeasureVersionItemsItemGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var measure string
		var version string
		var item string

		resp, httpRes, err := apiClient.MeasuresAPI.MdrQrsMeasureVersionItemsItemGet(context.Background(), measure, version, item).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MeasuresAPIService MdrQrsMeasureVersionResponsegroupsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var measure string
		var version string

		resp, httpRes, err := apiClient.MeasuresAPI.MdrQrsMeasureVersionResponsegroupsGet(context.Background(), measure, version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MeasuresAPIService MdrQrsMeasureVersionResponsegroupsResponsegroupGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var measure string
		var version string
		var responsegroup string

		resp, httpRes, err := apiClient.MeasuresAPI.MdrQrsMeasureVersionResponsegroupsResponsegroupGet(context.Background(), measure, version, responsegroup).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

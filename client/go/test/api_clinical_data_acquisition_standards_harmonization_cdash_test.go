/*
CDISC Library API

Testing ClinicalDataAcquisitionStandardsHarmonizationCDASHAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ClinicalDataAcquisitionStandardsHarmonizationCDASHAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ClinicalDataAcquisitionStandardsHarmonizationCDASHAPIService MdrCdashVersionClassesClassDomainsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var version string
		var class string

		resp, httpRes, err := apiClient.ClinicalDataAcquisitionStandardsHarmonizationCDASHAPI.MdrCdashVersionClassesClassDomainsGet(context.Background(), version, class).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClinicalDataAcquisitionStandardsHarmonizationCDASHAPIService MdrCdashVersionClassesClassFieldsFieldGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var version string
		var class string
		var field string

		resp, httpRes, err := apiClient.ClinicalDataAcquisitionStandardsHarmonizationCDASHAPI.MdrCdashVersionClassesClassFieldsFieldGet(context.Background(), version, class, field).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClinicalDataAcquisitionStandardsHarmonizationCDASHAPIService MdrCdashVersionClassesClassGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var version string
		var class string

		resp, httpRes, err := apiClient.ClinicalDataAcquisitionStandardsHarmonizationCDASHAPI.MdrCdashVersionClassesClassGet(context.Background(), version, class).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClinicalDataAcquisitionStandardsHarmonizationCDASHAPIService MdrCdashVersionClassesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var version string

		resp, httpRes, err := apiClient.ClinicalDataAcquisitionStandardsHarmonizationCDASHAPI.MdrCdashVersionClassesGet(context.Background(), version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClinicalDataAcquisitionStandardsHarmonizationCDASHAPIService MdrCdashVersionDomainsDomainFieldsFieldGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var version string
		var domain string
		var field string

		resp, httpRes, err := apiClient.ClinicalDataAcquisitionStandardsHarmonizationCDASHAPI.MdrCdashVersionDomainsDomainFieldsFieldGet(context.Background(), version, domain, field).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClinicalDataAcquisitionStandardsHarmonizationCDASHAPIService MdrCdashVersionDomainsDomainFieldsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var version string
		var domain string

		resp, httpRes, err := apiClient.ClinicalDataAcquisitionStandardsHarmonizationCDASHAPI.MdrCdashVersionDomainsDomainFieldsGet(context.Background(), version, domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClinicalDataAcquisitionStandardsHarmonizationCDASHAPIService MdrCdashVersionDomainsDomainGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var version string
		var domain string

		resp, httpRes, err := apiClient.ClinicalDataAcquisitionStandardsHarmonizationCDASHAPI.MdrCdashVersionDomainsDomainGet(context.Background(), version, domain).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClinicalDataAcquisitionStandardsHarmonizationCDASHAPIService MdrCdashVersionDomainsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var version string

		resp, httpRes, err := apiClient.ClinicalDataAcquisitionStandardsHarmonizationCDASHAPI.MdrCdashVersionDomainsGet(context.Background(), version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClinicalDataAcquisitionStandardsHarmonizationCDASHAPIService MdrCdashVersionGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var version string

		resp, httpRes, err := apiClient.ClinicalDataAcquisitionStandardsHarmonizationCDASHAPI.MdrCdashVersionGet(context.Background(), version).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClinicalDataAcquisitionStandardsHarmonizationCDASHAPIService MdrRootCdashClassesClassFieldsFieldGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var class string
		var field string

		resp, httpRes, err := apiClient.ClinicalDataAcquisitionStandardsHarmonizationCDASHAPI.MdrRootCdashClassesClassFieldsFieldGet(context.Background(), class, field).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClinicalDataAcquisitionStandardsHarmonizationCDASHAPIService MdrRootCdashDomainsDomainFieldsFieldGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var domain string
		var field string

		resp, httpRes, err := apiClient.ClinicalDataAcquisitionStandardsHarmonizationCDASHAPI.MdrRootCdashDomainsDomainFieldsFieldGet(context.Background(), domain, field).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

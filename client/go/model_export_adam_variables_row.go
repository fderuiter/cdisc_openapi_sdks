/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExportAdamVariablesRow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportAdamVariablesRow{}

// ExportAdamVariablesRow struct for ExportAdamVariablesRow
type ExportAdamVariablesRow struct {
	Version *string `json:"Version,omitempty"`
	DataStructureName *string `json:"Data Structure Name,omitempty"`
	DatasetName *string `json:"Dataset Name,omitempty"`
	VariableGroup *string `json:"Variable Group,omitempty"`
	VariableName *string `json:"Variable Name,omitempty"`
	VariableLabel *string `json:"Variable Label,omitempty"`
	Type *string `json:"Type,omitempty"`
	CodelistControlledTerms *string `json:"Codelist/Controlled Terms,omitempty"`
	Core *string `json:"Core,omitempty"`
	CDISCNotes *string `json:"CDISC Notes,omitempty"`
}

// NewExportAdamVariablesRow instantiates a new ExportAdamVariablesRow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportAdamVariablesRow() *ExportAdamVariablesRow {
	this := ExportAdamVariablesRow{}
	return &this
}

// NewExportAdamVariablesRowWithDefaults instantiates a new ExportAdamVariablesRow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportAdamVariablesRowWithDefaults() *ExportAdamVariablesRow {
	this := ExportAdamVariablesRow{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ExportAdamVariablesRow) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportAdamVariablesRow) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ExportAdamVariablesRow) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ExportAdamVariablesRow) SetVersion(v string) {
	o.Version = &v
}

// GetDataStructureName returns the DataStructureName field value if set, zero value otherwise.
func (o *ExportAdamVariablesRow) GetDataStructureName() string {
	if o == nil || IsNil(o.DataStructureName) {
		var ret string
		return ret
	}
	return *o.DataStructureName
}

// GetDataStructureNameOk returns a tuple with the DataStructureName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportAdamVariablesRow) GetDataStructureNameOk() (*string, bool) {
	if o == nil || IsNil(o.DataStructureName) {
		return nil, false
	}
	return o.DataStructureName, true
}

// HasDataStructureName returns a boolean if a field has been set.
func (o *ExportAdamVariablesRow) HasDataStructureName() bool {
	if o != nil && !IsNil(o.DataStructureName) {
		return true
	}

	return false
}

// SetDataStructureName gets a reference to the given string and assigns it to the DataStructureName field.
func (o *ExportAdamVariablesRow) SetDataStructureName(v string) {
	o.DataStructureName = &v
}

// GetDatasetName returns the DatasetName field value if set, zero value otherwise.
func (o *ExportAdamVariablesRow) GetDatasetName() string {
	if o == nil || IsNil(o.DatasetName) {
		var ret string
		return ret
	}
	return *o.DatasetName
}

// GetDatasetNameOk returns a tuple with the DatasetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportAdamVariablesRow) GetDatasetNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatasetName) {
		return nil, false
	}
	return o.DatasetName, true
}

// HasDatasetName returns a boolean if a field has been set.
func (o *ExportAdamVariablesRow) HasDatasetName() bool {
	if o != nil && !IsNil(o.DatasetName) {
		return true
	}

	return false
}

// SetDatasetName gets a reference to the given string and assigns it to the DatasetName field.
func (o *ExportAdamVariablesRow) SetDatasetName(v string) {
	o.DatasetName = &v
}

// GetVariableGroup returns the VariableGroup field value if set, zero value otherwise.
func (o *ExportAdamVariablesRow) GetVariableGroup() string {
	if o == nil || IsNil(o.VariableGroup) {
		var ret string
		return ret
	}
	return *o.VariableGroup
}

// GetVariableGroupOk returns a tuple with the VariableGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportAdamVariablesRow) GetVariableGroupOk() (*string, bool) {
	if o == nil || IsNil(o.VariableGroup) {
		return nil, false
	}
	return o.VariableGroup, true
}

// HasVariableGroup returns a boolean if a field has been set.
func (o *ExportAdamVariablesRow) HasVariableGroup() bool {
	if o != nil && !IsNil(o.VariableGroup) {
		return true
	}

	return false
}

// SetVariableGroup gets a reference to the given string and assigns it to the VariableGroup field.
func (o *ExportAdamVariablesRow) SetVariableGroup(v string) {
	o.VariableGroup = &v
}

// GetVariableName returns the VariableName field value if set, zero value otherwise.
func (o *ExportAdamVariablesRow) GetVariableName() string {
	if o == nil || IsNil(o.VariableName) {
		var ret string
		return ret
	}
	return *o.VariableName
}

// GetVariableNameOk returns a tuple with the VariableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportAdamVariablesRow) GetVariableNameOk() (*string, bool) {
	if o == nil || IsNil(o.VariableName) {
		return nil, false
	}
	return o.VariableName, true
}

// HasVariableName returns a boolean if a field has been set.
func (o *ExportAdamVariablesRow) HasVariableName() bool {
	if o != nil && !IsNil(o.VariableName) {
		return true
	}

	return false
}

// SetVariableName gets a reference to the given string and assigns it to the VariableName field.
func (o *ExportAdamVariablesRow) SetVariableName(v string) {
	o.VariableName = &v
}

// GetVariableLabel returns the VariableLabel field value if set, zero value otherwise.
func (o *ExportAdamVariablesRow) GetVariableLabel() string {
	if o == nil || IsNil(o.VariableLabel) {
		var ret string
		return ret
	}
	return *o.VariableLabel
}

// GetVariableLabelOk returns a tuple with the VariableLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportAdamVariablesRow) GetVariableLabelOk() (*string, bool) {
	if o == nil || IsNil(o.VariableLabel) {
		return nil, false
	}
	return o.VariableLabel, true
}

// HasVariableLabel returns a boolean if a field has been set.
func (o *ExportAdamVariablesRow) HasVariableLabel() bool {
	if o != nil && !IsNil(o.VariableLabel) {
		return true
	}

	return false
}

// SetVariableLabel gets a reference to the given string and assigns it to the VariableLabel field.
func (o *ExportAdamVariablesRow) SetVariableLabel(v string) {
	o.VariableLabel = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ExportAdamVariablesRow) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportAdamVariablesRow) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ExportAdamVariablesRow) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ExportAdamVariablesRow) SetType(v string) {
	o.Type = &v
}

// GetCodelistControlledTerms returns the CodelistControlledTerms field value if set, zero value otherwise.
func (o *ExportAdamVariablesRow) GetCodelistControlledTerms() string {
	if o == nil || IsNil(o.CodelistControlledTerms) {
		var ret string
		return ret
	}
	return *o.CodelistControlledTerms
}

// GetCodelistControlledTermsOk returns a tuple with the CodelistControlledTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportAdamVariablesRow) GetCodelistControlledTermsOk() (*string, bool) {
	if o == nil || IsNil(o.CodelistControlledTerms) {
		return nil, false
	}
	return o.CodelistControlledTerms, true
}

// HasCodelistControlledTerms returns a boolean if a field has been set.
func (o *ExportAdamVariablesRow) HasCodelistControlledTerms() bool {
	if o != nil && !IsNil(o.CodelistControlledTerms) {
		return true
	}

	return false
}

// SetCodelistControlledTerms gets a reference to the given string and assigns it to the CodelistControlledTerms field.
func (o *ExportAdamVariablesRow) SetCodelistControlledTerms(v string) {
	o.CodelistControlledTerms = &v
}

// GetCore returns the Core field value if set, zero value otherwise.
func (o *ExportAdamVariablesRow) GetCore() string {
	if o == nil || IsNil(o.Core) {
		var ret string
		return ret
	}
	return *o.Core
}

// GetCoreOk returns a tuple with the Core field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportAdamVariablesRow) GetCoreOk() (*string, bool) {
	if o == nil || IsNil(o.Core) {
		return nil, false
	}
	return o.Core, true
}

// HasCore returns a boolean if a field has been set.
func (o *ExportAdamVariablesRow) HasCore() bool {
	if o != nil && !IsNil(o.Core) {
		return true
	}

	return false
}

// SetCore gets a reference to the given string and assigns it to the Core field.
func (o *ExportAdamVariablesRow) SetCore(v string) {
	o.Core = &v
}

// GetCDISCNotes returns the CDISCNotes field value if set, zero value otherwise.
func (o *ExportAdamVariablesRow) GetCDISCNotes() string {
	if o == nil || IsNil(o.CDISCNotes) {
		var ret string
		return ret
	}
	return *o.CDISCNotes
}

// GetCDISCNotesOk returns a tuple with the CDISCNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportAdamVariablesRow) GetCDISCNotesOk() (*string, bool) {
	if o == nil || IsNil(o.CDISCNotes) {
		return nil, false
	}
	return o.CDISCNotes, true
}

// HasCDISCNotes returns a boolean if a field has been set.
func (o *ExportAdamVariablesRow) HasCDISCNotes() bool {
	if o != nil && !IsNil(o.CDISCNotes) {
		return true
	}

	return false
}

// SetCDISCNotes gets a reference to the given string and assigns it to the CDISCNotes field.
func (o *ExportAdamVariablesRow) SetCDISCNotes(v string) {
	o.CDISCNotes = &v
}

func (o ExportAdamVariablesRow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportAdamVariablesRow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	if !IsNil(o.DataStructureName) {
		toSerialize["Data Structure Name"] = o.DataStructureName
	}
	if !IsNil(o.DatasetName) {
		toSerialize["Dataset Name"] = o.DatasetName
	}
	if !IsNil(o.VariableGroup) {
		toSerialize["Variable Group"] = o.VariableGroup
	}
	if !IsNil(o.VariableName) {
		toSerialize["Variable Name"] = o.VariableName
	}
	if !IsNil(o.VariableLabel) {
		toSerialize["Variable Label"] = o.VariableLabel
	}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	if !IsNil(o.CodelistControlledTerms) {
		toSerialize["Codelist/Controlled Terms"] = o.CodelistControlledTerms
	}
	if !IsNil(o.Core) {
		toSerialize["Core"] = o.Core
	}
	if !IsNil(o.CDISCNotes) {
		toSerialize["CDISC Notes"] = o.CDISCNotes
	}
	return toSerialize, nil
}

type NullableExportAdamVariablesRow struct {
	value *ExportAdamVariablesRow
	isSet bool
}

func (v NullableExportAdamVariablesRow) Get() *ExportAdamVariablesRow {
	return v.value
}

func (v *NullableExportAdamVariablesRow) Set(val *ExportAdamVariablesRow) {
	v.value = val
	v.isSet = true
}

func (v NullableExportAdamVariablesRow) IsSet() bool {
	return v.isSet
}

func (v *NullableExportAdamVariablesRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportAdamVariablesRow(val *ExportAdamVariablesRow) *NullableExportAdamVariablesRow {
	return &NullableExportAdamVariablesRow{value: val, isSet: true}
}

func (v NullableExportAdamVariablesRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportAdamVariablesRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AdamVarsetLinks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdamVarsetLinks{}

// AdamVarsetLinks struct for AdamVarsetLinks
type AdamVarsetLinks struct {
	Self *AdamVarsetRef `json:"self,omitempty"`
	ParentProduct *AdamProductRef `json:"parentProduct,omitempty"`
	ParentDatastructure *AdamDatastructureRef `json:"parentDatastructure,omitempty"`
	PriorVersion *AdamVarsetRef `json:"priorVersion,omitempty"`
}

// NewAdamVarsetLinks instantiates a new AdamVarsetLinks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdamVarsetLinks() *AdamVarsetLinks {
	this := AdamVarsetLinks{}
	return &this
}

// NewAdamVarsetLinksWithDefaults instantiates a new AdamVarsetLinks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdamVarsetLinksWithDefaults() *AdamVarsetLinks {
	this := AdamVarsetLinks{}
	return &this
}

// GetSelf returns the Self field value if set, zero value otherwise.
func (o *AdamVarsetLinks) GetSelf() AdamVarsetRef {
	if o == nil || IsNil(o.Self) {
		var ret AdamVarsetRef
		return ret
	}
	return *o.Self
}

// GetSelfOk returns a tuple with the Self field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdamVarsetLinks) GetSelfOk() (*AdamVarsetRef, bool) {
	if o == nil || IsNil(o.Self) {
		return nil, false
	}
	return o.Self, true
}

// HasSelf returns a boolean if a field has been set.
func (o *AdamVarsetLinks) HasSelf() bool {
	if o != nil && !IsNil(o.Self) {
		return true
	}

	return false
}

// SetSelf gets a reference to the given AdamVarsetRef and assigns it to the Self field.
func (o *AdamVarsetLinks) SetSelf(v AdamVarsetRef) {
	o.Self = &v
}

// GetParentProduct returns the ParentProduct field value if set, zero value otherwise.
func (o *AdamVarsetLinks) GetParentProduct() AdamProductRef {
	if o == nil || IsNil(o.ParentProduct) {
		var ret AdamProductRef
		return ret
	}
	return *o.ParentProduct
}

// GetParentProductOk returns a tuple with the ParentProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdamVarsetLinks) GetParentProductOk() (*AdamProductRef, bool) {
	if o == nil || IsNil(o.ParentProduct) {
		return nil, false
	}
	return o.ParentProduct, true
}

// HasParentProduct returns a boolean if a field has been set.
func (o *AdamVarsetLinks) HasParentProduct() bool {
	if o != nil && !IsNil(o.ParentProduct) {
		return true
	}

	return false
}

// SetParentProduct gets a reference to the given AdamProductRef and assigns it to the ParentProduct field.
func (o *AdamVarsetLinks) SetParentProduct(v AdamProductRef) {
	o.ParentProduct = &v
}

// GetParentDatastructure returns the ParentDatastructure field value if set, zero value otherwise.
func (o *AdamVarsetLinks) GetParentDatastructure() AdamDatastructureRef {
	if o == nil || IsNil(o.ParentDatastructure) {
		var ret AdamDatastructureRef
		return ret
	}
	return *o.ParentDatastructure
}

// GetParentDatastructureOk returns a tuple with the ParentDatastructure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdamVarsetLinks) GetParentDatastructureOk() (*AdamDatastructureRef, bool) {
	if o == nil || IsNil(o.ParentDatastructure) {
		return nil, false
	}
	return o.ParentDatastructure, true
}

// HasParentDatastructure returns a boolean if a field has been set.
func (o *AdamVarsetLinks) HasParentDatastructure() bool {
	if o != nil && !IsNil(o.ParentDatastructure) {
		return true
	}

	return false
}

// SetParentDatastructure gets a reference to the given AdamDatastructureRef and assigns it to the ParentDatastructure field.
func (o *AdamVarsetLinks) SetParentDatastructure(v AdamDatastructureRef) {
	o.ParentDatastructure = &v
}

// GetPriorVersion returns the PriorVersion field value if set, zero value otherwise.
func (o *AdamVarsetLinks) GetPriorVersion() AdamVarsetRef {
	if o == nil || IsNil(o.PriorVersion) {
		var ret AdamVarsetRef
		return ret
	}
	return *o.PriorVersion
}

// GetPriorVersionOk returns a tuple with the PriorVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdamVarsetLinks) GetPriorVersionOk() (*AdamVarsetRef, bool) {
	if o == nil || IsNil(o.PriorVersion) {
		return nil, false
	}
	return o.PriorVersion, true
}

// HasPriorVersion returns a boolean if a field has been set.
func (o *AdamVarsetLinks) HasPriorVersion() bool {
	if o != nil && !IsNil(o.PriorVersion) {
		return true
	}

	return false
}

// SetPriorVersion gets a reference to the given AdamVarsetRef and assigns it to the PriorVersion field.
func (o *AdamVarsetLinks) SetPriorVersion(v AdamVarsetRef) {
	o.PriorVersion = &v
}

func (o AdamVarsetLinks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdamVarsetLinks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Self) {
		toSerialize["self"] = o.Self
	}
	if !IsNil(o.ParentProduct) {
		toSerialize["parentProduct"] = o.ParentProduct
	}
	if !IsNil(o.ParentDatastructure) {
		toSerialize["parentDatastructure"] = o.ParentDatastructure
	}
	if !IsNil(o.PriorVersion) {
		toSerialize["priorVersion"] = o.PriorVersion
	}
	return toSerialize, nil
}

type NullableAdamVarsetLinks struct {
	value *AdamVarsetLinks
	isSet bool
}

func (v NullableAdamVarsetLinks) Get() *AdamVarsetLinks {
	return v.value
}

func (v *NullableAdamVarsetLinks) Set(val *AdamVarsetLinks) {
	v.value = val
	v.isSet = true
}

func (v NullableAdamVarsetLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableAdamVarsetLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdamVarsetLinks(val *AdamVarsetLinks) *NullableAdamVarsetLinks {
	return &NullableAdamVarsetLinks{value: val, isSet: true}
}

func (v NullableAdamVarsetLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdamVarsetLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



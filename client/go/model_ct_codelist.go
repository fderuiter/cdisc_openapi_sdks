/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CtCodelist type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CtCodelist{}

// CtCodelist struct for CtCodelist
type CtCodelist struct {
	ConceptId *string `json:"conceptId,omitempty"`
	Extensible *string `json:"extensible,omitempty"`
	Name *string `json:"name,omitempty"`
	SubmissionValue *string `json:"submissionValue,omitempty"`
	Definition *string `json:"definition,omitempty"`
	PreferredTerm *string `json:"preferredTerm,omitempty"`
	Synonyms []string `json:"synonyms,omitempty"`
	Links *CtCodelistLinks `json:"_links,omitempty"`
	Terms []CtPackageTerm `json:"terms,omitempty"`
}

// NewCtCodelist instantiates a new CtCodelist object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCtCodelist() *CtCodelist {
	this := CtCodelist{}
	return &this
}

// NewCtCodelistWithDefaults instantiates a new CtCodelist object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCtCodelistWithDefaults() *CtCodelist {
	this := CtCodelist{}
	return &this
}

// GetConceptId returns the ConceptId field value if set, zero value otherwise.
func (o *CtCodelist) GetConceptId() string {
	if o == nil || IsNil(o.ConceptId) {
		var ret string
		return ret
	}
	return *o.ConceptId
}

// GetConceptIdOk returns a tuple with the ConceptId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CtCodelist) GetConceptIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConceptId) {
		return nil, false
	}
	return o.ConceptId, true
}

// HasConceptId returns a boolean if a field has been set.
func (o *CtCodelist) HasConceptId() bool {
	if o != nil && !IsNil(o.ConceptId) {
		return true
	}

	return false
}

// SetConceptId gets a reference to the given string and assigns it to the ConceptId field.
func (o *CtCodelist) SetConceptId(v string) {
	o.ConceptId = &v
}

// GetExtensible returns the Extensible field value if set, zero value otherwise.
func (o *CtCodelist) GetExtensible() string {
	if o == nil || IsNil(o.Extensible) {
		var ret string
		return ret
	}
	return *o.Extensible
}

// GetExtensibleOk returns a tuple with the Extensible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CtCodelist) GetExtensibleOk() (*string, bool) {
	if o == nil || IsNil(o.Extensible) {
		return nil, false
	}
	return o.Extensible, true
}

// HasExtensible returns a boolean if a field has been set.
func (o *CtCodelist) HasExtensible() bool {
	if o != nil && !IsNil(o.Extensible) {
		return true
	}

	return false
}

// SetExtensible gets a reference to the given string and assigns it to the Extensible field.
func (o *CtCodelist) SetExtensible(v string) {
	o.Extensible = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CtCodelist) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CtCodelist) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CtCodelist) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CtCodelist) SetName(v string) {
	o.Name = &v
}

// GetSubmissionValue returns the SubmissionValue field value if set, zero value otherwise.
func (o *CtCodelist) GetSubmissionValue() string {
	if o == nil || IsNil(o.SubmissionValue) {
		var ret string
		return ret
	}
	return *o.SubmissionValue
}

// GetSubmissionValueOk returns a tuple with the SubmissionValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CtCodelist) GetSubmissionValueOk() (*string, bool) {
	if o == nil || IsNil(o.SubmissionValue) {
		return nil, false
	}
	return o.SubmissionValue, true
}

// HasSubmissionValue returns a boolean if a field has been set.
func (o *CtCodelist) HasSubmissionValue() bool {
	if o != nil && !IsNil(o.SubmissionValue) {
		return true
	}

	return false
}

// SetSubmissionValue gets a reference to the given string and assigns it to the SubmissionValue field.
func (o *CtCodelist) SetSubmissionValue(v string) {
	o.SubmissionValue = &v
}

// GetDefinition returns the Definition field value if set, zero value otherwise.
func (o *CtCodelist) GetDefinition() string {
	if o == nil || IsNil(o.Definition) {
		var ret string
		return ret
	}
	return *o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CtCodelist) GetDefinitionOk() (*string, bool) {
	if o == nil || IsNil(o.Definition) {
		return nil, false
	}
	return o.Definition, true
}

// HasDefinition returns a boolean if a field has been set.
func (o *CtCodelist) HasDefinition() bool {
	if o != nil && !IsNil(o.Definition) {
		return true
	}

	return false
}

// SetDefinition gets a reference to the given string and assigns it to the Definition field.
func (o *CtCodelist) SetDefinition(v string) {
	o.Definition = &v
}

// GetPreferredTerm returns the PreferredTerm field value if set, zero value otherwise.
func (o *CtCodelist) GetPreferredTerm() string {
	if o == nil || IsNil(o.PreferredTerm) {
		var ret string
		return ret
	}
	return *o.PreferredTerm
}

// GetPreferredTermOk returns a tuple with the PreferredTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CtCodelist) GetPreferredTermOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredTerm) {
		return nil, false
	}
	return o.PreferredTerm, true
}

// HasPreferredTerm returns a boolean if a field has been set.
func (o *CtCodelist) HasPreferredTerm() bool {
	if o != nil && !IsNil(o.PreferredTerm) {
		return true
	}

	return false
}

// SetPreferredTerm gets a reference to the given string and assigns it to the PreferredTerm field.
func (o *CtCodelist) SetPreferredTerm(v string) {
	o.PreferredTerm = &v
}

// GetSynonyms returns the Synonyms field value if set, zero value otherwise.
func (o *CtCodelist) GetSynonyms() []string {
	if o == nil || IsNil(o.Synonyms) {
		var ret []string
		return ret
	}
	return o.Synonyms
}

// GetSynonymsOk returns a tuple with the Synonyms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CtCodelist) GetSynonymsOk() ([]string, bool) {
	if o == nil || IsNil(o.Synonyms) {
		return nil, false
	}
	return o.Synonyms, true
}

// HasSynonyms returns a boolean if a field has been set.
func (o *CtCodelist) HasSynonyms() bool {
	if o != nil && !IsNil(o.Synonyms) {
		return true
	}

	return false
}

// SetSynonyms gets a reference to the given []string and assigns it to the Synonyms field.
func (o *CtCodelist) SetSynonyms(v []string) {
	o.Synonyms = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *CtCodelist) GetLinks() CtCodelistLinks {
	if o == nil || IsNil(o.Links) {
		var ret CtCodelistLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CtCodelist) GetLinksOk() (*CtCodelistLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *CtCodelist) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given CtCodelistLinks and assigns it to the Links field.
func (o *CtCodelist) SetLinks(v CtCodelistLinks) {
	o.Links = &v
}

// GetTerms returns the Terms field value if set, zero value otherwise.
func (o *CtCodelist) GetTerms() []CtPackageTerm {
	if o == nil || IsNil(o.Terms) {
		var ret []CtPackageTerm
		return ret
	}
	return o.Terms
}

// GetTermsOk returns a tuple with the Terms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CtCodelist) GetTermsOk() ([]CtPackageTerm, bool) {
	if o == nil || IsNil(o.Terms) {
		return nil, false
	}
	return o.Terms, true
}

// HasTerms returns a boolean if a field has been set.
func (o *CtCodelist) HasTerms() bool {
	if o != nil && !IsNil(o.Terms) {
		return true
	}

	return false
}

// SetTerms gets a reference to the given []CtPackageTerm and assigns it to the Terms field.
func (o *CtCodelist) SetTerms(v []CtPackageTerm) {
	o.Terms = v
}

func (o CtCodelist) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CtCodelist) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConceptId) {
		toSerialize["conceptId"] = o.ConceptId
	}
	if !IsNil(o.Extensible) {
		toSerialize["extensible"] = o.Extensible
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SubmissionValue) {
		toSerialize["submissionValue"] = o.SubmissionValue
	}
	if !IsNil(o.Definition) {
		toSerialize["definition"] = o.Definition
	}
	if !IsNil(o.PreferredTerm) {
		toSerialize["preferredTerm"] = o.PreferredTerm
	}
	if !IsNil(o.Synonyms) {
		toSerialize["synonyms"] = o.Synonyms
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.Terms) {
		toSerialize["terms"] = o.Terms
	}
	return toSerialize, nil
}

type NullableCtCodelist struct {
	value *CtCodelist
	isSet bool
}

func (v NullableCtCodelist) Get() *CtCodelist {
	return v.value
}

func (v *NullableCtCodelist) Set(val *CtCodelist) {
	v.value = val
	v.isSet = true
}

func (v NullableCtCodelist) IsSet() bool {
	return v.isSet
}

func (v *NullableCtCodelist) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCtCodelist(val *CtCodelist) *NullableCtCodelist {
	return &NullableCtCodelist{value: val, isSet: true}
}

func (v NullableCtCodelist) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCtCodelist) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



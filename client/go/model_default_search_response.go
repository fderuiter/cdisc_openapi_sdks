/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DefaultSearchResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefaultSearchResponse{}

// DefaultSearchResponse struct for DefaultSearchResponse
type DefaultSearchResponse struct {
	Hits []DefaultSearchResponseHitsInner `json:"hits,omitempty"`
	TotalHits *float32 `json:"totalHits,omitempty"`
}

// NewDefaultSearchResponse instantiates a new DefaultSearchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefaultSearchResponse() *DefaultSearchResponse {
	this := DefaultSearchResponse{}
	return &this
}

// NewDefaultSearchResponseWithDefaults instantiates a new DefaultSearchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefaultSearchResponseWithDefaults() *DefaultSearchResponse {
	this := DefaultSearchResponse{}
	return &this
}

// GetHits returns the Hits field value if set, zero value otherwise.
func (o *DefaultSearchResponse) GetHits() []DefaultSearchResponseHitsInner {
	if o == nil || IsNil(o.Hits) {
		var ret []DefaultSearchResponseHitsInner
		return ret
	}
	return o.Hits
}

// GetHitsOk returns a tuple with the Hits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultSearchResponse) GetHitsOk() ([]DefaultSearchResponseHitsInner, bool) {
	if o == nil || IsNil(o.Hits) {
		return nil, false
	}
	return o.Hits, true
}

// HasHits returns a boolean if a field has been set.
func (o *DefaultSearchResponse) HasHits() bool {
	if o != nil && !IsNil(o.Hits) {
		return true
	}

	return false
}

// SetHits gets a reference to the given []DefaultSearchResponseHitsInner and assigns it to the Hits field.
func (o *DefaultSearchResponse) SetHits(v []DefaultSearchResponseHitsInner) {
	o.Hits = v
}

// GetTotalHits returns the TotalHits field value if set, zero value otherwise.
func (o *DefaultSearchResponse) GetTotalHits() float32 {
	if o == nil || IsNil(o.TotalHits) {
		var ret float32
		return ret
	}
	return *o.TotalHits
}

// GetTotalHitsOk returns a tuple with the TotalHits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultSearchResponse) GetTotalHitsOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalHits) {
		return nil, false
	}
	return o.TotalHits, true
}

// HasTotalHits returns a boolean if a field has been set.
func (o *DefaultSearchResponse) HasTotalHits() bool {
	if o != nil && !IsNil(o.TotalHits) {
		return true
	}

	return false
}

// SetTotalHits gets a reference to the given float32 and assigns it to the TotalHits field.
func (o *DefaultSearchResponse) SetTotalHits(v float32) {
	o.TotalHits = &v
}

func (o DefaultSearchResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefaultSearchResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hits) {
		toSerialize["hits"] = o.Hits
	}
	if !IsNil(o.TotalHits) {
		toSerialize["totalHits"] = o.TotalHits
	}
	return toSerialize, nil
}

type NullableDefaultSearchResponse struct {
	value *DefaultSearchResponse
	isSet bool
}

func (v NullableDefaultSearchResponse) Get() *DefaultSearchResponse {
	return v.value
}

func (v *NullableDefaultSearchResponse) Set(val *DefaultSearchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultSearchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultSearchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultSearchResponse(val *DefaultSearchResponse) *NullableDefaultSearchResponse {
	return &NullableDefaultSearchResponse{value: val, isSet: true}
}

func (v NullableDefaultSearchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultSearchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



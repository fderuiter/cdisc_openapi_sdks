/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ScopeValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScopeValues{}

// ScopeValues struct for ScopeValues
type ScopeValues struct {
	Total *float32 `json:"total,omitempty"`
	HasMore *bool `json:"hasMore,omitempty"`
	Values []string `json:"values,omitempty"`
}

// NewScopeValues instantiates a new ScopeValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScopeValues() *ScopeValues {
	this := ScopeValues{}
	return &this
}

// NewScopeValuesWithDefaults instantiates a new ScopeValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScopeValuesWithDefaults() *ScopeValues {
	this := ScopeValues{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *ScopeValues) GetTotal() float32 {
	if o == nil || IsNil(o.Total) {
		var ret float32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopeValues) GetTotalOk() (*float32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *ScopeValues) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float32 and assigns it to the Total field.
func (o *ScopeValues) SetTotal(v float32) {
	o.Total = &v
}

// GetHasMore returns the HasMore field value if set, zero value otherwise.
func (o *ScopeValues) GetHasMore() bool {
	if o == nil || IsNil(o.HasMore) {
		var ret bool
		return ret
	}
	return *o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopeValues) GetHasMoreOk() (*bool, bool) {
	if o == nil || IsNil(o.HasMore) {
		return nil, false
	}
	return o.HasMore, true
}

// HasHasMore returns a boolean if a field has been set.
func (o *ScopeValues) HasHasMore() bool {
	if o != nil && !IsNil(o.HasMore) {
		return true
	}

	return false
}

// SetHasMore gets a reference to the given bool and assigns it to the HasMore field.
func (o *ScopeValues) SetHasMore(v bool) {
	o.HasMore = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *ScopeValues) GetValues() []string {
	if o == nil || IsNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScopeValues) GetValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *ScopeValues) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *ScopeValues) SetValues(v []string) {
	o.Values = v
}

func (o ScopeValues) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScopeValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.HasMore) {
		toSerialize["hasMore"] = o.HasMore
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableScopeValues struct {
	value *ScopeValues
	isSet bool
}

func (v NullableScopeValues) Get() *ScopeValues {
	return v.value
}

func (v *NullableScopeValues) Set(val *ScopeValues) {
	v.value = val
	v.isSet = true
}

func (v NullableScopeValues) IsSet() bool {
	return v.isSet
}

func (v *NullableScopeValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScopeValues(val *ScopeValues) *NullableScopeValues {
	return &NullableScopeValues{value: val, isSet: true}
}

func (v NullableScopeValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScopeValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



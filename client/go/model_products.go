/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Products type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Products{}

// Products struct for Products
type Products struct {
	Links *ProductsLinks `json:"_links,omitempty"`
}

// NewProducts instantiates a new Products object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProducts() *Products {
	this := Products{}
	return &this
}

// NewProductsWithDefaults instantiates a new Products object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductsWithDefaults() *Products {
	this := Products{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Products) GetLinks() ProductsLinks {
	if o == nil || IsNil(o.Links) {
		var ret ProductsLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Products) GetLinksOk() (*ProductsLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Products) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given ProductsLinks and assigns it to the Links field.
func (o *Products) SetLinks(v ProductsLinks) {
	o.Links = &v
}

func (o Products) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Products) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	return toSerialize, nil
}

type NullableProducts struct {
	value *Products
	isSet bool
}

func (v NullableProducts) Get() *Products {
	return v.value
}

func (v *NullableProducts) Set(val *Products) {
	v.value = val
	v.isSet = true
}

func (v NullableProducts) IsSet() bool {
	return v.isSet
}

func (v *NullableProducts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProducts(val *Products) *NullableProducts {
	return &NullableProducts{value: val, isSet: true}
}

func (v NullableProducts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProducts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



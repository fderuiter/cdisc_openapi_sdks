/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AdamVariableLinks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdamVariableLinks{}

// AdamVariableLinks struct for AdamVariableLinks
type AdamVariableLinks struct {
	Self *AdamVariableRef `json:"self,omitempty"`
	Codelist *RootCtCodelistRef `json:"codelist,omitempty"`
	ParentProduct *AdamProductRef `json:"parentProduct,omitempty"`
	ParentDatastructure *AdamDatastructureRef `json:"parentDatastructure,omitempty"`
	ParentVariableSet *AdamVarsetRef `json:"parentVariableSet,omitempty"`
	PriorVersion *AdamVariableRef `json:"priorVersion,omitempty"`
}

// NewAdamVariableLinks instantiates a new AdamVariableLinks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdamVariableLinks() *AdamVariableLinks {
	this := AdamVariableLinks{}
	return &this
}

// NewAdamVariableLinksWithDefaults instantiates a new AdamVariableLinks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdamVariableLinksWithDefaults() *AdamVariableLinks {
	this := AdamVariableLinks{}
	return &this
}

// GetSelf returns the Self field value if set, zero value otherwise.
func (o *AdamVariableLinks) GetSelf() AdamVariableRef {
	if o == nil || IsNil(o.Self) {
		var ret AdamVariableRef
		return ret
	}
	return *o.Self
}

// GetSelfOk returns a tuple with the Self field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdamVariableLinks) GetSelfOk() (*AdamVariableRef, bool) {
	if o == nil || IsNil(o.Self) {
		return nil, false
	}
	return o.Self, true
}

// HasSelf returns a boolean if a field has been set.
func (o *AdamVariableLinks) HasSelf() bool {
	if o != nil && !IsNil(o.Self) {
		return true
	}

	return false
}

// SetSelf gets a reference to the given AdamVariableRef and assigns it to the Self field.
func (o *AdamVariableLinks) SetSelf(v AdamVariableRef) {
	o.Self = &v
}

// GetCodelist returns the Codelist field value if set, zero value otherwise.
func (o *AdamVariableLinks) GetCodelist() RootCtCodelistRef {
	if o == nil || IsNil(o.Codelist) {
		var ret RootCtCodelistRef
		return ret
	}
	return *o.Codelist
}

// GetCodelistOk returns a tuple with the Codelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdamVariableLinks) GetCodelistOk() (*RootCtCodelistRef, bool) {
	if o == nil || IsNil(o.Codelist) {
		return nil, false
	}
	return o.Codelist, true
}

// HasCodelist returns a boolean if a field has been set.
func (o *AdamVariableLinks) HasCodelist() bool {
	if o != nil && !IsNil(o.Codelist) {
		return true
	}

	return false
}

// SetCodelist gets a reference to the given RootCtCodelistRef and assigns it to the Codelist field.
func (o *AdamVariableLinks) SetCodelist(v RootCtCodelistRef) {
	o.Codelist = &v
}

// GetParentProduct returns the ParentProduct field value if set, zero value otherwise.
func (o *AdamVariableLinks) GetParentProduct() AdamProductRef {
	if o == nil || IsNil(o.ParentProduct) {
		var ret AdamProductRef
		return ret
	}
	return *o.ParentProduct
}

// GetParentProductOk returns a tuple with the ParentProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdamVariableLinks) GetParentProductOk() (*AdamProductRef, bool) {
	if o == nil || IsNil(o.ParentProduct) {
		return nil, false
	}
	return o.ParentProduct, true
}

// HasParentProduct returns a boolean if a field has been set.
func (o *AdamVariableLinks) HasParentProduct() bool {
	if o != nil && !IsNil(o.ParentProduct) {
		return true
	}

	return false
}

// SetParentProduct gets a reference to the given AdamProductRef and assigns it to the ParentProduct field.
func (o *AdamVariableLinks) SetParentProduct(v AdamProductRef) {
	o.ParentProduct = &v
}

// GetParentDatastructure returns the ParentDatastructure field value if set, zero value otherwise.
func (o *AdamVariableLinks) GetParentDatastructure() AdamDatastructureRef {
	if o == nil || IsNil(o.ParentDatastructure) {
		var ret AdamDatastructureRef
		return ret
	}
	return *o.ParentDatastructure
}

// GetParentDatastructureOk returns a tuple with the ParentDatastructure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdamVariableLinks) GetParentDatastructureOk() (*AdamDatastructureRef, bool) {
	if o == nil || IsNil(o.ParentDatastructure) {
		return nil, false
	}
	return o.ParentDatastructure, true
}

// HasParentDatastructure returns a boolean if a field has been set.
func (o *AdamVariableLinks) HasParentDatastructure() bool {
	if o != nil && !IsNil(o.ParentDatastructure) {
		return true
	}

	return false
}

// SetParentDatastructure gets a reference to the given AdamDatastructureRef and assigns it to the ParentDatastructure field.
func (o *AdamVariableLinks) SetParentDatastructure(v AdamDatastructureRef) {
	o.ParentDatastructure = &v
}

// GetParentVariableSet returns the ParentVariableSet field value if set, zero value otherwise.
func (o *AdamVariableLinks) GetParentVariableSet() AdamVarsetRef {
	if o == nil || IsNil(o.ParentVariableSet) {
		var ret AdamVarsetRef
		return ret
	}
	return *o.ParentVariableSet
}

// GetParentVariableSetOk returns a tuple with the ParentVariableSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdamVariableLinks) GetParentVariableSetOk() (*AdamVarsetRef, bool) {
	if o == nil || IsNil(o.ParentVariableSet) {
		return nil, false
	}
	return o.ParentVariableSet, true
}

// HasParentVariableSet returns a boolean if a field has been set.
func (o *AdamVariableLinks) HasParentVariableSet() bool {
	if o != nil && !IsNil(o.ParentVariableSet) {
		return true
	}

	return false
}

// SetParentVariableSet gets a reference to the given AdamVarsetRef and assigns it to the ParentVariableSet field.
func (o *AdamVariableLinks) SetParentVariableSet(v AdamVarsetRef) {
	o.ParentVariableSet = &v
}

// GetPriorVersion returns the PriorVersion field value if set, zero value otherwise.
func (o *AdamVariableLinks) GetPriorVersion() AdamVariableRef {
	if o == nil || IsNil(o.PriorVersion) {
		var ret AdamVariableRef
		return ret
	}
	return *o.PriorVersion
}

// GetPriorVersionOk returns a tuple with the PriorVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdamVariableLinks) GetPriorVersionOk() (*AdamVariableRef, bool) {
	if o == nil || IsNil(o.PriorVersion) {
		return nil, false
	}
	return o.PriorVersion, true
}

// HasPriorVersion returns a boolean if a field has been set.
func (o *AdamVariableLinks) HasPriorVersion() bool {
	if o != nil && !IsNil(o.PriorVersion) {
		return true
	}

	return false
}

// SetPriorVersion gets a reference to the given AdamVariableRef and assigns it to the PriorVersion field.
func (o *AdamVariableLinks) SetPriorVersion(v AdamVariableRef) {
	o.PriorVersion = &v
}

func (o AdamVariableLinks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdamVariableLinks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Self) {
		toSerialize["self"] = o.Self
	}
	if !IsNil(o.Codelist) {
		toSerialize["codelist"] = o.Codelist
	}
	if !IsNil(o.ParentProduct) {
		toSerialize["parentProduct"] = o.ParentProduct
	}
	if !IsNil(o.ParentDatastructure) {
		toSerialize["parentDatastructure"] = o.ParentDatastructure
	}
	if !IsNil(o.ParentVariableSet) {
		toSerialize["parentVariableSet"] = o.ParentVariableSet
	}
	if !IsNil(o.PriorVersion) {
		toSerialize["priorVersion"] = o.PriorVersion
	}
	return toSerialize, nil
}

type NullableAdamVariableLinks struct {
	value *AdamVariableLinks
	isSet bool
}

func (v NullableAdamVariableLinks) Get() *AdamVariableLinks {
	return v.value
}

func (v *NullableAdamVariableLinks) Set(val *AdamVariableLinks) {
	v.value = val
	v.isSet = true
}

func (v NullableAdamVariableLinks) IsSet() bool {
	return v.isSet
}

func (v *NullableAdamVariableLinks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdamVariableLinks(val *AdamVariableLinks) *NullableAdamVariableLinks {
	return &NullableAdamVariableLinks{value: val, isSet: true}
}

func (v NullableAdamVariableLinks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdamVariableLinks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



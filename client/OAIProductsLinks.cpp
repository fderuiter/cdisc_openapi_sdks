/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductsLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductsLinks::OAIProductsLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductsLinks::OAIProductsLinks() {
    this->initializeModel();
}

OAIProductsLinks::~OAIProductsLinks() {}

void OAIProductsLinks::initializeModel() {

    m_self_isSet = false;
    m_self_isValid = false;

    m_data_collection_isSet = false;
    m_data_collection_isValid = false;

    m_data_tabulation_isSet = false;
    m_data_tabulation_isValid = false;

    m_data_analysis_isSet = false;
    m_data_analysis_isValid = false;

    m_terminology_isSet = false;
    m_terminology_isValid = false;

    m_measure_isSet = false;
    m_measure_isValid = false;
}

void OAIProductsLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductsLinks::fromJsonObject(QJsonObject json) {

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_data_collection_isValid = ::OpenAPI::fromJsonValue(m_data_collection, json[QString("data-collection")]);
    m_data_collection_isSet = !json[QString("data-collection")].isNull() && m_data_collection_isValid;

    m_data_tabulation_isValid = ::OpenAPI::fromJsonValue(m_data_tabulation, json[QString("data-tabulation")]);
    m_data_tabulation_isSet = !json[QString("data-tabulation")].isNull() && m_data_tabulation_isValid;

    m_data_analysis_isValid = ::OpenAPI::fromJsonValue(m_data_analysis, json[QString("data-analysis")]);
    m_data_analysis_isSet = !json[QString("data-analysis")].isNull() && m_data_analysis_isValid;

    m_terminology_isValid = ::OpenAPI::fromJsonValue(m_terminology, json[QString("terminology")]);
    m_terminology_isSet = !json[QString("terminology")].isNull() && m_terminology_isValid;

    m_measure_isValid = ::OpenAPI::fromJsonValue(m_measure, json[QString("measure")]);
    m_measure_isSet = !json[QString("measure")].isNull() && m_measure_isValid;
}

QString OAIProductsLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductsLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_data_collection.isSet()) {
        obj.insert(QString("data-collection"), ::OpenAPI::toJsonValue(m_data_collection));
    }
    if (m_data_tabulation.isSet()) {
        obj.insert(QString("data-tabulation"), ::OpenAPI::toJsonValue(m_data_tabulation));
    }
    if (m_data_analysis.isSet()) {
        obj.insert(QString("data-analysis"), ::OpenAPI::toJsonValue(m_data_analysis));
    }
    if (m_terminology.isSet()) {
        obj.insert(QString("terminology"), ::OpenAPI::toJsonValue(m_terminology));
    }
    if (m_measure.isSet()) {
        obj.insert(QString("measure"), ::OpenAPI::toJsonValue(m_measure));
    }
    return obj;
}

OAIProductsRef OAIProductsLinks::getSelf() const {
    return m_self;
}
void OAIProductsLinks::setSelf(const OAIProductsRef &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIProductsLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAIProductsLinks::is_self_Valid() const{
    return m_self_isValid;
}

OAIProductgroupDataCollection OAIProductsLinks::getDataCollection() const {
    return m_data_collection;
}
void OAIProductsLinks::setDataCollection(const OAIProductgroupDataCollection &data_collection) {
    m_data_collection = data_collection;
    m_data_collection_isSet = true;
}

bool OAIProductsLinks::is_data_collection_Set() const{
    return m_data_collection_isSet;
}

bool OAIProductsLinks::is_data_collection_Valid() const{
    return m_data_collection_isValid;
}

OAIProductgroupDataTabulation OAIProductsLinks::getDataTabulation() const {
    return m_data_tabulation;
}
void OAIProductsLinks::setDataTabulation(const OAIProductgroupDataTabulation &data_tabulation) {
    m_data_tabulation = data_tabulation;
    m_data_tabulation_isSet = true;
}

bool OAIProductsLinks::is_data_tabulation_Set() const{
    return m_data_tabulation_isSet;
}

bool OAIProductsLinks::is_data_tabulation_Valid() const{
    return m_data_tabulation_isValid;
}

OAIProductgroupDataAnalysis OAIProductsLinks::getDataAnalysis() const {
    return m_data_analysis;
}
void OAIProductsLinks::setDataAnalysis(const OAIProductgroupDataAnalysis &data_analysis) {
    m_data_analysis = data_analysis;
    m_data_analysis_isSet = true;
}

bool OAIProductsLinks::is_data_analysis_Set() const{
    return m_data_analysis_isSet;
}

bool OAIProductsLinks::is_data_analysis_Valid() const{
    return m_data_analysis_isValid;
}

OAIProductgroupTerminology OAIProductsLinks::getTerminology() const {
    return m_terminology;
}
void OAIProductsLinks::setTerminology(const OAIProductgroupTerminology &terminology) {
    m_terminology = terminology;
    m_terminology_isSet = true;
}

bool OAIProductsLinks::is_terminology_Set() const{
    return m_terminology_isSet;
}

bool OAIProductsLinks::is_terminology_Valid() const{
    return m_terminology_isValid;
}

OAIProductgroupQrs OAIProductsLinks::getMeasure() const {
    return m_measure;
}
void OAIProductsLinks::setMeasure(const OAIProductgroupQrs &measure) {
    m_measure = measure;
    m_measure_isSet = true;
}

bool OAIProductsLinks::is_measure_Set() const{
    return m_measure_isSet;
}

bool OAIProductsLinks::is_measure_Valid() const{
    return m_measure_isValid;
}

bool OAIProductsLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_collection.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_tabulation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_analysis.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminology.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_measure.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductsLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI

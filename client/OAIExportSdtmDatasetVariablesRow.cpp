/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportSdtmDatasetVariablesRow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportSdtmDatasetVariablesRow::OAIExportSdtmDatasetVariablesRow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportSdtmDatasetVariablesRow::OAIExportSdtmDatasetVariablesRow() {
    this->initializeModel();
}

OAIExportSdtmDatasetVariablesRow::~OAIExportSdtmDatasetVariablesRow() {}

void OAIExportSdtmDatasetVariablesRow::initializeModel() {

    m_version_isSet = false;
    m_version_isValid = false;

    m_variable_order_isSet = false;
    m_variable_order_isValid = false;

    m_r_class_isSet = false;
    m_r_class_isValid = false;

    m_dataset_name_isSet = false;
    m_dataset_name_isValid = false;

    m_variable_name_isSet = false;
    m_variable_name_isValid = false;

    m_variable_label_isSet = false;
    m_variable_label_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_controlled_terms_codelist_or_format_isSet = false;
    m_controlled_terms_codelist_or_format_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_role_description_isSet = false;
    m_role_description_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIExportSdtmDatasetVariablesRow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportSdtmDatasetVariablesRow::fromJsonObject(QJsonObject json) {

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;

    m_variable_order_isValid = ::OpenAPI::fromJsonValue(m_variable_order, json[QString("Variable Order")]);
    m_variable_order_isSet = !json[QString("Variable Order")].isNull() && m_variable_order_isValid;

    m_r_class_isValid = ::OpenAPI::fromJsonValue(m_r_class, json[QString("Class")]);
    m_r_class_isSet = !json[QString("Class")].isNull() && m_r_class_isValid;

    m_dataset_name_isValid = ::OpenAPI::fromJsonValue(m_dataset_name, json[QString("Dataset Name")]);
    m_dataset_name_isSet = !json[QString("Dataset Name")].isNull() && m_dataset_name_isValid;

    m_variable_name_isValid = ::OpenAPI::fromJsonValue(m_variable_name, json[QString("Variable Name")]);
    m_variable_name_isSet = !json[QString("Variable Name")].isNull() && m_variable_name_isValid;

    m_variable_label_isValid = ::OpenAPI::fromJsonValue(m_variable_label, json[QString("Variable Label")]);
    m_variable_label_isSet = !json[QString("Variable Label")].isNull() && m_variable_label_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_controlled_terms_codelist_or_format_isValid = ::OpenAPI::fromJsonValue(m_controlled_terms_codelist_or_format, json[QString("Controlled Terms, Codelist or Format")]);
    m_controlled_terms_codelist_or_format_isSet = !json[QString("Controlled Terms, Codelist or Format")].isNull() && m_controlled_terms_codelist_or_format_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_role_description_isValid = ::OpenAPI::fromJsonValue(m_role_description, json[QString("Role Description")]);
    m_role_description_isSet = !json[QString("Role Description")].isNull() && m_role_description_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;
}

QString OAIExportSdtmDatasetVariablesRow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportSdtmDatasetVariablesRow::asJsonObject() const {
    QJsonObject obj;
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_variable_order_isSet) {
        obj.insert(QString("Variable Order"), ::OpenAPI::toJsonValue(m_variable_order));
    }
    if (m_r_class_isSet) {
        obj.insert(QString("Class"), ::OpenAPI::toJsonValue(m_r_class));
    }
    if (m_dataset_name_isSet) {
        obj.insert(QString("Dataset Name"), ::OpenAPI::toJsonValue(m_dataset_name));
    }
    if (m_variable_name_isSet) {
        obj.insert(QString("Variable Name"), ::OpenAPI::toJsonValue(m_variable_name));
    }
    if (m_variable_label_isSet) {
        obj.insert(QString("Variable Label"), ::OpenAPI::toJsonValue(m_variable_label));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_controlled_terms_codelist_or_format_isSet) {
        obj.insert(QString("Controlled Terms, Codelist or Format"), ::OpenAPI::toJsonValue(m_controlled_terms_codelist_or_format));
    }
    if (m_role_isSet) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_role_description_isSet) {
        obj.insert(QString("Role Description"), ::OpenAPI::toJsonValue(m_role_description));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

QString OAIExportSdtmDatasetVariablesRow::getVersion() const {
    return m_version;
}
void OAIExportSdtmDatasetVariablesRow::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIExportSdtmDatasetVariablesRow::is_version_Set() const{
    return m_version_isSet;
}

bool OAIExportSdtmDatasetVariablesRow::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIExportSdtmDatasetVariablesRow::getVariableOrder() const {
    return m_variable_order;
}
void OAIExportSdtmDatasetVariablesRow::setVariableOrder(const QString &variable_order) {
    m_variable_order = variable_order;
    m_variable_order_isSet = true;
}

bool OAIExportSdtmDatasetVariablesRow::is_variable_order_Set() const{
    return m_variable_order_isSet;
}

bool OAIExportSdtmDatasetVariablesRow::is_variable_order_Valid() const{
    return m_variable_order_isValid;
}

QString OAIExportSdtmDatasetVariablesRow::getRClass() const {
    return m_r_class;
}
void OAIExportSdtmDatasetVariablesRow::setRClass(const QString &r_class) {
    m_r_class = r_class;
    m_r_class_isSet = true;
}

bool OAIExportSdtmDatasetVariablesRow::is_r_class_Set() const{
    return m_r_class_isSet;
}

bool OAIExportSdtmDatasetVariablesRow::is_r_class_Valid() const{
    return m_r_class_isValid;
}

QString OAIExportSdtmDatasetVariablesRow::getDatasetName() const {
    return m_dataset_name;
}
void OAIExportSdtmDatasetVariablesRow::setDatasetName(const QString &dataset_name) {
    m_dataset_name = dataset_name;
    m_dataset_name_isSet = true;
}

bool OAIExportSdtmDatasetVariablesRow::is_dataset_name_Set() const{
    return m_dataset_name_isSet;
}

bool OAIExportSdtmDatasetVariablesRow::is_dataset_name_Valid() const{
    return m_dataset_name_isValid;
}

QString OAIExportSdtmDatasetVariablesRow::getVariableName() const {
    return m_variable_name;
}
void OAIExportSdtmDatasetVariablesRow::setVariableName(const QString &variable_name) {
    m_variable_name = variable_name;
    m_variable_name_isSet = true;
}

bool OAIExportSdtmDatasetVariablesRow::is_variable_name_Set() const{
    return m_variable_name_isSet;
}

bool OAIExportSdtmDatasetVariablesRow::is_variable_name_Valid() const{
    return m_variable_name_isValid;
}

QString OAIExportSdtmDatasetVariablesRow::getVariableLabel() const {
    return m_variable_label;
}
void OAIExportSdtmDatasetVariablesRow::setVariableLabel(const QString &variable_label) {
    m_variable_label = variable_label;
    m_variable_label_isSet = true;
}

bool OAIExportSdtmDatasetVariablesRow::is_variable_label_Set() const{
    return m_variable_label_isSet;
}

bool OAIExportSdtmDatasetVariablesRow::is_variable_label_Valid() const{
    return m_variable_label_isValid;
}

QString OAIExportSdtmDatasetVariablesRow::getType() const {
    return m_type;
}
void OAIExportSdtmDatasetVariablesRow::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIExportSdtmDatasetVariablesRow::is_type_Set() const{
    return m_type_isSet;
}

bool OAIExportSdtmDatasetVariablesRow::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIExportSdtmDatasetVariablesRow::getControlledTermsCodelistOrFormat() const {
    return m_controlled_terms_codelist_or_format;
}
void OAIExportSdtmDatasetVariablesRow::setControlledTermsCodelistOrFormat(const QString &controlled_terms_codelist_or_format) {
    m_controlled_terms_codelist_or_format = controlled_terms_codelist_or_format;
    m_controlled_terms_codelist_or_format_isSet = true;
}

bool OAIExportSdtmDatasetVariablesRow::is_controlled_terms_codelist_or_format_Set() const{
    return m_controlled_terms_codelist_or_format_isSet;
}

bool OAIExportSdtmDatasetVariablesRow::is_controlled_terms_codelist_or_format_Valid() const{
    return m_controlled_terms_codelist_or_format_isValid;
}

QString OAIExportSdtmDatasetVariablesRow::getRole() const {
    return m_role;
}
void OAIExportSdtmDatasetVariablesRow::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIExportSdtmDatasetVariablesRow::is_role_Set() const{
    return m_role_isSet;
}

bool OAIExportSdtmDatasetVariablesRow::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIExportSdtmDatasetVariablesRow::getRoleDescription() const {
    return m_role_description;
}
void OAIExportSdtmDatasetVariablesRow::setRoleDescription(const QString &role_description) {
    m_role_description = role_description;
    m_role_description_isSet = true;
}

bool OAIExportSdtmDatasetVariablesRow::is_role_description_Set() const{
    return m_role_description_isSet;
}

bool OAIExportSdtmDatasetVariablesRow::is_role_description_Valid() const{
    return m_role_description_isValid;
}

QString OAIExportSdtmDatasetVariablesRow::getDescription() const {
    return m_description;
}
void OAIExportSdtmDatasetVariablesRow::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIExportSdtmDatasetVariablesRow::is_description_Set() const{
    return m_description_isSet;
}

bool OAIExportSdtmDatasetVariablesRow::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIExportSdtmDatasetVariablesRow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_controlled_terms_codelist_or_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportSdtmDatasetVariablesRow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI

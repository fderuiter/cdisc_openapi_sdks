extends ApiBee
class_name SDTMImplementationGuideSDTMIGApi

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, © Public Domain, 2022

# API SDTMImplementationGuideSDTMIGApi
# Instantiate this object and use it to make requests to the API.

func _bzz_get_api_name() -> String:
	return "SDTMImplementationGuideSDTMIGApi"


# Operation mdrRootSdtmigDatasetsDatasetVariablesVarGet → GET /mdr/root/sdtmig/datasets/{dataset}/variables/{var}
#
# Get Root SDTMIG Dataset Variable
func mdr_root_sdtmig_datasets_dataset_variables_var_get(
	# dataset: String = ""   Eg: DM
	# SDTMIG Dataset Identifier
	dataset: String,
	# some_var: String = ""   Eg: SUBJID
	# SDTMIG Variable Identifier
	some_var: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/root/sdtmig/datasets/{dataset}/variables/{var}".replace("{" + "dataset" + "}", _bzz_urlize_path_param(dataset)).replace("{" + "var" + "}", _bzz_urlize_path_param(some_var))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = RootSdtmigDatasetVariable.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_root_sdtmig_datasets_dataset_variables_var_get_threaded(
	# dataset: String = ""   Eg: DM
	# SDTMIG Dataset Identifier
	dataset: String,
	# some_var: String = ""   Eg: SUBJID
	# SDTMIG Variable Identifier
	some_var: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_root_sdtmig_datasets_dataset_variables_var_get")
	bzz_callable.bind(
		dataset,
		some_var,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrSdtmigVersionClassesClassDatasetsGet → GET /mdr/sdtmig/{version}/classes/{class}/datasets
#
# Get SDTMIG Class Dataset List
func mdr_sdtmig_version_classes_class_datasets_get(
	# version: String = ""   Eg: 3-3
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: Findings
	# SDTMIG Class Identifier
	some_class: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/sdtmig/{version}/classes/{class}/datasets".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "class" + "}", _bzz_urlize_path_param(some_class))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = SdtmigClassDatasets.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_sdtmig_version_classes_class_datasets_get_threaded(
	# version: String = ""   Eg: 3-3
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: Findings
	# SDTMIG Class Identifier
	some_class: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_sdtmig_version_classes_class_datasets_get")
	bzz_callable.bind(
		version,
		some_class,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrSdtmigVersionClassesClassGet → GET /mdr/sdtmig/{version}/classes/{class}
#
# Get SDTMIG Class
func mdr_sdtmig_version_classes_class_get(
	# version: String = ""   Eg: 3-3
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: Findings
	# SDTMIG Class Identifier
	some_class: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/sdtmig/{version}/classes/{class}".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "class" + "}", _bzz_urlize_path_param(some_class))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = SdtmigClass.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_sdtmig_version_classes_class_get_threaded(
	# version: String = ""   Eg: 3-3
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: Findings
	# SDTMIG Class Identifier
	some_class: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_sdtmig_version_classes_class_get")
	bzz_callable.bind(
		version,
		some_class,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrSdtmigVersionClassesGet → GET /mdr/sdtmig/{version}/classes
#
# Get SDTMIG Class List
func mdr_sdtmig_version_classes_get(
	# version: String = ""   Eg: 3-3
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/sdtmig/{version}/classes".replace("{" + "version" + "}", _bzz_urlize_path_param(version))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = SdtmigClasses.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_sdtmig_version_classes_get_threaded(
	# version: String = ""   Eg: 3-3
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_sdtmig_version_classes_get")
	bzz_callable.bind(
		version,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrSdtmigVersionDatasetsDatasetGet → GET /mdr/sdtmig/{version}/datasets/{dataset}
#
# Get SDTMIG Dataset
func mdr_sdtmig_version_datasets_dataset_get(
	# version: String = ""   Eg: 3-3
	# CDISC Library Product Version
	version: String,
	# dataset: String = ""   Eg: LB
	# SDTMIG Dataset Identifier
	dataset: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/sdtmig/{version}/datasets/{dataset}".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "dataset" + "}", _bzz_urlize_path_param(dataset))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = SdtmigDataset.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_sdtmig_version_datasets_dataset_get_threaded(
	# version: String = ""   Eg: 3-3
	# CDISC Library Product Version
	version: String,
	# dataset: String = ""   Eg: LB
	# SDTMIG Dataset Identifier
	dataset: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_sdtmig_version_datasets_dataset_get")
	bzz_callable.bind(
		version,
		dataset,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrSdtmigVersionDatasetsDatasetVariablesGet → GET /mdr/sdtmig/{version}/datasets/{dataset}/variables
#
# Get SDTMIG Dataset Variable List
func mdr_sdtmig_version_datasets_dataset_variables_get(
	# version: String = ""   Eg: 3-3
	# CDISC Library Product Version
	version: String,
	# dataset: String = ""   Eg: LB
	# SDTMIG Dataset Identifier
	dataset: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/sdtmig/{version}/datasets/{dataset}/variables".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "dataset" + "}", _bzz_urlize_path_param(dataset))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = SdtmigDatasetVariables.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_sdtmig_version_datasets_dataset_variables_get_threaded(
	# version: String = ""   Eg: 3-3
	# CDISC Library Product Version
	version: String,
	# dataset: String = ""   Eg: LB
	# SDTMIG Dataset Identifier
	dataset: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_sdtmig_version_datasets_dataset_variables_get")
	bzz_callable.bind(
		version,
		dataset,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrSdtmigVersionDatasetsDatasetVariablesVarGet → GET /mdr/sdtmig/{version}/datasets/{dataset}/variables/{var}
#
# Get SDTMIG Dataset Variable
func mdr_sdtmig_version_datasets_dataset_variables_var_get(
	# version: String = ""   Eg: 3-3
	# CDISC Library Product Version
	version: String,
	# dataset: String = ""   Eg: LB
	# SDTMIG Dataset Identifier
	dataset: String,
	# some_var: String = ""   Eg: LBDTC
	# SDTMIG Variable Identifier
	some_var: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/sdtmig/{version}/datasets/{dataset}/variables/{var}".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "dataset" + "}", _bzz_urlize_path_param(dataset)).replace("{" + "var" + "}", _bzz_urlize_path_param(some_var))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = SdtmigDatasetVariable.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_sdtmig_version_datasets_dataset_variables_var_get_threaded(
	# version: String = ""   Eg: 3-3
	# CDISC Library Product Version
	version: String,
	# dataset: String = ""   Eg: LB
	# SDTMIG Dataset Identifier
	dataset: String,
	# some_var: String = ""   Eg: LBDTC
	# SDTMIG Variable Identifier
	some_var: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_sdtmig_version_datasets_dataset_variables_var_get")
	bzz_callable.bind(
		version,
		dataset,
		some_var,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrSdtmigVersionDatasetsGet → GET /mdr/sdtmig/{version}/datasets
#
# Get SDTMIG Dataset List
func mdr_sdtmig_version_datasets_get(
	# version: String = ""   Eg: 3-3
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/sdtmig/{version}/datasets".replace("{" + "version" + "}", _bzz_urlize_path_param(version))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml', 'text/csv']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = SdtmigDatasets.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_sdtmig_version_datasets_get_threaded(
	# version: String = ""   Eg: 3-3
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_sdtmig_version_datasets_get")
	bzz_callable.bind(
		version,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrSdtmigVersionGet → GET /mdr/sdtmig/{version}
#
# Get SDTMIG product
func mdr_sdtmig_version_get(
	# version: String = ""   Eg: 3-3
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/sdtmig/{version}".replace("{" + "version" + "}", _bzz_urlize_path_param(version))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = SdtmigProduct.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_sdtmig_version_get_threaded(
	# version: String = ""   Eg: 3-3
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_sdtmig_version_get")
	bzz_callable.bind(
		version,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread



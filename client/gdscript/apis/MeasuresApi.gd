extends ApiBee
class_name MeasuresApi

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, © Public Domain, 2022

# API MeasuresApi
# Instantiate this object and use it to make requests to the API.

func _bzz_get_api_name() -> String:
	return "MeasuresApi"


# Operation mdrQrsMeasureVersionGet → GET /mdr/qrs/{measure}/{version}
#
# Get QRS Product
func mdr_qrs_measure_version_get(
	# measure: String = ""   Eg: AIMS1
	# QRS Measure Identifier
	measure: String,
	# version: String = ""   Eg: 1-0
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/qrs/{measure}/{version}".replace("{" + "measure" + "}", _bzz_urlize_path_param(measure)).replace("{" + "version" + "}", _bzz_urlize_path_param(version))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = QrsProduct.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_qrs_measure_version_get_threaded(
	# measure: String = ""   Eg: AIMS1
	# QRS Measure Identifier
	measure: String,
	# version: String = ""   Eg: 1-0
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_qrs_measure_version_get")
	bzz_callable.bind(
		measure,
		version,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrQrsMeasureVersionItemsGet → GET /mdr/qrs/{measure}/{version}/items
#
# Get QRS Item List
func mdr_qrs_measure_version_items_get(
	# measure: String = ""   Eg: AIMS1
	# QRS Measure Identifier
	measure: String,
	# version: String = ""   Eg: 1-0
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/qrs/{measure}/{version}/items".replace("{" + "measure" + "}", _bzz_urlize_path_param(measure)).replace("{" + "version" + "}", _bzz_urlize_path_param(version))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = QrsItems.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_qrs_measure_version_items_get_threaded(
	# measure: String = ""   Eg: AIMS1
	# QRS Measure Identifier
	measure: String,
	# version: String = ""   Eg: 1-0
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_qrs_measure_version_items_get")
	bzz_callable.bind(
		measure,
		version,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrQrsMeasureVersionItemsItemGet → GET /mdr/qrs/{measure}/{version}/items/{item}
#
# Get QRS Item
func mdr_qrs_measure_version_items_item_get(
	# measure: String = ""   Eg: AIMS1
	# QRS Measure Identifier
	measure: String,
	# version: String = ""   Eg: 1-0
	# CDISC Library Product Version
	version: String,
	# item: String = ""   Eg: AIMS01.001
	# QRS Measure Item Identifier
	item: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/qrs/{measure}/{version}/items/{item}".replace("{" + "measure" + "}", _bzz_urlize_path_param(measure)).replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "item" + "}", _bzz_urlize_path_param(item))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = QrsItem.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_qrs_measure_version_items_item_get_threaded(
	# measure: String = ""   Eg: AIMS1
	# QRS Measure Identifier
	measure: String,
	# version: String = ""   Eg: 1-0
	# CDISC Library Product Version
	version: String,
	# item: String = ""   Eg: AIMS01.001
	# QRS Measure Item Identifier
	item: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_qrs_measure_version_items_item_get")
	bzz_callable.bind(
		measure,
		version,
		item,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrQrsMeasureVersionResponsegroupsGet → GET /mdr/qrs/{measure}/{version}/responsegroups
#
# Get QRS Response Group List
func mdr_qrs_measure_version_responsegroups_get(
	# measure: String = ""   Eg: AIMS1
	# QRS Measure Identifier
	measure: String,
	# version: String = ""   Eg: 1-0
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/qrs/{measure}/{version}/responsegroups".replace("{" + "measure" + "}", _bzz_urlize_path_param(measure)).replace("{" + "version" + "}", _bzz_urlize_path_param(version))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = QrsResponsegroups.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_qrs_measure_version_responsegroups_get_threaded(
	# measure: String = ""   Eg: AIMS1
	# QRS Measure Identifier
	measure: String,
	# version: String = ""   Eg: 1-0
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_qrs_measure_version_responsegroups_get")
	bzz_callable.bind(
		measure,
		version,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrQrsMeasureVersionResponsegroupsResponsegroupGet → GET /mdr/qrs/{measure}/{version}/responsegroups/{responsegroup}
#
# Get QRS Response Group
func mdr_qrs_measure_version_responsegroups_responsegroup_get(
	# measure: String = ""   Eg: AIMS1
	# QRS Measure Identifier
	measure: String,
	# version: String = ""   Eg: 1-0
	# CDISC Library Product Version
	version: String,
	# responsegroup: String = ""   Eg: AIMS1.11to12
	# QRS Measure's Response Group Identifier
	responsegroup: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/qrs/{measure}/{version}/responsegroups/{responsegroup}".replace("{" + "measure" + "}", _bzz_urlize_path_param(measure)).replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "responsegroup" + "}", _bzz_urlize_path_param(responsegroup))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = QrsResponsegroup.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_qrs_measure_version_responsegroups_responsegroup_get_threaded(
	# measure: String = ""   Eg: AIMS1
	# QRS Measure Identifier
	measure: String,
	# version: String = ""   Eg: 1-0
	# CDISC Library Product Version
	version: String,
	# responsegroup: String = ""   Eg: AIMS1.11to12
	# QRS Measure's Response Group Identifier
	responsegroup: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_qrs_measure_version_responsegroups_responsegroup_get")
	bzz_callable.bind(
		measure,
		version,
		responsegroup,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread



extends ApiBee
class_name ClinicalDataAcquisitionStandardsHarmonizationCDASHApi

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, © Public Domain, 2022

# API ClinicalDataAcquisitionStandardsHarmonizationCDASHApi
# Instantiate this object and use it to make requests to the API.

func _bzz_get_api_name() -> String:
	return "ClinicalDataAcquisitionStandardsHarmonizationCDASHApi"


# Operation mdrCdashVersionClassesClassDomainsGet → GET /mdr/cdash/{version}/classes/{class}/domains
#
# Get CDASH Class Domain List
func mdr_cdash_version_classes_class_domains_get(
	# version: String = ""   Eg: 1-1
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: SpecialPurpose
	# CDASH Class Identifier
	some_class: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/cdash/{version}/classes/{class}/domains".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "class" + "}", _bzz_urlize_path_param(some_class))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = CdashClassDomains.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_cdash_version_classes_class_domains_get_threaded(
	# version: String = ""   Eg: 1-1
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: SpecialPurpose
	# CDASH Class Identifier
	some_class: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_cdash_version_classes_class_domains_get")
	bzz_callable.bind(
		version,
		some_class,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrCdashVersionClassesClassFieldsFieldGet → GET /mdr/cdash/{version}/classes/{class}/fields/{field}
#
# Get CDASH Class Field
func mdr_cdash_version_classes_class_fields_field_get(
	# version: String = ""   Eg: 1-1
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: Timing
	# CDASH Class Identifier
	some_class: String,
	# field: String = ""   Eg: --DAT
	# CDASH Field Identifier
	field: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/cdash/{version}/classes/{class}/fields/{field}".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "class" + "}", _bzz_urlize_path_param(some_class)).replace("{" + "field" + "}", _bzz_urlize_path_param(field))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = CdashClassField.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_cdash_version_classes_class_fields_field_get_threaded(
	# version: String = ""   Eg: 1-1
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: Timing
	# CDASH Class Identifier
	some_class: String,
	# field: String = ""   Eg: --DAT
	# CDASH Field Identifier
	field: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_cdash_version_classes_class_fields_field_get")
	bzz_callable.bind(
		version,
		some_class,
		field,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrCdashVersionClassesClassGet → GET /mdr/cdash/{version}/classes/{class}
#
# Get CDASH Class
func mdr_cdash_version_classes_class_get(
	# version: String = ""   Eg: 1-1
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: Timing
	# CDASH Class Identifier
	some_class: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/cdash/{version}/classes/{class}".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "class" + "}", _bzz_urlize_path_param(some_class))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = CdashClass.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_cdash_version_classes_class_get_threaded(
	# version: String = ""   Eg: 1-1
	# CDISC Library Product Version
	version: String,
	# some_class: String = ""   Eg: Timing
	# CDASH Class Identifier
	some_class: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_cdash_version_classes_class_get")
	bzz_callable.bind(
		version,
		some_class,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrCdashVersionClassesGet → GET /mdr/cdash/{version}/classes
#
# Get CDASH Class List
func mdr_cdash_version_classes_get(
	# version: String = ""   Eg: 1-1
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/cdash/{version}/classes".replace("{" + "version" + "}", _bzz_urlize_path_param(version))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = CdashProductClasses.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_cdash_version_classes_get_threaded(
	# version: String = ""   Eg: 1-1
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_cdash_version_classes_get")
	bzz_callable.bind(
		version,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrCdashVersionDomainsDomainFieldsFieldGet → GET /mdr/cdash/{version}/domains/{domain}/fields/{field}
#
# Get CDASH Domain Field
func mdr_cdash_version_domains_domain_fields_field_get(
	# version: String = ""   Eg: 1-1
	# CDISC Library Product Version
	version: String,
	# domain: String = ""   Eg: DM
	# CDASH Domain Identifier
	domain: String,
	# field: String = ""   Eg: AGE
	# CDASH Field Identifier
	field: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/cdash/{version}/domains/{domain}/fields/{field}".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "domain" + "}", _bzz_urlize_path_param(domain)).replace("{" + "field" + "}", _bzz_urlize_path_param(field))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = CdashDomainField.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_cdash_version_domains_domain_fields_field_get_threaded(
	# version: String = ""   Eg: 1-1
	# CDISC Library Product Version
	version: String,
	# domain: String = ""   Eg: DM
	# CDASH Domain Identifier
	domain: String,
	# field: String = ""   Eg: AGE
	# CDASH Field Identifier
	field: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_cdash_version_domains_domain_fields_field_get")
	bzz_callable.bind(
		version,
		domain,
		field,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrCdashVersionDomainsDomainFieldsGet → GET /mdr/cdash/{version}/domains/{domain}/fields
#
# Get CDASH Domain Field List
func mdr_cdash_version_domains_domain_fields_get(
	# version: String = ""   Eg: 1-1
	# CDISC Library Product Version
	version: String,
	# domain: String = ""   Eg: DM
	# CDASH Domain Identifier
	domain: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/cdash/{version}/domains/{domain}/fields".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "domain" + "}", _bzz_urlize_path_param(domain))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = CdashDomainFields.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_cdash_version_domains_domain_fields_get_threaded(
	# version: String = ""   Eg: 1-1
	# CDISC Library Product Version
	version: String,
	# domain: String = ""   Eg: DM
	# CDASH Domain Identifier
	domain: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_cdash_version_domains_domain_fields_get")
	bzz_callable.bind(
		version,
		domain,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrCdashVersionDomainsDomainGet → GET /mdr/cdash/{version}/domains/{domain}
#
# Get CDASH Domain
func mdr_cdash_version_domains_domain_get(
	# version: String = ""   Eg: 1-1
	# CDISC Library Product Version
	version: String,
	# domain: String = ""   Eg: DM
	# CDASH Domain Identifier
	domain: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/cdash/{version}/domains/{domain}".replace("{" + "version" + "}", _bzz_urlize_path_param(version)).replace("{" + "domain" + "}", _bzz_urlize_path_param(domain))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = CdashDomain.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_cdash_version_domains_domain_get_threaded(
	# version: String = ""   Eg: 1-1
	# CDISC Library Product Version
	version: String,
	# domain: String = ""   Eg: DM
	# CDASH Domain Identifier
	domain: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_cdash_version_domains_domain_get")
	bzz_callable.bind(
		version,
		domain,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrCdashVersionDomainsGet → GET /mdr/cdash/{version}/domains
#
# Get CDASH Domain List
func mdr_cdash_version_domains_get(
	# version: String = ""   Eg: 1-1
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/cdash/{version}/domains".replace("{" + "version" + "}", _bzz_urlize_path_param(version))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = CdashProductDomains.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_cdash_version_domains_get_threaded(
	# version: String = ""   Eg: 1-1
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_cdash_version_domains_get")
	bzz_callable.bind(
		version,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrCdashVersionGet → GET /mdr/cdash/{version}
#
# Get CDASH Product
func mdr_cdash_version_get(
	# version: String = ""   Eg: 1-1
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/cdash/{version}".replace("{" + "version" + "}", _bzz_urlize_path_param(version))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = CdashProduct.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_cdash_version_get_threaded(
	# version: String = ""   Eg: 1-1
	# CDISC Library Product Version
	version: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_cdash_version_get")
	bzz_callable.bind(
		version,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrRootCdashClassesClassFieldsFieldGet → GET /mdr/root/cdash/classes/{class}/fields/{field}
#
# Get Root CDASH Class Field
func mdr_root_cdash_classes_class_fields_field_get(
	# some_class: String = ""   Eg: Timing
	# CDASH Class Identifier
	some_class: String,
	# field: String = ""   Eg: --DAT
	# CDASH Field Identifier
	field: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/root/cdash/classes/{class}/fields/{field}".replace("{" + "class" + "}", _bzz_urlize_path_param(some_class)).replace("{" + "field" + "}", _bzz_urlize_path_param(field))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = RootCdashClassField.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_root_cdash_classes_class_fields_field_get_threaded(
	# some_class: String = ""   Eg: Timing
	# CDASH Class Identifier
	some_class: String,
	# field: String = ""   Eg: --DAT
	# CDASH Field Identifier
	field: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_root_cdash_classes_class_fields_field_get")
	bzz_callable.bind(
		some_class,
		field,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


# Operation mdrRootCdashDomainsDomainFieldsFieldGet → GET /mdr/root/cdash/domains/{domain}/fields/{field}
#
# Get Root CDASH Domain Field
func mdr_root_cdash_domains_domain_fields_field_get(
	# domain: String = ""   Eg: DM
	# CDASH Domain Identifier
	domain: String,
	# field: String = ""   Eg: AGE
	# CDASH Field Identifier
	field: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/mdr/root/cdash/domains/{domain}/fields/{field}".replace("{" + "domain" + "}", _bzz_urlize_path_param(domain)).replace("{" + "field" + "}", _bzz_urlize_path_param(field))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json', 'application/xml']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = RootCdashDomainField.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func mdr_root_cdash_domains_domain_fields_field_get_threaded(
	# domain: String = ""   Eg: DM
	# CDASH Domain Identifier
	domain: String,
	# field: String = ""   Eg: AGE
	# CDASH Field Identifier
	field: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "mdr_root_cdash_domains_domain_fields_field_get")
	bzz_callable.bind(
		domain,
		field,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread



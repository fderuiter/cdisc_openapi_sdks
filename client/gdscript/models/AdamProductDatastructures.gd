extends Resource
class_name AdamProductDatastructures

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# AdamProductDatastructures Model


# Required: False
# Example: ADaMIG v1.1
# isArray: false
@export var name: String = "":
	set(value):
		__name__was__set = true
		name = value
var __name__was__set := false

# Required: False
# Example: Analysis Data Model Implementation Guide Version 1.1
# isArray: false
@export var some_label: String = "":
	set(value):
		__some_label__was__set = true
		some_label = value
var __some_label__was__set := false

# Required: False
# Example: This document comprises the Clinical Data Interchange Standards Consortium (CDISC) Version 1.1 of the Analysis Data Model Implementation Guide (ADaMIG), which has been prepared by the Analysis Data Model (ADaM) Team of CDISC. The ADaMIG specifies ADaM standard dataset structures and variables, including naming conventions. It also specifies standard solutions to implementation issues.

The ADaMIG must be used in close concert with the current version of the document titled \"Analysis Data Model (ADaM)\" which is available for download at http://www.cdisc.org/adam. That document explains the purpose of the Analysis Data Model. It describes fundamental principles that apply to all analysis datasets, with the driving principle being that the design of ADaM datasets and associated metadata facilitate explicit communication of the content of, input to, and purpose of submitted ADaM datasets. The Analysis Data Model supports efficient generation, replication, and review of analysis results.
# isArray: false
@export var description: String = "":
	set(value):
		__description__was__set = true
		description = value
var __description__was__set := false

# Required: False
# Example: Prepared by the CDISC Analysis Data Model Team
# isArray: false
@export var source: String = "":
	set(value):
		__source__was__set = true
		source = value
var __source__was__set := false

# Required: False
# Example: 2016-02-12
# isArray: false
@export var effectiveDate: String = "":
	set(value):
		__effectiveDate__was__set = true
		effectiveDate = value
var __effectiveDate__was__set := false

# Required: False
# Example: Final
# isArray: false
@export var registrationStatus: String = "":
	set(value):
		__registrationStatus__was__set = true
		registrationStatus = value
var __registrationStatus__was__set := false

# Required: False
# Example: 1.1
# isArray: false
@export var version: String = "":
	set(value):
		__version__was__set = true
		version = value
var __version__was__set := false

# Required: False
# isArray: false
@export var Underscorelinks: AdamProductDatastructuresLinks:
	set(value):
		__Underscorelinks__was__set = true
		Underscorelinks = value
var __Underscorelinks__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__name__was__set:
		bzz_dictionary["name"] = self.name
	if self.__some_label__was__set:
		bzz_dictionary["some_label"] = self.some_label
	if self.__description__was__set:
		bzz_dictionary["description"] = self.description
	if self.__source__was__set:
		bzz_dictionary["source"] = self.source
	if self.__effectiveDate__was__set:
		bzz_dictionary["effectiveDate"] = self.effectiveDate
	if self.__registrationStatus__was__set:
		bzz_dictionary["registrationStatus"] = self.registrationStatus
	if self.__version__was__set:
		bzz_dictionary["version"] = self.version
	if self.__Underscorelinks__was__set:
		bzz_dictionary["Underscorelinks"] = self.Underscorelinks
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("name"):
		me.name = from_dict["name"]
	if from_dict.has("some_label"):
		me.some_label = from_dict["some_label"]
	if from_dict.has("description"):
		me.description = from_dict["description"]
	if from_dict.has("source"):
		me.source = from_dict["source"]
	if from_dict.has("effectiveDate"):
		me.effectiveDate = from_dict["effectiveDate"]
	if from_dict.has("registrationStatus"):
		me.registrationStatus = from_dict["registrationStatus"]
	if from_dict.has("version"):
		me.version = from_dict["version"]
	if from_dict.has("Underscorelinks"):
		me.Underscorelinks = AdamProductDatastructuresLinks.bzz_denormalize_single(from_dict["Underscorelinks"])
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes


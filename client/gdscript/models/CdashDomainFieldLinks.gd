extends Resource
class_name CdashDomainFieldLinks

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# CdashDomainFieldLinks Model


# Required: False
# isArray: false
@export var some_self: CdashDomainFieldRef:
	set(value):
		__some_self__was__set = true
		some_self = value
var __some_self__was__set := false

# Required: False
# isArray: true
@export var codelist: Array:
	set(value):
		__codelist__was__set = true
		codelist = value
var __codelist__was__set := false

# Required: False
# isArray: false
@export var parentProduct: CdashProductRef:
	set(value):
		__parentProduct__was__set = true
		parentProduct = value
var __parentProduct__was__set := false

# Required: False
# isArray: false
@export var parentClass: CdashClassRef:
	set(value):
		__parentClass__was__set = true
		parentClass = value
var __parentClass__was__set := false

# Required: False
# isArray: false
@export var parentDomain: CdashDomainRef:
	set(value):
		__parentDomain__was__set = true
		parentDomain = value
var __parentDomain__was__set := false

# Required: False
# isArray: false
@export var rootItem: RootCdashDomainFieldRef:
	set(value):
		__rootItem__was__set = true
		rootItem = value
var __rootItem__was__set := false

# Required: False
# isArray: false
@export var priorVersion: CdashDomainFieldRef:
	set(value):
		__priorVersion__was__set = true
		priorVersion = value
var __priorVersion__was__set := false

# Required: False
# isArray: true
@export var sdtmDatasetMappingTargets: Array:
	set(value):
		__sdtmDatasetMappingTargets__was__set = true
		sdtmDatasetMappingTargets = value
var __sdtmDatasetMappingTargets__was__set := false

# Required: False
# isArray: true
@export var sdtmigDatasetMappingTargets: Array:
	set(value):
		__sdtmigDatasetMappingTargets__was__set = true
		sdtmigDatasetMappingTargets = value
var __sdtmigDatasetMappingTargets__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__some_self__was__set:
		bzz_dictionary["some_self"] = self.some_self
	if self.__codelist__was__set:
		bzz_dictionary["codelist"] = self.codelist
	if self.__parentProduct__was__set:
		bzz_dictionary["parentProduct"] = self.parentProduct
	if self.__parentClass__was__set:
		bzz_dictionary["parentClass"] = self.parentClass
	if self.__parentDomain__was__set:
		bzz_dictionary["parentDomain"] = self.parentDomain
	if self.__rootItem__was__set:
		bzz_dictionary["rootItem"] = self.rootItem
	if self.__priorVersion__was__set:
		bzz_dictionary["priorVersion"] = self.priorVersion
	if self.__sdtmDatasetMappingTargets__was__set:
		bzz_dictionary["sdtmDatasetMappingTargets"] = self.sdtmDatasetMappingTargets
	if self.__sdtmigDatasetMappingTargets__was__set:
		bzz_dictionary["sdtmigDatasetMappingTargets"] = self.sdtmigDatasetMappingTargets
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("some_self"):
		me.some_self = CdashDomainFieldRef.bzz_denormalize_single(from_dict["some_self"])
	if from_dict.has("codelist"):
		me.codelist = RootCtCodelistRefElement.bzz_denormalize_multiple(from_dict["codelist"])
	if from_dict.has("parentProduct"):
		me.parentProduct = CdashProductRef.bzz_denormalize_single(from_dict["parentProduct"])
	if from_dict.has("parentClass"):
		me.parentClass = CdashClassRef.bzz_denormalize_single(from_dict["parentClass"])
	if from_dict.has("parentDomain"):
		me.parentDomain = CdashDomainRef.bzz_denormalize_single(from_dict["parentDomain"])
	if from_dict.has("rootItem"):
		me.rootItem = RootCdashDomainFieldRef.bzz_denormalize_single(from_dict["rootItem"])
	if from_dict.has("priorVersion"):
		me.priorVersion = CdashDomainFieldRef.bzz_denormalize_single(from_dict["priorVersion"])
	if from_dict.has("sdtmDatasetMappingTargets"):
		me.sdtmDatasetMappingTargets = SdtmDatasetVariableRefTarget.bzz_denormalize_multiple(from_dict["sdtmDatasetMappingTargets"])
	if from_dict.has("sdtmigDatasetMappingTargets"):
		me.sdtmigDatasetMappingTargets = SdtmigDatasetVariableRefTarget.bzz_denormalize_multiple(from_dict["sdtmigDatasetMappingTargets"])
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes


extends Resource
class_name ExportCtCodelist

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# ExportCtCodelist Model


# Required: False
# isArray: false
@export var Code: String = "":
	set(value):
		__Code__was__set = true
		Code = value
var __Code__was__set := false

# Required: False
# isArray: false
@export var Codelist Code: String = "":
	set(value):
		__Codelist Code__was__set = true
		Codelist Code = value
var __Codelist Code__was__set := false

# Required: False
# isArray: false
@export var Codelist Extensible Left_ParenthesisYesSlashNoRight_Parenthesis: String = "":
	set(value):
		__Codelist Extensible Left_ParenthesisYesSlashNoRight_Parenthesis__was__set = true
		Codelist Extensible Left_ParenthesisYesSlashNoRight_Parenthesis = value
var __Codelist Extensible Left_ParenthesisYesSlashNoRight_Parenthesis__was__set := false

# Required: False
# isArray: false
@export var Codelist Name: String = "":
	set(value):
		__Codelist Name__was__set = true
		Codelist Name = value
var __Codelist Name__was__set := false

# Required: False
# isArray: false
@export var CDISC Submission Value: String = "":
	set(value):
		__CDISC Submission Value__was__set = true
		CDISC Submission Value = value
var __CDISC Submission Value__was__set := false

# Required: False
# isArray: true
@export var CDISC SynonymLeft_ParenthesissRight_Parenthesis: Array:
	set(value):
		__CDISC SynonymLeft_ParenthesissRight_Parenthesis__was__set = true
		CDISC SynonymLeft_ParenthesissRight_Parenthesis = value
var __CDISC SynonymLeft_ParenthesissRight_Parenthesis__was__set := false

# Required: False
# isArray: false
@export var CDISC Definition: String = "":
	set(value):
		__CDISC Definition__was__set = true
		CDISC Definition = value
var __CDISC Definition__was__set := false

# Required: False
# isArray: false
@export var NCI Preferred Term: String = "":
	set(value):
		__NCI Preferred Term__was__set = true
		NCI Preferred Term = value
var __NCI Preferred Term__was__set := false

# Required: False
# isArray: false
@export var Standard and Date: String = "":
	set(value):
		__Standard and Date__was__set = true
		Standard and Date = value
var __Standard and Date__was__set := false

# Required: False
# isArray: true
@export var : Array:
	set(value):
		____was__set = true
		 = value
var ____was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__Code__was__set:
		bzz_dictionary["Code"] = self.Code
	if self.__Codelist Code__was__set:
		bzz_dictionary["Codelist Code"] = self.Codelist Code
	if self.__Codelist Extensible Left_ParenthesisYesSlashNoRight_Parenthesis__was__set:
		bzz_dictionary["Codelist Extensible Left_ParenthesisYesSlashNoRight_Parenthesis"] = self.Codelist Extensible Left_ParenthesisYesSlashNoRight_Parenthesis
	if self.__Codelist Name__was__set:
		bzz_dictionary["Codelist Name"] = self.Codelist Name
	if self.__CDISC Submission Value__was__set:
		bzz_dictionary["CDISC Submission Value"] = self.CDISC Submission Value
	if self.__CDISC SynonymLeft_ParenthesissRight_Parenthesis__was__set:
		bzz_dictionary["CDISC SynonymLeft_ParenthesissRight_Parenthesis"] = self.CDISC SynonymLeft_ParenthesissRight_Parenthesis
	if self.__CDISC Definition__was__set:
		bzz_dictionary["CDISC Definition"] = self.CDISC Definition
	if self.__NCI Preferred Term__was__set:
		bzz_dictionary["NCI Preferred Term"] = self.NCI Preferred Term
	if self.__Standard and Date__was__set:
		bzz_dictionary["Standard and Date"] = self.Standard and Date
	if self.____was__set:
		bzz_dictionary[""] = self.
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("Code"):
		me.Code = from_dict["Code"]
	if from_dict.has("Codelist Code"):
		me.Codelist Code = from_dict["Codelist Code"]
	if from_dict.has("Codelist Extensible Left_ParenthesisYesSlashNoRight_Parenthesis"):
		me.Codelist Extensible Left_ParenthesisYesSlashNoRight_Parenthesis = from_dict["Codelist Extensible Left_ParenthesisYesSlashNoRight_Parenthesis"]
	if from_dict.has("Codelist Name"):
		me.Codelist Name = from_dict["Codelist Name"]
	if from_dict.has("CDISC Submission Value"):
		me.CDISC Submission Value = from_dict["CDISC Submission Value"]
	if from_dict.has("CDISC SynonymLeft_ParenthesissRight_Parenthesis"):
		me.CDISC SynonymLeft_ParenthesissRight_Parenthesis = from_dict["CDISC SynonymLeft_ParenthesissRight_Parenthesis"]
	if from_dict.has("CDISC Definition"):
		me.CDISC Definition = from_dict["CDISC Definition"]
	if from_dict.has("NCI Preferred Term"):
		me.NCI Preferred Term = from_dict["NCI Preferred Term"]
	if from_dict.has("Standard and Date"):
		me.Standard and Date = from_dict["Standard and Date"]
	if from_dict.has(""):
		me. = ExportCtTerm.bzz_denormalize_multiple(from_dict[""])
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes


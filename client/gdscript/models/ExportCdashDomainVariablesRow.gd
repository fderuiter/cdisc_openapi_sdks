extends Resource
class_name ExportCdashDomainVariablesRow

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# ExportCdashDomainVariablesRow Model


# Required: False
# isArray: false
@export var Version: String = "":
	set(value):
		__Version__was__set = true
		Version = value
var __Version__was__set := false

# Required: False
# isArray: false
@export var Class: String = "":
	set(value):
		__Class__was__set = true
		Class = value
var __Class__was__set := false

# Required: False
# isArray: false
@export var Domain: String = "":
	set(value):
		__Domain__was__set = true
		Domain = value
var __Domain__was__set := false

# Required: False
# isArray: false
@export var Variable Order: String = "":
	set(value):
		__Variable Order__was__set = true
		Variable Order = value
var __Variable Order__was__set := false

# Required: False
# isArray: false
@export var CDASH Variable: String = "":
	set(value):
		__CDASH Variable__was__set = true
		CDASH Variable = value
var __CDASH Variable__was__set := false

# Required: False
# isArray: false
@export var CDASH Variable Label: String = "":
	set(value):
		__CDASH Variable Label__was__set = true
		CDASH Variable Label = value
var __CDASH Variable Label__was__set := false

# Required: False
# isArray: false
@export var DRAFT CDASH Definition: String = "":
	set(value):
		__DRAFT CDASH Definition__was__set = true
		DRAFT CDASH Definition = value
var __DRAFT CDASH Definition__was__set := false

# Required: False
# isArray: false
@export var Domain Specific: String = "":
	set(value):
		__Domain Specific__was__set = true
		Domain Specific = value
var __Domain Specific__was__set := false

# Required: False
# isArray: false
@export var Question Text: String = "":
	set(value):
		__Question Text__was__set = true
		Question Text = value
var __Question Text__was__set := false

# Required: False
# isArray: false
@export var Prompt: String = "":
	set(value):
		__Prompt__was__set = true
		Prompt = value
var __Prompt__was__set := false

# Required: False
# isArray: false
@export var Type: String = "":
	set(value):
		__Type__was__set = true
		Type = value
var __Type__was__set := false

# Required: False
# isArray: true
@export var SDTM Target: Array:
	set(value):
		__SDTM Target__was__set = true
		SDTM Target = value
var __SDTM Target__was__set := false

# Required: False
# isArray: false
@export var Mapping Instructions: String = "":
	set(value):
		__Mapping Instructions__was__set = true
		Mapping Instructions = value
var __Mapping Instructions__was__set := false

# Required: False
# isArray: false
@export var Controlled Terminology Codelist Name: String = "":
	set(value):
		__Controlled Terminology Codelist Name__was__set = true
		Controlled Terminology Codelist Name = value
var __Controlled Terminology Codelist Name__was__set := false

# Required: False
# isArray: false
@export var Implementation Notes: String = "":
	set(value):
		__Implementation Notes__was__set = true
		Implementation Notes = value
var __Implementation Notes__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__Version__was__set:
		bzz_dictionary["Version"] = self.Version
	if self.__Class__was__set:
		bzz_dictionary["Class"] = self.Class
	if self.__Domain__was__set:
		bzz_dictionary["Domain"] = self.Domain
	if self.__Variable Order__was__set:
		bzz_dictionary["Variable Order"] = self.Variable Order
	if self.__CDASH Variable__was__set:
		bzz_dictionary["CDASH Variable"] = self.CDASH Variable
	if self.__CDASH Variable Label__was__set:
		bzz_dictionary["CDASH Variable Label"] = self.CDASH Variable Label
	if self.__DRAFT CDASH Definition__was__set:
		bzz_dictionary["DRAFT CDASH Definition"] = self.DRAFT CDASH Definition
	if self.__Domain Specific__was__set:
		bzz_dictionary["Domain Specific"] = self.Domain Specific
	if self.__Question Text__was__set:
		bzz_dictionary["Question Text"] = self.Question Text
	if self.__Prompt__was__set:
		bzz_dictionary["Prompt"] = self.Prompt
	if self.__Type__was__set:
		bzz_dictionary["Type"] = self.Type
	if self.__SDTM Target__was__set:
		bzz_dictionary["SDTM Target"] = self.SDTM Target
	if self.__Mapping Instructions__was__set:
		bzz_dictionary["Mapping Instructions"] = self.Mapping Instructions
	if self.__Controlled Terminology Codelist Name__was__set:
		bzz_dictionary["Controlled Terminology Codelist Name"] = self.Controlled Terminology Codelist Name
	if self.__Implementation Notes__was__set:
		bzz_dictionary["Implementation Notes"] = self.Implementation Notes
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("Version"):
		me.Version = from_dict["Version"]
	if from_dict.has("Class"):
		me.Class = from_dict["Class"]
	if from_dict.has("Domain"):
		me.Domain = from_dict["Domain"]
	if from_dict.has("Variable Order"):
		me.Variable Order = from_dict["Variable Order"]
	if from_dict.has("CDASH Variable"):
		me.CDASH Variable = from_dict["CDASH Variable"]
	if from_dict.has("CDASH Variable Label"):
		me.CDASH Variable Label = from_dict["CDASH Variable Label"]
	if from_dict.has("DRAFT CDASH Definition"):
		me.DRAFT CDASH Definition = from_dict["DRAFT CDASH Definition"]
	if from_dict.has("Domain Specific"):
		me.Domain Specific = from_dict["Domain Specific"]
	if from_dict.has("Question Text"):
		me.Question Text = from_dict["Question Text"]
	if from_dict.has("Prompt"):
		me.Prompt = from_dict["Prompt"]
	if from_dict.has("Type"):
		me.Type = from_dict["Type"]
	if from_dict.has("SDTM Target"):
		me.SDTM Target = from_dict["SDTM Target"]
	if from_dict.has("Mapping Instructions"):
		me.Mapping Instructions = from_dict["Mapping Instructions"]
	if from_dict.has("Controlled Terminology Codelist Name"):
		me.Controlled Terminology Codelist Name = from_dict["Controlled Terminology Codelist Name"]
	if from_dict.has("Implementation Notes"):
		me.Implementation Notes = from_dict["Implementation Notes"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes


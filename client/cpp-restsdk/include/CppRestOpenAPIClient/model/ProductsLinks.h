/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ProductsLinks.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ProductsLinks_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ProductsLinks_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/ProductgroupTerminology.h"
#include "CppRestOpenAPIClient/model/ProductsRef.h"
#include "CppRestOpenAPIClient/model/ProductgroupDataTabulation.h"
#include "CppRestOpenAPIClient/model/ProductgroupDataAnalysis.h"
#include "CppRestOpenAPIClient/model/ProductgroupDataCollection.h"
#include "CppRestOpenAPIClient/model/ProductgroupQrs.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class ProductsRef;
class ProductgroupDataCollection;
class ProductgroupDataTabulation;
class ProductgroupDataAnalysis;
class ProductgroupTerminology;
class ProductgroupQrs;


class  ProductsLinks
    : public ModelBase
{
public:
    ProductsLinks();
    virtual ~ProductsLinks();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// ProductsLinks members


    std::shared_ptr<ProductsRef> getSelf() const;
    bool selfIsSet() const;
    void unsetSelf();
    void setSelf(const std::shared_ptr<ProductsRef>& value);

    std::shared_ptr<ProductgroupDataCollection> getDataCollection() const;
    bool dataCollectionIsSet() const;
    void unsetData_collection();
    void setDataCollection(const std::shared_ptr<ProductgroupDataCollection>& value);

    std::shared_ptr<ProductgroupDataTabulation> getDataTabulation() const;
    bool dataTabulationIsSet() const;
    void unsetData_tabulation();
    void setDataTabulation(const std::shared_ptr<ProductgroupDataTabulation>& value);

    std::shared_ptr<ProductgroupDataAnalysis> getDataAnalysis() const;
    bool dataAnalysisIsSet() const;
    void unsetData_analysis();
    void setDataAnalysis(const std::shared_ptr<ProductgroupDataAnalysis>& value);

    std::shared_ptr<ProductgroupTerminology> getTerminology() const;
    bool terminologyIsSet() const;
    void unsetTerminology();
    void setTerminology(const std::shared_ptr<ProductgroupTerminology>& value);

    std::shared_ptr<ProductgroupQrs> getMeasure() const;
    bool measureIsSet() const;
    void unsetMeasure();
    void setMeasure(const std::shared_ptr<ProductgroupQrs>& value);


protected:
    std::shared_ptr<ProductsRef> m_Self;
    bool m_SelfIsSet;

    std::shared_ptr<ProductgroupDataCollection> m_Data_collection;
    bool m_Data_collectionIsSet;

    std::shared_ptr<ProductgroupDataTabulation> m_Data_tabulation;
    bool m_Data_tabulationIsSet;

    std::shared_ptr<ProductgroupDataAnalysis> m_Data_analysis;
    bool m_Data_analysisIsSet;

    std::shared_ptr<ProductgroupTerminology> m_Terminology;
    bool m_TerminologyIsSet;

    std::shared_ptr<ProductgroupQrs> m_Measure;
    bool m_MeasureIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ProductsLinks_H_ */

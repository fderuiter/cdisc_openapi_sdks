/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ExportCtCodelist.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ExportCtCodelist_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ExportCtCodelist_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/ExportCtTerm.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class ExportCtTerm;


class  ExportCtCodelist
    : public ModelBase
{
public:
    ExportCtCodelist();
    virtual ~ExportCtCodelist();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// ExportCtCodelist members


    utility::string_t getCode() const;
    bool codeIsSet() const;
    void unsetCode();
    void setCode(const utility::string_t& value);

    utility::string_t getCodelistCode() const;
    bool codelistCodeIsSet() const;
    void unsetCodelist_Code();
    void setCodelistCode(const utility::string_t& value);

    utility::string_t getCodelistExtensibleYesNo() const;
    bool codelistExtensibleYesNoIsSet() const;
    void unsetCodelist_Extensible__Yes_No();
    void setCodelistExtensibleYesNo(const utility::string_t& value);

    utility::string_t getCodelistName() const;
    bool codelistNameIsSet() const;
    void unsetCodelist_Name();
    void setCodelistName(const utility::string_t& value);

    utility::string_t getCDISCSubmissionValue() const;
    bool cDISCSubmissionValueIsSet() const;
    void unsetCDISC_Submission_Value();
    void setCDISCSubmissionValue(const utility::string_t& value);

    std::vector<utility::string_t> getCDISCSynonymS() const;
    bool cDISCSynonymSIsSet() const;
    void unsetCDISC_Synonym_s();
    void setCDISCSynonymS(const std::vector<utility::string_t>& value);

    utility::string_t getCDISCDefinition() const;
    bool cDISCDefinitionIsSet() const;
    void unsetCDISC_Definition();
    void setCDISCDefinition(const utility::string_t& value);

    utility::string_t getNCIPreferredTerm() const;
    bool nCIPreferredTermIsSet() const;
    void unsetNCI_Preferred_Term();
    void setNCIPreferredTerm(const utility::string_t& value);

    utility::string_t getStandardAndDate() const;
    bool standardAndDateIsSet() const;
    void unsetStandard_and_Date();
    void setStandardAndDate(const utility::string_t& value);

    std::vector<std::shared_ptr<ExportCtTerm>> get() const;
    bool IsSet() const;
    void unset();
    void set(const std::vector<std::shared_ptr<ExportCtTerm>>& value);


protected:
    utility::string_t m_Code;
    bool m_CodeIsSet;

    utility::string_t m_Codelist_Code;
    bool m_Codelist_CodeIsSet;

    utility::string_t m_Codelist_Extensible__Yes_No;
    bool m_Codelist_Extensible__Yes_NoIsSet;

    utility::string_t m_Codelist_Name;
    bool m_Codelist_NameIsSet;

    utility::string_t m_CDISC_Submission_Value;
    bool m_CDISC_Submission_ValueIsSet;

    std::vector<utility::string_t> m_CDISC_Synonym_s;
    bool m_CDISC_Synonym_sIsSet;

    utility::string_t m_CDISC_Definition;
    bool m_CDISC_DefinitionIsSet;

    utility::string_t m_NCI_Preferred_Term;
    bool m_NCI_Preferred_TermIsSet;

    utility::string_t m_Standard_and_Date;
    bool m_Standard_and_DateIsSet;

    std::vector<std::shared_ptr<ExportCtTerm>> m_;
    bool m_IsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ExportCtCodelist_H_ */

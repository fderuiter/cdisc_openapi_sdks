/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SdtmigClasses.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SdtmigClasses::SdtmigClasses()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Label = utility::conversions::to_string_t("");
    m_LabelIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Source = utility::conversions::to_string_t("");
    m_SourceIsSet = false;
    m_EffectiveDate = utility::conversions::to_string_t("");
    m_EffectiveDateIsSet = false;
    m_RegistrationStatus = utility::conversions::to_string_t("");
    m_RegistrationStatusIsSet = false;
    m_Version = utility::conversions::to_string_t("");
    m_VersionIsSet = false;
    m__linksIsSet = false;
}

SdtmigClasses::~SdtmigClasses()
{
}

void SdtmigClasses::validate()
{
    // TODO: implement validation
}

web::json::value SdtmigClasses::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_LabelIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("label"))] = ModelBase::toJson(m_Label);
    }
    if(m_DescriptionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_SourceIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("source"))] = ModelBase::toJson(m_Source);
    }
    if(m_EffectiveDateIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("effectiveDate"))] = ModelBase::toJson(m_EffectiveDate);
    }
    if(m_RegistrationStatusIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("registrationStatus"))] = ModelBase::toJson(m_RegistrationStatus);
    }
    if(m_VersionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("version"))] = ModelBase::toJson(m_Version);
    }
    if(m__linksIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("_links"))] = ModelBase::toJson(m__links);
    }

    return val;
}

bool SdtmigClasses::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLabel);
            setLabel(refVal_setLabel);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("source"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("source")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSource;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSource);
            setSource(refVal_setSource);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("effectiveDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("effectiveDate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEffectiveDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEffectiveDate);
            setEffectiveDate(refVal_setEffectiveDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("registrationStatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("registrationStatus")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRegistrationStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRegistrationStatus);
            setRegistrationStatus(refVal_setRegistrationStatus);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("_links"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("_links")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SdtmigClassesLinks> refVal_setLinks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLinks);
            setLinks(refVal_setLinks);
            
        }
    }
    return ok;
}

void SdtmigClasses::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("name")), m_Name));
    }
    if(m_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("label")), m_Label));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("description")), m_Description));
    }
    if(m_SourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("source")), m_Source));
    }
    if(m_EffectiveDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("effectiveDate")), m_EffectiveDate));
    }
    if(m_RegistrationStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("registrationStatus")), m_RegistrationStatus));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("version")), m_Version));
    }
    if(m__linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("_links")), m__links));
    }
}

bool SdtmigClasses::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("label"))))
    {
        utility::string_t refVal_setLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("label"))), refVal_setLabel );
        setLabel(refVal_setLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("source"))))
    {
        utility::string_t refVal_setSource;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("source"))), refVal_setSource );
        setSource(refVal_setSource);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("effectiveDate"))))
    {
        utility::string_t refVal_setEffectiveDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("effectiveDate"))), refVal_setEffectiveDate );
        setEffectiveDate(refVal_setEffectiveDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("registrationStatus"))))
    {
        utility::string_t refVal_setRegistrationStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("registrationStatus"))), refVal_setRegistrationStatus );
        setRegistrationStatus(refVal_setRegistrationStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("version"))))
    {
        utility::string_t refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("_links"))))
    {
        std::shared_ptr<SdtmigClassesLinks> refVal_setLinks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("_links"))), refVal_setLinks );
        setLinks(refVal_setLinks);
    }
    return ok;
}


utility::string_t SdtmigClasses::getName() const
{
    return m_Name;
}


void SdtmigClasses::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool SdtmigClasses::nameIsSet() const
{
    return m_NameIsSet;
}

void SdtmigClasses::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t SdtmigClasses::getLabel() const
{
    return m_Label;
}


void SdtmigClasses::setLabel(const utility::string_t& value)
{
    m_Label = value;
    m_LabelIsSet = true;
}

bool SdtmigClasses::labelIsSet() const
{
    return m_LabelIsSet;
}

void SdtmigClasses::unsetLabel()
{
    m_LabelIsSet = false;
}
utility::string_t SdtmigClasses::getDescription() const
{
    return m_Description;
}


void SdtmigClasses::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool SdtmigClasses::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void SdtmigClasses::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t SdtmigClasses::getSource() const
{
    return m_Source;
}


void SdtmigClasses::setSource(const utility::string_t& value)
{
    m_Source = value;
    m_SourceIsSet = true;
}

bool SdtmigClasses::sourceIsSet() const
{
    return m_SourceIsSet;
}

void SdtmigClasses::unsetSource()
{
    m_SourceIsSet = false;
}
utility::string_t SdtmigClasses::getEffectiveDate() const
{
    return m_EffectiveDate;
}


void SdtmigClasses::setEffectiveDate(const utility::string_t& value)
{
    m_EffectiveDate = value;
    m_EffectiveDateIsSet = true;
}

bool SdtmigClasses::effectiveDateIsSet() const
{
    return m_EffectiveDateIsSet;
}

void SdtmigClasses::unsetEffectiveDate()
{
    m_EffectiveDateIsSet = false;
}
utility::string_t SdtmigClasses::getRegistrationStatus() const
{
    return m_RegistrationStatus;
}


void SdtmigClasses::setRegistrationStatus(const utility::string_t& value)
{
    m_RegistrationStatus = value;
    m_RegistrationStatusIsSet = true;
}

bool SdtmigClasses::registrationStatusIsSet() const
{
    return m_RegistrationStatusIsSet;
}

void SdtmigClasses::unsetRegistrationStatus()
{
    m_RegistrationStatusIsSet = false;
}
utility::string_t SdtmigClasses::getVersion() const
{
    return m_Version;
}


void SdtmigClasses::setVersion(const utility::string_t& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool SdtmigClasses::versionIsSet() const
{
    return m_VersionIsSet;
}

void SdtmigClasses::unsetVersion()
{
    m_VersionIsSet = false;
}
std::shared_ptr<SdtmigClassesLinks> SdtmigClasses::getLinks() const
{
    return m__links;
}


void SdtmigClasses::setLinks(const std::shared_ptr<SdtmigClassesLinks>& value)
{
    m__links = value;
    m__linksIsSet = true;
}

bool SdtmigClasses::linksIsSet() const
{
    return m__linksIsSet;
}

void SdtmigClasses::unset_links()
{
    m__linksIsSet = false;
}

}
}
}
}



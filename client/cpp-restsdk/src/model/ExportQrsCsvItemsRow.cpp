/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ExportQrsCsvItemsRow.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ExportQrsCsvItemsRow::ExportQrsCsvItemsRow()
{
    m_QRS_Measure_Name = utility::conversions::to_string_t("");
    m_QRS_Measure_NameIsSet = false;
    m_QRS_Measure_Label = utility::conversions::to_string_t("");
    m_QRS_Measure_LabelIsSet = false;
    m_QRS_Measure_Type = utility::conversions::to_string_t("");
    m_QRS_Measure_TypeIsSet = false;
    m_Item_Sequence = utility::conversions::to_string_t("");
    m_Item_SequenceIsSet = false;
    m_Test_Name = utility::conversions::to_string_t("");
    m_Test_NameIsSet = false;
    m_Item_Text = utility::conversions::to_string_t("");
    m_Item_TextIsSet = false;
    m_Tests_Codelist_C_Code = utility::conversions::to_string_t("");
    m_Tests_Codelist_C_CodeIsSet = false;
    m_Tests_Term_C_Code = utility::conversions::to_string_t("");
    m_Tests_Term_C_CodeIsSet = false;
    m_Test_Codes_Codelist_C_Code = utility::conversions::to_string_t("");
    m_Test_Codes_Codelist_C_CodeIsSet = false;
    m_Test_Codes_Term_C_Code = utility::conversions::to_string_t("");
    m_Test_Codes_Term_C_CodeIsSet = false;
    m_Subcategorys_Codelist_C_Code = utility::conversions::to_string_t("");
    m_Subcategorys_Codelist_C_CodeIsSet = false;
    m_Subcategorys_Term_C_Code = utility::conversions::to_string_t("");
    m_Subcategorys_Term_C_CodeIsSet = false;
    m_Evaluators_Codelist_C_Code = utility::conversions::to_string_t("");
    m_Evaluators_Codelist_C_CodeIsSet = false;
    m_Evaluators_Term_C_Code = utility::conversions::to_string_t("");
    m_Evaluators_Term_C_CodeIsSet = false;
    m_Free_form_Responses_Datatype = utility::conversions::to_string_t("");
    m_Free_form_Responses_DatatypeIsSet = false;
    m_Response_Group = utility::conversions::to_string_t("");
    m_Response_GroupIsSet = false;
}

ExportQrsCsvItemsRow::~ExportQrsCsvItemsRow()
{
}

void ExportQrsCsvItemsRow::validate()
{
    // TODO: implement validation
}

web::json::value ExportQrsCsvItemsRow::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_QRS_Measure_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("QRS Measure Name"))] = ModelBase::toJson(m_QRS_Measure_Name);
    }
    if(m_QRS_Measure_LabelIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("QRS Measure Label"))] = ModelBase::toJson(m_QRS_Measure_Label);
    }
    if(m_QRS_Measure_TypeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("QRS Measure Type"))] = ModelBase::toJson(m_QRS_Measure_Type);
    }
    if(m_Item_SequenceIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Item Sequence"))] = ModelBase::toJson(m_Item_Sequence);
    }
    if(m_Test_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Test Name"))] = ModelBase::toJson(m_Test_Name);
    }
    if(m_Item_TextIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Item Text"))] = ModelBase::toJson(m_Item_Text);
    }
    if(m_Tests_Codelist_C_CodeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Test&#39;s Codelist C-Code"))] = ModelBase::toJson(m_Tests_Codelist_C_Code);
    }
    if(m_Tests_Term_C_CodeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Test&#39;s Term C-Code"))] = ModelBase::toJson(m_Tests_Term_C_Code);
    }
    if(m_Test_Codes_Codelist_C_CodeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Test Code&#39;s Codelist C-Code"))] = ModelBase::toJson(m_Test_Codes_Codelist_C_Code);
    }
    if(m_Test_Codes_Term_C_CodeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Test Code&#39;s Term C-Code"))] = ModelBase::toJson(m_Test_Codes_Term_C_Code);
    }
    if(m_Subcategorys_Codelist_C_CodeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Subcategory&#39;s Codelist C-Code"))] = ModelBase::toJson(m_Subcategorys_Codelist_C_Code);
    }
    if(m_Subcategorys_Term_C_CodeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Subcategory&#39;s Term C-Code"))] = ModelBase::toJson(m_Subcategorys_Term_C_Code);
    }
    if(m_Evaluators_Codelist_C_CodeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Evaluator&#39;s Codelist C-Code"))] = ModelBase::toJson(m_Evaluators_Codelist_C_Code);
    }
    if(m_Evaluators_Term_C_CodeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Evaluator&#39;s Term C-Code"))] = ModelBase::toJson(m_Evaluators_Term_C_Code);
    }
    if(m_Free_form_Responses_DatatypeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Free-form Response&#39;s Datatype"))] = ModelBase::toJson(m_Free_form_Responses_Datatype);
    }
    if(m_Response_GroupIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Response Group"))] = ModelBase::toJson(m_Response_Group);
    }

    return val;
}

bool ExportQrsCsvItemsRow::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("QRS Measure Name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("QRS Measure Name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setQRSMeasureName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQRSMeasureName);
            setQRSMeasureName(refVal_setQRSMeasureName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("QRS Measure Label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("QRS Measure Label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setQRSMeasureLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQRSMeasureLabel);
            setQRSMeasureLabel(refVal_setQRSMeasureLabel);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("QRS Measure Type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("QRS Measure Type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setQRSMeasureType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQRSMeasureType);
            setQRSMeasureType(refVal_setQRSMeasureType);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Item Sequence"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Item Sequence")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setItemSequence;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItemSequence);
            setItemSequence(refVal_setItemSequence);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Test Name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Test Name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTestName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTestName);
            setTestName(refVal_setTestName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Item Text"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Item Text")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setItemText;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItemText);
            setItemText(refVal_setItemText);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Test&#39;s Codelist C-Code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Test&#39;s Codelist C-Code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTestsCodelistCCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTestsCodelistCCode);
            setTestsCodelistCCode(refVal_setTestsCodelistCCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Test&#39;s Term C-Code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Test&#39;s Term C-Code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTestsTermCCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTestsTermCCode);
            setTestsTermCCode(refVal_setTestsTermCCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Test Code&#39;s Codelist C-Code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Test Code&#39;s Codelist C-Code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTestCodesCodelistCCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTestCodesCodelistCCode);
            setTestCodesCodelistCCode(refVal_setTestCodesCodelistCCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Test Code&#39;s Term C-Code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Test Code&#39;s Term C-Code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTestCodesTermCCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTestCodesTermCCode);
            setTestCodesTermCCode(refVal_setTestCodesTermCCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Subcategory&#39;s Codelist C-Code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Subcategory&#39;s Codelist C-Code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubcategorysCodelistCCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubcategorysCodelistCCode);
            setSubcategorysCodelistCCode(refVal_setSubcategorysCodelistCCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Subcategory&#39;s Term C-Code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Subcategory&#39;s Term C-Code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubcategorysTermCCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubcategorysTermCCode);
            setSubcategorysTermCCode(refVal_setSubcategorysTermCCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Evaluator&#39;s Codelist C-Code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Evaluator&#39;s Codelist C-Code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEvaluatorsCodelistCCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEvaluatorsCodelistCCode);
            setEvaluatorsCodelistCCode(refVal_setEvaluatorsCodelistCCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Evaluator&#39;s Term C-Code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Evaluator&#39;s Term C-Code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEvaluatorsTermCCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEvaluatorsTermCCode);
            setEvaluatorsTermCCode(refVal_setEvaluatorsTermCCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Free-form Response&#39;s Datatype"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Free-form Response&#39;s Datatype")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFreeFormResponsesDatatype;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFreeFormResponsesDatatype);
            setFreeFormResponsesDatatype(refVal_setFreeFormResponsesDatatype);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Response Group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Response Group")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setResponseGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResponseGroup);
            setResponseGroup(refVal_setResponseGroup);
            
        }
    }
    return ok;
}

void ExportQrsCsvItemsRow::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_QRS_Measure_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("QRS Measure Name")), m_QRS_Measure_Name));
    }
    if(m_QRS_Measure_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("QRS Measure Label")), m_QRS_Measure_Label));
    }
    if(m_QRS_Measure_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("QRS Measure Type")), m_QRS_Measure_Type));
    }
    if(m_Item_SequenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Item Sequence")), m_Item_Sequence));
    }
    if(m_Test_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Test Name")), m_Test_Name));
    }
    if(m_Item_TextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Item Text")), m_Item_Text));
    }
    if(m_Tests_Codelist_C_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Test&#39;s Codelist C-Code")), m_Tests_Codelist_C_Code));
    }
    if(m_Tests_Term_C_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Test&#39;s Term C-Code")), m_Tests_Term_C_Code));
    }
    if(m_Test_Codes_Codelist_C_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Test Code&#39;s Codelist C-Code")), m_Test_Codes_Codelist_C_Code));
    }
    if(m_Test_Codes_Term_C_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Test Code&#39;s Term C-Code")), m_Test_Codes_Term_C_Code));
    }
    if(m_Subcategorys_Codelist_C_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Subcategory&#39;s Codelist C-Code")), m_Subcategorys_Codelist_C_Code));
    }
    if(m_Subcategorys_Term_C_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Subcategory&#39;s Term C-Code")), m_Subcategorys_Term_C_Code));
    }
    if(m_Evaluators_Codelist_C_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Evaluator&#39;s Codelist C-Code")), m_Evaluators_Codelist_C_Code));
    }
    if(m_Evaluators_Term_C_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Evaluator&#39;s Term C-Code")), m_Evaluators_Term_C_Code));
    }
    if(m_Free_form_Responses_DatatypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Free-form Response&#39;s Datatype")), m_Free_form_Responses_Datatype));
    }
    if(m_Response_GroupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Response Group")), m_Response_Group));
    }
}

bool ExportQrsCsvItemsRow::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("QRS Measure Name"))))
    {
        utility::string_t refVal_setQRSMeasureName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("QRS Measure Name"))), refVal_setQRSMeasureName );
        setQRSMeasureName(refVal_setQRSMeasureName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("QRS Measure Label"))))
    {
        utility::string_t refVal_setQRSMeasureLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("QRS Measure Label"))), refVal_setQRSMeasureLabel );
        setQRSMeasureLabel(refVal_setQRSMeasureLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("QRS Measure Type"))))
    {
        utility::string_t refVal_setQRSMeasureType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("QRS Measure Type"))), refVal_setQRSMeasureType );
        setQRSMeasureType(refVal_setQRSMeasureType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Item Sequence"))))
    {
        utility::string_t refVal_setItemSequence;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Item Sequence"))), refVal_setItemSequence );
        setItemSequence(refVal_setItemSequence);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Test Name"))))
    {
        utility::string_t refVal_setTestName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Test Name"))), refVal_setTestName );
        setTestName(refVal_setTestName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Item Text"))))
    {
        utility::string_t refVal_setItemText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Item Text"))), refVal_setItemText );
        setItemText(refVal_setItemText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Test&#39;s Codelist C-Code"))))
    {
        utility::string_t refVal_setTestsCodelistCCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Test&#39;s Codelist C-Code"))), refVal_setTestsCodelistCCode );
        setTestsCodelistCCode(refVal_setTestsCodelistCCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Test&#39;s Term C-Code"))))
    {
        utility::string_t refVal_setTestsTermCCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Test&#39;s Term C-Code"))), refVal_setTestsTermCCode );
        setTestsTermCCode(refVal_setTestsTermCCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Test Code&#39;s Codelist C-Code"))))
    {
        utility::string_t refVal_setTestCodesCodelistCCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Test Code&#39;s Codelist C-Code"))), refVal_setTestCodesCodelistCCode );
        setTestCodesCodelistCCode(refVal_setTestCodesCodelistCCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Test Code&#39;s Term C-Code"))))
    {
        utility::string_t refVal_setTestCodesTermCCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Test Code&#39;s Term C-Code"))), refVal_setTestCodesTermCCode );
        setTestCodesTermCCode(refVal_setTestCodesTermCCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Subcategory&#39;s Codelist C-Code"))))
    {
        utility::string_t refVal_setSubcategorysCodelistCCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Subcategory&#39;s Codelist C-Code"))), refVal_setSubcategorysCodelistCCode );
        setSubcategorysCodelistCCode(refVal_setSubcategorysCodelistCCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Subcategory&#39;s Term C-Code"))))
    {
        utility::string_t refVal_setSubcategorysTermCCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Subcategory&#39;s Term C-Code"))), refVal_setSubcategorysTermCCode );
        setSubcategorysTermCCode(refVal_setSubcategorysTermCCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Evaluator&#39;s Codelist C-Code"))))
    {
        utility::string_t refVal_setEvaluatorsCodelistCCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Evaluator&#39;s Codelist C-Code"))), refVal_setEvaluatorsCodelistCCode );
        setEvaluatorsCodelistCCode(refVal_setEvaluatorsCodelistCCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Evaluator&#39;s Term C-Code"))))
    {
        utility::string_t refVal_setEvaluatorsTermCCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Evaluator&#39;s Term C-Code"))), refVal_setEvaluatorsTermCCode );
        setEvaluatorsTermCCode(refVal_setEvaluatorsTermCCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Free-form Response&#39;s Datatype"))))
    {
        utility::string_t refVal_setFreeFormResponsesDatatype;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Free-form Response&#39;s Datatype"))), refVal_setFreeFormResponsesDatatype );
        setFreeFormResponsesDatatype(refVal_setFreeFormResponsesDatatype);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Response Group"))))
    {
        utility::string_t refVal_setResponseGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Response Group"))), refVal_setResponseGroup );
        setResponseGroup(refVal_setResponseGroup);
    }
    return ok;
}


utility::string_t ExportQrsCsvItemsRow::getQRSMeasureName() const
{
    return m_QRS_Measure_Name;
}


void ExportQrsCsvItemsRow::setQRSMeasureName(const utility::string_t& value)
{
    m_QRS_Measure_Name = value;
    m_QRS_Measure_NameIsSet = true;
}

bool ExportQrsCsvItemsRow::qRSMeasureNameIsSet() const
{
    return m_QRS_Measure_NameIsSet;
}

void ExportQrsCsvItemsRow::unsetQRS_Measure_Name()
{
    m_QRS_Measure_NameIsSet = false;
}
utility::string_t ExportQrsCsvItemsRow::getQRSMeasureLabel() const
{
    return m_QRS_Measure_Label;
}


void ExportQrsCsvItemsRow::setQRSMeasureLabel(const utility::string_t& value)
{
    m_QRS_Measure_Label = value;
    m_QRS_Measure_LabelIsSet = true;
}

bool ExportQrsCsvItemsRow::qRSMeasureLabelIsSet() const
{
    return m_QRS_Measure_LabelIsSet;
}

void ExportQrsCsvItemsRow::unsetQRS_Measure_Label()
{
    m_QRS_Measure_LabelIsSet = false;
}
utility::string_t ExportQrsCsvItemsRow::getQRSMeasureType() const
{
    return m_QRS_Measure_Type;
}


void ExportQrsCsvItemsRow::setQRSMeasureType(const utility::string_t& value)
{
    m_QRS_Measure_Type = value;
    m_QRS_Measure_TypeIsSet = true;
}

bool ExportQrsCsvItemsRow::qRSMeasureTypeIsSet() const
{
    return m_QRS_Measure_TypeIsSet;
}

void ExportQrsCsvItemsRow::unsetQRS_Measure_Type()
{
    m_QRS_Measure_TypeIsSet = false;
}
utility::string_t ExportQrsCsvItemsRow::getItemSequence() const
{
    return m_Item_Sequence;
}


void ExportQrsCsvItemsRow::setItemSequence(const utility::string_t& value)
{
    m_Item_Sequence = value;
    m_Item_SequenceIsSet = true;
}

bool ExportQrsCsvItemsRow::itemSequenceIsSet() const
{
    return m_Item_SequenceIsSet;
}

void ExportQrsCsvItemsRow::unsetItem_Sequence()
{
    m_Item_SequenceIsSet = false;
}
utility::string_t ExportQrsCsvItemsRow::getTestName() const
{
    return m_Test_Name;
}


void ExportQrsCsvItemsRow::setTestName(const utility::string_t& value)
{
    m_Test_Name = value;
    m_Test_NameIsSet = true;
}

bool ExportQrsCsvItemsRow::testNameIsSet() const
{
    return m_Test_NameIsSet;
}

void ExportQrsCsvItemsRow::unsetTest_Name()
{
    m_Test_NameIsSet = false;
}
utility::string_t ExportQrsCsvItemsRow::getItemText() const
{
    return m_Item_Text;
}


void ExportQrsCsvItemsRow::setItemText(const utility::string_t& value)
{
    m_Item_Text = value;
    m_Item_TextIsSet = true;
}

bool ExportQrsCsvItemsRow::itemTextIsSet() const
{
    return m_Item_TextIsSet;
}

void ExportQrsCsvItemsRow::unsetItem_Text()
{
    m_Item_TextIsSet = false;
}
utility::string_t ExportQrsCsvItemsRow::getTestsCodelistCCode() const
{
    return m_Tests_Codelist_C_Code;
}


void ExportQrsCsvItemsRow::setTestsCodelistCCode(const utility::string_t& value)
{
    m_Tests_Codelist_C_Code = value;
    m_Tests_Codelist_C_CodeIsSet = true;
}

bool ExportQrsCsvItemsRow::testsCodelistCCodeIsSet() const
{
    return m_Tests_Codelist_C_CodeIsSet;
}

void ExportQrsCsvItemsRow::unsetTests_Codelist_C_Code()
{
    m_Tests_Codelist_C_CodeIsSet = false;
}
utility::string_t ExportQrsCsvItemsRow::getTestsTermCCode() const
{
    return m_Tests_Term_C_Code;
}


void ExportQrsCsvItemsRow::setTestsTermCCode(const utility::string_t& value)
{
    m_Tests_Term_C_Code = value;
    m_Tests_Term_C_CodeIsSet = true;
}

bool ExportQrsCsvItemsRow::testsTermCCodeIsSet() const
{
    return m_Tests_Term_C_CodeIsSet;
}

void ExportQrsCsvItemsRow::unsetTests_Term_C_Code()
{
    m_Tests_Term_C_CodeIsSet = false;
}
utility::string_t ExportQrsCsvItemsRow::getTestCodesCodelistCCode() const
{
    return m_Test_Codes_Codelist_C_Code;
}


void ExportQrsCsvItemsRow::setTestCodesCodelistCCode(const utility::string_t& value)
{
    m_Test_Codes_Codelist_C_Code = value;
    m_Test_Codes_Codelist_C_CodeIsSet = true;
}

bool ExportQrsCsvItemsRow::testCodesCodelistCCodeIsSet() const
{
    return m_Test_Codes_Codelist_C_CodeIsSet;
}

void ExportQrsCsvItemsRow::unsetTest_Codes_Codelist_C_Code()
{
    m_Test_Codes_Codelist_C_CodeIsSet = false;
}
utility::string_t ExportQrsCsvItemsRow::getTestCodesTermCCode() const
{
    return m_Test_Codes_Term_C_Code;
}


void ExportQrsCsvItemsRow::setTestCodesTermCCode(const utility::string_t& value)
{
    m_Test_Codes_Term_C_Code = value;
    m_Test_Codes_Term_C_CodeIsSet = true;
}

bool ExportQrsCsvItemsRow::testCodesTermCCodeIsSet() const
{
    return m_Test_Codes_Term_C_CodeIsSet;
}

void ExportQrsCsvItemsRow::unsetTest_Codes_Term_C_Code()
{
    m_Test_Codes_Term_C_CodeIsSet = false;
}
utility::string_t ExportQrsCsvItemsRow::getSubcategorysCodelistCCode() const
{
    return m_Subcategorys_Codelist_C_Code;
}


void ExportQrsCsvItemsRow::setSubcategorysCodelistCCode(const utility::string_t& value)
{
    m_Subcategorys_Codelist_C_Code = value;
    m_Subcategorys_Codelist_C_CodeIsSet = true;
}

bool ExportQrsCsvItemsRow::subcategorysCodelistCCodeIsSet() const
{
    return m_Subcategorys_Codelist_C_CodeIsSet;
}

void ExportQrsCsvItemsRow::unsetSubcategorys_Codelist_C_Code()
{
    m_Subcategorys_Codelist_C_CodeIsSet = false;
}
utility::string_t ExportQrsCsvItemsRow::getSubcategorysTermCCode() const
{
    return m_Subcategorys_Term_C_Code;
}


void ExportQrsCsvItemsRow::setSubcategorysTermCCode(const utility::string_t& value)
{
    m_Subcategorys_Term_C_Code = value;
    m_Subcategorys_Term_C_CodeIsSet = true;
}

bool ExportQrsCsvItemsRow::subcategorysTermCCodeIsSet() const
{
    return m_Subcategorys_Term_C_CodeIsSet;
}

void ExportQrsCsvItemsRow::unsetSubcategorys_Term_C_Code()
{
    m_Subcategorys_Term_C_CodeIsSet = false;
}
utility::string_t ExportQrsCsvItemsRow::getEvaluatorsCodelistCCode() const
{
    return m_Evaluators_Codelist_C_Code;
}


void ExportQrsCsvItemsRow::setEvaluatorsCodelistCCode(const utility::string_t& value)
{
    m_Evaluators_Codelist_C_Code = value;
    m_Evaluators_Codelist_C_CodeIsSet = true;
}

bool ExportQrsCsvItemsRow::evaluatorsCodelistCCodeIsSet() const
{
    return m_Evaluators_Codelist_C_CodeIsSet;
}

void ExportQrsCsvItemsRow::unsetEvaluators_Codelist_C_Code()
{
    m_Evaluators_Codelist_C_CodeIsSet = false;
}
utility::string_t ExportQrsCsvItemsRow::getEvaluatorsTermCCode() const
{
    return m_Evaluators_Term_C_Code;
}


void ExportQrsCsvItemsRow::setEvaluatorsTermCCode(const utility::string_t& value)
{
    m_Evaluators_Term_C_Code = value;
    m_Evaluators_Term_C_CodeIsSet = true;
}

bool ExportQrsCsvItemsRow::evaluatorsTermCCodeIsSet() const
{
    return m_Evaluators_Term_C_CodeIsSet;
}

void ExportQrsCsvItemsRow::unsetEvaluators_Term_C_Code()
{
    m_Evaluators_Term_C_CodeIsSet = false;
}
utility::string_t ExportQrsCsvItemsRow::getFreeFormResponsesDatatype() const
{
    return m_Free_form_Responses_Datatype;
}


void ExportQrsCsvItemsRow::setFreeFormResponsesDatatype(const utility::string_t& value)
{
    m_Free_form_Responses_Datatype = value;
    m_Free_form_Responses_DatatypeIsSet = true;
}

bool ExportQrsCsvItemsRow::freeFormResponsesDatatypeIsSet() const
{
    return m_Free_form_Responses_DatatypeIsSet;
}

void ExportQrsCsvItemsRow::unsetFree_form_Responses_Datatype()
{
    m_Free_form_Responses_DatatypeIsSet = false;
}
utility::string_t ExportQrsCsvItemsRow::getResponseGroup() const
{
    return m_Response_Group;
}


void ExportQrsCsvItemsRow::setResponseGroup(const utility::string_t& value)
{
    m_Response_Group = value;
    m_Response_GroupIsSet = true;
}

bool ExportQrsCsvItemsRow::responseGroupIsSet() const
{
    return m_Response_GroupIsSet;
}

void ExportQrsCsvItemsRow::unsetResponse_Group()
{
    m_Response_GroupIsSet = false;
}

}
}
}
}



/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ProductgroupDataAnalysis.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ProductgroupDataAnalysis::ProductgroupDataAnalysis()
{
    m__linksIsSet = false;
}

ProductgroupDataAnalysis::~ProductgroupDataAnalysis()
{
}

void ProductgroupDataAnalysis::validate()
{
    // TODO: implement validation
}

web::json::value ProductgroupDataAnalysis::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m__linksIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("_links"))] = ModelBase::toJson(m__links);
    }

    return val;
}

bool ProductgroupDataAnalysis::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("_links"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("_links")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ProductgroupDataAnalysisLinks> refVal_setLinks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLinks);
            setLinks(refVal_setLinks);
            
        }
    }
    return ok;
}

void ProductgroupDataAnalysis::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m__linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("_links")), m__links));
    }
}

bool ProductgroupDataAnalysis::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("_links"))))
    {
        std::shared_ptr<ProductgroupDataAnalysisLinks> refVal_setLinks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("_links"))), refVal_setLinks );
        setLinks(refVal_setLinks);
    }
    return ok;
}


std::shared_ptr<ProductgroupDataAnalysisLinks> ProductgroupDataAnalysis::getLinks() const
{
    return m__links;
}


void ProductgroupDataAnalysis::setLinks(const std::shared_ptr<ProductgroupDataAnalysisLinks>& value)
{
    m__links = value;
    m__linksIsSet = true;
}

bool ProductgroupDataAnalysis::linksIsSet() const
{
    return m__linksIsSet;
}

void ProductgroupDataAnalysis::unset_links()
{
    m__linksIsSet = false;
}

}
}
}
}



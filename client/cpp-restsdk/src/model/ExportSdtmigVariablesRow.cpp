/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ExportSdtmigVariablesRow.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ExportSdtmigVariablesRow::ExportSdtmigVariablesRow()
{
    m_Version = utility::conversions::to_string_t("");
    m_VersionIsSet = false;
    m_Variable_Order = utility::conversions::to_string_t("");
    m_Variable_OrderIsSet = false;
    m_r_Class = utility::conversions::to_string_t("");
    m_r_ClassIsSet = false;
    m_Dataset_Name = utility::conversions::to_string_t("");
    m_Dataset_NameIsSet = false;
    m_Variable_Name = utility::conversions::to_string_t("");
    m_Variable_NameIsSet = false;
    m_Variable_Label = utility::conversions::to_string_t("");
    m_Variable_LabelIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Controlled_Terms_Codelist_or_Format = utility::conversions::to_string_t("");
    m_Controlled_Terms_Codelist_or_FormatIsSet = false;
    m_Role = utility::conversions::to_string_t("");
    m_RoleIsSet = false;
    m_CDISC_Notes = utility::conversions::to_string_t("");
    m_CDISC_NotesIsSet = false;
    m_Core = utility::conversions::to_string_t("");
    m_CoreIsSet = false;
}

ExportSdtmigVariablesRow::~ExportSdtmigVariablesRow()
{
}

void ExportSdtmigVariablesRow::validate()
{
    // TODO: implement validation
}

web::json::value ExportSdtmigVariablesRow::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_VersionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Version"))] = ModelBase::toJson(m_Version);
    }
    if(m_Variable_OrderIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Variable Order"))] = ModelBase::toJson(m_Variable_Order);
    }
    if(m_r_ClassIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Class"))] = ModelBase::toJson(m_r_Class);
    }
    if(m_Dataset_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Dataset Name"))] = ModelBase::toJson(m_Dataset_Name);
    }
    if(m_Variable_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Variable Name"))] = ModelBase::toJson(m_Variable_Name);
    }
    if(m_Variable_LabelIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Variable Label"))] = ModelBase::toJson(m_Variable_Label);
    }
    if(m_TypeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Type"))] = ModelBase::toJson(m_Type);
    }
    if(m_Controlled_Terms_Codelist_or_FormatIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Controlled Terms, Codelist or Format"))] = ModelBase::toJson(m_Controlled_Terms_Codelist_or_Format);
    }
    if(m_RoleIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Role"))] = ModelBase::toJson(m_Role);
    }
    if(m_CDISC_NotesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("CDISC Notes"))] = ModelBase::toJson(m_CDISC_Notes);
    }
    if(m_CoreIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Core"))] = ModelBase::toJson(m_Core);
    }

    return val;
}

bool ExportSdtmigVariablesRow::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Variable Order"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Variable Order")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVariableOrder;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariableOrder);
            setVariableOrder(refVal_setVariableOrder);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRClass);
            setRClass(refVal_setRClass);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Dataset Name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Dataset Name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDatasetName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDatasetName);
            setDatasetName(refVal_setDatasetName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Variable Name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Variable Name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVariableName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariableName);
            setVariableName(refVal_setVariableName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Variable Label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Variable Label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVariableLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariableLabel);
            setVariableLabel(refVal_setVariableLabel);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Controlled Terms, Codelist or Format"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Controlled Terms, Codelist or Format")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setControlledTermsCodelistOrFormat;
            ok &= ModelBase::fromJson(fieldValue, refVal_setControlledTermsCodelistOrFormat);
            setControlledTermsCodelistOrFormat(refVal_setControlledTermsCodelistOrFormat);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Role"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Role")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRole;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRole);
            setRole(refVal_setRole);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("CDISC Notes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("CDISC Notes")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCDISCNotes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCDISCNotes);
            setCDISCNotes(refVal_setCDISCNotes);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Core"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Core")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCore);
            setCore(refVal_setCore);
            
        }
    }
    return ok;
}

void ExportSdtmigVariablesRow::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Version")), m_Version));
    }
    if(m_Variable_OrderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Variable Order")), m_Variable_Order));
    }
    if(m_r_ClassIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Class")), m_r_Class));
    }
    if(m_Dataset_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Dataset Name")), m_Dataset_Name));
    }
    if(m_Variable_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Variable Name")), m_Variable_Name));
    }
    if(m_Variable_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Variable Label")), m_Variable_Label));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Type")), m_Type));
    }
    if(m_Controlled_Terms_Codelist_or_FormatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Controlled Terms, Codelist or Format")), m_Controlled_Terms_Codelist_or_Format));
    }
    if(m_RoleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Role")), m_Role));
    }
    if(m_CDISC_NotesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("CDISC Notes")), m_CDISC_Notes));
    }
    if(m_CoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Core")), m_Core));
    }
}

bool ExportSdtmigVariablesRow::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Version"))))
    {
        utility::string_t refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Variable Order"))))
    {
        utility::string_t refVal_setVariableOrder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Variable Order"))), refVal_setVariableOrder );
        setVariableOrder(refVal_setVariableOrder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Class"))))
    {
        utility::string_t refVal_setRClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Class"))), refVal_setRClass );
        setRClass(refVal_setRClass);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Dataset Name"))))
    {
        utility::string_t refVal_setDatasetName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Dataset Name"))), refVal_setDatasetName );
        setDatasetName(refVal_setDatasetName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Variable Name"))))
    {
        utility::string_t refVal_setVariableName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Variable Name"))), refVal_setVariableName );
        setVariableName(refVal_setVariableName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Variable Label"))))
    {
        utility::string_t refVal_setVariableLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Variable Label"))), refVal_setVariableLabel );
        setVariableLabel(refVal_setVariableLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Controlled Terms, Codelist or Format"))))
    {
        utility::string_t refVal_setControlledTermsCodelistOrFormat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Controlled Terms, Codelist or Format"))), refVal_setControlledTermsCodelistOrFormat );
        setControlledTermsCodelistOrFormat(refVal_setControlledTermsCodelistOrFormat);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Role"))))
    {
        utility::string_t refVal_setRole;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Role"))), refVal_setRole );
        setRole(refVal_setRole);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("CDISC Notes"))))
    {
        utility::string_t refVal_setCDISCNotes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("CDISC Notes"))), refVal_setCDISCNotes );
        setCDISCNotes(refVal_setCDISCNotes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Core"))))
    {
        utility::string_t refVal_setCore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Core"))), refVal_setCore );
        setCore(refVal_setCore);
    }
    return ok;
}


utility::string_t ExportSdtmigVariablesRow::getVersion() const
{
    return m_Version;
}


void ExportSdtmigVariablesRow::setVersion(const utility::string_t& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool ExportSdtmigVariablesRow::versionIsSet() const
{
    return m_VersionIsSet;
}

void ExportSdtmigVariablesRow::unsetVersion()
{
    m_VersionIsSet = false;
}
utility::string_t ExportSdtmigVariablesRow::getVariableOrder() const
{
    return m_Variable_Order;
}


void ExportSdtmigVariablesRow::setVariableOrder(const utility::string_t& value)
{
    m_Variable_Order = value;
    m_Variable_OrderIsSet = true;
}

bool ExportSdtmigVariablesRow::variableOrderIsSet() const
{
    return m_Variable_OrderIsSet;
}

void ExportSdtmigVariablesRow::unsetVariable_Order()
{
    m_Variable_OrderIsSet = false;
}
utility::string_t ExportSdtmigVariablesRow::getRClass() const
{
    return m_r_Class;
}


void ExportSdtmigVariablesRow::setRClass(const utility::string_t& value)
{
    m_r_Class = value;
    m_r_ClassIsSet = true;
}

bool ExportSdtmigVariablesRow::rClassIsSet() const
{
    return m_r_ClassIsSet;
}

void ExportSdtmigVariablesRow::unsetr_Class()
{
    m_r_ClassIsSet = false;
}
utility::string_t ExportSdtmigVariablesRow::getDatasetName() const
{
    return m_Dataset_Name;
}


void ExportSdtmigVariablesRow::setDatasetName(const utility::string_t& value)
{
    m_Dataset_Name = value;
    m_Dataset_NameIsSet = true;
}

bool ExportSdtmigVariablesRow::datasetNameIsSet() const
{
    return m_Dataset_NameIsSet;
}

void ExportSdtmigVariablesRow::unsetDataset_Name()
{
    m_Dataset_NameIsSet = false;
}
utility::string_t ExportSdtmigVariablesRow::getVariableName() const
{
    return m_Variable_Name;
}


void ExportSdtmigVariablesRow::setVariableName(const utility::string_t& value)
{
    m_Variable_Name = value;
    m_Variable_NameIsSet = true;
}

bool ExportSdtmigVariablesRow::variableNameIsSet() const
{
    return m_Variable_NameIsSet;
}

void ExportSdtmigVariablesRow::unsetVariable_Name()
{
    m_Variable_NameIsSet = false;
}
utility::string_t ExportSdtmigVariablesRow::getVariableLabel() const
{
    return m_Variable_Label;
}


void ExportSdtmigVariablesRow::setVariableLabel(const utility::string_t& value)
{
    m_Variable_Label = value;
    m_Variable_LabelIsSet = true;
}

bool ExportSdtmigVariablesRow::variableLabelIsSet() const
{
    return m_Variable_LabelIsSet;
}

void ExportSdtmigVariablesRow::unsetVariable_Label()
{
    m_Variable_LabelIsSet = false;
}
utility::string_t ExportSdtmigVariablesRow::getType() const
{
    return m_Type;
}


void ExportSdtmigVariablesRow::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool ExportSdtmigVariablesRow::typeIsSet() const
{
    return m_TypeIsSet;
}

void ExportSdtmigVariablesRow::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t ExportSdtmigVariablesRow::getControlledTermsCodelistOrFormat() const
{
    return m_Controlled_Terms_Codelist_or_Format;
}


void ExportSdtmigVariablesRow::setControlledTermsCodelistOrFormat(const utility::string_t& value)
{
    m_Controlled_Terms_Codelist_or_Format = value;
    m_Controlled_Terms_Codelist_or_FormatIsSet = true;
}

bool ExportSdtmigVariablesRow::controlledTermsCodelistOrFormatIsSet() const
{
    return m_Controlled_Terms_Codelist_or_FormatIsSet;
}

void ExportSdtmigVariablesRow::unsetControlled_Terms_Codelist_or_Format()
{
    m_Controlled_Terms_Codelist_or_FormatIsSet = false;
}
utility::string_t ExportSdtmigVariablesRow::getRole() const
{
    return m_Role;
}


void ExportSdtmigVariablesRow::setRole(const utility::string_t& value)
{
    m_Role = value;
    m_RoleIsSet = true;
}

bool ExportSdtmigVariablesRow::roleIsSet() const
{
    return m_RoleIsSet;
}

void ExportSdtmigVariablesRow::unsetRole()
{
    m_RoleIsSet = false;
}
utility::string_t ExportSdtmigVariablesRow::getCDISCNotes() const
{
    return m_CDISC_Notes;
}


void ExportSdtmigVariablesRow::setCDISCNotes(const utility::string_t& value)
{
    m_CDISC_Notes = value;
    m_CDISC_NotesIsSet = true;
}

bool ExportSdtmigVariablesRow::cDISCNotesIsSet() const
{
    return m_CDISC_NotesIsSet;
}

void ExportSdtmigVariablesRow::unsetCDISC_Notes()
{
    m_CDISC_NotesIsSet = false;
}
utility::string_t ExportSdtmigVariablesRow::getCore() const
{
    return m_Core;
}


void ExportSdtmigVariablesRow::setCore(const utility::string_t& value)
{
    m_Core = value;
    m_CoreIsSet = true;
}

bool ExportSdtmigVariablesRow::coreIsSet() const
{
    return m_CoreIsSet;
}

void ExportSdtmigVariablesRow::unsetCore()
{
    m_CoreIsSet = false;
}

}
}
}
}



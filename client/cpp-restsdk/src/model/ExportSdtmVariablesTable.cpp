/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ExportSdtmVariablesTable.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ExportSdtmVariablesTable::ExportSdtmVariablesTable()
{
    m_Class_variablesIsSet = false;
    m_Dataset_variablesIsSet = false;
}

ExportSdtmVariablesTable::~ExportSdtmVariablesTable()
{
}

void ExportSdtmVariablesTable::validate()
{
    // TODO: implement validation
}

web::json::value ExportSdtmVariablesTable::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Class_variablesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("class-variables"))] = ModelBase::toJson(m_Class_variables);
    }
    if(m_Dataset_variablesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dataset-variables"))] = ModelBase::toJson(m_Dataset_variables);
    }

    return val;
}

bool ExportSdtmVariablesTable::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("class-variables"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("class-variables")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ExportSdtmClassVariablesRow>> refVal_setClassVariables;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClassVariables);
            setClassVariables(refVal_setClassVariables);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dataset-variables"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dataset-variables")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ExportSdtmDatasetVariablesRow>> refVal_setDatasetVariables;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDatasetVariables);
            setDatasetVariables(refVal_setDatasetVariables);
            
        }
    }
    return ok;
}

void ExportSdtmVariablesTable::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Class_variablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("class-variables")), m_Class_variables));
    }
    if(m_Dataset_variablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dataset-variables")), m_Dataset_variables));
    }
}

bool ExportSdtmVariablesTable::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("class-variables"))))
    {
        std::vector<std::shared_ptr<ExportSdtmClassVariablesRow>> refVal_setClassVariables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("class-variables"))), refVal_setClassVariables );
        setClassVariables(refVal_setClassVariables);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dataset-variables"))))
    {
        std::vector<std::shared_ptr<ExportSdtmDatasetVariablesRow>> refVal_setDatasetVariables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dataset-variables"))), refVal_setDatasetVariables );
        setDatasetVariables(refVal_setDatasetVariables);
    }
    return ok;
}


std::vector<std::shared_ptr<ExportSdtmClassVariablesRow>> ExportSdtmVariablesTable::getClassVariables() const
{
    return m_Class_variables;
}


void ExportSdtmVariablesTable::setClassVariables(const std::vector<std::shared_ptr<ExportSdtmClassVariablesRow>>& value)
{
    m_Class_variables = value;
    m_Class_variablesIsSet = true;
}

bool ExportSdtmVariablesTable::classVariablesIsSet() const
{
    return m_Class_variablesIsSet;
}

void ExportSdtmVariablesTable::unsetClass_variables()
{
    m_Class_variablesIsSet = false;
}
std::vector<std::shared_ptr<ExportSdtmDatasetVariablesRow>> ExportSdtmVariablesTable::getDatasetVariables() const
{
    return m_Dataset_variables;
}


void ExportSdtmVariablesTable::setDatasetVariables(const std::vector<std::shared_ptr<ExportSdtmDatasetVariablesRow>>& value)
{
    m_Dataset_variables = value;
    m_Dataset_variablesIsSet = true;
}

bool ExportSdtmVariablesTable::datasetVariablesIsSet() const
{
    return m_Dataset_variablesIsSet;
}

void ExportSdtmVariablesTable::unsetDataset_variables()
{
    m_Dataset_variablesIsSet = false;
}

}
}
}
}



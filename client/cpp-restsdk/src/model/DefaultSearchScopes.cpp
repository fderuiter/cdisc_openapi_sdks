/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DefaultSearchScopes.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

namespace
{
using EnumUnderlyingType = utility::string_t;

DefaultSearchScopes::eDefaultSearchScopes toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(_XPLATSTR("class")))
        return DefaultSearchScopes::eDefaultSearchScopes::CLASS;
    if (val == utility::conversions::to_string_t(_XPLATSTR("codelist")))
        return DefaultSearchScopes::eDefaultSearchScopes::CODELIST;
    if (val == utility::conversions::to_string_t(_XPLATSTR("conceptId")))
        return DefaultSearchScopes::eDefaultSearchScopes::CONCEPTID;
    if (val == utility::conversions::to_string_t(_XPLATSTR("core")))
        return DefaultSearchScopes::eDefaultSearchScopes::CORE;
    if (val == utility::conversions::to_string_t(_XPLATSTR("dataStructure")))
        return DefaultSearchScopes::eDefaultSearchScopes::DATASTRUCTURE;
    if (val == utility::conversions::to_string_t(_XPLATSTR("datasetStructure")))
        return DefaultSearchScopes::eDefaultSearchScopes::DATASETSTRUCTURE;
    if (val == utility::conversions::to_string_t(_XPLATSTR("definition")))
        return DefaultSearchScopes::eDefaultSearchScopes::DEFINITION;
    if (val == utility::conversions::to_string_t(_XPLATSTR("description")))
        return DefaultSearchScopes::eDefaultSearchScopes::DESCRIPTION;
    if (val == utility::conversions::to_string_t(_XPLATSTR("domain")))
        return DefaultSearchScopes::eDefaultSearchScopes::DOMAIN;
    if (val == utility::conversions::to_string_t(_XPLATSTR("effectiveDate")))
        return DefaultSearchScopes::eDefaultSearchScopes::EFFECTIVEDATE;
    if (val == utility::conversions::to_string_t(_XPLATSTR("extensible")))
        return DefaultSearchScopes::eDefaultSearchScopes::EXTENSIBLE;
    if (val == utility::conversions::to_string_t(_XPLATSTR("href")))
        return DefaultSearchScopes::eDefaultSearchScopes::HREF;
    if (val == utility::conversions::to_string_t(_XPLATSTR("label")))
        return DefaultSearchScopes::eDefaultSearchScopes::LABEL;
    if (val == utility::conversions::to_string_t(_XPLATSTR("measureType")))
        return DefaultSearchScopes::eDefaultSearchScopes::MEASURETYPE;
    if (val == utility::conversions::to_string_t(_XPLATSTR("name")))
        return DefaultSearchScopes::eDefaultSearchScopes::NAME;
    if (val == utility::conversions::to_string_t(_XPLATSTR("preferredTerm")))
        return DefaultSearchScopes::eDefaultSearchScopes::PREFERREDTERM;
    if (val == utility::conversions::to_string_t(_XPLATSTR("product")))
        return DefaultSearchScopes::eDefaultSearchScopes::PRODUCT;
    if (val == utility::conversions::to_string_t(_XPLATSTR("productGroup")))
        return DefaultSearchScopes::eDefaultSearchScopes::PRODUCTGROUP;
    if (val == utility::conversions::to_string_t(_XPLATSTR("registrationStatus")))
        return DefaultSearchScopes::eDefaultSearchScopes::REGISTRATIONSTATUS;
    if (val == utility::conversions::to_string_t(_XPLATSTR("roleDescription")))
        return DefaultSearchScopes::eDefaultSearchScopes::ROLEDESCRIPTION;
    if (val == utility::conversions::to_string_t(_XPLATSTR("sdtmTarget")))
        return DefaultSearchScopes::eDefaultSearchScopes::SDTMTARGET;
    if (val == utility::conversions::to_string_t(_XPLATSTR("simpleDatatype")))
        return DefaultSearchScopes::eDefaultSearchScopes::SIMPLEDATATYPE;
    if (val == utility::conversions::to_string_t(_XPLATSTR("submissionValue")))
        return DefaultSearchScopes::eDefaultSearchScopes::SUBMISSIONVALUE;
    if (val == utility::conversions::to_string_t(_XPLATSTR("synonyms")))
        return DefaultSearchScopes::eDefaultSearchScopes::SYNONYMS;
    if (val == utility::conversions::to_string_t(_XPLATSTR("type")))
        return DefaultSearchScopes::eDefaultSearchScopes::TYPE;
    if (val == utility::conversions::to_string_t(_XPLATSTR("uiHref")))
        return DefaultSearchScopes::eDefaultSearchScopes::UIHREF;
    if (val == utility::conversions::to_string_t(_XPLATSTR("valueDomain")))
        return DefaultSearchScopes::eDefaultSearchScopes::VALUEDOMAIN;
    if (val == utility::conversions::to_string_t(_XPLATSTR("variableSet")))
        return DefaultSearchScopes::eDefaultSearchScopes::VARIABLESET;
    if (val == utility::conversions::to_string_t(_XPLATSTR("version")))
        return DefaultSearchScopes::eDefaultSearchScopes::VERSION;
    return {};
}

EnumUnderlyingType fromEnum(DefaultSearchScopes::eDefaultSearchScopes e)
{
    switch (e)
    {
    case DefaultSearchScopes::eDefaultSearchScopes::CLASS:
        return _XPLATSTR("class");
    case DefaultSearchScopes::eDefaultSearchScopes::CODELIST:
        return _XPLATSTR("codelist");
    case DefaultSearchScopes::eDefaultSearchScopes::CONCEPTID:
        return _XPLATSTR("conceptId");
    case DefaultSearchScopes::eDefaultSearchScopes::CORE:
        return _XPLATSTR("core");
    case DefaultSearchScopes::eDefaultSearchScopes::DATASTRUCTURE:
        return _XPLATSTR("dataStructure");
    case DefaultSearchScopes::eDefaultSearchScopes::DATASETSTRUCTURE:
        return _XPLATSTR("datasetStructure");
    case DefaultSearchScopes::eDefaultSearchScopes::DEFINITION:
        return _XPLATSTR("definition");
    case DefaultSearchScopes::eDefaultSearchScopes::DESCRIPTION:
        return _XPLATSTR("description");
    case DefaultSearchScopes::eDefaultSearchScopes::DOMAIN:
        return _XPLATSTR("domain");
    case DefaultSearchScopes::eDefaultSearchScopes::EFFECTIVEDATE:
        return _XPLATSTR("effectiveDate");
    case DefaultSearchScopes::eDefaultSearchScopes::EXTENSIBLE:
        return _XPLATSTR("extensible");
    case DefaultSearchScopes::eDefaultSearchScopes::HREF:
        return _XPLATSTR("href");
    case DefaultSearchScopes::eDefaultSearchScopes::LABEL:
        return _XPLATSTR("label");
    case DefaultSearchScopes::eDefaultSearchScopes::MEASURETYPE:
        return _XPLATSTR("measureType");
    case DefaultSearchScopes::eDefaultSearchScopes::NAME:
        return _XPLATSTR("name");
    case DefaultSearchScopes::eDefaultSearchScopes::PREFERREDTERM:
        return _XPLATSTR("preferredTerm");
    case DefaultSearchScopes::eDefaultSearchScopes::PRODUCT:
        return _XPLATSTR("product");
    case DefaultSearchScopes::eDefaultSearchScopes::PRODUCTGROUP:
        return _XPLATSTR("productGroup");
    case DefaultSearchScopes::eDefaultSearchScopes::REGISTRATIONSTATUS:
        return _XPLATSTR("registrationStatus");
    case DefaultSearchScopes::eDefaultSearchScopes::ROLEDESCRIPTION:
        return _XPLATSTR("roleDescription");
    case DefaultSearchScopes::eDefaultSearchScopes::SDTMTARGET:
        return _XPLATSTR("sdtmTarget");
    case DefaultSearchScopes::eDefaultSearchScopes::SIMPLEDATATYPE:
        return _XPLATSTR("simpleDatatype");
    case DefaultSearchScopes::eDefaultSearchScopes::SUBMISSIONVALUE:
        return _XPLATSTR("submissionValue");
    case DefaultSearchScopes::eDefaultSearchScopes::SYNONYMS:
        return _XPLATSTR("synonyms");
    case DefaultSearchScopes::eDefaultSearchScopes::TYPE:
        return _XPLATSTR("type");
    case DefaultSearchScopes::eDefaultSearchScopes::UIHREF:
        return _XPLATSTR("uiHref");
    case DefaultSearchScopes::eDefaultSearchScopes::VALUEDOMAIN:
        return _XPLATSTR("valueDomain");
    case DefaultSearchScopes::eDefaultSearchScopes::VARIABLESET:
        return _XPLATSTR("variableSet");
    case DefaultSearchScopes::eDefaultSearchScopes::VERSION:
        return _XPLATSTR("version");
    default:
        break;
    }
    return {};
}
}

DefaultSearchScopes::DefaultSearchScopes()
{
}

DefaultSearchScopes::~DefaultSearchScopes()
{
}

void DefaultSearchScopes::validate()
{
    // TODO: implement validation
}

web::json::value DefaultSearchScopes::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool DefaultSearchScopes::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void DefaultSearchScopes::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != _XPLATSTR('.'))
    {
        namePrefix.push_back(_XPLATSTR('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool DefaultSearchScopes::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != _XPLATSTR('.'))
    {
        namePrefix.push_back(_XPLATSTR('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

DefaultSearchScopes::eDefaultSearchScopes DefaultSearchScopes::getValue() const
{
   return m_value;
}

void DefaultSearchScopes::setValue(DefaultSearchScopes::eDefaultSearchScopes const value)
{
   m_value = value;
}

DefaultSearchScopes::DefaultSearchScopes(utility::string_t str){
    setValue( strToEnumMap[str] );
}

}
}
}
}



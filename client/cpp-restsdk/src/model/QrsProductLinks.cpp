/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/QrsProductLinks.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

QrsProductLinks::QrsProductLinks()
{
    m_SelfIsSet = false;
    m_PriorVersionIsSet = false;
    m_QrsTermCATIsSet = false;
    m_QrsItemsIsSet = false;
}

QrsProductLinks::~QrsProductLinks()
{
}

void QrsProductLinks::validate()
{
    // TODO: implement validation
}

web::json::value QrsProductLinks::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SelfIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("self"))] = ModelBase::toJson(m_Self);
    }
    if(m_PriorVersionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("priorVersion"))] = ModelBase::toJson(m_PriorVersion);
    }
    if(m_QrsTermCATIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("qrsTermCAT"))] = ModelBase::toJson(m_QrsTermCAT);
    }
    if(m_QrsItemsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("qrsItems"))] = ModelBase::toJson(m_QrsItems);
    }

    return val;
}

bool QrsProductLinks::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("self")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<QrsProductRef> refVal_setSelf;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSelf);
            setSelf(refVal_setSelf);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("priorVersion")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<QrsProductRef> refVal_setPriorVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriorVersion);
            setPriorVersion(refVal_setPriorVersion);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("qrsTermCAT"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("qrsTermCAT")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RootCtTermRef> refVal_setQrsTermCAT;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQrsTermCAT);
            setQrsTermCAT(refVal_setQrsTermCAT);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("qrsItems"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("qrsItems")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<QrsItemsRef> refVal_setQrsItems;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQrsItems);
            setQrsItems(refVal_setQrsItems);
            
        }
    }
    return ok;
}

void QrsProductLinks::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_SelfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("self")), m_Self));
    }
    if(m_PriorVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("priorVersion")), m_PriorVersion));
    }
    if(m_QrsTermCATIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("qrsTermCAT")), m_QrsTermCAT));
    }
    if(m_QrsItemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("qrsItems")), m_QrsItems));
    }
}

bool QrsProductLinks::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        std::shared_ptr<QrsProductRef> refVal_setSelf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("self"))), refVal_setSelf );
        setSelf(refVal_setSelf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))))
    {
        std::shared_ptr<QrsProductRef> refVal_setPriorVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))), refVal_setPriorVersion );
        setPriorVersion(refVal_setPriorVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("qrsTermCAT"))))
    {
        std::shared_ptr<RootCtTermRef> refVal_setQrsTermCAT;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("qrsTermCAT"))), refVal_setQrsTermCAT );
        setQrsTermCAT(refVal_setQrsTermCAT);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("qrsItems"))))
    {
        std::shared_ptr<QrsItemsRef> refVal_setQrsItems;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("qrsItems"))), refVal_setQrsItems );
        setQrsItems(refVal_setQrsItems);
    }
    return ok;
}


std::shared_ptr<QrsProductRef> QrsProductLinks::getSelf() const
{
    return m_Self;
}


void QrsProductLinks::setSelf(const std::shared_ptr<QrsProductRef>& value)
{
    m_Self = value;
    m_SelfIsSet = true;
}

bool QrsProductLinks::selfIsSet() const
{
    return m_SelfIsSet;
}

void QrsProductLinks::unsetSelf()
{
    m_SelfIsSet = false;
}
std::shared_ptr<QrsProductRef> QrsProductLinks::getPriorVersion() const
{
    return m_PriorVersion;
}


void QrsProductLinks::setPriorVersion(const std::shared_ptr<QrsProductRef>& value)
{
    m_PriorVersion = value;
    m_PriorVersionIsSet = true;
}

bool QrsProductLinks::priorVersionIsSet() const
{
    return m_PriorVersionIsSet;
}

void QrsProductLinks::unsetPriorVersion()
{
    m_PriorVersionIsSet = false;
}
std::shared_ptr<RootCtTermRef> QrsProductLinks::getQrsTermCAT() const
{
    return m_QrsTermCAT;
}


void QrsProductLinks::setQrsTermCAT(const std::shared_ptr<RootCtTermRef>& value)
{
    m_QrsTermCAT = value;
    m_QrsTermCATIsSet = true;
}

bool QrsProductLinks::qrsTermCATIsSet() const
{
    return m_QrsTermCATIsSet;
}

void QrsProductLinks::unsetQrsTermCAT()
{
    m_QrsTermCATIsSet = false;
}
std::shared_ptr<QrsItemsRef> QrsProductLinks::getQrsItems() const
{
    return m_QrsItems;
}


void QrsProductLinks::setQrsItems(const std::shared_ptr<QrsItemsRef>& value)
{
    m_QrsItems = value;
    m_QrsItemsIsSet = true;
}

bool QrsProductLinks::qrsItemsIsSet() const
{
    return m_QrsItemsIsSet;
}

void QrsProductLinks::unsetQrsItems()
{
    m_QrsItemsIsSet = false;
}

}
}
}
}



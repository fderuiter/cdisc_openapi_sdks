/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ExportQrsGeneral.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ExportQrsGeneral::ExportQrsGeneral()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Label = utility::conversions::to_string_t("");
    m_LabelIsSet = false;
    m_Effective_Date = utility::conversions::to_string_t("");
    m_Effective_DateIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Categorys_Codelist_C_Code = utility::conversions::to_string_t("");
    m_Categorys_Codelist_C_CodeIsSet = false;
    m_Categorys_Term_C_Code = utility::conversions::to_string_t("");
    m_Categorys_Term_C_CodeIsSet = false;
}

ExportQrsGeneral::~ExportQrsGeneral()
{
}

void ExportQrsGeneral::validate()
{
    // TODO: implement validation
}

web::json::value ExportQrsGeneral::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Name"))] = ModelBase::toJson(m_Name);
    }
    if(m_LabelIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Label"))] = ModelBase::toJson(m_Label);
    }
    if(m_Effective_DateIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Effective Date"))] = ModelBase::toJson(m_Effective_Date);
    }
    if(m_DescriptionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Description"))] = ModelBase::toJson(m_Description);
    }
    if(m_TypeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Type"))] = ModelBase::toJson(m_Type);
    }
    if(m_Categorys_Codelist_C_CodeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Category&#39;s Codelist C-Code"))] = ModelBase::toJson(m_Categorys_Codelist_C_Code);
    }
    if(m_Categorys_Term_C_CodeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Category&#39;s Term C-Code"))] = ModelBase::toJson(m_Categorys_Term_C_Code);
    }

    return val;
}

bool ExportQrsGeneral::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLabel);
            setLabel(refVal_setLabel);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Effective Date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Effective Date")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEffectiveDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEffectiveDate);
            setEffectiveDate(refVal_setEffectiveDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Category&#39;s Codelist C-Code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Category&#39;s Codelist C-Code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCategorysCodelistCCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCategorysCodelistCCode);
            setCategorysCodelistCCode(refVal_setCategorysCodelistCCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Category&#39;s Term C-Code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Category&#39;s Term C-Code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCategorysTermCCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCategorysTermCCode);
            setCategorysTermCCode(refVal_setCategorysTermCCode);
            
        }
    }
    return ok;
}

void ExportQrsGeneral::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Name")), m_Name));
    }
    if(m_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Label")), m_Label));
    }
    if(m_Effective_DateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Effective Date")), m_Effective_Date));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Description")), m_Description));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Type")), m_Type));
    }
    if(m_Categorys_Codelist_C_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Category&#39;s Codelist C-Code")), m_Categorys_Codelist_C_Code));
    }
    if(m_Categorys_Term_C_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Category&#39;s Term C-Code")), m_Categorys_Term_C_Code));
    }
}

bool ExportQrsGeneral::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Label"))))
    {
        utility::string_t refVal_setLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Label"))), refVal_setLabel );
        setLabel(refVal_setLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Effective Date"))))
    {
        utility::string_t refVal_setEffectiveDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Effective Date"))), refVal_setEffectiveDate );
        setEffectiveDate(refVal_setEffectiveDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Category&#39;s Codelist C-Code"))))
    {
        utility::string_t refVal_setCategorysCodelistCCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Category&#39;s Codelist C-Code"))), refVal_setCategorysCodelistCCode );
        setCategorysCodelistCCode(refVal_setCategorysCodelistCCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Category&#39;s Term C-Code"))))
    {
        utility::string_t refVal_setCategorysTermCCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Category&#39;s Term C-Code"))), refVal_setCategorysTermCCode );
        setCategorysTermCCode(refVal_setCategorysTermCCode);
    }
    return ok;
}


utility::string_t ExportQrsGeneral::getName() const
{
    return m_Name;
}


void ExportQrsGeneral::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool ExportQrsGeneral::nameIsSet() const
{
    return m_NameIsSet;
}

void ExportQrsGeneral::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t ExportQrsGeneral::getLabel() const
{
    return m_Label;
}


void ExportQrsGeneral::setLabel(const utility::string_t& value)
{
    m_Label = value;
    m_LabelIsSet = true;
}

bool ExportQrsGeneral::labelIsSet() const
{
    return m_LabelIsSet;
}

void ExportQrsGeneral::unsetLabel()
{
    m_LabelIsSet = false;
}
utility::string_t ExportQrsGeneral::getEffectiveDate() const
{
    return m_Effective_Date;
}


void ExportQrsGeneral::setEffectiveDate(const utility::string_t& value)
{
    m_Effective_Date = value;
    m_Effective_DateIsSet = true;
}

bool ExportQrsGeneral::effectiveDateIsSet() const
{
    return m_Effective_DateIsSet;
}

void ExportQrsGeneral::unsetEffective_Date()
{
    m_Effective_DateIsSet = false;
}
utility::string_t ExportQrsGeneral::getDescription() const
{
    return m_Description;
}


void ExportQrsGeneral::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool ExportQrsGeneral::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void ExportQrsGeneral::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t ExportQrsGeneral::getType() const
{
    return m_Type;
}


void ExportQrsGeneral::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool ExportQrsGeneral::typeIsSet() const
{
    return m_TypeIsSet;
}

void ExportQrsGeneral::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t ExportQrsGeneral::getCategorysCodelistCCode() const
{
    return m_Categorys_Codelist_C_Code;
}


void ExportQrsGeneral::setCategorysCodelistCCode(const utility::string_t& value)
{
    m_Categorys_Codelist_C_Code = value;
    m_Categorys_Codelist_C_CodeIsSet = true;
}

bool ExportQrsGeneral::categorysCodelistCCodeIsSet() const
{
    return m_Categorys_Codelist_C_CodeIsSet;
}

void ExportQrsGeneral::unsetCategorys_Codelist_C_Code()
{
    m_Categorys_Codelist_C_CodeIsSet = false;
}
utility::string_t ExportQrsGeneral::getCategorysTermCCode() const
{
    return m_Categorys_Term_C_Code;
}


void ExportQrsGeneral::setCategorysTermCCode(const utility::string_t& value)
{
    m_Categorys_Term_C_Code = value;
    m_Categorys_Term_C_CodeIsSet = true;
}

bool ExportQrsGeneral::categorysTermCCodeIsSet() const
{
    return m_Categorys_Term_C_CodeIsSet;
}

void ExportQrsGeneral::unsetCategorys_Term_C_Code()
{
    m_Categorys_Term_C_CodeIsSet = false;
}

}
}
}
}



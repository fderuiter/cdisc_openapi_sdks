/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdamProductDatastructuresLinks.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

AdamProductDatastructuresLinks::AdamProductDatastructuresLinks()
{
    m_SelfIsSet = false;
    m_PriorVersionIsSet = false;
    m_DataStructuresIsSet = false;
}

AdamProductDatastructuresLinks::~AdamProductDatastructuresLinks()
{
}

void AdamProductDatastructuresLinks::validate()
{
    // TODO: implement validation
}

web::json::value AdamProductDatastructuresLinks::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SelfIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("self"))] = ModelBase::toJson(m_Self);
    }
    if(m_PriorVersionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("priorVersion"))] = ModelBase::toJson(m_PriorVersion);
    }
    if(m_DataStructuresIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dataStructures"))] = ModelBase::toJson(m_DataStructures);
    }

    return val;
}

bool AdamProductDatastructuresLinks::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("self")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AdamProductDatastructuresRef> refVal_setSelf;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSelf);
            setSelf(refVal_setSelf);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("priorVersion")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AdamProductDatastructuresRef> refVal_setPriorVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriorVersion);
            setPriorVersion(refVal_setPriorVersion);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dataStructures"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dataStructures")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AdamDatastructureRefElement>> refVal_setDataStructures;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataStructures);
            setDataStructures(refVal_setDataStructures);
            
        }
    }
    return ok;
}

void AdamProductDatastructuresLinks::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_SelfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("self")), m_Self));
    }
    if(m_PriorVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("priorVersion")), m_PriorVersion));
    }
    if(m_DataStructuresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dataStructures")), m_DataStructures));
    }
}

bool AdamProductDatastructuresLinks::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        std::shared_ptr<AdamProductDatastructuresRef> refVal_setSelf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("self"))), refVal_setSelf );
        setSelf(refVal_setSelf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))))
    {
        std::shared_ptr<AdamProductDatastructuresRef> refVal_setPriorVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))), refVal_setPriorVersion );
        setPriorVersion(refVal_setPriorVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dataStructures"))))
    {
        std::vector<std::shared_ptr<AdamDatastructureRefElement>> refVal_setDataStructures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dataStructures"))), refVal_setDataStructures );
        setDataStructures(refVal_setDataStructures);
    }
    return ok;
}


std::shared_ptr<AdamProductDatastructuresRef> AdamProductDatastructuresLinks::getSelf() const
{
    return m_Self;
}


void AdamProductDatastructuresLinks::setSelf(const std::shared_ptr<AdamProductDatastructuresRef>& value)
{
    m_Self = value;
    m_SelfIsSet = true;
}

bool AdamProductDatastructuresLinks::selfIsSet() const
{
    return m_SelfIsSet;
}

void AdamProductDatastructuresLinks::unsetSelf()
{
    m_SelfIsSet = false;
}
std::shared_ptr<AdamProductDatastructuresRef> AdamProductDatastructuresLinks::getPriorVersion() const
{
    return m_PriorVersion;
}


void AdamProductDatastructuresLinks::setPriorVersion(const std::shared_ptr<AdamProductDatastructuresRef>& value)
{
    m_PriorVersion = value;
    m_PriorVersionIsSet = true;
}

bool AdamProductDatastructuresLinks::priorVersionIsSet() const
{
    return m_PriorVersionIsSet;
}

void AdamProductDatastructuresLinks::unsetPriorVersion()
{
    m_PriorVersionIsSet = false;
}
std::vector<std::shared_ptr<AdamDatastructureRefElement>> AdamProductDatastructuresLinks::getDataStructures() const
{
    return m_DataStructures;
}


void AdamProductDatastructuresLinks::setDataStructures(const std::vector<std::shared_ptr<AdamDatastructureRefElement>>& value)
{
    m_DataStructures = value;
    m_DataStructuresIsSet = true;
}

bool AdamProductDatastructuresLinks::dataStructuresIsSet() const
{
    return m_DataStructuresIsSet;
}

void AdamProductDatastructuresLinks::unsetDataStructures()
{
    m_DataStructuresIsSet = false;
}

}
}
}
}



/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ExportSendigDatasetsRow.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ExportSendigDatasetsRow::ExportSendigDatasetsRow()
{
    m_Version = utility::conversions::to_string_t("");
    m_VersionIsSet = false;
    m_r_Class = utility::conversions::to_string_t("");
    m_r_ClassIsSet = false;
    m_Dataset_Name = utility::conversions::to_string_t("");
    m_Dataset_NameIsSet = false;
    m_Dataset_Label = utility::conversions::to_string_t("");
    m_Dataset_LabelIsSet = false;
    m_Structure = utility::conversions::to_string_t("");
    m_StructureIsSet = false;
}

ExportSendigDatasetsRow::~ExportSendigDatasetsRow()
{
}

void ExportSendigDatasetsRow::validate()
{
    // TODO: implement validation
}

web::json::value ExportSendigDatasetsRow::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_VersionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Version"))] = ModelBase::toJson(m_Version);
    }
    if(m_r_ClassIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Class"))] = ModelBase::toJson(m_r_Class);
    }
    if(m_Dataset_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Dataset Name"))] = ModelBase::toJson(m_Dataset_Name);
    }
    if(m_Dataset_LabelIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Dataset Label"))] = ModelBase::toJson(m_Dataset_Label);
    }
    if(m_StructureIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Structure"))] = ModelBase::toJson(m_Structure);
    }

    return val;
}

bool ExportSendigDatasetsRow::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRClass);
            setRClass(refVal_setRClass);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Dataset Name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Dataset Name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDatasetName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDatasetName);
            setDatasetName(refVal_setDatasetName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Dataset Label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Dataset Label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDatasetLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDatasetLabel);
            setDatasetLabel(refVal_setDatasetLabel);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Structure"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Structure")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStructure;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStructure);
            setStructure(refVal_setStructure);
            
        }
    }
    return ok;
}

void ExportSendigDatasetsRow::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Version")), m_Version));
    }
    if(m_r_ClassIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Class")), m_r_Class));
    }
    if(m_Dataset_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Dataset Name")), m_Dataset_Name));
    }
    if(m_Dataset_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Dataset Label")), m_Dataset_Label));
    }
    if(m_StructureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Structure")), m_Structure));
    }
}

bool ExportSendigDatasetsRow::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Version"))))
    {
        utility::string_t refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Class"))))
    {
        utility::string_t refVal_setRClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Class"))), refVal_setRClass );
        setRClass(refVal_setRClass);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Dataset Name"))))
    {
        utility::string_t refVal_setDatasetName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Dataset Name"))), refVal_setDatasetName );
        setDatasetName(refVal_setDatasetName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Dataset Label"))))
    {
        utility::string_t refVal_setDatasetLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Dataset Label"))), refVal_setDatasetLabel );
        setDatasetLabel(refVal_setDatasetLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Structure"))))
    {
        utility::string_t refVal_setStructure;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Structure"))), refVal_setStructure );
        setStructure(refVal_setStructure);
    }
    return ok;
}


utility::string_t ExportSendigDatasetsRow::getVersion() const
{
    return m_Version;
}


void ExportSendigDatasetsRow::setVersion(const utility::string_t& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool ExportSendigDatasetsRow::versionIsSet() const
{
    return m_VersionIsSet;
}

void ExportSendigDatasetsRow::unsetVersion()
{
    m_VersionIsSet = false;
}
utility::string_t ExportSendigDatasetsRow::getRClass() const
{
    return m_r_Class;
}


void ExportSendigDatasetsRow::setRClass(const utility::string_t& value)
{
    m_r_Class = value;
    m_r_ClassIsSet = true;
}

bool ExportSendigDatasetsRow::rClassIsSet() const
{
    return m_r_ClassIsSet;
}

void ExportSendigDatasetsRow::unsetr_Class()
{
    m_r_ClassIsSet = false;
}
utility::string_t ExportSendigDatasetsRow::getDatasetName() const
{
    return m_Dataset_Name;
}


void ExportSendigDatasetsRow::setDatasetName(const utility::string_t& value)
{
    m_Dataset_Name = value;
    m_Dataset_NameIsSet = true;
}

bool ExportSendigDatasetsRow::datasetNameIsSet() const
{
    return m_Dataset_NameIsSet;
}

void ExportSendigDatasetsRow::unsetDataset_Name()
{
    m_Dataset_NameIsSet = false;
}
utility::string_t ExportSendigDatasetsRow::getDatasetLabel() const
{
    return m_Dataset_Label;
}


void ExportSendigDatasetsRow::setDatasetLabel(const utility::string_t& value)
{
    m_Dataset_Label = value;
    m_Dataset_LabelIsSet = true;
}

bool ExportSendigDatasetsRow::datasetLabelIsSet() const
{
    return m_Dataset_LabelIsSet;
}

void ExportSendigDatasetsRow::unsetDataset_Label()
{
    m_Dataset_LabelIsSet = false;
}
utility::string_t ExportSendigDatasetsRow::getStructure() const
{
    return m_Structure;
}


void ExportSendigDatasetsRow::setStructure(const utility::string_t& value)
{
    m_Structure = value;
    m_StructureIsSet = true;
}

bool ExportSendigDatasetsRow::structureIsSet() const
{
    return m_StructureIsSet;
}

void ExportSendigDatasetsRow::unsetStructure()
{
    m_StructureIsSet = false;
}

}
}
}
}



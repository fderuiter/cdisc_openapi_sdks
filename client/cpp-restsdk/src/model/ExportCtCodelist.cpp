/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ExportCtCodelist.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ExportCtCodelist::ExportCtCodelist()
{
    m_Code = utility::conversions::to_string_t("");
    m_CodeIsSet = false;
    m_Codelist_Code = utility::conversions::to_string_t("");
    m_Codelist_CodeIsSet = false;
    m_Codelist_Extensible__Yes_No = utility::conversions::to_string_t("");
    m_Codelist_Extensible__Yes_NoIsSet = false;
    m_Codelist_Name = utility::conversions::to_string_t("");
    m_Codelist_NameIsSet = false;
    m_CDISC_Submission_Value = utility::conversions::to_string_t("");
    m_CDISC_Submission_ValueIsSet = false;
    m_CDISC_Synonym_sIsSet = false;
    m_CDISC_Definition = utility::conversions::to_string_t("");
    m_CDISC_DefinitionIsSet = false;
    m_NCI_Preferred_Term = utility::conversions::to_string_t("");
    m_NCI_Preferred_TermIsSet = false;
    m_Standard_and_Date = utility::conversions::to_string_t("");
    m_Standard_and_DateIsSet = false;
    m_IsSet = false;
}

ExportCtCodelist::~ExportCtCodelist()
{
}

void ExportCtCodelist::validate()
{
    // TODO: implement validation
}

web::json::value ExportCtCodelist::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_CodeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Code"))] = ModelBase::toJson(m_Code);
    }
    if(m_Codelist_CodeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Codelist Code"))] = ModelBase::toJson(m_Codelist_Code);
    }
    if(m_Codelist_Extensible__Yes_NoIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Codelist Extensible (Yes/No)"))] = ModelBase::toJson(m_Codelist_Extensible__Yes_No);
    }
    if(m_Codelist_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Codelist Name"))] = ModelBase::toJson(m_Codelist_Name);
    }
    if(m_CDISC_Submission_ValueIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("CDISC Submission Value"))] = ModelBase::toJson(m_CDISC_Submission_Value);
    }
    if(m_CDISC_Synonym_sIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("CDISC Synonym(s)"))] = ModelBase::toJson(m_CDISC_Synonym_s);
    }
    if(m_CDISC_DefinitionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("CDISC Definition"))] = ModelBase::toJson(m_CDISC_Definition);
    }
    if(m_NCI_Preferred_TermIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("NCI Preferred Term"))] = ModelBase::toJson(m_NCI_Preferred_Term);
    }
    if(m_Standard_and_DateIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Standard and Date"))] = ModelBase::toJson(m_Standard_and_Date);
    }
    if(m_IsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR(""))] = ModelBase::toJson(m_);
    }

    return val;
}

bool ExportCtCodelist::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCode);
            setCode(refVal_setCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Codelist Code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Codelist Code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCodelistCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCodelistCode);
            setCodelistCode(refVal_setCodelistCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Codelist Extensible (Yes/No)"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Codelist Extensible (Yes/No)")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCodelistExtensibleYesNo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCodelistExtensibleYesNo);
            setCodelistExtensibleYesNo(refVal_setCodelistExtensibleYesNo);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Codelist Name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Codelist Name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCodelistName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCodelistName);
            setCodelistName(refVal_setCodelistName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("CDISC Submission Value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("CDISC Submission Value")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCDISCSubmissionValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCDISCSubmissionValue);
            setCDISCSubmissionValue(refVal_setCDISCSubmissionValue);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("CDISC Synonym(s)"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("CDISC Synonym(s)")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCDISCSynonymS;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCDISCSynonymS);
            setCDISCSynonymS(refVal_setCDISCSynonymS);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("CDISC Definition"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("CDISC Definition")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCDISCDefinition;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCDISCDefinition);
            setCDISCDefinition(refVal_setCDISCDefinition);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("NCI Preferred Term"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("NCI Preferred Term")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNCIPreferredTerm;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNCIPreferredTerm);
            setNCIPreferredTerm(refVal_setNCIPreferredTerm);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Standard and Date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Standard and Date")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStandardAndDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStandardAndDate);
            setStandardAndDate(refVal_setStandardAndDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR(""))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ExportCtTerm>> refVal_set;
            ok &= ModelBase::fromJson(fieldValue, refVal_set);
            set(refVal_set);
            
        }
    }
    return ok;
}

void ExportCtCodelist::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Code")), m_Code));
    }
    if(m_Codelist_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Codelist Code")), m_Codelist_Code));
    }
    if(m_Codelist_Extensible__Yes_NoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Codelist Extensible (Yes/No)")), m_Codelist_Extensible__Yes_No));
    }
    if(m_Codelist_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Codelist Name")), m_Codelist_Name));
    }
    if(m_CDISC_Submission_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("CDISC Submission Value")), m_CDISC_Submission_Value));
    }
    if(m_CDISC_Synonym_sIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("CDISC Synonym(s)")), m_CDISC_Synonym_s));
    }
    if(m_CDISC_DefinitionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("CDISC Definition")), m_CDISC_Definition));
    }
    if(m_NCI_Preferred_TermIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("NCI Preferred Term")), m_NCI_Preferred_Term));
    }
    if(m_Standard_and_DateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Standard and Date")), m_Standard_and_Date));
    }
    if(m_IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("")), m_));
    }
}

bool ExportCtCodelist::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Code"))))
    {
        utility::string_t refVal_setCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Code"))), refVal_setCode );
        setCode(refVal_setCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Codelist Code"))))
    {
        utility::string_t refVal_setCodelistCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Codelist Code"))), refVal_setCodelistCode );
        setCodelistCode(refVal_setCodelistCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Codelist Extensible (Yes/No)"))))
    {
        utility::string_t refVal_setCodelistExtensibleYesNo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Codelist Extensible (Yes/No)"))), refVal_setCodelistExtensibleYesNo );
        setCodelistExtensibleYesNo(refVal_setCodelistExtensibleYesNo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Codelist Name"))))
    {
        utility::string_t refVal_setCodelistName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Codelist Name"))), refVal_setCodelistName );
        setCodelistName(refVal_setCodelistName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("CDISC Submission Value"))))
    {
        utility::string_t refVal_setCDISCSubmissionValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("CDISC Submission Value"))), refVal_setCDISCSubmissionValue );
        setCDISCSubmissionValue(refVal_setCDISCSubmissionValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("CDISC Synonym(s)"))))
    {
        std::vector<utility::string_t> refVal_setCDISCSynonymS;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("CDISC Synonym(s)"))), refVal_setCDISCSynonymS );
        setCDISCSynonymS(refVal_setCDISCSynonymS);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("CDISC Definition"))))
    {
        utility::string_t refVal_setCDISCDefinition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("CDISC Definition"))), refVal_setCDISCDefinition );
        setCDISCDefinition(refVal_setCDISCDefinition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("NCI Preferred Term"))))
    {
        utility::string_t refVal_setNCIPreferredTerm;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("NCI Preferred Term"))), refVal_setNCIPreferredTerm );
        setNCIPreferredTerm(refVal_setNCIPreferredTerm);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Standard and Date"))))
    {
        utility::string_t refVal_setStandardAndDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Standard and Date"))), refVal_setStandardAndDate );
        setStandardAndDate(refVal_setStandardAndDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR(""))))
    {
        std::vector<std::shared_ptr<ExportCtTerm>> refVal_set;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR(""))), refVal_set );
        set(refVal_set);
    }
    return ok;
}


utility::string_t ExportCtCodelist::getCode() const
{
    return m_Code;
}


void ExportCtCodelist::setCode(const utility::string_t& value)
{
    m_Code = value;
    m_CodeIsSet = true;
}

bool ExportCtCodelist::codeIsSet() const
{
    return m_CodeIsSet;
}

void ExportCtCodelist::unsetCode()
{
    m_CodeIsSet = false;
}
utility::string_t ExportCtCodelist::getCodelistCode() const
{
    return m_Codelist_Code;
}


void ExportCtCodelist::setCodelistCode(const utility::string_t& value)
{
    m_Codelist_Code = value;
    m_Codelist_CodeIsSet = true;
}

bool ExportCtCodelist::codelistCodeIsSet() const
{
    return m_Codelist_CodeIsSet;
}

void ExportCtCodelist::unsetCodelist_Code()
{
    m_Codelist_CodeIsSet = false;
}
utility::string_t ExportCtCodelist::getCodelistExtensibleYesNo() const
{
    return m_Codelist_Extensible__Yes_No;
}


void ExportCtCodelist::setCodelistExtensibleYesNo(const utility::string_t& value)
{
    m_Codelist_Extensible__Yes_No = value;
    m_Codelist_Extensible__Yes_NoIsSet = true;
}

bool ExportCtCodelist::codelistExtensibleYesNoIsSet() const
{
    return m_Codelist_Extensible__Yes_NoIsSet;
}

void ExportCtCodelist::unsetCodelist_Extensible__Yes_No()
{
    m_Codelist_Extensible__Yes_NoIsSet = false;
}
utility::string_t ExportCtCodelist::getCodelistName() const
{
    return m_Codelist_Name;
}


void ExportCtCodelist::setCodelistName(const utility::string_t& value)
{
    m_Codelist_Name = value;
    m_Codelist_NameIsSet = true;
}

bool ExportCtCodelist::codelistNameIsSet() const
{
    return m_Codelist_NameIsSet;
}

void ExportCtCodelist::unsetCodelist_Name()
{
    m_Codelist_NameIsSet = false;
}
utility::string_t ExportCtCodelist::getCDISCSubmissionValue() const
{
    return m_CDISC_Submission_Value;
}


void ExportCtCodelist::setCDISCSubmissionValue(const utility::string_t& value)
{
    m_CDISC_Submission_Value = value;
    m_CDISC_Submission_ValueIsSet = true;
}

bool ExportCtCodelist::cDISCSubmissionValueIsSet() const
{
    return m_CDISC_Submission_ValueIsSet;
}

void ExportCtCodelist::unsetCDISC_Submission_Value()
{
    m_CDISC_Submission_ValueIsSet = false;
}
std::vector<utility::string_t> ExportCtCodelist::getCDISCSynonymS() const
{
    return m_CDISC_Synonym_s;
}


void ExportCtCodelist::setCDISCSynonymS(const std::vector<utility::string_t>& value)
{
    m_CDISC_Synonym_s = value;
    m_CDISC_Synonym_sIsSet = true;
}

bool ExportCtCodelist::cDISCSynonymSIsSet() const
{
    return m_CDISC_Synonym_sIsSet;
}

void ExportCtCodelist::unsetCDISC_Synonym_s()
{
    m_CDISC_Synonym_sIsSet = false;
}
utility::string_t ExportCtCodelist::getCDISCDefinition() const
{
    return m_CDISC_Definition;
}


void ExportCtCodelist::setCDISCDefinition(const utility::string_t& value)
{
    m_CDISC_Definition = value;
    m_CDISC_DefinitionIsSet = true;
}

bool ExportCtCodelist::cDISCDefinitionIsSet() const
{
    return m_CDISC_DefinitionIsSet;
}

void ExportCtCodelist::unsetCDISC_Definition()
{
    m_CDISC_DefinitionIsSet = false;
}
utility::string_t ExportCtCodelist::getNCIPreferredTerm() const
{
    return m_NCI_Preferred_Term;
}


void ExportCtCodelist::setNCIPreferredTerm(const utility::string_t& value)
{
    m_NCI_Preferred_Term = value;
    m_NCI_Preferred_TermIsSet = true;
}

bool ExportCtCodelist::nCIPreferredTermIsSet() const
{
    return m_NCI_Preferred_TermIsSet;
}

void ExportCtCodelist::unsetNCI_Preferred_Term()
{
    m_NCI_Preferred_TermIsSet = false;
}
utility::string_t ExportCtCodelist::getStandardAndDate() const
{
    return m_Standard_and_Date;
}


void ExportCtCodelist::setStandardAndDate(const utility::string_t& value)
{
    m_Standard_and_Date = value;
    m_Standard_and_DateIsSet = true;
}

bool ExportCtCodelist::standardAndDateIsSet() const
{
    return m_Standard_and_DateIsSet;
}

void ExportCtCodelist::unsetStandard_and_Date()
{
    m_Standard_and_DateIsSet = false;
}
std::vector<std::shared_ptr<ExportCtTerm>> ExportCtCodelist::get() const
{
    return m_;
}


void ExportCtCodelist::set(const std::vector<std::shared_ptr<ExportCtTerm>>& value)
{
    m_ = value;
    m_IsSet = true;
}

bool ExportCtCodelist::IsSet() const
{
    return m_IsSet;
}

void ExportCtCodelist::unset()
{
    m_IsSet = false;
}

}
}
}
}



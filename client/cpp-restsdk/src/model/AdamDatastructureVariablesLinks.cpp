/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdamDatastructureVariablesLinks.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

AdamDatastructureVariablesLinks::AdamDatastructureVariablesLinks()
{
    m_SelfIsSet = false;
    m_ParentProductIsSet = false;
    m_PriorVersionIsSet = false;
    m_AnalysisVariablesIsSet = false;
}

AdamDatastructureVariablesLinks::~AdamDatastructureVariablesLinks()
{
}

void AdamDatastructureVariablesLinks::validate()
{
    // TODO: implement validation
}

web::json::value AdamDatastructureVariablesLinks::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SelfIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("self"))] = ModelBase::toJson(m_Self);
    }
    if(m_ParentProductIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("parentProduct"))] = ModelBase::toJson(m_ParentProduct);
    }
    if(m_PriorVersionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("priorVersion"))] = ModelBase::toJson(m_PriorVersion);
    }
    if(m_AnalysisVariablesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("analysisVariables"))] = ModelBase::toJson(m_AnalysisVariables);
    }

    return val;
}

bool AdamDatastructureVariablesLinks::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("self")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AdamDatastructureVariablesRef> refVal_setSelf;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSelf);
            setSelf(refVal_setSelf);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("parentProduct"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("parentProduct")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AdamProductRef> refVal_setParentProduct;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParentProduct);
            setParentProduct(refVal_setParentProduct);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("priorVersion")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AdamDatastructureVariablesRef> refVal_setPriorVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriorVersion);
            setPriorVersion(refVal_setPriorVersion);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("analysisVariables"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("analysisVariables")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AdamVariableRefElement>> refVal_setAnalysisVariables;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAnalysisVariables);
            setAnalysisVariables(refVal_setAnalysisVariables);
            
        }
    }
    return ok;
}

void AdamDatastructureVariablesLinks::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_SelfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("self")), m_Self));
    }
    if(m_ParentProductIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("parentProduct")), m_ParentProduct));
    }
    if(m_PriorVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("priorVersion")), m_PriorVersion));
    }
    if(m_AnalysisVariablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("analysisVariables")), m_AnalysisVariables));
    }
}

bool AdamDatastructureVariablesLinks::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        std::shared_ptr<AdamDatastructureVariablesRef> refVal_setSelf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("self"))), refVal_setSelf );
        setSelf(refVal_setSelf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("parentProduct"))))
    {
        std::shared_ptr<AdamProductRef> refVal_setParentProduct;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("parentProduct"))), refVal_setParentProduct );
        setParentProduct(refVal_setParentProduct);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))))
    {
        std::shared_ptr<AdamDatastructureVariablesRef> refVal_setPriorVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))), refVal_setPriorVersion );
        setPriorVersion(refVal_setPriorVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("analysisVariables"))))
    {
        std::vector<std::shared_ptr<AdamVariableRefElement>> refVal_setAnalysisVariables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("analysisVariables"))), refVal_setAnalysisVariables );
        setAnalysisVariables(refVal_setAnalysisVariables);
    }
    return ok;
}


std::shared_ptr<AdamDatastructureVariablesRef> AdamDatastructureVariablesLinks::getSelf() const
{
    return m_Self;
}


void AdamDatastructureVariablesLinks::setSelf(const std::shared_ptr<AdamDatastructureVariablesRef>& value)
{
    m_Self = value;
    m_SelfIsSet = true;
}

bool AdamDatastructureVariablesLinks::selfIsSet() const
{
    return m_SelfIsSet;
}

void AdamDatastructureVariablesLinks::unsetSelf()
{
    m_SelfIsSet = false;
}
std::shared_ptr<AdamProductRef> AdamDatastructureVariablesLinks::getParentProduct() const
{
    return m_ParentProduct;
}


void AdamDatastructureVariablesLinks::setParentProduct(const std::shared_ptr<AdamProductRef>& value)
{
    m_ParentProduct = value;
    m_ParentProductIsSet = true;
}

bool AdamDatastructureVariablesLinks::parentProductIsSet() const
{
    return m_ParentProductIsSet;
}

void AdamDatastructureVariablesLinks::unsetParentProduct()
{
    m_ParentProductIsSet = false;
}
std::shared_ptr<AdamDatastructureVariablesRef> AdamDatastructureVariablesLinks::getPriorVersion() const
{
    return m_PriorVersion;
}


void AdamDatastructureVariablesLinks::setPriorVersion(const std::shared_ptr<AdamDatastructureVariablesRef>& value)
{
    m_PriorVersion = value;
    m_PriorVersionIsSet = true;
}

bool AdamDatastructureVariablesLinks::priorVersionIsSet() const
{
    return m_PriorVersionIsSet;
}

void AdamDatastructureVariablesLinks::unsetPriorVersion()
{
    m_PriorVersionIsSet = false;
}
std::vector<std::shared_ptr<AdamVariableRefElement>> AdamDatastructureVariablesLinks::getAnalysisVariables() const
{
    return m_AnalysisVariables;
}


void AdamDatastructureVariablesLinks::setAnalysisVariables(const std::vector<std::shared_ptr<AdamVariableRefElement>>& value)
{
    m_AnalysisVariables = value;
    m_AnalysisVariablesIsSet = true;
}

bool AdamDatastructureVariablesLinks::analysisVariablesIsSet() const
{
    return m_AnalysisVariablesIsSet;
}

void AdamDatastructureVariablesLinks::unsetAnalysisVariables()
{
    m_AnalysisVariablesIsSet = false;
}

}
}
}
}



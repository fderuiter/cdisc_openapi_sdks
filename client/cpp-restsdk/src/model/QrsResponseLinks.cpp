/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/QrsResponseLinks.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

QrsResponseLinks::QrsResponseLinks()
{
    m_QrsResponseORRESIsSet = false;
    m_QrsResponseORRESUIsSet = false;
    m_QrsResponseSTRESCIsSet = false;
    m_QrsResponseSTRESCUIsSet = false;
}

QrsResponseLinks::~QrsResponseLinks()
{
}

void QrsResponseLinks::validate()
{
    // TODO: implement validation
}

web::json::value QrsResponseLinks::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_QrsResponseORRESIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("qrsResponseORRES"))] = ModelBase::toJson(m_QrsResponseORRES);
    }
    if(m_QrsResponseORRESUIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("qrsResponseORRESU"))] = ModelBase::toJson(m_QrsResponseORRESU);
    }
    if(m_QrsResponseSTRESCIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("qrsResponseSTRESC"))] = ModelBase::toJson(m_QrsResponseSTRESC);
    }
    if(m_QrsResponseSTRESCUIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("qrsResponseSTRESCU"))] = ModelBase::toJson(m_QrsResponseSTRESCU);
    }

    return val;
}

bool QrsResponseLinks::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("qrsResponseORRES"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("qrsResponseORRES")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RootCtTermRef> refVal_setQrsResponseORRES;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQrsResponseORRES);
            setQrsResponseORRES(refVal_setQrsResponseORRES);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("qrsResponseORRESU"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("qrsResponseORRESU")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RootCtTermRef> refVal_setQrsResponseORRESU;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQrsResponseORRESU);
            setQrsResponseORRESU(refVal_setQrsResponseORRESU);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("qrsResponseSTRESC"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("qrsResponseSTRESC")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RootCtTermRef> refVal_setQrsResponseSTRESC;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQrsResponseSTRESC);
            setQrsResponseSTRESC(refVal_setQrsResponseSTRESC);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("qrsResponseSTRESCU"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("qrsResponseSTRESCU")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RootCtTermRef> refVal_setQrsResponseSTRESCU;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQrsResponseSTRESCU);
            setQrsResponseSTRESCU(refVal_setQrsResponseSTRESCU);
            
        }
    }
    return ok;
}

void QrsResponseLinks::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_QrsResponseORRESIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("qrsResponseORRES")), m_QrsResponseORRES));
    }
    if(m_QrsResponseORRESUIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("qrsResponseORRESU")), m_QrsResponseORRESU));
    }
    if(m_QrsResponseSTRESCIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("qrsResponseSTRESC")), m_QrsResponseSTRESC));
    }
    if(m_QrsResponseSTRESCUIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("qrsResponseSTRESCU")), m_QrsResponseSTRESCU));
    }
}

bool QrsResponseLinks::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("qrsResponseORRES"))))
    {
        std::shared_ptr<RootCtTermRef> refVal_setQrsResponseORRES;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("qrsResponseORRES"))), refVal_setQrsResponseORRES );
        setQrsResponseORRES(refVal_setQrsResponseORRES);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("qrsResponseORRESU"))))
    {
        std::shared_ptr<RootCtTermRef> refVal_setQrsResponseORRESU;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("qrsResponseORRESU"))), refVal_setQrsResponseORRESU );
        setQrsResponseORRESU(refVal_setQrsResponseORRESU);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("qrsResponseSTRESC"))))
    {
        std::shared_ptr<RootCtTermRef> refVal_setQrsResponseSTRESC;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("qrsResponseSTRESC"))), refVal_setQrsResponseSTRESC );
        setQrsResponseSTRESC(refVal_setQrsResponseSTRESC);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("qrsResponseSTRESCU"))))
    {
        std::shared_ptr<RootCtTermRef> refVal_setQrsResponseSTRESCU;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("qrsResponseSTRESCU"))), refVal_setQrsResponseSTRESCU );
        setQrsResponseSTRESCU(refVal_setQrsResponseSTRESCU);
    }
    return ok;
}


std::shared_ptr<RootCtTermRef> QrsResponseLinks::getQrsResponseORRES() const
{
    return m_QrsResponseORRES;
}


void QrsResponseLinks::setQrsResponseORRES(const std::shared_ptr<RootCtTermRef>& value)
{
    m_QrsResponseORRES = value;
    m_QrsResponseORRESIsSet = true;
}

bool QrsResponseLinks::qrsResponseORRESIsSet() const
{
    return m_QrsResponseORRESIsSet;
}

void QrsResponseLinks::unsetQrsResponseORRES()
{
    m_QrsResponseORRESIsSet = false;
}
std::shared_ptr<RootCtTermRef> QrsResponseLinks::getQrsResponseORRESU() const
{
    return m_QrsResponseORRESU;
}


void QrsResponseLinks::setQrsResponseORRESU(const std::shared_ptr<RootCtTermRef>& value)
{
    m_QrsResponseORRESU = value;
    m_QrsResponseORRESUIsSet = true;
}

bool QrsResponseLinks::qrsResponseORRESUIsSet() const
{
    return m_QrsResponseORRESUIsSet;
}

void QrsResponseLinks::unsetQrsResponseORRESU()
{
    m_QrsResponseORRESUIsSet = false;
}
std::shared_ptr<RootCtTermRef> QrsResponseLinks::getQrsResponseSTRESC() const
{
    return m_QrsResponseSTRESC;
}


void QrsResponseLinks::setQrsResponseSTRESC(const std::shared_ptr<RootCtTermRef>& value)
{
    m_QrsResponseSTRESC = value;
    m_QrsResponseSTRESCIsSet = true;
}

bool QrsResponseLinks::qrsResponseSTRESCIsSet() const
{
    return m_QrsResponseSTRESCIsSet;
}

void QrsResponseLinks::unsetQrsResponseSTRESC()
{
    m_QrsResponseSTRESCIsSet = false;
}
std::shared_ptr<RootCtTermRef> QrsResponseLinks::getQrsResponseSTRESCU() const
{
    return m_QrsResponseSTRESCU;
}


void QrsResponseLinks::setQrsResponseSTRESCU(const std::shared_ptr<RootCtTermRef>& value)
{
    m_QrsResponseSTRESCU = value;
    m_QrsResponseSTRESCUIsSet = true;
}

bool QrsResponseLinks::qrsResponseSTRESCUIsSet() const
{
    return m_QrsResponseSTRESCUIsSet;
}

void QrsResponseLinks::unsetQrsResponseSTRESCU()
{
    m_QrsResponseSTRESCUIsSet = false;
}

}
}
}
}



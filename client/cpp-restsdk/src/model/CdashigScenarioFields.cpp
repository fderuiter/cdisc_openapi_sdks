/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CdashigScenarioFields.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

CdashigScenarioFields::CdashigScenarioFields()
{
    m_Ordinal = utility::conversions::to_string_t("");
    m_OrdinalIsSet = false;
    m_Domain = utility::conversions::to_string_t("");
    m_DomainIsSet = false;
    m_Scenario = utility::conversions::to_string_t("");
    m_ScenarioIsSet = false;
    m__linksIsSet = false;
}

CdashigScenarioFields::~CdashigScenarioFields()
{
}

void CdashigScenarioFields::validate()
{
    // TODO: implement validation
}

web::json::value CdashigScenarioFields::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_OrdinalIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("ordinal"))] = ModelBase::toJson(m_Ordinal);
    }
    if(m_DomainIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("domain"))] = ModelBase::toJson(m_Domain);
    }
    if(m_ScenarioIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("scenario"))] = ModelBase::toJson(m_Scenario);
    }
    if(m__linksIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("_links"))] = ModelBase::toJson(m__links);
    }

    return val;
}

bool CdashigScenarioFields::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("ordinal"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("ordinal")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOrdinal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrdinal);
            setOrdinal(refVal_setOrdinal);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("domain"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("domain")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDomain;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomain);
            setDomain(refVal_setDomain);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("scenario"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("scenario")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setScenario;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScenario);
            setScenario(refVal_setScenario);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("_links"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("_links")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CdashigScenarioFieldsLinks> refVal_setLinks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLinks);
            setLinks(refVal_setLinks);
            
        }
    }
    return ok;
}

void CdashigScenarioFields::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_OrdinalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("ordinal")), m_Ordinal));
    }
    if(m_DomainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("domain")), m_Domain));
    }
    if(m_ScenarioIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("scenario")), m_Scenario));
    }
    if(m__linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("_links")), m__links));
    }
}

bool CdashigScenarioFields::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("ordinal"))))
    {
        utility::string_t refVal_setOrdinal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("ordinal"))), refVal_setOrdinal );
        setOrdinal(refVal_setOrdinal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("domain"))))
    {
        utility::string_t refVal_setDomain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("domain"))), refVal_setDomain );
        setDomain(refVal_setDomain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("scenario"))))
    {
        utility::string_t refVal_setScenario;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("scenario"))), refVal_setScenario );
        setScenario(refVal_setScenario);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("_links"))))
    {
        std::shared_ptr<CdashigScenarioFieldsLinks> refVal_setLinks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("_links"))), refVal_setLinks );
        setLinks(refVal_setLinks);
    }
    return ok;
}


utility::string_t CdashigScenarioFields::getOrdinal() const
{
    return m_Ordinal;
}


void CdashigScenarioFields::setOrdinal(const utility::string_t& value)
{
    m_Ordinal = value;
    m_OrdinalIsSet = true;
}

bool CdashigScenarioFields::ordinalIsSet() const
{
    return m_OrdinalIsSet;
}

void CdashigScenarioFields::unsetOrdinal()
{
    m_OrdinalIsSet = false;
}
utility::string_t CdashigScenarioFields::getDomain() const
{
    return m_Domain;
}


void CdashigScenarioFields::setDomain(const utility::string_t& value)
{
    m_Domain = value;
    m_DomainIsSet = true;
}

bool CdashigScenarioFields::domainIsSet() const
{
    return m_DomainIsSet;
}

void CdashigScenarioFields::unsetDomain()
{
    m_DomainIsSet = false;
}
utility::string_t CdashigScenarioFields::getScenario() const
{
    return m_Scenario;
}


void CdashigScenarioFields::setScenario(const utility::string_t& value)
{
    m_Scenario = value;
    m_ScenarioIsSet = true;
}

bool CdashigScenarioFields::scenarioIsSet() const
{
    return m_ScenarioIsSet;
}

void CdashigScenarioFields::unsetScenario()
{
    m_ScenarioIsSet = false;
}
std::shared_ptr<CdashigScenarioFieldsLinks> CdashigScenarioFields::getLinks() const
{
    return m__links;
}


void CdashigScenarioFields::setLinks(const std::shared_ptr<CdashigScenarioFieldsLinks>& value)
{
    m__links = value;
    m__linksIsSet = true;
}

bool CdashigScenarioFields::linksIsSet() const
{
    return m__linksIsSet;
}

void CdashigScenarioFields::unset_links()
{
    m__linksIsSet = false;
}

}
}
}
}



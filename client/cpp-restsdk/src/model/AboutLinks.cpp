/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AboutLinks.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

AboutLinks::AboutLinks()
{
    m_SelfIsSet = false;
    m_LastupdatedIsSet = false;
}

AboutLinks::~AboutLinks()
{
}

void AboutLinks::validate()
{
    // TODO: implement validation
}

web::json::value AboutLinks::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SelfIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("self"))] = ModelBase::toJson(m_Self);
    }
    if(m_LastupdatedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("lastupdated"))] = ModelBase::toJson(m_Lastupdated);
    }

    return val;
}

bool AboutLinks::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("self")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AboutRef> refVal_setSelf;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSelf);
            setSelf(refVal_setSelf);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("lastupdated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("lastupdated")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<LastupdatedRef> refVal_setLastupdated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastupdated);
            setLastupdated(refVal_setLastupdated);
            
        }
    }
    return ok;
}

void AboutLinks::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_SelfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("self")), m_Self));
    }
    if(m_LastupdatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("lastupdated")), m_Lastupdated));
    }
}

bool AboutLinks::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        std::shared_ptr<AboutRef> refVal_setSelf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("self"))), refVal_setSelf );
        setSelf(refVal_setSelf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("lastupdated"))))
    {
        std::shared_ptr<LastupdatedRef> refVal_setLastupdated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("lastupdated"))), refVal_setLastupdated );
        setLastupdated(refVal_setLastupdated);
    }
    return ok;
}


std::shared_ptr<AboutRef> AboutLinks::getSelf() const
{
    return m_Self;
}


void AboutLinks::setSelf(const std::shared_ptr<AboutRef>& value)
{
    m_Self = value;
    m_SelfIsSet = true;
}

bool AboutLinks::selfIsSet() const
{
    return m_SelfIsSet;
}

void AboutLinks::unsetSelf()
{
    m_SelfIsSet = false;
}
std::shared_ptr<LastupdatedRef> AboutLinks::getLastupdated() const
{
    return m_Lastupdated;
}


void AboutLinks::setLastupdated(const std::shared_ptr<LastupdatedRef>& value)
{
    m_Lastupdated = value;
    m_LastupdatedIsSet = true;
}

bool AboutLinks::lastupdatedIsSet() const
{
    return m_LastupdatedIsSet;
}

void AboutLinks::unsetLastupdated()
{
    m_LastupdatedIsSet = false;
}

}
}
}
}



/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ExportCdashigDomainVariablesRow.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ExportCdashigDomainVariablesRow::ExportCdashigDomainVariablesRow()
{
    m_Version = utility::conversions::to_string_t("");
    m_VersionIsSet = false;
    m_r_Class = utility::conversions::to_string_t("");
    m_r_ClassIsSet = false;
    m_Domain = utility::conversions::to_string_t("");
    m_DomainIsSet = false;
    m_Data_Collection_Scenario = utility::conversions::to_string_t("");
    m_Data_Collection_ScenarioIsSet = false;
    m_Variable_Order = utility::conversions::to_string_t("");
    m_Variable_OrderIsSet = false;
    m_CDASHIG_Variable = utility::conversions::to_string_t("");
    m_CDASHIG_VariableIsSet = false;
    m_CDASHIG_Variable_Label = utility::conversions::to_string_t("");
    m_CDASHIG_Variable_LabelIsSet = false;
    m_DRAFT_CDASHIG_Definition = utility::conversions::to_string_t("");
    m_DRAFT_CDASHIG_DefinitionIsSet = false;
    m_Question_Text = utility::conversions::to_string_t("");
    m_Question_TextIsSet = false;
    m_Prompt = utility::conversions::to_string_t("");
    m_PromptIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_CDASHIG_Core = utility::conversions::to_string_t("");
    m_CDASHIG_CoreIsSet = false;
    m_Case_Report_Form_Completion_Instructions = utility::conversions::to_string_t("");
    m_Case_Report_Form_Completion_InstructionsIsSet = false;
    m_SDTMIG_TargetIsSet = false;
    m_Mapping_Instructions = utility::conversions::to_string_t("");
    m_Mapping_InstructionsIsSet = false;
    m_Controlled_Terminology_Codelist_Name = utility::conversions::to_string_t("");
    m_Controlled_Terminology_Codelist_NameIsSet = false;
    m_Implementation_Notes = utility::conversions::to_string_t("");
    m_Implementation_NotesIsSet = false;
}

ExportCdashigDomainVariablesRow::~ExportCdashigDomainVariablesRow()
{
}

void ExportCdashigDomainVariablesRow::validate()
{
    // TODO: implement validation
}

web::json::value ExportCdashigDomainVariablesRow::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_VersionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Version"))] = ModelBase::toJson(m_Version);
    }
    if(m_r_ClassIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Class"))] = ModelBase::toJson(m_r_Class);
    }
    if(m_DomainIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Domain"))] = ModelBase::toJson(m_Domain);
    }
    if(m_Data_Collection_ScenarioIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Data Collection Scenario"))] = ModelBase::toJson(m_Data_Collection_Scenario);
    }
    if(m_Variable_OrderIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Variable Order"))] = ModelBase::toJson(m_Variable_Order);
    }
    if(m_CDASHIG_VariableIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("CDASHIG Variable"))] = ModelBase::toJson(m_CDASHIG_Variable);
    }
    if(m_CDASHIG_Variable_LabelIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("CDASHIG Variable Label"))] = ModelBase::toJson(m_CDASHIG_Variable_Label);
    }
    if(m_DRAFT_CDASHIG_DefinitionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("DRAFT CDASHIG Definition"))] = ModelBase::toJson(m_DRAFT_CDASHIG_Definition);
    }
    if(m_Question_TextIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Question Text"))] = ModelBase::toJson(m_Question_Text);
    }
    if(m_PromptIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Prompt"))] = ModelBase::toJson(m_Prompt);
    }
    if(m_TypeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Type"))] = ModelBase::toJson(m_Type);
    }
    if(m_CDASHIG_CoreIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("CDASHIG Core"))] = ModelBase::toJson(m_CDASHIG_Core);
    }
    if(m_Case_Report_Form_Completion_InstructionsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Case Report Form Completion Instructions"))] = ModelBase::toJson(m_Case_Report_Form_Completion_Instructions);
    }
    if(m_SDTMIG_TargetIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("SDTMIG Target"))] = ModelBase::toJson(m_SDTMIG_Target);
    }
    if(m_Mapping_InstructionsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Mapping Instructions"))] = ModelBase::toJson(m_Mapping_Instructions);
    }
    if(m_Controlled_Terminology_Codelist_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Controlled Terminology Codelist Name"))] = ModelBase::toJson(m_Controlled_Terminology_Codelist_Name);
    }
    if(m_Implementation_NotesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("Implementation Notes"))] = ModelBase::toJson(m_Implementation_Notes);
    }

    return val;
}

bool ExportCdashigDomainVariablesRow::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRClass);
            setRClass(refVal_setRClass);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Domain"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Domain")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDomain;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomain);
            setDomain(refVal_setDomain);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Data Collection Scenario"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Data Collection Scenario")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDataCollectionScenario;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataCollectionScenario);
            setDataCollectionScenario(refVal_setDataCollectionScenario);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Variable Order"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Variable Order")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVariableOrder;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariableOrder);
            setVariableOrder(refVal_setVariableOrder);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("CDASHIG Variable"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("CDASHIG Variable")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCDASHIGVariable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCDASHIGVariable);
            setCDASHIGVariable(refVal_setCDASHIGVariable);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("CDASHIG Variable Label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("CDASHIG Variable Label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCDASHIGVariableLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCDASHIGVariableLabel);
            setCDASHIGVariableLabel(refVal_setCDASHIGVariableLabel);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("DRAFT CDASHIG Definition"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("DRAFT CDASHIG Definition")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDRAFTCDASHIGDefinition;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDRAFTCDASHIGDefinition);
            setDRAFTCDASHIGDefinition(refVal_setDRAFTCDASHIGDefinition);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Question Text"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Question Text")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setQuestionText;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQuestionText);
            setQuestionText(refVal_setQuestionText);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Prompt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Prompt")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPrompt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrompt);
            setPrompt(refVal_setPrompt);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("CDASHIG Core"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("CDASHIG Core")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCDASHIGCore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCDASHIGCore);
            setCDASHIGCore(refVal_setCDASHIGCore);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Case Report Form Completion Instructions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Case Report Form Completion Instructions")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCaseReportFormCompletionInstructions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCaseReportFormCompletionInstructions);
            setCaseReportFormCompletionInstructions(refVal_setCaseReportFormCompletionInstructions);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("SDTMIG Target"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("SDTMIG Target")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setSDTMIGTarget;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSDTMIGTarget);
            setSDTMIGTarget(refVal_setSDTMIGTarget);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Mapping Instructions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Mapping Instructions")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMappingInstructions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMappingInstructions);
            setMappingInstructions(refVal_setMappingInstructions);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Controlled Terminology Codelist Name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Controlled Terminology Codelist Name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setControlledTerminologyCodelistName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setControlledTerminologyCodelistName);
            setControlledTerminologyCodelistName(refVal_setControlledTerminologyCodelistName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("Implementation Notes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("Implementation Notes")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImplementationNotes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImplementationNotes);
            setImplementationNotes(refVal_setImplementationNotes);
            
        }
    }
    return ok;
}

void ExportCdashigDomainVariablesRow::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Version")), m_Version));
    }
    if(m_r_ClassIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Class")), m_r_Class));
    }
    if(m_DomainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Domain")), m_Domain));
    }
    if(m_Data_Collection_ScenarioIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Data Collection Scenario")), m_Data_Collection_Scenario));
    }
    if(m_Variable_OrderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Variable Order")), m_Variable_Order));
    }
    if(m_CDASHIG_VariableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("CDASHIG Variable")), m_CDASHIG_Variable));
    }
    if(m_CDASHIG_Variable_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("CDASHIG Variable Label")), m_CDASHIG_Variable_Label));
    }
    if(m_DRAFT_CDASHIG_DefinitionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("DRAFT CDASHIG Definition")), m_DRAFT_CDASHIG_Definition));
    }
    if(m_Question_TextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Question Text")), m_Question_Text));
    }
    if(m_PromptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Prompt")), m_Prompt));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Type")), m_Type));
    }
    if(m_CDASHIG_CoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("CDASHIG Core")), m_CDASHIG_Core));
    }
    if(m_Case_Report_Form_Completion_InstructionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Case Report Form Completion Instructions")), m_Case_Report_Form_Completion_Instructions));
    }
    if(m_SDTMIG_TargetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("SDTMIG Target")), m_SDTMIG_Target));
    }
    if(m_Mapping_InstructionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Mapping Instructions")), m_Mapping_Instructions));
    }
    if(m_Controlled_Terminology_Codelist_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Controlled Terminology Codelist Name")), m_Controlled_Terminology_Codelist_Name));
    }
    if(m_Implementation_NotesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("Implementation Notes")), m_Implementation_Notes));
    }
}

bool ExportCdashigDomainVariablesRow::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Version"))))
    {
        utility::string_t refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Class"))))
    {
        utility::string_t refVal_setRClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Class"))), refVal_setRClass );
        setRClass(refVal_setRClass);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Domain"))))
    {
        utility::string_t refVal_setDomain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Domain"))), refVal_setDomain );
        setDomain(refVal_setDomain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Data Collection Scenario"))))
    {
        utility::string_t refVal_setDataCollectionScenario;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Data Collection Scenario"))), refVal_setDataCollectionScenario );
        setDataCollectionScenario(refVal_setDataCollectionScenario);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Variable Order"))))
    {
        utility::string_t refVal_setVariableOrder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Variable Order"))), refVal_setVariableOrder );
        setVariableOrder(refVal_setVariableOrder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("CDASHIG Variable"))))
    {
        utility::string_t refVal_setCDASHIGVariable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("CDASHIG Variable"))), refVal_setCDASHIGVariable );
        setCDASHIGVariable(refVal_setCDASHIGVariable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("CDASHIG Variable Label"))))
    {
        utility::string_t refVal_setCDASHIGVariableLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("CDASHIG Variable Label"))), refVal_setCDASHIGVariableLabel );
        setCDASHIGVariableLabel(refVal_setCDASHIGVariableLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("DRAFT CDASHIG Definition"))))
    {
        utility::string_t refVal_setDRAFTCDASHIGDefinition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("DRAFT CDASHIG Definition"))), refVal_setDRAFTCDASHIGDefinition );
        setDRAFTCDASHIGDefinition(refVal_setDRAFTCDASHIGDefinition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Question Text"))))
    {
        utility::string_t refVal_setQuestionText;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Question Text"))), refVal_setQuestionText );
        setQuestionText(refVal_setQuestionText);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Prompt"))))
    {
        utility::string_t refVal_setPrompt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Prompt"))), refVal_setPrompt );
        setPrompt(refVal_setPrompt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("CDASHIG Core"))))
    {
        utility::string_t refVal_setCDASHIGCore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("CDASHIG Core"))), refVal_setCDASHIGCore );
        setCDASHIGCore(refVal_setCDASHIGCore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Case Report Form Completion Instructions"))))
    {
        utility::string_t refVal_setCaseReportFormCompletionInstructions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Case Report Form Completion Instructions"))), refVal_setCaseReportFormCompletionInstructions );
        setCaseReportFormCompletionInstructions(refVal_setCaseReportFormCompletionInstructions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("SDTMIG Target"))))
    {
        std::vector<utility::string_t> refVal_setSDTMIGTarget;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("SDTMIG Target"))), refVal_setSDTMIGTarget );
        setSDTMIGTarget(refVal_setSDTMIGTarget);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Mapping Instructions"))))
    {
        utility::string_t refVal_setMappingInstructions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Mapping Instructions"))), refVal_setMappingInstructions );
        setMappingInstructions(refVal_setMappingInstructions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Controlled Terminology Codelist Name"))))
    {
        utility::string_t refVal_setControlledTerminologyCodelistName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Controlled Terminology Codelist Name"))), refVal_setControlledTerminologyCodelistName );
        setControlledTerminologyCodelistName(refVal_setControlledTerminologyCodelistName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("Implementation Notes"))))
    {
        utility::string_t refVal_setImplementationNotes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("Implementation Notes"))), refVal_setImplementationNotes );
        setImplementationNotes(refVal_setImplementationNotes);
    }
    return ok;
}


utility::string_t ExportCdashigDomainVariablesRow::getVersion() const
{
    return m_Version;
}


void ExportCdashigDomainVariablesRow::setVersion(const utility::string_t& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool ExportCdashigDomainVariablesRow::versionIsSet() const
{
    return m_VersionIsSet;
}

void ExportCdashigDomainVariablesRow::unsetVersion()
{
    m_VersionIsSet = false;
}
utility::string_t ExportCdashigDomainVariablesRow::getRClass() const
{
    return m_r_Class;
}


void ExportCdashigDomainVariablesRow::setRClass(const utility::string_t& value)
{
    m_r_Class = value;
    m_r_ClassIsSet = true;
}

bool ExportCdashigDomainVariablesRow::rClassIsSet() const
{
    return m_r_ClassIsSet;
}

void ExportCdashigDomainVariablesRow::unsetr_Class()
{
    m_r_ClassIsSet = false;
}
utility::string_t ExportCdashigDomainVariablesRow::getDomain() const
{
    return m_Domain;
}


void ExportCdashigDomainVariablesRow::setDomain(const utility::string_t& value)
{
    m_Domain = value;
    m_DomainIsSet = true;
}

bool ExportCdashigDomainVariablesRow::domainIsSet() const
{
    return m_DomainIsSet;
}

void ExportCdashigDomainVariablesRow::unsetDomain()
{
    m_DomainIsSet = false;
}
utility::string_t ExportCdashigDomainVariablesRow::getDataCollectionScenario() const
{
    return m_Data_Collection_Scenario;
}


void ExportCdashigDomainVariablesRow::setDataCollectionScenario(const utility::string_t& value)
{
    m_Data_Collection_Scenario = value;
    m_Data_Collection_ScenarioIsSet = true;
}

bool ExportCdashigDomainVariablesRow::dataCollectionScenarioIsSet() const
{
    return m_Data_Collection_ScenarioIsSet;
}

void ExportCdashigDomainVariablesRow::unsetData_Collection_Scenario()
{
    m_Data_Collection_ScenarioIsSet = false;
}
utility::string_t ExportCdashigDomainVariablesRow::getVariableOrder() const
{
    return m_Variable_Order;
}


void ExportCdashigDomainVariablesRow::setVariableOrder(const utility::string_t& value)
{
    m_Variable_Order = value;
    m_Variable_OrderIsSet = true;
}

bool ExportCdashigDomainVariablesRow::variableOrderIsSet() const
{
    return m_Variable_OrderIsSet;
}

void ExportCdashigDomainVariablesRow::unsetVariable_Order()
{
    m_Variable_OrderIsSet = false;
}
utility::string_t ExportCdashigDomainVariablesRow::getCDASHIGVariable() const
{
    return m_CDASHIG_Variable;
}


void ExportCdashigDomainVariablesRow::setCDASHIGVariable(const utility::string_t& value)
{
    m_CDASHIG_Variable = value;
    m_CDASHIG_VariableIsSet = true;
}

bool ExportCdashigDomainVariablesRow::cDASHIGVariableIsSet() const
{
    return m_CDASHIG_VariableIsSet;
}

void ExportCdashigDomainVariablesRow::unsetCDASHIG_Variable()
{
    m_CDASHIG_VariableIsSet = false;
}
utility::string_t ExportCdashigDomainVariablesRow::getCDASHIGVariableLabel() const
{
    return m_CDASHIG_Variable_Label;
}


void ExportCdashigDomainVariablesRow::setCDASHIGVariableLabel(const utility::string_t& value)
{
    m_CDASHIG_Variable_Label = value;
    m_CDASHIG_Variable_LabelIsSet = true;
}

bool ExportCdashigDomainVariablesRow::cDASHIGVariableLabelIsSet() const
{
    return m_CDASHIG_Variable_LabelIsSet;
}

void ExportCdashigDomainVariablesRow::unsetCDASHIG_Variable_Label()
{
    m_CDASHIG_Variable_LabelIsSet = false;
}
utility::string_t ExportCdashigDomainVariablesRow::getDRAFTCDASHIGDefinition() const
{
    return m_DRAFT_CDASHIG_Definition;
}


void ExportCdashigDomainVariablesRow::setDRAFTCDASHIGDefinition(const utility::string_t& value)
{
    m_DRAFT_CDASHIG_Definition = value;
    m_DRAFT_CDASHIG_DefinitionIsSet = true;
}

bool ExportCdashigDomainVariablesRow::dRAFTCDASHIGDefinitionIsSet() const
{
    return m_DRAFT_CDASHIG_DefinitionIsSet;
}

void ExportCdashigDomainVariablesRow::unsetDRAFT_CDASHIG_Definition()
{
    m_DRAFT_CDASHIG_DefinitionIsSet = false;
}
utility::string_t ExportCdashigDomainVariablesRow::getQuestionText() const
{
    return m_Question_Text;
}


void ExportCdashigDomainVariablesRow::setQuestionText(const utility::string_t& value)
{
    m_Question_Text = value;
    m_Question_TextIsSet = true;
}

bool ExportCdashigDomainVariablesRow::questionTextIsSet() const
{
    return m_Question_TextIsSet;
}

void ExportCdashigDomainVariablesRow::unsetQuestion_Text()
{
    m_Question_TextIsSet = false;
}
utility::string_t ExportCdashigDomainVariablesRow::getPrompt() const
{
    return m_Prompt;
}


void ExportCdashigDomainVariablesRow::setPrompt(const utility::string_t& value)
{
    m_Prompt = value;
    m_PromptIsSet = true;
}

bool ExportCdashigDomainVariablesRow::promptIsSet() const
{
    return m_PromptIsSet;
}

void ExportCdashigDomainVariablesRow::unsetPrompt()
{
    m_PromptIsSet = false;
}
utility::string_t ExportCdashigDomainVariablesRow::getType() const
{
    return m_Type;
}


void ExportCdashigDomainVariablesRow::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool ExportCdashigDomainVariablesRow::typeIsSet() const
{
    return m_TypeIsSet;
}

void ExportCdashigDomainVariablesRow::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t ExportCdashigDomainVariablesRow::getCDASHIGCore() const
{
    return m_CDASHIG_Core;
}


void ExportCdashigDomainVariablesRow::setCDASHIGCore(const utility::string_t& value)
{
    m_CDASHIG_Core = value;
    m_CDASHIG_CoreIsSet = true;
}

bool ExportCdashigDomainVariablesRow::cDASHIGCoreIsSet() const
{
    return m_CDASHIG_CoreIsSet;
}

void ExportCdashigDomainVariablesRow::unsetCDASHIG_Core()
{
    m_CDASHIG_CoreIsSet = false;
}
utility::string_t ExportCdashigDomainVariablesRow::getCaseReportFormCompletionInstructions() const
{
    return m_Case_Report_Form_Completion_Instructions;
}


void ExportCdashigDomainVariablesRow::setCaseReportFormCompletionInstructions(const utility::string_t& value)
{
    m_Case_Report_Form_Completion_Instructions = value;
    m_Case_Report_Form_Completion_InstructionsIsSet = true;
}

bool ExportCdashigDomainVariablesRow::caseReportFormCompletionInstructionsIsSet() const
{
    return m_Case_Report_Form_Completion_InstructionsIsSet;
}

void ExportCdashigDomainVariablesRow::unsetCase_Report_Form_Completion_Instructions()
{
    m_Case_Report_Form_Completion_InstructionsIsSet = false;
}
std::vector<utility::string_t> ExportCdashigDomainVariablesRow::getSDTMIGTarget() const
{
    return m_SDTMIG_Target;
}


void ExportCdashigDomainVariablesRow::setSDTMIGTarget(const std::vector<utility::string_t>& value)
{
    m_SDTMIG_Target = value;
    m_SDTMIG_TargetIsSet = true;
}

bool ExportCdashigDomainVariablesRow::sDTMIGTargetIsSet() const
{
    return m_SDTMIG_TargetIsSet;
}

void ExportCdashigDomainVariablesRow::unsetSDTMIG_Target()
{
    m_SDTMIG_TargetIsSet = false;
}
utility::string_t ExportCdashigDomainVariablesRow::getMappingInstructions() const
{
    return m_Mapping_Instructions;
}


void ExportCdashigDomainVariablesRow::setMappingInstructions(const utility::string_t& value)
{
    m_Mapping_Instructions = value;
    m_Mapping_InstructionsIsSet = true;
}

bool ExportCdashigDomainVariablesRow::mappingInstructionsIsSet() const
{
    return m_Mapping_InstructionsIsSet;
}

void ExportCdashigDomainVariablesRow::unsetMapping_Instructions()
{
    m_Mapping_InstructionsIsSet = false;
}
utility::string_t ExportCdashigDomainVariablesRow::getControlledTerminologyCodelistName() const
{
    return m_Controlled_Terminology_Codelist_Name;
}


void ExportCdashigDomainVariablesRow::setControlledTerminologyCodelistName(const utility::string_t& value)
{
    m_Controlled_Terminology_Codelist_Name = value;
    m_Controlled_Terminology_Codelist_NameIsSet = true;
}

bool ExportCdashigDomainVariablesRow::controlledTerminologyCodelistNameIsSet() const
{
    return m_Controlled_Terminology_Codelist_NameIsSet;
}

void ExportCdashigDomainVariablesRow::unsetControlled_Terminology_Codelist_Name()
{
    m_Controlled_Terminology_Codelist_NameIsSet = false;
}
utility::string_t ExportCdashigDomainVariablesRow::getImplementationNotes() const
{
    return m_Implementation_Notes;
}


void ExportCdashigDomainVariablesRow::setImplementationNotes(const utility::string_t& value)
{
    m_Implementation_Notes = value;
    m_Implementation_NotesIsSet = true;
}

bool ExportCdashigDomainVariablesRow::implementationNotesIsSet() const
{
    return m_Implementation_NotesIsSet;
}

void ExportCdashigDomainVariablesRow::unsetImplementation_Notes()
{
    m_Implementation_NotesIsSet = false;
}

}
}
}
}



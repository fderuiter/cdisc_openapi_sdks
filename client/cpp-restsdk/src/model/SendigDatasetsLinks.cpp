/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SendigDatasetsLinks.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SendigDatasetsLinks::SendigDatasetsLinks()
{
    m_SelfIsSet = false;
    m_ParentProductIsSet = false;
    m_DatasetsIsSet = false;
}

SendigDatasetsLinks::~SendigDatasetsLinks()
{
}

void SendigDatasetsLinks::validate()
{
    // TODO: implement validation
}

web::json::value SendigDatasetsLinks::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SelfIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("self"))] = ModelBase::toJson(m_Self);
    }
    if(m_ParentProductIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("parentProduct"))] = ModelBase::toJson(m_ParentProduct);
    }
    if(m_DatasetsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("datasets"))] = ModelBase::toJson(m_Datasets);
    }

    return val;
}

bool SendigDatasetsLinks::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("self")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SendigDatasetsRef> refVal_setSelf;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSelf);
            setSelf(refVal_setSelf);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("parentProduct"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("parentProduct")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SendigProductRef> refVal_setParentProduct;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParentProduct);
            setParentProduct(refVal_setParentProduct);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("datasets"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("datasets")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SendigDatasetRefElement>> refVal_setDatasets;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDatasets);
            setDatasets(refVal_setDatasets);
            
        }
    }
    return ok;
}

void SendigDatasetsLinks::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_SelfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("self")), m_Self));
    }
    if(m_ParentProductIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("parentProduct")), m_ParentProduct));
    }
    if(m_DatasetsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("datasets")), m_Datasets));
    }
}

bool SendigDatasetsLinks::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        std::shared_ptr<SendigDatasetsRef> refVal_setSelf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("self"))), refVal_setSelf );
        setSelf(refVal_setSelf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("parentProduct"))))
    {
        std::shared_ptr<SendigProductRef> refVal_setParentProduct;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("parentProduct"))), refVal_setParentProduct );
        setParentProduct(refVal_setParentProduct);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("datasets"))))
    {
        std::vector<std::shared_ptr<SendigDatasetRefElement>> refVal_setDatasets;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("datasets"))), refVal_setDatasets );
        setDatasets(refVal_setDatasets);
    }
    return ok;
}


std::shared_ptr<SendigDatasetsRef> SendigDatasetsLinks::getSelf() const
{
    return m_Self;
}


void SendigDatasetsLinks::setSelf(const std::shared_ptr<SendigDatasetsRef>& value)
{
    m_Self = value;
    m_SelfIsSet = true;
}

bool SendigDatasetsLinks::selfIsSet() const
{
    return m_SelfIsSet;
}

void SendigDatasetsLinks::unsetSelf()
{
    m_SelfIsSet = false;
}
std::shared_ptr<SendigProductRef> SendigDatasetsLinks::getParentProduct() const
{
    return m_ParentProduct;
}


void SendigDatasetsLinks::setParentProduct(const std::shared_ptr<SendigProductRef>& value)
{
    m_ParentProduct = value;
    m_ParentProductIsSet = true;
}

bool SendigDatasetsLinks::parentProductIsSet() const
{
    return m_ParentProductIsSet;
}

void SendigDatasetsLinks::unsetParentProduct()
{
    m_ParentProductIsSet = false;
}
std::vector<std::shared_ptr<SendigDatasetRefElement>> SendigDatasetsLinks::getDatasets() const
{
    return m_Datasets;
}


void SendigDatasetsLinks::setDatasets(const std::vector<std::shared_ptr<SendigDatasetRefElement>>& value)
{
    m_Datasets = value;
    m_DatasetsIsSet = true;
}

bool SendigDatasetsLinks::datasetsIsSet() const
{
    return m_DatasetsIsSet;
}

void SendigDatasetsLinks::unsetDatasets()
{
    m_DatasetsIsSet = false;
}

}
}
}
}



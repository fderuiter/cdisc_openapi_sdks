/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdamVariableLinks.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

AdamVariableLinks::AdamVariableLinks()
{
    m_SelfIsSet = false;
    m_CodelistIsSet = false;
    m_ParentProductIsSet = false;
    m_ParentDatastructureIsSet = false;
    m_ParentVariableSetIsSet = false;
    m_PriorVersionIsSet = false;
}

AdamVariableLinks::~AdamVariableLinks()
{
}

void AdamVariableLinks::validate()
{
    // TODO: implement validation
}

web::json::value AdamVariableLinks::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SelfIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("self"))] = ModelBase::toJson(m_Self);
    }
    if(m_CodelistIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("codelist"))] = ModelBase::toJson(m_Codelist);
    }
    if(m_ParentProductIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("parentProduct"))] = ModelBase::toJson(m_ParentProduct);
    }
    if(m_ParentDatastructureIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("parentDatastructure"))] = ModelBase::toJson(m_ParentDatastructure);
    }
    if(m_ParentVariableSetIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("parentVariableSet"))] = ModelBase::toJson(m_ParentVariableSet);
    }
    if(m_PriorVersionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("priorVersion"))] = ModelBase::toJson(m_PriorVersion);
    }

    return val;
}

bool AdamVariableLinks::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("self")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AdamVariableRef> refVal_setSelf;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSelf);
            setSelf(refVal_setSelf);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("codelist"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("codelist")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RootCtCodelistRef> refVal_setCodelist;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCodelist);
            setCodelist(refVal_setCodelist);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("parentProduct"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("parentProduct")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AdamProductRef> refVal_setParentProduct;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParentProduct);
            setParentProduct(refVal_setParentProduct);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("parentDatastructure"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("parentDatastructure")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AdamDatastructureRef> refVal_setParentDatastructure;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParentDatastructure);
            setParentDatastructure(refVal_setParentDatastructure);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("parentVariableSet"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("parentVariableSet")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AdamVarsetRef> refVal_setParentVariableSet;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParentVariableSet);
            setParentVariableSet(refVal_setParentVariableSet);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("priorVersion")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AdamVariableRef> refVal_setPriorVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriorVersion);
            setPriorVersion(refVal_setPriorVersion);
            
        }
    }
    return ok;
}

void AdamVariableLinks::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_SelfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("self")), m_Self));
    }
    if(m_CodelistIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("codelist")), m_Codelist));
    }
    if(m_ParentProductIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("parentProduct")), m_ParentProduct));
    }
    if(m_ParentDatastructureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("parentDatastructure")), m_ParentDatastructure));
    }
    if(m_ParentVariableSetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("parentVariableSet")), m_ParentVariableSet));
    }
    if(m_PriorVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("priorVersion")), m_PriorVersion));
    }
}

bool AdamVariableLinks::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        std::shared_ptr<AdamVariableRef> refVal_setSelf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("self"))), refVal_setSelf );
        setSelf(refVal_setSelf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("codelist"))))
    {
        std::shared_ptr<RootCtCodelistRef> refVal_setCodelist;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("codelist"))), refVal_setCodelist );
        setCodelist(refVal_setCodelist);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("parentProduct"))))
    {
        std::shared_ptr<AdamProductRef> refVal_setParentProduct;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("parentProduct"))), refVal_setParentProduct );
        setParentProduct(refVal_setParentProduct);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("parentDatastructure"))))
    {
        std::shared_ptr<AdamDatastructureRef> refVal_setParentDatastructure;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("parentDatastructure"))), refVal_setParentDatastructure );
        setParentDatastructure(refVal_setParentDatastructure);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("parentVariableSet"))))
    {
        std::shared_ptr<AdamVarsetRef> refVal_setParentVariableSet;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("parentVariableSet"))), refVal_setParentVariableSet );
        setParentVariableSet(refVal_setParentVariableSet);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))))
    {
        std::shared_ptr<AdamVariableRef> refVal_setPriorVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))), refVal_setPriorVersion );
        setPriorVersion(refVal_setPriorVersion);
    }
    return ok;
}


std::shared_ptr<AdamVariableRef> AdamVariableLinks::getSelf() const
{
    return m_Self;
}


void AdamVariableLinks::setSelf(const std::shared_ptr<AdamVariableRef>& value)
{
    m_Self = value;
    m_SelfIsSet = true;
}

bool AdamVariableLinks::selfIsSet() const
{
    return m_SelfIsSet;
}

void AdamVariableLinks::unsetSelf()
{
    m_SelfIsSet = false;
}
std::shared_ptr<RootCtCodelistRef> AdamVariableLinks::getCodelist() const
{
    return m_Codelist;
}


void AdamVariableLinks::setCodelist(const std::shared_ptr<RootCtCodelistRef>& value)
{
    m_Codelist = value;
    m_CodelistIsSet = true;
}

bool AdamVariableLinks::codelistIsSet() const
{
    return m_CodelistIsSet;
}

void AdamVariableLinks::unsetCodelist()
{
    m_CodelistIsSet = false;
}
std::shared_ptr<AdamProductRef> AdamVariableLinks::getParentProduct() const
{
    return m_ParentProduct;
}


void AdamVariableLinks::setParentProduct(const std::shared_ptr<AdamProductRef>& value)
{
    m_ParentProduct = value;
    m_ParentProductIsSet = true;
}

bool AdamVariableLinks::parentProductIsSet() const
{
    return m_ParentProductIsSet;
}

void AdamVariableLinks::unsetParentProduct()
{
    m_ParentProductIsSet = false;
}
std::shared_ptr<AdamDatastructureRef> AdamVariableLinks::getParentDatastructure() const
{
    return m_ParentDatastructure;
}


void AdamVariableLinks::setParentDatastructure(const std::shared_ptr<AdamDatastructureRef>& value)
{
    m_ParentDatastructure = value;
    m_ParentDatastructureIsSet = true;
}

bool AdamVariableLinks::parentDatastructureIsSet() const
{
    return m_ParentDatastructureIsSet;
}

void AdamVariableLinks::unsetParentDatastructure()
{
    m_ParentDatastructureIsSet = false;
}
std::shared_ptr<AdamVarsetRef> AdamVariableLinks::getParentVariableSet() const
{
    return m_ParentVariableSet;
}


void AdamVariableLinks::setParentVariableSet(const std::shared_ptr<AdamVarsetRef>& value)
{
    m_ParentVariableSet = value;
    m_ParentVariableSetIsSet = true;
}

bool AdamVariableLinks::parentVariableSetIsSet() const
{
    return m_ParentVariableSetIsSet;
}

void AdamVariableLinks::unsetParentVariableSet()
{
    m_ParentVariableSetIsSet = false;
}
std::shared_ptr<AdamVariableRef> AdamVariableLinks::getPriorVersion() const
{
    return m_PriorVersion;
}


void AdamVariableLinks::setPriorVersion(const std::shared_ptr<AdamVariableRef>& value)
{
    m_PriorVersion = value;
    m_PriorVersionIsSet = true;
}

bool AdamVariableLinks::priorVersionIsSet() const
{
    return m_PriorVersionIsSet;
}

void AdamVariableLinks::unsetPriorVersion()
{
    m_PriorVersionIsSet = false;
}

}
}
}
}



/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CtTermLinks.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

CtTermLinks::CtTermLinks()
{
    m_SelfIsSet = false;
    m_ParentPackageIsSet = false;
    m_ParentCodelistIsSet = false;
    m_RootItemIsSet = false;
    m_PriorVersionIsSet = false;
}

CtTermLinks::~CtTermLinks()
{
}

void CtTermLinks::validate()
{
    // TODO: implement validation
}

web::json::value CtTermLinks::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SelfIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("self"))] = ModelBase::toJson(m_Self);
    }
    if(m_ParentPackageIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("parentPackage"))] = ModelBase::toJson(m_ParentPackage);
    }
    if(m_ParentCodelistIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("parentCodelist"))] = ModelBase::toJson(m_ParentCodelist);
    }
    if(m_RootItemIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("rootItem"))] = ModelBase::toJson(m_RootItem);
    }
    if(m_PriorVersionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("priorVersion"))] = ModelBase::toJson(m_PriorVersion);
    }

    return val;
}

bool CtTermLinks::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("self")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CtTermRef> refVal_setSelf;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSelf);
            setSelf(refVal_setSelf);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("parentPackage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("parentPackage")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CtPackageRef> refVal_setParentPackage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParentPackage);
            setParentPackage(refVal_setParentPackage);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("parentCodelist"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("parentCodelist")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CtCodelistRef> refVal_setParentCodelist;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParentCodelist);
            setParentCodelist(refVal_setParentCodelist);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("rootItem"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("rootItem")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<RootCtTermRef> refVal_setRootItem;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRootItem);
            setRootItem(refVal_setRootItem);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("priorVersion")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CtTermRef> refVal_setPriorVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriorVersion);
            setPriorVersion(refVal_setPriorVersion);
            
        }
    }
    return ok;
}

void CtTermLinks::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_SelfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("self")), m_Self));
    }
    if(m_ParentPackageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("parentPackage")), m_ParentPackage));
    }
    if(m_ParentCodelistIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("parentCodelist")), m_ParentCodelist));
    }
    if(m_RootItemIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("rootItem")), m_RootItem));
    }
    if(m_PriorVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("priorVersion")), m_PriorVersion));
    }
}

bool CtTermLinks::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("self"))))
    {
        std::shared_ptr<CtTermRef> refVal_setSelf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("self"))), refVal_setSelf );
        setSelf(refVal_setSelf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("parentPackage"))))
    {
        std::shared_ptr<CtPackageRef> refVal_setParentPackage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("parentPackage"))), refVal_setParentPackage );
        setParentPackage(refVal_setParentPackage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("parentCodelist"))))
    {
        std::shared_ptr<CtCodelistRef> refVal_setParentCodelist;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("parentCodelist"))), refVal_setParentCodelist );
        setParentCodelist(refVal_setParentCodelist);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("rootItem"))))
    {
        std::shared_ptr<RootCtTermRef> refVal_setRootItem;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("rootItem"))), refVal_setRootItem );
        setRootItem(refVal_setRootItem);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))))
    {
        std::shared_ptr<CtTermRef> refVal_setPriorVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("priorVersion"))), refVal_setPriorVersion );
        setPriorVersion(refVal_setPriorVersion);
    }
    return ok;
}


std::shared_ptr<CtTermRef> CtTermLinks::getSelf() const
{
    return m_Self;
}


void CtTermLinks::setSelf(const std::shared_ptr<CtTermRef>& value)
{
    m_Self = value;
    m_SelfIsSet = true;
}

bool CtTermLinks::selfIsSet() const
{
    return m_SelfIsSet;
}

void CtTermLinks::unsetSelf()
{
    m_SelfIsSet = false;
}
std::shared_ptr<CtPackageRef> CtTermLinks::getParentPackage() const
{
    return m_ParentPackage;
}


void CtTermLinks::setParentPackage(const std::shared_ptr<CtPackageRef>& value)
{
    m_ParentPackage = value;
    m_ParentPackageIsSet = true;
}

bool CtTermLinks::parentPackageIsSet() const
{
    return m_ParentPackageIsSet;
}

void CtTermLinks::unsetParentPackage()
{
    m_ParentPackageIsSet = false;
}
std::shared_ptr<CtCodelistRef> CtTermLinks::getParentCodelist() const
{
    return m_ParentCodelist;
}


void CtTermLinks::setParentCodelist(const std::shared_ptr<CtCodelistRef>& value)
{
    m_ParentCodelist = value;
    m_ParentCodelistIsSet = true;
}

bool CtTermLinks::parentCodelistIsSet() const
{
    return m_ParentCodelistIsSet;
}

void CtTermLinks::unsetParentCodelist()
{
    m_ParentCodelistIsSet = false;
}
std::shared_ptr<RootCtTermRef> CtTermLinks::getRootItem() const
{
    return m_RootItem;
}


void CtTermLinks::setRootItem(const std::shared_ptr<RootCtTermRef>& value)
{
    m_RootItem = value;
    m_RootItemIsSet = true;
}

bool CtTermLinks::rootItemIsSet() const
{
    return m_RootItemIsSet;
}

void CtTermLinks::unsetRootItem()
{
    m_RootItemIsSet = false;
}
std::shared_ptr<CtTermRef> CtTermLinks::getPriorVersion() const
{
    return m_PriorVersion;
}


void CtTermLinks::setPriorVersion(const std::shared_ptr<CtTermRef>& value)
{
    m_PriorVersion = value;
    m_PriorVersionIsSet = true;
}

bool CtTermLinks::priorVersionIsSet() const
{
    return m_PriorVersionIsSet;
}

void CtTermLinks::unsetPriorVersion()
{
    m_PriorVersionIsSet = false;
}

}
}
}
}



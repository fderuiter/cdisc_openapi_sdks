/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DefaultSearchResponse.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

DefaultSearchResponse::DefaultSearchResponse()
{
    m_HitsIsSet = false;
    m_TotalHits = 0.0;
    m_TotalHitsIsSet = false;
}

DefaultSearchResponse::~DefaultSearchResponse()
{
}

void DefaultSearchResponse::validate()
{
    // TODO: implement validation
}

web::json::value DefaultSearchResponse::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_HitsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("hits"))] = ModelBase::toJson(m_Hits);
    }
    if(m_TotalHitsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("totalHits"))] = ModelBase::toJson(m_TotalHits);
    }

    return val;
}

bool DefaultSearchResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("hits"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("hits")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<DefaultSearchResponse_hits_inner>> refVal_setHits;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHits);
            setHits(refVal_setHits);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("totalHits"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("totalHits")));
        if(!fieldValue.is_null())
        {
            double refVal_setTotalHits;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalHits);
            setTotalHits(refVal_setTotalHits);
            
        }
    }
    return ok;
}

void DefaultSearchResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_HitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("hits")), m_Hits));
    }
    if(m_TotalHitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("totalHits")), m_TotalHits));
    }
}

bool DefaultSearchResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("hits"))))
    {
        std::vector<std::shared_ptr<DefaultSearchResponse_hits_inner>> refVal_setHits;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("hits"))), refVal_setHits );
        setHits(refVal_setHits);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("totalHits"))))
    {
        double refVal_setTotalHits;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("totalHits"))), refVal_setTotalHits );
        setTotalHits(refVal_setTotalHits);
    }
    return ok;
}


std::vector<std::shared_ptr<DefaultSearchResponse_hits_inner>> DefaultSearchResponse::getHits() const
{
    return m_Hits;
}


void DefaultSearchResponse::setHits(const std::vector<std::shared_ptr<DefaultSearchResponse_hits_inner>>& value)
{
    m_Hits = value;
    m_HitsIsSet = true;
}

bool DefaultSearchResponse::hitsIsSet() const
{
    return m_HitsIsSet;
}

void DefaultSearchResponse::unsetHits()
{
    m_HitsIsSet = false;
}
double DefaultSearchResponse::getTotalHits() const
{
    return m_TotalHits;
}

void DefaultSearchResponse::setTotalHits(double value)
{
    m_TotalHits = value;
    m_TotalHitsIsSet = true;
}

bool DefaultSearchResponse::totalHitsIsSet() const
{
    return m_TotalHitsIsSet;
}

void DefaultSearchResponse::unsetTotalHits()
{
    m_TotalHitsIsSet = false;
}

}
}
}
}



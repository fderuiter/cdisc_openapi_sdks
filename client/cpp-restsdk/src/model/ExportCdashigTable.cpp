/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ExportCdashigTable.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ExportCdashigTable::ExportCdashigTable()
{
    m_Domain_variablesIsSet = false;
    m_Scenario_variablesIsSet = false;
}

ExportCdashigTable::~ExportCdashigTable()
{
}

void ExportCdashigTable::validate()
{
    // TODO: implement validation
}

web::json::value ExportCdashigTable::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Domain_variablesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("domain-variables"))] = ModelBase::toJson(m_Domain_variables);
    }
    if(m_Scenario_variablesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("scenario-variables"))] = ModelBase::toJson(m_Scenario_variables);
    }

    return val;
}

bool ExportCdashigTable::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("domain-variables"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("domain-variables")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ExportCdashigDomainVariablesRow>> refVal_setDomainVariables;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomainVariables);
            setDomainVariables(refVal_setDomainVariables);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("scenario-variables"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("scenario-variables")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ExportCdashigScenarioVariablesRow>> refVal_setScenarioVariables;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScenarioVariables);
            setScenarioVariables(refVal_setScenarioVariables);
            
        }
    }
    return ok;
}

void ExportCdashigTable::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_Domain_variablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("domain-variables")), m_Domain_variables));
    }
    if(m_Scenario_variablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("scenario-variables")), m_Scenario_variables));
    }
}

bool ExportCdashigTable::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("domain-variables"))))
    {
        std::vector<std::shared_ptr<ExportCdashigDomainVariablesRow>> refVal_setDomainVariables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("domain-variables"))), refVal_setDomainVariables );
        setDomainVariables(refVal_setDomainVariables);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("scenario-variables"))))
    {
        std::vector<std::shared_ptr<ExportCdashigScenarioVariablesRow>> refVal_setScenarioVariables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("scenario-variables"))), refVal_setScenarioVariables );
        setScenarioVariables(refVal_setScenarioVariables);
    }
    return ok;
}


std::vector<std::shared_ptr<ExportCdashigDomainVariablesRow>> ExportCdashigTable::getDomainVariables() const
{
    return m_Domain_variables;
}


void ExportCdashigTable::setDomainVariables(const std::vector<std::shared_ptr<ExportCdashigDomainVariablesRow>>& value)
{
    m_Domain_variables = value;
    m_Domain_variablesIsSet = true;
}

bool ExportCdashigTable::domainVariablesIsSet() const
{
    return m_Domain_variablesIsSet;
}

void ExportCdashigTable::unsetDomain_variables()
{
    m_Domain_variablesIsSet = false;
}
std::vector<std::shared_ptr<ExportCdashigScenarioVariablesRow>> ExportCdashigTable::getScenarioVariables() const
{
    return m_Scenario_variables;
}


void ExportCdashigTable::setScenarioVariables(const std::vector<std::shared_ptr<ExportCdashigScenarioVariablesRow>>& value)
{
    m_Scenario_variables = value;
    m_Scenario_variablesIsSet = true;
}

bool ExportCdashigTable::scenarioVariablesIsSet() const
{
    return m_Scenario_variablesIsSet;
}

void ExportCdashigTable::unsetScenario_variables()
{
    m_Scenario_variablesIsSet = false;
}

}
}
}
}



/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ScopeValues.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ScopeValues::ScopeValues()
{
    m_Total = 0.0;
    m_TotalIsSet = false;
    m_HasMore = false;
    m_HasMoreIsSet = false;
    m_ValuesIsSet = false;
}

ScopeValues::~ScopeValues()
{
}

void ScopeValues::validate()
{
    // TODO: implement validation
}

web::json::value ScopeValues::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_TotalIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("total"))] = ModelBase::toJson(m_Total);
    }
    if(m_HasMoreIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("hasMore"))] = ModelBase::toJson(m_HasMore);
    }
    if(m_ValuesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("values"))] = ModelBase::toJson(m_Values);
    }

    return val;
}

bool ScopeValues::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("total"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("total")));
        if(!fieldValue.is_null())
        {
            double refVal_setTotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotal);
            setTotal(refVal_setTotal);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("hasMore"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("hasMore")));
        if(!fieldValue.is_null())
        {
            bool refVal_setHasMore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHasMore);
            setHasMore(refVal_setHasMore);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("values"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("values")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setValues;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValues);
            setValues(refVal_setValues);
            
        }
    }
    return ok;
}

void ScopeValues::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_TotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("total")), m_Total));
    }
    if(m_HasMoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("hasMore")), m_HasMore));
    }
    if(m_ValuesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("values")), m_Values));
    }
}

bool ScopeValues::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("total"))))
    {
        double refVal_setTotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("total"))), refVal_setTotal );
        setTotal(refVal_setTotal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("hasMore"))))
    {
        bool refVal_setHasMore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("hasMore"))), refVal_setHasMore );
        setHasMore(refVal_setHasMore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("values"))))
    {
        std::vector<utility::string_t> refVal_setValues;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("values"))), refVal_setValues );
        setValues(refVal_setValues);
    }
    return ok;
}


double ScopeValues::getTotal() const
{
    return m_Total;
}

void ScopeValues::setTotal(double value)
{
    m_Total = value;
    m_TotalIsSet = true;
}

bool ScopeValues::totalIsSet() const
{
    return m_TotalIsSet;
}

void ScopeValues::unsetTotal()
{
    m_TotalIsSet = false;
}
bool ScopeValues::isHasMore() const
{
    return m_HasMore;
}

void ScopeValues::setHasMore(bool value)
{
    m_HasMore = value;
    m_HasMoreIsSet = true;
}

bool ScopeValues::hasMoreIsSet() const
{
    return m_HasMoreIsSet;
}

void ScopeValues::unsetHasMore()
{
    m_HasMoreIsSet = false;
}
std::vector<utility::string_t> ScopeValues::getValues() const
{
    return m_Values;
}


void ScopeValues::setValues(const std::vector<utility::string_t>& value)
{
    m_Values = value;
    m_ValuesIsSet = true;
}

bool ScopeValues::valuesIsSet() const
{
    return m_ValuesIsSet;
}

void ScopeValues::unsetValues()
{
    m_ValuesIsSet = false;
}

}
}
}
}



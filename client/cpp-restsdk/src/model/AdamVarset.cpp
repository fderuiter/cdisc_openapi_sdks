/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AdamVarset.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

AdamVarset::AdamVarset()
{
    m_Ordinal = utility::conversions::to_string_t("");
    m_OrdinalIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Label = utility::conversions::to_string_t("");
    m_LabelIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m__linksIsSet = false;
    m_AnalysisVariablesIsSet = false;
}

AdamVarset::~AdamVarset()
{
}

void AdamVarset::validate()
{
    // TODO: implement validation
}

web::json::value AdamVarset::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_OrdinalIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("ordinal"))] = ModelBase::toJson(m_Ordinal);
    }
    if(m_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_LabelIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("label"))] = ModelBase::toJson(m_Label);
    }
    if(m_DescriptionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("description"))] = ModelBase::toJson(m_Description);
    }
    if(m__linksIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("_links"))] = ModelBase::toJson(m__links);
    }
    if(m_AnalysisVariablesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("analysisVariables"))] = ModelBase::toJson(m_AnalysisVariables);
    }

    return val;
}

bool AdamVarset::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("ordinal"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("ordinal")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOrdinal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrdinal);
            setOrdinal(refVal_setOrdinal);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLabel);
            setLabel(refVal_setLabel);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("_links"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("_links")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<AdamVarsetLinks> refVal_setLinks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLinks);
            setLinks(refVal_setLinks);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("analysisVariables"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("analysisVariables")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<AdamVariable>> refVal_setAnalysisVariables;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAnalysisVariables);
            setAnalysisVariables(refVal_setAnalysisVariables);
            
        }
    }
    return ok;
}

void AdamVarset::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_OrdinalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("ordinal")), m_Ordinal));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("name")), m_Name));
    }
    if(m_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("label")), m_Label));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("description")), m_Description));
    }
    if(m__linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("_links")), m__links));
    }
    if(m_AnalysisVariablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("analysisVariables")), m_AnalysisVariables));
    }
}

bool AdamVarset::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("ordinal"))))
    {
        utility::string_t refVal_setOrdinal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("ordinal"))), refVal_setOrdinal );
        setOrdinal(refVal_setOrdinal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("label"))))
    {
        utility::string_t refVal_setLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("label"))), refVal_setLabel );
        setLabel(refVal_setLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("_links"))))
    {
        std::shared_ptr<AdamVarsetLinks> refVal_setLinks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("_links"))), refVal_setLinks );
        setLinks(refVal_setLinks);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("analysisVariables"))))
    {
        std::vector<std::shared_ptr<AdamVariable>> refVal_setAnalysisVariables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("analysisVariables"))), refVal_setAnalysisVariables );
        setAnalysisVariables(refVal_setAnalysisVariables);
    }
    return ok;
}


utility::string_t AdamVarset::getOrdinal() const
{
    return m_Ordinal;
}


void AdamVarset::setOrdinal(const utility::string_t& value)
{
    m_Ordinal = value;
    m_OrdinalIsSet = true;
}

bool AdamVarset::ordinalIsSet() const
{
    return m_OrdinalIsSet;
}

void AdamVarset::unsetOrdinal()
{
    m_OrdinalIsSet = false;
}
utility::string_t AdamVarset::getName() const
{
    return m_Name;
}


void AdamVarset::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool AdamVarset::nameIsSet() const
{
    return m_NameIsSet;
}

void AdamVarset::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t AdamVarset::getLabel() const
{
    return m_Label;
}


void AdamVarset::setLabel(const utility::string_t& value)
{
    m_Label = value;
    m_LabelIsSet = true;
}

bool AdamVarset::labelIsSet() const
{
    return m_LabelIsSet;
}

void AdamVarset::unsetLabel()
{
    m_LabelIsSet = false;
}
utility::string_t AdamVarset::getDescription() const
{
    return m_Description;
}


void AdamVarset::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool AdamVarset::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void AdamVarset::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::shared_ptr<AdamVarsetLinks> AdamVarset::getLinks() const
{
    return m__links;
}


void AdamVarset::setLinks(const std::shared_ptr<AdamVarsetLinks>& value)
{
    m__links = value;
    m__linksIsSet = true;
}

bool AdamVarset::linksIsSet() const
{
    return m__linksIsSet;
}

void AdamVarset::unset_links()
{
    m__linksIsSet = false;
}
std::vector<std::shared_ptr<AdamVariable>> AdamVarset::getAnalysisVariables() const
{
    return m_AnalysisVariables;
}


void AdamVarset::setAnalysisVariables(const std::vector<std::shared_ptr<AdamVariable>>& value)
{
    m_AnalysisVariables = value;
    m_AnalysisVariablesIsSet = true;
}

bool AdamVarset::analysisVariablesIsSet() const
{
    return m_AnalysisVariablesIsSet;
}

void AdamVarset::unsetAnalysisVariables()
{
    m_AnalysisVariablesIsSet = false;
}

}
}
}
}



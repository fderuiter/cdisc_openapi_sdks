/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { DefaultErrorResponse } from '../model/defaultErrorResponse';
import { DefaultSearchResponse } from '../model/defaultSearchResponse';
import { DefaultSearchScopes } from '../model/defaultSearchScopes';
import { MdrSearchScopesGet200Response } from '../model/mdrSearchScopesGet200Response';
import { ScopeValues } from '../model/scopeValues';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://library.cdisc.org/api';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum SearchesApiApiKeys {
}

export class SearchesApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'basicAuth': new HttpBasicAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            this.username = basePathOrUsername;
            this.password = password
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: SearchesApiApiKeys, value: string) {
        (this.authentications as any)[SearchesApiApiKeys[key]].apiKey = value;
    }

    set username(username: string) {
        this.authentications.basicAuth.username = username;
    }

    set password(password: string) {
        this.authentications.basicAuth.password = password;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Get Search Results Across CDISC Library
     * @param q Search Term Expression
     * @param highlight Search Highlight Expression
     * @param start Initial Search Result Index
     * @param pageSize Number of Search Results to Return
     * @param _class Limit Search by Setting Scope to Class
     * @param codelist Limit Search by Setting Scope to Codelist
     * @param conceptId Limit Search by Setting Scope to Concept ID
     * @param core Limit Search by Setting Scope to Core
     * @param dataStructure Limit Search by Setting Scope to Data Structure
     * @param datasetStructure Limit Search by Setting Scope to Dataset Structure
     * @param definition Limit Search by Setting Scope to Definition
     * @param description Limit Search by Setting Scope to Description
     * @param domain Limit Search by Setting Scope to Domain
     * @param effectiveDate Limit Search by Setting Scope to Effective Date
     * @param extensible Limit Search by Setting Scope to Extensible
     * @param href Limit Search by Setting Scope to Href
     * @param label Limit Search by Setting Scope to Label
     * @param measureType SLimit Search by Setting Scope to Measure Type
     * @param name Limit Search by Setting Scope to Name
     * @param preferredTerm Limit Search by Setting Scope to Preferred Term
     * @param product Limit Search by Setting Scope to Product
     * @param productGroup Limit Search by Setting Scope to Product Group
     * @param registrationStatus Limit Search by Setting Scope to Registration Status
     * @param roleDescription Limit Search by Setting Scope to Role Description
     * @param sdtmTarget Limit Search by Setting Scope to SDTM Target
     * @param simpleDatatype Limit Search by Setting Scope to Simple Datatype
     * @param submissionValue Limit Search by Setting Scope to Submission Value
     * @param synonyms Limit Search by Setting Scope to Synonyms
     * @param type Limit Search by Setting Scope to Type
     * @param uiHref Limit Search by Setting Scope to UI Href
     * @param valueDomain Limit Search by Setting Scope to Value Domain
     * @param variableSet Limit Search by Setting Scope to Variable Set
     * @param version Limit Search by Setting Scope to Version
     */
    public async mdrSearchGet (q: string, highlight?: string, start?: number, pageSize?: number, _class?: string, codelist?: string, conceptId?: string, core?: string, dataStructure?: string, datasetStructure?: string, definition?: string, description?: string, domain?: string, effectiveDate?: string, extensible?: string, href?: string, label?: string, measureType?: string, name?: string, preferredTerm?: string, product?: string, productGroup?: string, registrationStatus?: string, roleDescription?: string, sdtmTarget?: string, simpleDatatype?: string, submissionValue?: string, synonyms?: string, type?: string, uiHref?: string, valueDomain?: string, variableSet?: string, version?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: DefaultSearchResponse;  }> {
        const localVarPath = this.basePath + '/mdr/search';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'q' is not null or undefined
        if (q === null || q === undefined) {
            throw new Error('Required parameter q was null or undefined when calling mdrSearchGet.');
        }

        if (q !== undefined) {
            localVarQueryParameters['q'] = ObjectSerializer.serialize(q, "string");
        }

        if (highlight !== undefined) {
            localVarQueryParameters['highlight'] = ObjectSerializer.serialize(highlight, "string");
        }

        if (start !== undefined) {
            localVarQueryParameters['start'] = ObjectSerializer.serialize(start, "number");
        }

        if (pageSize !== undefined) {
            localVarQueryParameters['pageSize'] = ObjectSerializer.serialize(pageSize, "number");
        }

        if (_class !== undefined) {
            localVarQueryParameters['class'] = ObjectSerializer.serialize(_class, "string");
        }

        if (codelist !== undefined) {
            localVarQueryParameters['codelist'] = ObjectSerializer.serialize(codelist, "string");
        }

        if (conceptId !== undefined) {
            localVarQueryParameters['conceptId'] = ObjectSerializer.serialize(conceptId, "string");
        }

        if (core !== undefined) {
            localVarQueryParameters['core'] = ObjectSerializer.serialize(core, "string");
        }

        if (dataStructure !== undefined) {
            localVarQueryParameters['dataStructure'] = ObjectSerializer.serialize(dataStructure, "string");
        }

        if (datasetStructure !== undefined) {
            localVarQueryParameters['datasetStructure'] = ObjectSerializer.serialize(datasetStructure, "string");
        }

        if (definition !== undefined) {
            localVarQueryParameters['definition'] = ObjectSerializer.serialize(definition, "string");
        }

        if (description !== undefined) {
            localVarQueryParameters['description'] = ObjectSerializer.serialize(description, "string");
        }

        if (domain !== undefined) {
            localVarQueryParameters['domain'] = ObjectSerializer.serialize(domain, "string");
        }

        if (effectiveDate !== undefined) {
            localVarQueryParameters['effectiveDate'] = ObjectSerializer.serialize(effectiveDate, "string");
        }

        if (extensible !== undefined) {
            localVarQueryParameters['extensible'] = ObjectSerializer.serialize(extensible, "string");
        }

        if (href !== undefined) {
            localVarQueryParameters['href'] = ObjectSerializer.serialize(href, "string");
        }

        if (label !== undefined) {
            localVarQueryParameters['label'] = ObjectSerializer.serialize(label, "string");
        }

        if (measureType !== undefined) {
            localVarQueryParameters['measureType'] = ObjectSerializer.serialize(measureType, "string");
        }

        if (name !== undefined) {
            localVarQueryParameters['name'] = ObjectSerializer.serialize(name, "string");
        }

        if (preferredTerm !== undefined) {
            localVarQueryParameters['preferredTerm'] = ObjectSerializer.serialize(preferredTerm, "string");
        }

        if (product !== undefined) {
            localVarQueryParameters['product'] = ObjectSerializer.serialize(product, "string");
        }

        if (productGroup !== undefined) {
            localVarQueryParameters['productGroup'] = ObjectSerializer.serialize(productGroup, "string");
        }

        if (registrationStatus !== undefined) {
            localVarQueryParameters['registrationStatus'] = ObjectSerializer.serialize(registrationStatus, "string");
        }

        if (roleDescription !== undefined) {
            localVarQueryParameters['roleDescription'] = ObjectSerializer.serialize(roleDescription, "string");
        }

        if (sdtmTarget !== undefined) {
            localVarQueryParameters['sdtmTarget'] = ObjectSerializer.serialize(sdtmTarget, "string");
        }

        if (simpleDatatype !== undefined) {
            localVarQueryParameters['simpleDatatype'] = ObjectSerializer.serialize(simpleDatatype, "string");
        }

        if (submissionValue !== undefined) {
            localVarQueryParameters['submissionValue'] = ObjectSerializer.serialize(submissionValue, "string");
        }

        if (synonyms !== undefined) {
            localVarQueryParameters['synonyms'] = ObjectSerializer.serialize(synonyms, "string");
        }

        if (type !== undefined) {
            localVarQueryParameters['type'] = ObjectSerializer.serialize(type, "string");
        }

        if (uiHref !== undefined) {
            localVarQueryParameters['uiHref'] = ObjectSerializer.serialize(uiHref, "string");
        }

        if (valueDomain !== undefined) {
            localVarQueryParameters['valueDomain'] = ObjectSerializer.serialize(valueDomain, "string");
        }

        if (variableSet !== undefined) {
            localVarQueryParameters['variableSet'] = ObjectSerializer.serialize(variableSet, "string");
        }

        if (version !== undefined) {
            localVarQueryParameters['version'] = ObjectSerializer.serialize(version, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.basicAuth.username && this.authentications.basicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.basicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: DefaultSearchResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "DefaultSearchResponse");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get Search Results Across CDISC Library
     */
    public async mdrSearchScopesGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: MdrSearchScopesGet200Response;  }> {
        const localVarPath = this.basePath + '/mdr/search/scopes';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.basicAuth.username && this.authentications.basicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.basicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: MdrSearchScopesGet200Response;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "MdrSearchScopesGet200Response");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Get Search Results Limited to Scope
     * @param scope Search Scope
     */
    public async mdrSearchScopesScopeGet (scope: DefaultSearchScopes, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: ScopeValues;  }> {
        const localVarPath = this.basePath + '/mdr/search/scopes/{scope}'
            .replace('{' + 'scope' + '}', encodeURIComponent(String(scope)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'scope' is not null or undefined
        if (scope === null || scope === undefined) {
            throw new Error('Required parameter scope was null or undefined when calling mdrSearchScopesScopeGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.basicAuth.username && this.authentications.basicAuth.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.basicAuth.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: ScopeValues;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "ScopeValues");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}

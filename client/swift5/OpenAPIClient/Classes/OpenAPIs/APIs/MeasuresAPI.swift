//
// MeasuresAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MeasuresAPI {

    /**

     - parameter measure: (path) QRS Measure Identifier 
     - parameter version: (path) CDISC Library Product Version 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrQrsMeasureVersionGet(measure: String, version: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QrsProduct?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrQrsMeasureVersionGetWithRequestBuilder(measure: measure, version: version).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/qrs/{measure}/{version}
     - Get QRS Product
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter measure: (path) QRS Measure Identifier 
     - parameter version: (path) CDISC Library Product Version 
     - returns: RequestBuilder<QrsProduct> 
     */
    open class func mdrQrsMeasureVersionGetWithRequestBuilder(measure: String, version: String) -> RequestBuilder<QrsProduct> {
        var localVariablePath = "/mdr/qrs/{measure}/{version}"
        let measurePreEscape = "\(APIHelper.mapValueToPathItem(measure))"
        let measurePostEscape = measurePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measure}", with: measurePostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QrsProduct>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter measure: (path) QRS Measure Identifier 
     - parameter version: (path) CDISC Library Product Version 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrQrsMeasureVersionItemsGet(measure: String, version: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QrsItems?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrQrsMeasureVersionItemsGetWithRequestBuilder(measure: measure, version: version).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/qrs/{measure}/{version}/items
     - Get QRS Item List
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter measure: (path) QRS Measure Identifier 
     - parameter version: (path) CDISC Library Product Version 
     - returns: RequestBuilder<QrsItems> 
     */
    open class func mdrQrsMeasureVersionItemsGetWithRequestBuilder(measure: String, version: String) -> RequestBuilder<QrsItems> {
        var localVariablePath = "/mdr/qrs/{measure}/{version}/items"
        let measurePreEscape = "\(APIHelper.mapValueToPathItem(measure))"
        let measurePostEscape = measurePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measure}", with: measurePostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QrsItems>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter measure: (path) QRS Measure Identifier 
     - parameter version: (path) CDISC Library Product Version 
     - parameter item: (path) QRS Measure Item Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrQrsMeasureVersionItemsItemGet(measure: String, version: String, item: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QrsItem?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrQrsMeasureVersionItemsItemGetWithRequestBuilder(measure: measure, version: version, item: item).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/qrs/{measure}/{version}/items/{item}
     - Get QRS Item
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter measure: (path) QRS Measure Identifier 
     - parameter version: (path) CDISC Library Product Version 
     - parameter item: (path) QRS Measure Item Identifier 
     - returns: RequestBuilder<QrsItem> 
     */
    open class func mdrQrsMeasureVersionItemsItemGetWithRequestBuilder(measure: String, version: String, item: String) -> RequestBuilder<QrsItem> {
        var localVariablePath = "/mdr/qrs/{measure}/{version}/items/{item}"
        let measurePreEscape = "\(APIHelper.mapValueToPathItem(measure))"
        let measurePostEscape = measurePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measure}", with: measurePostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let itemPreEscape = "\(APIHelper.mapValueToPathItem(item))"
        let itemPostEscape = itemPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{item}", with: itemPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QrsItem>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter measure: (path) QRS Measure Identifier 
     - parameter version: (path) CDISC Library Product Version 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrQrsMeasureVersionResponsegroupsGet(measure: String, version: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QrsResponsegroups?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrQrsMeasureVersionResponsegroupsGetWithRequestBuilder(measure: measure, version: version).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/qrs/{measure}/{version}/responsegroups
     - Get QRS Response Group List
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter measure: (path) QRS Measure Identifier 
     - parameter version: (path) CDISC Library Product Version 
     - returns: RequestBuilder<QrsResponsegroups> 
     */
    open class func mdrQrsMeasureVersionResponsegroupsGetWithRequestBuilder(measure: String, version: String) -> RequestBuilder<QrsResponsegroups> {
        var localVariablePath = "/mdr/qrs/{measure}/{version}/responsegroups"
        let measurePreEscape = "\(APIHelper.mapValueToPathItem(measure))"
        let measurePostEscape = measurePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measure}", with: measurePostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QrsResponsegroups>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter measure: (path) QRS Measure Identifier 
     - parameter version: (path) CDISC Library Product Version 
     - parameter responsegroup: (path) QRS Measure&#39;s Response Group Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrQrsMeasureVersionResponsegroupsResponsegroupGet(measure: String, version: String, responsegroup: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QrsResponsegroup?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrQrsMeasureVersionResponsegroupsResponsegroupGetWithRequestBuilder(measure: measure, version: version, responsegroup: responsegroup).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/qrs/{measure}/{version}/responsegroups/{responsegroup}
     - Get QRS Response Group
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter measure: (path) QRS Measure Identifier 
     - parameter version: (path) CDISC Library Product Version 
     - parameter responsegroup: (path) QRS Measure&#39;s Response Group Identifier 
     - returns: RequestBuilder<QrsResponsegroup> 
     */
    open class func mdrQrsMeasureVersionResponsegroupsResponsegroupGetWithRequestBuilder(measure: String, version: String, responsegroup: String) -> RequestBuilder<QrsResponsegroup> {
        var localVariablePath = "/mdr/qrs/{measure}/{version}/responsegroups/{responsegroup}"
        let measurePreEscape = "\(APIHelper.mapValueToPathItem(measure))"
        let measurePostEscape = measurePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measure}", with: measurePostEscape, options: .literal, range: nil)
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let responsegroupPreEscape = "\(APIHelper.mapValueToPathItem(responsegroup))"
        let responsegroupPostEscape = responsegroupPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{responsegroup}", with: responsegroupPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QrsResponsegroup>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}

//
// SDTMImplementationGuideSDTMIGAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SDTMImplementationGuideSDTMIGAPI {

    /**

     - parameter dataset: (path) SDTMIG Dataset Identifier 
     - parameter _var: (path) SDTMIG Variable Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrRootSdtmigDatasetsDatasetVariablesVarGet(dataset: String, _var: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RootSdtmigDatasetVariable?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrRootSdtmigDatasetsDatasetVariablesVarGetWithRequestBuilder(dataset: dataset, _var: _var).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/root/sdtmig/datasets/{dataset}/variables/{var}
     - Get Root SDTMIG Dataset Variable
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter dataset: (path) SDTMIG Dataset Identifier 
     - parameter _var: (path) SDTMIG Variable Identifier 
     - returns: RequestBuilder<RootSdtmigDatasetVariable> 
     */
    open class func mdrRootSdtmigDatasetsDatasetVariablesVarGetWithRequestBuilder(dataset: String, _var: String) -> RequestBuilder<RootSdtmigDatasetVariable> {
        var localVariablePath = "/mdr/root/sdtmig/datasets/{dataset}/variables/{var}"
        let datasetPreEscape = "\(APIHelper.mapValueToPathItem(dataset))"
        let datasetPostEscape = datasetPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{dataset}", with: datasetPostEscape, options: .literal, range: nil)
        let _varPreEscape = "\(APIHelper.mapValueToPathItem(_var))"
        let _varPostEscape = _varPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{var}", with: _varPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RootSdtmigDatasetVariable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter _class: (path) SDTMIG Class Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrSdtmigVersionClassesClassDatasetsGet(version: String, _class: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SdtmigClassDatasets?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrSdtmigVersionClassesClassDatasetsGetWithRequestBuilder(version: version, _class: _class).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/sdtmig/{version}/classes/{class}/datasets
     - Get SDTMIG Class Dataset List
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - parameter _class: (path) SDTMIG Class Identifier 
     - returns: RequestBuilder<SdtmigClassDatasets> 
     */
    open class func mdrSdtmigVersionClassesClassDatasetsGetWithRequestBuilder(version: String, _class: String) -> RequestBuilder<SdtmigClassDatasets> {
        var localVariablePath = "/mdr/sdtmig/{version}/classes/{class}/datasets"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let _classPreEscape = "\(APIHelper.mapValueToPathItem(_class))"
        let _classPostEscape = _classPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{class}", with: _classPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SdtmigClassDatasets>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter _class: (path) SDTMIG Class Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrSdtmigVersionClassesClassGet(version: String, _class: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SdtmigClass?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrSdtmigVersionClassesClassGetWithRequestBuilder(version: version, _class: _class).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/sdtmig/{version}/classes/{class}
     - Get SDTMIG Class
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - parameter _class: (path) SDTMIG Class Identifier 
     - returns: RequestBuilder<SdtmigClass> 
     */
    open class func mdrSdtmigVersionClassesClassGetWithRequestBuilder(version: String, _class: String) -> RequestBuilder<SdtmigClass> {
        var localVariablePath = "/mdr/sdtmig/{version}/classes/{class}"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let _classPreEscape = "\(APIHelper.mapValueToPathItem(_class))"
        let _classPostEscape = _classPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{class}", with: _classPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SdtmigClass>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrSdtmigVersionClassesGet(version: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SdtmigClasses?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrSdtmigVersionClassesGetWithRequestBuilder(version: version).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/sdtmig/{version}/classes
     - Get SDTMIG Class List
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - returns: RequestBuilder<SdtmigClasses> 
     */
    open class func mdrSdtmigVersionClassesGetWithRequestBuilder(version: String) -> RequestBuilder<SdtmigClasses> {
        var localVariablePath = "/mdr/sdtmig/{version}/classes"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SdtmigClasses>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter dataset: (path) SDTMIG Dataset Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrSdtmigVersionDatasetsDatasetGet(version: String, dataset: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SdtmigDataset?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrSdtmigVersionDatasetsDatasetGetWithRequestBuilder(version: version, dataset: dataset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/sdtmig/{version}/datasets/{dataset}
     - Get SDTMIG Dataset
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - parameter dataset: (path) SDTMIG Dataset Identifier 
     - returns: RequestBuilder<SdtmigDataset> 
     */
    open class func mdrSdtmigVersionDatasetsDatasetGetWithRequestBuilder(version: String, dataset: String) -> RequestBuilder<SdtmigDataset> {
        var localVariablePath = "/mdr/sdtmig/{version}/datasets/{dataset}"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let datasetPreEscape = "\(APIHelper.mapValueToPathItem(dataset))"
        let datasetPostEscape = datasetPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{dataset}", with: datasetPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SdtmigDataset>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter dataset: (path) SDTMIG Dataset Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrSdtmigVersionDatasetsDatasetVariablesGet(version: String, dataset: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SdtmigDatasetVariables?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrSdtmigVersionDatasetsDatasetVariablesGetWithRequestBuilder(version: version, dataset: dataset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/sdtmig/{version}/datasets/{dataset}/variables
     - Get SDTMIG Dataset Variable List
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - parameter dataset: (path) SDTMIG Dataset Identifier 
     - returns: RequestBuilder<SdtmigDatasetVariables> 
     */
    open class func mdrSdtmigVersionDatasetsDatasetVariablesGetWithRequestBuilder(version: String, dataset: String) -> RequestBuilder<SdtmigDatasetVariables> {
        var localVariablePath = "/mdr/sdtmig/{version}/datasets/{dataset}/variables"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let datasetPreEscape = "\(APIHelper.mapValueToPathItem(dataset))"
        let datasetPostEscape = datasetPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{dataset}", with: datasetPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SdtmigDatasetVariables>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter dataset: (path) SDTMIG Dataset Identifier 
     - parameter _var: (path) SDTMIG Variable Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrSdtmigVersionDatasetsDatasetVariablesVarGet(version: String, dataset: String, _var: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SdtmigDatasetVariable?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrSdtmigVersionDatasetsDatasetVariablesVarGetWithRequestBuilder(version: version, dataset: dataset, _var: _var).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/sdtmig/{version}/datasets/{dataset}/variables/{var}
     - Get SDTMIG Dataset Variable
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - parameter dataset: (path) SDTMIG Dataset Identifier 
     - parameter _var: (path) SDTMIG Variable Identifier 
     - returns: RequestBuilder<SdtmigDatasetVariable> 
     */
    open class func mdrSdtmigVersionDatasetsDatasetVariablesVarGetWithRequestBuilder(version: String, dataset: String, _var: String) -> RequestBuilder<SdtmigDatasetVariable> {
        var localVariablePath = "/mdr/sdtmig/{version}/datasets/{dataset}/variables/{var}"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let datasetPreEscape = "\(APIHelper.mapValueToPathItem(dataset))"
        let datasetPostEscape = datasetPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{dataset}", with: datasetPostEscape, options: .literal, range: nil)
        let _varPreEscape = "\(APIHelper.mapValueToPathItem(_var))"
        let _varPostEscape = _varPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{var}", with: _varPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SdtmigDatasetVariable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrSdtmigVersionDatasetsGet(version: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SdtmigDatasets?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrSdtmigVersionDatasetsGetWithRequestBuilder(version: version).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/sdtmig/{version}/datasets
     - Get SDTMIG Dataset List
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - returns: RequestBuilder<SdtmigDatasets> 
     */
    open class func mdrSdtmigVersionDatasetsGetWithRequestBuilder(version: String) -> RequestBuilder<SdtmigDatasets> {
        var localVariablePath = "/mdr/sdtmig/{version}/datasets"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SdtmigDatasets>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrSdtmigVersionGet(version: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SdtmigProduct?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrSdtmigVersionGetWithRequestBuilder(version: version).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/sdtmig/{version}
     - Get SDTMIG product
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - returns: RequestBuilder<SdtmigProduct> 
     */
    open class func mdrSdtmigVersionGetWithRequestBuilder(version: String) -> RequestBuilder<SdtmigProduct> {
        var localVariablePath = "/mdr/sdtmig/{version}"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SdtmigProduct>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}

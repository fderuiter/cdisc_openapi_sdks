//
// CDASHImplementationGuideCDASHIGAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CDASHImplementationGuideCDASHIGAPI {

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter _class: (path) CDASHIG Class Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCdashigVersionClassesClassDomainsGet(version: String, _class: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CdashigClassDomains?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCdashigVersionClassesClassDomainsGetWithRequestBuilder(version: version, _class: _class).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/cdashig/{version}/classes/{class}/domains
     - Get CDASHIG Class Domain List
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - parameter _class: (path) CDASHIG Class Identifier 
     - returns: RequestBuilder<CdashigClassDomains> 
     */
    open class func mdrCdashigVersionClassesClassDomainsGetWithRequestBuilder(version: String, _class: String) -> RequestBuilder<CdashigClassDomains> {
        var localVariablePath = "/mdr/cdashig/{version}/classes/{class}/domains"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let _classPreEscape = "\(APIHelper.mapValueToPathItem(_class))"
        let _classPostEscape = _classPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{class}", with: _classPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CdashigClassDomains>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter _class: (path) CDASHIG Class Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCdashigVersionClassesClassGet(version: String, _class: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CdashigClass?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCdashigVersionClassesClassGetWithRequestBuilder(version: version, _class: _class).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/cdashig/{version}/classes/{class}
     - Get CDASHIG Class
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - parameter _class: (path) CDASHIG Class Identifier 
     - returns: RequestBuilder<CdashigClass> 
     */
    open class func mdrCdashigVersionClassesClassGetWithRequestBuilder(version: String, _class: String) -> RequestBuilder<CdashigClass> {
        var localVariablePath = "/mdr/cdashig/{version}/classes/{class}"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let _classPreEscape = "\(APIHelper.mapValueToPathItem(_class))"
        let _classPostEscape = _classPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{class}", with: _classPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CdashigClass>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter _class: (path) CDASHIG Class Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCdashigVersionClassesClassScenariosGet(version: String, _class: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CdashigClassScenarios?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCdashigVersionClassesClassScenariosGetWithRequestBuilder(version: version, _class: _class).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/cdashig/{version}/classes/{class}/scenarios
     - Get CDASHIG Class Scenario List
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - parameter _class: (path) CDASHIG Class Identifier 
     - returns: RequestBuilder<CdashigClassScenarios> 
     */
    open class func mdrCdashigVersionClassesClassScenariosGetWithRequestBuilder(version: String, _class: String) -> RequestBuilder<CdashigClassScenarios> {
        var localVariablePath = "/mdr/cdashig/{version}/classes/{class}/scenarios"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let _classPreEscape = "\(APIHelper.mapValueToPathItem(_class))"
        let _classPostEscape = _classPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{class}", with: _classPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CdashigClassScenarios>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCdashigVersionClassesGet(version: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CdashigProductClasses?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCdashigVersionClassesGetWithRequestBuilder(version: version).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/cdashig/{version}/classes
     - Get CDASHIG Class List
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - returns: RequestBuilder<CdashigProductClasses> 
     */
    open class func mdrCdashigVersionClassesGetWithRequestBuilder(version: String) -> RequestBuilder<CdashigProductClasses> {
        var localVariablePath = "/mdr/cdashig/{version}/classes"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CdashigProductClasses>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter domain: (path) CDASHIG Domain Identifier 
     - parameter field: (path) CDASHIG Field Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCdashigVersionDomainsDomainFieldsFieldGet(version: String, domain: String, field: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CdashigDomainField?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCdashigVersionDomainsDomainFieldsFieldGetWithRequestBuilder(version: version, domain: domain, field: field).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/cdashig/{version}/domains/{domain}/fields/{field}
     - Get CDASHIG Domain Field
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - parameter domain: (path) CDASHIG Domain Identifier 
     - parameter field: (path) CDASHIG Field Identifier 
     - returns: RequestBuilder<CdashigDomainField> 
     */
    open class func mdrCdashigVersionDomainsDomainFieldsFieldGetWithRequestBuilder(version: String, domain: String, field: String) -> RequestBuilder<CdashigDomainField> {
        var localVariablePath = "/mdr/cdashig/{version}/domains/{domain}/fields/{field}"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let domainPreEscape = "\(APIHelper.mapValueToPathItem(domain))"
        let domainPostEscape = domainPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{domain}", with: domainPostEscape, options: .literal, range: nil)
        let fieldPreEscape = "\(APIHelper.mapValueToPathItem(field))"
        let fieldPostEscape = fieldPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{field}", with: fieldPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CdashigDomainField>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter domain: (path) CDASHIG Domain Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCdashigVersionDomainsDomainFieldsGet(version: String, domain: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CdashigDomainFields?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCdashigVersionDomainsDomainFieldsGetWithRequestBuilder(version: version, domain: domain).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/cdashig/{version}/domains/{domain}/fields
     - Get CDASHIG Domain Field List
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - parameter domain: (path) CDASHIG Domain Identifier 
     - returns: RequestBuilder<CdashigDomainFields> 
     */
    open class func mdrCdashigVersionDomainsDomainFieldsGetWithRequestBuilder(version: String, domain: String) -> RequestBuilder<CdashigDomainFields> {
        var localVariablePath = "/mdr/cdashig/{version}/domains/{domain}/fields"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let domainPreEscape = "\(APIHelper.mapValueToPathItem(domain))"
        let domainPostEscape = domainPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{domain}", with: domainPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CdashigDomainFields>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter domain: (path) CDASHIG Domain Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCdashigVersionDomainsDomainGet(version: String, domain: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CdashigDomain?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCdashigVersionDomainsDomainGetWithRequestBuilder(version: version, domain: domain).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/cdashig/{version}/domains/{domain}
     - Get CDASHIG Domain
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - parameter domain: (path) CDASHIG Domain Identifier 
     - returns: RequestBuilder<CdashigDomain> 
     */
    open class func mdrCdashigVersionDomainsDomainGetWithRequestBuilder(version: String, domain: String) -> RequestBuilder<CdashigDomain> {
        var localVariablePath = "/mdr/cdashig/{version}/domains/{domain}"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let domainPreEscape = "\(APIHelper.mapValueToPathItem(domain))"
        let domainPostEscape = domainPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{domain}", with: domainPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CdashigDomain>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCdashigVersionDomainsGet(version: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CdashigProductDomains?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCdashigVersionDomainsGetWithRequestBuilder(version: version).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/cdashig/{version}/domains
     - Get CDASHIG Domain List
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - returns: RequestBuilder<CdashigProductDomains> 
     */
    open class func mdrCdashigVersionDomainsGetWithRequestBuilder(version: String) -> RequestBuilder<CdashigProductDomains> {
        var localVariablePath = "/mdr/cdashig/{version}/domains"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CdashigProductDomains>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCdashigVersionGet(version: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CdashigProduct?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCdashigVersionGetWithRequestBuilder(version: version).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/cdashig/{version}
     - Get CDASHIG Product
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - returns: RequestBuilder<CdashigProduct> 
     */
    open class func mdrCdashigVersionGetWithRequestBuilder(version: String) -> RequestBuilder<CdashigProduct> {
        var localVariablePath = "/mdr/cdashig/{version}"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CdashigProduct>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter domain: (path) CDASHIG Domain Identifier 
     - parameter scenario: (path) CDASHIG Scenario Identifier 
     - parameter field: (path) CDASHIG Field Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet(version: String, domain: String, scenario: String, field: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CdashigScenarioField?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetWithRequestBuilder(version: version, domain: domain, scenario: scenario, field: field).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields/{field}
     - Get CDASHIG Scenario Field
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - parameter domain: (path) CDASHIG Domain Identifier 
     - parameter scenario: (path) CDASHIG Scenario Identifier 
     - parameter field: (path) CDASHIG Field Identifier 
     - returns: RequestBuilder<CdashigScenarioField> 
     */
    open class func mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetWithRequestBuilder(version: String, domain: String, scenario: String, field: String) -> RequestBuilder<CdashigScenarioField> {
        var localVariablePath = "/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields/{field}"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let domainPreEscape = "\(APIHelper.mapValueToPathItem(domain))"
        let domainPostEscape = domainPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{domain}", with: domainPostEscape, options: .literal, range: nil)
        let scenarioPreEscape = "\(APIHelper.mapValueToPathItem(scenario))"
        let scenarioPostEscape = scenarioPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{scenario}", with: scenarioPostEscape, options: .literal, range: nil)
        let fieldPreEscape = "\(APIHelper.mapValueToPathItem(field))"
        let fieldPostEscape = fieldPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{field}", with: fieldPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CdashigScenarioField>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter domain: (path) CDASHIG Domain Identifier 
     - parameter scenario: (path) CDASHIG Scenario Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCdashigVersionScenariosDomainScenarioFieldsGet(version: String, domain: String, scenario: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CdashigScenarioFields?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCdashigVersionScenariosDomainScenarioFieldsGetWithRequestBuilder(version: version, domain: domain, scenario: scenario).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields
     - Get CDASHIG Scenario Field List
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - parameter domain: (path) CDASHIG Domain Identifier 
     - parameter scenario: (path) CDASHIG Scenario Identifier 
     - returns: RequestBuilder<CdashigScenarioFields> 
     */
    open class func mdrCdashigVersionScenariosDomainScenarioFieldsGetWithRequestBuilder(version: String, domain: String, scenario: String) -> RequestBuilder<CdashigScenarioFields> {
        var localVariablePath = "/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let domainPreEscape = "\(APIHelper.mapValueToPathItem(domain))"
        let domainPostEscape = domainPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{domain}", with: domainPostEscape, options: .literal, range: nil)
        let scenarioPreEscape = "\(APIHelper.mapValueToPathItem(scenario))"
        let scenarioPostEscape = scenarioPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{scenario}", with: scenarioPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CdashigScenarioFields>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter domain: (path) CDASHIG Domain Identifier 
     - parameter scenario: (path) CDASHIG Scenario Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCdashigVersionScenariosDomainScenarioGet(version: String, domain: String, scenario: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CdashigScenario?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCdashigVersionScenariosDomainScenarioGetWithRequestBuilder(version: version, domain: domain, scenario: scenario).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/cdashig/{version}/scenarios/{domain}.{scenario}
     - Get CDASHIG Scenario
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - parameter domain: (path) CDASHIG Domain Identifier 
     - parameter scenario: (path) CDASHIG Scenario Identifier 
     - returns: RequestBuilder<CdashigScenario> 
     */
    open class func mdrCdashigVersionScenariosDomainScenarioGetWithRequestBuilder(version: String, domain: String, scenario: String) -> RequestBuilder<CdashigScenario> {
        var localVariablePath = "/mdr/cdashig/{version}/scenarios/{domain}.{scenario}"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let domainPreEscape = "\(APIHelper.mapValueToPathItem(domain))"
        let domainPostEscape = domainPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{domain}", with: domainPostEscape, options: .literal, range: nil)
        let scenarioPreEscape = "\(APIHelper.mapValueToPathItem(scenario))"
        let scenarioPostEscape = scenarioPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{scenario}", with: scenarioPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CdashigScenario>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCdashigVersionScenariosGet(version: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CdashigProductScenarios?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCdashigVersionScenariosGetWithRequestBuilder(version: version).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/cdashig/{version}/scenarios
     - Get CDASHIG Scenario List
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - returns: RequestBuilder<CdashigProductScenarios> 
     */
    open class func mdrCdashigVersionScenariosGetWithRequestBuilder(version: String) -> RequestBuilder<CdashigProductScenarios> {
        var localVariablePath = "/mdr/cdashig/{version}/scenarios"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CdashigProductScenarios>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter domain: (path) CDASHIG Domain Identifier 
     - parameter field: (path) CDASHIG Field Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrRootCdashigDomainsDomainFieldsFieldGet(domain: String, field: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RootCdashigDomainField?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrRootCdashigDomainsDomainFieldsFieldGetWithRequestBuilder(domain: domain, field: field).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/root/cdashig/domains/{domain}/fields/{field}
     - Get Root CDASHIG Domain Field
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter domain: (path) CDASHIG Domain Identifier 
     - parameter field: (path) CDASHIG Field Identifier 
     - returns: RequestBuilder<RootCdashigDomainField> 
     */
    open class func mdrRootCdashigDomainsDomainFieldsFieldGetWithRequestBuilder(domain: String, field: String) -> RequestBuilder<RootCdashigDomainField> {
        var localVariablePath = "/mdr/root/cdashig/domains/{domain}/fields/{field}"
        let domainPreEscape = "\(APIHelper.mapValueToPathItem(domain))"
        let domainPostEscape = domainPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{domain}", with: domainPostEscape, options: .literal, range: nil)
        let fieldPreEscape = "\(APIHelper.mapValueToPathItem(field))"
        let fieldPostEscape = fieldPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{field}", with: fieldPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RootCdashigDomainField>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter domain: (path) CDASHIG Domain Identifier 
     - parameter scenario: (path) CDASHIG Scenario Identifier 
     - parameter field: (path) CDASHIG Field Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrRootCdashigScenariosDomainScenarioFieldsFieldGet(domain: String, scenario: String, field: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RootCdashigScenarioField?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrRootCdashigScenariosDomainScenarioFieldsFieldGetWithRequestBuilder(domain: domain, scenario: scenario, field: field).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/root/cdashig/scenarios/{domain}.{scenario}/fields/{field}
     - Get Root CDASHIG Scenario Field
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter domain: (path) CDASHIG Domain Identifier 
     - parameter scenario: (path) CDASHIG Scenario Identifier 
     - parameter field: (path) CDASHIG Field Identifier 
     - returns: RequestBuilder<RootCdashigScenarioField> 
     */
    open class func mdrRootCdashigScenariosDomainScenarioFieldsFieldGetWithRequestBuilder(domain: String, scenario: String, field: String) -> RequestBuilder<RootCdashigScenarioField> {
        var localVariablePath = "/mdr/root/cdashig/scenarios/{domain}.{scenario}/fields/{field}"
        let domainPreEscape = "\(APIHelper.mapValueToPathItem(domain))"
        let domainPostEscape = domainPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{domain}", with: domainPostEscape, options: .literal, range: nil)
        let scenarioPreEscape = "\(APIHelper.mapValueToPathItem(scenario))"
        let scenarioPostEscape = scenarioPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{scenario}", with: scenarioPostEscape, options: .literal, range: nil)
        let fieldPreEscape = "\(APIHelper.mapValueToPathItem(field))"
        let fieldPostEscape = fieldPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{field}", with: fieldPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RootCdashigScenarioField>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}

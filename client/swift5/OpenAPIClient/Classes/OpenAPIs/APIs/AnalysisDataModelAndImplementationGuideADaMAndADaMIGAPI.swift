//
// AnalysisDataModelAndImplementationGuideADaMAndADaMIGAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AnalysisDataModelAndImplementationGuideADaMAndADaMIGAPI {

    /**

     - parameter product: (path) CDISC Library Product 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrAdamProductDatastructuresGet(product: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdamProductDatastructures?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrAdamProductDatastructuresGetWithRequestBuilder(product: product).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/adam/{product}/datastructures
     - Get ADaM Data Structure List
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter product: (path) CDISC Library Product 
     - returns: RequestBuilder<AdamProductDatastructures> 
     */
    open class func mdrAdamProductDatastructuresGetWithRequestBuilder(product: String) -> RequestBuilder<AdamProductDatastructures> {
        var localVariablePath = "/mdr/adam/{product}/datastructures"
        let productPreEscape = "\(APIHelper.mapValueToPathItem(product))"
        let productPostEscape = productPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{product}", with: productPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdamProductDatastructures>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter product: (path) CDISC Library Product 
     - parameter structure: (path) Data structure Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrAdamProductDatastructuresStructureGet(product: String, structure: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdamDatastructure?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrAdamProductDatastructuresStructureGetWithRequestBuilder(product: product, structure: structure).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/adam/{product}/datastructures/{structure}
     - Get ADaM Data Structure
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter product: (path) CDISC Library Product 
     - parameter structure: (path) Data structure Identifier 
     - returns: RequestBuilder<AdamDatastructure> 
     */
    open class func mdrAdamProductDatastructuresStructureGetWithRequestBuilder(product: String, structure: String) -> RequestBuilder<AdamDatastructure> {
        var localVariablePath = "/mdr/adam/{product}/datastructures/{structure}"
        let productPreEscape = "\(APIHelper.mapValueToPathItem(product))"
        let productPostEscape = productPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{product}", with: productPostEscape, options: .literal, range: nil)
        let structurePreEscape = "\(APIHelper.mapValueToPathItem(structure))"
        let structurePostEscape = structurePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{structure}", with: structurePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdamDatastructure>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter product: (path) CDISC Library Product 
     - parameter structure: (path) ADaM Data Structure Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrAdamProductDatastructuresStructureVariablesGet(product: String, structure: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdamDatastructureVariables?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrAdamProductDatastructuresStructureVariablesGetWithRequestBuilder(product: product, structure: structure).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/adam/{product}/datastructures/{structure}/variables
     - Get ADaM Variable List
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter product: (path) CDISC Library Product 
     - parameter structure: (path) ADaM Data Structure Identifier 
     - returns: RequestBuilder<AdamDatastructureVariables> 
     */
    open class func mdrAdamProductDatastructuresStructureVariablesGetWithRequestBuilder(product: String, structure: String) -> RequestBuilder<AdamDatastructureVariables> {
        var localVariablePath = "/mdr/adam/{product}/datastructures/{structure}/variables"
        let productPreEscape = "\(APIHelper.mapValueToPathItem(product))"
        let productPostEscape = productPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{product}", with: productPostEscape, options: .literal, range: nil)
        let structurePreEscape = "\(APIHelper.mapValueToPathItem(structure))"
        let structurePostEscape = structurePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{structure}", with: structurePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdamDatastructureVariables>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter product: (path) CDISC Library Product 
     - parameter structure: (path) ADaM Data Structure Identifier 
     - parameter _var: (path) ADaM Variable Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrAdamProductDatastructuresStructureVariablesVarGet(product: String, structure: String, _var: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdamVariable?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrAdamProductDatastructuresStructureVariablesVarGetWithRequestBuilder(product: product, structure: structure, _var: _var).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/adam/{product}/datastructures/{structure}/variables/{var}
     - Get ADaM Variable
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter product: (path) CDISC Library Product 
     - parameter structure: (path) ADaM Data Structure Identifier 
     - parameter _var: (path) ADaM Variable Identifier 
     - returns: RequestBuilder<AdamVariable> 
     */
    open class func mdrAdamProductDatastructuresStructureVariablesVarGetWithRequestBuilder(product: String, structure: String, _var: String) -> RequestBuilder<AdamVariable> {
        var localVariablePath = "/mdr/adam/{product}/datastructures/{structure}/variables/{var}"
        let productPreEscape = "\(APIHelper.mapValueToPathItem(product))"
        let productPostEscape = productPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{product}", with: productPostEscape, options: .literal, range: nil)
        let structurePreEscape = "\(APIHelper.mapValueToPathItem(structure))"
        let structurePostEscape = structurePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{structure}", with: structurePostEscape, options: .literal, range: nil)
        let _varPreEscape = "\(APIHelper.mapValueToPathItem(_var))"
        let _varPostEscape = _varPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{var}", with: _varPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdamVariable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter product: (path) CDISC Library Product 
     - parameter structure: (path) ADaM Data Structure Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrAdamProductDatastructuresStructureVarsetsGet(product: String, structure: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdamDatastructureVarsets?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrAdamProductDatastructuresStructureVarsetsGetWithRequestBuilder(product: product, structure: structure).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/adam/{product}/datastructures/{structure}/varsets
     - Get ADaM Variable Set List
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter product: (path) CDISC Library Product 
     - parameter structure: (path) ADaM Data Structure Identifier 
     - returns: RequestBuilder<AdamDatastructureVarsets> 
     */
    open class func mdrAdamProductDatastructuresStructureVarsetsGetWithRequestBuilder(product: String, structure: String) -> RequestBuilder<AdamDatastructureVarsets> {
        var localVariablePath = "/mdr/adam/{product}/datastructures/{structure}/varsets"
        let productPreEscape = "\(APIHelper.mapValueToPathItem(product))"
        let productPostEscape = productPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{product}", with: productPostEscape, options: .literal, range: nil)
        let structurePreEscape = "\(APIHelper.mapValueToPathItem(structure))"
        let structurePostEscape = structurePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{structure}", with: structurePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdamDatastructureVarsets>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter product: (path) CDISC Library Product 
     - parameter structure: (path) ADaM Data Structure Identifier 
     - parameter varset: (path) ADaM Variable Set Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrAdamProductDatastructuresStructureVarsetsVarsetGet(product: String, structure: String, varset: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdamVarset?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrAdamProductDatastructuresStructureVarsetsVarsetGetWithRequestBuilder(product: product, structure: structure, varset: varset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/adam/{product}/datastructures/{structure}/varsets/{varset}
     - Get ADaM Variable Set
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter product: (path) CDISC Library Product 
     - parameter structure: (path) ADaM Data Structure Identifier 
     - parameter varset: (path) ADaM Variable Set Identifier 
     - returns: RequestBuilder<AdamVarset> 
     */
    open class func mdrAdamProductDatastructuresStructureVarsetsVarsetGetWithRequestBuilder(product: String, structure: String, varset: String) -> RequestBuilder<AdamVarset> {
        var localVariablePath = "/mdr/adam/{product}/datastructures/{structure}/varsets/{varset}"
        let productPreEscape = "\(APIHelper.mapValueToPathItem(product))"
        let productPostEscape = productPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{product}", with: productPostEscape, options: .literal, range: nil)
        let structurePreEscape = "\(APIHelper.mapValueToPathItem(structure))"
        let structurePostEscape = structurePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{structure}", with: structurePostEscape, options: .literal, range: nil)
        let varsetPreEscape = "\(APIHelper.mapValueToPathItem(varset))"
        let varsetPostEscape = varsetPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{varset}", with: varsetPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdamVarset>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter product: (path) CDISC Library Product 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrAdamProductGet(product: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AdamProduct?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrAdamProductGetWithRequestBuilder(product: product).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/adam/{product}
     - Get ADaM Product
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter product: (path) CDISC Library Product 
     - returns: RequestBuilder<AdamProduct> 
     */
    open class func mdrAdamProductGetWithRequestBuilder(product: String) -> RequestBuilder<AdamProduct> {
        var localVariablePath = "/mdr/adam/{product}"
        let productPreEscape = "\(APIHelper.mapValueToPathItem(product))"
        let productPostEscape = productPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{product}", with: productPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AdamProduct>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}

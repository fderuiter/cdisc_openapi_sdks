//
// ClinicalDataAcquisitionStandardsHarmonizationCDASHAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ClinicalDataAcquisitionStandardsHarmonizationCDASHAPI {

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter _class: (path) CDASH Class Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCdashVersionClassesClassDomainsGet(version: String, _class: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CdashClassDomains?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCdashVersionClassesClassDomainsGetWithRequestBuilder(version: version, _class: _class).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/cdash/{version}/classes/{class}/domains
     - Get CDASH Class Domain List
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - parameter _class: (path) CDASH Class Identifier 
     - returns: RequestBuilder<CdashClassDomains> 
     */
    open class func mdrCdashVersionClassesClassDomainsGetWithRequestBuilder(version: String, _class: String) -> RequestBuilder<CdashClassDomains> {
        var localVariablePath = "/mdr/cdash/{version}/classes/{class}/domains"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let _classPreEscape = "\(APIHelper.mapValueToPathItem(_class))"
        let _classPostEscape = _classPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{class}", with: _classPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CdashClassDomains>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter _class: (path) CDASH Class Identifier 
     - parameter field: (path) CDASH Field Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCdashVersionClassesClassFieldsFieldGet(version: String, _class: String, field: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CdashClassField?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCdashVersionClassesClassFieldsFieldGetWithRequestBuilder(version: version, _class: _class, field: field).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/cdash/{version}/classes/{class}/fields/{field}
     - Get CDASH Class Field
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - parameter _class: (path) CDASH Class Identifier 
     - parameter field: (path) CDASH Field Identifier 
     - returns: RequestBuilder<CdashClassField> 
     */
    open class func mdrCdashVersionClassesClassFieldsFieldGetWithRequestBuilder(version: String, _class: String, field: String) -> RequestBuilder<CdashClassField> {
        var localVariablePath = "/mdr/cdash/{version}/classes/{class}/fields/{field}"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let _classPreEscape = "\(APIHelper.mapValueToPathItem(_class))"
        let _classPostEscape = _classPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{class}", with: _classPostEscape, options: .literal, range: nil)
        let fieldPreEscape = "\(APIHelper.mapValueToPathItem(field))"
        let fieldPostEscape = fieldPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{field}", with: fieldPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CdashClassField>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter _class: (path) CDASH Class Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCdashVersionClassesClassGet(version: String, _class: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CdashClass?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCdashVersionClassesClassGetWithRequestBuilder(version: version, _class: _class).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/cdash/{version}/classes/{class}
     - Get CDASH Class
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - parameter _class: (path) CDASH Class Identifier 
     - returns: RequestBuilder<CdashClass> 
     */
    open class func mdrCdashVersionClassesClassGetWithRequestBuilder(version: String, _class: String) -> RequestBuilder<CdashClass> {
        var localVariablePath = "/mdr/cdash/{version}/classes/{class}"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let _classPreEscape = "\(APIHelper.mapValueToPathItem(_class))"
        let _classPostEscape = _classPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{class}", with: _classPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CdashClass>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCdashVersionClassesGet(version: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CdashProductClasses?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCdashVersionClassesGetWithRequestBuilder(version: version).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/cdash/{version}/classes
     - Get CDASH Class List
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - returns: RequestBuilder<CdashProductClasses> 
     */
    open class func mdrCdashVersionClassesGetWithRequestBuilder(version: String) -> RequestBuilder<CdashProductClasses> {
        var localVariablePath = "/mdr/cdash/{version}/classes"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CdashProductClasses>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter domain: (path) CDASH Domain Identifier 
     - parameter field: (path) CDASH Field Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCdashVersionDomainsDomainFieldsFieldGet(version: String, domain: String, field: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CdashDomainField?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCdashVersionDomainsDomainFieldsFieldGetWithRequestBuilder(version: version, domain: domain, field: field).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/cdash/{version}/domains/{domain}/fields/{field}
     - Get CDASH Domain Field
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - parameter domain: (path) CDASH Domain Identifier 
     - parameter field: (path) CDASH Field Identifier 
     - returns: RequestBuilder<CdashDomainField> 
     */
    open class func mdrCdashVersionDomainsDomainFieldsFieldGetWithRequestBuilder(version: String, domain: String, field: String) -> RequestBuilder<CdashDomainField> {
        var localVariablePath = "/mdr/cdash/{version}/domains/{domain}/fields/{field}"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let domainPreEscape = "\(APIHelper.mapValueToPathItem(domain))"
        let domainPostEscape = domainPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{domain}", with: domainPostEscape, options: .literal, range: nil)
        let fieldPreEscape = "\(APIHelper.mapValueToPathItem(field))"
        let fieldPostEscape = fieldPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{field}", with: fieldPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CdashDomainField>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter domain: (path) CDASH Domain Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCdashVersionDomainsDomainFieldsGet(version: String, domain: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CdashDomainFields?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCdashVersionDomainsDomainFieldsGetWithRequestBuilder(version: version, domain: domain).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/cdash/{version}/domains/{domain}/fields
     - Get CDASH Domain Field List
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - parameter domain: (path) CDASH Domain Identifier 
     - returns: RequestBuilder<CdashDomainFields> 
     */
    open class func mdrCdashVersionDomainsDomainFieldsGetWithRequestBuilder(version: String, domain: String) -> RequestBuilder<CdashDomainFields> {
        var localVariablePath = "/mdr/cdash/{version}/domains/{domain}/fields"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let domainPreEscape = "\(APIHelper.mapValueToPathItem(domain))"
        let domainPostEscape = domainPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{domain}", with: domainPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CdashDomainFields>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter domain: (path) CDASH Domain Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCdashVersionDomainsDomainGet(version: String, domain: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CdashDomain?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCdashVersionDomainsDomainGetWithRequestBuilder(version: version, domain: domain).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/cdash/{version}/domains/{domain}
     - Get CDASH Domain
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - parameter domain: (path) CDASH Domain Identifier 
     - returns: RequestBuilder<CdashDomain> 
     */
    open class func mdrCdashVersionDomainsDomainGetWithRequestBuilder(version: String, domain: String) -> RequestBuilder<CdashDomain> {
        var localVariablePath = "/mdr/cdash/{version}/domains/{domain}"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let domainPreEscape = "\(APIHelper.mapValueToPathItem(domain))"
        let domainPostEscape = domainPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{domain}", with: domainPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CdashDomain>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCdashVersionDomainsGet(version: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CdashProductDomains?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCdashVersionDomainsGetWithRequestBuilder(version: version).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/cdash/{version}/domains
     - Get CDASH Domain List
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - returns: RequestBuilder<CdashProductDomains> 
     */
    open class func mdrCdashVersionDomainsGetWithRequestBuilder(version: String) -> RequestBuilder<CdashProductDomains> {
        var localVariablePath = "/mdr/cdash/{version}/domains"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CdashProductDomains>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter version: (path) CDISC Library Product Version 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCdashVersionGet(version: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CdashProduct?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCdashVersionGetWithRequestBuilder(version: version).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/cdash/{version}
     - Get CDASH Product
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter version: (path) CDISC Library Product Version 
     - returns: RequestBuilder<CdashProduct> 
     */
    open class func mdrCdashVersionGetWithRequestBuilder(version: String) -> RequestBuilder<CdashProduct> {
        var localVariablePath = "/mdr/cdash/{version}"
        let versionPreEscape = "\(APIHelper.mapValueToPathItem(version))"
        let versionPostEscape = versionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: versionPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CdashProduct>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter _class: (path) CDASH Class Identifier 
     - parameter field: (path) CDASH Field Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrRootCdashClassesClassFieldsFieldGet(_class: String, field: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RootCdashClassField?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrRootCdashClassesClassFieldsFieldGetWithRequestBuilder(_class: _class, field: field).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/root/cdash/classes/{class}/fields/{field}
     - Get Root CDASH Class Field
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter _class: (path) CDASH Class Identifier 
     - parameter field: (path) CDASH Field Identifier 
     - returns: RequestBuilder<RootCdashClassField> 
     */
    open class func mdrRootCdashClassesClassFieldsFieldGetWithRequestBuilder(_class: String, field: String) -> RequestBuilder<RootCdashClassField> {
        var localVariablePath = "/mdr/root/cdash/classes/{class}/fields/{field}"
        let _classPreEscape = "\(APIHelper.mapValueToPathItem(_class))"
        let _classPostEscape = _classPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{class}", with: _classPostEscape, options: .literal, range: nil)
        let fieldPreEscape = "\(APIHelper.mapValueToPathItem(field))"
        let fieldPostEscape = fieldPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{field}", with: fieldPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RootCdashClassField>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter domain: (path) CDASH Domain Identifier 
     - parameter field: (path) CDASH Field Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrRootCdashDomainsDomainFieldsFieldGet(domain: String, field: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RootCdashDomainField?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrRootCdashDomainsDomainFieldsFieldGetWithRequestBuilder(domain: domain, field: field).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/root/cdash/domains/{domain}/fields/{field}
     - Get Root CDASH Domain Field
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter domain: (path) CDASH Domain Identifier 
     - parameter field: (path) CDASH Field Identifier 
     - returns: RequestBuilder<RootCdashDomainField> 
     */
    open class func mdrRootCdashDomainsDomainFieldsFieldGetWithRequestBuilder(domain: String, field: String) -> RequestBuilder<RootCdashDomainField> {
        var localVariablePath = "/mdr/root/cdash/domains/{domain}/fields/{field}"
        let domainPreEscape = "\(APIHelper.mapValueToPathItem(domain))"
        let domainPostEscape = domainPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{domain}", with: domainPostEscape, options: .literal, range: nil)
        let fieldPreEscape = "\(APIHelper.mapValueToPathItem(field))"
        let fieldPostEscape = fieldPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{field}", with: fieldPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RootCdashDomainField>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}

//
// SearchesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SearchesAPI {

    /**

     - parameter q: (query) Search Term Expression 
     - parameter highlight: (query) Search Highlight Expression (optional)
     - parameter start: (query) Initial Search Result Index (optional, default to 0)
     - parameter pageSize: (query) Number of Search Results to Return (optional, default to 100)
     - parameter _class: (query) Limit Search by Setting Scope to Class (optional)
     - parameter codelist: (query) Limit Search by Setting Scope to Codelist (optional)
     - parameter conceptId: (query) Limit Search by Setting Scope to Concept ID (optional)
     - parameter core: (query) Limit Search by Setting Scope to Core (optional)
     - parameter dataStructure: (query) Limit Search by Setting Scope to Data Structure (optional)
     - parameter datasetStructure: (query) Limit Search by Setting Scope to Dataset Structure (optional)
     - parameter definition: (query) Limit Search by Setting Scope to Definition (optional)
     - parameter description: (query) Limit Search by Setting Scope to Description (optional)
     - parameter domain: (query) Limit Search by Setting Scope to Domain (optional)
     - parameter effectiveDate: (query) Limit Search by Setting Scope to Effective Date (optional)
     - parameter extensible: (query) Limit Search by Setting Scope to Extensible (optional)
     - parameter href: (query) Limit Search by Setting Scope to Href (optional)
     - parameter label: (query) Limit Search by Setting Scope to Label (optional)
     - parameter measureType: (query) SLimit Search by Setting Scope to Measure Type (optional)
     - parameter name: (query) Limit Search by Setting Scope to Name (optional)
     - parameter preferredTerm: (query) Limit Search by Setting Scope to Preferred Term (optional)
     - parameter product: (query) Limit Search by Setting Scope to Product (optional)
     - parameter productGroup: (query) Limit Search by Setting Scope to Product Group (optional)
     - parameter registrationStatus: (query) Limit Search by Setting Scope to Registration Status (optional)
     - parameter roleDescription: (query) Limit Search by Setting Scope to Role Description (optional)
     - parameter sdtmTarget: (query) Limit Search by Setting Scope to SDTM Target (optional)
     - parameter simpleDatatype: (query) Limit Search by Setting Scope to Simple Datatype (optional)
     - parameter submissionValue: (query) Limit Search by Setting Scope to Submission Value (optional)
     - parameter synonyms: (query) Limit Search by Setting Scope to Synonyms (optional)
     - parameter type: (query) Limit Search by Setting Scope to Type (optional)
     - parameter uiHref: (query) Limit Search by Setting Scope to UI Href (optional)
     - parameter valueDomain: (query) Limit Search by Setting Scope to Value Domain (optional)
     - parameter variableSet: (query) Limit Search by Setting Scope to Variable Set (optional)
     - parameter version: (query) Limit Search by Setting Scope to Version (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrSearchGet(q: String, highlight: String? = nil, start: Double? = nil, pageSize: Double? = nil, _class: String? = nil, codelist: String? = nil, conceptId: String? = nil, core: String? = nil, dataStructure: String? = nil, datasetStructure: String? = nil, definition: String? = nil, description: String? = nil, domain: String? = nil, effectiveDate: String? = nil, extensible: String? = nil, href: String? = nil, label: String? = nil, measureType: String? = nil, name: String? = nil, preferredTerm: String? = nil, product: String? = nil, productGroup: String? = nil, registrationStatus: String? = nil, roleDescription: String? = nil, sdtmTarget: String? = nil, simpleDatatype: String? = nil, submissionValue: String? = nil, synonyms: String? = nil, type: String? = nil, uiHref: String? = nil, valueDomain: String? = nil, variableSet: String? = nil, version: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DefaultSearchResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrSearchGetWithRequestBuilder(q: q, highlight: highlight, start: start, pageSize: pageSize, _class: _class, codelist: codelist, conceptId: conceptId, core: core, dataStructure: dataStructure, datasetStructure: datasetStructure, definition: definition, description: description, domain: domain, effectiveDate: effectiveDate, extensible: extensible, href: href, label: label, measureType: measureType, name: name, preferredTerm: preferredTerm, product: product, productGroup: productGroup, registrationStatus: registrationStatus, roleDescription: roleDescription, sdtmTarget: sdtmTarget, simpleDatatype: simpleDatatype, submissionValue: submissionValue, synonyms: synonyms, type: type, uiHref: uiHref, valueDomain: valueDomain, variableSet: variableSet, version: version).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/search
     - Get Search Results Across CDISC Library
     - BASIC:
       - type: http
       - name: basicAuth
     - externalDocs: class ExternalDocumentation {
    description: Release Notes about Searches
    url: https://wiki.cdisc.org/display/LIBSUPRT/Search
}
     - parameter q: (query) Search Term Expression 
     - parameter highlight: (query) Search Highlight Expression (optional)
     - parameter start: (query) Initial Search Result Index (optional, default to 0)
     - parameter pageSize: (query) Number of Search Results to Return (optional, default to 100)
     - parameter _class: (query) Limit Search by Setting Scope to Class (optional)
     - parameter codelist: (query) Limit Search by Setting Scope to Codelist (optional)
     - parameter conceptId: (query) Limit Search by Setting Scope to Concept ID (optional)
     - parameter core: (query) Limit Search by Setting Scope to Core (optional)
     - parameter dataStructure: (query) Limit Search by Setting Scope to Data Structure (optional)
     - parameter datasetStructure: (query) Limit Search by Setting Scope to Dataset Structure (optional)
     - parameter definition: (query) Limit Search by Setting Scope to Definition (optional)
     - parameter description: (query) Limit Search by Setting Scope to Description (optional)
     - parameter domain: (query) Limit Search by Setting Scope to Domain (optional)
     - parameter effectiveDate: (query) Limit Search by Setting Scope to Effective Date (optional)
     - parameter extensible: (query) Limit Search by Setting Scope to Extensible (optional)
     - parameter href: (query) Limit Search by Setting Scope to Href (optional)
     - parameter label: (query) Limit Search by Setting Scope to Label (optional)
     - parameter measureType: (query) SLimit Search by Setting Scope to Measure Type (optional)
     - parameter name: (query) Limit Search by Setting Scope to Name (optional)
     - parameter preferredTerm: (query) Limit Search by Setting Scope to Preferred Term (optional)
     - parameter product: (query) Limit Search by Setting Scope to Product (optional)
     - parameter productGroup: (query) Limit Search by Setting Scope to Product Group (optional)
     - parameter registrationStatus: (query) Limit Search by Setting Scope to Registration Status (optional)
     - parameter roleDescription: (query) Limit Search by Setting Scope to Role Description (optional)
     - parameter sdtmTarget: (query) Limit Search by Setting Scope to SDTM Target (optional)
     - parameter simpleDatatype: (query) Limit Search by Setting Scope to Simple Datatype (optional)
     - parameter submissionValue: (query) Limit Search by Setting Scope to Submission Value (optional)
     - parameter synonyms: (query) Limit Search by Setting Scope to Synonyms (optional)
     - parameter type: (query) Limit Search by Setting Scope to Type (optional)
     - parameter uiHref: (query) Limit Search by Setting Scope to UI Href (optional)
     - parameter valueDomain: (query) Limit Search by Setting Scope to Value Domain (optional)
     - parameter variableSet: (query) Limit Search by Setting Scope to Variable Set (optional)
     - parameter version: (query) Limit Search by Setting Scope to Version (optional)
     - returns: RequestBuilder<DefaultSearchResponse> 
     */
    open class func mdrSearchGetWithRequestBuilder(q: String, highlight: String? = nil, start: Double? = nil, pageSize: Double? = nil, _class: String? = nil, codelist: String? = nil, conceptId: String? = nil, core: String? = nil, dataStructure: String? = nil, datasetStructure: String? = nil, definition: String? = nil, description: String? = nil, domain: String? = nil, effectiveDate: String? = nil, extensible: String? = nil, href: String? = nil, label: String? = nil, measureType: String? = nil, name: String? = nil, preferredTerm: String? = nil, product: String? = nil, productGroup: String? = nil, registrationStatus: String? = nil, roleDescription: String? = nil, sdtmTarget: String? = nil, simpleDatatype: String? = nil, submissionValue: String? = nil, synonyms: String? = nil, type: String? = nil, uiHref: String? = nil, valueDomain: String? = nil, variableSet: String? = nil, version: String? = nil) -> RequestBuilder<DefaultSearchResponse> {
        let localVariablePath = "/mdr/search"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": (wrappedValue: q.encodeToJSON(), isExplode: true),
            "highlight": (wrappedValue: highlight?.encodeToJSON(), isExplode: true),
            "start": (wrappedValue: start?.encodeToJSON(), isExplode: true),
            "pageSize": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "class": (wrappedValue: _class?.encodeToJSON(), isExplode: true),
            "codelist": (wrappedValue: codelist?.encodeToJSON(), isExplode: true),
            "conceptId": (wrappedValue: conceptId?.encodeToJSON(), isExplode: true),
            "core": (wrappedValue: core?.encodeToJSON(), isExplode: true),
            "dataStructure": (wrappedValue: dataStructure?.encodeToJSON(), isExplode: true),
            "datasetStructure": (wrappedValue: datasetStructure?.encodeToJSON(), isExplode: true),
            "definition": (wrappedValue: definition?.encodeToJSON(), isExplode: true),
            "description": (wrappedValue: description?.encodeToJSON(), isExplode: true),
            "domain": (wrappedValue: domain?.encodeToJSON(), isExplode: true),
            "effectiveDate": (wrappedValue: effectiveDate?.encodeToJSON(), isExplode: true),
            "extensible": (wrappedValue: extensible?.encodeToJSON(), isExplode: true),
            "href": (wrappedValue: href?.encodeToJSON(), isExplode: true),
            "label": (wrappedValue: label?.encodeToJSON(), isExplode: true),
            "measureType": (wrappedValue: measureType?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "preferredTerm": (wrappedValue: preferredTerm?.encodeToJSON(), isExplode: true),
            "product": (wrappedValue: product?.encodeToJSON(), isExplode: true),
            "productGroup": (wrappedValue: productGroup?.encodeToJSON(), isExplode: true),
            "registrationStatus": (wrappedValue: registrationStatus?.encodeToJSON(), isExplode: true),
            "roleDescription": (wrappedValue: roleDescription?.encodeToJSON(), isExplode: true),
            "sdtmTarget": (wrappedValue: sdtmTarget?.encodeToJSON(), isExplode: true),
            "simpleDatatype": (wrappedValue: simpleDatatype?.encodeToJSON(), isExplode: true),
            "submissionValue": (wrappedValue: submissionValue?.encodeToJSON(), isExplode: true),
            "synonyms": (wrappedValue: synonyms?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "uiHref": (wrappedValue: uiHref?.encodeToJSON(), isExplode: true),
            "valueDomain": (wrappedValue: valueDomain?.encodeToJSON(), isExplode: true),
            "variableSet": (wrappedValue: variableSet?.encodeToJSON(), isExplode: true),
            "version": (wrappedValue: version?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DefaultSearchResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrSearchScopesGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: MdrSearchScopesGet200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrSearchScopesGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/search/scopes
     - Get Search Results Across CDISC Library
     - BASIC:
       - type: http
       - name: basicAuth
     - externalDocs: class ExternalDocumentation {
    description: Release Notes about Searches
    url: https://wiki.cdisc.org/display/LIBSUPRT/Search
}
     - returns: RequestBuilder<MdrSearchScopesGet200Response> 
     */
    open class func mdrSearchScopesGetWithRequestBuilder() -> RequestBuilder<MdrSearchScopesGet200Response> {
        let localVariablePath = "/mdr/search/scopes"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MdrSearchScopesGet200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter scope: (path) Search Scope 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrSearchScopesScopeGet(scope: DefaultSearchScopes, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ScopeValues?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrSearchScopesScopeGetWithRequestBuilder(scope: scope).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/search/scopes/{scope}
     - Get Search Results Limited to Scope
     - BASIC:
       - type: http
       - name: basicAuth
     - externalDocs: class ExternalDocumentation {
    description: Release Notes about Searches
    url: https://wiki.cdisc.org/display/LIBSUPRT/Search
}
     - parameter scope: (path) Search Scope 
     - returns: RequestBuilder<ScopeValues> 
     */
    open class func mdrSearchScopesScopeGetWithRequestBuilder(scope: DefaultSearchScopes) -> RequestBuilder<ScopeValues> {
        var localVariablePath = "/mdr/search/scopes/{scope}"
        let scopePreEscape = "\(APIHelper.mapValueToPathItem(scope))"
        let scopePostEscape = scopePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{scope}", with: scopePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ScopeValues>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}

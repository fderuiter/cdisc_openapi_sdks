//
// ExportQrsCsvItemsRow.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ExportQrsCsvItemsRow: Codable, JSONEncodable, Hashable {

    public var qRSMeasureName: String?
    public var qRSMeasureLabel: String?
    public var qRSMeasureType: String?
    public var itemSequence: String?
    public var testName: String?
    public var itemText: String?
    public var testsCodelistCCode: String?
    public var testsTermCCode: String?
    public var testCodesCodelistCCode: String?
    public var testCodesTermCCode: String?
    public var subcategorysCodelistCCode: String?
    public var subcategorysTermCCode: String?
    public var evaluatorsCodelistCCode: String?
    public var evaluatorsTermCCode: String?
    public var freeFormResponsesDatatype: String?
    public var responseGroup: String?

    public init(qRSMeasureName: String? = nil, qRSMeasureLabel: String? = nil, qRSMeasureType: String? = nil, itemSequence: String? = nil, testName: String? = nil, itemText: String? = nil, testsCodelistCCode: String? = nil, testsTermCCode: String? = nil, testCodesCodelistCCode: String? = nil, testCodesTermCCode: String? = nil, subcategorysCodelistCCode: String? = nil, subcategorysTermCCode: String? = nil, evaluatorsCodelistCCode: String? = nil, evaluatorsTermCCode: String? = nil, freeFormResponsesDatatype: String? = nil, responseGroup: String? = nil) {
        self.qRSMeasureName = qRSMeasureName
        self.qRSMeasureLabel = qRSMeasureLabel
        self.qRSMeasureType = qRSMeasureType
        self.itemSequence = itemSequence
        self.testName = testName
        self.itemText = itemText
        self.testsCodelistCCode = testsCodelistCCode
        self.testsTermCCode = testsTermCCode
        self.testCodesCodelistCCode = testCodesCodelistCCode
        self.testCodesTermCCode = testCodesTermCCode
        self.subcategorysCodelistCCode = subcategorysCodelistCCode
        self.subcategorysTermCCode = subcategorysTermCCode
        self.evaluatorsCodelistCCode = evaluatorsCodelistCCode
        self.evaluatorsTermCCode = evaluatorsTermCCode
        self.freeFormResponsesDatatype = freeFormResponsesDatatype
        self.responseGroup = responseGroup
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case qRSMeasureName = "QRS Measure Name"
        case qRSMeasureLabel = "QRS Measure Label"
        case qRSMeasureType = "QRS Measure Type"
        case itemSequence = "Item Sequence"
        case testName = "Test Name"
        case itemText = "Item Text"
        case testsCodelistCCode = "Test's Codelist C-Code"
        case testsTermCCode = "Test's Term C-Code"
        case testCodesCodelistCCode = "Test Code's Codelist C-Code"
        case testCodesTermCCode = "Test Code's Term C-Code"
        case subcategorysCodelistCCode = "Subcategory's Codelist C-Code"
        case subcategorysTermCCode = "Subcategory's Term C-Code"
        case evaluatorsCodelistCCode = "Evaluator's Codelist C-Code"
        case evaluatorsTermCCode = "Evaluator's Term C-Code"
        case freeFormResponsesDatatype = "Free-form Response's Datatype"
        case responseGroup = "Response Group"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(qRSMeasureName, forKey: .qRSMeasureName)
        try container.encodeIfPresent(qRSMeasureLabel, forKey: .qRSMeasureLabel)
        try container.encodeIfPresent(qRSMeasureType, forKey: .qRSMeasureType)
        try container.encodeIfPresent(itemSequence, forKey: .itemSequence)
        try container.encodeIfPresent(testName, forKey: .testName)
        try container.encodeIfPresent(itemText, forKey: .itemText)
        try container.encodeIfPresent(testsCodelistCCode, forKey: .testsCodelistCCode)
        try container.encodeIfPresent(testsTermCCode, forKey: .testsTermCCode)
        try container.encodeIfPresent(testCodesCodelistCCode, forKey: .testCodesCodelistCCode)
        try container.encodeIfPresent(testCodesTermCCode, forKey: .testCodesTermCCode)
        try container.encodeIfPresent(subcategorysCodelistCCode, forKey: .subcategorysCodelistCCode)
        try container.encodeIfPresent(subcategorysTermCCode, forKey: .subcategorysTermCCode)
        try container.encodeIfPresent(evaluatorsCodelistCCode, forKey: .evaluatorsCodelistCCode)
        try container.encodeIfPresent(evaluatorsTermCCode, forKey: .evaluatorsTermCCode)
        try container.encodeIfPresent(freeFormResponsesDatatype, forKey: .freeFormResponsesDatatype)
        try container.encodeIfPresent(responseGroup, forKey: .responseGroup)
    }
}


//
// SendigProduct.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SendigProduct: Codable, JSONEncodable, Hashable {

    public var name: String?
    public var label: String?
    public var description: String?
    public var source: String?
    public var effectiveDate: String?
    public var registrationStatus: String?
    public var version: String?
    public var links: SendigProductLinks?
    public var classes: [SendigClass]?

    public init(name: String? = nil, label: String? = nil, description: String? = nil, source: String? = nil, effectiveDate: String? = nil, registrationStatus: String? = nil, version: String? = nil, links: SendigProductLinks? = nil, classes: [SendigClass]? = nil) {
        self.name = name
        self.label = label
        self.description = description
        self.source = source
        self.effectiveDate = effectiveDate
        self.registrationStatus = registrationStatus
        self.version = version
        self.links = links
        self.classes = classes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case label
        case description
        case source
        case effectiveDate
        case registrationStatus
        case version
        case links = "_links"
        case classes
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(source, forKey: .source)
        try container.encodeIfPresent(effectiveDate, forKey: .effectiveDate)
        try container.encodeIfPresent(registrationStatus, forKey: .registrationStatus)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(classes, forKey: .classes)
    }
}


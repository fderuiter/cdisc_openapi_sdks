//
// ExportCdashigScenarioVariablesRow.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ExportCdashigScenarioVariablesRow: Codable, JSONEncodable, Hashable {

    public var version: String?
    public var _class: String?
    public var domain: String?
    public var dataCollectionScenario: String?
    public var variableOrder: String?
    public var cDASHIGVariable: String?
    public var cDASHIGVariableLabel: String?
    public var dRAFTCDASHIGDefinition: String?
    public var questionText: String?
    public var prompt: String?
    public var type: String?
    public var cDASHIGCore: String?
    public var caseReportFormCompletionInstructions: String?
    public var sDTMIGTarget: [String]?
    public var mappingInstructions: String?
    public var controlledTerminologyCodelistName: String?
    public var implementationNotes: String?

    public init(version: String? = nil, _class: String? = nil, domain: String? = nil, dataCollectionScenario: String? = nil, variableOrder: String? = nil, cDASHIGVariable: String? = nil, cDASHIGVariableLabel: String? = nil, dRAFTCDASHIGDefinition: String? = nil, questionText: String? = nil, prompt: String? = nil, type: String? = nil, cDASHIGCore: String? = nil, caseReportFormCompletionInstructions: String? = nil, sDTMIGTarget: [String]? = nil, mappingInstructions: String? = nil, controlledTerminologyCodelistName: String? = nil, implementationNotes: String? = nil) {
        self.version = version
        self._class = _class
        self.domain = domain
        self.dataCollectionScenario = dataCollectionScenario
        self.variableOrder = variableOrder
        self.cDASHIGVariable = cDASHIGVariable
        self.cDASHIGVariableLabel = cDASHIGVariableLabel
        self.dRAFTCDASHIGDefinition = dRAFTCDASHIGDefinition
        self.questionText = questionText
        self.prompt = prompt
        self.type = type
        self.cDASHIGCore = cDASHIGCore
        self.caseReportFormCompletionInstructions = caseReportFormCompletionInstructions
        self.sDTMIGTarget = sDTMIGTarget
        self.mappingInstructions = mappingInstructions
        self.controlledTerminologyCodelistName = controlledTerminologyCodelistName
        self.implementationNotes = implementationNotes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case version = "Version"
        case _class = "Class"
        case domain = "Domain"
        case dataCollectionScenario = "Data Collection Scenario"
        case variableOrder = "Variable Order"
        case cDASHIGVariable = "CDASHIG Variable"
        case cDASHIGVariableLabel = "CDASHIG Variable Label"
        case dRAFTCDASHIGDefinition = "DRAFT CDASHIG Definition"
        case questionText = "Question Text"
        case prompt = "Prompt"
        case type = "Type"
        case cDASHIGCore = "CDASHIG Core"
        case caseReportFormCompletionInstructions = "Case Report Form Completion Instructions"
        case sDTMIGTarget = "SDTMIG Target"
        case mappingInstructions = "Mapping Instructions"
        case controlledTerminologyCodelistName = "Controlled Terminology Codelist Name"
        case implementationNotes = "Implementation Notes"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(_class, forKey: ._class)
        try container.encodeIfPresent(domain, forKey: .domain)
        try container.encodeIfPresent(dataCollectionScenario, forKey: .dataCollectionScenario)
        try container.encodeIfPresent(variableOrder, forKey: .variableOrder)
        try container.encodeIfPresent(cDASHIGVariable, forKey: .cDASHIGVariable)
        try container.encodeIfPresent(cDASHIGVariableLabel, forKey: .cDASHIGVariableLabel)
        try container.encodeIfPresent(dRAFTCDASHIGDefinition, forKey: .dRAFTCDASHIGDefinition)
        try container.encodeIfPresent(questionText, forKey: .questionText)
        try container.encodeIfPresent(prompt, forKey: .prompt)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(cDASHIGCore, forKey: .cDASHIGCore)
        try container.encodeIfPresent(caseReportFormCompletionInstructions, forKey: .caseReportFormCompletionInstructions)
        try container.encodeIfPresent(sDTMIGTarget, forKey: .sDTMIGTarget)
        try container.encodeIfPresent(mappingInstructions, forKey: .mappingInstructions)
        try container.encodeIfPresent(controlledTerminologyCodelistName, forKey: .controlledTerminologyCodelistName)
        try container.encodeIfPresent(implementationNotes, forKey: .implementationNotes)
    }
}


//
// ExportQrsGeneral.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ExportQrsGeneral: Codable, JSONEncodable, Hashable {

    public var name: String?
    public var label: String?
    public var effectiveDate: String?
    public var description: String?
    public var type: String?
    public var categorysCodelistCCode: String?
    public var categorysTermCCode: String?

    public init(name: String? = nil, label: String? = nil, effectiveDate: String? = nil, description: String? = nil, type: String? = nil, categorysCodelistCCode: String? = nil, categorysTermCCode: String? = nil) {
        self.name = name
        self.label = label
        self.effectiveDate = effectiveDate
        self.description = description
        self.type = type
        self.categorysCodelistCCode = categorysCodelistCCode
        self.categorysTermCCode = categorysTermCCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name = "Name"
        case label = "Label"
        case effectiveDate = "Effective Date"
        case description = "Description"
        case type = "Type"
        case categorysCodelistCCode = "Category's Codelist C-Code"
        case categorysTermCCode = "Category's Term C-Code"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(effectiveDate, forKey: .effectiveDate)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(categorysCodelistCCode, forKey: .categorysCodelistCCode)
        try container.encodeIfPresent(categorysTermCCode, forKey: .categorysTermCCode)
    }
}


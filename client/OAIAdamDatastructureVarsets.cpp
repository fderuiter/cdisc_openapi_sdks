/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdamDatastructureVarsets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdamDatastructureVarsets::OAIAdamDatastructureVarsets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdamDatastructureVarsets::OAIAdamDatastructureVarsets() {
    this->initializeModel();
}

OAIAdamDatastructureVarsets::~OAIAdamDatastructureVarsets() {}

void OAIAdamDatastructureVarsets::initializeModel() {

    m_ordinal_isSet = false;
    m_ordinal_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_r_class_isSet = false;
    m_r_class_isValid = false;

    m__links_isSet = false;
    m__links_isValid = false;
}

void OAIAdamDatastructureVarsets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdamDatastructureVarsets::fromJsonObject(QJsonObject json) {

    m_ordinal_isValid = ::OpenAPI::fromJsonValue(m_ordinal, json[QString("ordinal")]);
    m_ordinal_isSet = !json[QString("ordinal")].isNull() && m_ordinal_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_r_class_isValid = ::OpenAPI::fromJsonValue(m_r_class, json[QString("class")]);
    m_r_class_isSet = !json[QString("class")].isNull() && m_r_class_isValid;

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;
}

QString OAIAdamDatastructureVarsets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdamDatastructureVarsets::asJsonObject() const {
    QJsonObject obj;
    if (m_ordinal_isSet) {
        obj.insert(QString("ordinal"), ::OpenAPI::toJsonValue(m_ordinal));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_r_class_isSet) {
        obj.insert(QString("class"), ::OpenAPI::toJsonValue(m_r_class));
    }
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    return obj;
}

QString OAIAdamDatastructureVarsets::getOrdinal() const {
    return m_ordinal;
}
void OAIAdamDatastructureVarsets::setOrdinal(const QString &ordinal) {
    m_ordinal = ordinal;
    m_ordinal_isSet = true;
}

bool OAIAdamDatastructureVarsets::is_ordinal_Set() const{
    return m_ordinal_isSet;
}

bool OAIAdamDatastructureVarsets::is_ordinal_Valid() const{
    return m_ordinal_isValid;
}

QString OAIAdamDatastructureVarsets::getName() const {
    return m_name;
}
void OAIAdamDatastructureVarsets::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAdamDatastructureVarsets::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAdamDatastructureVarsets::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAdamDatastructureVarsets::getLabel() const {
    return m_label;
}
void OAIAdamDatastructureVarsets::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIAdamDatastructureVarsets::is_label_Set() const{
    return m_label_isSet;
}

bool OAIAdamDatastructureVarsets::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIAdamDatastructureVarsets::getDescription() const {
    return m_description;
}
void OAIAdamDatastructureVarsets::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAdamDatastructureVarsets::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAdamDatastructureVarsets::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAdamDatastructureVarsets::getRClass() const {
    return m_r_class;
}
void OAIAdamDatastructureVarsets::setRClass(const QString &r_class) {
    m_r_class = r_class;
    m_r_class_isSet = true;
}

bool OAIAdamDatastructureVarsets::is_r_class_Set() const{
    return m_r_class_isSet;
}

bool OAIAdamDatastructureVarsets::is_r_class_Valid() const{
    return m_r_class_isValid;
}

OAIAdamDatastructureVarsetsLinks OAIAdamDatastructureVarsets::getLinks() const {
    return m__links;
}
void OAIAdamDatastructureVarsets::setLinks(const OAIAdamDatastructureVarsetsLinks &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIAdamDatastructureVarsets::is__links_Set() const{
    return m__links_isSet;
}

bool OAIAdamDatastructureVarsets::is__links_Valid() const{
    return m__links_isValid;
}

bool OAIAdamDatastructureVarsets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ordinal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdamDatastructureVarsets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI

/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportAdamVariablesRow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportAdamVariablesRow::OAIExportAdamVariablesRow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportAdamVariablesRow::OAIExportAdamVariablesRow() {
    this->initializeModel();
}

OAIExportAdamVariablesRow::~OAIExportAdamVariablesRow() {}

void OAIExportAdamVariablesRow::initializeModel() {

    m_version_isSet = false;
    m_version_isValid = false;

    m_data_structure_name_isSet = false;
    m_data_structure_name_isValid = false;

    m_dataset_name_isSet = false;
    m_dataset_name_isValid = false;

    m_variable_group_isSet = false;
    m_variable_group_isValid = false;

    m_variable_name_isSet = false;
    m_variable_name_isValid = false;

    m_variable_label_isSet = false;
    m_variable_label_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_codelist_controlled_terms_isSet = false;
    m_codelist_controlled_terms_isValid = false;

    m_core_isSet = false;
    m_core_isValid = false;

    m_cdisc_notes_isSet = false;
    m_cdisc_notes_isValid = false;
}

void OAIExportAdamVariablesRow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportAdamVariablesRow::fromJsonObject(QJsonObject json) {

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;

    m_data_structure_name_isValid = ::OpenAPI::fromJsonValue(m_data_structure_name, json[QString("Data Structure Name")]);
    m_data_structure_name_isSet = !json[QString("Data Structure Name")].isNull() && m_data_structure_name_isValid;

    m_dataset_name_isValid = ::OpenAPI::fromJsonValue(m_dataset_name, json[QString("Dataset Name")]);
    m_dataset_name_isSet = !json[QString("Dataset Name")].isNull() && m_dataset_name_isValid;

    m_variable_group_isValid = ::OpenAPI::fromJsonValue(m_variable_group, json[QString("Variable Group")]);
    m_variable_group_isSet = !json[QString("Variable Group")].isNull() && m_variable_group_isValid;

    m_variable_name_isValid = ::OpenAPI::fromJsonValue(m_variable_name, json[QString("Variable Name")]);
    m_variable_name_isSet = !json[QString("Variable Name")].isNull() && m_variable_name_isValid;

    m_variable_label_isValid = ::OpenAPI::fromJsonValue(m_variable_label, json[QString("Variable Label")]);
    m_variable_label_isSet = !json[QString("Variable Label")].isNull() && m_variable_label_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_codelist_controlled_terms_isValid = ::OpenAPI::fromJsonValue(m_codelist_controlled_terms, json[QString("Codelist/Controlled Terms")]);
    m_codelist_controlled_terms_isSet = !json[QString("Codelist/Controlled Terms")].isNull() && m_codelist_controlled_terms_isValid;

    m_core_isValid = ::OpenAPI::fromJsonValue(m_core, json[QString("Core")]);
    m_core_isSet = !json[QString("Core")].isNull() && m_core_isValid;

    m_cdisc_notes_isValid = ::OpenAPI::fromJsonValue(m_cdisc_notes, json[QString("CDISC Notes")]);
    m_cdisc_notes_isSet = !json[QString("CDISC Notes")].isNull() && m_cdisc_notes_isValid;
}

QString OAIExportAdamVariablesRow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportAdamVariablesRow::asJsonObject() const {
    QJsonObject obj;
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_data_structure_name_isSet) {
        obj.insert(QString("Data Structure Name"), ::OpenAPI::toJsonValue(m_data_structure_name));
    }
    if (m_dataset_name_isSet) {
        obj.insert(QString("Dataset Name"), ::OpenAPI::toJsonValue(m_dataset_name));
    }
    if (m_variable_group_isSet) {
        obj.insert(QString("Variable Group"), ::OpenAPI::toJsonValue(m_variable_group));
    }
    if (m_variable_name_isSet) {
        obj.insert(QString("Variable Name"), ::OpenAPI::toJsonValue(m_variable_name));
    }
    if (m_variable_label_isSet) {
        obj.insert(QString("Variable Label"), ::OpenAPI::toJsonValue(m_variable_label));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_codelist_controlled_terms_isSet) {
        obj.insert(QString("Codelist/Controlled Terms"), ::OpenAPI::toJsonValue(m_codelist_controlled_terms));
    }
    if (m_core_isSet) {
        obj.insert(QString("Core"), ::OpenAPI::toJsonValue(m_core));
    }
    if (m_cdisc_notes_isSet) {
        obj.insert(QString("CDISC Notes"), ::OpenAPI::toJsonValue(m_cdisc_notes));
    }
    return obj;
}

QString OAIExportAdamVariablesRow::getVersion() const {
    return m_version;
}
void OAIExportAdamVariablesRow::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIExportAdamVariablesRow::is_version_Set() const{
    return m_version_isSet;
}

bool OAIExportAdamVariablesRow::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIExportAdamVariablesRow::getDataStructureName() const {
    return m_data_structure_name;
}
void OAIExportAdamVariablesRow::setDataStructureName(const QString &data_structure_name) {
    m_data_structure_name = data_structure_name;
    m_data_structure_name_isSet = true;
}

bool OAIExportAdamVariablesRow::is_data_structure_name_Set() const{
    return m_data_structure_name_isSet;
}

bool OAIExportAdamVariablesRow::is_data_structure_name_Valid() const{
    return m_data_structure_name_isValid;
}

QString OAIExportAdamVariablesRow::getDatasetName() const {
    return m_dataset_name;
}
void OAIExportAdamVariablesRow::setDatasetName(const QString &dataset_name) {
    m_dataset_name = dataset_name;
    m_dataset_name_isSet = true;
}

bool OAIExportAdamVariablesRow::is_dataset_name_Set() const{
    return m_dataset_name_isSet;
}

bool OAIExportAdamVariablesRow::is_dataset_name_Valid() const{
    return m_dataset_name_isValid;
}

QString OAIExportAdamVariablesRow::getVariableGroup() const {
    return m_variable_group;
}
void OAIExportAdamVariablesRow::setVariableGroup(const QString &variable_group) {
    m_variable_group = variable_group;
    m_variable_group_isSet = true;
}

bool OAIExportAdamVariablesRow::is_variable_group_Set() const{
    return m_variable_group_isSet;
}

bool OAIExportAdamVariablesRow::is_variable_group_Valid() const{
    return m_variable_group_isValid;
}

QString OAIExportAdamVariablesRow::getVariableName() const {
    return m_variable_name;
}
void OAIExportAdamVariablesRow::setVariableName(const QString &variable_name) {
    m_variable_name = variable_name;
    m_variable_name_isSet = true;
}

bool OAIExportAdamVariablesRow::is_variable_name_Set() const{
    return m_variable_name_isSet;
}

bool OAIExportAdamVariablesRow::is_variable_name_Valid() const{
    return m_variable_name_isValid;
}

QString OAIExportAdamVariablesRow::getVariableLabel() const {
    return m_variable_label;
}
void OAIExportAdamVariablesRow::setVariableLabel(const QString &variable_label) {
    m_variable_label = variable_label;
    m_variable_label_isSet = true;
}

bool OAIExportAdamVariablesRow::is_variable_label_Set() const{
    return m_variable_label_isSet;
}

bool OAIExportAdamVariablesRow::is_variable_label_Valid() const{
    return m_variable_label_isValid;
}

QString OAIExportAdamVariablesRow::getType() const {
    return m_type;
}
void OAIExportAdamVariablesRow::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIExportAdamVariablesRow::is_type_Set() const{
    return m_type_isSet;
}

bool OAIExportAdamVariablesRow::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIExportAdamVariablesRow::getCodelistControlledTerms() const {
    return m_codelist_controlled_terms;
}
void OAIExportAdamVariablesRow::setCodelistControlledTerms(const QString &codelist_controlled_terms) {
    m_codelist_controlled_terms = codelist_controlled_terms;
    m_codelist_controlled_terms_isSet = true;
}

bool OAIExportAdamVariablesRow::is_codelist_controlled_terms_Set() const{
    return m_codelist_controlled_terms_isSet;
}

bool OAIExportAdamVariablesRow::is_codelist_controlled_terms_Valid() const{
    return m_codelist_controlled_terms_isValid;
}

QString OAIExportAdamVariablesRow::getCore() const {
    return m_core;
}
void OAIExportAdamVariablesRow::setCore(const QString &core) {
    m_core = core;
    m_core_isSet = true;
}

bool OAIExportAdamVariablesRow::is_core_Set() const{
    return m_core_isSet;
}

bool OAIExportAdamVariablesRow::is_core_Valid() const{
    return m_core_isValid;
}

QString OAIExportAdamVariablesRow::getCdiscNotes() const {
    return m_cdisc_notes;
}
void OAIExportAdamVariablesRow::setCdiscNotes(const QString &cdisc_notes) {
    m_cdisc_notes = cdisc_notes;
    m_cdisc_notes_isSet = true;
}

bool OAIExportAdamVariablesRow::is_cdisc_notes_Set() const{
    return m_cdisc_notes_isSet;
}

bool OAIExportAdamVariablesRow::is_cdisc_notes_Valid() const{
    return m_cdisc_notes_isValid;
}

bool OAIExportAdamVariablesRow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_structure_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_codelist_controlled_terms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_core_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cdisc_notes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportAdamVariablesRow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI

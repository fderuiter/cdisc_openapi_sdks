/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStudyDataTabulationModelSDTMApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIStudyDataTabulationModelSDTMApi::OAIStudyDataTabulationModelSDTMApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIStudyDataTabulationModelSDTMApi::~OAIStudyDataTabulationModelSDTMApi() {
}

void OAIStudyDataTabulationModelSDTMApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://library.cdisc.org/api"),
    "Production server",
    QMap<QString, OAIServerVariable>()));
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://virtserver.swaggerhub.com/CDISC1/share-2.0/1.1.0"),
    "SwaggerHub API Auto Mocking",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("mdrRootSdtmClassesClassVariablesVarGet", defaultConf);
    _serverIndices.insert("mdrRootSdtmClassesClassVariablesVarGet", 0);
    _serverConfigs.insert("mdrRootSdtmDatasetsDatasetVariablesVarGet", defaultConf);
    _serverIndices.insert("mdrRootSdtmDatasetsDatasetVariablesVarGet", 0);
    _serverConfigs.insert("mdrSdtmVersionClassesClassDatasetsGet", defaultConf);
    _serverIndices.insert("mdrSdtmVersionClassesClassDatasetsGet", 0);
    _serverConfigs.insert("mdrSdtmVersionClassesClassGet", defaultConf);
    _serverIndices.insert("mdrSdtmVersionClassesClassGet", 0);
    _serverConfigs.insert("mdrSdtmVersionClassesClassVariablesGet", defaultConf);
    _serverIndices.insert("mdrSdtmVersionClassesClassVariablesGet", 0);
    _serverConfigs.insert("mdrSdtmVersionClassesClassVariablesVarGet", defaultConf);
    _serverIndices.insert("mdrSdtmVersionClassesClassVariablesVarGet", 0);
    _serverConfigs.insert("mdrSdtmVersionClassesGet", defaultConf);
    _serverIndices.insert("mdrSdtmVersionClassesGet", 0);
    _serverConfigs.insert("mdrSdtmVersionDatasetsDatasetGet", defaultConf);
    _serverIndices.insert("mdrSdtmVersionDatasetsDatasetGet", 0);
    _serverConfigs.insert("mdrSdtmVersionDatasetsDatasetVariablesGet", defaultConf);
    _serverIndices.insert("mdrSdtmVersionDatasetsDatasetVariablesGet", 0);
    _serverConfigs.insert("mdrSdtmVersionDatasetsDatasetVariablesVarGet", defaultConf);
    _serverIndices.insert("mdrSdtmVersionDatasetsDatasetVariablesVarGet", 0);
    _serverConfigs.insert("mdrSdtmVersionDatasetsGet", defaultConf);
    _serverIndices.insert("mdrSdtmVersionDatasetsGet", 0);
    _serverConfigs.insert("mdrSdtmVersionGet", defaultConf);
    _serverIndices.insert("mdrSdtmVersionGet", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIStudyDataTabulationModelSDTMApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIStudyDataTabulationModelSDTMApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIStudyDataTabulationModelSDTMApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIStudyDataTabulationModelSDTMApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIStudyDataTabulationModelSDTMApi::setUsername(const QString &username) {
    _username = username;
}

void OAIStudyDataTabulationModelSDTMApi::setPassword(const QString &password) {
    _password = password;
}


void OAIStudyDataTabulationModelSDTMApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIStudyDataTabulationModelSDTMApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIStudyDataTabulationModelSDTMApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIStudyDataTabulationModelSDTMApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIStudyDataTabulationModelSDTMApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIStudyDataTabulationModelSDTMApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIStudyDataTabulationModelSDTMApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIStudyDataTabulationModelSDTMApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIStudyDataTabulationModelSDTMApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIStudyDataTabulationModelSDTMApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIStudyDataTabulationModelSDTMApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIStudyDataTabulationModelSDTMApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIStudyDataTabulationModelSDTMApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIStudyDataTabulationModelSDTMApi::mdrRootSdtmClassesClassVariablesVarGet(const QString &r_class, const QString &var) {
    QString fullPath = QString(_serverConfigs["mdrRootSdtmClassesClassVariablesVarGet"][_serverIndices.value("mdrRootSdtmClassesClassVariablesVarGet")].URL()+"/mdr/root/sdtm/classes/{class}/variables/{var}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString r_classPathParam("{");
        r_classPathParam.append("class").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "class", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"class"+pathSuffix : pathPrefix;
        fullPath.replace(r_classPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_class)));
    }
    
    {
        QString varPathParam("{");
        varPathParam.append("var").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "var", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"var"+pathSuffix : pathPrefix;
        fullPath.replace(varPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(var)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStudyDataTabulationModelSDTMApi::mdrRootSdtmClassesClassVariablesVarGetCallback);
    connect(this, &OAIStudyDataTabulationModelSDTMApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStudyDataTabulationModelSDTMApi::mdrRootSdtmClassesClassVariablesVarGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRootSdtmClassVariable output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrRootSdtmClassesClassVariablesVarGetSignal(output);
        Q_EMIT mdrRootSdtmClassesClassVariablesVarGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrRootSdtmClassesClassVariablesVarGetSignalE(output, error_type, error_str);
        Q_EMIT mdrRootSdtmClassesClassVariablesVarGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrRootSdtmClassesClassVariablesVarGetSignalError(output, error_type, error_str);
        Q_EMIT mdrRootSdtmClassesClassVariablesVarGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStudyDataTabulationModelSDTMApi::mdrRootSdtmDatasetsDatasetVariablesVarGet(const QString &dataset, const QString &var) {
    QString fullPath = QString(_serverConfigs["mdrRootSdtmDatasetsDatasetVariablesVarGet"][_serverIndices.value("mdrRootSdtmDatasetsDatasetVariablesVarGet")].URL()+"/mdr/root/sdtm/datasets/{dataset}/variables/{var}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString datasetPathParam("{");
        datasetPathParam.append("dataset").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dataset", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dataset"+pathSuffix : pathPrefix;
        fullPath.replace(datasetPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dataset)));
    }
    
    {
        QString varPathParam("{");
        varPathParam.append("var").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "var", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"var"+pathSuffix : pathPrefix;
        fullPath.replace(varPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(var)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStudyDataTabulationModelSDTMApi::mdrRootSdtmDatasetsDatasetVariablesVarGetCallback);
    connect(this, &OAIStudyDataTabulationModelSDTMApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStudyDataTabulationModelSDTMApi::mdrRootSdtmDatasetsDatasetVariablesVarGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIRootSdtmDatasetVariable output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrRootSdtmDatasetsDatasetVariablesVarGetSignal(output);
        Q_EMIT mdrRootSdtmDatasetsDatasetVariablesVarGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrRootSdtmDatasetsDatasetVariablesVarGetSignalE(output, error_type, error_str);
        Q_EMIT mdrRootSdtmDatasetsDatasetVariablesVarGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrRootSdtmDatasetsDatasetVariablesVarGetSignalError(output, error_type, error_str);
        Q_EMIT mdrRootSdtmDatasetsDatasetVariablesVarGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionClassesClassDatasetsGet(const QString &version, const QString &r_class) {
    QString fullPath = QString(_serverConfigs["mdrSdtmVersionClassesClassDatasetsGet"][_serverIndices.value("mdrSdtmVersionClassesClassDatasetsGet")].URL()+"/mdr/sdtm/{version}/classes/{class}/datasets");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString r_classPathParam("{");
        r_classPathParam.append("class").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "class", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"class"+pathSuffix : pathPrefix;
        fullPath.replace(r_classPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_class)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionClassesClassDatasetsGetCallback);
    connect(this, &OAIStudyDataTabulationModelSDTMApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionClassesClassDatasetsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISdtmClassDatasets output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrSdtmVersionClassesClassDatasetsGetSignal(output);
        Q_EMIT mdrSdtmVersionClassesClassDatasetsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrSdtmVersionClassesClassDatasetsGetSignalE(output, error_type, error_str);
        Q_EMIT mdrSdtmVersionClassesClassDatasetsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrSdtmVersionClassesClassDatasetsGetSignalError(output, error_type, error_str);
        Q_EMIT mdrSdtmVersionClassesClassDatasetsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionClassesClassGet(const QString &version, const QString &r_class) {
    QString fullPath = QString(_serverConfigs["mdrSdtmVersionClassesClassGet"][_serverIndices.value("mdrSdtmVersionClassesClassGet")].URL()+"/mdr/sdtm/{version}/classes/{class}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString r_classPathParam("{");
        r_classPathParam.append("class").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "class", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"class"+pathSuffix : pathPrefix;
        fullPath.replace(r_classPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_class)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionClassesClassGetCallback);
    connect(this, &OAIStudyDataTabulationModelSDTMApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionClassesClassGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISdtmClass output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrSdtmVersionClassesClassGetSignal(output);
        Q_EMIT mdrSdtmVersionClassesClassGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrSdtmVersionClassesClassGetSignalE(output, error_type, error_str);
        Q_EMIT mdrSdtmVersionClassesClassGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrSdtmVersionClassesClassGetSignalError(output, error_type, error_str);
        Q_EMIT mdrSdtmVersionClassesClassGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionClassesClassVariablesGet(const QString &version, const QString &r_class) {
    QString fullPath = QString(_serverConfigs["mdrSdtmVersionClassesClassVariablesGet"][_serverIndices.value("mdrSdtmVersionClassesClassVariablesGet")].URL()+"/mdr/sdtm/{version}/classes/{class}/variables");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString r_classPathParam("{");
        r_classPathParam.append("class").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "class", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"class"+pathSuffix : pathPrefix;
        fullPath.replace(r_classPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_class)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionClassesClassVariablesGetCallback);
    connect(this, &OAIStudyDataTabulationModelSDTMApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionClassesClassVariablesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISdtmClassVariables output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrSdtmVersionClassesClassVariablesGetSignal(output);
        Q_EMIT mdrSdtmVersionClassesClassVariablesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrSdtmVersionClassesClassVariablesGetSignalE(output, error_type, error_str);
        Q_EMIT mdrSdtmVersionClassesClassVariablesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrSdtmVersionClassesClassVariablesGetSignalError(output, error_type, error_str);
        Q_EMIT mdrSdtmVersionClassesClassVariablesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionClassesClassVariablesVarGet(const QString &version, const QString &r_class, const QString &var) {
    QString fullPath = QString(_serverConfigs["mdrSdtmVersionClassesClassVariablesVarGet"][_serverIndices.value("mdrSdtmVersionClassesClassVariablesVarGet")].URL()+"/mdr/sdtm/{version}/classes/{class}/variables/{var}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString r_classPathParam("{");
        r_classPathParam.append("class").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "class", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"class"+pathSuffix : pathPrefix;
        fullPath.replace(r_classPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(r_class)));
    }
    
    {
        QString varPathParam("{");
        varPathParam.append("var").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "var", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"var"+pathSuffix : pathPrefix;
        fullPath.replace(varPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(var)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionClassesClassVariablesVarGetCallback);
    connect(this, &OAIStudyDataTabulationModelSDTMApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionClassesClassVariablesVarGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISdtmClassVariable output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrSdtmVersionClassesClassVariablesVarGetSignal(output);
        Q_EMIT mdrSdtmVersionClassesClassVariablesVarGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrSdtmVersionClassesClassVariablesVarGetSignalE(output, error_type, error_str);
        Q_EMIT mdrSdtmVersionClassesClassVariablesVarGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrSdtmVersionClassesClassVariablesVarGetSignalError(output, error_type, error_str);
        Q_EMIT mdrSdtmVersionClassesClassVariablesVarGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionClassesGet(const QString &version) {
    QString fullPath = QString(_serverConfigs["mdrSdtmVersionClassesGet"][_serverIndices.value("mdrSdtmVersionClassesGet")].URL()+"/mdr/sdtm/{version}/classes");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionClassesGetCallback);
    connect(this, &OAIStudyDataTabulationModelSDTMApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionClassesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISdtmClasses output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrSdtmVersionClassesGetSignal(output);
        Q_EMIT mdrSdtmVersionClassesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrSdtmVersionClassesGetSignalE(output, error_type, error_str);
        Q_EMIT mdrSdtmVersionClassesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrSdtmVersionClassesGetSignalError(output, error_type, error_str);
        Q_EMIT mdrSdtmVersionClassesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionDatasetsDatasetGet(const QString &version, const QString &dataset) {
    QString fullPath = QString(_serverConfigs["mdrSdtmVersionDatasetsDatasetGet"][_serverIndices.value("mdrSdtmVersionDatasetsDatasetGet")].URL()+"/mdr/sdtm/{version}/datasets/{dataset}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString datasetPathParam("{");
        datasetPathParam.append("dataset").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dataset", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dataset"+pathSuffix : pathPrefix;
        fullPath.replace(datasetPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dataset)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionDatasetsDatasetGetCallback);
    connect(this, &OAIStudyDataTabulationModelSDTMApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionDatasetsDatasetGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISdtmDataset output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrSdtmVersionDatasetsDatasetGetSignal(output);
        Q_EMIT mdrSdtmVersionDatasetsDatasetGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrSdtmVersionDatasetsDatasetGetSignalE(output, error_type, error_str);
        Q_EMIT mdrSdtmVersionDatasetsDatasetGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrSdtmVersionDatasetsDatasetGetSignalError(output, error_type, error_str);
        Q_EMIT mdrSdtmVersionDatasetsDatasetGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionDatasetsDatasetVariablesGet(const QString &version, const QString &dataset) {
    QString fullPath = QString(_serverConfigs["mdrSdtmVersionDatasetsDatasetVariablesGet"][_serverIndices.value("mdrSdtmVersionDatasetsDatasetVariablesGet")].URL()+"/mdr/sdtm/{version}/datasets/{dataset}/variables");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString datasetPathParam("{");
        datasetPathParam.append("dataset").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dataset", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dataset"+pathSuffix : pathPrefix;
        fullPath.replace(datasetPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dataset)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionDatasetsDatasetVariablesGetCallback);
    connect(this, &OAIStudyDataTabulationModelSDTMApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionDatasetsDatasetVariablesGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISdtmDatasetVariables output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrSdtmVersionDatasetsDatasetVariablesGetSignal(output);
        Q_EMIT mdrSdtmVersionDatasetsDatasetVariablesGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrSdtmVersionDatasetsDatasetVariablesGetSignalE(output, error_type, error_str);
        Q_EMIT mdrSdtmVersionDatasetsDatasetVariablesGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrSdtmVersionDatasetsDatasetVariablesGetSignalError(output, error_type, error_str);
        Q_EMIT mdrSdtmVersionDatasetsDatasetVariablesGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionDatasetsDatasetVariablesVarGet(const QString &version, const QString &dataset, const QString &var) {
    QString fullPath = QString(_serverConfigs["mdrSdtmVersionDatasetsDatasetVariablesVarGet"][_serverIndices.value("mdrSdtmVersionDatasetsDatasetVariablesVarGet")].URL()+"/mdr/sdtm/{version}/datasets/{dataset}/variables/{var}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    
    {
        QString datasetPathParam("{");
        datasetPathParam.append("dataset").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "dataset", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"dataset"+pathSuffix : pathPrefix;
        fullPath.replace(datasetPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(dataset)));
    }
    
    {
        QString varPathParam("{");
        varPathParam.append("var").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "var", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"var"+pathSuffix : pathPrefix;
        fullPath.replace(varPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(var)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionDatasetsDatasetVariablesVarGetCallback);
    connect(this, &OAIStudyDataTabulationModelSDTMApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionDatasetsDatasetVariablesVarGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISdtmDatasetVariable output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrSdtmVersionDatasetsDatasetVariablesVarGetSignal(output);
        Q_EMIT mdrSdtmVersionDatasetsDatasetVariablesVarGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrSdtmVersionDatasetsDatasetVariablesVarGetSignalE(output, error_type, error_str);
        Q_EMIT mdrSdtmVersionDatasetsDatasetVariablesVarGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrSdtmVersionDatasetsDatasetVariablesVarGetSignalError(output, error_type, error_str);
        Q_EMIT mdrSdtmVersionDatasetsDatasetVariablesVarGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionDatasetsGet(const QString &version) {
    QString fullPath = QString(_serverConfigs["mdrSdtmVersionDatasetsGet"][_serverIndices.value("mdrSdtmVersionDatasetsGet")].URL()+"/mdr/sdtm/{version}/datasets");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionDatasetsGetCallback);
    connect(this, &OAIStudyDataTabulationModelSDTMApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionDatasetsGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISdtmDatasets output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrSdtmVersionDatasetsGetSignal(output);
        Q_EMIT mdrSdtmVersionDatasetsGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrSdtmVersionDatasetsGetSignalE(output, error_type, error_str);
        Q_EMIT mdrSdtmVersionDatasetsGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrSdtmVersionDatasetsGetSignalError(output, error_type, error_str);
        Q_EMIT mdrSdtmVersionDatasetsGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionGet(const QString &version) {
    QString fullPath = QString(_serverConfigs["mdrSdtmVersionGet"][_serverIndices.value("mdrSdtmVersionGet")].URL()+"/mdr/sdtm/{version}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString versionPathParam("{");
        versionPathParam.append("version").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "version", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"version"+pathSuffix : pathPrefix;
        fullPath.replace(versionPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionGetCallback);
    connect(this, &OAIStudyDataTabulationModelSDTMApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this] {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIStudyDataTabulationModelSDTMApi::mdrSdtmVersionGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISdtmProduct output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT mdrSdtmVersionGetSignal(output);
        Q_EMIT mdrSdtmVersionGetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT mdrSdtmVersionGetSignalE(output, error_type, error_str);
        Q_EMIT mdrSdtmVersionGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT mdrSdtmVersionGetSignalError(output, error_type, error_str);
        Q_EMIT mdrSdtmVersionGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIStudyDataTabulationModelSDTMApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI

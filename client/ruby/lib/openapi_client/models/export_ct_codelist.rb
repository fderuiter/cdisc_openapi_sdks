=begin
#CDISC Library API

#REST API Documentation for CDISC Library in production server

The version of the OpenAPI document: 1.1.0
Contact: cdisc_library_support@cdisc.org
Generated by: https://openapi-generator.tech
Generator version: 7.16.0-SNAPSHOT

=end

require 'date'
require 'time'

module OpenapiClient
  class ExportCtCodelist
    attr_accessor :code

    attr_accessor :codelist_code

    attr_accessor :codelist_extensible__yes_no

    attr_accessor :codelist_name

    attr_accessor :cdisc_submission_value

    attr_accessor :cdisc_synonym_s

    attr_accessor :cdisc_definition

    attr_accessor :nci_preferred_term

    attr_accessor :standard_and_date

    attr_accessor :

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'code' => :'Code',
        :'codelist_code' => :'Codelist Code',
        :'codelist_extensible__yes_no' => :'Codelist Extensible (Yes/No)',
        :'codelist_name' => :'Codelist Name',
        :'cdisc_submission_value' => :'CDISC Submission Value',
        :'cdisc_synonym_s' => :'CDISC Synonym(s)',
        :'cdisc_definition' => :'CDISC Definition',
        :'nci_preferred_term' => :'NCI Preferred Term',
        :'standard_and_date' => :'Standard and Date',
        :'' => :''
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'code' => :'String',
        :'codelist_code' => :'String',
        :'codelist_extensible__yes_no' => :'String',
        :'codelist_name' => :'String',
        :'cdisc_submission_value' => :'String',
        :'cdisc_synonym_s' => :'Array<String>',
        :'cdisc_definition' => :'String',
        :'nci_preferred_term' => :'String',
        :'standard_and_date' => :'String',
        :'' => :'Array<ExportCtTerm>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ExportCtCodelist` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ExportCtCodelist`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.key?(:'codelist_code')
        self.codelist_code = attributes[:'codelist_code']
      end

      if attributes.key?(:'codelist_extensible__yes_no')
        self.codelist_extensible__yes_no = attributes[:'codelist_extensible__yes_no']
      end

      if attributes.key?(:'codelist_name')
        self.codelist_name = attributes[:'codelist_name']
      end

      if attributes.key?(:'cdisc_submission_value')
        self.cdisc_submission_value = attributes[:'cdisc_submission_value']
      end

      if attributes.key?(:'cdisc_synonym_s')
        if (value = attributes[:'cdisc_synonym_s']).is_a?(Array)
          self.cdisc_synonym_s = value
        end
      end

      if attributes.key?(:'cdisc_definition')
        self.cdisc_definition = attributes[:'cdisc_definition']
      end

      if attributes.key?(:'nci_preferred_term')
        self.nci_preferred_term = attributes[:'nci_preferred_term']
      end

      if attributes.key?(:'standard_and_date')
        self.standard_and_date = attributes[:'standard_and_date']
      end

      if attributes.key?(:'')
        if (value = attributes[:'']).is_a?(Array)
          self. = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          code == o.code &&
          codelist_code == o.codelist_code &&
          codelist_extensible__yes_no == o.codelist_extensible__yes_no &&
          codelist_name == o.codelist_name &&
          cdisc_submission_value == o.cdisc_submission_value &&
          cdisc_synonym_s == o.cdisc_synonym_s &&
          cdisc_definition == o.cdisc_definition &&
          nci_preferred_term == o.nci_preferred_term &&
          standard_and_date == o.standard_and_date &&
           == o.
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [code, codelist_code, codelist_extensible__yes_no, codelist_name, cdisc_submission_value, cdisc_synonym_s, cdisc_definition, nci_preferred_term, standard_and_date, ].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end

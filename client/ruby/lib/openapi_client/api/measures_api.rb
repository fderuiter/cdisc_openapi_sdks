=begin
#CDISC Library API

#REST API Documentation for CDISC Library in production server

The version of the OpenAPI document: 1.1.0
Contact: cdisc_library_support@cdisc.org
Generated by: https://openapi-generator.tech
Generator version: 7.16.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class MeasuresApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get QRS Product
    # @param measure [String] QRS Measure Identifier
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [QrsProduct]
    def mdr_qrs_measure_version_get(measure, version, opts = {})
      data, _status_code, _headers = mdr_qrs_measure_version_get_with_http_info(measure, version, opts)
      data
    end

    # Get QRS Product
    # @param measure [String] QRS Measure Identifier
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [Array<(QrsProduct, Integer, Hash)>] QrsProduct data, response status code and response headers
    def mdr_qrs_measure_version_get_with_http_info(measure, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeasuresApi.mdr_qrs_measure_version_get ...'
      end
      # verify the required parameter 'measure' is set
      if @api_client.config.client_side_validation && measure.nil?
        fail ArgumentError, "Missing the required parameter 'measure' when calling MeasuresApi.mdr_qrs_measure_version_get"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling MeasuresApi.mdr_qrs_measure_version_get"
      end
      # resource path
      local_var_path = '/mdr/qrs/{measure}/{version}'.sub('{' + 'measure' + '}', CGI.escape(measure.to_s)).sub('{' + 'version' + '}', CGI.escape(version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QrsProduct'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MeasuresApi.mdr_qrs_measure_version_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeasuresApi#mdr_qrs_measure_version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get QRS Item List
    # @param measure [String] QRS Measure Identifier
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [QrsItems]
    def mdr_qrs_measure_version_items_get(measure, version, opts = {})
      data, _status_code, _headers = mdr_qrs_measure_version_items_get_with_http_info(measure, version, opts)
      data
    end

    # Get QRS Item List
    # @param measure [String] QRS Measure Identifier
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [Array<(QrsItems, Integer, Hash)>] QrsItems data, response status code and response headers
    def mdr_qrs_measure_version_items_get_with_http_info(measure, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeasuresApi.mdr_qrs_measure_version_items_get ...'
      end
      # verify the required parameter 'measure' is set
      if @api_client.config.client_side_validation && measure.nil?
        fail ArgumentError, "Missing the required parameter 'measure' when calling MeasuresApi.mdr_qrs_measure_version_items_get"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling MeasuresApi.mdr_qrs_measure_version_items_get"
      end
      # resource path
      local_var_path = '/mdr/qrs/{measure}/{version}/items'.sub('{' + 'measure' + '}', CGI.escape(measure.to_s)).sub('{' + 'version' + '}', CGI.escape(version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QrsItems'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MeasuresApi.mdr_qrs_measure_version_items_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeasuresApi#mdr_qrs_measure_version_items_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get QRS Item
    # @param measure [String] QRS Measure Identifier
    # @param version [String] CDISC Library Product Version
    # @param item [String] QRS Measure Item Identifier
    # @param [Hash] opts the optional parameters
    # @return [QrsItem]
    def mdr_qrs_measure_version_items_item_get(measure, version, item, opts = {})
      data, _status_code, _headers = mdr_qrs_measure_version_items_item_get_with_http_info(measure, version, item, opts)
      data
    end

    # Get QRS Item
    # @param measure [String] QRS Measure Identifier
    # @param version [String] CDISC Library Product Version
    # @param item [String] QRS Measure Item Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(QrsItem, Integer, Hash)>] QrsItem data, response status code and response headers
    def mdr_qrs_measure_version_items_item_get_with_http_info(measure, version, item, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeasuresApi.mdr_qrs_measure_version_items_item_get ...'
      end
      # verify the required parameter 'measure' is set
      if @api_client.config.client_side_validation && measure.nil?
        fail ArgumentError, "Missing the required parameter 'measure' when calling MeasuresApi.mdr_qrs_measure_version_items_item_get"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling MeasuresApi.mdr_qrs_measure_version_items_item_get"
      end
      # verify the required parameter 'item' is set
      if @api_client.config.client_side_validation && item.nil?
        fail ArgumentError, "Missing the required parameter 'item' when calling MeasuresApi.mdr_qrs_measure_version_items_item_get"
      end
      # resource path
      local_var_path = '/mdr/qrs/{measure}/{version}/items/{item}'.sub('{' + 'measure' + '}', CGI.escape(measure.to_s)).sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'item' + '}', CGI.escape(item.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QrsItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MeasuresApi.mdr_qrs_measure_version_items_item_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeasuresApi#mdr_qrs_measure_version_items_item_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get QRS Response Group List
    # @param measure [String] QRS Measure Identifier
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [QrsResponsegroups]
    def mdr_qrs_measure_version_responsegroups_get(measure, version, opts = {})
      data, _status_code, _headers = mdr_qrs_measure_version_responsegroups_get_with_http_info(measure, version, opts)
      data
    end

    # Get QRS Response Group List
    # @param measure [String] QRS Measure Identifier
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [Array<(QrsResponsegroups, Integer, Hash)>] QrsResponsegroups data, response status code and response headers
    def mdr_qrs_measure_version_responsegroups_get_with_http_info(measure, version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeasuresApi.mdr_qrs_measure_version_responsegroups_get ...'
      end
      # verify the required parameter 'measure' is set
      if @api_client.config.client_side_validation && measure.nil?
        fail ArgumentError, "Missing the required parameter 'measure' when calling MeasuresApi.mdr_qrs_measure_version_responsegroups_get"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling MeasuresApi.mdr_qrs_measure_version_responsegroups_get"
      end
      # resource path
      local_var_path = '/mdr/qrs/{measure}/{version}/responsegroups'.sub('{' + 'measure' + '}', CGI.escape(measure.to_s)).sub('{' + 'version' + '}', CGI.escape(version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QrsResponsegroups'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MeasuresApi.mdr_qrs_measure_version_responsegroups_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeasuresApi#mdr_qrs_measure_version_responsegroups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get QRS Response Group
    # @param measure [String] QRS Measure Identifier
    # @param version [String] CDISC Library Product Version
    # @param responsegroup [String] QRS Measure&#39;s Response Group Identifier
    # @param [Hash] opts the optional parameters
    # @return [QrsResponsegroup]
    def mdr_qrs_measure_version_responsegroups_responsegroup_get(measure, version, responsegroup, opts = {})
      data, _status_code, _headers = mdr_qrs_measure_version_responsegroups_responsegroup_get_with_http_info(measure, version, responsegroup, opts)
      data
    end

    # Get QRS Response Group
    # @param measure [String] QRS Measure Identifier
    # @param version [String] CDISC Library Product Version
    # @param responsegroup [String] QRS Measure&#39;s Response Group Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(QrsResponsegroup, Integer, Hash)>] QrsResponsegroup data, response status code and response headers
    def mdr_qrs_measure_version_responsegroups_responsegroup_get_with_http_info(measure, version, responsegroup, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MeasuresApi.mdr_qrs_measure_version_responsegroups_responsegroup_get ...'
      end
      # verify the required parameter 'measure' is set
      if @api_client.config.client_side_validation && measure.nil?
        fail ArgumentError, "Missing the required parameter 'measure' when calling MeasuresApi.mdr_qrs_measure_version_responsegroups_responsegroup_get"
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling MeasuresApi.mdr_qrs_measure_version_responsegroups_responsegroup_get"
      end
      # verify the required parameter 'responsegroup' is set
      if @api_client.config.client_side_validation && responsegroup.nil?
        fail ArgumentError, "Missing the required parameter 'responsegroup' when calling MeasuresApi.mdr_qrs_measure_version_responsegroups_responsegroup_get"
      end
      # resource path
      local_var_path = '/mdr/qrs/{measure}/{version}/responsegroups/{responsegroup}'.sub('{' + 'measure' + '}', CGI.escape(measure.to_s)).sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'responsegroup' + '}', CGI.escape(responsegroup.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QrsResponsegroup'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"MeasuresApi.mdr_qrs_measure_version_responsegroups_responsegroup_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MeasuresApi#mdr_qrs_measure_version_responsegroups_responsegroup_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

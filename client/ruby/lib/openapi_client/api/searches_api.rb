=begin
#CDISC Library API

#REST API Documentation for CDISC Library in production server

The version of the OpenAPI document: 1.1.0
Contact: cdisc_library_support@cdisc.org
Generated by: https://openapi-generator.tech
Generator version: 7.16.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class SearchesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Search Results Across CDISC Library
    # @param q [String] Search Term Expression
    # @param [Hash] opts the optional parameters
    # @option opts [String] :highlight Search Highlight Expression
    # @option opts [Float] :start Initial Search Result Index (default to 0)
    # @option opts [Float] :page_size Number of Search Results to Return (default to 100)
    # @option opts [String] :_class Limit Search by Setting Scope to Class
    # @option opts [String] :codelist Limit Search by Setting Scope to Codelist
    # @option opts [String] :concept_id Limit Search by Setting Scope to Concept ID
    # @option opts [String] :core Limit Search by Setting Scope to Core
    # @option opts [String] :data_structure Limit Search by Setting Scope to Data Structure
    # @option opts [String] :dataset_structure Limit Search by Setting Scope to Dataset Structure
    # @option opts [String] :definition Limit Search by Setting Scope to Definition
    # @option opts [String] :description Limit Search by Setting Scope to Description
    # @option opts [String] :domain Limit Search by Setting Scope to Domain
    # @option opts [String] :effective_date Limit Search by Setting Scope to Effective Date
    # @option opts [String] :extensible Limit Search by Setting Scope to Extensible
    # @option opts [String] :href Limit Search by Setting Scope to Href
    # @option opts [String] :label Limit Search by Setting Scope to Label
    # @option opts [String] :measure_type SLimit Search by Setting Scope to Measure Type
    # @option opts [String] :name Limit Search by Setting Scope to Name
    # @option opts [String] :preferred_term Limit Search by Setting Scope to Preferred Term
    # @option opts [String] :product Limit Search by Setting Scope to Product
    # @option opts [String] :product_group Limit Search by Setting Scope to Product Group
    # @option opts [String] :registration_status Limit Search by Setting Scope to Registration Status
    # @option opts [String] :role_description Limit Search by Setting Scope to Role Description
    # @option opts [String] :sdtm_target Limit Search by Setting Scope to SDTM Target
    # @option opts [String] :simple_datatype Limit Search by Setting Scope to Simple Datatype
    # @option opts [String] :submission_value Limit Search by Setting Scope to Submission Value
    # @option opts [String] :synonyms Limit Search by Setting Scope to Synonyms
    # @option opts [String] :type Limit Search by Setting Scope to Type
    # @option opts [String] :ui_href Limit Search by Setting Scope to UI Href
    # @option opts [String] :value_domain Limit Search by Setting Scope to Value Domain
    # @option opts [String] :variable_set Limit Search by Setting Scope to Variable Set
    # @option opts [String] :version Limit Search by Setting Scope to Version
    # @return [DefaultSearchResponse]
    def mdr_search_get(q, opts = {})
      data, _status_code, _headers = mdr_search_get_with_http_info(q, opts)
      data
    end

    # Get Search Results Across CDISC Library
    # @param q [String] Search Term Expression
    # @param [Hash] opts the optional parameters
    # @option opts [String] :highlight Search Highlight Expression
    # @option opts [Float] :start Initial Search Result Index (default to 0)
    # @option opts [Float] :page_size Number of Search Results to Return (default to 100)
    # @option opts [String] :_class Limit Search by Setting Scope to Class
    # @option opts [String] :codelist Limit Search by Setting Scope to Codelist
    # @option opts [String] :concept_id Limit Search by Setting Scope to Concept ID
    # @option opts [String] :core Limit Search by Setting Scope to Core
    # @option opts [String] :data_structure Limit Search by Setting Scope to Data Structure
    # @option opts [String] :dataset_structure Limit Search by Setting Scope to Dataset Structure
    # @option opts [String] :definition Limit Search by Setting Scope to Definition
    # @option opts [String] :description Limit Search by Setting Scope to Description
    # @option opts [String] :domain Limit Search by Setting Scope to Domain
    # @option opts [String] :effective_date Limit Search by Setting Scope to Effective Date
    # @option opts [String] :extensible Limit Search by Setting Scope to Extensible
    # @option opts [String] :href Limit Search by Setting Scope to Href
    # @option opts [String] :label Limit Search by Setting Scope to Label
    # @option opts [String] :measure_type SLimit Search by Setting Scope to Measure Type
    # @option opts [String] :name Limit Search by Setting Scope to Name
    # @option opts [String] :preferred_term Limit Search by Setting Scope to Preferred Term
    # @option opts [String] :product Limit Search by Setting Scope to Product
    # @option opts [String] :product_group Limit Search by Setting Scope to Product Group
    # @option opts [String] :registration_status Limit Search by Setting Scope to Registration Status
    # @option opts [String] :role_description Limit Search by Setting Scope to Role Description
    # @option opts [String] :sdtm_target Limit Search by Setting Scope to SDTM Target
    # @option opts [String] :simple_datatype Limit Search by Setting Scope to Simple Datatype
    # @option opts [String] :submission_value Limit Search by Setting Scope to Submission Value
    # @option opts [String] :synonyms Limit Search by Setting Scope to Synonyms
    # @option opts [String] :type Limit Search by Setting Scope to Type
    # @option opts [String] :ui_href Limit Search by Setting Scope to UI Href
    # @option opts [String] :value_domain Limit Search by Setting Scope to Value Domain
    # @option opts [String] :variable_set Limit Search by Setting Scope to Variable Set
    # @option opts [String] :version Limit Search by Setting Scope to Version
    # @return [Array<(DefaultSearchResponse, Integer, Hash)>] DefaultSearchResponse data, response status code and response headers
    def mdr_search_get_with_http_info(q, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchesApi.mdr_search_get ...'
      end
      # verify the required parameter 'q' is set
      if @api_client.config.client_side_validation && q.nil?
        fail ArgumentError, "Missing the required parameter 'q' when calling SearchesApi.mdr_search_get"
      end
      # resource path
      local_var_path = '/mdr/search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = q
      query_params[:'highlight'] = opts[:'highlight'] if !opts[:'highlight'].nil?
      query_params[:'start'] = opts[:'start'] if !opts[:'start'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'class'] = opts[:'_class'] if !opts[:'_class'].nil?
      query_params[:'codelist'] = opts[:'codelist'] if !opts[:'codelist'].nil?
      query_params[:'conceptId'] = opts[:'concept_id'] if !opts[:'concept_id'].nil?
      query_params[:'core'] = opts[:'core'] if !opts[:'core'].nil?
      query_params[:'dataStructure'] = opts[:'data_structure'] if !opts[:'data_structure'].nil?
      query_params[:'datasetStructure'] = opts[:'dataset_structure'] if !opts[:'dataset_structure'].nil?
      query_params[:'definition'] = opts[:'definition'] if !opts[:'definition'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'domain'] = opts[:'domain'] if !opts[:'domain'].nil?
      query_params[:'effectiveDate'] = opts[:'effective_date'] if !opts[:'effective_date'].nil?
      query_params[:'extensible'] = opts[:'extensible'] if !opts[:'extensible'].nil?
      query_params[:'href'] = opts[:'href'] if !opts[:'href'].nil?
      query_params[:'label'] = opts[:'label'] if !opts[:'label'].nil?
      query_params[:'measureType'] = opts[:'measure_type'] if !opts[:'measure_type'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'preferredTerm'] = opts[:'preferred_term'] if !opts[:'preferred_term'].nil?
      query_params[:'product'] = opts[:'product'] if !opts[:'product'].nil?
      query_params[:'productGroup'] = opts[:'product_group'] if !opts[:'product_group'].nil?
      query_params[:'registrationStatus'] = opts[:'registration_status'] if !opts[:'registration_status'].nil?
      query_params[:'roleDescription'] = opts[:'role_description'] if !opts[:'role_description'].nil?
      query_params[:'sdtmTarget'] = opts[:'sdtm_target'] if !opts[:'sdtm_target'].nil?
      query_params[:'simpleDatatype'] = opts[:'simple_datatype'] if !opts[:'simple_datatype'].nil?
      query_params[:'submissionValue'] = opts[:'submission_value'] if !opts[:'submission_value'].nil?
      query_params[:'synonyms'] = opts[:'synonyms'] if !opts[:'synonyms'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'uiHref'] = opts[:'ui_href'] if !opts[:'ui_href'].nil?
      query_params[:'valueDomain'] = opts[:'value_domain'] if !opts[:'value_domain'].nil?
      query_params[:'variableSet'] = opts[:'variable_set'] if !opts[:'variable_set'].nil?
      query_params[:'version'] = opts[:'version'] if !opts[:'version'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSearchResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SearchesApi.mdr_search_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchesApi#mdr_search_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Search Results Across CDISC Library
    # @param [Hash] opts the optional parameters
    # @return [MdrSearchScopesGet200Response]
    def mdr_search_scopes_get(opts = {})
      data, _status_code, _headers = mdr_search_scopes_get_with_http_info(opts)
      data
    end

    # Get Search Results Across CDISC Library
    # @param [Hash] opts the optional parameters
    # @return [Array<(MdrSearchScopesGet200Response, Integer, Hash)>] MdrSearchScopesGet200Response data, response status code and response headers
    def mdr_search_scopes_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchesApi.mdr_search_scopes_get ...'
      end
      # resource path
      local_var_path = '/mdr/search/scopes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MdrSearchScopesGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SearchesApi.mdr_search_scopes_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchesApi#mdr_search_scopes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Search Results Limited to Scope
    # @param scope [DefaultSearchScopes] Search Scope
    # @param [Hash] opts the optional parameters
    # @return [ScopeValues]
    def mdr_search_scopes_scope_get(scope, opts = {})
      data, _status_code, _headers = mdr_search_scopes_scope_get_with_http_info(scope, opts)
      data
    end

    # Get Search Results Limited to Scope
    # @param scope [DefaultSearchScopes] Search Scope
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScopeValues, Integer, Hash)>] ScopeValues data, response status code and response headers
    def mdr_search_scopes_scope_get_with_http_info(scope, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchesApi.mdr_search_scopes_scope_get ...'
      end
      # verify the required parameter 'scope' is set
      if @api_client.config.client_side_validation && scope.nil?
        fail ArgumentError, "Missing the required parameter 'scope' when calling SearchesApi.mdr_search_scopes_scope_get"
      end
      # resource path
      local_var_path = '/mdr/search/scopes/{scope}'.sub('{' + 'scope' + '}', CGI.escape(scope.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ScopeValues'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"SearchesApi.mdr_search_scopes_scope_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchesApi#mdr_search_scopes_scope_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#CDISC Library API

#REST API Documentation for CDISC Library in production server

The version of the OpenAPI document: 1.1.0
Contact: cdisc_library_support@cdisc.org
Generated by: https://openapi-generator.tech
Generator version: 7.16.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class ClinicalDataAcquisitionStandardsHarmonizationCDASHApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get CDASH Class Domain List
    # @param version [String] CDISC Library Product Version
    # @param _class [String] CDASH Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [CdashClassDomains]
    def mdr_cdash_version_classes_class_domains_get(version, _class, opts = {})
      data, _status_code, _headers = mdr_cdash_version_classes_class_domains_get_with_http_info(version, _class, opts)
      data
    end

    # Get CDASH Class Domain List
    # @param version [String] CDISC Library Product Version
    # @param _class [String] CDASH Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CdashClassDomains, Integer, Hash)>] CdashClassDomains data, response status code and response headers
    def mdr_cdash_version_classes_class_domains_get_with_http_info(version, _class, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_classes_class_domains_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_classes_class_domains_get"
      end
      # verify the required parameter '_class' is set
      if @api_client.config.client_side_validation && _class.nil?
        fail ArgumentError, "Missing the required parameter '_class' when calling ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_classes_class_domains_get"
      end
      # resource path
      local_var_path = '/mdr/cdash/{version}/classes/{class}/domains'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'class' + '}', CGI.escape(_class.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CdashClassDomains'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_classes_class_domains_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClinicalDataAcquisitionStandardsHarmonizationCDASHApi#mdr_cdash_version_classes_class_domains_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDASH Class Field
    # @param version [String] CDISC Library Product Version
    # @param _class [String] CDASH Class Identifier
    # @param field [String] CDASH Field Identifier
    # @param [Hash] opts the optional parameters
    # @return [CdashClassField]
    def mdr_cdash_version_classes_class_fields_field_get(version, _class, field, opts = {})
      data, _status_code, _headers = mdr_cdash_version_classes_class_fields_field_get_with_http_info(version, _class, field, opts)
      data
    end

    # Get CDASH Class Field
    # @param version [String] CDISC Library Product Version
    # @param _class [String] CDASH Class Identifier
    # @param field [String] CDASH Field Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CdashClassField, Integer, Hash)>] CdashClassField data, response status code and response headers
    def mdr_cdash_version_classes_class_fields_field_get_with_http_info(version, _class, field, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_classes_class_fields_field_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_classes_class_fields_field_get"
      end
      # verify the required parameter '_class' is set
      if @api_client.config.client_side_validation && _class.nil?
        fail ArgumentError, "Missing the required parameter '_class' when calling ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_classes_class_fields_field_get"
      end
      # verify the required parameter 'field' is set
      if @api_client.config.client_side_validation && field.nil?
        fail ArgumentError, "Missing the required parameter 'field' when calling ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_classes_class_fields_field_get"
      end
      # resource path
      local_var_path = '/mdr/cdash/{version}/classes/{class}/fields/{field}'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'class' + '}', CGI.escape(_class.to_s)).sub('{' + 'field' + '}', CGI.escape(field.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CdashClassField'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_classes_class_fields_field_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClinicalDataAcquisitionStandardsHarmonizationCDASHApi#mdr_cdash_version_classes_class_fields_field_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDASH Class
    # @param version [String] CDISC Library Product Version
    # @param _class [String] CDASH Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [CdashClass]
    def mdr_cdash_version_classes_class_get(version, _class, opts = {})
      data, _status_code, _headers = mdr_cdash_version_classes_class_get_with_http_info(version, _class, opts)
      data
    end

    # Get CDASH Class
    # @param version [String] CDISC Library Product Version
    # @param _class [String] CDASH Class Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CdashClass, Integer, Hash)>] CdashClass data, response status code and response headers
    def mdr_cdash_version_classes_class_get_with_http_info(version, _class, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_classes_class_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_classes_class_get"
      end
      # verify the required parameter '_class' is set
      if @api_client.config.client_side_validation && _class.nil?
        fail ArgumentError, "Missing the required parameter '_class' when calling ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_classes_class_get"
      end
      # resource path
      local_var_path = '/mdr/cdash/{version}/classes/{class}'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'class' + '}', CGI.escape(_class.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CdashClass'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_classes_class_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClinicalDataAcquisitionStandardsHarmonizationCDASHApi#mdr_cdash_version_classes_class_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDASH Class List
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [CdashProductClasses]
    def mdr_cdash_version_classes_get(version, opts = {})
      data, _status_code, _headers = mdr_cdash_version_classes_get_with_http_info(version, opts)
      data
    end

    # Get CDASH Class List
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [Array<(CdashProductClasses, Integer, Hash)>] CdashProductClasses data, response status code and response headers
    def mdr_cdash_version_classes_get_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_classes_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_classes_get"
      end
      # resource path
      local_var_path = '/mdr/cdash/{version}/classes'.sub('{' + 'version' + '}', CGI.escape(version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CdashProductClasses'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_classes_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClinicalDataAcquisitionStandardsHarmonizationCDASHApi#mdr_cdash_version_classes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDASH Domain Field
    # @param version [String] CDISC Library Product Version
    # @param domain [String] CDASH Domain Identifier
    # @param field [String] CDASH Field Identifier
    # @param [Hash] opts the optional parameters
    # @return [CdashDomainField]
    def mdr_cdash_version_domains_domain_fields_field_get(version, domain, field, opts = {})
      data, _status_code, _headers = mdr_cdash_version_domains_domain_fields_field_get_with_http_info(version, domain, field, opts)
      data
    end

    # Get CDASH Domain Field
    # @param version [String] CDISC Library Product Version
    # @param domain [String] CDASH Domain Identifier
    # @param field [String] CDASH Field Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CdashDomainField, Integer, Hash)>] CdashDomainField data, response status code and response headers
    def mdr_cdash_version_domains_domain_fields_field_get_with_http_info(version, domain, field, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_domains_domain_fields_field_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_domains_domain_fields_field_get"
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_domains_domain_fields_field_get"
      end
      # verify the required parameter 'field' is set
      if @api_client.config.client_side_validation && field.nil?
        fail ArgumentError, "Missing the required parameter 'field' when calling ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_domains_domain_fields_field_get"
      end
      # resource path
      local_var_path = '/mdr/cdash/{version}/domains/{domain}/fields/{field}'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'domain' + '}', CGI.escape(domain.to_s)).sub('{' + 'field' + '}', CGI.escape(field.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CdashDomainField'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_domains_domain_fields_field_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClinicalDataAcquisitionStandardsHarmonizationCDASHApi#mdr_cdash_version_domains_domain_fields_field_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDASH Domain Field List
    # @param version [String] CDISC Library Product Version
    # @param domain [String] CDASH Domain Identifier
    # @param [Hash] opts the optional parameters
    # @return [CdashDomainFields]
    def mdr_cdash_version_domains_domain_fields_get(version, domain, opts = {})
      data, _status_code, _headers = mdr_cdash_version_domains_domain_fields_get_with_http_info(version, domain, opts)
      data
    end

    # Get CDASH Domain Field List
    # @param version [String] CDISC Library Product Version
    # @param domain [String] CDASH Domain Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CdashDomainFields, Integer, Hash)>] CdashDomainFields data, response status code and response headers
    def mdr_cdash_version_domains_domain_fields_get_with_http_info(version, domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_domains_domain_fields_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_domains_domain_fields_get"
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_domains_domain_fields_get"
      end
      # resource path
      local_var_path = '/mdr/cdash/{version}/domains/{domain}/fields'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'domain' + '}', CGI.escape(domain.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CdashDomainFields'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_domains_domain_fields_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClinicalDataAcquisitionStandardsHarmonizationCDASHApi#mdr_cdash_version_domains_domain_fields_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDASH Domain
    # @param version [String] CDISC Library Product Version
    # @param domain [String] CDASH Domain Identifier
    # @param [Hash] opts the optional parameters
    # @return [CdashDomain]
    def mdr_cdash_version_domains_domain_get(version, domain, opts = {})
      data, _status_code, _headers = mdr_cdash_version_domains_domain_get_with_http_info(version, domain, opts)
      data
    end

    # Get CDASH Domain
    # @param version [String] CDISC Library Product Version
    # @param domain [String] CDASH Domain Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CdashDomain, Integer, Hash)>] CdashDomain data, response status code and response headers
    def mdr_cdash_version_domains_domain_get_with_http_info(version, domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_domains_domain_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_domains_domain_get"
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_domains_domain_get"
      end
      # resource path
      local_var_path = '/mdr/cdash/{version}/domains/{domain}'.sub('{' + 'version' + '}', CGI.escape(version.to_s)).sub('{' + 'domain' + '}', CGI.escape(domain.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CdashDomain'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_domains_domain_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClinicalDataAcquisitionStandardsHarmonizationCDASHApi#mdr_cdash_version_domains_domain_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDASH Domain List
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [CdashProductDomains]
    def mdr_cdash_version_domains_get(version, opts = {})
      data, _status_code, _headers = mdr_cdash_version_domains_get_with_http_info(version, opts)
      data
    end

    # Get CDASH Domain List
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [Array<(CdashProductDomains, Integer, Hash)>] CdashProductDomains data, response status code and response headers
    def mdr_cdash_version_domains_get_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_domains_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_domains_get"
      end
      # resource path
      local_var_path = '/mdr/cdash/{version}/domains'.sub('{' + 'version' + '}', CGI.escape(version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CdashProductDomains'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_domains_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClinicalDataAcquisitionStandardsHarmonizationCDASHApi#mdr_cdash_version_domains_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDASH Product
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [CdashProduct]
    def mdr_cdash_version_get(version, opts = {})
      data, _status_code, _headers = mdr_cdash_version_get_with_http_info(version, opts)
      data
    end

    # Get CDASH Product
    # @param version [String] CDISC Library Product Version
    # @param [Hash] opts the optional parameters
    # @return [Array<(CdashProduct, Integer, Hash)>] CdashProduct data, response status code and response headers
    def mdr_cdash_version_get_with_http_info(version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_get ...'
      end
      # verify the required parameter 'version' is set
      if @api_client.config.client_side_validation && version.nil?
        fail ArgumentError, "Missing the required parameter 'version' when calling ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_get"
      end
      # resource path
      local_var_path = '/mdr/cdash/{version}'.sub('{' + 'version' + '}', CGI.escape(version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CdashProduct'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_cdash_version_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClinicalDataAcquisitionStandardsHarmonizationCDASHApi#mdr_cdash_version_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Root CDASH Class Field
    # @param _class [String] CDASH Class Identifier
    # @param field [String] CDASH Field Identifier
    # @param [Hash] opts the optional parameters
    # @return [RootCdashClassField]
    def mdr_root_cdash_classes_class_fields_field_get(_class, field, opts = {})
      data, _status_code, _headers = mdr_root_cdash_classes_class_fields_field_get_with_http_info(_class, field, opts)
      data
    end

    # Get Root CDASH Class Field
    # @param _class [String] CDASH Class Identifier
    # @param field [String] CDASH Field Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(RootCdashClassField, Integer, Hash)>] RootCdashClassField data, response status code and response headers
    def mdr_root_cdash_classes_class_fields_field_get_with_http_info(_class, field, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_root_cdash_classes_class_fields_field_get ...'
      end
      # verify the required parameter '_class' is set
      if @api_client.config.client_side_validation && _class.nil?
        fail ArgumentError, "Missing the required parameter '_class' when calling ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_root_cdash_classes_class_fields_field_get"
      end
      # verify the required parameter 'field' is set
      if @api_client.config.client_side_validation && field.nil?
        fail ArgumentError, "Missing the required parameter 'field' when calling ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_root_cdash_classes_class_fields_field_get"
      end
      # resource path
      local_var_path = '/mdr/root/cdash/classes/{class}/fields/{field}'.sub('{' + 'class' + '}', CGI.escape(_class.to_s)).sub('{' + 'field' + '}', CGI.escape(field.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RootCdashClassField'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_root_cdash_classes_class_fields_field_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClinicalDataAcquisitionStandardsHarmonizationCDASHApi#mdr_root_cdash_classes_class_fields_field_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Root CDASH Domain Field
    # @param domain [String] CDASH Domain Identifier
    # @param field [String] CDASH Field Identifier
    # @param [Hash] opts the optional parameters
    # @return [RootCdashDomainField]
    def mdr_root_cdash_domains_domain_fields_field_get(domain, field, opts = {})
      data, _status_code, _headers = mdr_root_cdash_domains_domain_fields_field_get_with_http_info(domain, field, opts)
      data
    end

    # Get Root CDASH Domain Field
    # @param domain [String] CDASH Domain Identifier
    # @param field [String] CDASH Field Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(RootCdashDomainField, Integer, Hash)>] RootCdashDomainField data, response status code and response headers
    def mdr_root_cdash_domains_domain_fields_field_get_with_http_info(domain, field, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_root_cdash_domains_domain_fields_field_get ...'
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_root_cdash_domains_domain_fields_field_get"
      end
      # verify the required parameter 'field' is set
      if @api_client.config.client_side_validation && field.nil?
        fail ArgumentError, "Missing the required parameter 'field' when calling ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_root_cdash_domains_domain_fields_field_get"
      end
      # resource path
      local_var_path = '/mdr/root/cdash/domains/{domain}/fields/{field}'.sub('{' + 'domain' + '}', CGI.escape(domain.to_s)).sub('{' + 'field' + '}', CGI.escape(field.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RootCdashDomainField'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ClinicalDataAcquisitionStandardsHarmonizationCDASHApi.mdr_root_cdash_domains_domain_fields_field_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ClinicalDataAcquisitionStandardsHarmonizationCDASHApi#mdr_root_cdash_domains_domain_fields_field_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

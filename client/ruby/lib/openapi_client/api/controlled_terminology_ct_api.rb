=begin
#CDISC Library API

#REST API Documentation for CDISC Library in production server

The version of the OpenAPI document: 1.1.0
Contact: cdisc_library_support@cdisc.org
Generated by: https://openapi-generator.tech
Generator version: 7.16.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class ControlledTerminologyCTApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get CDISC Library CT Package List
    # @param [Hash] opts the optional parameters
    # @return [CtPackages]
    def mdr_ct_packages_get(opts = {})
      data, _status_code, _headers = mdr_ct_packages_get_with_http_info(opts)
      data
    end

    # Get CDISC Library CT Package List
    # @param [Hash] opts the optional parameters
    # @return [Array<(CtPackages, Integer, Hash)>] CtPackages data, response status code and response headers
    def mdr_ct_packages_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlledTerminologyCTApi.mdr_ct_packages_get ...'
      end
      # resource path
      local_var_path = '/mdr/ct/packages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CtPackages'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ControlledTerminologyCTApi.mdr_ct_packages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlledTerminologyCTApi#mdr_ct_packages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDISC Library CT Package Codelist
    # @param package [String] CT Package Identifier
    # @param codelist [String] CT Codelist Identifier
    # @param [Hash] opts the optional parameters
    # @return [CtCodelist]
    def mdr_ct_packages_package_codelists_codelist_get(package, codelist, opts = {})
      data, _status_code, _headers = mdr_ct_packages_package_codelists_codelist_get_with_http_info(package, codelist, opts)
      data
    end

    # Get CDISC Library CT Package Codelist
    # @param package [String] CT Package Identifier
    # @param codelist [String] CT Codelist Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CtCodelist, Integer, Hash)>] CtCodelist data, response status code and response headers
    def mdr_ct_packages_package_codelists_codelist_get_with_http_info(package, codelist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlledTerminologyCTApi.mdr_ct_packages_package_codelists_codelist_get ...'
      end
      # verify the required parameter 'package' is set
      if @api_client.config.client_side_validation && package.nil?
        fail ArgumentError, "Missing the required parameter 'package' when calling ControlledTerminologyCTApi.mdr_ct_packages_package_codelists_codelist_get"
      end
      # verify the required parameter 'codelist' is set
      if @api_client.config.client_side_validation && codelist.nil?
        fail ArgumentError, "Missing the required parameter 'codelist' when calling ControlledTerminologyCTApi.mdr_ct_packages_package_codelists_codelist_get"
      end
      # resource path
      local_var_path = '/mdr/ct/packages/{package}/codelists/{codelist}'.sub('{' + 'package' + '}', CGI.escape(package.to_s)).sub('{' + 'codelist' + '}', CGI.escape(codelist.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CtCodelist'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ControlledTerminologyCTApi.mdr_ct_packages_package_codelists_codelist_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlledTerminologyCTApi#mdr_ct_packages_package_codelists_codelist_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDISC Library CT Package Codelist Term List
    # @param package [String] CT Package Identifier
    # @param codelist [String] CT Codelist Identifier
    # @param [Hash] opts the optional parameters
    # @return [CtCodelistTerms]
    def mdr_ct_packages_package_codelists_codelist_terms_get(package, codelist, opts = {})
      data, _status_code, _headers = mdr_ct_packages_package_codelists_codelist_terms_get_with_http_info(package, codelist, opts)
      data
    end

    # Get CDISC Library CT Package Codelist Term List
    # @param package [String] CT Package Identifier
    # @param codelist [String] CT Codelist Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CtCodelistTerms, Integer, Hash)>] CtCodelistTerms data, response status code and response headers
    def mdr_ct_packages_package_codelists_codelist_terms_get_with_http_info(package, codelist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlledTerminologyCTApi.mdr_ct_packages_package_codelists_codelist_terms_get ...'
      end
      # verify the required parameter 'package' is set
      if @api_client.config.client_side_validation && package.nil?
        fail ArgumentError, "Missing the required parameter 'package' when calling ControlledTerminologyCTApi.mdr_ct_packages_package_codelists_codelist_terms_get"
      end
      # verify the required parameter 'codelist' is set
      if @api_client.config.client_side_validation && codelist.nil?
        fail ArgumentError, "Missing the required parameter 'codelist' when calling ControlledTerminologyCTApi.mdr_ct_packages_package_codelists_codelist_terms_get"
      end
      # resource path
      local_var_path = '/mdr/ct/packages/{package}/codelists/{codelist}/terms'.sub('{' + 'package' + '}', CGI.escape(package.to_s)).sub('{' + 'codelist' + '}', CGI.escape(codelist.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CtCodelistTerms'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ControlledTerminologyCTApi.mdr_ct_packages_package_codelists_codelist_terms_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlledTerminologyCTApi#mdr_ct_packages_package_codelists_codelist_terms_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDISC Library CT Package Codelist Term
    # @param package [String] CT Package Product Identifier
    # @param codelist [String] CT Codelist Identifier
    # @param term [String] CT Codelist Term Identifier
    # @param [Hash] opts the optional parameters
    # @return [CtTerm]
    def mdr_ct_packages_package_codelists_codelist_terms_term_get(package, codelist, term, opts = {})
      data, _status_code, _headers = mdr_ct_packages_package_codelists_codelist_terms_term_get_with_http_info(package, codelist, term, opts)
      data
    end

    # Get CDISC Library CT Package Codelist Term
    # @param package [String] CT Package Product Identifier
    # @param codelist [String] CT Codelist Identifier
    # @param term [String] CT Codelist Term Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CtTerm, Integer, Hash)>] CtTerm data, response status code and response headers
    def mdr_ct_packages_package_codelists_codelist_terms_term_get_with_http_info(package, codelist, term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlledTerminologyCTApi.mdr_ct_packages_package_codelists_codelist_terms_term_get ...'
      end
      # verify the required parameter 'package' is set
      if @api_client.config.client_side_validation && package.nil?
        fail ArgumentError, "Missing the required parameter 'package' when calling ControlledTerminologyCTApi.mdr_ct_packages_package_codelists_codelist_terms_term_get"
      end
      # verify the required parameter 'codelist' is set
      if @api_client.config.client_side_validation && codelist.nil?
        fail ArgumentError, "Missing the required parameter 'codelist' when calling ControlledTerminologyCTApi.mdr_ct_packages_package_codelists_codelist_terms_term_get"
      end
      # verify the required parameter 'term' is set
      if @api_client.config.client_side_validation && term.nil?
        fail ArgumentError, "Missing the required parameter 'term' when calling ControlledTerminologyCTApi.mdr_ct_packages_package_codelists_codelist_terms_term_get"
      end
      # resource path
      local_var_path = '/mdr/ct/packages/{package}/codelists/{codelist}/terms/{term}'.sub('{' + 'package' + '}', CGI.escape(package.to_s)).sub('{' + 'codelist' + '}', CGI.escape(codelist.to_s)).sub('{' + 'term' + '}', CGI.escape(term.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CtTerm'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ControlledTerminologyCTApi.mdr_ct_packages_package_codelists_codelist_terms_term_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlledTerminologyCTApi#mdr_ct_packages_package_codelists_codelist_terms_term_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDISC Library CT Package Codelist List
    # @param package [String] CT Package Identifier
    # @param [Hash] opts the optional parameters
    # @return [CtPackageCodelists]
    def mdr_ct_packages_package_codelists_get(package, opts = {})
      data, _status_code, _headers = mdr_ct_packages_package_codelists_get_with_http_info(package, opts)
      data
    end

    # Get CDISC Library CT Package Codelist List
    # @param package [String] CT Package Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CtPackageCodelists, Integer, Hash)>] CtPackageCodelists data, response status code and response headers
    def mdr_ct_packages_package_codelists_get_with_http_info(package, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlledTerminologyCTApi.mdr_ct_packages_package_codelists_get ...'
      end
      # verify the required parameter 'package' is set
      if @api_client.config.client_side_validation && package.nil?
        fail ArgumentError, "Missing the required parameter 'package' when calling ControlledTerminologyCTApi.mdr_ct_packages_package_codelists_get"
      end
      # resource path
      local_var_path = '/mdr/ct/packages/{package}/codelists'.sub('{' + 'package' + '}', CGI.escape(package.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CtPackageCodelists'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ControlledTerminologyCTApi.mdr_ct_packages_package_codelists_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlledTerminologyCTApi#mdr_ct_packages_package_codelists_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDISC Library CT Package
    # @param product [String] CT Package Product Identifier
    # @param [Hash] opts the optional parameters
    # @return [CtPackage]
    def mdr_ct_packages_product_get(product, opts = {})
      data, _status_code, _headers = mdr_ct_packages_product_get_with_http_info(product, opts)
      data
    end

    # Get CDISC Library CT Package
    # @param product [String] CT Package Product Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CtPackage, Integer, Hash)>] CtPackage data, response status code and response headers
    def mdr_ct_packages_product_get_with_http_info(product, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlledTerminologyCTApi.mdr_ct_packages_product_get ...'
      end
      # verify the required parameter 'product' is set
      if @api_client.config.client_side_validation && product.nil?
        fail ArgumentError, "Missing the required parameter 'product' when calling ControlledTerminologyCTApi.mdr_ct_packages_product_get"
      end
      # resource path
      local_var_path = '/mdr/ct/packages/{product}'.sub('{' + 'product' + '}', CGI.escape(product.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CtPackage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ControlledTerminologyCTApi.mdr_ct_packages_product_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlledTerminologyCTApi#mdr_ct_packages_product_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDISC Library Root CT Codelist
    # @param product_group [String] CT Product Group Identifier
    # @param codelist [String] CT Codelist Identifier
    # @param [Hash] opts the optional parameters
    # @return [RootCtCodelist]
    def mdr_root_ct_product_group_codelists_codelist_get(product_group, codelist, opts = {})
      data, _status_code, _headers = mdr_root_ct_product_group_codelists_codelist_get_with_http_info(product_group, codelist, opts)
      data
    end

    # Get CDISC Library Root CT Codelist
    # @param product_group [String] CT Product Group Identifier
    # @param codelist [String] CT Codelist Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(RootCtCodelist, Integer, Hash)>] RootCtCodelist data, response status code and response headers
    def mdr_root_ct_product_group_codelists_codelist_get_with_http_info(product_group, codelist, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlledTerminologyCTApi.mdr_root_ct_product_group_codelists_codelist_get ...'
      end
      # verify the required parameter 'product_group' is set
      if @api_client.config.client_side_validation && product_group.nil?
        fail ArgumentError, "Missing the required parameter 'product_group' when calling ControlledTerminologyCTApi.mdr_root_ct_product_group_codelists_codelist_get"
      end
      # verify the required parameter 'codelist' is set
      if @api_client.config.client_side_validation && codelist.nil?
        fail ArgumentError, "Missing the required parameter 'codelist' when calling ControlledTerminologyCTApi.mdr_root_ct_product_group_codelists_codelist_get"
      end
      # resource path
      local_var_path = '/mdr/root/ct/{productGroup}/codelists/{codelist}'.sub('{' + 'productGroup' + '}', CGI.escape(product_group.to_s)).sub('{' + 'codelist' + '}', CGI.escape(codelist.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RootCtCodelist'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ControlledTerminologyCTApi.mdr_root_ct_product_group_codelists_codelist_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlledTerminologyCTApi#mdr_root_ct_product_group_codelists_codelist_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get CDISC Library Root CT Term
    # @param product_group [String] CT Product Group Identifier
    # @param codelist [String] CT Codelist Identifier
    # @param term [String] CT Codelist Term Identifier
    # @param [Hash] opts the optional parameters
    # @return [RootCtTerm]
    def mdr_root_ct_product_group_codelists_codelist_terms_term_get(product_group, codelist, term, opts = {})
      data, _status_code, _headers = mdr_root_ct_product_group_codelists_codelist_terms_term_get_with_http_info(product_group, codelist, term, opts)
      data
    end

    # Get CDISC Library Root CT Term
    # @param product_group [String] CT Product Group Identifier
    # @param codelist [String] CT Codelist Identifier
    # @param term [String] CT Codelist Term Identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(RootCtTerm, Integer, Hash)>] RootCtTerm data, response status code and response headers
    def mdr_root_ct_product_group_codelists_codelist_terms_term_get_with_http_info(product_group, codelist, term, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ControlledTerminologyCTApi.mdr_root_ct_product_group_codelists_codelist_terms_term_get ...'
      end
      # verify the required parameter 'product_group' is set
      if @api_client.config.client_side_validation && product_group.nil?
        fail ArgumentError, "Missing the required parameter 'product_group' when calling ControlledTerminologyCTApi.mdr_root_ct_product_group_codelists_codelist_terms_term_get"
      end
      # verify the required parameter 'codelist' is set
      if @api_client.config.client_side_validation && codelist.nil?
        fail ArgumentError, "Missing the required parameter 'codelist' when calling ControlledTerminologyCTApi.mdr_root_ct_product_group_codelists_codelist_terms_term_get"
      end
      # verify the required parameter 'term' is set
      if @api_client.config.client_side_validation && term.nil?
        fail ArgumentError, "Missing the required parameter 'term' when calling ControlledTerminologyCTApi.mdr_root_ct_product_group_codelists_codelist_terms_term_get"
      end
      # resource path
      local_var_path = '/mdr/root/ct/{productGroup}/codelists/{codelist}/terms/{term}'.sub('{' + 'productGroup' + '}', CGI.escape(product_group.to_s)).sub('{' + 'codelist' + '}', CGI.escape(codelist.to_s)).sub('{' + 'term' + '}', CGI.escape(term.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RootCtTerm'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"ControlledTerminologyCTApi.mdr_root_ct_product_group_codelists_codelist_terms_term_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ControlledTerminologyCTApi#mdr_root_ct_product_group_codelists_codelist_terms_term_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

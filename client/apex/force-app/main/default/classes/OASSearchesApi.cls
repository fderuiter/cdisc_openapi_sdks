/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASSearchesApi {
    OASClient client;

    public OASSearchesApi(OASClient client) {
        this.client = client;
    }

    public OASSearchesApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * 
     * Get Search Results Across CDISC Library
     * @param q Search Term Expression (required)
     * @param highlight Search Highlight Expression (optional)
     * @param start Initial Search Result Index (optional, default to 0)
     * @param pageSize Number of Search Results to Return (optional, default to 100)
     * @param propertyClass Limit Search by Setting Scope to Class (optional)
     * @param codelist Limit Search by Setting Scope to Codelist (optional)
     * @param conceptId Limit Search by Setting Scope to Concept ID (optional)
     * @param core Limit Search by Setting Scope to Core (optional)
     * @param dataStructure Limit Search by Setting Scope to Data Structure (optional)
     * @param datasetStructure Limit Search by Setting Scope to Dataset Structure (optional)
     * @param definition Limit Search by Setting Scope to Definition (optional)
     * @param description Limit Search by Setting Scope to Description (optional)
     * @param domain Limit Search by Setting Scope to Domain (optional)
     * @param effectiveDate Limit Search by Setting Scope to Effective Date (optional)
     * @param extensible Limit Search by Setting Scope to Extensible (optional)
     * @param href Limit Search by Setting Scope to Href (optional)
     * @param label Limit Search by Setting Scope to Label (optional)
     * @param measureType SLimit Search by Setting Scope to Measure Type (optional)
     * @param name Limit Search by Setting Scope to Name (optional)
     * @param preferredTerm Limit Search by Setting Scope to Preferred Term (optional)
     * @param product Limit Search by Setting Scope to Product (optional)
     * @param productGroup Limit Search by Setting Scope to Product Group (optional)
     * @param registrationStatus Limit Search by Setting Scope to Registration Status (optional)
     * @param roleDescription Limit Search by Setting Scope to Role Description (optional)
     * @param sdtmTarget Limit Search by Setting Scope to SDTM Target (optional)
     * @param simpleDatatype Limit Search by Setting Scope to Simple Datatype (optional)
     * @param submissionValue Limit Search by Setting Scope to Submission Value (optional)
     * @param synonyms Limit Search by Setting Scope to Synonyms (optional)
     * @param type Limit Search by Setting Scope to Type (optional)
     * @param uiHref Limit Search by Setting Scope to UI Href (optional)
     * @param valueDomain Limit Search by Setting Scope to Value Domain (optional)
     * @param variableSet Limit Search by Setting Scope to Variable Set (optional)
     * @param version Limit Search by Setting Scope to Version (optional)
     * @return OASDefaultSearchResponse
     * @throws OAS.ApiException if fails to make API call
     */
    public OASDefaultSearchResponse mdrSearchGet(Map<String, Object> params) {
        client.assertNotNull(params.get('q'), 'q');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('q', (String) params.get('q')));
        query.addAll(client.makeParam('highlight', (String) params.get('highlight')));
        query.addAll(client.makeParam('start', (Double) params.get('start')));
        query.addAll(client.makeParam('pageSize', (Double) params.get('pageSize')));
        query.addAll(client.makeParam('class', (String) params.get('propertyClass')));
        query.addAll(client.makeParam('codelist', (String) params.get('codelist')));
        query.addAll(client.makeParam('conceptId', (String) params.get('conceptId')));
        query.addAll(client.makeParam('core', (String) params.get('core')));
        query.addAll(client.makeParam('dataStructure', (String) params.get('dataStructure')));
        query.addAll(client.makeParam('datasetStructure', (String) params.get('datasetStructure')));
        query.addAll(client.makeParam('definition', (String) params.get('definition')));
        query.addAll(client.makeParam('description', (String) params.get('description')));
        query.addAll(client.makeParam('domain', (String) params.get('domain')));
        query.addAll(client.makeParam('effectiveDate', (String) params.get('effectiveDate')));
        query.addAll(client.makeParam('extensible', (String) params.get('extensible')));
        query.addAll(client.makeParam('href', (String) params.get('href')));
        query.addAll(client.makeParam('label', (String) params.get('label')));
        query.addAll(client.makeParam('measureType', (String) params.get('measureType')));
        query.addAll(client.makeParam('name', (String) params.get('name')));
        query.addAll(client.makeParam('preferredTerm', (String) params.get('preferredTerm')));
        query.addAll(client.makeParam('product', (String) params.get('product')));
        query.addAll(client.makeParam('productGroup', (String) params.get('productGroup')));
        query.addAll(client.makeParam('registrationStatus', (String) params.get('registrationStatus')));
        query.addAll(client.makeParam('roleDescription', (String) params.get('roleDescription')));
        query.addAll(client.makeParam('sdtmTarget', (String) params.get('sdtmTarget')));
        query.addAll(client.makeParam('simpleDatatype', (String) params.get('simpleDatatype')));
        query.addAll(client.makeParam('submissionValue', (String) params.get('submissionValue')));
        query.addAll(client.makeParam('synonyms', (String) params.get('synonyms')));
        query.addAll(client.makeParam('type', (String) params.get('type')));
        query.addAll(client.makeParam('uiHref', (String) params.get('uiHref')));
        query.addAll(client.makeParam('valueDomain', (String) params.get('valueDomain')));
        query.addAll(client.makeParam('variableSet', (String) params.get('variableSet')));
        query.addAll(client.makeParam('version', (String) params.get('version')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASDefaultSearchResponse) client.invoke(
            'GET', '/mdr/search', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'basicAuth' },
            OASDefaultSearchResponse.class
        );
    }
    /**
     * 
     * Get Search Results Across CDISC Library
     * @return OASMdrSearchScopesGet200Response
     * @throws OAS.ApiException if fails to make API call
     */
    public OASMdrSearchScopesGet200Response mdrSearchScopesGet() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASMdrSearchScopesGet200Response) client.invoke(
            'GET', '/mdr/search/scopes', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'basicAuth' },
            OASMdrSearchScopesGet200Response.class
        );
    }
    /**
     * 
     * Get Search Results Limited to Scope
     * @param scope Search Scope (required)
     * @return OASScopeValues
     * @throws OAS.ApiException if fails to make API call
     */
    public OASScopeValues mdrSearchScopesScopeGet(Map<String, Object> params) {
        client.assertNotNull(params.get('scope'), 'scope');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASScopeValues) client.invoke(
            'GET', '/mdr/search/scopes/{scope}', '',
            query, form,
            new Map<String, Object>{
                'scope' => (OASDefaultSearchScopes) params.get('scope')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'basicAuth' },
            OASScopeValues.class
        );
    }
}

/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASExportSendigVariablesRow
 */
public class OASExportSendigVariablesRow implements OAS.MappedProperties {
    /**
     * Get version
     * @return version
     */
    public String version { get; set; }

    /**
     * Get variableOrder
     * @return variableOrder
     */
    public String variableOrder { get; set; }

    /**
     * Get propertyClass
     * @return propertyClass
     */
    public String propertyClass { get; set; }

    /**
     * Get datasetName
     * @return datasetName
     */
    public String datasetName { get; set; }

    /**
     * Get variableName
     * @return variableName
     */
    public String variableName { get; set; }

    /**
     * Get variableLabel
     * @return variableLabel
     */
    public String variableLabel { get; set; }

    /**
     * Get type
     * @return type
     */
    public String type { get; set; }

    /**
     * Get controlledTermsCodelistOrFormat
     * @return controlledTermsCodelistOrFormat
     */
    public String controlledTermsCodelistOrFormat { get; set; }

    /**
     * Get role
     * @return role
     */
    public String role { get; set; }

    /**
     * Get cdISCNotes
     * @return cdISCNotes
     */
    public String cdISCNotes { get; set; }

    /**
     * Get core
     * @return core
     */
    public String core { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Variable Order' => 'variableOrder',
        'Class' => 'propertyClass',
        'Dataset Name' => 'datasetName',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Controlled Terms, Codelist or Format' => 'controlledTermsCodelistOrFormat',
        'Role' => 'role',
        'CDISC Notes' => 'cdISCNotes',
        'Core' => 'core'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Variable Order' => 'variableOrder',
        'Class' => 'propertyClass',
        'Dataset Name' => 'datasetName',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Controlled Terms, Codelist or Format' => 'controlledTermsCodelistOrFormat',
        'Role' => 'role',
        'CDISC Notes' => 'cdISCNotes',
        'Core' => 'core'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Variable Order' => 'variableOrder',
        'Class' => 'propertyClass',
        'Dataset Name' => 'datasetName',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Controlled Terms, Codelist or Format' => 'controlledTermsCodelistOrFormat',
        'Role' => 'role',
        'CDISC Notes' => 'cdISCNotes',
        'Core' => 'core'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Variable Order' => 'variableOrder',
        'Class' => 'propertyClass',
        'Dataset Name' => 'datasetName',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Controlled Terms, Codelist or Format' => 'controlledTermsCodelistOrFormat',
        'Role' => 'role',
        'CDISC Notes' => 'cdISCNotes',
        'Core' => 'core'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Variable Order' => 'variableOrder',
        'Class' => 'propertyClass',
        'Dataset Name' => 'datasetName',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Controlled Terms, Codelist or Format' => 'controlledTermsCodelistOrFormat',
        'Role' => 'role',
        'CDISC Notes' => 'cdISCNotes',
        'Core' => 'core'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Variable Order' => 'variableOrder',
        'Class' => 'propertyClass',
        'Dataset Name' => 'datasetName',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Controlled Terms, Codelist or Format' => 'controlledTermsCodelistOrFormat',
        'Role' => 'role',
        'CDISC Notes' => 'cdISCNotes',
        'Core' => 'core'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Variable Order' => 'variableOrder',
        'Class' => 'propertyClass',
        'Dataset Name' => 'datasetName',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Controlled Terms, Codelist or Format' => 'controlledTermsCodelistOrFormat',
        'Role' => 'role',
        'CDISC Notes' => 'cdISCNotes',
        'Core' => 'core'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Variable Order' => 'variableOrder',
        'Class' => 'propertyClass',
        'Dataset Name' => 'datasetName',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Controlled Terms, Codelist or Format' => 'controlledTermsCodelistOrFormat',
        'Role' => 'role',
        'CDISC Notes' => 'cdISCNotes',
        'Core' => 'core'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Variable Order' => 'variableOrder',
        'Class' => 'propertyClass',
        'Dataset Name' => 'datasetName',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Controlled Terms, Codelist or Format' => 'controlledTermsCodelistOrFormat',
        'Role' => 'role',
        'CDISC Notes' => 'cdISCNotes',
        'Core' => 'core'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Variable Order' => 'variableOrder',
        'Class' => 'propertyClass',
        'Dataset Name' => 'datasetName',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Controlled Terms, Codelist or Format' => 'controlledTermsCodelistOrFormat',
        'Role' => 'role',
        'CDISC Notes' => 'cdISCNotes',
        'Core' => 'core'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Variable Order' => 'variableOrder',
        'Class' => 'propertyClass',
        'Dataset Name' => 'datasetName',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Controlled Terms, Codelist or Format' => 'controlledTermsCodelistOrFormat',
        'Role' => 'role',
        'CDISC Notes' => 'cdISCNotes',
        'Core' => 'core'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASExportSendigVariablesRow getExample() {
        OASExportSendigVariablesRow exportSendigVariablesRow = new OASExportSendigVariablesRow();
          exportSendigVariablesRow.version = '';
          exportSendigVariablesRow.variableOrder = '';
          exportSendigVariablesRow.propertyClass = '';
          exportSendigVariablesRow.datasetName = '';
          exportSendigVariablesRow.variableName = '';
          exportSendigVariablesRow.variableLabel = '';
          exportSendigVariablesRow.type = '';
          exportSendigVariablesRow.controlledTermsCodelistOrFormat = '';
          exportSendigVariablesRow.role = '';
          exportSendigVariablesRow.cdISCNotes = '';
          exportSendigVariablesRow.core = '';
        return exportSendigVariablesRow;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASExportSendigVariablesRow) {           
            OASExportSendigVariablesRow exportSendigVariablesRow = (OASExportSendigVariablesRow) obj;
            return this.version == exportSendigVariablesRow.version
                && this.variableOrder == exportSendigVariablesRow.variableOrder
                && this.propertyClass == exportSendigVariablesRow.propertyClass
                && this.datasetName == exportSendigVariablesRow.datasetName
                && this.variableName == exportSendigVariablesRow.variableName
                && this.variableLabel == exportSendigVariablesRow.variableLabel
                && this.type == exportSendigVariablesRow.type
                && this.controlledTermsCodelistOrFormat == exportSendigVariablesRow.controlledTermsCodelistOrFormat
                && this.role == exportSendigVariablesRow.role
                && this.cdISCNotes == exportSendigVariablesRow.cdISCNotes
                && this.core == exportSendigVariablesRow.core;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (version == null ? 0 : System.hashCode(version));
        hashCode = (17 * hashCode) + (variableOrder == null ? 0 : System.hashCode(variableOrder));
        hashCode = (17 * hashCode) + (propertyClass == null ? 0 : System.hashCode(propertyClass));
        hashCode = (17 * hashCode) + (datasetName == null ? 0 : System.hashCode(datasetName));
        hashCode = (17 * hashCode) + (variableName == null ? 0 : System.hashCode(variableName));
        hashCode = (17 * hashCode) + (variableLabel == null ? 0 : System.hashCode(variableLabel));
        hashCode = (17 * hashCode) + (type == null ? 0 : System.hashCode(type));
        hashCode = (17 * hashCode) + (controlledTermsCodelistOrFormat == null ? 0 : System.hashCode(controlledTermsCodelistOrFormat));
        hashCode = (17 * hashCode) + (role == null ? 0 : System.hashCode(role));
        hashCode = (17 * hashCode) + (cdISCNotes == null ? 0 : System.hashCode(cdISCNotes));
        hashCode = (17 * hashCode) + (core == null ? 0 : System.hashCode(core));
        return hashCode;
    }
}


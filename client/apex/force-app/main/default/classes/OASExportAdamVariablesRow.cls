/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASExportAdamVariablesRow
 */
public class OASExportAdamVariablesRow implements OAS.MappedProperties {
    /**
     * Get version
     * @return version
     */
    public String version { get; set; }

    /**
     * Get dataStructureName
     * @return dataStructureName
     */
    public String dataStructureName { get; set; }

    /**
     * Get datasetName
     * @return datasetName
     */
    public String datasetName { get; set; }

    /**
     * Get variableGroup
     * @return variableGroup
     */
    public String variableGroup { get; set; }

    /**
     * Get variableName
     * @return variableName
     */
    public String variableName { get; set; }

    /**
     * Get variableLabel
     * @return variableLabel
     */
    public String variableLabel { get; set; }

    /**
     * Get type
     * @return type
     */
    public String type { get; set; }

    /**
     * Get codelistControlledTerms
     * @return codelistControlledTerms
     */
    public String codelistControlledTerms { get; set; }

    /**
     * Get core
     * @return core
     */
    public String core { get; set; }

    /**
     * Get cdISCNotes
     * @return cdISCNotes
     */
    public String cdISCNotes { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Data Structure Name' => 'dataStructureName',
        'Dataset Name' => 'datasetName',
        'Variable Group' => 'variableGroup',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Codelist/Controlled Terms' => 'codelistControlledTerms',
        'Core' => 'core',
        'CDISC Notes' => 'cdISCNotes'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Data Structure Name' => 'dataStructureName',
        'Dataset Name' => 'datasetName',
        'Variable Group' => 'variableGroup',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Codelist/Controlled Terms' => 'codelistControlledTerms',
        'Core' => 'core',
        'CDISC Notes' => 'cdISCNotes'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Data Structure Name' => 'dataStructureName',
        'Dataset Name' => 'datasetName',
        'Variable Group' => 'variableGroup',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Codelist/Controlled Terms' => 'codelistControlledTerms',
        'Core' => 'core',
        'CDISC Notes' => 'cdISCNotes'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Data Structure Name' => 'dataStructureName',
        'Dataset Name' => 'datasetName',
        'Variable Group' => 'variableGroup',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Codelist/Controlled Terms' => 'codelistControlledTerms',
        'Core' => 'core',
        'CDISC Notes' => 'cdISCNotes'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Data Structure Name' => 'dataStructureName',
        'Dataset Name' => 'datasetName',
        'Variable Group' => 'variableGroup',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Codelist/Controlled Terms' => 'codelistControlledTerms',
        'Core' => 'core',
        'CDISC Notes' => 'cdISCNotes'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Data Structure Name' => 'dataStructureName',
        'Dataset Name' => 'datasetName',
        'Variable Group' => 'variableGroup',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Codelist/Controlled Terms' => 'codelistControlledTerms',
        'Core' => 'core',
        'CDISC Notes' => 'cdISCNotes'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Data Structure Name' => 'dataStructureName',
        'Dataset Name' => 'datasetName',
        'Variable Group' => 'variableGroup',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Codelist/Controlled Terms' => 'codelistControlledTerms',
        'Core' => 'core',
        'CDISC Notes' => 'cdISCNotes'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Data Structure Name' => 'dataStructureName',
        'Dataset Name' => 'datasetName',
        'Variable Group' => 'variableGroup',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Codelist/Controlled Terms' => 'codelistControlledTerms',
        'Core' => 'core',
        'CDISC Notes' => 'cdISCNotes'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Data Structure Name' => 'dataStructureName',
        'Dataset Name' => 'datasetName',
        'Variable Group' => 'variableGroup',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Codelist/Controlled Terms' => 'codelistControlledTerms',
        'Core' => 'core',
        'CDISC Notes' => 'cdISCNotes'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Version' => 'version',
        'Data Structure Name' => 'dataStructureName',
        'Dataset Name' => 'datasetName',
        'Variable Group' => 'variableGroup',
        'Variable Name' => 'variableName',
        'Variable Label' => 'variableLabel',
        'Type' => 'type',
        'Codelist/Controlled Terms' => 'codelistControlledTerms',
        'Core' => 'core',
        'CDISC Notes' => 'cdISCNotes'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static OASExportAdamVariablesRow getExample() {
        OASExportAdamVariablesRow exportAdamVariablesRow = new OASExportAdamVariablesRow();
          exportAdamVariablesRow.version = '';
          exportAdamVariablesRow.dataStructureName = '';
          exportAdamVariablesRow.datasetName = '';
          exportAdamVariablesRow.variableGroup = '';
          exportAdamVariablesRow.variableName = '';
          exportAdamVariablesRow.variableLabel = '';
          exportAdamVariablesRow.type = '';
          exportAdamVariablesRow.codelistControlledTerms = '';
          exportAdamVariablesRow.core = '';
          exportAdamVariablesRow.cdISCNotes = '';
        return exportAdamVariablesRow;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASExportAdamVariablesRow) {           
            OASExportAdamVariablesRow exportAdamVariablesRow = (OASExportAdamVariablesRow) obj;
            return this.version == exportAdamVariablesRow.version
                && this.dataStructureName == exportAdamVariablesRow.dataStructureName
                && this.datasetName == exportAdamVariablesRow.datasetName
                && this.variableGroup == exportAdamVariablesRow.variableGroup
                && this.variableName == exportAdamVariablesRow.variableName
                && this.variableLabel == exportAdamVariablesRow.variableLabel
                && this.type == exportAdamVariablesRow.type
                && this.codelistControlledTerms == exportAdamVariablesRow.codelistControlledTerms
                && this.core == exportAdamVariablesRow.core
                && this.cdISCNotes == exportAdamVariablesRow.cdISCNotes;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (version == null ? 0 : System.hashCode(version));
        hashCode = (17 * hashCode) + (dataStructureName == null ? 0 : System.hashCode(dataStructureName));
        hashCode = (17 * hashCode) + (datasetName == null ? 0 : System.hashCode(datasetName));
        hashCode = (17 * hashCode) + (variableGroup == null ? 0 : System.hashCode(variableGroup));
        hashCode = (17 * hashCode) + (variableName == null ? 0 : System.hashCode(variableName));
        hashCode = (17 * hashCode) + (variableLabel == null ? 0 : System.hashCode(variableLabel));
        hashCode = (17 * hashCode) + (type == null ? 0 : System.hashCode(type));
        hashCode = (17 * hashCode) + (codelistControlledTerms == null ? 0 : System.hashCode(codelistControlledTerms));
        hashCode = (17 * hashCode) + (core == null ? 0 : System.hashCode(core));
        hashCode = (17 * hashCode) + (cdISCNotes == null ? 0 : System.hashCode(cdISCNotes));
        return hashCode;
    }
}


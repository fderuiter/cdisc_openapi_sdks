/*
 * CDISC Library API
 *
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`mdr_qrs_measure_version_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrQrsMeasureVersionGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_qrs_measure_version_items_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrQrsMeasureVersionItemsGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_qrs_measure_version_items_item_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrQrsMeasureVersionItemsItemGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_qrs_measure_version_responsegroups_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrQrsMeasureVersionResponsegroupsGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_qrs_measure_version_responsegroups_responsegroup_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrQrsMeasureVersionResponsegroupsResponsegroupGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}


/// Get QRS Product
pub async fn mdr_qrs_measure_version_get(configuration: &configuration::Configuration, measure: &str, version: &str) -> Result<models::QrsProduct, Error<MdrQrsMeasureVersionGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_measure = measure;
    let p_path_version = version;

    let uri_str = format!("{}/mdr/qrs/{measure}/{version}", configuration.base_path, measure=crate::apis::urlencode(p_path_measure), version=crate::apis::urlencode(p_path_version));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::QrsProduct`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::QrsProduct`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrQrsMeasureVersionGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get QRS Item List
pub async fn mdr_qrs_measure_version_items_get(configuration: &configuration::Configuration, measure: &str, version: &str) -> Result<models::QrsItems, Error<MdrQrsMeasureVersionItemsGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_measure = measure;
    let p_path_version = version;

    let uri_str = format!("{}/mdr/qrs/{measure}/{version}/items", configuration.base_path, measure=crate::apis::urlencode(p_path_measure), version=crate::apis::urlencode(p_path_version));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::QrsItems`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::QrsItems`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrQrsMeasureVersionItemsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get QRS Item
pub async fn mdr_qrs_measure_version_items_item_get(configuration: &configuration::Configuration, measure: &str, version: &str, item: &str) -> Result<models::QrsItem, Error<MdrQrsMeasureVersionItemsItemGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_measure = measure;
    let p_path_version = version;
    let p_path_item = item;

    let uri_str = format!("{}/mdr/qrs/{measure}/{version}/items/{item}", configuration.base_path, measure=crate::apis::urlencode(p_path_measure), version=crate::apis::urlencode(p_path_version), item=crate::apis::urlencode(p_path_item));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::QrsItem`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::QrsItem`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrQrsMeasureVersionItemsItemGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get QRS Response Group List
pub async fn mdr_qrs_measure_version_responsegroups_get(configuration: &configuration::Configuration, measure: &str, version: &str) -> Result<models::QrsResponsegroups, Error<MdrQrsMeasureVersionResponsegroupsGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_measure = measure;
    let p_path_version = version;

    let uri_str = format!("{}/mdr/qrs/{measure}/{version}/responsegroups", configuration.base_path, measure=crate::apis::urlencode(p_path_measure), version=crate::apis::urlencode(p_path_version));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::QrsResponsegroups`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::QrsResponsegroups`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrQrsMeasureVersionResponsegroupsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get QRS Response Group
pub async fn mdr_qrs_measure_version_responsegroups_responsegroup_get(configuration: &configuration::Configuration, measure: &str, version: &str, responsegroup: &str) -> Result<models::QrsResponsegroup, Error<MdrQrsMeasureVersionResponsegroupsResponsegroupGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_measure = measure;
    let p_path_version = version;
    let p_path_responsegroup = responsegroup;

    let uri_str = format!("{}/mdr/qrs/{measure}/{version}/responsegroups/{responsegroup}", configuration.base_path, measure=crate::apis::urlencode(p_path_measure), version=crate::apis::urlencode(p_path_version), responsegroup=crate::apis::urlencode(p_path_responsegroup));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::QrsResponsegroup`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::QrsResponsegroup`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrQrsMeasureVersionResponsegroupsResponsegroupGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}


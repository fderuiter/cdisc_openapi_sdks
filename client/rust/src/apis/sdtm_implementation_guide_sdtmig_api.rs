/*
 * CDISC Library API
 *
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`mdr_root_sdtmig_datasets_dataset_variables_var_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrRootSdtmigDatasetsDatasetVariablesVarGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_sdtmig_version_classes_class_datasets_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrSdtmigVersionClassesClassDatasetsGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_sdtmig_version_classes_class_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrSdtmigVersionClassesClassGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_sdtmig_version_classes_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrSdtmigVersionClassesGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_sdtmig_version_datasets_dataset_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrSdtmigVersionDatasetsDatasetGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_sdtmig_version_datasets_dataset_variables_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrSdtmigVersionDatasetsDatasetVariablesGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_sdtmig_version_datasets_dataset_variables_var_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrSdtmigVersionDatasetsDatasetVariablesVarGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_sdtmig_version_datasets_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrSdtmigVersionDatasetsGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_sdtmig_version_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrSdtmigVersionGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}


/// Get Root SDTMIG Dataset Variable
pub async fn mdr_root_sdtmig_datasets_dataset_variables_var_get(configuration: &configuration::Configuration, dataset: &str, var: &str) -> Result<models::RootSdtmigDatasetVariable, Error<MdrRootSdtmigDatasetsDatasetVariablesVarGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_dataset = dataset;
    let p_path_var = var;

    let uri_str = format!("{}/mdr/root/sdtmig/datasets/{dataset}/variables/{var}", configuration.base_path, dataset=crate::apis::urlencode(p_path_dataset), var=crate::apis::urlencode(p_path_var));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RootSdtmigDatasetVariable`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RootSdtmigDatasetVariable`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrRootSdtmigDatasetsDatasetVariablesVarGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get SDTMIG Class Dataset List
pub async fn mdr_sdtmig_version_classes_class_datasets_get(configuration: &configuration::Configuration, version: &str, class: &str) -> Result<models::SdtmigClassDatasets, Error<MdrSdtmigVersionClassesClassDatasetsGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_version = version;
    let p_path_class = class;

    let uri_str = format!("{}/mdr/sdtmig/{version}/classes/{class}/datasets", configuration.base_path, version=crate::apis::urlencode(p_path_version), class=crate::apis::urlencode(p_path_class));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SdtmigClassDatasets`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SdtmigClassDatasets`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrSdtmigVersionClassesClassDatasetsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get SDTMIG Class
pub async fn mdr_sdtmig_version_classes_class_get(configuration: &configuration::Configuration, version: &str, class: &str) -> Result<models::SdtmigClass, Error<MdrSdtmigVersionClassesClassGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_version = version;
    let p_path_class = class;

    let uri_str = format!("{}/mdr/sdtmig/{version}/classes/{class}", configuration.base_path, version=crate::apis::urlencode(p_path_version), class=crate::apis::urlencode(p_path_class));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SdtmigClass`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SdtmigClass`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrSdtmigVersionClassesClassGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get SDTMIG Class List
pub async fn mdr_sdtmig_version_classes_get(configuration: &configuration::Configuration, version: &str) -> Result<models::SdtmigClasses, Error<MdrSdtmigVersionClassesGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_version = version;

    let uri_str = format!("{}/mdr/sdtmig/{version}/classes", configuration.base_path, version=crate::apis::urlencode(p_path_version));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SdtmigClasses`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SdtmigClasses`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrSdtmigVersionClassesGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get SDTMIG Dataset
pub async fn mdr_sdtmig_version_datasets_dataset_get(configuration: &configuration::Configuration, version: &str, dataset: &str) -> Result<models::SdtmigDataset, Error<MdrSdtmigVersionDatasetsDatasetGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_version = version;
    let p_path_dataset = dataset;

    let uri_str = format!("{}/mdr/sdtmig/{version}/datasets/{dataset}", configuration.base_path, version=crate::apis::urlencode(p_path_version), dataset=crate::apis::urlencode(p_path_dataset));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SdtmigDataset`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SdtmigDataset`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrSdtmigVersionDatasetsDatasetGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get SDTMIG Dataset Variable List
pub async fn mdr_sdtmig_version_datasets_dataset_variables_get(configuration: &configuration::Configuration, version: &str, dataset: &str) -> Result<models::SdtmigDatasetVariables, Error<MdrSdtmigVersionDatasetsDatasetVariablesGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_version = version;
    let p_path_dataset = dataset;

    let uri_str = format!("{}/mdr/sdtmig/{version}/datasets/{dataset}/variables", configuration.base_path, version=crate::apis::urlencode(p_path_version), dataset=crate::apis::urlencode(p_path_dataset));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SdtmigDatasetVariables`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SdtmigDatasetVariables`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrSdtmigVersionDatasetsDatasetVariablesGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get SDTMIG Dataset Variable
pub async fn mdr_sdtmig_version_datasets_dataset_variables_var_get(configuration: &configuration::Configuration, version: &str, dataset: &str, var: &str) -> Result<models::SdtmigDatasetVariable, Error<MdrSdtmigVersionDatasetsDatasetVariablesVarGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_version = version;
    let p_path_dataset = dataset;
    let p_path_var = var;

    let uri_str = format!("{}/mdr/sdtmig/{version}/datasets/{dataset}/variables/{var}", configuration.base_path, version=crate::apis::urlencode(p_path_version), dataset=crate::apis::urlencode(p_path_dataset), var=crate::apis::urlencode(p_path_var));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SdtmigDatasetVariable`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SdtmigDatasetVariable`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrSdtmigVersionDatasetsDatasetVariablesVarGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get SDTMIG Dataset List
pub async fn mdr_sdtmig_version_datasets_get(configuration: &configuration::Configuration, version: &str) -> Result<models::SdtmigDatasets, Error<MdrSdtmigVersionDatasetsGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_version = version;

    let uri_str = format!("{}/mdr/sdtmig/{version}/datasets", configuration.base_path, version=crate::apis::urlencode(p_path_version));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SdtmigDatasets`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SdtmigDatasets`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrSdtmigVersionDatasetsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get SDTMIG product
pub async fn mdr_sdtmig_version_get(configuration: &configuration::Configuration, version: &str) -> Result<models::SdtmigProduct, Error<MdrSdtmigVersionGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_version = version;

    let uri_str = format!("{}/mdr/sdtmig/{version}", configuration.base_path, version=crate::apis::urlencode(p_path_version));
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SdtmigProduct`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SdtmigProduct`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrSdtmigVersionGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}


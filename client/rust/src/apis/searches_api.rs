/*
 * CDISC Library API
 *
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`mdr_search_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrSearchGetError {
    Status400(models::DefaultErrorResponse),
    Status401(models::DefaultErrorResponse),
    Status403(models::DefaultErrorResponse),
    Status404(models::DefaultErrorResponse),
    Status405(models::DefaultErrorResponse),
    Status406(models::DefaultErrorResponse),
    Status500(models::DefaultErrorResponse),
    Status503(models::DefaultErrorResponse),
    Status504(models::DefaultErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_search_scopes_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrSearchScopesGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`mdr_search_scopes_scope_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MdrSearchScopesScopeGetError {
    UnknownValue(serde_json::Value),
}


/// Get Search Results Across CDISC Library
pub async fn mdr_search_get(configuration: &configuration::Configuration, q: &str, highlight: Option<&str>, start: Option<f64>, page_size: Option<f64>, class: Option<&str>, codelist: Option<&str>, concept_id: Option<&str>, core: Option<&str>, data_structure: Option<&str>, dataset_structure: Option<&str>, definition: Option<&str>, description: Option<&str>, domain: Option<&str>, effective_date: Option<&str>, extensible: Option<&str>, href: Option<&str>, label: Option<&str>, measure_type: Option<&str>, name: Option<&str>, preferred_term: Option<&str>, product: Option<&str>, product_group: Option<&str>, registration_status: Option<&str>, role_description: Option<&str>, sdtm_target: Option<&str>, simple_datatype: Option<&str>, submission_value: Option<&str>, synonyms: Option<&str>, r#type: Option<&str>, ui_href: Option<&str>, value_domain: Option<&str>, variable_set: Option<&str>, version: Option<&str>) -> Result<models::DefaultSearchResponse, Error<MdrSearchGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_query_q = q;
    let p_query_highlight = highlight;
    let p_query_start = start;
    let p_query_page_size = page_size;
    let p_query_class = class;
    let p_query_codelist = codelist;
    let p_query_concept_id = concept_id;
    let p_query_core = core;
    let p_query_data_structure = data_structure;
    let p_query_dataset_structure = dataset_structure;
    let p_query_definition = definition;
    let p_query_description = description;
    let p_query_domain = domain;
    let p_query_effective_date = effective_date;
    let p_query_extensible = extensible;
    let p_query_href = href;
    let p_query_label = label;
    let p_query_measure_type = measure_type;
    let p_query_name = name;
    let p_query_preferred_term = preferred_term;
    let p_query_product = product;
    let p_query_product_group = product_group;
    let p_query_registration_status = registration_status;
    let p_query_role_description = role_description;
    let p_query_sdtm_target = sdtm_target;
    let p_query_simple_datatype = simple_datatype;
    let p_query_submission_value = submission_value;
    let p_query_synonyms = synonyms;
    let p_query_type = r#type;
    let p_query_ui_href = ui_href;
    let p_query_value_domain = value_domain;
    let p_query_variable_set = variable_set;
    let p_query_version = version;

    let uri_str = format!("{}/mdr/search", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    req_builder = req_builder.query(&[("q", &p_query_q.to_string())]);
    if let Some(ref param_value) = p_query_highlight {
        req_builder = req_builder.query(&[("highlight", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_start {
        req_builder = req_builder.query(&[("start", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_page_size {
        req_builder = req_builder.query(&[("pageSize", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_class {
        req_builder = req_builder.query(&[("class", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_codelist {
        req_builder = req_builder.query(&[("codelist", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_concept_id {
        req_builder = req_builder.query(&[("conceptId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_core {
        req_builder = req_builder.query(&[("core", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_data_structure {
        req_builder = req_builder.query(&[("dataStructure", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_dataset_structure {
        req_builder = req_builder.query(&[("datasetStructure", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_definition {
        req_builder = req_builder.query(&[("definition", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_description {
        req_builder = req_builder.query(&[("description", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_domain {
        req_builder = req_builder.query(&[("domain", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_effective_date {
        req_builder = req_builder.query(&[("effectiveDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_extensible {
        req_builder = req_builder.query(&[("extensible", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_href {
        req_builder = req_builder.query(&[("href", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_label {
        req_builder = req_builder.query(&[("label", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_measure_type {
        req_builder = req_builder.query(&[("measureType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_name {
        req_builder = req_builder.query(&[("name", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_preferred_term {
        req_builder = req_builder.query(&[("preferredTerm", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_product {
        req_builder = req_builder.query(&[("product", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_product_group {
        req_builder = req_builder.query(&[("productGroup", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_registration_status {
        req_builder = req_builder.query(&[("registrationStatus", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_role_description {
        req_builder = req_builder.query(&[("roleDescription", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_sdtm_target {
        req_builder = req_builder.query(&[("sdtmTarget", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_simple_datatype {
        req_builder = req_builder.query(&[("simpleDatatype", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_submission_value {
        req_builder = req_builder.query(&[("submissionValue", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_synonyms {
        req_builder = req_builder.query(&[("synonyms", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_type {
        req_builder = req_builder.query(&[("type", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_ui_href {
        req_builder = req_builder.query(&[("uiHref", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_value_domain {
        req_builder = req_builder.query(&[("valueDomain", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_variable_set {
        req_builder = req_builder.query(&[("variableSet", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_query_version {
        req_builder = req_builder.query(&[("version", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DefaultSearchResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DefaultSearchResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrSearchGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get Search Results Across CDISC Library
pub async fn mdr_search_scopes_get(configuration: &configuration::Configuration, ) -> Result<models::MdrSearchScopesGet200Response, Error<MdrSearchScopesGetError>> {

    let uri_str = format!("{}/mdr/search/scopes", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::MdrSearchScopesGet200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::MdrSearchScopesGet200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrSearchScopesGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Get Search Results Limited to Scope
pub async fn mdr_search_scopes_scope_get(configuration: &configuration::Configuration, scope: models::DefaultSearchScopes) -> Result<models::ScopeValues, Error<MdrSearchScopesScopeGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_path_scope = scope;

    let uri_str = format!("{}/mdr/search/scopes/{scope}", configuration.base_path, scope=p_path_scope.to_string());
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref auth_conf) = configuration.basic_auth {
        req_builder = req_builder.basic_auth(auth_conf.0.to_owned(), auth_conf.1.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ScopeValues`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ScopeValues`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<MdrSearchScopesScopeGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}


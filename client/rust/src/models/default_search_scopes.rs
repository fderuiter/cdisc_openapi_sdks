/*
 * CDISC Library API
 *
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DefaultSearchScopes {
    #[serde(rename = "class")]
    Class,
    #[serde(rename = "codelist")]
    Codelist,
    #[serde(rename = "conceptId")]
    ConceptId,
    #[serde(rename = "core")]
    Core,
    #[serde(rename = "dataStructure")]
    DataStructure,
    #[serde(rename = "datasetStructure")]
    DatasetStructure,
    #[serde(rename = "definition")]
    Definition,
    #[serde(rename = "description")]
    Description,
    #[serde(rename = "domain")]
    Domain,
    #[serde(rename = "effectiveDate")]
    EffectiveDate,
    #[serde(rename = "extensible")]
    Extensible,
    #[serde(rename = "href")]
    Href,
    #[serde(rename = "label")]
    Label,
    #[serde(rename = "measureType")]
    MeasureType,
    #[serde(rename = "name")]
    Name,
    #[serde(rename = "preferredTerm")]
    PreferredTerm,
    #[serde(rename = "product")]
    Product,
    #[serde(rename = "productGroup")]
    ProductGroup,
    #[serde(rename = "registrationStatus")]
    RegistrationStatus,
    #[serde(rename = "roleDescription")]
    RoleDescription,
    #[serde(rename = "sdtmTarget")]
    SdtmTarget,
    #[serde(rename = "simpleDatatype")]
    SimpleDatatype,
    #[serde(rename = "submissionValue")]
    SubmissionValue,
    #[serde(rename = "synonyms")]
    Synonyms,
    #[serde(rename = "type")]
    Type,
    #[serde(rename = "uiHref")]
    UiHref,
    #[serde(rename = "valueDomain")]
    ValueDomain,
    #[serde(rename = "variableSet")]
    VariableSet,
    #[serde(rename = "version")]
    Version,

}

impl std::fmt::Display for DefaultSearchScopes {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Class => write!(f, "class"),
            Self::Codelist => write!(f, "codelist"),
            Self::ConceptId => write!(f, "conceptId"),
            Self::Core => write!(f, "core"),
            Self::DataStructure => write!(f, "dataStructure"),
            Self::DatasetStructure => write!(f, "datasetStructure"),
            Self::Definition => write!(f, "definition"),
            Self::Description => write!(f, "description"),
            Self::Domain => write!(f, "domain"),
            Self::EffectiveDate => write!(f, "effectiveDate"),
            Self::Extensible => write!(f, "extensible"),
            Self::Href => write!(f, "href"),
            Self::Label => write!(f, "label"),
            Self::MeasureType => write!(f, "measureType"),
            Self::Name => write!(f, "name"),
            Self::PreferredTerm => write!(f, "preferredTerm"),
            Self::Product => write!(f, "product"),
            Self::ProductGroup => write!(f, "productGroup"),
            Self::RegistrationStatus => write!(f, "registrationStatus"),
            Self::RoleDescription => write!(f, "roleDescription"),
            Self::SdtmTarget => write!(f, "sdtmTarget"),
            Self::SimpleDatatype => write!(f, "simpleDatatype"),
            Self::SubmissionValue => write!(f, "submissionValue"),
            Self::Synonyms => write!(f, "synonyms"),
            Self::Type => write!(f, "type"),
            Self::UiHref => write!(f, "uiHref"),
            Self::ValueDomain => write!(f, "valueDomain"),
            Self::VariableSet => write!(f, "variableSet"),
            Self::Version => write!(f, "version"),
        }
    }
}

impl Default for DefaultSearchScopes {
    fn default() -> DefaultSearchScopes {
        Self::Class
    }
}


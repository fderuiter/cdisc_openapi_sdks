// tslint:disable
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    DefaultErrorResponse,
    DefaultErrorResponseFromJSON,
    DefaultErrorResponseToJSON,
    ExportSendigDatasetsTable,
    ExportSendigDatasetsTableFromJSON,
    ExportSendigDatasetsTableToJSON,
    ExportSendigVariablesTable,
    ExportSendigVariablesTableFromJSON,
    ExportSendigVariablesTableToJSON,
    ExportSendigWorkbook,
    ExportSendigWorkbookFromJSON,
    ExportSendigWorkbookToJSON,
    RootSendigDatasetVariable,
    RootSendigDatasetVariableFromJSON,
    RootSendigDatasetVariableToJSON,
    SendigClass,
    SendigClassFromJSON,
    SendigClassToJSON,
    SendigClassDatasets,
    SendigClassDatasetsFromJSON,
    SendigClassDatasetsToJSON,
    SendigClasses,
    SendigClassesFromJSON,
    SendigClassesToJSON,
    SendigDataset,
    SendigDatasetFromJSON,
    SendigDatasetToJSON,
    SendigDatasetVariable,
    SendigDatasetVariableFromJSON,
    SendigDatasetVariableToJSON,
    SendigDatasetVariables,
    SendigDatasetVariablesFromJSON,
    SendigDatasetVariablesToJSON,
    SendigDatasets,
    SendigDatasetsFromJSON,
    SendigDatasetsToJSON,
    SendigProduct,
    SendigProductFromJSON,
    SendigProductToJSON,
    XmlRootSendigDatasetVariable,
    XmlRootSendigDatasetVariableFromJSON,
    XmlRootSendigDatasetVariableToJSON,
    XmlSendigClass,
    XmlSendigClassFromJSON,
    XmlSendigClassToJSON,
    XmlSendigClassDatasets,
    XmlSendigClassDatasetsFromJSON,
    XmlSendigClassDatasetsToJSON,
    XmlSendigClasses,
    XmlSendigClassesFromJSON,
    XmlSendigClassesToJSON,
    XmlSendigDataset,
    XmlSendigDatasetFromJSON,
    XmlSendigDatasetToJSON,
    XmlSendigDatasetVariable,
    XmlSendigDatasetVariableFromJSON,
    XmlSendigDatasetVariableToJSON,
    XmlSendigDatasetVariables,
    XmlSendigDatasetVariablesFromJSON,
    XmlSendigDatasetVariablesToJSON,
    XmlSendigDatasets,
    XmlSendigDatasetsFromJSON,
    XmlSendigDatasetsToJSON,
    XmlSendigProduct,
    XmlSendigProductFromJSON,
    XmlSendigProductToJSON,
} from '../models';

export interface MdrRootSendigDatasetsDatasetVariablesVarGetRequest {
    dataset: string;
    _var: string;
}

export interface MdrSendigVersionClassesClassDatasetsGetRequest {
    version: string;
    _class: string;
}

export interface MdrSendigVersionClassesClassGetRequest {
    version: string;
    _class: string;
}

export interface MdrSendigVersionClassesGetRequest {
    version: string;
}

export interface MdrSendigVersionDatasetsDatasetGetRequest {
    version: string;
    dataset: string;
}

export interface MdrSendigVersionDatasetsDatasetVariablesGetRequest {
    version: string;
    dataset: string;
}

export interface MdrSendigVersionDatasetsDatasetVariablesVarGetRequest {
    version: string;
    dataset: string;
    _var: string;
}

export interface MdrSendigVersionDatasetsGetRequest {
    version: string;
}

export interface MdrSendigVersionGetRequest {
    version: string;
}


/**
 * Get Root SENDIG Dataset Variable
 */
function mdrRootSendigDatasetsDatasetVariablesVarGetRaw<T>(requestParameters: MdrRootSendigDatasetsDatasetVariablesVarGetRequest, requestConfig: runtime.TypedQueryConfig<T, RootSendigDatasetVariable> = {}): QueryConfig<T> {
    if (requestParameters.dataset === null || requestParameters.dataset === undefined) {
        throw new runtime.RequiredError('dataset','Required parameter requestParameters.dataset was null or undefined when calling mdrRootSendigDatasetsDatasetVariablesVarGet.');
    }

    if (requestParameters._var === null || requestParameters._var === undefined) {
        throw new runtime.RequiredError('_var','Required parameter requestParameters._var was null or undefined when calling mdrRootSendigDatasetsDatasetVariablesVarGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/root/sendig/datasets/{dataset}/variables/{var}`.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters.dataset))).replace(`{${"var"}}`, encodeURIComponent(String(requestParameters._var))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(RootSendigDatasetVariableFromJSON(body), text);
    }

    return config;
}

/**
* Get Root SENDIG Dataset Variable
*/
export function mdrRootSendigDatasetsDatasetVariablesVarGet<T>(requestParameters: MdrRootSendigDatasetsDatasetVariablesVarGetRequest, requestConfig?: runtime.TypedQueryConfig<T, RootSendigDatasetVariable>): QueryConfig<T> {
    return mdrRootSendigDatasetsDatasetVariablesVarGetRaw(requestParameters, requestConfig);
}

/**
 * Get SENDIG Class Dataset List
 */
function mdrSendigVersionClassesClassDatasetsGetRaw<T>(requestParameters: MdrSendigVersionClassesClassDatasetsGetRequest, requestConfig: runtime.TypedQueryConfig<T, SendigClassDatasets> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSendigVersionClassesClassDatasetsGet.');
    }

    if (requestParameters._class === null || requestParameters._class === undefined) {
        throw new runtime.RequiredError('_class','Required parameter requestParameters._class was null or undefined when calling mdrSendigVersionClassesClassDatasetsGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sendig/{version}/classes/{class}/datasets`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"class"}}`, encodeURIComponent(String(requestParameters._class))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SendigClassDatasetsFromJSON(body), text);
    }

    return config;
}

/**
* Get SENDIG Class Dataset List
*/
export function mdrSendigVersionClassesClassDatasetsGet<T>(requestParameters: MdrSendigVersionClassesClassDatasetsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SendigClassDatasets>): QueryConfig<T> {
    return mdrSendigVersionClassesClassDatasetsGetRaw(requestParameters, requestConfig);
}

/**
 * Get SENDIG Class
 */
function mdrSendigVersionClassesClassGetRaw<T>(requestParameters: MdrSendigVersionClassesClassGetRequest, requestConfig: runtime.TypedQueryConfig<T, SendigClass> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSendigVersionClassesClassGet.');
    }

    if (requestParameters._class === null || requestParameters._class === undefined) {
        throw new runtime.RequiredError('_class','Required parameter requestParameters._class was null or undefined when calling mdrSendigVersionClassesClassGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sendig/{version}/classes/{class}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"class"}}`, encodeURIComponent(String(requestParameters._class))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SendigClassFromJSON(body), text);
    }

    return config;
}

/**
* Get SENDIG Class
*/
export function mdrSendigVersionClassesClassGet<T>(requestParameters: MdrSendigVersionClassesClassGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SendigClass>): QueryConfig<T> {
    return mdrSendigVersionClassesClassGetRaw(requestParameters, requestConfig);
}

/**
 * Get SENDIG Class List
 */
function mdrSendigVersionClassesGetRaw<T>(requestParameters: MdrSendigVersionClassesGetRequest, requestConfig: runtime.TypedQueryConfig<T, SendigClasses> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSendigVersionClassesGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sendig/{version}/classes`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SendigClassesFromJSON(body), text);
    }

    return config;
}

/**
* Get SENDIG Class List
*/
export function mdrSendigVersionClassesGet<T>(requestParameters: MdrSendigVersionClassesGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SendigClasses>): QueryConfig<T> {
    return mdrSendigVersionClassesGetRaw(requestParameters, requestConfig);
}

/**
 * Get SENDIG Dataset
 */
function mdrSendigVersionDatasetsDatasetGetRaw<T>(requestParameters: MdrSendigVersionDatasetsDatasetGetRequest, requestConfig: runtime.TypedQueryConfig<T, SendigDataset> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSendigVersionDatasetsDatasetGet.');
    }

    if (requestParameters.dataset === null || requestParameters.dataset === undefined) {
        throw new runtime.RequiredError('dataset','Required parameter requestParameters.dataset was null or undefined when calling mdrSendigVersionDatasetsDatasetGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sendig/{version}/datasets/{dataset}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters.dataset))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SendigDatasetFromJSON(body), text);
    }

    return config;
}

/**
* Get SENDIG Dataset
*/
export function mdrSendigVersionDatasetsDatasetGet<T>(requestParameters: MdrSendigVersionDatasetsDatasetGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SendigDataset>): QueryConfig<T> {
    return mdrSendigVersionDatasetsDatasetGetRaw(requestParameters, requestConfig);
}

/**
 * Get SENDIG Dataset Variable List
 */
function mdrSendigVersionDatasetsDatasetVariablesGetRaw<T>(requestParameters: MdrSendigVersionDatasetsDatasetVariablesGetRequest, requestConfig: runtime.TypedQueryConfig<T, SendigDatasetVariables> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSendigVersionDatasetsDatasetVariablesGet.');
    }

    if (requestParameters.dataset === null || requestParameters.dataset === undefined) {
        throw new runtime.RequiredError('dataset','Required parameter requestParameters.dataset was null or undefined when calling mdrSendigVersionDatasetsDatasetVariablesGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sendig/{version}/datasets/{dataset}/variables`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters.dataset))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SendigDatasetVariablesFromJSON(body), text);
    }

    return config;
}

/**
* Get SENDIG Dataset Variable List
*/
export function mdrSendigVersionDatasetsDatasetVariablesGet<T>(requestParameters: MdrSendigVersionDatasetsDatasetVariablesGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SendigDatasetVariables>): QueryConfig<T> {
    return mdrSendigVersionDatasetsDatasetVariablesGetRaw(requestParameters, requestConfig);
}

/**
 * Get SENDIG Dataset Variable
 */
function mdrSendigVersionDatasetsDatasetVariablesVarGetRaw<T>(requestParameters: MdrSendigVersionDatasetsDatasetVariablesVarGetRequest, requestConfig: runtime.TypedQueryConfig<T, SendigDatasetVariable> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSendigVersionDatasetsDatasetVariablesVarGet.');
    }

    if (requestParameters.dataset === null || requestParameters.dataset === undefined) {
        throw new runtime.RequiredError('dataset','Required parameter requestParameters.dataset was null or undefined when calling mdrSendigVersionDatasetsDatasetVariablesVarGet.');
    }

    if (requestParameters._var === null || requestParameters._var === undefined) {
        throw new runtime.RequiredError('_var','Required parameter requestParameters._var was null or undefined when calling mdrSendigVersionDatasetsDatasetVariablesVarGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sendig/{version}/datasets/{dataset}/variables/{var}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters.dataset))).replace(`{${"var"}}`, encodeURIComponent(String(requestParameters._var))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SendigDatasetVariableFromJSON(body), text);
    }

    return config;
}

/**
* Get SENDIG Dataset Variable
*/
export function mdrSendigVersionDatasetsDatasetVariablesVarGet<T>(requestParameters: MdrSendigVersionDatasetsDatasetVariablesVarGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SendigDatasetVariable>): QueryConfig<T> {
    return mdrSendigVersionDatasetsDatasetVariablesVarGetRaw(requestParameters, requestConfig);
}

/**
 * Get SENDIG Dataset List
 */
function mdrSendigVersionDatasetsGetRaw<T>(requestParameters: MdrSendigVersionDatasetsGetRequest, requestConfig: runtime.TypedQueryConfig<T, SendigDatasets> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSendigVersionDatasetsGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sendig/{version}/datasets`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SendigDatasetsFromJSON(body), text);
    }

    return config;
}

/**
* Get SENDIG Dataset List
*/
export function mdrSendigVersionDatasetsGet<T>(requestParameters: MdrSendigVersionDatasetsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SendigDatasets>): QueryConfig<T> {
    return mdrSendigVersionDatasetsGetRaw(requestParameters, requestConfig);
}

/**
 * Get SENDIG product
 */
function mdrSendigVersionGetRaw<T>(requestParameters: MdrSendigVersionGetRequest, requestConfig: runtime.TypedQueryConfig<T, SendigProduct> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSendigVersionGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sendig/{version}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SendigProductFromJSON(body), text);
    }

    return config;
}

/**
* Get SENDIG product
*/
export function mdrSendigVersionGet<T>(requestParameters: MdrSendigVersionGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SendigProduct>): QueryConfig<T> {
    return mdrSendigVersionGetRaw(requestParameters, requestConfig);
}


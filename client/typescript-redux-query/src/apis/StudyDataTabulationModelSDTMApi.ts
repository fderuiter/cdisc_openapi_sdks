// tslint:disable
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    DefaultErrorResponse,
    DefaultErrorResponseFromJSON,
    DefaultErrorResponseToJSON,
    ExportSdtmDatasetsTable,
    ExportSdtmDatasetsTableFromJSON,
    ExportSdtmDatasetsTableToJSON,
    ExportSdtmVariablesTable,
    ExportSdtmVariablesTableFromJSON,
    ExportSdtmVariablesTableToJSON,
    ExportSdtmWorkbook,
    ExportSdtmWorkbookFromJSON,
    ExportSdtmWorkbookToJSON,
    RootSdtmClassVariable,
    RootSdtmClassVariableFromJSON,
    RootSdtmClassVariableToJSON,
    RootSdtmDatasetVariable,
    RootSdtmDatasetVariableFromJSON,
    RootSdtmDatasetVariableToJSON,
    SdtmClass,
    SdtmClassFromJSON,
    SdtmClassToJSON,
    SdtmClassDatasets,
    SdtmClassDatasetsFromJSON,
    SdtmClassDatasetsToJSON,
    SdtmClassVariable,
    SdtmClassVariableFromJSON,
    SdtmClassVariableToJSON,
    SdtmClassVariables,
    SdtmClassVariablesFromJSON,
    SdtmClassVariablesToJSON,
    SdtmClasses,
    SdtmClassesFromJSON,
    SdtmClassesToJSON,
    SdtmDataset,
    SdtmDatasetFromJSON,
    SdtmDatasetToJSON,
    SdtmDatasetVariable,
    SdtmDatasetVariableFromJSON,
    SdtmDatasetVariableToJSON,
    SdtmDatasetVariables,
    SdtmDatasetVariablesFromJSON,
    SdtmDatasetVariablesToJSON,
    SdtmDatasets,
    SdtmDatasetsFromJSON,
    SdtmDatasetsToJSON,
    SdtmProduct,
    SdtmProductFromJSON,
    SdtmProductToJSON,
    XmlRootSdtmClassVariable,
    XmlRootSdtmClassVariableFromJSON,
    XmlRootSdtmClassVariableToJSON,
    XmlRootSdtmDatasetVariable,
    XmlRootSdtmDatasetVariableFromJSON,
    XmlRootSdtmDatasetVariableToJSON,
    XmlSdtmClass,
    XmlSdtmClassFromJSON,
    XmlSdtmClassToJSON,
    XmlSdtmClassDatasets,
    XmlSdtmClassDatasetsFromJSON,
    XmlSdtmClassDatasetsToJSON,
    XmlSdtmClassVariable,
    XmlSdtmClassVariableFromJSON,
    XmlSdtmClassVariableToJSON,
    XmlSdtmClassVariables,
    XmlSdtmClassVariablesFromJSON,
    XmlSdtmClassVariablesToJSON,
    XmlSdtmClasses,
    XmlSdtmClassesFromJSON,
    XmlSdtmClassesToJSON,
    XmlSdtmDataset,
    XmlSdtmDatasetFromJSON,
    XmlSdtmDatasetToJSON,
    XmlSdtmDatasetVariable,
    XmlSdtmDatasetVariableFromJSON,
    XmlSdtmDatasetVariableToJSON,
    XmlSdtmDatasetVariables,
    XmlSdtmDatasetVariablesFromJSON,
    XmlSdtmDatasetVariablesToJSON,
    XmlSdtmDatasets,
    XmlSdtmDatasetsFromJSON,
    XmlSdtmDatasetsToJSON,
    XmlSdtmProduct,
    XmlSdtmProductFromJSON,
    XmlSdtmProductToJSON,
} from '../models';

export interface MdrRootSdtmClassesClassVariablesVarGetRequest {
    _class: string;
    _var: string;
}

export interface MdrRootSdtmDatasetsDatasetVariablesVarGetRequest {
    dataset: string;
    _var: string;
}

export interface MdrSdtmVersionClassesClassDatasetsGetRequest {
    version: string;
    _class: string;
}

export interface MdrSdtmVersionClassesClassGetRequest {
    version: string;
    _class: string;
}

export interface MdrSdtmVersionClassesClassVariablesGetRequest {
    version: string;
    _class: string;
}

export interface MdrSdtmVersionClassesClassVariablesVarGetRequest {
    version: string;
    _class: string;
    _var: string;
}

export interface MdrSdtmVersionClassesGetRequest {
    version: string;
}

export interface MdrSdtmVersionDatasetsDatasetGetRequest {
    version: string;
    dataset: string;
}

export interface MdrSdtmVersionDatasetsDatasetVariablesGetRequest {
    version: string;
    dataset: string;
}

export interface MdrSdtmVersionDatasetsDatasetVariablesVarGetRequest {
    version: string;
    dataset: string;
    _var: string;
}

export interface MdrSdtmVersionDatasetsGetRequest {
    version: string;
}

export interface MdrSdtmVersionGetRequest {
    version: string;
}


/**
 * Get Root of SDTM Class Variable
 */
function mdrRootSdtmClassesClassVariablesVarGetRaw<T>(requestParameters: MdrRootSdtmClassesClassVariablesVarGetRequest, requestConfig: runtime.TypedQueryConfig<T, RootSdtmClassVariable> = {}): QueryConfig<T> {
    if (requestParameters._class === null || requestParameters._class === undefined) {
        throw new runtime.RequiredError('_class','Required parameter requestParameters._class was null or undefined when calling mdrRootSdtmClassesClassVariablesVarGet.');
    }

    if (requestParameters._var === null || requestParameters._var === undefined) {
        throw new runtime.RequiredError('_var','Required parameter requestParameters._var was null or undefined when calling mdrRootSdtmClassesClassVariablesVarGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/root/sdtm/classes/{class}/variables/{var}`.replace(`{${"class"}}`, encodeURIComponent(String(requestParameters._class))).replace(`{${"var"}}`, encodeURIComponent(String(requestParameters._var))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(RootSdtmClassVariableFromJSON(body), text);
    }

    return config;
}

/**
* Get Root of SDTM Class Variable
*/
export function mdrRootSdtmClassesClassVariablesVarGet<T>(requestParameters: MdrRootSdtmClassesClassVariablesVarGetRequest, requestConfig?: runtime.TypedQueryConfig<T, RootSdtmClassVariable>): QueryConfig<T> {
    return mdrRootSdtmClassesClassVariablesVarGetRaw(requestParameters, requestConfig);
}

/**
 * Get Root SDTM Dataset Variable
 */
function mdrRootSdtmDatasetsDatasetVariablesVarGetRaw<T>(requestParameters: MdrRootSdtmDatasetsDatasetVariablesVarGetRequest, requestConfig: runtime.TypedQueryConfig<T, RootSdtmDatasetVariable> = {}): QueryConfig<T> {
    if (requestParameters.dataset === null || requestParameters.dataset === undefined) {
        throw new runtime.RequiredError('dataset','Required parameter requestParameters.dataset was null or undefined when calling mdrRootSdtmDatasetsDatasetVariablesVarGet.');
    }

    if (requestParameters._var === null || requestParameters._var === undefined) {
        throw new runtime.RequiredError('_var','Required parameter requestParameters._var was null or undefined when calling mdrRootSdtmDatasetsDatasetVariablesVarGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/root/sdtm/datasets/{dataset}/variables/{var}`.replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters.dataset))).replace(`{${"var"}}`, encodeURIComponent(String(requestParameters._var))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(RootSdtmDatasetVariableFromJSON(body), text);
    }

    return config;
}

/**
* Get Root SDTM Dataset Variable
*/
export function mdrRootSdtmDatasetsDatasetVariablesVarGet<T>(requestParameters: MdrRootSdtmDatasetsDatasetVariablesVarGetRequest, requestConfig?: runtime.TypedQueryConfig<T, RootSdtmDatasetVariable>): QueryConfig<T> {
    return mdrRootSdtmDatasetsDatasetVariablesVarGetRaw(requestParameters, requestConfig);
}

/**
 * Get SDTM Class Dataset List
 */
function mdrSdtmVersionClassesClassDatasetsGetRaw<T>(requestParameters: MdrSdtmVersionClassesClassDatasetsGetRequest, requestConfig: runtime.TypedQueryConfig<T, SdtmClassDatasets> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSdtmVersionClassesClassDatasetsGet.');
    }

    if (requestParameters._class === null || requestParameters._class === undefined) {
        throw new runtime.RequiredError('_class','Required parameter requestParameters._class was null or undefined when calling mdrSdtmVersionClassesClassDatasetsGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sdtm/{version}/classes/{class}/datasets`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"class"}}`, encodeURIComponent(String(requestParameters._class))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SdtmClassDatasetsFromJSON(body), text);
    }

    return config;
}

/**
* Get SDTM Class Dataset List
*/
export function mdrSdtmVersionClassesClassDatasetsGet<T>(requestParameters: MdrSdtmVersionClassesClassDatasetsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SdtmClassDatasets>): QueryConfig<T> {
    return mdrSdtmVersionClassesClassDatasetsGetRaw(requestParameters, requestConfig);
}

/**
 * Get SDTM Class
 */
function mdrSdtmVersionClassesClassGetRaw<T>(requestParameters: MdrSdtmVersionClassesClassGetRequest, requestConfig: runtime.TypedQueryConfig<T, SdtmClass> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSdtmVersionClassesClassGet.');
    }

    if (requestParameters._class === null || requestParameters._class === undefined) {
        throw new runtime.RequiredError('_class','Required parameter requestParameters._class was null or undefined when calling mdrSdtmVersionClassesClassGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sdtm/{version}/classes/{class}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"class"}}`, encodeURIComponent(String(requestParameters._class))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SdtmClassFromJSON(body), text);
    }

    return config;
}

/**
* Get SDTM Class
*/
export function mdrSdtmVersionClassesClassGet<T>(requestParameters: MdrSdtmVersionClassesClassGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SdtmClass>): QueryConfig<T> {
    return mdrSdtmVersionClassesClassGetRaw(requestParameters, requestConfig);
}

/**
 * Get SDTM Class Variable List
 */
function mdrSdtmVersionClassesClassVariablesGetRaw<T>(requestParameters: MdrSdtmVersionClassesClassVariablesGetRequest, requestConfig: runtime.TypedQueryConfig<T, SdtmClassVariables> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSdtmVersionClassesClassVariablesGet.');
    }

    if (requestParameters._class === null || requestParameters._class === undefined) {
        throw new runtime.RequiredError('_class','Required parameter requestParameters._class was null or undefined when calling mdrSdtmVersionClassesClassVariablesGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sdtm/{version}/classes/{class}/variables`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"class"}}`, encodeURIComponent(String(requestParameters._class))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SdtmClassVariablesFromJSON(body), text);
    }

    return config;
}

/**
* Get SDTM Class Variable List
*/
export function mdrSdtmVersionClassesClassVariablesGet<T>(requestParameters: MdrSdtmVersionClassesClassVariablesGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SdtmClassVariables>): QueryConfig<T> {
    return mdrSdtmVersionClassesClassVariablesGetRaw(requestParameters, requestConfig);
}

/**
 * Get SDTM Class Variable
 */
function mdrSdtmVersionClassesClassVariablesVarGetRaw<T>(requestParameters: MdrSdtmVersionClassesClassVariablesVarGetRequest, requestConfig: runtime.TypedQueryConfig<T, SdtmClassVariable> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSdtmVersionClassesClassVariablesVarGet.');
    }

    if (requestParameters._class === null || requestParameters._class === undefined) {
        throw new runtime.RequiredError('_class','Required parameter requestParameters._class was null or undefined when calling mdrSdtmVersionClassesClassVariablesVarGet.');
    }

    if (requestParameters._var === null || requestParameters._var === undefined) {
        throw new runtime.RequiredError('_var','Required parameter requestParameters._var was null or undefined when calling mdrSdtmVersionClassesClassVariablesVarGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sdtm/{version}/classes/{class}/variables/{var}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"class"}}`, encodeURIComponent(String(requestParameters._class))).replace(`{${"var"}}`, encodeURIComponent(String(requestParameters._var))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SdtmClassVariableFromJSON(body), text);
    }

    return config;
}

/**
* Get SDTM Class Variable
*/
export function mdrSdtmVersionClassesClassVariablesVarGet<T>(requestParameters: MdrSdtmVersionClassesClassVariablesVarGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SdtmClassVariable>): QueryConfig<T> {
    return mdrSdtmVersionClassesClassVariablesVarGetRaw(requestParameters, requestConfig);
}

/**
 * Get SDTM Class List
 */
function mdrSdtmVersionClassesGetRaw<T>(requestParameters: MdrSdtmVersionClassesGetRequest, requestConfig: runtime.TypedQueryConfig<T, SdtmClasses> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSdtmVersionClassesGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sdtm/{version}/classes`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SdtmClassesFromJSON(body), text);
    }

    return config;
}

/**
* Get SDTM Class List
*/
export function mdrSdtmVersionClassesGet<T>(requestParameters: MdrSdtmVersionClassesGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SdtmClasses>): QueryConfig<T> {
    return mdrSdtmVersionClassesGetRaw(requestParameters, requestConfig);
}

/**
 * Get SDTM Dataset
 */
function mdrSdtmVersionDatasetsDatasetGetRaw<T>(requestParameters: MdrSdtmVersionDatasetsDatasetGetRequest, requestConfig: runtime.TypedQueryConfig<T, SdtmDataset> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSdtmVersionDatasetsDatasetGet.');
    }

    if (requestParameters.dataset === null || requestParameters.dataset === undefined) {
        throw new runtime.RequiredError('dataset','Required parameter requestParameters.dataset was null or undefined when calling mdrSdtmVersionDatasetsDatasetGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sdtm/{version}/datasets/{dataset}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters.dataset))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SdtmDatasetFromJSON(body), text);
    }

    return config;
}

/**
* Get SDTM Dataset
*/
export function mdrSdtmVersionDatasetsDatasetGet<T>(requestParameters: MdrSdtmVersionDatasetsDatasetGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SdtmDataset>): QueryConfig<T> {
    return mdrSdtmVersionDatasetsDatasetGetRaw(requestParameters, requestConfig);
}

/**
 * Get SDTM Dataset Variable List
 */
function mdrSdtmVersionDatasetsDatasetVariablesGetRaw<T>(requestParameters: MdrSdtmVersionDatasetsDatasetVariablesGetRequest, requestConfig: runtime.TypedQueryConfig<T, SdtmDatasetVariables> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesGet.');
    }

    if (requestParameters.dataset === null || requestParameters.dataset === undefined) {
        throw new runtime.RequiredError('dataset','Required parameter requestParameters.dataset was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sdtm/{version}/datasets/{dataset}/variables`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters.dataset))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SdtmDatasetVariablesFromJSON(body), text);
    }

    return config;
}

/**
* Get SDTM Dataset Variable List
*/
export function mdrSdtmVersionDatasetsDatasetVariablesGet<T>(requestParameters: MdrSdtmVersionDatasetsDatasetVariablesGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SdtmDatasetVariables>): QueryConfig<T> {
    return mdrSdtmVersionDatasetsDatasetVariablesGetRaw(requestParameters, requestConfig);
}

/**
 * Get SDTM Dataset Variable
 */
function mdrSdtmVersionDatasetsDatasetVariablesVarGetRaw<T>(requestParameters: MdrSdtmVersionDatasetsDatasetVariablesVarGetRequest, requestConfig: runtime.TypedQueryConfig<T, SdtmDatasetVariable> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet.');
    }

    if (requestParameters.dataset === null || requestParameters.dataset === undefined) {
        throw new runtime.RequiredError('dataset','Required parameter requestParameters.dataset was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet.');
    }

    if (requestParameters._var === null || requestParameters._var === undefined) {
        throw new runtime.RequiredError('_var','Required parameter requestParameters._var was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sdtm/{version}/datasets/{dataset}/variables/{var}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"dataset"}}`, encodeURIComponent(String(requestParameters.dataset))).replace(`{${"var"}}`, encodeURIComponent(String(requestParameters._var))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SdtmDatasetVariableFromJSON(body), text);
    }

    return config;
}

/**
* Get SDTM Dataset Variable
*/
export function mdrSdtmVersionDatasetsDatasetVariablesVarGet<T>(requestParameters: MdrSdtmVersionDatasetsDatasetVariablesVarGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SdtmDatasetVariable>): QueryConfig<T> {
    return mdrSdtmVersionDatasetsDatasetVariablesVarGetRaw(requestParameters, requestConfig);
}

/**
 * Get SDTM Dataset List
 */
function mdrSdtmVersionDatasetsGetRaw<T>(requestParameters: MdrSdtmVersionDatasetsGetRequest, requestConfig: runtime.TypedQueryConfig<T, SdtmDatasets> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSdtmVersionDatasetsGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sdtm/{version}/datasets`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SdtmDatasetsFromJSON(body), text);
    }

    return config;
}

/**
* Get SDTM Dataset List
*/
export function mdrSdtmVersionDatasetsGet<T>(requestParameters: MdrSdtmVersionDatasetsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SdtmDatasets>): QueryConfig<T> {
    return mdrSdtmVersionDatasetsGetRaw(requestParameters, requestConfig);
}

/**
 * Get SDTM product
 */
function mdrSdtmVersionGetRaw<T>(requestParameters: MdrSdtmVersionGetRequest, requestConfig: runtime.TypedQueryConfig<T, SdtmProduct> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrSdtmVersionGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/sdtm/{version}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SdtmProductFromJSON(body), text);
    }

    return config;
}

/**
* Get SDTM product
*/
export function mdrSdtmVersionGet<T>(requestParameters: MdrSdtmVersionGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SdtmProduct>): QueryConfig<T> {
    return mdrSdtmVersionGetRaw(requestParameters, requestConfig);
}


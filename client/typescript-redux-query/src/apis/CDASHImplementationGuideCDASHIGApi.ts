// tslint:disable
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    CdashigClass,
    CdashigClassFromJSON,
    CdashigClassToJSON,
    CdashigClassDomains,
    CdashigClassDomainsFromJSON,
    CdashigClassDomainsToJSON,
    CdashigClassScenarios,
    CdashigClassScenariosFromJSON,
    CdashigClassScenariosToJSON,
    CdashigDomain,
    CdashigDomainFromJSON,
    CdashigDomainToJSON,
    CdashigDomainField,
    CdashigDomainFieldFromJSON,
    CdashigDomainFieldToJSON,
    CdashigDomainFields,
    CdashigDomainFieldsFromJSON,
    CdashigDomainFieldsToJSON,
    CdashigProduct,
    CdashigProductFromJSON,
    CdashigProductToJSON,
    CdashigProductClasses,
    CdashigProductClassesFromJSON,
    CdashigProductClassesToJSON,
    CdashigProductDomains,
    CdashigProductDomainsFromJSON,
    CdashigProductDomainsToJSON,
    CdashigProductScenarios,
    CdashigProductScenariosFromJSON,
    CdashigProductScenariosToJSON,
    CdashigScenario,
    CdashigScenarioFromJSON,
    CdashigScenarioToJSON,
    CdashigScenarioField,
    CdashigScenarioFieldFromJSON,
    CdashigScenarioFieldToJSON,
    CdashigScenarioFields,
    CdashigScenarioFieldsFromJSON,
    CdashigScenarioFieldsToJSON,
    DefaultErrorResponse,
    DefaultErrorResponseFromJSON,
    DefaultErrorResponseToJSON,
    ExportCdashigTable,
    ExportCdashigTableFromJSON,
    ExportCdashigTableToJSON,
    RootCdashigDomainField,
    RootCdashigDomainFieldFromJSON,
    RootCdashigDomainFieldToJSON,
    RootCdashigScenarioField,
    RootCdashigScenarioFieldFromJSON,
    RootCdashigScenarioFieldToJSON,
    XmlCdashigClass,
    XmlCdashigClassFromJSON,
    XmlCdashigClassToJSON,
    XmlCdashigClassDomains,
    XmlCdashigClassDomainsFromJSON,
    XmlCdashigClassDomainsToJSON,
    XmlCdashigClassScenarios,
    XmlCdashigClassScenariosFromJSON,
    XmlCdashigClassScenariosToJSON,
    XmlCdashigDomain,
    XmlCdashigDomainFromJSON,
    XmlCdashigDomainToJSON,
    XmlCdashigDomainField,
    XmlCdashigDomainFieldFromJSON,
    XmlCdashigDomainFieldToJSON,
    XmlCdashigDomainFields,
    XmlCdashigDomainFieldsFromJSON,
    XmlCdashigDomainFieldsToJSON,
    XmlCdashigProduct,
    XmlCdashigProductFromJSON,
    XmlCdashigProductToJSON,
    XmlCdashigProductClasses,
    XmlCdashigProductClassesFromJSON,
    XmlCdashigProductClassesToJSON,
    XmlCdashigProductDomains,
    XmlCdashigProductDomainsFromJSON,
    XmlCdashigProductDomainsToJSON,
    XmlCdashigProductScenarios,
    XmlCdashigProductScenariosFromJSON,
    XmlCdashigProductScenariosToJSON,
    XmlCdashigScenario,
    XmlCdashigScenarioFromJSON,
    XmlCdashigScenarioToJSON,
    XmlCdashigScenarioField,
    XmlCdashigScenarioFieldFromJSON,
    XmlCdashigScenarioFieldToJSON,
    XmlCdashigScenarioFields,
    XmlCdashigScenarioFieldsFromJSON,
    XmlCdashigScenarioFieldsToJSON,
    XmlRootCdashigDomainField,
    XmlRootCdashigDomainFieldFromJSON,
    XmlRootCdashigDomainFieldToJSON,
    XmlRootCdashigScenarioField,
    XmlRootCdashigScenarioFieldFromJSON,
    XmlRootCdashigScenarioFieldToJSON,
} from '../models';

export interface MdrCdashigVersionClassesClassDomainsGetRequest {
    version: string;
    _class: string;
}

export interface MdrCdashigVersionClassesClassGetRequest {
    version: string;
    _class: string;
}

export interface MdrCdashigVersionClassesClassScenariosGetRequest {
    version: string;
    _class: string;
}

export interface MdrCdashigVersionClassesGetRequest {
    version: string;
}

export interface MdrCdashigVersionDomainsDomainFieldsFieldGetRequest {
    version: string;
    domain: string;
    field: string;
}

export interface MdrCdashigVersionDomainsDomainFieldsGetRequest {
    version: string;
    domain: string;
}

export interface MdrCdashigVersionDomainsDomainGetRequest {
    version: string;
    domain: string;
}

export interface MdrCdashigVersionDomainsGetRequest {
    version: string;
}

export interface MdrCdashigVersionGetRequest {
    version: string;
}

export interface MdrCdashigVersionScenariosDomainScenarioFieldsFieldGetRequest {
    version: string;
    domain: string;
    scenario: string;
    field: string;
}

export interface MdrCdashigVersionScenariosDomainScenarioFieldsGetRequest {
    version: string;
    domain: string;
    scenario: string;
}

export interface MdrCdashigVersionScenariosDomainScenarioGetRequest {
    version: string;
    domain: string;
    scenario: string;
}

export interface MdrCdashigVersionScenariosGetRequest {
    version: string;
}

export interface MdrRootCdashigDomainsDomainFieldsFieldGetRequest {
    domain: string;
    field: string;
}

export interface MdrRootCdashigScenariosDomainScenarioFieldsFieldGetRequest {
    domain: string;
    scenario: string;
    field: string;
}


/**
 * Get CDASHIG Class Domain List
 */
function mdrCdashigVersionClassesClassDomainsGetRaw<T>(requestParameters: MdrCdashigVersionClassesClassDomainsGetRequest, requestConfig: runtime.TypedQueryConfig<T, CdashigClassDomains> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrCdashigVersionClassesClassDomainsGet.');
    }

    if (requestParameters._class === null || requestParameters._class === undefined) {
        throw new runtime.RequiredError('_class','Required parameter requestParameters._class was null or undefined when calling mdrCdashigVersionClassesClassDomainsGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/cdashig/{version}/classes/{class}/domains`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"class"}}`, encodeURIComponent(String(requestParameters._class))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CdashigClassDomainsFromJSON(body), text);
    }

    return config;
}

/**
* Get CDASHIG Class Domain List
*/
export function mdrCdashigVersionClassesClassDomainsGet<T>(requestParameters: MdrCdashigVersionClassesClassDomainsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CdashigClassDomains>): QueryConfig<T> {
    return mdrCdashigVersionClassesClassDomainsGetRaw(requestParameters, requestConfig);
}

/**
 * Get CDASHIG Class
 */
function mdrCdashigVersionClassesClassGetRaw<T>(requestParameters: MdrCdashigVersionClassesClassGetRequest, requestConfig: runtime.TypedQueryConfig<T, CdashigClass> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrCdashigVersionClassesClassGet.');
    }

    if (requestParameters._class === null || requestParameters._class === undefined) {
        throw new runtime.RequiredError('_class','Required parameter requestParameters._class was null or undefined when calling mdrCdashigVersionClassesClassGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/cdashig/{version}/classes/{class}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"class"}}`, encodeURIComponent(String(requestParameters._class))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CdashigClassFromJSON(body), text);
    }

    return config;
}

/**
* Get CDASHIG Class
*/
export function mdrCdashigVersionClassesClassGet<T>(requestParameters: MdrCdashigVersionClassesClassGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CdashigClass>): QueryConfig<T> {
    return mdrCdashigVersionClassesClassGetRaw(requestParameters, requestConfig);
}

/**
 * Get CDASHIG Class Scenario List
 */
function mdrCdashigVersionClassesClassScenariosGetRaw<T>(requestParameters: MdrCdashigVersionClassesClassScenariosGetRequest, requestConfig: runtime.TypedQueryConfig<T, CdashigClassScenarios> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrCdashigVersionClassesClassScenariosGet.');
    }

    if (requestParameters._class === null || requestParameters._class === undefined) {
        throw new runtime.RequiredError('_class','Required parameter requestParameters._class was null or undefined when calling mdrCdashigVersionClassesClassScenariosGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/cdashig/{version}/classes/{class}/scenarios`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"class"}}`, encodeURIComponent(String(requestParameters._class))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CdashigClassScenariosFromJSON(body), text);
    }

    return config;
}

/**
* Get CDASHIG Class Scenario List
*/
export function mdrCdashigVersionClassesClassScenariosGet<T>(requestParameters: MdrCdashigVersionClassesClassScenariosGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CdashigClassScenarios>): QueryConfig<T> {
    return mdrCdashigVersionClassesClassScenariosGetRaw(requestParameters, requestConfig);
}

/**
 * Get CDASHIG Class List
 */
function mdrCdashigVersionClassesGetRaw<T>(requestParameters: MdrCdashigVersionClassesGetRequest, requestConfig: runtime.TypedQueryConfig<T, CdashigProductClasses> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrCdashigVersionClassesGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/cdashig/{version}/classes`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CdashigProductClassesFromJSON(body), text);
    }

    return config;
}

/**
* Get CDASHIG Class List
*/
export function mdrCdashigVersionClassesGet<T>(requestParameters: MdrCdashigVersionClassesGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CdashigProductClasses>): QueryConfig<T> {
    return mdrCdashigVersionClassesGetRaw(requestParameters, requestConfig);
}

/**
 * Get CDASHIG Domain Field
 */
function mdrCdashigVersionDomainsDomainFieldsFieldGetRaw<T>(requestParameters: MdrCdashigVersionDomainsDomainFieldsFieldGetRequest, requestConfig: runtime.TypedQueryConfig<T, CdashigDomainField> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrCdashigVersionDomainsDomainFieldsFieldGet.');
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
        throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling mdrCdashigVersionDomainsDomainFieldsFieldGet.');
    }

    if (requestParameters.field === null || requestParameters.field === undefined) {
        throw new runtime.RequiredError('field','Required parameter requestParameters.field was null or undefined when calling mdrCdashigVersionDomainsDomainFieldsFieldGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/cdashig/{version}/domains/{domain}/fields/{field}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"field"}}`, encodeURIComponent(String(requestParameters.field))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CdashigDomainFieldFromJSON(body), text);
    }

    return config;
}

/**
* Get CDASHIG Domain Field
*/
export function mdrCdashigVersionDomainsDomainFieldsFieldGet<T>(requestParameters: MdrCdashigVersionDomainsDomainFieldsFieldGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CdashigDomainField>): QueryConfig<T> {
    return mdrCdashigVersionDomainsDomainFieldsFieldGetRaw(requestParameters, requestConfig);
}

/**
 * Get CDASHIG Domain Field List
 */
function mdrCdashigVersionDomainsDomainFieldsGetRaw<T>(requestParameters: MdrCdashigVersionDomainsDomainFieldsGetRequest, requestConfig: runtime.TypedQueryConfig<T, CdashigDomainFields> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrCdashigVersionDomainsDomainFieldsGet.');
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
        throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling mdrCdashigVersionDomainsDomainFieldsGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/cdashig/{version}/domains/{domain}/fields`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CdashigDomainFieldsFromJSON(body), text);
    }

    return config;
}

/**
* Get CDASHIG Domain Field List
*/
export function mdrCdashigVersionDomainsDomainFieldsGet<T>(requestParameters: MdrCdashigVersionDomainsDomainFieldsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CdashigDomainFields>): QueryConfig<T> {
    return mdrCdashigVersionDomainsDomainFieldsGetRaw(requestParameters, requestConfig);
}

/**
 * Get CDASHIG Domain
 */
function mdrCdashigVersionDomainsDomainGetRaw<T>(requestParameters: MdrCdashigVersionDomainsDomainGetRequest, requestConfig: runtime.TypedQueryConfig<T, CdashigDomain> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrCdashigVersionDomainsDomainGet.');
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
        throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling mdrCdashigVersionDomainsDomainGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/cdashig/{version}/domains/{domain}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CdashigDomainFromJSON(body), text);
    }

    return config;
}

/**
* Get CDASHIG Domain
*/
export function mdrCdashigVersionDomainsDomainGet<T>(requestParameters: MdrCdashigVersionDomainsDomainGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CdashigDomain>): QueryConfig<T> {
    return mdrCdashigVersionDomainsDomainGetRaw(requestParameters, requestConfig);
}

/**
 * Get CDASHIG Domain List
 */
function mdrCdashigVersionDomainsGetRaw<T>(requestParameters: MdrCdashigVersionDomainsGetRequest, requestConfig: runtime.TypedQueryConfig<T, CdashigProductDomains> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrCdashigVersionDomainsGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/cdashig/{version}/domains`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CdashigProductDomainsFromJSON(body), text);
    }

    return config;
}

/**
* Get CDASHIG Domain List
*/
export function mdrCdashigVersionDomainsGet<T>(requestParameters: MdrCdashigVersionDomainsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CdashigProductDomains>): QueryConfig<T> {
    return mdrCdashigVersionDomainsGetRaw(requestParameters, requestConfig);
}

/**
 * Get CDASHIG Product
 */
function mdrCdashigVersionGetRaw<T>(requestParameters: MdrCdashigVersionGetRequest, requestConfig: runtime.TypedQueryConfig<T, CdashigProduct> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrCdashigVersionGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/cdashig/{version}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CdashigProductFromJSON(body), text);
    }

    return config;
}

/**
* Get CDASHIG Product
*/
export function mdrCdashigVersionGet<T>(requestParameters: MdrCdashigVersionGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CdashigProduct>): QueryConfig<T> {
    return mdrCdashigVersionGetRaw(requestParameters, requestConfig);
}

/**
 * Get CDASHIG Scenario Field
 */
function mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetRaw<T>(requestParameters: MdrCdashigVersionScenariosDomainScenarioFieldsFieldGetRequest, requestConfig: runtime.TypedQueryConfig<T, CdashigScenarioField> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet.');
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
        throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet.');
    }

    if (requestParameters.scenario === null || requestParameters.scenario === undefined) {
        throw new runtime.RequiredError('scenario','Required parameter requestParameters.scenario was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet.');
    }

    if (requestParameters.field === null || requestParameters.field === undefined) {
        throw new runtime.RequiredError('field','Required parameter requestParameters.field was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields/{field}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"scenario"}}`, encodeURIComponent(String(requestParameters.scenario))).replace(`{${"field"}}`, encodeURIComponent(String(requestParameters.field))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CdashigScenarioFieldFromJSON(body), text);
    }

    return config;
}

/**
* Get CDASHIG Scenario Field
*/
export function mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet<T>(requestParameters: MdrCdashigVersionScenariosDomainScenarioFieldsFieldGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CdashigScenarioField>): QueryConfig<T> {
    return mdrCdashigVersionScenariosDomainScenarioFieldsFieldGetRaw(requestParameters, requestConfig);
}

/**
 * Get CDASHIG Scenario Field List
 */
function mdrCdashigVersionScenariosDomainScenarioFieldsGetRaw<T>(requestParameters: MdrCdashigVersionScenariosDomainScenarioFieldsGetRequest, requestConfig: runtime.TypedQueryConfig<T, CdashigScenarioFields> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet.');
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
        throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet.');
    }

    if (requestParameters.scenario === null || requestParameters.scenario === undefined) {
        throw new runtime.RequiredError('scenario','Required parameter requestParameters.scenario was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"scenario"}}`, encodeURIComponent(String(requestParameters.scenario))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CdashigScenarioFieldsFromJSON(body), text);
    }

    return config;
}

/**
* Get CDASHIG Scenario Field List
*/
export function mdrCdashigVersionScenariosDomainScenarioFieldsGet<T>(requestParameters: MdrCdashigVersionScenariosDomainScenarioFieldsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CdashigScenarioFields>): QueryConfig<T> {
    return mdrCdashigVersionScenariosDomainScenarioFieldsGetRaw(requestParameters, requestConfig);
}

/**
 * Get CDASHIG Scenario
 */
function mdrCdashigVersionScenariosDomainScenarioGetRaw<T>(requestParameters: MdrCdashigVersionScenariosDomainScenarioGetRequest, requestConfig: runtime.TypedQueryConfig<T, CdashigScenario> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioGet.');
    }

    if (requestParameters.domain === null || requestParameters.domain === undefined) {
        throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioGet.');
    }

    if (requestParameters.scenario === null || requestParameters.scenario === undefined) {
        throw new runtime.RequiredError('scenario','Required parameter requestParameters.scenario was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/cdashig/{version}/scenarios/{domain}.{scenario}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"scenario"}}`, encodeURIComponent(String(requestParameters.scenario))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CdashigScenarioFromJSON(body), text);
    }

    return config;
}

/**
* Get CDASHIG Scenario
*/
export function mdrCdashigVersionScenariosDomainScenarioGet<T>(requestParameters: MdrCdashigVersionScenariosDomainScenarioGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CdashigScenario>): QueryConfig<T> {
    return mdrCdashigVersionScenariosDomainScenarioGetRaw(requestParameters, requestConfig);
}

/**
 * Get CDASHIG Scenario List
 */
function mdrCdashigVersionScenariosGetRaw<T>(requestParameters: MdrCdashigVersionScenariosGetRequest, requestConfig: runtime.TypedQueryConfig<T, CdashigProductScenarios> = {}): QueryConfig<T> {
    if (requestParameters.version === null || requestParameters.version === undefined) {
        throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling mdrCdashigVersionScenariosGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/cdashig/{version}/scenarios`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(CdashigProductScenariosFromJSON(body), text);
    }

    return config;
}

/**
* Get CDASHIG Scenario List
*/
export function mdrCdashigVersionScenariosGet<T>(requestParameters: MdrCdashigVersionScenariosGetRequest, requestConfig?: runtime.TypedQueryConfig<T, CdashigProductScenarios>): QueryConfig<T> {
    return mdrCdashigVersionScenariosGetRaw(requestParameters, requestConfig);
}

/**
 * Get Root CDASHIG Domain Field
 */
function mdrRootCdashigDomainsDomainFieldsFieldGetRaw<T>(requestParameters: MdrRootCdashigDomainsDomainFieldsFieldGetRequest, requestConfig: runtime.TypedQueryConfig<T, RootCdashigDomainField> = {}): QueryConfig<T> {
    if (requestParameters.domain === null || requestParameters.domain === undefined) {
        throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling mdrRootCdashigDomainsDomainFieldsFieldGet.');
    }

    if (requestParameters.field === null || requestParameters.field === undefined) {
        throw new runtime.RequiredError('field','Required parameter requestParameters.field was null or undefined when calling mdrRootCdashigDomainsDomainFieldsFieldGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/root/cdashig/domains/{domain}/fields/{field}`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"field"}}`, encodeURIComponent(String(requestParameters.field))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(RootCdashigDomainFieldFromJSON(body), text);
    }

    return config;
}

/**
* Get Root CDASHIG Domain Field
*/
export function mdrRootCdashigDomainsDomainFieldsFieldGet<T>(requestParameters: MdrRootCdashigDomainsDomainFieldsFieldGetRequest, requestConfig?: runtime.TypedQueryConfig<T, RootCdashigDomainField>): QueryConfig<T> {
    return mdrRootCdashigDomainsDomainFieldsFieldGetRaw(requestParameters, requestConfig);
}

/**
 * Get Root CDASHIG Scenario Field
 */
function mdrRootCdashigScenariosDomainScenarioFieldsFieldGetRaw<T>(requestParameters: MdrRootCdashigScenariosDomainScenarioFieldsFieldGetRequest, requestConfig: runtime.TypedQueryConfig<T, RootCdashigScenarioField> = {}): QueryConfig<T> {
    if (requestParameters.domain === null || requestParameters.domain === undefined) {
        throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet.');
    }

    if (requestParameters.scenario === null || requestParameters.scenario === undefined) {
        throw new runtime.RequiredError('scenario','Required parameter requestParameters.scenario was null or undefined when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet.');
    }

    if (requestParameters.field === null || requestParameters.field === undefined) {
        throw new runtime.RequiredError('field','Required parameter requestParameters.field was null or undefined when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/root/cdashig/scenarios/{domain}.{scenario}/fields/{field}`.replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"scenario"}}`, encodeURIComponent(String(requestParameters.scenario))).replace(`{${"field"}}`, encodeURIComponent(String(requestParameters.field))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(RootCdashigScenarioFieldFromJSON(body), text);
    }

    return config;
}

/**
* Get Root CDASHIG Scenario Field
*/
export function mdrRootCdashigScenariosDomainScenarioFieldsFieldGet<T>(requestParameters: MdrRootCdashigScenariosDomainScenarioFieldsFieldGetRequest, requestConfig?: runtime.TypedQueryConfig<T, RootCdashigScenarioField>): QueryConfig<T> {
    return mdrRootCdashigScenariosDomainScenarioFieldsFieldGetRaw(requestParameters, requestConfig);
}


// tslint:disable
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    AdamDatastructure,
    AdamDatastructureFromJSON,
    AdamDatastructureToJSON,
    AdamDatastructureVariables,
    AdamDatastructureVariablesFromJSON,
    AdamDatastructureVariablesToJSON,
    AdamDatastructureVarsets,
    AdamDatastructureVarsetsFromJSON,
    AdamDatastructureVarsetsToJSON,
    AdamProduct,
    AdamProductFromJSON,
    AdamProductToJSON,
    AdamProductDatastructures,
    AdamProductDatastructuresFromJSON,
    AdamProductDatastructuresToJSON,
    AdamVariable,
    AdamVariableFromJSON,
    AdamVariableToJSON,
    AdamVarset,
    AdamVarsetFromJSON,
    AdamVarsetToJSON,
    DefaultErrorResponse,
    DefaultErrorResponseFromJSON,
    DefaultErrorResponseToJSON,
    ExportAdamDatastructuresTable,
    ExportAdamDatastructuresTableFromJSON,
    ExportAdamDatastructuresTableToJSON,
    ExportAdamVariablesTable,
    ExportAdamVariablesTableFromJSON,
    ExportAdamVariablesTableToJSON,
    ExportAdamWorkbook,
    ExportAdamWorkbookFromJSON,
    ExportAdamWorkbookToJSON,
    XmlAdamDatastructure,
    XmlAdamDatastructureFromJSON,
    XmlAdamDatastructureToJSON,
    XmlAdamDatastructureVariables,
    XmlAdamDatastructureVariablesFromJSON,
    XmlAdamDatastructureVariablesToJSON,
    XmlAdamDatastructureVarsets,
    XmlAdamDatastructureVarsetsFromJSON,
    XmlAdamDatastructureVarsetsToJSON,
    XmlAdamProduct,
    XmlAdamProductFromJSON,
    XmlAdamProductToJSON,
    XmlAdamProductDatastructures,
    XmlAdamProductDatastructuresFromJSON,
    XmlAdamProductDatastructuresToJSON,
    XmlAdamVariable,
    XmlAdamVariableFromJSON,
    XmlAdamVariableToJSON,
    XmlAdamVarset,
    XmlAdamVarsetFromJSON,
    XmlAdamVarsetToJSON,
} from '../models';

export interface MdrAdamProductDatastructuresGetRequest {
    product: string;
}

export interface MdrAdamProductDatastructuresStructureGetRequest {
    product: string;
    structure: string;
}

export interface MdrAdamProductDatastructuresStructureVariablesGetRequest {
    product: string;
    structure: string;
}

export interface MdrAdamProductDatastructuresStructureVariablesVarGetRequest {
    product: string;
    structure: string;
    _var: string;
}

export interface MdrAdamProductDatastructuresStructureVarsetsGetRequest {
    product: string;
    structure: string;
}

export interface MdrAdamProductDatastructuresStructureVarsetsVarsetGetRequest {
    product: string;
    structure: string;
    varset: string;
}

export interface MdrAdamProductGetRequest {
    product: string;
}


/**
 * Get ADaM Data Structure List
 */
function mdrAdamProductDatastructuresGetRaw<T>(requestParameters: MdrAdamProductDatastructuresGetRequest, requestConfig: runtime.TypedQueryConfig<T, AdamProductDatastructures> = {}): QueryConfig<T> {
    if (requestParameters.product === null || requestParameters.product === undefined) {
        throw new runtime.RequiredError('product','Required parameter requestParameters.product was null or undefined when calling mdrAdamProductDatastructuresGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/adam/{product}/datastructures`.replace(`{${"product"}}`, encodeURIComponent(String(requestParameters.product))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AdamProductDatastructuresFromJSON(body), text);
    }

    return config;
}

/**
* Get ADaM Data Structure List
*/
export function mdrAdamProductDatastructuresGet<T>(requestParameters: MdrAdamProductDatastructuresGetRequest, requestConfig?: runtime.TypedQueryConfig<T, AdamProductDatastructures>): QueryConfig<T> {
    return mdrAdamProductDatastructuresGetRaw(requestParameters, requestConfig);
}

/**
 * Get ADaM Data Structure
 */
function mdrAdamProductDatastructuresStructureGetRaw<T>(requestParameters: MdrAdamProductDatastructuresStructureGetRequest, requestConfig: runtime.TypedQueryConfig<T, AdamDatastructure> = {}): QueryConfig<T> {
    if (requestParameters.product === null || requestParameters.product === undefined) {
        throw new runtime.RequiredError('product','Required parameter requestParameters.product was null or undefined when calling mdrAdamProductDatastructuresStructureGet.');
    }

    if (requestParameters.structure === null || requestParameters.structure === undefined) {
        throw new runtime.RequiredError('structure','Required parameter requestParameters.structure was null or undefined when calling mdrAdamProductDatastructuresStructureGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/adam/{product}/datastructures/{structure}`.replace(`{${"product"}}`, encodeURIComponent(String(requestParameters.product))).replace(`{${"structure"}}`, encodeURIComponent(String(requestParameters.structure))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AdamDatastructureFromJSON(body), text);
    }

    return config;
}

/**
* Get ADaM Data Structure
*/
export function mdrAdamProductDatastructuresStructureGet<T>(requestParameters: MdrAdamProductDatastructuresStructureGetRequest, requestConfig?: runtime.TypedQueryConfig<T, AdamDatastructure>): QueryConfig<T> {
    return mdrAdamProductDatastructuresStructureGetRaw(requestParameters, requestConfig);
}

/**
 * Get ADaM Variable List
 */
function mdrAdamProductDatastructuresStructureVariablesGetRaw<T>(requestParameters: MdrAdamProductDatastructuresStructureVariablesGetRequest, requestConfig: runtime.TypedQueryConfig<T, AdamDatastructureVariables> = {}): QueryConfig<T> {
    if (requestParameters.product === null || requestParameters.product === undefined) {
        throw new runtime.RequiredError('product','Required parameter requestParameters.product was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesGet.');
    }

    if (requestParameters.structure === null || requestParameters.structure === undefined) {
        throw new runtime.RequiredError('structure','Required parameter requestParameters.structure was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/adam/{product}/datastructures/{structure}/variables`.replace(`{${"product"}}`, encodeURIComponent(String(requestParameters.product))).replace(`{${"structure"}}`, encodeURIComponent(String(requestParameters.structure))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AdamDatastructureVariablesFromJSON(body), text);
    }

    return config;
}

/**
* Get ADaM Variable List
*/
export function mdrAdamProductDatastructuresStructureVariablesGet<T>(requestParameters: MdrAdamProductDatastructuresStructureVariablesGetRequest, requestConfig?: runtime.TypedQueryConfig<T, AdamDatastructureVariables>): QueryConfig<T> {
    return mdrAdamProductDatastructuresStructureVariablesGetRaw(requestParameters, requestConfig);
}

/**
 * Get ADaM Variable
 */
function mdrAdamProductDatastructuresStructureVariablesVarGetRaw<T>(requestParameters: MdrAdamProductDatastructuresStructureVariablesVarGetRequest, requestConfig: runtime.TypedQueryConfig<T, AdamVariable> = {}): QueryConfig<T> {
    if (requestParameters.product === null || requestParameters.product === undefined) {
        throw new runtime.RequiredError('product','Required parameter requestParameters.product was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesVarGet.');
    }

    if (requestParameters.structure === null || requestParameters.structure === undefined) {
        throw new runtime.RequiredError('structure','Required parameter requestParameters.structure was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesVarGet.');
    }

    if (requestParameters._var === null || requestParameters._var === undefined) {
        throw new runtime.RequiredError('_var','Required parameter requestParameters._var was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesVarGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/adam/{product}/datastructures/{structure}/variables/{var}`.replace(`{${"product"}}`, encodeURIComponent(String(requestParameters.product))).replace(`{${"structure"}}`, encodeURIComponent(String(requestParameters.structure))).replace(`{${"var"}}`, encodeURIComponent(String(requestParameters._var))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AdamVariableFromJSON(body), text);
    }

    return config;
}

/**
* Get ADaM Variable
*/
export function mdrAdamProductDatastructuresStructureVariablesVarGet<T>(requestParameters: MdrAdamProductDatastructuresStructureVariablesVarGetRequest, requestConfig?: runtime.TypedQueryConfig<T, AdamVariable>): QueryConfig<T> {
    return mdrAdamProductDatastructuresStructureVariablesVarGetRaw(requestParameters, requestConfig);
}

/**
 * Get ADaM Variable Set List
 */
function mdrAdamProductDatastructuresStructureVarsetsGetRaw<T>(requestParameters: MdrAdamProductDatastructuresStructureVarsetsGetRequest, requestConfig: runtime.TypedQueryConfig<T, AdamDatastructureVarsets> = {}): QueryConfig<T> {
    if (requestParameters.product === null || requestParameters.product === undefined) {
        throw new runtime.RequiredError('product','Required parameter requestParameters.product was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsGet.');
    }

    if (requestParameters.structure === null || requestParameters.structure === undefined) {
        throw new runtime.RequiredError('structure','Required parameter requestParameters.structure was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/adam/{product}/datastructures/{structure}/varsets`.replace(`{${"product"}}`, encodeURIComponent(String(requestParameters.product))).replace(`{${"structure"}}`, encodeURIComponent(String(requestParameters.structure))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AdamDatastructureVarsetsFromJSON(body), text);
    }

    return config;
}

/**
* Get ADaM Variable Set List
*/
export function mdrAdamProductDatastructuresStructureVarsetsGet<T>(requestParameters: MdrAdamProductDatastructuresStructureVarsetsGetRequest, requestConfig?: runtime.TypedQueryConfig<T, AdamDatastructureVarsets>): QueryConfig<T> {
    return mdrAdamProductDatastructuresStructureVarsetsGetRaw(requestParameters, requestConfig);
}

/**
 * Get ADaM Variable Set
 */
function mdrAdamProductDatastructuresStructureVarsetsVarsetGetRaw<T>(requestParameters: MdrAdamProductDatastructuresStructureVarsetsVarsetGetRequest, requestConfig: runtime.TypedQueryConfig<T, AdamVarset> = {}): QueryConfig<T> {
    if (requestParameters.product === null || requestParameters.product === undefined) {
        throw new runtime.RequiredError('product','Required parameter requestParameters.product was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet.');
    }

    if (requestParameters.structure === null || requestParameters.structure === undefined) {
        throw new runtime.RequiredError('structure','Required parameter requestParameters.structure was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet.');
    }

    if (requestParameters.varset === null || requestParameters.varset === undefined) {
        throw new runtime.RequiredError('varset','Required parameter requestParameters.varset was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/adam/{product}/datastructures/{structure}/varsets/{varset}`.replace(`{${"product"}}`, encodeURIComponent(String(requestParameters.product))).replace(`{${"structure"}}`, encodeURIComponent(String(requestParameters.structure))).replace(`{${"varset"}}`, encodeURIComponent(String(requestParameters.varset))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AdamVarsetFromJSON(body), text);
    }

    return config;
}

/**
* Get ADaM Variable Set
*/
export function mdrAdamProductDatastructuresStructureVarsetsVarsetGet<T>(requestParameters: MdrAdamProductDatastructuresStructureVarsetsVarsetGetRequest, requestConfig?: runtime.TypedQueryConfig<T, AdamVarset>): QueryConfig<T> {
    return mdrAdamProductDatastructuresStructureVarsetsVarsetGetRaw(requestParameters, requestConfig);
}

/**
 * Get ADaM Product
 */
function mdrAdamProductGetRaw<T>(requestParameters: MdrAdamProductGetRequest, requestConfig: runtime.TypedQueryConfig<T, AdamProduct> = {}): QueryConfig<T> {
    if (requestParameters.product === null || requestParameters.product === undefined) {
        throw new runtime.RequiredError('product','Required parameter requestParameters.product was null or undefined when calling mdrAdamProductGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/mdr/adam/{product}`.replace(`{${"product"}}`, encodeURIComponent(String(requestParameters.product))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AdamProductFromJSON(body), text);
    }

    return config;
}

/**
* Get ADaM Product
*/
export function mdrAdamProductGet<T>(requestParameters: MdrAdamProductGetRequest, requestConfig?: runtime.TypedQueryConfig<T, AdamProduct>): QueryConfig<T> {
    return mdrAdamProductGetRaw(requestParameters, requestConfig);
}


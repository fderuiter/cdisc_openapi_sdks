/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIControlledTerminologyCTApi_H
#define OAI_OAIControlledTerminologyCTApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICtCodelist.h"
#include "OAICtCodelistTerms.h"
#include "OAICtPackage.h"
#include "OAICtPackageCodelists.h"
#include "OAICtPackages.h"
#include "OAICtTerm.h"
#include "OAIDefaultErrorResponse.h"
#include "OAIExportCtTable.h"
#include "OAIRootCtCodelist.h"
#include "OAIRootCtTerm.h"
#include "OAIXmlCtCodelist.h"
#include "OAIXmlCtCodelistTerms.h"
#include "OAIXmlCtPackage.h"
#include "OAIXmlCtPackageCodelists.h"
#include "OAIXmlCtPackages.h"
#include "OAIXmlCtTerm.h"
#include "OAIXmlRootCtCodelist.h"
#include "OAIXmlRootCtTerm.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIControlledTerminologyCTApi : public QObject {
    Q_OBJECT

public:
    OAIControlledTerminologyCTApi(const int timeOut = 0);
    ~OAIControlledTerminologyCTApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void mdrCtPackagesGet();

    /**
    * @param[in]  package QString [required]
    * @param[in]  codelist QString [required]
    */
    virtual void mdrCtPackagesPackageCodelistsCodelistGet(const QString &package, const QString &codelist);

    /**
    * @param[in]  package QString [required]
    * @param[in]  codelist QString [required]
    */
    virtual void mdrCtPackagesPackageCodelistsCodelistTermsGet(const QString &package, const QString &codelist);

    /**
    * @param[in]  package QString [required]
    * @param[in]  codelist QString [required]
    * @param[in]  term QString [required]
    */
    virtual void mdrCtPackagesPackageCodelistsCodelistTermsTermGet(const QString &package, const QString &codelist, const QString &term);

    /**
    * @param[in]  package QString [required]
    */
    virtual void mdrCtPackagesPackageCodelistsGet(const QString &package);

    /**
    * @param[in]  product QString [required]
    */
    virtual void mdrCtPackagesProductGet(const QString &product);

    /**
    * @param[in]  product_group QString [required]
    * @param[in]  codelist QString [required]
    */
    virtual void mdrRootCtProductGroupCodelistsCodelistGet(const QString &product_group, const QString &codelist);

    /**
    * @param[in]  product_group QString [required]
    * @param[in]  codelist QString [required]
    * @param[in]  term QString [required]
    */
    virtual void mdrRootCtProductGroupCodelistsCodelistTermsTermGet(const QString &product_group, const QString &codelist, const QString &term);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void mdrCtPackagesGetCallback(OAIHttpRequestWorker *worker);
    void mdrCtPackagesPackageCodelistsCodelistGetCallback(OAIHttpRequestWorker *worker);
    void mdrCtPackagesPackageCodelistsCodelistTermsGetCallback(OAIHttpRequestWorker *worker);
    void mdrCtPackagesPackageCodelistsCodelistTermsTermGetCallback(OAIHttpRequestWorker *worker);
    void mdrCtPackagesPackageCodelistsGetCallback(OAIHttpRequestWorker *worker);
    void mdrCtPackagesProductGetCallback(OAIHttpRequestWorker *worker);
    void mdrRootCtProductGroupCodelistsCodelistGetCallback(OAIHttpRequestWorker *worker);
    void mdrRootCtProductGroupCodelistsCodelistTermsTermGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void mdrCtPackagesGetSignal(OAICtPackages summary);
    void mdrCtPackagesPackageCodelistsCodelistGetSignal(OAICtCodelist summary);
    void mdrCtPackagesPackageCodelistsCodelistTermsGetSignal(OAICtCodelistTerms summary);
    void mdrCtPackagesPackageCodelistsCodelistTermsTermGetSignal(OAICtTerm summary);
    void mdrCtPackagesPackageCodelistsGetSignal(OAICtPackageCodelists summary);
    void mdrCtPackagesProductGetSignal(OAICtPackage summary);
    void mdrRootCtProductGroupCodelistsCodelistGetSignal(OAIRootCtCodelist summary);
    void mdrRootCtProductGroupCodelistsCodelistTermsTermGetSignal(OAIRootCtTerm summary);


    void mdrCtPackagesGetSignalFull(OAIHttpRequestWorker *worker, OAICtPackages summary);
    void mdrCtPackagesPackageCodelistsCodelistGetSignalFull(OAIHttpRequestWorker *worker, OAICtCodelist summary);
    void mdrCtPackagesPackageCodelistsCodelistTermsGetSignalFull(OAIHttpRequestWorker *worker, OAICtCodelistTerms summary);
    void mdrCtPackagesPackageCodelistsCodelistTermsTermGetSignalFull(OAIHttpRequestWorker *worker, OAICtTerm summary);
    void mdrCtPackagesPackageCodelistsGetSignalFull(OAIHttpRequestWorker *worker, OAICtPackageCodelists summary);
    void mdrCtPackagesProductGetSignalFull(OAIHttpRequestWorker *worker, OAICtPackage summary);
    void mdrRootCtProductGroupCodelistsCodelistGetSignalFull(OAIHttpRequestWorker *worker, OAIRootCtCodelist summary);
    void mdrRootCtProductGroupCodelistsCodelistTermsTermGetSignalFull(OAIHttpRequestWorker *worker, OAIRootCtTerm summary);

    Q_DECL_DEPRECATED_X("Use mdrCtPackagesGetSignalError() instead")
    void mdrCtPackagesGetSignalE(OAICtPackages summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCtPackagesGetSignalError(OAICtPackages summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCtPackagesPackageCodelistsCodelistGetSignalError() instead")
    void mdrCtPackagesPackageCodelistsCodelistGetSignalE(OAICtCodelist summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCtPackagesPackageCodelistsCodelistGetSignalError(OAICtCodelist summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCtPackagesPackageCodelistsCodelistTermsGetSignalError() instead")
    void mdrCtPackagesPackageCodelistsCodelistTermsGetSignalE(OAICtCodelistTerms summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCtPackagesPackageCodelistsCodelistTermsGetSignalError(OAICtCodelistTerms summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCtPackagesPackageCodelistsCodelistTermsTermGetSignalError() instead")
    void mdrCtPackagesPackageCodelistsCodelistTermsTermGetSignalE(OAICtTerm summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCtPackagesPackageCodelistsCodelistTermsTermGetSignalError(OAICtTerm summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCtPackagesPackageCodelistsGetSignalError() instead")
    void mdrCtPackagesPackageCodelistsGetSignalE(OAICtPackageCodelists summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCtPackagesPackageCodelistsGetSignalError(OAICtPackageCodelists summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCtPackagesProductGetSignalError() instead")
    void mdrCtPackagesProductGetSignalE(OAICtPackage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCtPackagesProductGetSignalError(OAICtPackage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrRootCtProductGroupCodelistsCodelistGetSignalError() instead")
    void mdrRootCtProductGroupCodelistsCodelistGetSignalE(OAIRootCtCodelist summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrRootCtProductGroupCodelistsCodelistGetSignalError(OAIRootCtCodelist summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrRootCtProductGroupCodelistsCodelistTermsTermGetSignalError() instead")
    void mdrRootCtProductGroupCodelistsCodelistTermsTermGetSignalE(OAIRootCtTerm summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrRootCtProductGroupCodelistsCodelistTermsTermGetSignalError(OAIRootCtTerm summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use mdrCtPackagesGetSignalErrorFull() instead")
    void mdrCtPackagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCtPackagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCtPackagesPackageCodelistsCodelistGetSignalErrorFull() instead")
    void mdrCtPackagesPackageCodelistsCodelistGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCtPackagesPackageCodelistsCodelistGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCtPackagesPackageCodelistsCodelistTermsGetSignalErrorFull() instead")
    void mdrCtPackagesPackageCodelistsCodelistTermsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCtPackagesPackageCodelistsCodelistTermsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCtPackagesPackageCodelistsCodelistTermsTermGetSignalErrorFull() instead")
    void mdrCtPackagesPackageCodelistsCodelistTermsTermGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCtPackagesPackageCodelistsCodelistTermsTermGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCtPackagesPackageCodelistsGetSignalErrorFull() instead")
    void mdrCtPackagesPackageCodelistsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCtPackagesPackageCodelistsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrCtPackagesProductGetSignalErrorFull() instead")
    void mdrCtPackagesProductGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrCtPackagesProductGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrRootCtProductGroupCodelistsCodelistGetSignalErrorFull() instead")
    void mdrRootCtProductGroupCodelistsCodelistGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrRootCtProductGroupCodelistsCodelistGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mdrRootCtProductGroupCodelistsCodelistTermsTermGetSignalErrorFull() instead")
    void mdrRootCtProductGroupCodelistsCodelistTermsTermGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mdrRootCtProductGroupCodelistsCodelistTermsTermGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif

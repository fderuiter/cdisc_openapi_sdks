/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISdtmClass.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISdtmClass::OAISdtmClass(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISdtmClass::OAISdtmClass() {
    this->initializeModel();
}

OAISdtmClass::~OAISdtmClass() {}

void OAISdtmClass::initializeModel() {

    m_ordinal_isSet = false;
    m_ordinal_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m__links_isSet = false;
    m__links_isValid = false;

    m_class_variables_isSet = false;
    m_class_variables_isValid = false;

    m_datasets_isSet = false;
    m_datasets_isValid = false;
}

void OAISdtmClass::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISdtmClass::fromJsonObject(QJsonObject json) {

    m_ordinal_isValid = ::OpenAPI::fromJsonValue(m_ordinal, json[QString("ordinal")]);
    m_ordinal_isSet = !json[QString("ordinal")].isNull() && m_ordinal_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_class_variables_isValid = ::OpenAPI::fromJsonValue(m_class_variables, json[QString("classVariables")]);
    m_class_variables_isSet = !json[QString("classVariables")].isNull() && m_class_variables_isValid;

    m_datasets_isValid = ::OpenAPI::fromJsonValue(m_datasets, json[QString("datasets")]);
    m_datasets_isSet = !json[QString("datasets")].isNull() && m_datasets_isValid;
}

QString OAISdtmClass::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISdtmClass::asJsonObject() const {
    QJsonObject obj;
    if (m_ordinal_isSet) {
        obj.insert(QString("ordinal"), ::OpenAPI::toJsonValue(m_ordinal));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_class_variables.size() > 0) {
        obj.insert(QString("classVariables"), ::OpenAPI::toJsonValue(m_class_variables));
    }
    if (m_datasets.size() > 0) {
        obj.insert(QString("datasets"), ::OpenAPI::toJsonValue(m_datasets));
    }
    return obj;
}

QString OAISdtmClass::getOrdinal() const {
    return m_ordinal;
}
void OAISdtmClass::setOrdinal(const QString &ordinal) {
    m_ordinal = ordinal;
    m_ordinal_isSet = true;
}

bool OAISdtmClass::is_ordinal_Set() const{
    return m_ordinal_isSet;
}

bool OAISdtmClass::is_ordinal_Valid() const{
    return m_ordinal_isValid;
}

QString OAISdtmClass::getName() const {
    return m_name;
}
void OAISdtmClass::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISdtmClass::is_name_Set() const{
    return m_name_isSet;
}

bool OAISdtmClass::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISdtmClass::getLabel() const {
    return m_label;
}
void OAISdtmClass::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAISdtmClass::is_label_Set() const{
    return m_label_isSet;
}

bool OAISdtmClass::is_label_Valid() const{
    return m_label_isValid;
}

QString OAISdtmClass::getDescription() const {
    return m_description;
}
void OAISdtmClass::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISdtmClass::is_description_Set() const{
    return m_description_isSet;
}

bool OAISdtmClass::is_description_Valid() const{
    return m_description_isValid;
}

OAISdtmClassLinks OAISdtmClass::getLinks() const {
    return m__links;
}
void OAISdtmClass::setLinks(const OAISdtmClassLinks &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAISdtmClass::is__links_Set() const{
    return m__links_isSet;
}

bool OAISdtmClass::is__links_Valid() const{
    return m__links_isValid;
}

QList<OAISdtmClassVariable> OAISdtmClass::getClassVariables() const {
    return m_class_variables;
}
void OAISdtmClass::setClassVariables(const QList<OAISdtmClassVariable> &class_variables) {
    m_class_variables = class_variables;
    m_class_variables_isSet = true;
}

bool OAISdtmClass::is_class_variables_Set() const{
    return m_class_variables_isSet;
}

bool OAISdtmClass::is_class_variables_Valid() const{
    return m_class_variables_isValid;
}

QList<OAISdtmDataset> OAISdtmClass::getDatasets() const {
    return m_datasets;
}
void OAISdtmClass::setDatasets(const QList<OAISdtmDataset> &datasets) {
    m_datasets = datasets;
    m_datasets_isSet = true;
}

bool OAISdtmClass::is_datasets_Set() const{
    return m_datasets_isSet;
}

bool OAISdtmClass::is_datasets_Valid() const{
    return m_datasets_isValid;
}

bool OAISdtmClass::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ordinal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_class_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_datasets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISdtmClass::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI

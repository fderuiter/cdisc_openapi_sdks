=begin comment

CDISC Library API

REST API Documentation for CDISC Library in production server

The version of the OpenAPI document: 1.1.0
Contact: cdisc_library_support@cdisc.org
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::AnalysisDataModelAndImplementationGuideADaMAndADaMIGApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# mdr_adam_product_datastructures_get
#
# 
#
# @param string $product CDISC Library Product (required)
{
    my $params = {
    'product' => {
        data_type => 'string',
        description => 'CDISC Library Product',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_adam_product_datastructures_get' } = {
        summary => '',
        params => $params,
        returns => 'AdamProductDatastructures',
        };
}
# @return AdamProductDatastructures
#
sub mdr_adam_product_datastructures_get {
    my ($self, %args) = @_;

    # verify the required parameter 'product' is set
    unless (exists $args{'product'}) {
      croak("Missing the required parameter 'product' when calling mdr_adam_product_datastructures_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/adam/{product}/datastructures';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml', 'text/csv');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'product'}) {
        my $_base_variable = "{" . "product" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AdamProductDatastructures', $response);
    return $_response_object;
}

#
# mdr_adam_product_datastructures_structure_get
#
# 
#
# @param string $product CDISC Library Product (required)
# @param string $structure Data structure Identifier (required)
{
    my $params = {
    'product' => {
        data_type => 'string',
        description => 'CDISC Library Product',
        required => '1',
    },
    'structure' => {
        data_type => 'string',
        description => 'Data structure Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_adam_product_datastructures_structure_get' } = {
        summary => '',
        params => $params,
        returns => 'AdamDatastructure',
        };
}
# @return AdamDatastructure
#
sub mdr_adam_product_datastructures_structure_get {
    my ($self, %args) = @_;

    # verify the required parameter 'product' is set
    unless (exists $args{'product'}) {
      croak("Missing the required parameter 'product' when calling mdr_adam_product_datastructures_structure_get");
    }

    # verify the required parameter 'structure' is set
    unless (exists $args{'structure'}) {
      croak("Missing the required parameter 'structure' when calling mdr_adam_product_datastructures_structure_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/adam/{product}/datastructures/{structure}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'product'}) {
        my $_base_variable = "{" . "product" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'structure'}) {
        my $_base_variable = "{" . "structure" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'structure'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AdamDatastructure', $response);
    return $_response_object;
}

#
# mdr_adam_product_datastructures_structure_variables_get
#
# 
#
# @param string $product CDISC Library Product (required)
# @param string $structure ADaM Data Structure Identifier (required)
{
    my $params = {
    'product' => {
        data_type => 'string',
        description => 'CDISC Library Product',
        required => '1',
    },
    'structure' => {
        data_type => 'string',
        description => 'ADaM Data Structure Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_adam_product_datastructures_structure_variables_get' } = {
        summary => '',
        params => $params,
        returns => 'AdamDatastructureVariables',
        };
}
# @return AdamDatastructureVariables
#
sub mdr_adam_product_datastructures_structure_variables_get {
    my ($self, %args) = @_;

    # verify the required parameter 'product' is set
    unless (exists $args{'product'}) {
      croak("Missing the required parameter 'product' when calling mdr_adam_product_datastructures_structure_variables_get");
    }

    # verify the required parameter 'structure' is set
    unless (exists $args{'structure'}) {
      croak("Missing the required parameter 'structure' when calling mdr_adam_product_datastructures_structure_variables_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/adam/{product}/datastructures/{structure}/variables';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'product'}) {
        my $_base_variable = "{" . "product" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'structure'}) {
        my $_base_variable = "{" . "structure" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'structure'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AdamDatastructureVariables', $response);
    return $_response_object;
}

#
# mdr_adam_product_datastructures_structure_variables_var_get
#
# 
#
# @param string $product CDISC Library Product (required)
# @param string $structure ADaM Data Structure Identifier (required)
# @param string $var ADaM Variable Identifier (required)
{
    my $params = {
    'product' => {
        data_type => 'string',
        description => 'CDISC Library Product',
        required => '1',
    },
    'structure' => {
        data_type => 'string',
        description => 'ADaM Data Structure Identifier',
        required => '1',
    },
    'var' => {
        data_type => 'string',
        description => 'ADaM Variable Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_adam_product_datastructures_structure_variables_var_get' } = {
        summary => '',
        params => $params,
        returns => 'AdamVariable',
        };
}
# @return AdamVariable
#
sub mdr_adam_product_datastructures_structure_variables_var_get {
    my ($self, %args) = @_;

    # verify the required parameter 'product' is set
    unless (exists $args{'product'}) {
      croak("Missing the required parameter 'product' when calling mdr_adam_product_datastructures_structure_variables_var_get");
    }

    # verify the required parameter 'structure' is set
    unless (exists $args{'structure'}) {
      croak("Missing the required parameter 'structure' when calling mdr_adam_product_datastructures_structure_variables_var_get");
    }

    # verify the required parameter 'var' is set
    unless (exists $args{'var'}) {
      croak("Missing the required parameter 'var' when calling mdr_adam_product_datastructures_structure_variables_var_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/adam/{product}/datastructures/{structure}/variables/{var}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'product'}) {
        my $_base_variable = "{" . "product" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'structure'}) {
        my $_base_variable = "{" . "structure" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'structure'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'var'}) {
        my $_base_variable = "{" . "var" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'var'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AdamVariable', $response);
    return $_response_object;
}

#
# mdr_adam_product_datastructures_structure_varsets_get
#
# 
#
# @param string $product CDISC Library Product (required)
# @param string $structure ADaM Data Structure Identifier (required)
{
    my $params = {
    'product' => {
        data_type => 'string',
        description => 'CDISC Library Product',
        required => '1',
    },
    'structure' => {
        data_type => 'string',
        description => 'ADaM Data Structure Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_adam_product_datastructures_structure_varsets_get' } = {
        summary => '',
        params => $params,
        returns => 'AdamDatastructureVarsets',
        };
}
# @return AdamDatastructureVarsets
#
sub mdr_adam_product_datastructures_structure_varsets_get {
    my ($self, %args) = @_;

    # verify the required parameter 'product' is set
    unless (exists $args{'product'}) {
      croak("Missing the required parameter 'product' when calling mdr_adam_product_datastructures_structure_varsets_get");
    }

    # verify the required parameter 'structure' is set
    unless (exists $args{'structure'}) {
      croak("Missing the required parameter 'structure' when calling mdr_adam_product_datastructures_structure_varsets_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/adam/{product}/datastructures/{structure}/varsets';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'product'}) {
        my $_base_variable = "{" . "product" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'structure'}) {
        my $_base_variable = "{" . "structure" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'structure'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AdamDatastructureVarsets', $response);
    return $_response_object;
}

#
# mdr_adam_product_datastructures_structure_varsets_varset_get
#
# 
#
# @param string $product CDISC Library Product (required)
# @param string $structure ADaM Data Structure Identifier (required)
# @param string $varset ADaM Variable Set Identifier (required)
{
    my $params = {
    'product' => {
        data_type => 'string',
        description => 'CDISC Library Product',
        required => '1',
    },
    'structure' => {
        data_type => 'string',
        description => 'ADaM Data Structure Identifier',
        required => '1',
    },
    'varset' => {
        data_type => 'string',
        description => 'ADaM Variable Set Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_adam_product_datastructures_structure_varsets_varset_get' } = {
        summary => '',
        params => $params,
        returns => 'AdamVarset',
        };
}
# @return AdamVarset
#
sub mdr_adam_product_datastructures_structure_varsets_varset_get {
    my ($self, %args) = @_;

    # verify the required parameter 'product' is set
    unless (exists $args{'product'}) {
      croak("Missing the required parameter 'product' when calling mdr_adam_product_datastructures_structure_varsets_varset_get");
    }

    # verify the required parameter 'structure' is set
    unless (exists $args{'structure'}) {
      croak("Missing the required parameter 'structure' when calling mdr_adam_product_datastructures_structure_varsets_varset_get");
    }

    # verify the required parameter 'varset' is set
    unless (exists $args{'varset'}) {
      croak("Missing the required parameter 'varset' when calling mdr_adam_product_datastructures_structure_varsets_varset_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/adam/{product}/datastructures/{structure}/varsets/{varset}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'product'}) {
        my $_base_variable = "{" . "product" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'structure'}) {
        my $_base_variable = "{" . "structure" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'structure'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'varset'}) {
        my $_base_variable = "{" . "varset" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'varset'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AdamVarset', $response);
    return $_response_object;
}

#
# mdr_adam_product_get
#
# 
#
# @param string $product CDISC Library Product (required)
{
    my $params = {
    'product' => {
        data_type => 'string',
        description => 'CDISC Library Product',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_adam_product_get' } = {
        summary => '',
        params => $params,
        returns => 'AdamProduct',
        };
}
# @return AdamProduct
#
sub mdr_adam_product_get {
    my ($self, %args) = @_;

    # verify the required parameter 'product' is set
    unless (exists $args{'product'}) {
      croak("Missing the required parameter 'product' when calling mdr_adam_product_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/adam/{product}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'product'}) {
        my $_base_variable = "{" . "product" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('AdamProduct', $response);
    return $_response_object;
}

1;

=begin comment

CDISC Library API

REST API Documentation for CDISC Library in production server

The version of the OpenAPI document: 1.1.0
Contact: cdisc_library_support@cdisc.org
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::ControlledTerminologyCTApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# mdr_ct_packages_get
#
# 
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'mdr_ct_packages_get' } = {
        summary => '',
        params => $params,
        returns => 'CtPackages',
        };
}
# @return CtPackages
#
sub mdr_ct_packages_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/mdr/ct/packages';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CtPackages', $response);
    return $_response_object;
}

#
# mdr_ct_packages_package_codelists_codelist_get
#
# 
#
# @param string $package CT Package Identifier (required)
# @param string $codelist CT Codelist Identifier (required)
{
    my $params = {
    'package' => {
        data_type => 'string',
        description => 'CT Package Identifier',
        required => '1',
    },
    'codelist' => {
        data_type => 'string',
        description => 'CT Codelist Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_ct_packages_package_codelists_codelist_get' } = {
        summary => '',
        params => $params,
        returns => 'CtCodelist',
        };
}
# @return CtCodelist
#
sub mdr_ct_packages_package_codelists_codelist_get {
    my ($self, %args) = @_;

    # verify the required parameter 'package' is set
    unless (exists $args{'package'}) {
      croak("Missing the required parameter 'package' when calling mdr_ct_packages_package_codelists_codelist_get");
    }

    # verify the required parameter 'codelist' is set
    unless (exists $args{'codelist'}) {
      croak("Missing the required parameter 'codelist' when calling mdr_ct_packages_package_codelists_codelist_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/ct/packages/{package}/codelists/{codelist}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'package'}) {
        my $_base_variable = "{" . "package" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'package'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'codelist'}) {
        my $_base_variable = "{" . "codelist" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'codelist'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CtCodelist', $response);
    return $_response_object;
}

#
# mdr_ct_packages_package_codelists_codelist_terms_get
#
# 
#
# @param string $package CT Package Identifier (required)
# @param string $codelist CT Codelist Identifier (required)
{
    my $params = {
    'package' => {
        data_type => 'string',
        description => 'CT Package Identifier',
        required => '1',
    },
    'codelist' => {
        data_type => 'string',
        description => 'CT Codelist Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_ct_packages_package_codelists_codelist_terms_get' } = {
        summary => '',
        params => $params,
        returns => 'CtCodelistTerms',
        };
}
# @return CtCodelistTerms
#
sub mdr_ct_packages_package_codelists_codelist_terms_get {
    my ($self, %args) = @_;

    # verify the required parameter 'package' is set
    unless (exists $args{'package'}) {
      croak("Missing the required parameter 'package' when calling mdr_ct_packages_package_codelists_codelist_terms_get");
    }

    # verify the required parameter 'codelist' is set
    unless (exists $args{'codelist'}) {
      croak("Missing the required parameter 'codelist' when calling mdr_ct_packages_package_codelists_codelist_terms_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/ct/packages/{package}/codelists/{codelist}/terms';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'package'}) {
        my $_base_variable = "{" . "package" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'package'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'codelist'}) {
        my $_base_variable = "{" . "codelist" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'codelist'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CtCodelistTerms', $response);
    return $_response_object;
}

#
# mdr_ct_packages_package_codelists_codelist_terms_term_get
#
# 
#
# @param string $package CT Package Product Identifier (required)
# @param string $codelist CT Codelist Identifier (required)
# @param string $term CT Codelist Term Identifier (required)
{
    my $params = {
    'package' => {
        data_type => 'string',
        description => 'CT Package Product Identifier',
        required => '1',
    },
    'codelist' => {
        data_type => 'string',
        description => 'CT Codelist Identifier',
        required => '1',
    },
    'term' => {
        data_type => 'string',
        description => 'CT Codelist Term Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_ct_packages_package_codelists_codelist_terms_term_get' } = {
        summary => '',
        params => $params,
        returns => 'CtTerm',
        };
}
# @return CtTerm
#
sub mdr_ct_packages_package_codelists_codelist_terms_term_get {
    my ($self, %args) = @_;

    # verify the required parameter 'package' is set
    unless (exists $args{'package'}) {
      croak("Missing the required parameter 'package' when calling mdr_ct_packages_package_codelists_codelist_terms_term_get");
    }

    # verify the required parameter 'codelist' is set
    unless (exists $args{'codelist'}) {
      croak("Missing the required parameter 'codelist' when calling mdr_ct_packages_package_codelists_codelist_terms_term_get");
    }

    # verify the required parameter 'term' is set
    unless (exists $args{'term'}) {
      croak("Missing the required parameter 'term' when calling mdr_ct_packages_package_codelists_codelist_terms_term_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/ct/packages/{package}/codelists/{codelist}/terms/{term}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'package'}) {
        my $_base_variable = "{" . "package" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'package'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'codelist'}) {
        my $_base_variable = "{" . "codelist" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'codelist'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'term'}) {
        my $_base_variable = "{" . "term" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'term'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CtTerm', $response);
    return $_response_object;
}

#
# mdr_ct_packages_package_codelists_get
#
# 
#
# @param string $package CT Package Identifier (required)
{
    my $params = {
    'package' => {
        data_type => 'string',
        description => 'CT Package Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_ct_packages_package_codelists_get' } = {
        summary => '',
        params => $params,
        returns => 'CtPackageCodelists',
        };
}
# @return CtPackageCodelists
#
sub mdr_ct_packages_package_codelists_get {
    my ($self, %args) = @_;

    # verify the required parameter 'package' is set
    unless (exists $args{'package'}) {
      croak("Missing the required parameter 'package' when calling mdr_ct_packages_package_codelists_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/ct/packages/{package}/codelists';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'package'}) {
        my $_base_variable = "{" . "package" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'package'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CtPackageCodelists', $response);
    return $_response_object;
}

#
# mdr_ct_packages_product_get
#
# 
#
# @param string $product CT Package Product Identifier (required)
{
    my $params = {
    'product' => {
        data_type => 'string',
        description => 'CT Package Product Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_ct_packages_product_get' } = {
        summary => '',
        params => $params,
        returns => 'CtPackage',
        };
}
# @return CtPackage
#
sub mdr_ct_packages_product_get {
    my ($self, %args) = @_;

    # verify the required parameter 'product' is set
    unless (exists $args{'product'}) {
      croak("Missing the required parameter 'product' when calling mdr_ct_packages_product_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/ct/packages/{product}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'product'}) {
        my $_base_variable = "{" . "product" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CtPackage', $response);
    return $_response_object;
}

#
# mdr_root_ct_product_group_codelists_codelist_get
#
# 
#
# @param string $product_group CT Product Group Identifier (required)
# @param string $codelist CT Codelist Identifier (required)
{
    my $params = {
    'product_group' => {
        data_type => 'string',
        description => 'CT Product Group Identifier',
        required => '1',
    },
    'codelist' => {
        data_type => 'string',
        description => 'CT Codelist Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_root_ct_product_group_codelists_codelist_get' } = {
        summary => '',
        params => $params,
        returns => 'RootCtCodelist',
        };
}
# @return RootCtCodelist
#
sub mdr_root_ct_product_group_codelists_codelist_get {
    my ($self, %args) = @_;

    # verify the required parameter 'product_group' is set
    unless (exists $args{'product_group'}) {
      croak("Missing the required parameter 'product_group' when calling mdr_root_ct_product_group_codelists_codelist_get");
    }

    # verify the required parameter 'codelist' is set
    unless (exists $args{'codelist'}) {
      croak("Missing the required parameter 'codelist' when calling mdr_root_ct_product_group_codelists_codelist_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/root/ct/{productGroup}/codelists/{codelist}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'product_group'}) {
        my $_base_variable = "{" . "productGroup" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product_group'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'codelist'}) {
        my $_base_variable = "{" . "codelist" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'codelist'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RootCtCodelist', $response);
    return $_response_object;
}

#
# mdr_root_ct_product_group_codelists_codelist_terms_term_get
#
# 
#
# @param string $product_group CT Product Group Identifier (required)
# @param string $codelist CT Codelist Identifier (required)
# @param string $term CT Codelist Term Identifier (required)
{
    my $params = {
    'product_group' => {
        data_type => 'string',
        description => 'CT Product Group Identifier',
        required => '1',
    },
    'codelist' => {
        data_type => 'string',
        description => 'CT Codelist Identifier',
        required => '1',
    },
    'term' => {
        data_type => 'string',
        description => 'CT Codelist Term Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_root_ct_product_group_codelists_codelist_terms_term_get' } = {
        summary => '',
        params => $params,
        returns => 'RootCtTerm',
        };
}
# @return RootCtTerm
#
sub mdr_root_ct_product_group_codelists_codelist_terms_term_get {
    my ($self, %args) = @_;

    # verify the required parameter 'product_group' is set
    unless (exists $args{'product_group'}) {
      croak("Missing the required parameter 'product_group' when calling mdr_root_ct_product_group_codelists_codelist_terms_term_get");
    }

    # verify the required parameter 'codelist' is set
    unless (exists $args{'codelist'}) {
      croak("Missing the required parameter 'codelist' when calling mdr_root_ct_product_group_codelists_codelist_terms_term_get");
    }

    # verify the required parameter 'term' is set
    unless (exists $args{'term'}) {
      croak("Missing the required parameter 'term' when calling mdr_root_ct_product_group_codelists_codelist_terms_term_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/root/ct/{productGroup}/codelists/{codelist}/terms/{term}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'product_group'}) {
        my $_base_variable = "{" . "productGroup" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'product_group'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'codelist'}) {
        my $_base_variable = "{" . "codelist" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'codelist'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'term'}) {
        my $_base_variable = "{" . "term" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'term'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RootCtTerm', $response);
    return $_response_object;
}

1;

=begin comment

CDISC Library API

REST API Documentation for CDISC Library in production server

The version of the OpenAPI document: 1.1.0
Contact: cdisc_library_support@cdisc.org
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::SearchesApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# mdr_search_get
#
# 
#
# @param string $q Search Term Expression (required)
# @param string $highlight Search Highlight Expression (optional)
# @param double $start Initial Search Result Index (optional, default to 0)
# @param double $page_size Number of Search Results to Return (optional, default to 100)
# @param string $class Limit Search by Setting Scope to Class (optional)
# @param string $codelist Limit Search by Setting Scope to Codelist (optional)
# @param string $concept_id Limit Search by Setting Scope to Concept ID (optional)
# @param string $core Limit Search by Setting Scope to Core (optional)
# @param string $data_structure Limit Search by Setting Scope to Data Structure (optional)
# @param string $dataset_structure Limit Search by Setting Scope to Dataset Structure (optional)
# @param string $definition Limit Search by Setting Scope to Definition (optional)
# @param string $description Limit Search by Setting Scope to Description (optional)
# @param string $domain Limit Search by Setting Scope to Domain (optional)
# @param string $effective_date Limit Search by Setting Scope to Effective Date (optional)
# @param string $extensible Limit Search by Setting Scope to Extensible (optional)
# @param string $href Limit Search by Setting Scope to Href (optional)
# @param string $label Limit Search by Setting Scope to Label (optional)
# @param string $measure_type SLimit Search by Setting Scope to Measure Type (optional)
# @param string $name Limit Search by Setting Scope to Name (optional)
# @param string $preferred_term Limit Search by Setting Scope to Preferred Term (optional)
# @param string $product Limit Search by Setting Scope to Product (optional)
# @param string $product_group Limit Search by Setting Scope to Product Group (optional)
# @param string $registration_status Limit Search by Setting Scope to Registration Status (optional)
# @param string $role_description Limit Search by Setting Scope to Role Description (optional)
# @param string $sdtm_target Limit Search by Setting Scope to SDTM Target (optional)
# @param string $simple_datatype Limit Search by Setting Scope to Simple Datatype (optional)
# @param string $submission_value Limit Search by Setting Scope to Submission Value (optional)
# @param string $synonyms Limit Search by Setting Scope to Synonyms (optional)
# @param string $type Limit Search by Setting Scope to Type (optional)
# @param string $ui_href Limit Search by Setting Scope to UI Href (optional)
# @param string $value_domain Limit Search by Setting Scope to Value Domain (optional)
# @param string $variable_set Limit Search by Setting Scope to Variable Set (optional)
# @param string $version Limit Search by Setting Scope to Version (optional)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Search Term Expression',
        required => '1',
    },
    'highlight' => {
        data_type => 'string',
        description => 'Search Highlight Expression',
        required => '0',
    },
    'start' => {
        data_type => 'double',
        description => 'Initial Search Result Index',
        required => '0',
    },
    'page_size' => {
        data_type => 'double',
        description => 'Number of Search Results to Return',
        required => '0',
    },
    'class' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Class',
        required => '0',
    },
    'codelist' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Codelist',
        required => '0',
    },
    'concept_id' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Concept ID',
        required => '0',
    },
    'core' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Core',
        required => '0',
    },
    'data_structure' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Data Structure',
        required => '0',
    },
    'dataset_structure' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Dataset Structure',
        required => '0',
    },
    'definition' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Definition',
        required => '0',
    },
    'description' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Description',
        required => '0',
    },
    'domain' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Domain',
        required => '0',
    },
    'effective_date' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Effective Date',
        required => '0',
    },
    'extensible' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Extensible',
        required => '0',
    },
    'href' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Href',
        required => '0',
    },
    'label' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Label',
        required => '0',
    },
    'measure_type' => {
        data_type => 'string',
        description => 'SLimit Search by Setting Scope to Measure Type',
        required => '0',
    },
    'name' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Name',
        required => '0',
    },
    'preferred_term' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Preferred Term',
        required => '0',
    },
    'product' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Product',
        required => '0',
    },
    'product_group' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Product Group',
        required => '0',
    },
    'registration_status' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Registration Status',
        required => '0',
    },
    'role_description' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Role Description',
        required => '0',
    },
    'sdtm_target' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to SDTM Target',
        required => '0',
    },
    'simple_datatype' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Simple Datatype',
        required => '0',
    },
    'submission_value' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Submission Value',
        required => '0',
    },
    'synonyms' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Synonyms',
        required => '0',
    },
    'type' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Type',
        required => '0',
    },
    'ui_href' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to UI Href',
        required => '0',
    },
    'value_domain' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Value Domain',
        required => '0',
    },
    'variable_set' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Variable Set',
        required => '0',
    },
    'version' => {
        data_type => 'string',
        description => 'Limit Search by Setting Scope to Version',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_search_get' } = {
        summary => '',
        params => $params,
        returns => 'DefaultSearchResponse',
        };
}
# @return DefaultSearchResponse
#
sub mdr_search_get {
    my ($self, %args) = @_;

    # verify the required parameter 'q' is set
    unless (exists $args{'q'}) {
      croak("Missing the required parameter 'q' when calling mdr_search_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/search';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    # query params
    if ( exists $args{'highlight'}) {
        $query_params->{'highlight'} = $self->{api_client}->to_query_value($args{'highlight'});
    }

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # query params
    if ( exists $args{'class'}) {
        $query_params->{'class'} = $self->{api_client}->to_query_value($args{'class'});
    }

    # query params
    if ( exists $args{'codelist'}) {
        $query_params->{'codelist'} = $self->{api_client}->to_query_value($args{'codelist'});
    }

    # query params
    if ( exists $args{'concept_id'}) {
        $query_params->{'conceptId'} = $self->{api_client}->to_query_value($args{'concept_id'});
    }

    # query params
    if ( exists $args{'core'}) {
        $query_params->{'core'} = $self->{api_client}->to_query_value($args{'core'});
    }

    # query params
    if ( exists $args{'data_structure'}) {
        $query_params->{'dataStructure'} = $self->{api_client}->to_query_value($args{'data_structure'});
    }

    # query params
    if ( exists $args{'dataset_structure'}) {
        $query_params->{'datasetStructure'} = $self->{api_client}->to_query_value($args{'dataset_structure'});
    }

    # query params
    if ( exists $args{'definition'}) {
        $query_params->{'definition'} = $self->{api_client}->to_query_value($args{'definition'});
    }

    # query params
    if ( exists $args{'description'}) {
        $query_params->{'description'} = $self->{api_client}->to_query_value($args{'description'});
    }

    # query params
    if ( exists $args{'domain'}) {
        $query_params->{'domain'} = $self->{api_client}->to_query_value($args{'domain'});
    }

    # query params
    if ( exists $args{'effective_date'}) {
        $query_params->{'effectiveDate'} = $self->{api_client}->to_query_value($args{'effective_date'});
    }

    # query params
    if ( exists $args{'extensible'}) {
        $query_params->{'extensible'} = $self->{api_client}->to_query_value($args{'extensible'});
    }

    # query params
    if ( exists $args{'href'}) {
        $query_params->{'href'} = $self->{api_client}->to_query_value($args{'href'});
    }

    # query params
    if ( exists $args{'label'}) {
        $query_params->{'label'} = $self->{api_client}->to_query_value($args{'label'});
    }

    # query params
    if ( exists $args{'measure_type'}) {
        $query_params->{'measureType'} = $self->{api_client}->to_query_value($args{'measure_type'});
    }

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'preferred_term'}) {
        $query_params->{'preferredTerm'} = $self->{api_client}->to_query_value($args{'preferred_term'});
    }

    # query params
    if ( exists $args{'product'}) {
        $query_params->{'product'} = $self->{api_client}->to_query_value($args{'product'});
    }

    # query params
    if ( exists $args{'product_group'}) {
        $query_params->{'productGroup'} = $self->{api_client}->to_query_value($args{'product_group'});
    }

    # query params
    if ( exists $args{'registration_status'}) {
        $query_params->{'registrationStatus'} = $self->{api_client}->to_query_value($args{'registration_status'});
    }

    # query params
    if ( exists $args{'role_description'}) {
        $query_params->{'roleDescription'} = $self->{api_client}->to_query_value($args{'role_description'});
    }

    # query params
    if ( exists $args{'sdtm_target'}) {
        $query_params->{'sdtmTarget'} = $self->{api_client}->to_query_value($args{'sdtm_target'});
    }

    # query params
    if ( exists $args{'simple_datatype'}) {
        $query_params->{'simpleDatatype'} = $self->{api_client}->to_query_value($args{'simple_datatype'});
    }

    # query params
    if ( exists $args{'submission_value'}) {
        $query_params->{'submissionValue'} = $self->{api_client}->to_query_value($args{'submission_value'});
    }

    # query params
    if ( exists $args{'synonyms'}) {
        $query_params->{'synonyms'} = $self->{api_client}->to_query_value($args{'synonyms'});
    }

    # query params
    if ( exists $args{'type'}) {
        $query_params->{'type'} = $self->{api_client}->to_query_value($args{'type'});
    }

    # query params
    if ( exists $args{'ui_href'}) {
        $query_params->{'uiHref'} = $self->{api_client}->to_query_value($args{'ui_href'});
    }

    # query params
    if ( exists $args{'value_domain'}) {
        $query_params->{'valueDomain'} = $self->{api_client}->to_query_value($args{'value_domain'});
    }

    # query params
    if ( exists $args{'variable_set'}) {
        $query_params->{'variableSet'} = $self->{api_client}->to_query_value($args{'variable_set'});
    }

    # query params
    if ( exists $args{'version'}) {
        $query_params->{'version'} = $self->{api_client}->to_query_value($args{'version'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DefaultSearchResponse', $response);
    return $_response_object;
}

#
# mdr_search_scopes_get
#
# 
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'mdr_search_scopes_get' } = {
        summary => '',
        params => $params,
        returns => 'MdrSearchScopesGet200Response',
        };
}
# @return MdrSearchScopesGet200Response
#
sub mdr_search_scopes_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/mdr/search/scopes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MdrSearchScopesGet200Response', $response);
    return $_response_object;
}

#
# mdr_search_scopes_scope_get
#
# 
#
# @param DefaultSearchScopes $scope Search Scope (required)
{
    my $params = {
    'scope' => {
        data_type => 'DefaultSearchScopes',
        description => 'Search Scope',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_search_scopes_scope_get' } = {
        summary => '',
        params => $params,
        returns => 'ScopeValues',
        };
}
# @return ScopeValues
#
sub mdr_search_scopes_scope_get {
    my ($self, %args) = @_;

    # verify the required parameter 'scope' is set
    unless (exists $args{'scope'}) {
      croak("Missing the required parameter 'scope' when calling mdr_search_scopes_scope_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/search/scopes/{scope}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'scope'}) {
        my $_base_variable = "{" . "scope" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'scope'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ScopeValues', $response);
    return $_response_object;
}

1;

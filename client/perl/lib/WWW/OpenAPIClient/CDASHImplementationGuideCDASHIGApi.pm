=begin comment

CDISC Library API

REST API Documentation for CDISC Library in production server

The version of the OpenAPI document: 1.1.0
Contact: cdisc_library_support@cdisc.org
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::CDASHImplementationGuideCDASHIGApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# mdr_cdashig_version_classes_class_domains_get
#
# 
#
# @param string $version CDISC Library Product Version (required)
# @param string $class CDASHIG Class Identifier (required)
{
    my $params = {
    'version' => {
        data_type => 'string',
        description => 'CDISC Library Product Version',
        required => '1',
    },
    'class' => {
        data_type => 'string',
        description => 'CDASHIG Class Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_cdashig_version_classes_class_domains_get' } = {
        summary => '',
        params => $params,
        returns => 'CdashigClassDomains',
        };
}
# @return CdashigClassDomains
#
sub mdr_cdashig_version_classes_class_domains_get {
    my ($self, %args) = @_;

    # verify the required parameter 'version' is set
    unless (exists $args{'version'}) {
      croak("Missing the required parameter 'version' when calling mdr_cdashig_version_classes_class_domains_get");
    }

    # verify the required parameter 'class' is set
    unless (exists $args{'class'}) {
      croak("Missing the required parameter 'class' when calling mdr_cdashig_version_classes_class_domains_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/cdashig/{version}/classes/{class}/domains';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'version'}) {
        my $_base_variable = "{" . "version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'class'}) {
        my $_base_variable = "{" . "class" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'class'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CdashigClassDomains', $response);
    return $_response_object;
}

#
# mdr_cdashig_version_classes_class_get
#
# 
#
# @param string $version CDISC Library Product Version (required)
# @param string $class CDASHIG Class Identifier (required)
{
    my $params = {
    'version' => {
        data_type => 'string',
        description => 'CDISC Library Product Version',
        required => '1',
    },
    'class' => {
        data_type => 'string',
        description => 'CDASHIG Class Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_cdashig_version_classes_class_get' } = {
        summary => '',
        params => $params,
        returns => 'CdashigClass',
        };
}
# @return CdashigClass
#
sub mdr_cdashig_version_classes_class_get {
    my ($self, %args) = @_;

    # verify the required parameter 'version' is set
    unless (exists $args{'version'}) {
      croak("Missing the required parameter 'version' when calling mdr_cdashig_version_classes_class_get");
    }

    # verify the required parameter 'class' is set
    unless (exists $args{'class'}) {
      croak("Missing the required parameter 'class' when calling mdr_cdashig_version_classes_class_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/cdashig/{version}/classes/{class}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'version'}) {
        my $_base_variable = "{" . "version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'class'}) {
        my $_base_variable = "{" . "class" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'class'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CdashigClass', $response);
    return $_response_object;
}

#
# mdr_cdashig_version_classes_class_scenarios_get
#
# 
#
# @param string $version CDISC Library Product Version (required)
# @param string $class CDASHIG Class Identifier (required)
{
    my $params = {
    'version' => {
        data_type => 'string',
        description => 'CDISC Library Product Version',
        required => '1',
    },
    'class' => {
        data_type => 'string',
        description => 'CDASHIG Class Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_cdashig_version_classes_class_scenarios_get' } = {
        summary => '',
        params => $params,
        returns => 'CdashigClassScenarios',
        };
}
# @return CdashigClassScenarios
#
sub mdr_cdashig_version_classes_class_scenarios_get {
    my ($self, %args) = @_;

    # verify the required parameter 'version' is set
    unless (exists $args{'version'}) {
      croak("Missing the required parameter 'version' when calling mdr_cdashig_version_classes_class_scenarios_get");
    }

    # verify the required parameter 'class' is set
    unless (exists $args{'class'}) {
      croak("Missing the required parameter 'class' when calling mdr_cdashig_version_classes_class_scenarios_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/cdashig/{version}/classes/{class}/scenarios';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'version'}) {
        my $_base_variable = "{" . "version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'class'}) {
        my $_base_variable = "{" . "class" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'class'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CdashigClassScenarios', $response);
    return $_response_object;
}

#
# mdr_cdashig_version_classes_get
#
# 
#
# @param string $version CDISC Library Product Version (required)
{
    my $params = {
    'version' => {
        data_type => 'string',
        description => 'CDISC Library Product Version',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_cdashig_version_classes_get' } = {
        summary => '',
        params => $params,
        returns => 'CdashigProductClasses',
        };
}
# @return CdashigProductClasses
#
sub mdr_cdashig_version_classes_get {
    my ($self, %args) = @_;

    # verify the required parameter 'version' is set
    unless (exists $args{'version'}) {
      croak("Missing the required parameter 'version' when calling mdr_cdashig_version_classes_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/cdashig/{version}/classes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'version'}) {
        my $_base_variable = "{" . "version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CdashigProductClasses', $response);
    return $_response_object;
}

#
# mdr_cdashig_version_domains_domain_fields_field_get
#
# 
#
# @param string $version CDISC Library Product Version (required)
# @param string $domain CDASHIG Domain Identifier (required)
# @param string $field CDASHIG Field Identifier (required)
{
    my $params = {
    'version' => {
        data_type => 'string',
        description => 'CDISC Library Product Version',
        required => '1',
    },
    'domain' => {
        data_type => 'string',
        description => 'CDASHIG Domain Identifier',
        required => '1',
    },
    'field' => {
        data_type => 'string',
        description => 'CDASHIG Field Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_cdashig_version_domains_domain_fields_field_get' } = {
        summary => '',
        params => $params,
        returns => 'CdashigDomainField',
        };
}
# @return CdashigDomainField
#
sub mdr_cdashig_version_domains_domain_fields_field_get {
    my ($self, %args) = @_;

    # verify the required parameter 'version' is set
    unless (exists $args{'version'}) {
      croak("Missing the required parameter 'version' when calling mdr_cdashig_version_domains_domain_fields_field_get");
    }

    # verify the required parameter 'domain' is set
    unless (exists $args{'domain'}) {
      croak("Missing the required parameter 'domain' when calling mdr_cdashig_version_domains_domain_fields_field_get");
    }

    # verify the required parameter 'field' is set
    unless (exists $args{'field'}) {
      croak("Missing the required parameter 'field' when calling mdr_cdashig_version_domains_domain_fields_field_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/cdashig/{version}/domains/{domain}/fields/{field}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'version'}) {
        my $_base_variable = "{" . "version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'domain'}) {
        my $_base_variable = "{" . "domain" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'domain'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'field'}) {
        my $_base_variable = "{" . "field" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'field'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CdashigDomainField', $response);
    return $_response_object;
}

#
# mdr_cdashig_version_domains_domain_fields_get
#
# 
#
# @param string $version CDISC Library Product Version (required)
# @param string $domain CDASHIG Domain Identifier (required)
{
    my $params = {
    'version' => {
        data_type => 'string',
        description => 'CDISC Library Product Version',
        required => '1',
    },
    'domain' => {
        data_type => 'string',
        description => 'CDASHIG Domain Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_cdashig_version_domains_domain_fields_get' } = {
        summary => '',
        params => $params,
        returns => 'CdashigDomainFields',
        };
}
# @return CdashigDomainFields
#
sub mdr_cdashig_version_domains_domain_fields_get {
    my ($self, %args) = @_;

    # verify the required parameter 'version' is set
    unless (exists $args{'version'}) {
      croak("Missing the required parameter 'version' when calling mdr_cdashig_version_domains_domain_fields_get");
    }

    # verify the required parameter 'domain' is set
    unless (exists $args{'domain'}) {
      croak("Missing the required parameter 'domain' when calling mdr_cdashig_version_domains_domain_fields_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/cdashig/{version}/domains/{domain}/fields';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'version'}) {
        my $_base_variable = "{" . "version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'domain'}) {
        my $_base_variable = "{" . "domain" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'domain'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CdashigDomainFields', $response);
    return $_response_object;
}

#
# mdr_cdashig_version_domains_domain_get
#
# 
#
# @param string $version CDISC Library Product Version (required)
# @param string $domain CDASHIG Domain Identifier (required)
{
    my $params = {
    'version' => {
        data_type => 'string',
        description => 'CDISC Library Product Version',
        required => '1',
    },
    'domain' => {
        data_type => 'string',
        description => 'CDASHIG Domain Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_cdashig_version_domains_domain_get' } = {
        summary => '',
        params => $params,
        returns => 'CdashigDomain',
        };
}
# @return CdashigDomain
#
sub mdr_cdashig_version_domains_domain_get {
    my ($self, %args) = @_;

    # verify the required parameter 'version' is set
    unless (exists $args{'version'}) {
      croak("Missing the required parameter 'version' when calling mdr_cdashig_version_domains_domain_get");
    }

    # verify the required parameter 'domain' is set
    unless (exists $args{'domain'}) {
      croak("Missing the required parameter 'domain' when calling mdr_cdashig_version_domains_domain_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/cdashig/{version}/domains/{domain}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'version'}) {
        my $_base_variable = "{" . "version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'domain'}) {
        my $_base_variable = "{" . "domain" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'domain'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CdashigDomain', $response);
    return $_response_object;
}

#
# mdr_cdashig_version_domains_get
#
# 
#
# @param string $version CDISC Library Product Version (required)
{
    my $params = {
    'version' => {
        data_type => 'string',
        description => 'CDISC Library Product Version',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_cdashig_version_domains_get' } = {
        summary => '',
        params => $params,
        returns => 'CdashigProductDomains',
        };
}
# @return CdashigProductDomains
#
sub mdr_cdashig_version_domains_get {
    my ($self, %args) = @_;

    # verify the required parameter 'version' is set
    unless (exists $args{'version'}) {
      croak("Missing the required parameter 'version' when calling mdr_cdashig_version_domains_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/cdashig/{version}/domains';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'version'}) {
        my $_base_variable = "{" . "version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CdashigProductDomains', $response);
    return $_response_object;
}

#
# mdr_cdashig_version_get
#
# 
#
# @param string $version CDISC Library Product Version (required)
{
    my $params = {
    'version' => {
        data_type => 'string',
        description => 'CDISC Library Product Version',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_cdashig_version_get' } = {
        summary => '',
        params => $params,
        returns => 'CdashigProduct',
        };
}
# @return CdashigProduct
#
sub mdr_cdashig_version_get {
    my ($self, %args) = @_;

    # verify the required parameter 'version' is set
    unless (exists $args{'version'}) {
      croak("Missing the required parameter 'version' when calling mdr_cdashig_version_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/cdashig/{version}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'version'}) {
        my $_base_variable = "{" . "version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CdashigProduct', $response);
    return $_response_object;
}

#
# mdr_cdashig_version_scenarios_domain_scenario_fields_field_get
#
# 
#
# @param string $version CDISC Library Product Version (required)
# @param string $domain CDASHIG Domain Identifier (required)
# @param string $scenario CDASHIG Scenario Identifier (required)
# @param string $field CDASHIG Field Identifier (required)
{
    my $params = {
    'version' => {
        data_type => 'string',
        description => 'CDISC Library Product Version',
        required => '1',
    },
    'domain' => {
        data_type => 'string',
        description => 'CDASHIG Domain Identifier',
        required => '1',
    },
    'scenario' => {
        data_type => 'string',
        description => 'CDASHIG Scenario Identifier',
        required => '1',
    },
    'field' => {
        data_type => 'string',
        description => 'CDASHIG Field Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_cdashig_version_scenarios_domain_scenario_fields_field_get' } = {
        summary => '',
        params => $params,
        returns => 'CdashigScenarioField',
        };
}
# @return CdashigScenarioField
#
sub mdr_cdashig_version_scenarios_domain_scenario_fields_field_get {
    my ($self, %args) = @_;

    # verify the required parameter 'version' is set
    unless (exists $args{'version'}) {
      croak("Missing the required parameter 'version' when calling mdr_cdashig_version_scenarios_domain_scenario_fields_field_get");
    }

    # verify the required parameter 'domain' is set
    unless (exists $args{'domain'}) {
      croak("Missing the required parameter 'domain' when calling mdr_cdashig_version_scenarios_domain_scenario_fields_field_get");
    }

    # verify the required parameter 'scenario' is set
    unless (exists $args{'scenario'}) {
      croak("Missing the required parameter 'scenario' when calling mdr_cdashig_version_scenarios_domain_scenario_fields_field_get");
    }

    # verify the required parameter 'field' is set
    unless (exists $args{'field'}) {
      croak("Missing the required parameter 'field' when calling mdr_cdashig_version_scenarios_domain_scenario_fields_field_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields/{field}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'version'}) {
        my $_base_variable = "{" . "version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'domain'}) {
        my $_base_variable = "{" . "domain" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'domain'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'scenario'}) {
        my $_base_variable = "{" . "scenario" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'scenario'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'field'}) {
        my $_base_variable = "{" . "field" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'field'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CdashigScenarioField', $response);
    return $_response_object;
}

#
# mdr_cdashig_version_scenarios_domain_scenario_fields_get
#
# 
#
# @param string $version CDISC Library Product Version (required)
# @param string $domain CDASHIG Domain Identifier (required)
# @param string $scenario CDASHIG Scenario Identifier (required)
{
    my $params = {
    'version' => {
        data_type => 'string',
        description => 'CDISC Library Product Version',
        required => '1',
    },
    'domain' => {
        data_type => 'string',
        description => 'CDASHIG Domain Identifier',
        required => '1',
    },
    'scenario' => {
        data_type => 'string',
        description => 'CDASHIG Scenario Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_cdashig_version_scenarios_domain_scenario_fields_get' } = {
        summary => '',
        params => $params,
        returns => 'CdashigScenarioFields',
        };
}
# @return CdashigScenarioFields
#
sub mdr_cdashig_version_scenarios_domain_scenario_fields_get {
    my ($self, %args) = @_;

    # verify the required parameter 'version' is set
    unless (exists $args{'version'}) {
      croak("Missing the required parameter 'version' when calling mdr_cdashig_version_scenarios_domain_scenario_fields_get");
    }

    # verify the required parameter 'domain' is set
    unless (exists $args{'domain'}) {
      croak("Missing the required parameter 'domain' when calling mdr_cdashig_version_scenarios_domain_scenario_fields_get");
    }

    # verify the required parameter 'scenario' is set
    unless (exists $args{'scenario'}) {
      croak("Missing the required parameter 'scenario' when calling mdr_cdashig_version_scenarios_domain_scenario_fields_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'version'}) {
        my $_base_variable = "{" . "version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'domain'}) {
        my $_base_variable = "{" . "domain" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'domain'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'scenario'}) {
        my $_base_variable = "{" . "scenario" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'scenario'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CdashigScenarioFields', $response);
    return $_response_object;
}

#
# mdr_cdashig_version_scenarios_domain_scenario_get
#
# 
#
# @param string $version CDISC Library Product Version (required)
# @param string $domain CDASHIG Domain Identifier (required)
# @param string $scenario CDASHIG Scenario Identifier (required)
{
    my $params = {
    'version' => {
        data_type => 'string',
        description => 'CDISC Library Product Version',
        required => '1',
    },
    'domain' => {
        data_type => 'string',
        description => 'CDASHIG Domain Identifier',
        required => '1',
    },
    'scenario' => {
        data_type => 'string',
        description => 'CDASHIG Scenario Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_cdashig_version_scenarios_domain_scenario_get' } = {
        summary => '',
        params => $params,
        returns => 'CdashigScenario',
        };
}
# @return CdashigScenario
#
sub mdr_cdashig_version_scenarios_domain_scenario_get {
    my ($self, %args) = @_;

    # verify the required parameter 'version' is set
    unless (exists $args{'version'}) {
      croak("Missing the required parameter 'version' when calling mdr_cdashig_version_scenarios_domain_scenario_get");
    }

    # verify the required parameter 'domain' is set
    unless (exists $args{'domain'}) {
      croak("Missing the required parameter 'domain' when calling mdr_cdashig_version_scenarios_domain_scenario_get");
    }

    # verify the required parameter 'scenario' is set
    unless (exists $args{'scenario'}) {
      croak("Missing the required parameter 'scenario' when calling mdr_cdashig_version_scenarios_domain_scenario_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/cdashig/{version}/scenarios/{domain}.{scenario}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'version'}) {
        my $_base_variable = "{" . "version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'domain'}) {
        my $_base_variable = "{" . "domain" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'domain'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'scenario'}) {
        my $_base_variable = "{" . "scenario" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'scenario'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CdashigScenario', $response);
    return $_response_object;
}

#
# mdr_cdashig_version_scenarios_get
#
# 
#
# @param string $version CDISC Library Product Version (required)
{
    my $params = {
    'version' => {
        data_type => 'string',
        description => 'CDISC Library Product Version',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_cdashig_version_scenarios_get' } = {
        summary => '',
        params => $params,
        returns => 'CdashigProductScenarios',
        };
}
# @return CdashigProductScenarios
#
sub mdr_cdashig_version_scenarios_get {
    my ($self, %args) = @_;

    # verify the required parameter 'version' is set
    unless (exists $args{'version'}) {
      croak("Missing the required parameter 'version' when calling mdr_cdashig_version_scenarios_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/cdashig/{version}/scenarios';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'version'}) {
        my $_base_variable = "{" . "version" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'version'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CdashigProductScenarios', $response);
    return $_response_object;
}

#
# mdr_root_cdashig_domains_domain_fields_field_get
#
# 
#
# @param string $domain CDASHIG Domain Identifier (required)
# @param string $field CDASHIG Field Identifier (required)
{
    my $params = {
    'domain' => {
        data_type => 'string',
        description => 'CDASHIG Domain Identifier',
        required => '1',
    },
    'field' => {
        data_type => 'string',
        description => 'CDASHIG Field Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_root_cdashig_domains_domain_fields_field_get' } = {
        summary => '',
        params => $params,
        returns => 'RootCdashigDomainField',
        };
}
# @return RootCdashigDomainField
#
sub mdr_root_cdashig_domains_domain_fields_field_get {
    my ($self, %args) = @_;

    # verify the required parameter 'domain' is set
    unless (exists $args{'domain'}) {
      croak("Missing the required parameter 'domain' when calling mdr_root_cdashig_domains_domain_fields_field_get");
    }

    # verify the required parameter 'field' is set
    unless (exists $args{'field'}) {
      croak("Missing the required parameter 'field' when calling mdr_root_cdashig_domains_domain_fields_field_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/root/cdashig/domains/{domain}/fields/{field}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'domain'}) {
        my $_base_variable = "{" . "domain" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'domain'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'field'}) {
        my $_base_variable = "{" . "field" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'field'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RootCdashigDomainField', $response);
    return $_response_object;
}

#
# mdr_root_cdashig_scenarios_domain_scenario_fields_field_get
#
# 
#
# @param string $domain CDASHIG Domain Identifier (required)
# @param string $scenario CDASHIG Scenario Identifier (required)
# @param string $field CDASHIG Field Identifier (required)
{
    my $params = {
    'domain' => {
        data_type => 'string',
        description => 'CDASHIG Domain Identifier',
        required => '1',
    },
    'scenario' => {
        data_type => 'string',
        description => 'CDASHIG Scenario Identifier',
        required => '1',
    },
    'field' => {
        data_type => 'string',
        description => 'CDASHIG Field Identifier',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'mdr_root_cdashig_scenarios_domain_scenario_fields_field_get' } = {
        summary => '',
        params => $params,
        returns => 'RootCdashigScenarioField',
        };
}
# @return RootCdashigScenarioField
#
sub mdr_root_cdashig_scenarios_domain_scenario_fields_field_get {
    my ($self, %args) = @_;

    # verify the required parameter 'domain' is set
    unless (exists $args{'domain'}) {
      croak("Missing the required parameter 'domain' when calling mdr_root_cdashig_scenarios_domain_scenario_fields_field_get");
    }

    # verify the required parameter 'scenario' is set
    unless (exists $args{'scenario'}) {
      croak("Missing the required parameter 'scenario' when calling mdr_root_cdashig_scenarios_domain_scenario_fields_field_get");
    }

    # verify the required parameter 'field' is set
    unless (exists $args{'field'}) {
      croak("Missing the required parameter 'field' when calling mdr_root_cdashig_scenarios_domain_scenario_fields_field_get");
    }

    # parse inputs
    my $_resource_path = '/mdr/root/cdashig/scenarios/{domain}.{scenario}/fields/{field}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json', 'application/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'domain'}) {
        my $_base_variable = "{" . "domain" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'domain'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'scenario'}) {
        my $_base_variable = "{" . "scenario" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'scenario'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'field'}) {
        my $_base_variable = "{" . "field" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'field'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(basicAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RootCdashigScenarioField', $response);
    return $_response_object;
}

1;

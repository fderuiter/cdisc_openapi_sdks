/** CDISC Library API
  * REST API Documentation for CDISC Library in production server
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: cdisc_library_support@cdisc.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** 
  * @param ordinal 
  * @param domain 
  * @param scenario 
  * @param links 
  * @param fields 
  */
case class CdashigScenario(
    ordinal: Option[String] = None,
    domain: Option[String] = None,
    scenario: Option[String] = None,
    links: Option[CdashigScenarioLinks] = None,
    fields: Option[Seq[CdashigScenarioField]] = None
)
  
object CdashigScenario {
  given encoderCdashigScenario: Encoder[CdashigScenario] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.ordinal.map(v => "ordinal" -> v.asJson),
        t.domain.map(v => "domain" -> v.asJson),
        t.scenario.map(v => "scenario" -> v.asJson),
        t.links.map(v => "_links" -> v.asJson),
        t.fields.map(v => "fields" -> v.asJson)
      ).flatten
    }
  }
  given decoderCdashigScenario: Decoder[CdashigScenario] = Decoder.instance { c =>
    for {
      ordinal <- c.downField("ordinal").as[Option[String]]
      domain <- c.downField("domain").as[Option[String]]
      scenario <- c.downField("scenario").as[Option[String]]
      links <- c.downField("_links").as[Option[CdashigScenarioLinks]]
      fields <- c.downField("fields").as[Option[Seq[CdashigScenarioField]]]
    } yield CdashigScenario(
      ordinal = ordinal,
      domain = domain,
      scenario = scenario,
      links = links,
      fields = fields
    )
  }
}


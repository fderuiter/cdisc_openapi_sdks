/** CDISC Library API
  * REST API Documentation for CDISC Library in production server
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: cdisc_library_support@cdisc.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param healthy 
  * @param ldapAuthenticationHealthy 
  * @param ldapAuthorizationHealthy 
  * @param databaseHealthy 
  * @param esHealthy 
  */
case class Health(
    healthy: Option[Boolean] = None,
    ldapAuthenticationHealthy: Option[Boolean] = None,
    ldapAuthorizationHealthy: Option[Boolean] = None,
    databaseHealthy: Option[Boolean] = None,
    esHealthy: Option[Boolean] = None
)
  
object Health {
  given encoderHealth: Encoder[Health] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.healthy.map(v => "healthy" -> v.asJson),
        t.ldapAuthenticationHealthy.map(v => "ldapAuthenticationHealthy" -> v.asJson),
        t.ldapAuthorizationHealthy.map(v => "ldapAuthorizationHealthy" -> v.asJson),
        t.databaseHealthy.map(v => "databaseHealthy" -> v.asJson),
        t.esHealthy.map(v => "esHealthy" -> v.asJson)
      ).flatten
    }
  }
  given decoderHealth: Decoder[Health] = Decoder.instance { c =>
    for {
      healthy <- c.downField("healthy").as[Option[Boolean]]
      ldapAuthenticationHealthy <- c.downField("ldapAuthenticationHealthy").as[Option[Boolean]]
      ldapAuthorizationHealthy <- c.downField("ldapAuthorizationHealthy").as[Option[Boolean]]
      databaseHealthy <- c.downField("databaseHealthy").as[Option[Boolean]]
      esHealthy <- c.downField("esHealthy").as[Option[Boolean]]
    } yield Health(
      healthy = healthy,
      ldapAuthenticationHealthy = ldapAuthenticationHealthy,
      ldapAuthorizationHealthy = ldapAuthorizationHealthy,
      databaseHealthy = databaseHealthy,
      esHealthy = esHealthy
    )
  }
}


/** CDISC Library API
  * REST API Documentation for CDISC Library in production server
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: cdisc_library_support@cdisc.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param itemSequence 
  * @param testName 
  * @param itemText 
  * @param testsCodelistCCode 
  * @param testsTermCCode 
  * @param testCodesCodelistCCode 
  * @param testCodesTermCCode 
  * @param subcategorysCodelistCCode 
  * @param subcategorysTermCCode 
  * @param evaluatorsCodelistCCode 
  * @param evaluatorsTermCCode 
  * @param freeFormResponsesDatatype 
  * @param responseGroup 
  */
case class ExportQrsWorkbookItemsRow(
    itemSequence: Option[String] = None,
    testName: Option[String] = None,
    itemText: Option[String] = None,
    testsCodelistCCode: Option[String] = None,
    testsTermCCode: Option[String] = None,
    testCodesCodelistCCode: Option[String] = None,
    testCodesTermCCode: Option[String] = None,
    subcategorysCodelistCCode: Option[String] = None,
    subcategorysTermCCode: Option[String] = None,
    evaluatorsCodelistCCode: Option[String] = None,
    evaluatorsTermCCode: Option[String] = None,
    freeFormResponsesDatatype: Option[String] = None,
    responseGroup: Option[String] = None
)
  
object ExportQrsWorkbookItemsRow {
  given encoderExportQrsWorkbookItemsRow: Encoder[ExportQrsWorkbookItemsRow] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.itemSequence.map(v => "Item Sequence" -> v.asJson),
        t.testName.map(v => "Test Name" -> v.asJson),
        t.itemText.map(v => "Item Text" -> v.asJson),
        t.testsCodelistCCode.map(v => "Test&#39;s Codelist C-Code" -> v.asJson),
        t.testsTermCCode.map(v => "Test&#39;s Term C-Code" -> v.asJson),
        t.testCodesCodelistCCode.map(v => "Test Code&#39;s Codelist C-Code" -> v.asJson),
        t.testCodesTermCCode.map(v => "Test Code&#39;s Term C-Code" -> v.asJson),
        t.subcategorysCodelistCCode.map(v => "Subcategory&#39;s Codelist C-Code" -> v.asJson),
        t.subcategorysTermCCode.map(v => "Subcategory&#39;s Term C-Code" -> v.asJson),
        t.evaluatorsCodelistCCode.map(v => "Evaluator&#39;s Codelist C-Code" -> v.asJson),
        t.evaluatorsTermCCode.map(v => "Evaluator&#39;s Term C-Code" -> v.asJson),
        t.freeFormResponsesDatatype.map(v => "Free-form Response&#39;s Datatype" -> v.asJson),
        t.responseGroup.map(v => "Response Group" -> v.asJson)
      ).flatten
    }
  }
  given decoderExportQrsWorkbookItemsRow: Decoder[ExportQrsWorkbookItemsRow] = Decoder.instance { c =>
    for {
      itemSequence <- c.downField("Item Sequence").as[Option[String]]
      testName <- c.downField("Test Name").as[Option[String]]
      itemText <- c.downField("Item Text").as[Option[String]]
      testsCodelistCCode <- c.downField("Test&#39;s Codelist C-Code").as[Option[String]]
      testsTermCCode <- c.downField("Test&#39;s Term C-Code").as[Option[String]]
      testCodesCodelistCCode <- c.downField("Test Code&#39;s Codelist C-Code").as[Option[String]]
      testCodesTermCCode <- c.downField("Test Code&#39;s Term C-Code").as[Option[String]]
      subcategorysCodelistCCode <- c.downField("Subcategory&#39;s Codelist C-Code").as[Option[String]]
      subcategorysTermCCode <- c.downField("Subcategory&#39;s Term C-Code").as[Option[String]]
      evaluatorsCodelistCCode <- c.downField("Evaluator&#39;s Codelist C-Code").as[Option[String]]
      evaluatorsTermCCode <- c.downField("Evaluator&#39;s Term C-Code").as[Option[String]]
      freeFormResponsesDatatype <- c.downField("Free-form Response&#39;s Datatype").as[Option[String]]
      responseGroup <- c.downField("Response Group").as[Option[String]]
    } yield ExportQrsWorkbookItemsRow(
      itemSequence = itemSequence,
      testName = testName,
      itemText = itemText,
      testsCodelistCCode = testsCodelistCCode,
      testsTermCCode = testsTermCCode,
      testCodesCodelistCCode = testCodesCodelistCCode,
      testCodesTermCCode = testCodesTermCCode,
      subcategorysCodelistCCode = subcategorysCodelistCCode,
      subcategorysTermCCode = subcategorysTermCCode,
      evaluatorsCodelistCCode = evaluatorsCodelistCCode,
      evaluatorsTermCCode = evaluatorsTermCCode,
      freeFormResponsesDatatype = freeFormResponsesDatatype,
      responseGroup = responseGroup
    )
  }
}


/** CDISC Library API
  * REST API Documentation for CDISC Library in production server
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: cdisc_library_support@cdisc.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** 
  * @param version 
  * @param `class` 
  * @param domain 
  * @param variableOrder 
  * @param cDASHVariable 
  * @param cDASHVariableLabel 
  * @param dRAFTCDASHDefinition 
  * @param domainSpecific 
  * @param questionText 
  * @param prompt 
  * @param `type` 
  * @param sDTMTarget 
  * @param mappingInstructions 
  * @param controlledTerminologyCodelistName 
  * @param implementationNotes 
  */
case class ExportCdashDomainVariablesRow(
    version: Option[String] = None,
    `class`: Option[String] = None,
    domain: Option[String] = None,
    variableOrder: Option[String] = None,
    cDASHVariable: Option[String] = None,
    cDASHVariableLabel: Option[String] = None,
    dRAFTCDASHDefinition: Option[String] = None,
    domainSpecific: Option[String] = None,
    questionText: Option[String] = None,
    prompt: Option[String] = None,
    `type`: Option[String] = None,
    sDTMTarget: Option[Seq[String]] = None,
    mappingInstructions: Option[String] = None,
    controlledTerminologyCodelistName: Option[String] = None,
    implementationNotes: Option[String] = None
)
  
object ExportCdashDomainVariablesRow {
  given encoderExportCdashDomainVariablesRow: Encoder[ExportCdashDomainVariablesRow] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.version.map(v => "Version" -> v.asJson),
        t.`class`.map(v => "Class" -> v.asJson),
        t.domain.map(v => "Domain" -> v.asJson),
        t.variableOrder.map(v => "Variable Order" -> v.asJson),
        t.cDASHVariable.map(v => "CDASH Variable" -> v.asJson),
        t.cDASHVariableLabel.map(v => "CDASH Variable Label" -> v.asJson),
        t.dRAFTCDASHDefinition.map(v => "DRAFT CDASH Definition" -> v.asJson),
        t.domainSpecific.map(v => "Domain Specific" -> v.asJson),
        t.questionText.map(v => "Question Text" -> v.asJson),
        t.prompt.map(v => "Prompt" -> v.asJson),
        t.`type`.map(v => "Type" -> v.asJson),
        t.sDTMTarget.map(v => "SDTM Target" -> v.asJson),
        t.mappingInstructions.map(v => "Mapping Instructions" -> v.asJson),
        t.controlledTerminologyCodelistName.map(v => "Controlled Terminology Codelist Name" -> v.asJson),
        t.implementationNotes.map(v => "Implementation Notes" -> v.asJson)
      ).flatten
    }
  }
  given decoderExportCdashDomainVariablesRow: Decoder[ExportCdashDomainVariablesRow] = Decoder.instance { c =>
    for {
      version <- c.downField("Version").as[Option[String]]
      `class` <- c.downField("Class").as[Option[String]]
      domain <- c.downField("Domain").as[Option[String]]
      variableOrder <- c.downField("Variable Order").as[Option[String]]
      cDASHVariable <- c.downField("CDASH Variable").as[Option[String]]
      cDASHVariableLabel <- c.downField("CDASH Variable Label").as[Option[String]]
      dRAFTCDASHDefinition <- c.downField("DRAFT CDASH Definition").as[Option[String]]
      domainSpecific <- c.downField("Domain Specific").as[Option[String]]
      questionText <- c.downField("Question Text").as[Option[String]]
      prompt <- c.downField("Prompt").as[Option[String]]
      `type` <- c.downField("Type").as[Option[String]]
      sDTMTarget <- c.downField("SDTM Target").as[Option[Seq[String]]]
      mappingInstructions <- c.downField("Mapping Instructions").as[Option[String]]
      controlledTerminologyCodelistName <- c.downField("Controlled Terminology Codelist Name").as[Option[String]]
      implementationNotes <- c.downField("Implementation Notes").as[Option[String]]
    } yield ExportCdashDomainVariablesRow(
      version = version,
      `class` = `class`,
      domain = domain,
      variableOrder = variableOrder,
      cDASHVariable = cDASHVariable,
      cDASHVariableLabel = cDASHVariableLabel,
      dRAFTCDASHDefinition = dRAFTCDASHDefinition,
      domainSpecific = domainSpecific,
      questionText = questionText,
      prompt = prompt,
      `type` = `type`,
      sDTMTarget = sDTMTarget,
      mappingInstructions = mappingInstructions,
      controlledTerminologyCodelistName = controlledTerminologyCodelistName,
      implementationNotes = implementationNotes
    )
  }
}


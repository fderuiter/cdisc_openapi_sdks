/** CDISC Library API
  * REST API Documentation for CDISC Library in production server
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: cdisc_library_support@cdisc.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.apis

import cats.effect.Concurrent
import io.circe.Encoder
import org.http4s.Uri
import org.http4s.client.Client as Http4sClient
import org.openapitools.client.models.Health
import org.openapitools.client.models.MaintenanceBody
import org.openapitools.client.models.*

trait StatusesApiEndpoints[F[*]] {

  def healthGet()(using auth: _Authorization.Basic): F[Health]
  def mdrMaintenanceGet()(using auth: _Authorization.Basic): F[MaintenanceBody]

}

class StatusesApiEndpointsImpl[F[*]: Concurrent](
  override val baseUrl: Uri,
  defaultHeaders: Seq[(String, String)] = Nil,
  httpClient: Http4sClient[F]
) extends BaseClient[F](baseUrl, defaultHeaders, httpClient) with StatusesApiEndpoints[F] {
  
  import JsonSupports.*
  import io.circe.syntax.EncoderOps
  import cats.implicits.toFlatMapOps

  override def healthGet()(using auth: _Authorization.Basic): F[Health] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json")
    ).flatten

    _executeRequest[Unit, Health](
      method = "GET",
      path = s"/health",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = Some(auth)) {
        
        case r if r.status.code == 200 => parseJson[F, Health]("Health", r)
    }
  }

  override def mdrMaintenanceGet()(using auth: _Authorization.Basic): F[MaintenanceBody] = {
    val requestHeaders = Seq(
      Some("Content-Type" -> "application/json")
    ).flatten

    _executeRequest[Unit, MaintenanceBody](
      method = "GET",
      path = s"/mdr/maintenance",
      body = None,
      formParameters = None,
      queryParameters = Nil,
      requestHeaders = requestHeaders,
      auth = Some(auth)) {
        
        case r if r.status.code == 200 => parseJson[F, MaintenanceBody]("MaintenanceBody", r)
    }
  }

}



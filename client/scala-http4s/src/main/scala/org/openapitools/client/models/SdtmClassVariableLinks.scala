/** CDISC Library API
  * REST API Documentation for CDISC Library in production server
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: cdisc_library_support@cdisc.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** 
  * @param self 
  * @param parentProduct 
  * @param parentClass 
  * @param qualifiesVariables 
  * @param rootItem 
  * @param priorVersion 
  */
case class SdtmClassVariableLinks(
    self: Option[SdtmClassVariableRef] = None,
    parentProduct: Option[SdtmProductRef] = None,
    parentClass: Option[SdtmClassRef] = None,
    qualifiesVariables: Option[Seq[SdtmClassVariableRefQualifies]] = None,
    rootItem: Option[RootSdtmClassVariableRef] = None,
    priorVersion: Option[SdtmClassVariableRef] = None
)
  
object SdtmClassVariableLinks {
  given encoderSdtmClassVariableLinks: Encoder[SdtmClassVariableLinks] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.self.map(v => "self" -> v.asJson),
        t.parentProduct.map(v => "parentProduct" -> v.asJson),
        t.parentClass.map(v => "parentClass" -> v.asJson),
        t.qualifiesVariables.map(v => "qualifiesVariables" -> v.asJson),
        t.rootItem.map(v => "rootItem" -> v.asJson),
        t.priorVersion.map(v => "priorVersion" -> v.asJson)
      ).flatten
    }
  }
  given decoderSdtmClassVariableLinks: Decoder[SdtmClassVariableLinks] = Decoder.instance { c =>
    for {
      self <- c.downField("self").as[Option[SdtmClassVariableRef]]
      parentProduct <- c.downField("parentProduct").as[Option[SdtmProductRef]]
      parentClass <- c.downField("parentClass").as[Option[SdtmClassRef]]
      qualifiesVariables <- c.downField("qualifiesVariables").as[Option[Seq[SdtmClassVariableRefQualifies]]]
      rootItem <- c.downField("rootItem").as[Option[RootSdtmClassVariableRef]]
      priorVersion <- c.downField("priorVersion").as[Option[SdtmClassVariableRef]]
    } yield SdtmClassVariableLinks(
      self = self,
      parentProduct = parentProduct,
      parentClass = parentClass,
      qualifiesVariables = qualifiesVariables,
      rootItem = rootItem,
      priorVersion = priorVersion
    )
  }
}


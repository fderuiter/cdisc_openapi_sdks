/** CDISC Library API
  * REST API Documentation for CDISC Library in production server
  *
  * The version of the OpenAPI document: 1.1.0
  * Contact: cdisc_library_support@cdisc.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** 
  * @param code 
  * @param codelistCode 
  * @param codelistExtensibleYesNo 
  * @param codelistName 
  * @param cDISCSubmissionValue 
  * @param cDISCSynonymS 
  * @param cDISCDefinition 
  * @param nCIPreferredTerm 
  * @param standardAndDate 
  * @param  
  */
case class ExportCtCodelist(
    code: Option[String] = None,
    codelistCode: Option[String] = None,
    codelistExtensibleYesNo: Option[String] = None,
    codelistName: Option[String] = None,
    cDISCSubmissionValue: Option[String] = None,
    cDISCSynonymS: Option[Seq[String]] = None,
    cDISCDefinition: Option[String] = None,
    nCIPreferredTerm: Option[String] = None,
    standardAndDate: Option[String] = None,
    : Option[Seq[ExportCtTerm]] = None
)
  
object ExportCtCodelist {
  given encoderExportCtCodelist: Encoder[ExportCtCodelist] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.code.map(v => "Code" -> v.asJson),
        t.codelistCode.map(v => "Codelist Code" -> v.asJson),
        t.codelistExtensibleYesNo.map(v => "Codelist Extensible (Yes/No)" -> v.asJson),
        t.codelistName.map(v => "Codelist Name" -> v.asJson),
        t.cDISCSubmissionValue.map(v => "CDISC Submission Value" -> v.asJson),
        t.cDISCSynonymS.map(v => "CDISC Synonym(s)" -> v.asJson),
        t.cDISCDefinition.map(v => "CDISC Definition" -> v.asJson),
        t.nCIPreferredTerm.map(v => "NCI Preferred Term" -> v.asJson),
        t.standardAndDate.map(v => "Standard and Date" -> v.asJson),
        t..map(v => "" -> v.asJson)
      ).flatten
    }
  }
  given decoderExportCtCodelist: Decoder[ExportCtCodelist] = Decoder.instance { c =>
    for {
      code <- c.downField("Code").as[Option[String]]
      codelistCode <- c.downField("Codelist Code").as[Option[String]]
      codelistExtensibleYesNo <- c.downField("Codelist Extensible (Yes/No)").as[Option[String]]
      codelistName <- c.downField("Codelist Name").as[Option[String]]
      cDISCSubmissionValue <- c.downField("CDISC Submission Value").as[Option[String]]
      cDISCSynonymS <- c.downField("CDISC Synonym(s)").as[Option[Seq[String]]]
      cDISCDefinition <- c.downField("CDISC Definition").as[Option[String]]
      nCIPreferredTerm <- c.downField("NCI Preferred Term").as[Option[String]]
      standardAndDate <- c.downField("Standard and Date").as[Option[String]]
       <- c.downField("").as[Option[Seq[ExportCtTerm]]]
    } yield ExportCtCodelist(
      code = code,
      codelistCode = codelistCode,
      codelistExtensibleYesNo = codelistExtensibleYesNo,
      codelistName = codelistName,
      cDISCSubmissionValue = cDISCSubmissionValue,
      cDISCSynonymS = cDISCSynonymS,
      cDISCDefinition = cDISCDefinition,
      nCIPreferredTerm = nCIPreferredTerm,
      standardAndDate = standardAndDate,
       = 
    )
  }
}


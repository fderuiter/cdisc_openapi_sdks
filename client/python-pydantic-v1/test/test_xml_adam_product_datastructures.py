# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.xml_adam_product_datastructures import XmlAdamProductDatastructures  # noqa: E501

class TestXmlAdamProductDatastructures(unittest.TestCase):
    """XmlAdamProductDatastructures unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> XmlAdamProductDatastructures:
        """Test XmlAdamProductDatastructures
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `XmlAdamProductDatastructures`
        """
        model = XmlAdamProductDatastructures()  # noqa: E501
        if include_optional:
            return XmlAdamProductDatastructures(
                var_self = openapi_client.models.adam_product_datastructures.AdamProductDatastructures(
                    name = 'ADaMIG v1.1', 
                    label = 'Analysis Data Model Implementation Guide Version 1.1', 
                    description = 'This document comprises the Clinical Data Interchange Standards Consortium (CDISC) Version 1.1 of the Analysis Data Model Implementation Guide (ADaMIG), which has been prepared by the Analysis Data Model (ADaM) Team of CDISC. The ADaMIG specifies ADaM standard dataset structures and variables, including naming conventions. It also specifies standard solutions to implementation issues.

The ADaMIG must be used in close concert with the current version of the document titled "Analysis Data Model (ADaM)" which is available for download at http://www.cdisc.org/adam. That document explains the purpose of the Analysis Data Model. It describes fundamental principles that apply to all analysis datasets, with the driving principle being that the design of ADaM datasets and associated metadata facilitate explicit communication of the content of, input to, and purpose of submitted ADaM datasets. The Analysis Data Model supports efficient generation, replication, and review of analysis results.', 
                    source = 'Prepared by the CDISC Analysis Data Model Team', 
                    effective_date = '2016-02-12', 
                    registration_status = 'Final', 
                    version = '1.1', 
                    _links = openapi_client.models.adam_product_datastructures_links.AdamProductDatastructuresLinks(
                        self = openapi_client.models.adam_product_datastructures_ref.AdamProductDatastructuresRef(
                            href = '/mdr/adam/adamig-1-1/datastructures', 
                            title = 'Analysis Data Model Implementation Guide Version 1.1', 
                            type = 'Data Structure List', ), 
                        prior_version = openapi_client.models.adam_product_datastructures_ref.AdamProductDatastructuresRef(
                            href = '/mdr/adam/adamig-1-1/datastructures', 
                            title = 'Analysis Data Model Implementation Guide Version 1.1', 
                            type = 'Data Structure List', ), 
                        data_structures = [
                            openapi_client.models.adam_datastructure_ref_element.AdamDatastructureRefElement(
                                href = '/mdr/adam/adamig-1-1/datastructures/ADSL', 
                                title = 'Subject-Level Analysis Dataset Structure', 
                                type = 'Data Structure', )
                            ], ), )
            )
        else:
            return XmlAdamProductDatastructures(
        )
        """

    def testXmlAdamProductDatastructures(self):
        """Test XmlAdamProductDatastructures"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

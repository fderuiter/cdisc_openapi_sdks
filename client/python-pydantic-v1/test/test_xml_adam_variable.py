# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.xml_adam_variable import XmlAdamVariable  # noqa: E501

class TestXmlAdamVariable(unittest.TestCase):
    """XmlAdamVariable unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> XmlAdamVariable:
        """Test XmlAdamVariable
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `XmlAdamVariable`
        """
        model = XmlAdamVariable()  # noqa: E501
        if include_optional:
            return XmlAdamVariable(
                var_self = openapi_client.models.adam_variable.AdamVariable(
                    ordinal = '5', 
                    name = 'SITEGRy', 
                    label = 'Pooled Site Group y', 
                    description = 'Character description of a grouping or pooling of clinical sites for analysis purposes. For example, SITEGR3 is the name of a variable containing site group (pooled site) names, where the grouping has been done according to the third site grouping algorithm, defined in variable metadata; SITEGR3 does not mean the third group of sites.', 
                    core = 'Perm', 
                    simple_datatype = 'Char', 
                    described_value_domain = 'Some codelist', 
                    value_list = TODO, 
                    _links = openapi_client.models.adam_variable_links.AdamVariableLinks(
                        self = openapi_client.models.adam_variable_ref.AdamVariableRef(
                            href = '/mdr/adam/adamig-1-1/datastructures/ADSL/variables/SITEGRy', 
                            title = 'Pooled Site Group y', 
                            type = 'Analysis Variable', ), 
                        codelist = openapi_client.models.root_ct_codelist_ref.RootCtCodelistRef(
                            href = '/mdr/root/ct/sdtmct/codelists/C67154', 
                            title = 'Version-agnostic anchor resource for codelist C67154', 
                            type = 'Root Value Domain', ), 
                        parent_product = openapi_client.models.adam_product_ref.AdamProductRef(
                            href = '/mdr/adam/adamig-1-1', 
                            title = 'Analysis Data Model Implementation Guide Version 1.1', 
                            type = 'Implementation Guide', ), 
                        parent_datastructure = openapi_client.models.adam_datastructure_ref.AdamDatastructureRef(
                            href = '/mdr/adam/adamig-1-1/datastructures/ADSL', 
                            title = 'Subject-Level Analysis Dataset Structure', 
                            type = 'Data Structure', ), 
                        parent_variable_set = openapi_client.models.adam_varset_ref.AdamVarsetRef(
                            href = '/mdr/adam/adamig-1-1/datastructures/ADSL/varsets/Identifier', 
                            title = 'ADSL Identifier Variables', 
                            type = 'Variable Set', ), 
                        prior_version = openapi_client.models.adam_variable_ref.AdamVariableRef(
                            href = '/mdr/adam/adamig-1-1/datastructures/ADSL/variables/SITEGRy', 
                            title = 'Pooled Site Group y', 
                            type = 'Analysis Variable', ), ), )
            )
        else:
            return XmlAdamVariable(
        )
        """

    def testXmlAdamVariable(self):
        """Test XmlAdamVariable"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.xml_cdash_domain import XmlCdashDomain  # noqa: E501

class TestXmlCdashDomain(unittest.TestCase):
    """XmlCdashDomain unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> XmlCdashDomain:
        """Test XmlCdashDomain
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `XmlCdashDomain`
        """
        model = XmlCdashDomain()  # noqa: E501
        if include_optional:
            return XmlCdashDomain(
                var_self = openapi_client.models.cdash_domain.CdashDomain(
                    ordinal = '4', 
                    name = 'DM', 
                    label = 'Demographics', 
                    _links = openapi_client.models.cdash_domain_links.CdashDomainLinks(
                        self = openapi_client.models.cdash_domain_ref.CdashDomainRef(
                            href = '/mdr/cdash/1-1/domains/DM', 
                            title = 'Demographics', 
                            type = 'CDASH Domain', ), 
                        parent_product = openapi_client.models.cdash_product_ref.CdashProductRef(
                            href = '/mdr/cdash/1-1', 
                            title = 'Clinical Data Acquisition Standards Harmonization Model Version 1.1', 
                            type = 'Foundational Model', ), 
                        parent_class = openapi_client.models.cdash_class_ref.CdashClassRef(
                            href = '/mdr/cdash/1-1/classes/Timing', 
                            title = 'Timing Class', 
                            type = 'Class', ), 
                        prior_version = openapi_client.models.cdash_domain_ref.CdashDomainRef(
                            href = '/mdr/cdash/1-1/domains/DM', 
                            title = 'Demographics', 
                            type = 'CDASH Domain', ), ), 
                    fields = [
                        openapi_client.models.cdash_domain_field.CdashDomainField(
                            ordinal = '18', 
                            name = 'AGE', 
                            label = 'Age', 
                            definition = 'The age of the subject expressed in AGEU.', 
                            domain_specific = '', 
                            question_text = 'What [is/was] the subject's age?', 
                            prompt = 'Age', 
                            simple_datatype = 'Num', 
                            implementation_notes = 'If Age is collected, it should be collected as a number and, to be correctly interpreted, the age value should be associated to a variable for the Age Unit. It may be necessary to know when the age was collected as an age may need to be recalculated for analysis, such as deriving age at a reference start time (RFSTDTC for SDTM). BRTHDTC may not be available in all cases (due to subject privacy concerns). If AGE is collected, then it is recommended that the date of collection also be recorded, either separately or by association to the date of the visit.', 
                            mapping_instructions = 'Maps directly to the SDTM variable listed in the column with the heading "SDTM Target".', )
                        ], )
            )
        else:
            return XmlCdashDomain(
        )
        """

    def testXmlCdashDomain(self):
        """Test XmlCdashDomain"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

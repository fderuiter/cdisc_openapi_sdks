# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from openapi_client.models.cdashig_domain_field_ref import CdashigDomainFieldRef
from openapi_client.models.cdashig_domain_ref import CdashigDomainRef
from openapi_client.models.cdashig_product_ref import CdashigProductRef
from openapi_client.models.root_cdashig_domain_field_ref import RootCdashigDomainFieldRef
from openapi_client.models.root_ct_codelist_ref_element import RootCtCodelistRefElement
from openapi_client.models.sdtm_class_variable_ref_target import SdtmClassVariableRefTarget
from openapi_client.models.sdtmig_dataset_variable_ref_target import SdtmigDatasetVariableRefTarget

class CdashigDomainFieldLinks(BaseModel):
    """
    CdashigDomainFieldLinks
    """
    var_self: Optional[CdashigDomainFieldRef] = Field(default=None, alias="self")
    codelist: Optional[conlist(RootCtCodelistRefElement)] = None
    parent_product: Optional[CdashigProductRef] = Field(default=None, alias="parentProduct")
    parent_domain: Optional[CdashigDomainRef] = Field(default=None, alias="parentDomain")
    root_item: Optional[RootCdashigDomainFieldRef] = Field(default=None, alias="rootItem")
    prior_version: Optional[CdashigDomainFieldRef] = Field(default=None, alias="priorVersion")
    sdtm_class_mapping_targets: Optional[conlist(SdtmClassVariableRefTarget)] = Field(default=None, alias="sdtmClassMappingTargets")
    sdtmig_dataset_mapping_targets: Optional[conlist(SdtmigDatasetVariableRefTarget)] = Field(default=None, alias="sdtmigDatasetMappingTargets")
    __properties = ["self", "codelist", "parentProduct", "parentDomain", "rootItem", "priorVersion", "sdtmClassMappingTargets", "sdtmigDatasetMappingTargets"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CdashigDomainFieldLinks:
        """Create an instance of CdashigDomainFieldLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of var_self
        if self.var_self:
            _dict['self'] = self.var_self.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in codelist (list)
        _items = []
        if self.codelist:
            for _item in self.codelist:
                if _item:
                    _items.append(_item.to_dict())
            _dict['codelist'] = _items
        # override the default output from pydantic by calling `to_dict()` of parent_product
        if self.parent_product:
            _dict['parentProduct'] = self.parent_product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_domain
        if self.parent_domain:
            _dict['parentDomain'] = self.parent_domain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of root_item
        if self.root_item:
            _dict['rootItem'] = self.root_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prior_version
        if self.prior_version:
            _dict['priorVersion'] = self.prior_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sdtm_class_mapping_targets (list)
        _items = []
        if self.sdtm_class_mapping_targets:
            for _item in self.sdtm_class_mapping_targets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sdtmClassMappingTargets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sdtmig_dataset_mapping_targets (list)
        _items = []
        if self.sdtmig_dataset_mapping_targets:
            for _item in self.sdtmig_dataset_mapping_targets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sdtmigDatasetMappingTargets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CdashigDomainFieldLinks:
        """Create an instance of CdashigDomainFieldLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CdashigDomainFieldLinks.parse_obj(obj)

        _obj = CdashigDomainFieldLinks.parse_obj({
            "var_self": CdashigDomainFieldRef.from_dict(obj.get("self")) if obj.get("self") is not None else None,
            "codelist": [RootCtCodelistRefElement.from_dict(_item) for _item in obj.get("codelist")] if obj.get("codelist") is not None else None,
            "parent_product": CdashigProductRef.from_dict(obj.get("parentProduct")) if obj.get("parentProduct") is not None else None,
            "parent_domain": CdashigDomainRef.from_dict(obj.get("parentDomain")) if obj.get("parentDomain") is not None else None,
            "root_item": RootCdashigDomainFieldRef.from_dict(obj.get("rootItem")) if obj.get("rootItem") is not None else None,
            "prior_version": CdashigDomainFieldRef.from_dict(obj.get("priorVersion")) if obj.get("priorVersion") is not None else None,
            "sdtm_class_mapping_targets": [SdtmClassVariableRefTarget.from_dict(_item) for _item in obj.get("sdtmClassMappingTargets")] if obj.get("sdtmClassMappingTargets") is not None else None,
            "sdtmig_dataset_mapping_targets": [SdtmigDatasetVariableRefTarget.from_dict(_item) for _item in obj.get("sdtmigDatasetMappingTargets")] if obj.get("sdtmigDatasetMappingTargets") is not None else None
        })
        return _obj



# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from openapi_client.models.cdash_class_ref_element import CdashClassRefElement
from openapi_client.models.cdash_product_classes_ref import CdashProductClassesRef
from openapi_client.models.cdash_product_ref import CdashProductRef

class CdashProductClassesLinks(BaseModel):
    """
    CdashProductClassesLinks
    """
    var_self: Optional[CdashProductClassesRef] = Field(default=None, alias="self")
    parent_product: Optional[CdashProductRef] = Field(default=None, alias="parentProduct")
    classes: Optional[conlist(CdashClassRefElement)] = None
    __properties = ["self", "parentProduct", "classes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CdashProductClassesLinks:
        """Create an instance of CdashProductClassesLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of var_self
        if self.var_self:
            _dict['self'] = self.var_self.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_product
        if self.parent_product:
            _dict['parentProduct'] = self.parent_product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in classes (list)
        _items = []
        if self.classes:
            for _item in self.classes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['classes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CdashProductClassesLinks:
        """Create an instance of CdashProductClassesLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CdashProductClassesLinks.parse_obj(obj)

        _obj = CdashProductClassesLinks.parse_obj({
            "var_self": CdashProductClassesRef.from_dict(obj.get("self")) if obj.get("self") is not None else None,
            "parent_product": CdashProductRef.from_dict(obj.get("parentProduct")) if obj.get("parentProduct") is not None else None,
            "classes": [CdashClassRefElement.from_dict(_item) for _item in obj.get("classes")] if obj.get("classes") is not None else None
        })
        return _obj



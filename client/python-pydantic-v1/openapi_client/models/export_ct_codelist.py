# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.export_ct_term import ExportCtTerm

class ExportCtCodelist(BaseModel):
    """
    ExportCtCodelist
    """
    code: Optional[StrictStr] = Field(default=None, alias="Code")
    codelist_code: Optional[StrictStr] = Field(default=None, alias="Codelist Code")
    codelist_extensible__yes_no: Optional[StrictStr] = Field(default=None, alias="Codelist Extensible (Yes/No)")
    codelist_name: Optional[StrictStr] = Field(default=None, alias="Codelist Name")
    cdisc_submission_value: Optional[StrictStr] = Field(default=None, alias="CDISC Submission Value")
    cdisc_synonym_s: Optional[conlist(StrictStr)] = Field(default=None, alias="CDISC Synonym(s)")
    cdisc_definition: Optional[StrictStr] = Field(default=None, alias="CDISC Definition")
    nci_preferred_term: Optional[StrictStr] = Field(default=None, alias="NCI Preferred Term")
    standard_and_date: Optional[StrictStr] = Field(default=None, alias="Standard and Date")
    : Optional[conlist(ExportCtTerm)] = None
    __properties = ["Code", "Codelist Code", "Codelist Extensible (Yes/No)", "Codelist Name", "CDISC Submission Value", "CDISC Synonym(s)", "CDISC Definition", "NCI Preferred Term", "Standard and Date", ""]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExportCtCodelist:
        """Create an instance of ExportCtCodelist from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in  (list)
        _items = []
        if self.:
            for _item in self.:
                if _item:
                    _items.append(_item.to_dict())
            _dict[''] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExportCtCodelist:
        """Create an instance of ExportCtCodelist from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExportCtCodelist.parse_obj(obj)

        _obj = ExportCtCodelist.parse_obj({
            "code": obj.get("Code"),
            "codelist_code": obj.get("Codelist Code"),
            "codelist_extensible__yes_no": obj.get("Codelist Extensible (Yes/No)"),
            "codelist_name": obj.get("Codelist Name"),
            "cdisc_submission_value": obj.get("CDISC Submission Value"),
            "cdisc_synonym_s": obj.get("CDISC Synonym(s)"),
            "cdisc_definition": obj.get("CDISC Definition"),
            "nci_preferred_term": obj.get("NCI Preferred Term"),
            "standard_and_date": obj.get("Standard and Date"),
            "": [ExportCtTerm.from_dict(_item) for _item in obj.get("")] if obj.get("") is not None else None
        })
        return _obj



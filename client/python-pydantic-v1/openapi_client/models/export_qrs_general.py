# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class ExportQrsGeneral(BaseModel):
    """
    ExportQrsGeneral
    """
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    label: Optional[StrictStr] = Field(default=None, alias="Label")
    effective_date: Optional[StrictStr] = Field(default=None, alias="Effective Date")
    description: Optional[StrictStr] = Field(default=None, alias="Description")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    categorys_codelist_c_code: Optional[StrictStr] = Field(default=None, alias="Category's Codelist C-Code")
    categorys_term_c_code: Optional[StrictStr] = Field(default=None, alias="Category's Term C-Code")
    __properties = ["Name", "Label", "Effective Date", "Description", "Type", "Category&#39;s Codelist C-Code", "Category&#39;s Term C-Code"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExportQrsGeneral:
        """Create an instance of ExportQrsGeneral from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExportQrsGeneral:
        """Create an instance of ExportQrsGeneral from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExportQrsGeneral.parse_obj(obj)

        _obj = ExportQrsGeneral.parse_obj({
            "name": obj.get("Name"),
            "label": obj.get("Label"),
            "effective_date": obj.get("Effective Date"),
            "description": obj.get("Description"),
            "type": obj.get("Type"),
            "categorys_codelist_c_code": obj.get("Category's Codelist C-Code"),
            "categorys_term_c_code": obj.get("Category's Term C-Code")
        })
        return _obj



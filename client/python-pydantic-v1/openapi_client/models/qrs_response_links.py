# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from openapi_client.models.root_ct_term_ref import RootCtTermRef

class QrsResponseLinks(BaseModel):
    """
    QrsResponseLinks
    """
    qrs_response_orres: Optional[RootCtTermRef] = Field(default=None, alias="qrsResponseORRES")
    qrs_response_orresu: Optional[RootCtTermRef] = Field(default=None, alias="qrsResponseORRESU")
    qrs_response_stresc: Optional[RootCtTermRef] = Field(default=None, alias="qrsResponseSTRESC")
    qrs_response_strescu: Optional[RootCtTermRef] = Field(default=None, alias="qrsResponseSTRESCU")
    __properties = ["qrsResponseORRES", "qrsResponseORRESU", "qrsResponseSTRESC", "qrsResponseSTRESCU"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> QrsResponseLinks:
        """Create an instance of QrsResponseLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of qrs_response_orres
        if self.qrs_response_orres:
            _dict['qrsResponseORRES'] = self.qrs_response_orres.to_dict()
        # override the default output from pydantic by calling `to_dict()` of qrs_response_orresu
        if self.qrs_response_orresu:
            _dict['qrsResponseORRESU'] = self.qrs_response_orresu.to_dict()
        # override the default output from pydantic by calling `to_dict()` of qrs_response_stresc
        if self.qrs_response_stresc:
            _dict['qrsResponseSTRESC'] = self.qrs_response_stresc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of qrs_response_strescu
        if self.qrs_response_strescu:
            _dict['qrsResponseSTRESCU'] = self.qrs_response_strescu.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QrsResponseLinks:
        """Create an instance of QrsResponseLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QrsResponseLinks.parse_obj(obj)

        _obj = QrsResponseLinks.parse_obj({
            "qrs_response_orres": RootCtTermRef.from_dict(obj.get("qrsResponseORRES")) if obj.get("qrsResponseORRES") is not None else None,
            "qrs_response_orresu": RootCtTermRef.from_dict(obj.get("qrsResponseORRESU")) if obj.get("qrsResponseORRESU") is not None else None,
            "qrs_response_stresc": RootCtTermRef.from_dict(obj.get("qrsResponseSTRESC")) if obj.get("qrsResponseSTRESC") is not None else None,
            "qrs_response_strescu": RootCtTermRef.from_dict(obj.get("qrsResponseSTRESCU")) if obj.get("qrsResponseSTRESCU") is not None else None
        })
        return _obj



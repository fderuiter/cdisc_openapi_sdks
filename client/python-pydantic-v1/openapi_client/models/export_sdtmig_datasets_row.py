# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class ExportSdtmigDatasetsRow(BaseModel):
    """
    ExportSdtmigDatasetsRow
    """
    version: Optional[StrictStr] = Field(default=None, alias="Version")
    var_class: Optional[StrictStr] = Field(default=None, alias="Class")
    dataset_name: Optional[StrictStr] = Field(default=None, alias="Dataset Name")
    dataset_label: Optional[StrictStr] = Field(default=None, alias="Dataset Label")
    structure: Optional[StrictStr] = Field(default=None, alias="Structure")
    __properties = ["Version", "Class", "Dataset Name", "Dataset Label", "Structure"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExportSdtmigDatasetsRow:
        """Create an instance of ExportSdtmigDatasetsRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExportSdtmigDatasetsRow:
        """Create an instance of ExportSdtmigDatasetsRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExportSdtmigDatasetsRow.parse_obj(obj)

        _obj = ExportSdtmigDatasetsRow.parse_obj({
            "version": obj.get("Version"),
            "var_class": obj.get("Class"),
            "dataset_name": obj.get("Dataset Name"),
            "dataset_label": obj.get("Dataset Label"),
            "structure": obj.get("Structure")
        })
        return _obj



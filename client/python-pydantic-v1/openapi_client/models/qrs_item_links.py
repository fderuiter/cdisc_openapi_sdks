# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from openapi_client.models.qrs_responsegroup import QrsResponsegroup
from openapi_client.models.root_ct_term_ref import RootCtTermRef

class QrsItemLinks(BaseModel):
    """
    QrsItemLinks
    """
    qrs_item_test: Optional[RootCtTermRef] = Field(default=None, alias="qrsItemTEST")
    qrs_item_testcd: Optional[RootCtTermRef] = Field(default=None, alias="qrsItemTESTCD")
    qrs_item_eval: Optional[RootCtTermRef] = Field(default=None, alias="qrsItemEVAL")
    qrs_item_scat: Optional[RootCtTermRef] = Field(default=None, alias="qrsItemSCAT")
    responsegroup: Optional[QrsResponsegroup] = None
    __properties = ["qrsItemTEST", "qrsItemTESTCD", "qrsItemEVAL", "qrsItemSCAT", "responsegroup"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> QrsItemLinks:
        """Create an instance of QrsItemLinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of qrs_item_test
        if self.qrs_item_test:
            _dict['qrsItemTEST'] = self.qrs_item_test.to_dict()
        # override the default output from pydantic by calling `to_dict()` of qrs_item_testcd
        if self.qrs_item_testcd:
            _dict['qrsItemTESTCD'] = self.qrs_item_testcd.to_dict()
        # override the default output from pydantic by calling `to_dict()` of qrs_item_eval
        if self.qrs_item_eval:
            _dict['qrsItemEVAL'] = self.qrs_item_eval.to_dict()
        # override the default output from pydantic by calling `to_dict()` of qrs_item_scat
        if self.qrs_item_scat:
            _dict['qrsItemSCAT'] = self.qrs_item_scat.to_dict()
        # override the default output from pydantic by calling `to_dict()` of responsegroup
        if self.responsegroup:
            _dict['responsegroup'] = self.responsegroup.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QrsItemLinks:
        """Create an instance of QrsItemLinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QrsItemLinks.parse_obj(obj)

        _obj = QrsItemLinks.parse_obj({
            "qrs_item_test": RootCtTermRef.from_dict(obj.get("qrsItemTEST")) if obj.get("qrsItemTEST") is not None else None,
            "qrs_item_testcd": RootCtTermRef.from_dict(obj.get("qrsItemTESTCD")) if obj.get("qrsItemTESTCD") is not None else None,
            "qrs_item_eval": RootCtTermRef.from_dict(obj.get("qrsItemEVAL")) if obj.get("qrsItemEVAL") is not None else None,
            "qrs_item_scat": RootCtTermRef.from_dict(obj.get("qrsItemSCAT")) if obj.get("qrsItemSCAT") is not None else None,
            "responsegroup": QrsResponsegroup.from_dict(obj.get("responsegroup")) if obj.get("responsegroup") is not None else None
        })
        return _obj



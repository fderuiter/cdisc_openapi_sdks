# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class ExportCdashDomainVariablesRow(BaseModel):
    """
    ExportCdashDomainVariablesRow
    """
    version: Optional[StrictStr] = Field(default=None, alias="Version")
    var_class: Optional[StrictStr] = Field(default=None, alias="Class")
    domain: Optional[StrictStr] = Field(default=None, alias="Domain")
    variable_order: Optional[StrictStr] = Field(default=None, alias="Variable Order")
    cdash_variable: Optional[StrictStr] = Field(default=None, alias="CDASH Variable")
    cdash_variable_label: Optional[StrictStr] = Field(default=None, alias="CDASH Variable Label")
    draft_cdash_definition: Optional[StrictStr] = Field(default=None, alias="DRAFT CDASH Definition")
    domain_specific: Optional[StrictStr] = Field(default=None, alias="Domain Specific")
    question_text: Optional[StrictStr] = Field(default=None, alias="Question Text")
    prompt: Optional[StrictStr] = Field(default=None, alias="Prompt")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    sdtm_target: Optional[conlist(StrictStr)] = Field(default=None, alias="SDTM Target")
    mapping_instructions: Optional[StrictStr] = Field(default=None, alias="Mapping Instructions")
    controlled_terminology_codelist_name: Optional[StrictStr] = Field(default=None, alias="Controlled Terminology Codelist Name")
    implementation_notes: Optional[StrictStr] = Field(default=None, alias="Implementation Notes")
    __properties = ["Version", "Class", "Domain", "Variable Order", "CDASH Variable", "CDASH Variable Label", "DRAFT CDASH Definition", "Domain Specific", "Question Text", "Prompt", "Type", "SDTM Target", "Mapping Instructions", "Controlled Terminology Codelist Name", "Implementation Notes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExportCdashDomainVariablesRow:
        """Create an instance of ExportCdashDomainVariablesRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExportCdashDomainVariablesRow:
        """Create an instance of ExportCdashDomainVariablesRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExportCdashDomainVariablesRow.parse_obj(obj)

        _obj = ExportCdashDomainVariablesRow.parse_obj({
            "version": obj.get("Version"),
            "var_class": obj.get("Class"),
            "domain": obj.get("Domain"),
            "variable_order": obj.get("Variable Order"),
            "cdash_variable": obj.get("CDASH Variable"),
            "cdash_variable_label": obj.get("CDASH Variable Label"),
            "draft_cdash_definition": obj.get("DRAFT CDASH Definition"),
            "domain_specific": obj.get("Domain Specific"),
            "question_text": obj.get("Question Text"),
            "prompt": obj.get("Prompt"),
            "type": obj.get("Type"),
            "sdtm_target": obj.get("SDTM Target"),
            "mapping_instructions": obj.get("Mapping Instructions"),
            "controlled_terminology_codelist_name": obj.get("Controlled Terminology Codelist Name"),
            "implementation_notes": obj.get("Implementation Notes")
        })
        return _obj



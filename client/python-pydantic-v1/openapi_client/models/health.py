# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool

class Health(BaseModel):
    """
    Health
    """
    healthy: Optional[StrictBool] = None
    ldap_authentication_healthy: Optional[StrictBool] = Field(default=None, alias="ldapAuthenticationHealthy")
    ldap_authorization_healthy: Optional[StrictBool] = Field(default=None, alias="ldapAuthorizationHealthy")
    database_healthy: Optional[StrictBool] = Field(default=None, alias="databaseHealthy")
    es_healthy: Optional[StrictBool] = Field(default=None, alias="esHealthy")
    __properties = ["healthy", "ldapAuthenticationHealthy", "ldapAuthorizationHealthy", "databaseHealthy", "esHealthy"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Health:
        """Create an instance of Health from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Health:
        """Create an instance of Health from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Health.parse_obj(obj)

        _obj = Health.parse_obj({
            "healthy": obj.get("healthy"),
            "ldap_authentication_healthy": obj.get("ldapAuthenticationHealthy"),
            "ldap_authorization_healthy": obj.get("ldapAuthorizationHealthy"),
            "database_healthy": obj.get("databaseHealthy"),
            "es_healthy": obj.get("esHealthy")
        })
        return _obj



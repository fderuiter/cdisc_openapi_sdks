# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr

from openapi_client.models.root_sdtm_class_variable import RootSdtmClassVariable
from openapi_client.models.root_sdtm_dataset_variable import RootSdtmDatasetVariable
from openapi_client.models.sdtm_class import SdtmClass
from openapi_client.models.sdtm_class_datasets import SdtmClassDatasets
from openapi_client.models.sdtm_class_variable import SdtmClassVariable
from openapi_client.models.sdtm_class_variables import SdtmClassVariables
from openapi_client.models.sdtm_classes import SdtmClasses
from openapi_client.models.sdtm_dataset import SdtmDataset
from openapi_client.models.sdtm_dataset_variable import SdtmDatasetVariable
from openapi_client.models.sdtm_dataset_variables import SdtmDatasetVariables
from openapi_client.models.sdtm_datasets import SdtmDatasets
from openapi_client.models.sdtm_product import SdtmProduct

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class StudyDataTabulationModelSDTMApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def mdr_root_sdtm_classes_class_variables_var_get(self, var_class : Annotated[StrictStr, Field(..., description="SDTM Class Identifier")], var : Annotated[StrictStr, Field(..., description="SDTM Variable Identifier")], **kwargs) -> RootSdtmClassVariable:  # noqa: E501
        """mdr_root_sdtm_classes_class_variables_var_get  # noqa: E501

        Get Root of SDTM Class Variable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_root_sdtm_classes_class_variables_var_get(var_class, var, async_req=True)
        >>> result = thread.get()

        :param var_class: SDTM Class Identifier (required)
        :type var_class: str
        :param var: SDTM Variable Identifier (required)
        :type var: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RootSdtmClassVariable
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_root_sdtm_classes_class_variables_var_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_root_sdtm_classes_class_variables_var_get_with_http_info(var_class, var, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_root_sdtm_classes_class_variables_var_get_with_http_info(self, var_class : Annotated[StrictStr, Field(..., description="SDTM Class Identifier")], var : Annotated[StrictStr, Field(..., description="SDTM Variable Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_root_sdtm_classes_class_variables_var_get  # noqa: E501

        Get Root of SDTM Class Variable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_root_sdtm_classes_class_variables_var_get_with_http_info(var_class, var, async_req=True)
        >>> result = thread.get()

        :param var_class: SDTM Class Identifier (required)
        :type var_class: str
        :param var: SDTM Variable Identifier (required)
        :type var: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RootSdtmClassVariable, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'var_class',
            'var'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_root_sdtm_classes_class_variables_var_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['var_class'] is not None:
            _path_params['class'] = _params['var_class']

        if _params['var'] is not None:
            _path_params['var'] = _params['var']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "RootSdtmClassVariable",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/root/sdtm/classes/{class}/variables/{var}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_root_sdtm_datasets_dataset_variables_var_get(self, dataset : Annotated[StrictStr, Field(..., description="SDTM Dataset Identifier")], var : Annotated[StrictStr, Field(..., description="SDTM Variable Identifier")], **kwargs) -> RootSdtmDatasetVariable:  # noqa: E501
        """mdr_root_sdtm_datasets_dataset_variables_var_get  # noqa: E501

        Get Root SDTM Dataset Variable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_root_sdtm_datasets_dataset_variables_var_get(dataset, var, async_req=True)
        >>> result = thread.get()

        :param dataset: SDTM Dataset Identifier (required)
        :type dataset: str
        :param var: SDTM Variable Identifier (required)
        :type var: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RootSdtmDatasetVariable
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_root_sdtm_datasets_dataset_variables_var_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_root_sdtm_datasets_dataset_variables_var_get_with_http_info(dataset, var, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_root_sdtm_datasets_dataset_variables_var_get_with_http_info(self, dataset : Annotated[StrictStr, Field(..., description="SDTM Dataset Identifier")], var : Annotated[StrictStr, Field(..., description="SDTM Variable Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_root_sdtm_datasets_dataset_variables_var_get  # noqa: E501

        Get Root SDTM Dataset Variable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_root_sdtm_datasets_dataset_variables_var_get_with_http_info(dataset, var, async_req=True)
        >>> result = thread.get()

        :param dataset: SDTM Dataset Identifier (required)
        :type dataset: str
        :param var: SDTM Variable Identifier (required)
        :type var: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RootSdtmDatasetVariable, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'dataset',
            'var'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_root_sdtm_datasets_dataset_variables_var_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['dataset'] is not None:
            _path_params['dataset'] = _params['dataset']

        if _params['var'] is not None:
            _path_params['var'] = _params['var']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "RootSdtmDatasetVariable",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/root/sdtm/datasets/{dataset}/variables/{var}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_sdtm_version_classes_class_datasets_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], var_class : Annotated[StrictStr, Field(..., description="SDTM Class Identifier")], **kwargs) -> SdtmClassDatasets:  # noqa: E501
        """mdr_sdtm_version_classes_class_datasets_get  # noqa: E501

        Get SDTM Class Dataset List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_sdtm_version_classes_class_datasets_get(version, var_class, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param var_class: SDTM Class Identifier (required)
        :type var_class: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SdtmClassDatasets
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_sdtm_version_classes_class_datasets_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_sdtm_version_classes_class_datasets_get_with_http_info(version, var_class, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_sdtm_version_classes_class_datasets_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], var_class : Annotated[StrictStr, Field(..., description="SDTM Class Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_sdtm_version_classes_class_datasets_get  # noqa: E501

        Get SDTM Class Dataset List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_sdtm_version_classes_class_datasets_get_with_http_info(version, var_class, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param var_class: SDTM Class Identifier (required)
        :type var_class: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SdtmClassDatasets, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version',
            'var_class'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_sdtm_version_classes_class_datasets_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']

        if _params['var_class'] is not None:
            _path_params['class'] = _params['var_class']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "SdtmClassDatasets",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/sdtm/{version}/classes/{class}/datasets', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_sdtm_version_classes_class_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], var_class : Annotated[StrictStr, Field(..., description="SDTM Class Identifier")], **kwargs) -> SdtmClass:  # noqa: E501
        """mdr_sdtm_version_classes_class_get  # noqa: E501

        Get SDTM Class  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_sdtm_version_classes_class_get(version, var_class, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param var_class: SDTM Class Identifier (required)
        :type var_class: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SdtmClass
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_sdtm_version_classes_class_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_sdtm_version_classes_class_get_with_http_info(version, var_class, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_sdtm_version_classes_class_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], var_class : Annotated[StrictStr, Field(..., description="SDTM Class Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_sdtm_version_classes_class_get  # noqa: E501

        Get SDTM Class  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_sdtm_version_classes_class_get_with_http_info(version, var_class, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param var_class: SDTM Class Identifier (required)
        :type var_class: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SdtmClass, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version',
            'var_class'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_sdtm_version_classes_class_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']

        if _params['var_class'] is not None:
            _path_params['class'] = _params['var_class']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "SdtmClass",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/sdtm/{version}/classes/{class}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_sdtm_version_classes_class_variables_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], var_class : Annotated[StrictStr, Field(..., description="SDTM Class Identifier")], **kwargs) -> SdtmClassVariables:  # noqa: E501
        """mdr_sdtm_version_classes_class_variables_get  # noqa: E501

        Get SDTM Class Variable List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_sdtm_version_classes_class_variables_get(version, var_class, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param var_class: SDTM Class Identifier (required)
        :type var_class: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SdtmClassVariables
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_sdtm_version_classes_class_variables_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_sdtm_version_classes_class_variables_get_with_http_info(version, var_class, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_sdtm_version_classes_class_variables_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], var_class : Annotated[StrictStr, Field(..., description="SDTM Class Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_sdtm_version_classes_class_variables_get  # noqa: E501

        Get SDTM Class Variable List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_sdtm_version_classes_class_variables_get_with_http_info(version, var_class, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param var_class: SDTM Class Identifier (required)
        :type var_class: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SdtmClassVariables, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version',
            'var_class'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_sdtm_version_classes_class_variables_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']

        if _params['var_class'] is not None:
            _path_params['class'] = _params['var_class']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "SdtmClassVariables",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/sdtm/{version}/classes/{class}/variables', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_sdtm_version_classes_class_variables_var_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], var_class : Annotated[StrictStr, Field(..., description="SDTM Class Identifier")], var : Annotated[StrictStr, Field(..., description="SDTM Variable Identifier")], **kwargs) -> SdtmClassVariable:  # noqa: E501
        """mdr_sdtm_version_classes_class_variables_var_get  # noqa: E501

        Get SDTM Class Variable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_sdtm_version_classes_class_variables_var_get(version, var_class, var, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param var_class: SDTM Class Identifier (required)
        :type var_class: str
        :param var: SDTM Variable Identifier (required)
        :type var: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SdtmClassVariable
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_sdtm_version_classes_class_variables_var_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_sdtm_version_classes_class_variables_var_get_with_http_info(version, var_class, var, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_sdtm_version_classes_class_variables_var_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], var_class : Annotated[StrictStr, Field(..., description="SDTM Class Identifier")], var : Annotated[StrictStr, Field(..., description="SDTM Variable Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_sdtm_version_classes_class_variables_var_get  # noqa: E501

        Get SDTM Class Variable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_sdtm_version_classes_class_variables_var_get_with_http_info(version, var_class, var, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param var_class: SDTM Class Identifier (required)
        :type var_class: str
        :param var: SDTM Variable Identifier (required)
        :type var: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SdtmClassVariable, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version',
            'var_class',
            'var'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_sdtm_version_classes_class_variables_var_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']

        if _params['var_class'] is not None:
            _path_params['class'] = _params['var_class']

        if _params['var'] is not None:
            _path_params['var'] = _params['var']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "SdtmClassVariable",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/sdtm/{version}/classes/{class}/variables/{var}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_sdtm_version_classes_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], **kwargs) -> SdtmClasses:  # noqa: E501
        """mdr_sdtm_version_classes_get  # noqa: E501

        Get SDTM Class List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_sdtm_version_classes_get(version, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SdtmClasses
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_sdtm_version_classes_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_sdtm_version_classes_get_with_http_info(version, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_sdtm_version_classes_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_sdtm_version_classes_get  # noqa: E501

        Get SDTM Class List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_sdtm_version_classes_get_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SdtmClasses, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_sdtm_version_classes_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "SdtmClasses",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/sdtm/{version}/classes', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_sdtm_version_datasets_dataset_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], dataset : Annotated[StrictStr, Field(..., description="SDTM Dataset Identifier")], **kwargs) -> SdtmDataset:  # noqa: E501
        """mdr_sdtm_version_datasets_dataset_get  # noqa: E501

        Get SDTM Dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_sdtm_version_datasets_dataset_get(version, dataset, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param dataset: SDTM Dataset Identifier (required)
        :type dataset: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SdtmDataset
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_sdtm_version_datasets_dataset_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_sdtm_version_datasets_dataset_get_with_http_info(version, dataset, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_sdtm_version_datasets_dataset_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], dataset : Annotated[StrictStr, Field(..., description="SDTM Dataset Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_sdtm_version_datasets_dataset_get  # noqa: E501

        Get SDTM Dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_sdtm_version_datasets_dataset_get_with_http_info(version, dataset, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param dataset: SDTM Dataset Identifier (required)
        :type dataset: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SdtmDataset, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version',
            'dataset'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_sdtm_version_datasets_dataset_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']

        if _params['dataset'] is not None:
            _path_params['dataset'] = _params['dataset']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "SdtmDataset",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/sdtm/{version}/datasets/{dataset}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_sdtm_version_datasets_dataset_variables_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], dataset : Annotated[StrictStr, Field(..., description="SDTM Dataset Identifier")], **kwargs) -> SdtmDatasetVariables:  # noqa: E501
        """mdr_sdtm_version_datasets_dataset_variables_get  # noqa: E501

        Get SDTM Dataset Variable List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_sdtm_version_datasets_dataset_variables_get(version, dataset, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param dataset: SDTM Dataset Identifier (required)
        :type dataset: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SdtmDatasetVariables
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_sdtm_version_datasets_dataset_variables_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_sdtm_version_datasets_dataset_variables_get_with_http_info(version, dataset, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_sdtm_version_datasets_dataset_variables_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], dataset : Annotated[StrictStr, Field(..., description="SDTM Dataset Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_sdtm_version_datasets_dataset_variables_get  # noqa: E501

        Get SDTM Dataset Variable List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_sdtm_version_datasets_dataset_variables_get_with_http_info(version, dataset, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param dataset: SDTM Dataset Identifier (required)
        :type dataset: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SdtmDatasetVariables, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version',
            'dataset'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_sdtm_version_datasets_dataset_variables_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']

        if _params['dataset'] is not None:
            _path_params['dataset'] = _params['dataset']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "SdtmDatasetVariables",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/sdtm/{version}/datasets/{dataset}/variables', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_sdtm_version_datasets_dataset_variables_var_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], dataset : Annotated[StrictStr, Field(..., description="SDTM Dataset Identifier")], var : Annotated[StrictStr, Field(..., description="SDTM Variable Identifier")], **kwargs) -> SdtmDatasetVariable:  # noqa: E501
        """mdr_sdtm_version_datasets_dataset_variables_var_get  # noqa: E501

        Get SDTM Dataset Variable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_sdtm_version_datasets_dataset_variables_var_get(version, dataset, var, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param dataset: SDTM Dataset Identifier (required)
        :type dataset: str
        :param var: SDTM Variable Identifier (required)
        :type var: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SdtmDatasetVariable
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_sdtm_version_datasets_dataset_variables_var_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_sdtm_version_datasets_dataset_variables_var_get_with_http_info(version, dataset, var, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_sdtm_version_datasets_dataset_variables_var_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], dataset : Annotated[StrictStr, Field(..., description="SDTM Dataset Identifier")], var : Annotated[StrictStr, Field(..., description="SDTM Variable Identifier")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_sdtm_version_datasets_dataset_variables_var_get  # noqa: E501

        Get SDTM Dataset Variable  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_sdtm_version_datasets_dataset_variables_var_get_with_http_info(version, dataset, var, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param dataset: SDTM Dataset Identifier (required)
        :type dataset: str
        :param var: SDTM Variable Identifier (required)
        :type var: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SdtmDatasetVariable, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version',
            'dataset',
            'var'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_sdtm_version_datasets_dataset_variables_var_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']

        if _params['dataset'] is not None:
            _path_params['dataset'] = _params['dataset']

        if _params['var'] is not None:
            _path_params['var'] = _params['var']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "SdtmDatasetVariable",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/sdtm/{version}/datasets/{dataset}/variables/{var}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_sdtm_version_datasets_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], **kwargs) -> SdtmDatasets:  # noqa: E501
        """mdr_sdtm_version_datasets_get  # noqa: E501

        Get SDTM Dataset List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_sdtm_version_datasets_get(version, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SdtmDatasets
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_sdtm_version_datasets_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_sdtm_version_datasets_get_with_http_info(version, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_sdtm_version_datasets_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_sdtm_version_datasets_get  # noqa: E501

        Get SDTM Dataset List  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_sdtm_version_datasets_get_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SdtmDatasets, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_sdtm_version_datasets_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "SdtmDatasets",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/sdtm/{version}/datasets', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_sdtm_version_get(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], **kwargs) -> SdtmProduct:  # noqa: E501
        """mdr_sdtm_version_get  # noqa: E501

        Get SDTM product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_sdtm_version_get(version, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SdtmProduct
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_sdtm_version_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_sdtm_version_get_with_http_info(version, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_sdtm_version_get_with_http_info(self, version : Annotated[StrictStr, Field(..., description="CDISC Library Product Version")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_sdtm_version_get  # noqa: E501

        Get SDTM product  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_sdtm_version_get_with_http_info(version, async_req=True)
        >>> result = thread.get()

        :param version: CDISC Library Product Version (required)
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SdtmProduct, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_sdtm_version_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['version'] is not None:
            _path_params['version'] = _params['version']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "SdtmProduct",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/sdtm/{version}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

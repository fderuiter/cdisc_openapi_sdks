# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictFloat, StrictInt, StrictStr

from typing import Optional, Union

from openapi_client.models.default_search_response import DefaultSearchResponse
from openapi_client.models.default_search_scopes import DefaultSearchScopes
from openapi_client.models.mdr_search_scopes_get200_response import MdrSearchScopesGet200Response
from openapi_client.models.scope_values import ScopeValues

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class SearchesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def mdr_search_get(self, q : Annotated[StrictStr, Field(..., description="Search Term Expression")], highlight : Annotated[Optional[StrictStr], Field(description="Search Highlight Expression")] = None, start : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Initial Search Result Index")] = None, page_size : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of Search Results to Return")] = None, var_class : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Class")] = None, codelist : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Codelist")] = None, concept_id : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Concept ID")] = None, core : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Core")] = None, data_structure : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Data Structure")] = None, dataset_structure : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Dataset Structure")] = None, definition : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Definition")] = None, description : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Description")] = None, domain : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Domain")] = None, effective_date : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Effective Date")] = None, extensible : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Extensible")] = None, href : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Href")] = None, label : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Label")] = None, measure_type : Annotated[Optional[StrictStr], Field(description="SLimit Search by Setting Scope to Measure Type")] = None, name : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Name")] = None, preferred_term : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Preferred Term")] = None, product : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Product")] = None, product_group : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Product Group")] = None, registration_status : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Registration Status")] = None, role_description : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Role Description")] = None, sdtm_target : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to SDTM Target")] = None, simple_datatype : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Simple Datatype")] = None, submission_value : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Submission Value")] = None, synonyms : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Synonyms")] = None, type : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Type")] = None, ui_href : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to UI Href")] = None, value_domain : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Value Domain")] = None, variable_set : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Variable Set")] = None, version : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Version")] = None, **kwargs) -> DefaultSearchResponse:  # noqa: E501
        """mdr_search_get  # noqa: E501

        Get Search Results Across CDISC Library  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_search_get(q, highlight, start, page_size, var_class, codelist, concept_id, core, data_structure, dataset_structure, definition, description, domain, effective_date, extensible, href, label, measure_type, name, preferred_term, product, product_group, registration_status, role_description, sdtm_target, simple_datatype, submission_value, synonyms, type, ui_href, value_domain, variable_set, version, async_req=True)
        >>> result = thread.get()

        :param q: Search Term Expression (required)
        :type q: str
        :param highlight: Search Highlight Expression
        :type highlight: str
        :param start: Initial Search Result Index
        :type start: float
        :param page_size: Number of Search Results to Return
        :type page_size: float
        :param var_class: Limit Search by Setting Scope to Class
        :type var_class: str
        :param codelist: Limit Search by Setting Scope to Codelist
        :type codelist: str
        :param concept_id: Limit Search by Setting Scope to Concept ID
        :type concept_id: str
        :param core: Limit Search by Setting Scope to Core
        :type core: str
        :param data_structure: Limit Search by Setting Scope to Data Structure
        :type data_structure: str
        :param dataset_structure: Limit Search by Setting Scope to Dataset Structure
        :type dataset_structure: str
        :param definition: Limit Search by Setting Scope to Definition
        :type definition: str
        :param description: Limit Search by Setting Scope to Description
        :type description: str
        :param domain: Limit Search by Setting Scope to Domain
        :type domain: str
        :param effective_date: Limit Search by Setting Scope to Effective Date
        :type effective_date: str
        :param extensible: Limit Search by Setting Scope to Extensible
        :type extensible: str
        :param href: Limit Search by Setting Scope to Href
        :type href: str
        :param label: Limit Search by Setting Scope to Label
        :type label: str
        :param measure_type: SLimit Search by Setting Scope to Measure Type
        :type measure_type: str
        :param name: Limit Search by Setting Scope to Name
        :type name: str
        :param preferred_term: Limit Search by Setting Scope to Preferred Term
        :type preferred_term: str
        :param product: Limit Search by Setting Scope to Product
        :type product: str
        :param product_group: Limit Search by Setting Scope to Product Group
        :type product_group: str
        :param registration_status: Limit Search by Setting Scope to Registration Status
        :type registration_status: str
        :param role_description: Limit Search by Setting Scope to Role Description
        :type role_description: str
        :param sdtm_target: Limit Search by Setting Scope to SDTM Target
        :type sdtm_target: str
        :param simple_datatype: Limit Search by Setting Scope to Simple Datatype
        :type simple_datatype: str
        :param submission_value: Limit Search by Setting Scope to Submission Value
        :type submission_value: str
        :param synonyms: Limit Search by Setting Scope to Synonyms
        :type synonyms: str
        :param type: Limit Search by Setting Scope to Type
        :type type: str
        :param ui_href: Limit Search by Setting Scope to UI Href
        :type ui_href: str
        :param value_domain: Limit Search by Setting Scope to Value Domain
        :type value_domain: str
        :param variable_set: Limit Search by Setting Scope to Variable Set
        :type variable_set: str
        :param version: Limit Search by Setting Scope to Version
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DefaultSearchResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_search_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_search_get_with_http_info(q, highlight, start, page_size, var_class, codelist, concept_id, core, data_structure, dataset_structure, definition, description, domain, effective_date, extensible, href, label, measure_type, name, preferred_term, product, product_group, registration_status, role_description, sdtm_target, simple_datatype, submission_value, synonyms, type, ui_href, value_domain, variable_set, version, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_search_get_with_http_info(self, q : Annotated[StrictStr, Field(..., description="Search Term Expression")], highlight : Annotated[Optional[StrictStr], Field(description="Search Highlight Expression")] = None, start : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Initial Search Result Index")] = None, page_size : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Number of Search Results to Return")] = None, var_class : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Class")] = None, codelist : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Codelist")] = None, concept_id : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Concept ID")] = None, core : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Core")] = None, data_structure : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Data Structure")] = None, dataset_structure : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Dataset Structure")] = None, definition : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Definition")] = None, description : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Description")] = None, domain : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Domain")] = None, effective_date : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Effective Date")] = None, extensible : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Extensible")] = None, href : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Href")] = None, label : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Label")] = None, measure_type : Annotated[Optional[StrictStr], Field(description="SLimit Search by Setting Scope to Measure Type")] = None, name : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Name")] = None, preferred_term : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Preferred Term")] = None, product : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Product")] = None, product_group : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Product Group")] = None, registration_status : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Registration Status")] = None, role_description : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Role Description")] = None, sdtm_target : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to SDTM Target")] = None, simple_datatype : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Simple Datatype")] = None, submission_value : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Submission Value")] = None, synonyms : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Synonyms")] = None, type : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Type")] = None, ui_href : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to UI Href")] = None, value_domain : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Value Domain")] = None, variable_set : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Variable Set")] = None, version : Annotated[Optional[StrictStr], Field(description="Limit Search by Setting Scope to Version")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_search_get  # noqa: E501

        Get Search Results Across CDISC Library  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_search_get_with_http_info(q, highlight, start, page_size, var_class, codelist, concept_id, core, data_structure, dataset_structure, definition, description, domain, effective_date, extensible, href, label, measure_type, name, preferred_term, product, product_group, registration_status, role_description, sdtm_target, simple_datatype, submission_value, synonyms, type, ui_href, value_domain, variable_set, version, async_req=True)
        >>> result = thread.get()

        :param q: Search Term Expression (required)
        :type q: str
        :param highlight: Search Highlight Expression
        :type highlight: str
        :param start: Initial Search Result Index
        :type start: float
        :param page_size: Number of Search Results to Return
        :type page_size: float
        :param var_class: Limit Search by Setting Scope to Class
        :type var_class: str
        :param codelist: Limit Search by Setting Scope to Codelist
        :type codelist: str
        :param concept_id: Limit Search by Setting Scope to Concept ID
        :type concept_id: str
        :param core: Limit Search by Setting Scope to Core
        :type core: str
        :param data_structure: Limit Search by Setting Scope to Data Structure
        :type data_structure: str
        :param dataset_structure: Limit Search by Setting Scope to Dataset Structure
        :type dataset_structure: str
        :param definition: Limit Search by Setting Scope to Definition
        :type definition: str
        :param description: Limit Search by Setting Scope to Description
        :type description: str
        :param domain: Limit Search by Setting Scope to Domain
        :type domain: str
        :param effective_date: Limit Search by Setting Scope to Effective Date
        :type effective_date: str
        :param extensible: Limit Search by Setting Scope to Extensible
        :type extensible: str
        :param href: Limit Search by Setting Scope to Href
        :type href: str
        :param label: Limit Search by Setting Scope to Label
        :type label: str
        :param measure_type: SLimit Search by Setting Scope to Measure Type
        :type measure_type: str
        :param name: Limit Search by Setting Scope to Name
        :type name: str
        :param preferred_term: Limit Search by Setting Scope to Preferred Term
        :type preferred_term: str
        :param product: Limit Search by Setting Scope to Product
        :type product: str
        :param product_group: Limit Search by Setting Scope to Product Group
        :type product_group: str
        :param registration_status: Limit Search by Setting Scope to Registration Status
        :type registration_status: str
        :param role_description: Limit Search by Setting Scope to Role Description
        :type role_description: str
        :param sdtm_target: Limit Search by Setting Scope to SDTM Target
        :type sdtm_target: str
        :param simple_datatype: Limit Search by Setting Scope to Simple Datatype
        :type simple_datatype: str
        :param submission_value: Limit Search by Setting Scope to Submission Value
        :type submission_value: str
        :param synonyms: Limit Search by Setting Scope to Synonyms
        :type synonyms: str
        :param type: Limit Search by Setting Scope to Type
        :type type: str
        :param ui_href: Limit Search by Setting Scope to UI Href
        :type ui_href: str
        :param value_domain: Limit Search by Setting Scope to Value Domain
        :type value_domain: str
        :param variable_set: Limit Search by Setting Scope to Variable Set
        :type variable_set: str
        :param version: Limit Search by Setting Scope to Version
        :type version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DefaultSearchResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'q',
            'highlight',
            'start',
            'page_size',
            'var_class',
            'codelist',
            'concept_id',
            'core',
            'data_structure',
            'dataset_structure',
            'definition',
            'description',
            'domain',
            'effective_date',
            'extensible',
            'href',
            'label',
            'measure_type',
            'name',
            'preferred_term',
            'product',
            'product_group',
            'registration_status',
            'role_description',
            'sdtm_target',
            'simple_datatype',
            'submission_value',
            'synonyms',
            'type',
            'ui_href',
            'value_domain',
            'variable_set',
            'version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_search_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('q') is not None:  # noqa: E501
            _query_params.append(('q', _params['q']))

        if _params.get('highlight') is not None:  # noqa: E501
            _query_params.append(('highlight', _params['highlight']))

        if _params.get('start') is not None:  # noqa: E501
            _query_params.append(('start', _params['start']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('var_class') is not None:  # noqa: E501
            _query_params.append(('class', _params['var_class']))

        if _params.get('codelist') is not None:  # noqa: E501
            _query_params.append(('codelist', _params['codelist']))

        if _params.get('concept_id') is not None:  # noqa: E501
            _query_params.append(('conceptId', _params['concept_id']))

        if _params.get('core') is not None:  # noqa: E501
            _query_params.append(('core', _params['core']))

        if _params.get('data_structure') is not None:  # noqa: E501
            _query_params.append(('dataStructure', _params['data_structure']))

        if _params.get('dataset_structure') is not None:  # noqa: E501
            _query_params.append(('datasetStructure', _params['dataset_structure']))

        if _params.get('definition') is not None:  # noqa: E501
            _query_params.append(('definition', _params['definition']))

        if _params.get('description') is not None:  # noqa: E501
            _query_params.append(('description', _params['description']))

        if _params.get('domain') is not None:  # noqa: E501
            _query_params.append(('domain', _params['domain']))

        if _params.get('effective_date') is not None:  # noqa: E501
            _query_params.append(('effectiveDate', _params['effective_date']))

        if _params.get('extensible') is not None:  # noqa: E501
            _query_params.append(('extensible', _params['extensible']))

        if _params.get('href') is not None:  # noqa: E501
            _query_params.append(('href', _params['href']))

        if _params.get('label') is not None:  # noqa: E501
            _query_params.append(('label', _params['label']))

        if _params.get('measure_type') is not None:  # noqa: E501
            _query_params.append(('measureType', _params['measure_type']))

        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('preferred_term') is not None:  # noqa: E501
            _query_params.append(('preferredTerm', _params['preferred_term']))

        if _params.get('product') is not None:  # noqa: E501
            _query_params.append(('product', _params['product']))

        if _params.get('product_group') is not None:  # noqa: E501
            _query_params.append(('productGroup', _params['product_group']))

        if _params.get('registration_status') is not None:  # noqa: E501
            _query_params.append(('registrationStatus', _params['registration_status']))

        if _params.get('role_description') is not None:  # noqa: E501
            _query_params.append(('roleDescription', _params['role_description']))

        if _params.get('sdtm_target') is not None:  # noqa: E501
            _query_params.append(('sdtmTarget', _params['sdtm_target']))

        if _params.get('simple_datatype') is not None:  # noqa: E501
            _query_params.append(('simpleDatatype', _params['simple_datatype']))

        if _params.get('submission_value') is not None:  # noqa: E501
            _query_params.append(('submissionValue', _params['submission_value']))

        if _params.get('synonyms') is not None:  # noqa: E501
            _query_params.append(('synonyms', _params['synonyms']))

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type']))

        if _params.get('ui_href') is not None:  # noqa: E501
            _query_params.append(('uiHref', _params['ui_href']))

        if _params.get('value_domain') is not None:  # noqa: E501
            _query_params.append(('valueDomain', _params['value_domain']))

        if _params.get('variable_set') is not None:  # noqa: E501
            _query_params.append(('variableSet', _params['variable_set']))

        if _params.get('version') is not None:  # noqa: E501
            _query_params.append(('version', _params['version']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "DefaultSearchResponse",
            '400': "DefaultErrorResponse",
            '401': "DefaultErrorResponse",
            '403': "DefaultErrorResponse",
            '404': "DefaultErrorResponse",
            '405': "DefaultErrorResponse",
            '406': "DefaultErrorResponse",
            '500': "DefaultErrorResponse",
            '503': "DefaultErrorResponse",
            '504': "DefaultErrorResponse",
        }

        return self.api_client.call_api(
            '/mdr/search', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_search_scopes_get(self, **kwargs) -> MdrSearchScopesGet200Response:  # noqa: E501
        """mdr_search_scopes_get  # noqa: E501

        Get Search Results Across CDISC Library  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_search_scopes_get(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MdrSearchScopesGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_search_scopes_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_search_scopes_get_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def mdr_search_scopes_get_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_search_scopes_get  # noqa: E501

        Get Search Results Across CDISC Library  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_search_scopes_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MdrSearchScopesGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_search_scopes_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "MdrSearchScopesGet200Response",
        }

        return self.api_client.call_api(
            '/mdr/search/scopes', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def mdr_search_scopes_scope_get(self, scope : Annotated[DefaultSearchScopes, Field(..., description="Search Scope")], **kwargs) -> ScopeValues:  # noqa: E501
        """mdr_search_scopes_scope_get  # noqa: E501

        Get Search Results Limited to Scope  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_search_scopes_scope_get(scope, async_req=True)
        >>> result = thread.get()

        :param scope: Search Scope (required)
        :type scope: DefaultSearchScopes
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ScopeValues
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the mdr_search_scopes_scope_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.mdr_search_scopes_scope_get_with_http_info(scope, **kwargs)  # noqa: E501

    @validate_arguments
    def mdr_search_scopes_scope_get_with_http_info(self, scope : Annotated[DefaultSearchScopes, Field(..., description="Search Scope")], **kwargs) -> ApiResponse:  # noqa: E501
        """mdr_search_scopes_scope_get  # noqa: E501

        Get Search Results Limited to Scope  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.mdr_search_scopes_scope_get_with_http_info(scope, async_req=True)
        >>> result = thread.get()

        :param scope: Search Scope (required)
        :type scope: DefaultSearchScopes
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ScopeValues, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'scope'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mdr_search_scopes_scope_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['scope'] is not None:
            _path_params['scope'] = _params['scope']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['basicAuth']  # noqa: E501

        _response_types_map = {
            '200': "ScopeValues",
        }

        return self.api_client.call_api(
            '/mdr/search/scopes/{scope}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

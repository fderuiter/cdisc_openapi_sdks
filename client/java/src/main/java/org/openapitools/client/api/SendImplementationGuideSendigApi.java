/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultErrorResponse;
import org.openapitools.client.model.ExportSendigDatasetsTable;
import org.openapitools.client.model.ExportSendigVariablesTable;
import org.openapitools.client.model.ExportSendigWorkbook;
import org.openapitools.client.model.RootSendigDatasetVariable;
import org.openapitools.client.model.SendigClass;
import org.openapitools.client.model.SendigClassDatasets;
import org.openapitools.client.model.SendigClasses;
import org.openapitools.client.model.SendigDataset;
import org.openapitools.client.model.SendigDatasetVariable;
import org.openapitools.client.model.SendigDatasetVariables;
import org.openapitools.client.model.SendigDatasets;
import org.openapitools.client.model.SendigProduct;
import org.openapitools.client.model.XmlRootSendigDatasetVariable;
import org.openapitools.client.model.XmlSendigClass;
import org.openapitools.client.model.XmlSendigClassDatasets;
import org.openapitools.client.model.XmlSendigClasses;
import org.openapitools.client.model.XmlSendigDataset;
import org.openapitools.client.model.XmlSendigDatasetVariable;
import org.openapitools.client.model.XmlSendigDatasetVariables;
import org.openapitools.client.model.XmlSendigDatasets;
import org.openapitools.client.model.XmlSendigProduct;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SendImplementationGuideSendigApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SendImplementationGuideSendigApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SendImplementationGuideSendigApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for mdrRootSendigDatasetsDatasetVariablesVarGet
     * @param dataset SENDIG Dataset Identifier (required)
     * @param var SENDIG Variable Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrRootSendigDatasetsDatasetVariablesVarGetCall(@javax.annotation.Nonnull String dataset, @javax.annotation.Nonnull String var, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/root/sendig/datasets/{dataset}/variables/{var}"
            .replace("{" + "dataset" + "}", localVarApiClient.escapeString(dataset.toString()))
            .replace("{" + "var" + "}", localVarApiClient.escapeString(var.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrRootSendigDatasetsDatasetVariablesVarGetValidateBeforeCall(@javax.annotation.Nonnull String dataset, @javax.annotation.Nonnull String var, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataset' is set
        if (dataset == null) {
            throw new ApiException("Missing the required parameter 'dataset' when calling mdrRootSendigDatasetsDatasetVariablesVarGet(Async)");
        }

        // verify the required parameter 'var' is set
        if (var == null) {
            throw new ApiException("Missing the required parameter 'var' when calling mdrRootSendigDatasetsDatasetVariablesVarGet(Async)");
        }

        return mdrRootSendigDatasetsDatasetVariablesVarGetCall(dataset, var, _callback);

    }

    /**
     * 
     * Get Root SENDIG Dataset Variable
     * @param dataset SENDIG Dataset Identifier (required)
     * @param var SENDIG Variable Identifier (required)
     * @return RootSendigDatasetVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public RootSendigDatasetVariable mdrRootSendigDatasetsDatasetVariablesVarGet(@javax.annotation.Nonnull String dataset, @javax.annotation.Nonnull String var) throws ApiException {
        ApiResponse<RootSendigDatasetVariable> localVarResp = mdrRootSendigDatasetsDatasetVariablesVarGetWithHttpInfo(dataset, var);
        return localVarResp.getData();
    }

    /**
     * 
     * Get Root SENDIG Dataset Variable
     * @param dataset SENDIG Dataset Identifier (required)
     * @param var SENDIG Variable Identifier (required)
     * @return ApiResponse&lt;RootSendigDatasetVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RootSendigDatasetVariable> mdrRootSendigDatasetsDatasetVariablesVarGetWithHttpInfo(@javax.annotation.Nonnull String dataset, @javax.annotation.Nonnull String var) throws ApiException {
        okhttp3.Call localVarCall = mdrRootSendigDatasetsDatasetVariablesVarGetValidateBeforeCall(dataset, var, null);
        Type localVarReturnType = new TypeToken<RootSendigDatasetVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Root SENDIG Dataset Variable
     * @param dataset SENDIG Dataset Identifier (required)
     * @param var SENDIG Variable Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrRootSendigDatasetsDatasetVariablesVarGetAsync(@javax.annotation.Nonnull String dataset, @javax.annotation.Nonnull String var, final ApiCallback<RootSendigDatasetVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrRootSendigDatasetsDatasetVariablesVarGetValidateBeforeCall(dataset, var, _callback);
        Type localVarReturnType = new TypeToken<RootSendigDatasetVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrSendigVersionClassesClassDatasetsGet
     * @param version CDISC Library Product Version (required)
     * @param propertyClass SENDIG Class Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSendigVersionClassesClassDatasetsGetCall(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String propertyClass, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/sendig/{version}/classes/{class}/datasets"
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrSendigVersionClassesClassDatasetsGetValidateBeforeCall(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String propertyClass, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling mdrSendigVersionClassesClassDatasetsGet(Async)");
        }

        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling mdrSendigVersionClassesClassDatasetsGet(Async)");
        }

        return mdrSendigVersionClassesClassDatasetsGetCall(version, propertyClass, _callback);

    }

    /**
     * 
     * Get SENDIG Class Dataset List
     * @param version CDISC Library Product Version (required)
     * @param propertyClass SENDIG Class Identifier (required)
     * @return SendigClassDatasets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public SendigClassDatasets mdrSendigVersionClassesClassDatasetsGet(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String propertyClass) throws ApiException {
        ApiResponse<SendigClassDatasets> localVarResp = mdrSendigVersionClassesClassDatasetsGetWithHttpInfo(version, propertyClass);
        return localVarResp.getData();
    }

    /**
     * 
     * Get SENDIG Class Dataset List
     * @param version CDISC Library Product Version (required)
     * @param propertyClass SENDIG Class Identifier (required)
     * @return ApiResponse&lt;SendigClassDatasets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendigClassDatasets> mdrSendigVersionClassesClassDatasetsGetWithHttpInfo(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String propertyClass) throws ApiException {
        okhttp3.Call localVarCall = mdrSendigVersionClassesClassDatasetsGetValidateBeforeCall(version, propertyClass, null);
        Type localVarReturnType = new TypeToken<SendigClassDatasets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get SENDIG Class Dataset List
     * @param version CDISC Library Product Version (required)
     * @param propertyClass SENDIG Class Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSendigVersionClassesClassDatasetsGetAsync(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String propertyClass, final ApiCallback<SendigClassDatasets> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrSendigVersionClassesClassDatasetsGetValidateBeforeCall(version, propertyClass, _callback);
        Type localVarReturnType = new TypeToken<SendigClassDatasets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrSendigVersionClassesClassGet
     * @param version CDISC Library Product Version (required)
     * @param propertyClass SENDIG Class Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSendigVersionClassesClassGetCall(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String propertyClass, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/sendig/{version}/classes/{class}"
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrSendigVersionClassesClassGetValidateBeforeCall(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String propertyClass, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling mdrSendigVersionClassesClassGet(Async)");
        }

        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling mdrSendigVersionClassesClassGet(Async)");
        }

        return mdrSendigVersionClassesClassGetCall(version, propertyClass, _callback);

    }

    /**
     * 
     * Get SENDIG Class
     * @param version CDISC Library Product Version (required)
     * @param propertyClass SENDIG Class Identifier (required)
     * @return SendigClass
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public SendigClass mdrSendigVersionClassesClassGet(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String propertyClass) throws ApiException {
        ApiResponse<SendigClass> localVarResp = mdrSendigVersionClassesClassGetWithHttpInfo(version, propertyClass);
        return localVarResp.getData();
    }

    /**
     * 
     * Get SENDIG Class
     * @param version CDISC Library Product Version (required)
     * @param propertyClass SENDIG Class Identifier (required)
     * @return ApiResponse&lt;SendigClass&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendigClass> mdrSendigVersionClassesClassGetWithHttpInfo(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String propertyClass) throws ApiException {
        okhttp3.Call localVarCall = mdrSendigVersionClassesClassGetValidateBeforeCall(version, propertyClass, null);
        Type localVarReturnType = new TypeToken<SendigClass>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get SENDIG Class
     * @param version CDISC Library Product Version (required)
     * @param propertyClass SENDIG Class Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSendigVersionClassesClassGetAsync(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String propertyClass, final ApiCallback<SendigClass> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrSendigVersionClassesClassGetValidateBeforeCall(version, propertyClass, _callback);
        Type localVarReturnType = new TypeToken<SendigClass>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrSendigVersionClassesGet
     * @param version CDISC Library Product Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSendigVersionClassesGetCall(@javax.annotation.Nonnull String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/sendig/{version}/classes"
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrSendigVersionClassesGetValidateBeforeCall(@javax.annotation.Nonnull String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling mdrSendigVersionClassesGet(Async)");
        }

        return mdrSendigVersionClassesGetCall(version, _callback);

    }

    /**
     * 
     * Get SENDIG Class List
     * @param version CDISC Library Product Version (required)
     * @return SendigClasses
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public SendigClasses mdrSendigVersionClassesGet(@javax.annotation.Nonnull String version) throws ApiException {
        ApiResponse<SendigClasses> localVarResp = mdrSendigVersionClassesGetWithHttpInfo(version);
        return localVarResp.getData();
    }

    /**
     * 
     * Get SENDIG Class List
     * @param version CDISC Library Product Version (required)
     * @return ApiResponse&lt;SendigClasses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendigClasses> mdrSendigVersionClassesGetWithHttpInfo(@javax.annotation.Nonnull String version) throws ApiException {
        okhttp3.Call localVarCall = mdrSendigVersionClassesGetValidateBeforeCall(version, null);
        Type localVarReturnType = new TypeToken<SendigClasses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get SENDIG Class List
     * @param version CDISC Library Product Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSendigVersionClassesGetAsync(@javax.annotation.Nonnull String version, final ApiCallback<SendigClasses> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrSendigVersionClassesGetValidateBeforeCall(version, _callback);
        Type localVarReturnType = new TypeToken<SendigClasses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrSendigVersionDatasetsDatasetGet
     * @param version CDISC Library Product Version (required)
     * @param dataset SENDIG Class Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSendigVersionDatasetsDatasetGetCall(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/sendig/{version}/datasets/{dataset}"
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "dataset" + "}", localVarApiClient.escapeString(dataset.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrSendigVersionDatasetsDatasetGetValidateBeforeCall(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling mdrSendigVersionDatasetsDatasetGet(Async)");
        }

        // verify the required parameter 'dataset' is set
        if (dataset == null) {
            throw new ApiException("Missing the required parameter 'dataset' when calling mdrSendigVersionDatasetsDatasetGet(Async)");
        }

        return mdrSendigVersionDatasetsDatasetGetCall(version, dataset, _callback);

    }

    /**
     * 
     * Get SENDIG Dataset
     * @param version CDISC Library Product Version (required)
     * @param dataset SENDIG Class Identifier (required)
     * @return SendigDataset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public SendigDataset mdrSendigVersionDatasetsDatasetGet(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset) throws ApiException {
        ApiResponse<SendigDataset> localVarResp = mdrSendigVersionDatasetsDatasetGetWithHttpInfo(version, dataset);
        return localVarResp.getData();
    }

    /**
     * 
     * Get SENDIG Dataset
     * @param version CDISC Library Product Version (required)
     * @param dataset SENDIG Class Identifier (required)
     * @return ApiResponse&lt;SendigDataset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendigDataset> mdrSendigVersionDatasetsDatasetGetWithHttpInfo(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset) throws ApiException {
        okhttp3.Call localVarCall = mdrSendigVersionDatasetsDatasetGetValidateBeforeCall(version, dataset, null);
        Type localVarReturnType = new TypeToken<SendigDataset>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get SENDIG Dataset
     * @param version CDISC Library Product Version (required)
     * @param dataset SENDIG Class Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSendigVersionDatasetsDatasetGetAsync(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset, final ApiCallback<SendigDataset> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrSendigVersionDatasetsDatasetGetValidateBeforeCall(version, dataset, _callback);
        Type localVarReturnType = new TypeToken<SendigDataset>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrSendigVersionDatasetsDatasetVariablesGet
     * @param version CDISC Library Product Version (required)
     * @param dataset SENDIG Class Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSendigVersionDatasetsDatasetVariablesGetCall(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/sendig/{version}/datasets/{dataset}/variables"
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "dataset" + "}", localVarApiClient.escapeString(dataset.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrSendigVersionDatasetsDatasetVariablesGetValidateBeforeCall(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling mdrSendigVersionDatasetsDatasetVariablesGet(Async)");
        }

        // verify the required parameter 'dataset' is set
        if (dataset == null) {
            throw new ApiException("Missing the required parameter 'dataset' when calling mdrSendigVersionDatasetsDatasetVariablesGet(Async)");
        }

        return mdrSendigVersionDatasetsDatasetVariablesGetCall(version, dataset, _callback);

    }

    /**
     * 
     * Get SENDIG Dataset Variable List
     * @param version CDISC Library Product Version (required)
     * @param dataset SENDIG Class Identifier (required)
     * @return SendigDatasetVariables
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public SendigDatasetVariables mdrSendigVersionDatasetsDatasetVariablesGet(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset) throws ApiException {
        ApiResponse<SendigDatasetVariables> localVarResp = mdrSendigVersionDatasetsDatasetVariablesGetWithHttpInfo(version, dataset);
        return localVarResp.getData();
    }

    /**
     * 
     * Get SENDIG Dataset Variable List
     * @param version CDISC Library Product Version (required)
     * @param dataset SENDIG Class Identifier (required)
     * @return ApiResponse&lt;SendigDatasetVariables&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendigDatasetVariables> mdrSendigVersionDatasetsDatasetVariablesGetWithHttpInfo(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset) throws ApiException {
        okhttp3.Call localVarCall = mdrSendigVersionDatasetsDatasetVariablesGetValidateBeforeCall(version, dataset, null);
        Type localVarReturnType = new TypeToken<SendigDatasetVariables>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get SENDIG Dataset Variable List
     * @param version CDISC Library Product Version (required)
     * @param dataset SENDIG Class Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSendigVersionDatasetsDatasetVariablesGetAsync(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset, final ApiCallback<SendigDatasetVariables> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrSendigVersionDatasetsDatasetVariablesGetValidateBeforeCall(version, dataset, _callback);
        Type localVarReturnType = new TypeToken<SendigDatasetVariables>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrSendigVersionDatasetsDatasetVariablesVarGet
     * @param version CDISC Library Product Version (required)
     * @param dataset SENDIG Class Identifier (required)
     * @param var SENDIG Variable Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSendigVersionDatasetsDatasetVariablesVarGetCall(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset, @javax.annotation.Nonnull String var, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/sendig/{version}/datasets/{dataset}/variables/{var}"
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()))
            .replace("{" + "dataset" + "}", localVarApiClient.escapeString(dataset.toString()))
            .replace("{" + "var" + "}", localVarApiClient.escapeString(var.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrSendigVersionDatasetsDatasetVariablesVarGetValidateBeforeCall(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset, @javax.annotation.Nonnull String var, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling mdrSendigVersionDatasetsDatasetVariablesVarGet(Async)");
        }

        // verify the required parameter 'dataset' is set
        if (dataset == null) {
            throw new ApiException("Missing the required parameter 'dataset' when calling mdrSendigVersionDatasetsDatasetVariablesVarGet(Async)");
        }

        // verify the required parameter 'var' is set
        if (var == null) {
            throw new ApiException("Missing the required parameter 'var' when calling mdrSendigVersionDatasetsDatasetVariablesVarGet(Async)");
        }

        return mdrSendigVersionDatasetsDatasetVariablesVarGetCall(version, dataset, var, _callback);

    }

    /**
     * 
     * Get SENDIG Dataset Variable
     * @param version CDISC Library Product Version (required)
     * @param dataset SENDIG Class Identifier (required)
     * @param var SENDIG Variable Identifier (required)
     * @return SendigDatasetVariable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public SendigDatasetVariable mdrSendigVersionDatasetsDatasetVariablesVarGet(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset, @javax.annotation.Nonnull String var) throws ApiException {
        ApiResponse<SendigDatasetVariable> localVarResp = mdrSendigVersionDatasetsDatasetVariablesVarGetWithHttpInfo(version, dataset, var);
        return localVarResp.getData();
    }

    /**
     * 
     * Get SENDIG Dataset Variable
     * @param version CDISC Library Product Version (required)
     * @param dataset SENDIG Class Identifier (required)
     * @param var SENDIG Variable Identifier (required)
     * @return ApiResponse&lt;SendigDatasetVariable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendigDatasetVariable> mdrSendigVersionDatasetsDatasetVariablesVarGetWithHttpInfo(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset, @javax.annotation.Nonnull String var) throws ApiException {
        okhttp3.Call localVarCall = mdrSendigVersionDatasetsDatasetVariablesVarGetValidateBeforeCall(version, dataset, var, null);
        Type localVarReturnType = new TypeToken<SendigDatasetVariable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get SENDIG Dataset Variable
     * @param version CDISC Library Product Version (required)
     * @param dataset SENDIG Class Identifier (required)
     * @param var SENDIG Variable Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSendigVersionDatasetsDatasetVariablesVarGetAsync(@javax.annotation.Nonnull String version, @javax.annotation.Nonnull String dataset, @javax.annotation.Nonnull String var, final ApiCallback<SendigDatasetVariable> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrSendigVersionDatasetsDatasetVariablesVarGetValidateBeforeCall(version, dataset, var, _callback);
        Type localVarReturnType = new TypeToken<SendigDatasetVariable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrSendigVersionDatasetsGet
     * @param version CDISC Library Product Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSendigVersionDatasetsGetCall(@javax.annotation.Nonnull String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/sendig/{version}/datasets"
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrSendigVersionDatasetsGetValidateBeforeCall(@javax.annotation.Nonnull String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling mdrSendigVersionDatasetsGet(Async)");
        }

        return mdrSendigVersionDatasetsGetCall(version, _callback);

    }

    /**
     * 
     * Get SENDIG Dataset List
     * @param version CDISC Library Product Version (required)
     * @return SendigDatasets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public SendigDatasets mdrSendigVersionDatasetsGet(@javax.annotation.Nonnull String version) throws ApiException {
        ApiResponse<SendigDatasets> localVarResp = mdrSendigVersionDatasetsGetWithHttpInfo(version);
        return localVarResp.getData();
    }

    /**
     * 
     * Get SENDIG Dataset List
     * @param version CDISC Library Product Version (required)
     * @return ApiResponse&lt;SendigDatasets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendigDatasets> mdrSendigVersionDatasetsGetWithHttpInfo(@javax.annotation.Nonnull String version) throws ApiException {
        okhttp3.Call localVarCall = mdrSendigVersionDatasetsGetValidateBeforeCall(version, null);
        Type localVarReturnType = new TypeToken<SendigDatasets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get SENDIG Dataset List
     * @param version CDISC Library Product Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSendigVersionDatasetsGetAsync(@javax.annotation.Nonnull String version, final ApiCallback<SendigDatasets> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrSendigVersionDatasetsGetValidateBeforeCall(version, _callback);
        Type localVarReturnType = new TypeToken<SendigDatasets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrSendigVersionGet
     * @param version CDISC Library Product Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSendigVersionGetCall(@javax.annotation.Nonnull String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/sendig/{version}"
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/csv",
            "application/vnd.ms-excel",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrSendigVersionGetValidateBeforeCall(@javax.annotation.Nonnull String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling mdrSendigVersionGet(Async)");
        }

        return mdrSendigVersionGetCall(version, _callback);

    }

    /**
     * 
     * Get SENDIG product
     * @param version CDISC Library Product Version (required)
     * @return SendigProduct
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public SendigProduct mdrSendigVersionGet(@javax.annotation.Nonnull String version) throws ApiException {
        ApiResponse<SendigProduct> localVarResp = mdrSendigVersionGetWithHttpInfo(version);
        return localVarResp.getData();
    }

    /**
     * 
     * Get SENDIG product
     * @param version CDISC Library Product Version (required)
     * @return ApiResponse&lt;SendigProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendigProduct> mdrSendigVersionGetWithHttpInfo(@javax.annotation.Nonnull String version) throws ApiException {
        okhttp3.Call localVarCall = mdrSendigVersionGetValidateBeforeCall(version, null);
        Type localVarReturnType = new TypeToken<SendigProduct>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get SENDIG product
     * @param version CDISC Library Product Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrSendigVersionGetAsync(@javax.annotation.Nonnull String version, final ApiCallback<SendigProduct> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrSendigVersionGetValidateBeforeCall(version, _callback);
        Type localVarReturnType = new TypeToken<SendigProduct>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

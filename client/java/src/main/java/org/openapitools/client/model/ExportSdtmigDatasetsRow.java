/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExportSdtmigDatasetsRow
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-22T20:17:16.173989497Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class ExportSdtmigDatasetsRow {
  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nullable
  private String version;

  public static final String SERIALIZED_NAME_PROPERTY_CLASS = "Class";
  @SerializedName(SERIALIZED_NAME_PROPERTY_CLASS)
  @javax.annotation.Nullable
  private String propertyClass;

  public static final String SERIALIZED_NAME_DATASET_NAME = "Dataset Name";
  @SerializedName(SERIALIZED_NAME_DATASET_NAME)
  @javax.annotation.Nullable
  private String datasetName;

  public static final String SERIALIZED_NAME_DATASET_LABEL = "Dataset Label";
  @SerializedName(SERIALIZED_NAME_DATASET_LABEL)
  @javax.annotation.Nullable
  private String datasetLabel;

  public static final String SERIALIZED_NAME_STRUCTURE = "Structure";
  @SerializedName(SERIALIZED_NAME_STRUCTURE)
  @javax.annotation.Nullable
  private String structure;

  public ExportSdtmigDatasetsRow() {
  }

  public ExportSdtmigDatasetsRow version(@javax.annotation.Nullable String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nullable String version) {
    this.version = version;
  }


  public ExportSdtmigDatasetsRow propertyClass(@javax.annotation.Nullable String propertyClass) {
    this.propertyClass = propertyClass;
    return this;
  }

  /**
   * Get propertyClass
   * @return propertyClass
   */
  @javax.annotation.Nullable
  public String getPropertyClass() {
    return propertyClass;
  }

  public void setPropertyClass(@javax.annotation.Nullable String propertyClass) {
    this.propertyClass = propertyClass;
  }


  public ExportSdtmigDatasetsRow datasetName(@javax.annotation.Nullable String datasetName) {
    this.datasetName = datasetName;
    return this;
  }

  /**
   * Get datasetName
   * @return datasetName
   */
  @javax.annotation.Nullable
  public String getDatasetName() {
    return datasetName;
  }

  public void setDatasetName(@javax.annotation.Nullable String datasetName) {
    this.datasetName = datasetName;
  }


  public ExportSdtmigDatasetsRow datasetLabel(@javax.annotation.Nullable String datasetLabel) {
    this.datasetLabel = datasetLabel;
    return this;
  }

  /**
   * Get datasetLabel
   * @return datasetLabel
   */
  @javax.annotation.Nullable
  public String getDatasetLabel() {
    return datasetLabel;
  }

  public void setDatasetLabel(@javax.annotation.Nullable String datasetLabel) {
    this.datasetLabel = datasetLabel;
  }


  public ExportSdtmigDatasetsRow structure(@javax.annotation.Nullable String structure) {
    this.structure = structure;
    return this;
  }

  /**
   * Get structure
   * @return structure
   */
  @javax.annotation.Nullable
  public String getStructure() {
    return structure;
  }

  public void setStructure(@javax.annotation.Nullable String structure) {
    this.structure = structure;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportSdtmigDatasetsRow exportSdtmigDatasetsRow = (ExportSdtmigDatasetsRow) o;
    return Objects.equals(this.version, exportSdtmigDatasetsRow.version) &&
        Objects.equals(this.propertyClass, exportSdtmigDatasetsRow.propertyClass) &&
        Objects.equals(this.datasetName, exportSdtmigDatasetsRow.datasetName) &&
        Objects.equals(this.datasetLabel, exportSdtmigDatasetsRow.datasetLabel) &&
        Objects.equals(this.structure, exportSdtmigDatasetsRow.structure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, propertyClass, datasetName, datasetLabel, structure);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportSdtmigDatasetsRow {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    datasetName: ").append(toIndentedString(datasetName)).append("\n");
    sb.append("    datasetLabel: ").append(toIndentedString(datasetLabel)).append("\n");
    sb.append("    structure: ").append(toIndentedString(structure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Version", "Class", "Dataset Name", "Dataset Label", "Structure"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportSdtmigDatasetsRow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportSdtmigDatasetsRow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportSdtmigDatasetsRow is not found in the empty JSON string", ExportSdtmigDatasetsRow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportSdtmigDatasetsRow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportSdtmigDatasetsRow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) && !jsonObj.get("Version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
      }
      if ((jsonObj.get("Class") != null && !jsonObj.get("Class").isJsonNull()) && !jsonObj.get("Class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Class").toString()));
      }
      if ((jsonObj.get("Dataset Name") != null && !jsonObj.get("Dataset Name").isJsonNull()) && !jsonObj.get("Dataset Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Dataset Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Dataset Name").toString()));
      }
      if ((jsonObj.get("Dataset Label") != null && !jsonObj.get("Dataset Label").isJsonNull()) && !jsonObj.get("Dataset Label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Dataset Label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Dataset Label").toString()));
      }
      if ((jsonObj.get("Structure") != null && !jsonObj.get("Structure").isJsonNull()) && !jsonObj.get("Structure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Structure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Structure").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportSdtmigDatasetsRow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportSdtmigDatasetsRow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportSdtmigDatasetsRow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportSdtmigDatasetsRow.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportSdtmigDatasetsRow>() {
           @Override
           public void write(JsonWriter out, ExportSdtmigDatasetsRow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportSdtmigDatasetsRow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportSdtmigDatasetsRow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportSdtmigDatasetsRow
   * @throws IOException if the JSON string is invalid with respect to ExportSdtmigDatasetsRow
   */
  public static ExportSdtmigDatasetsRow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportSdtmigDatasetsRow.class);
  }

  /**
   * Convert an instance of ExportSdtmigDatasetsRow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


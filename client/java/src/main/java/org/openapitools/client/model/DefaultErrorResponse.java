/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DefaultErrorResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-22T20:17:16.173989497Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class DefaultErrorResponse {
  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  @javax.annotation.Nullable
  private String statusCode;

  public static final String SERIALIZED_NAME_REASON_PHRASE = "reasonPhrase";
  @SerializedName(SERIALIZED_NAME_REASON_PHRASE)
  @javax.annotation.Nullable
  private String reasonPhrase;

  public static final String SERIALIZED_NAME_USER_MESSAGE = "userMessage";
  @SerializedName(SERIALIZED_NAME_USER_MESSAGE)
  @javax.annotation.Nullable
  private String userMessage;

  public static final String SERIALIZED_NAME_ADMIN_MESSAGE = "adminMessage";
  @SerializedName(SERIALIZED_NAME_ADMIN_MESSAGE)
  @javax.annotation.Nullable
  private String adminMessage;

  public DefaultErrorResponse() {
  }

  public DefaultErrorResponse statusCode(@javax.annotation.Nullable String statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * HTTP Status Code
   * @return statusCode
   */
  @javax.annotation.Nullable
  public String getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(@javax.annotation.Nullable String statusCode) {
    this.statusCode = statusCode;
  }


  public DefaultErrorResponse reasonPhrase(@javax.annotation.Nullable String reasonPhrase) {
    this.reasonPhrase = reasonPhrase;
    return this;
  }

  /**
   * HTTP Reason Phrase
   * @return reasonPhrase
   */
  @javax.annotation.Nullable
  public String getReasonPhrase() {
    return reasonPhrase;
  }

  public void setReasonPhrase(@javax.annotation.Nullable String reasonPhrase) {
    this.reasonPhrase = reasonPhrase;
  }


  public DefaultErrorResponse userMessage(@javax.annotation.Nullable String userMessage) {
    this.userMessage = userMessage;
    return this;
  }

  /**
   * User Error Message
   * @return userMessage
   */
  @javax.annotation.Nullable
  public String getUserMessage() {
    return userMessage;
  }

  public void setUserMessage(@javax.annotation.Nullable String userMessage) {
    this.userMessage = userMessage;
  }


  public DefaultErrorResponse adminMessage(@javax.annotation.Nullable String adminMessage) {
    this.adminMessage = adminMessage;
    return this;
  }

  /**
   * Admin Error Message
   * @return adminMessage
   */
  @javax.annotation.Nullable
  public String getAdminMessage() {
    return adminMessage;
  }

  public void setAdminMessage(@javax.annotation.Nullable String adminMessage) {
    this.adminMessage = adminMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DefaultErrorResponse defaultErrorResponse = (DefaultErrorResponse) o;
    return Objects.equals(this.statusCode, defaultErrorResponse.statusCode) &&
        Objects.equals(this.reasonPhrase, defaultErrorResponse.reasonPhrase) &&
        Objects.equals(this.userMessage, defaultErrorResponse.userMessage) &&
        Objects.equals(this.adminMessage, defaultErrorResponse.adminMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statusCode, reasonPhrase, userMessage, adminMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DefaultErrorResponse {\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    reasonPhrase: ").append(toIndentedString(reasonPhrase)).append("\n");
    sb.append("    userMessage: ").append(toIndentedString(userMessage)).append("\n");
    sb.append("    adminMessage: ").append(toIndentedString(adminMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("statusCode", "reasonPhrase", "userMessage", "adminMessage"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DefaultErrorResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DefaultErrorResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DefaultErrorResponse is not found in the empty JSON string", DefaultErrorResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DefaultErrorResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DefaultErrorResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("statusCode") != null && !jsonObj.get("statusCode").isJsonNull()) && !jsonObj.get("statusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusCode").toString()));
      }
      if ((jsonObj.get("reasonPhrase") != null && !jsonObj.get("reasonPhrase").isJsonNull()) && !jsonObj.get("reasonPhrase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reasonPhrase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reasonPhrase").toString()));
      }
      if ((jsonObj.get("userMessage") != null && !jsonObj.get("userMessage").isJsonNull()) && !jsonObj.get("userMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userMessage").toString()));
      }
      if ((jsonObj.get("adminMessage") != null && !jsonObj.get("adminMessage").isJsonNull()) && !jsonObj.get("adminMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DefaultErrorResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DefaultErrorResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DefaultErrorResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DefaultErrorResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DefaultErrorResponse>() {
           @Override
           public void write(JsonWriter out, DefaultErrorResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DefaultErrorResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DefaultErrorResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DefaultErrorResponse
   * @throws IOException if the JSON string is invalid with respect to DefaultErrorResponse
   */
  public static DefaultErrorResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DefaultErrorResponse.class);
  }

  /**
   * Convert an instance of DefaultErrorResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


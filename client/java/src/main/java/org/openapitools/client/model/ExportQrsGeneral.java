/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExportQrsGeneral
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-22T20:17:16.173989497Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class ExportQrsGeneral {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_LABEL = "Label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  @javax.annotation.Nullable
  private String label;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "Effective Date";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  @javax.annotation.Nullable
  private String effectiveDate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_CATEGORY_QUOTE_S_CODELIST_C_CODE = "Category&#39;s Codelist C-Code";
  @SerializedName(SERIALIZED_NAME_CATEGORY_QUOTE_S_CODELIST_C_CODE)
  @javax.annotation.Nullable
  private String categoryQuoteSCodelistCCode;

  public static final String SERIALIZED_NAME_CATEGORY_QUOTE_S_TERM_C_CODE = "Category&#39;s Term C-Code";
  @SerializedName(SERIALIZED_NAME_CATEGORY_QUOTE_S_TERM_C_CODE)
  @javax.annotation.Nullable
  private String categoryQuoteSTermCCode;

  public ExportQrsGeneral() {
  }

  public ExportQrsGeneral name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public ExportQrsGeneral label(@javax.annotation.Nullable String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(@javax.annotation.Nullable String label) {
    this.label = label;
  }


  public ExportQrsGeneral effectiveDate(@javax.annotation.Nullable String effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

  /**
   * Get effectiveDate
   * @return effectiveDate
   */
  @javax.annotation.Nullable
  public String getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(@javax.annotation.Nullable String effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public ExportQrsGeneral description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public ExportQrsGeneral type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public ExportQrsGeneral categoryQuoteSCodelistCCode(@javax.annotation.Nullable String categoryQuoteSCodelistCCode) {
    this.categoryQuoteSCodelistCCode = categoryQuoteSCodelistCCode;
    return this;
  }

  /**
   * Get categoryQuoteSCodelistCCode
   * @return categoryQuoteSCodelistCCode
   */
  @javax.annotation.Nullable
  public String getCategoryQuoteSCodelistCCode() {
    return categoryQuoteSCodelistCCode;
  }

  public void setCategoryQuoteSCodelistCCode(@javax.annotation.Nullable String categoryQuoteSCodelistCCode) {
    this.categoryQuoteSCodelistCCode = categoryQuoteSCodelistCCode;
  }


  public ExportQrsGeneral categoryQuoteSTermCCode(@javax.annotation.Nullable String categoryQuoteSTermCCode) {
    this.categoryQuoteSTermCCode = categoryQuoteSTermCCode;
    return this;
  }

  /**
   * Get categoryQuoteSTermCCode
   * @return categoryQuoteSTermCCode
   */
  @javax.annotation.Nullable
  public String getCategoryQuoteSTermCCode() {
    return categoryQuoteSTermCCode;
  }

  public void setCategoryQuoteSTermCCode(@javax.annotation.Nullable String categoryQuoteSTermCCode) {
    this.categoryQuoteSTermCCode = categoryQuoteSTermCCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportQrsGeneral exportQrsGeneral = (ExportQrsGeneral) o;
    return Objects.equals(this.name, exportQrsGeneral.name) &&
        Objects.equals(this.label, exportQrsGeneral.label) &&
        Objects.equals(this.effectiveDate, exportQrsGeneral.effectiveDate) &&
        Objects.equals(this.description, exportQrsGeneral.description) &&
        Objects.equals(this.type, exportQrsGeneral.type) &&
        Objects.equals(this.categoryQuoteSCodelistCCode, exportQrsGeneral.categoryQuoteSCodelistCCode) &&
        Objects.equals(this.categoryQuoteSTermCCode, exportQrsGeneral.categoryQuoteSTermCCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, label, effectiveDate, description, type, categoryQuoteSCodelistCCode, categoryQuoteSTermCCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportQrsGeneral {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    categoryQuoteSCodelistCCode: ").append(toIndentedString(categoryQuoteSCodelistCCode)).append("\n");
    sb.append("    categoryQuoteSTermCCode: ").append(toIndentedString(categoryQuoteSTermCCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Name", "Label", "Effective Date", "Description", "Type", "Category&#39;s Codelist C-Code", "Category&#39;s Term C-Code"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportQrsGeneral
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportQrsGeneral.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportQrsGeneral is not found in the empty JSON string", ExportQrsGeneral.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportQrsGeneral.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportQrsGeneral` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Label") != null && !jsonObj.get("Label").isJsonNull()) && !jsonObj.get("Label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Label").toString()));
      }
      if ((jsonObj.get("Effective Date") != null && !jsonObj.get("Effective Date").isJsonNull()) && !jsonObj.get("Effective Date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Effective Date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Effective Date").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      if ((jsonObj.get("Category's Codelist C-Code") != null && !jsonObj.get("Category's Codelist C-Code").isJsonNull()) && !jsonObj.get("Category's Codelist C-Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Category's Codelist C-Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Category's Codelist C-Code").toString()));
      }
      if ((jsonObj.get("Category's Term C-Code") != null && !jsonObj.get("Category's Term C-Code").isJsonNull()) && !jsonObj.get("Category's Term C-Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Category's Term C-Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Category's Term C-Code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportQrsGeneral.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportQrsGeneral' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportQrsGeneral> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportQrsGeneral.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportQrsGeneral>() {
           @Override
           public void write(JsonWriter out, ExportQrsGeneral value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportQrsGeneral read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportQrsGeneral given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportQrsGeneral
   * @throws IOException if the JSON string is invalid with respect to ExportQrsGeneral
   */
  public static ExportQrsGeneral fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportQrsGeneral.class);
  }

  /**
   * Convert an instance of ExportQrsGeneral to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CtCodelist;
import org.openapitools.client.model.CtCodelistTerms;
import org.openapitools.client.model.CtPackage;
import org.openapitools.client.model.CtPackageCodelists;
import org.openapitools.client.model.CtPackages;
import org.openapitools.client.model.CtTerm;
import org.openapitools.client.model.DefaultErrorResponse;
import org.openapitools.client.model.ExportCtTable;
import org.openapitools.client.model.RootCtCodelist;
import org.openapitools.client.model.RootCtTerm;
import org.openapitools.client.model.XmlCtCodelist;
import org.openapitools.client.model.XmlCtCodelistTerms;
import org.openapitools.client.model.XmlCtPackage;
import org.openapitools.client.model.XmlCtPackageCodelists;
import org.openapitools.client.model.XmlCtPackages;
import org.openapitools.client.model.XmlCtTerm;
import org.openapitools.client.model.XmlRootCtCodelist;
import org.openapitools.client.model.XmlRootCtTerm;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ControlledTerminologyCtApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ControlledTerminologyCtApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ControlledTerminologyCtApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for mdrCtPackagesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrCtPackagesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/ct/packages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrCtPackagesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return mdrCtPackagesGetCall(_callback);

    }

    /**
     * 
     * Get CDISC Library CT Package List
     * @return CtPackages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public CtPackages mdrCtPackagesGet() throws ApiException {
        ApiResponse<CtPackages> localVarResp = mdrCtPackagesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get CDISC Library CT Package List
     * @return ApiResponse&lt;CtPackages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CtPackages> mdrCtPackagesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = mdrCtPackagesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CtPackages>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get CDISC Library CT Package List
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrCtPackagesGetAsync(final ApiCallback<CtPackages> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrCtPackagesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CtPackages>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrCtPackagesPackageCodelistsCodelistGet
     * @param _package CT Package Identifier (required)
     * @param codelist CT Codelist Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrCtPackagesPackageCodelistsCodelistGetCall(@javax.annotation.Nonnull String _package, @javax.annotation.Nonnull String codelist, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/ct/packages/{package}/codelists/{codelist}"
            .replace("{" + "package" + "}", localVarApiClient.escapeString(_package.toString()))
            .replace("{" + "codelist" + "}", localVarApiClient.escapeString(codelist.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrCtPackagesPackageCodelistsCodelistGetValidateBeforeCall(@javax.annotation.Nonnull String _package, @javax.annotation.Nonnull String codelist, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_package' is set
        if (_package == null) {
            throw new ApiException("Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsCodelistGet(Async)");
        }

        // verify the required parameter 'codelist' is set
        if (codelist == null) {
            throw new ApiException("Missing the required parameter 'codelist' when calling mdrCtPackagesPackageCodelistsCodelistGet(Async)");
        }

        return mdrCtPackagesPackageCodelistsCodelistGetCall(_package, codelist, _callback);

    }

    /**
     * 
     * Get CDISC Library CT Package Codelist
     * @param _package CT Package Identifier (required)
     * @param codelist CT Codelist Identifier (required)
     * @return CtCodelist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public CtCodelist mdrCtPackagesPackageCodelistsCodelistGet(@javax.annotation.Nonnull String _package, @javax.annotation.Nonnull String codelist) throws ApiException {
        ApiResponse<CtCodelist> localVarResp = mdrCtPackagesPackageCodelistsCodelistGetWithHttpInfo(_package, codelist);
        return localVarResp.getData();
    }

    /**
     * 
     * Get CDISC Library CT Package Codelist
     * @param _package CT Package Identifier (required)
     * @param codelist CT Codelist Identifier (required)
     * @return ApiResponse&lt;CtCodelist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CtCodelist> mdrCtPackagesPackageCodelistsCodelistGetWithHttpInfo(@javax.annotation.Nonnull String _package, @javax.annotation.Nonnull String codelist) throws ApiException {
        okhttp3.Call localVarCall = mdrCtPackagesPackageCodelistsCodelistGetValidateBeforeCall(_package, codelist, null);
        Type localVarReturnType = new TypeToken<CtCodelist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get CDISC Library CT Package Codelist
     * @param _package CT Package Identifier (required)
     * @param codelist CT Codelist Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrCtPackagesPackageCodelistsCodelistGetAsync(@javax.annotation.Nonnull String _package, @javax.annotation.Nonnull String codelist, final ApiCallback<CtCodelist> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrCtPackagesPackageCodelistsCodelistGetValidateBeforeCall(_package, codelist, _callback);
        Type localVarReturnType = new TypeToken<CtCodelist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrCtPackagesPackageCodelistsCodelistTermsGet
     * @param _package CT Package Identifier (required)
     * @param codelist CT Codelist Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrCtPackagesPackageCodelistsCodelistTermsGetCall(@javax.annotation.Nonnull String _package, @javax.annotation.Nonnull String codelist, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/ct/packages/{package}/codelists/{codelist}/terms"
            .replace("{" + "package" + "}", localVarApiClient.escapeString(_package.toString()))
            .replace("{" + "codelist" + "}", localVarApiClient.escapeString(codelist.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrCtPackagesPackageCodelistsCodelistTermsGetValidateBeforeCall(@javax.annotation.Nonnull String _package, @javax.annotation.Nonnull String codelist, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_package' is set
        if (_package == null) {
            throw new ApiException("Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsCodelistTermsGet(Async)");
        }

        // verify the required parameter 'codelist' is set
        if (codelist == null) {
            throw new ApiException("Missing the required parameter 'codelist' when calling mdrCtPackagesPackageCodelistsCodelistTermsGet(Async)");
        }

        return mdrCtPackagesPackageCodelistsCodelistTermsGetCall(_package, codelist, _callback);

    }

    /**
     * 
     * Get CDISC Library CT Package Codelist Term List
     * @param _package CT Package Identifier (required)
     * @param codelist CT Codelist Identifier (required)
     * @return CtCodelistTerms
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public CtCodelistTerms mdrCtPackagesPackageCodelistsCodelistTermsGet(@javax.annotation.Nonnull String _package, @javax.annotation.Nonnull String codelist) throws ApiException {
        ApiResponse<CtCodelistTerms> localVarResp = mdrCtPackagesPackageCodelistsCodelistTermsGetWithHttpInfo(_package, codelist);
        return localVarResp.getData();
    }

    /**
     * 
     * Get CDISC Library CT Package Codelist Term List
     * @param _package CT Package Identifier (required)
     * @param codelist CT Codelist Identifier (required)
     * @return ApiResponse&lt;CtCodelistTerms&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CtCodelistTerms> mdrCtPackagesPackageCodelistsCodelistTermsGetWithHttpInfo(@javax.annotation.Nonnull String _package, @javax.annotation.Nonnull String codelist) throws ApiException {
        okhttp3.Call localVarCall = mdrCtPackagesPackageCodelistsCodelistTermsGetValidateBeforeCall(_package, codelist, null);
        Type localVarReturnType = new TypeToken<CtCodelistTerms>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get CDISC Library CT Package Codelist Term List
     * @param _package CT Package Identifier (required)
     * @param codelist CT Codelist Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrCtPackagesPackageCodelistsCodelistTermsGetAsync(@javax.annotation.Nonnull String _package, @javax.annotation.Nonnull String codelist, final ApiCallback<CtCodelistTerms> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrCtPackagesPackageCodelistsCodelistTermsGetValidateBeforeCall(_package, codelist, _callback);
        Type localVarReturnType = new TypeToken<CtCodelistTerms>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrCtPackagesPackageCodelistsCodelistTermsTermGet
     * @param _package CT Package Product Identifier (required)
     * @param codelist CT Codelist Identifier (required)
     * @param term CT Codelist Term Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrCtPackagesPackageCodelistsCodelistTermsTermGetCall(@javax.annotation.Nonnull String _package, @javax.annotation.Nonnull String codelist, @javax.annotation.Nonnull String term, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/ct/packages/{package}/codelists/{codelist}/terms/{term}"
            .replace("{" + "package" + "}", localVarApiClient.escapeString(_package.toString()))
            .replace("{" + "codelist" + "}", localVarApiClient.escapeString(codelist.toString()))
            .replace("{" + "term" + "}", localVarApiClient.escapeString(term.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrCtPackagesPackageCodelistsCodelistTermsTermGetValidateBeforeCall(@javax.annotation.Nonnull String _package, @javax.annotation.Nonnull String codelist, @javax.annotation.Nonnull String term, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_package' is set
        if (_package == null) {
            throw new ApiException("Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet(Async)");
        }

        // verify the required parameter 'codelist' is set
        if (codelist == null) {
            throw new ApiException("Missing the required parameter 'codelist' when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet(Async)");
        }

        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet(Async)");
        }

        return mdrCtPackagesPackageCodelistsCodelistTermsTermGetCall(_package, codelist, term, _callback);

    }

    /**
     * 
     * Get CDISC Library CT Package Codelist Term
     * @param _package CT Package Product Identifier (required)
     * @param codelist CT Codelist Identifier (required)
     * @param term CT Codelist Term Identifier (required)
     * @return CtTerm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public CtTerm mdrCtPackagesPackageCodelistsCodelistTermsTermGet(@javax.annotation.Nonnull String _package, @javax.annotation.Nonnull String codelist, @javax.annotation.Nonnull String term) throws ApiException {
        ApiResponse<CtTerm> localVarResp = mdrCtPackagesPackageCodelistsCodelistTermsTermGetWithHttpInfo(_package, codelist, term);
        return localVarResp.getData();
    }

    /**
     * 
     * Get CDISC Library CT Package Codelist Term
     * @param _package CT Package Product Identifier (required)
     * @param codelist CT Codelist Identifier (required)
     * @param term CT Codelist Term Identifier (required)
     * @return ApiResponse&lt;CtTerm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CtTerm> mdrCtPackagesPackageCodelistsCodelistTermsTermGetWithHttpInfo(@javax.annotation.Nonnull String _package, @javax.annotation.Nonnull String codelist, @javax.annotation.Nonnull String term) throws ApiException {
        okhttp3.Call localVarCall = mdrCtPackagesPackageCodelistsCodelistTermsTermGetValidateBeforeCall(_package, codelist, term, null);
        Type localVarReturnType = new TypeToken<CtTerm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get CDISC Library CT Package Codelist Term
     * @param _package CT Package Product Identifier (required)
     * @param codelist CT Codelist Identifier (required)
     * @param term CT Codelist Term Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrCtPackagesPackageCodelistsCodelistTermsTermGetAsync(@javax.annotation.Nonnull String _package, @javax.annotation.Nonnull String codelist, @javax.annotation.Nonnull String term, final ApiCallback<CtTerm> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrCtPackagesPackageCodelistsCodelistTermsTermGetValidateBeforeCall(_package, codelist, term, _callback);
        Type localVarReturnType = new TypeToken<CtTerm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrCtPackagesPackageCodelistsGet
     * @param _package CT Package Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrCtPackagesPackageCodelistsGetCall(@javax.annotation.Nonnull String _package, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/ct/packages/{package}/codelists"
            .replace("{" + "package" + "}", localVarApiClient.escapeString(_package.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrCtPackagesPackageCodelistsGetValidateBeforeCall(@javax.annotation.Nonnull String _package, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_package' is set
        if (_package == null) {
            throw new ApiException("Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsGet(Async)");
        }

        return mdrCtPackagesPackageCodelistsGetCall(_package, _callback);

    }

    /**
     * 
     * Get CDISC Library CT Package Codelist List
     * @param _package CT Package Identifier (required)
     * @return CtPackageCodelists
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public CtPackageCodelists mdrCtPackagesPackageCodelistsGet(@javax.annotation.Nonnull String _package) throws ApiException {
        ApiResponse<CtPackageCodelists> localVarResp = mdrCtPackagesPackageCodelistsGetWithHttpInfo(_package);
        return localVarResp.getData();
    }

    /**
     * 
     * Get CDISC Library CT Package Codelist List
     * @param _package CT Package Identifier (required)
     * @return ApiResponse&lt;CtPackageCodelists&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CtPackageCodelists> mdrCtPackagesPackageCodelistsGetWithHttpInfo(@javax.annotation.Nonnull String _package) throws ApiException {
        okhttp3.Call localVarCall = mdrCtPackagesPackageCodelistsGetValidateBeforeCall(_package, null);
        Type localVarReturnType = new TypeToken<CtPackageCodelists>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get CDISC Library CT Package Codelist List
     * @param _package CT Package Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrCtPackagesPackageCodelistsGetAsync(@javax.annotation.Nonnull String _package, final ApiCallback<CtPackageCodelists> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrCtPackagesPackageCodelistsGetValidateBeforeCall(_package, _callback);
        Type localVarReturnType = new TypeToken<CtPackageCodelists>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrCtPackagesProductGet
     * @param product CT Package Product Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrCtPackagesProductGetCall(@javax.annotation.Nonnull String product, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/ct/packages/{product}"
            .replace("{" + "product" + "}", localVarApiClient.escapeString(product.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml",
            "text/csv",
            "application/vnd.ms-excel",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrCtPackagesProductGetValidateBeforeCall(@javax.annotation.Nonnull String product, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'product' is set
        if (product == null) {
            throw new ApiException("Missing the required parameter 'product' when calling mdrCtPackagesProductGet(Async)");
        }

        return mdrCtPackagesProductGetCall(product, _callback);

    }

    /**
     * 
     * Get CDISC Library CT Package
     * @param product CT Package Product Identifier (required)
     * @return CtPackage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public CtPackage mdrCtPackagesProductGet(@javax.annotation.Nonnull String product) throws ApiException {
        ApiResponse<CtPackage> localVarResp = mdrCtPackagesProductGetWithHttpInfo(product);
        return localVarResp.getData();
    }

    /**
     * 
     * Get CDISC Library CT Package
     * @param product CT Package Product Identifier (required)
     * @return ApiResponse&lt;CtPackage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CtPackage> mdrCtPackagesProductGetWithHttpInfo(@javax.annotation.Nonnull String product) throws ApiException {
        okhttp3.Call localVarCall = mdrCtPackagesProductGetValidateBeforeCall(product, null);
        Type localVarReturnType = new TypeToken<CtPackage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get CDISC Library CT Package
     * @param product CT Package Product Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrCtPackagesProductGetAsync(@javax.annotation.Nonnull String product, final ApiCallback<CtPackage> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrCtPackagesProductGetValidateBeforeCall(product, _callback);
        Type localVarReturnType = new TypeToken<CtPackage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrRootCtProductGroupCodelistsCodelistGet
     * @param productGroup CT Product Group Identifier (required)
     * @param codelist CT Codelist Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrRootCtProductGroupCodelistsCodelistGetCall(@javax.annotation.Nonnull String productGroup, @javax.annotation.Nonnull String codelist, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/root/ct/{productGroup}/codelists/{codelist}"
            .replace("{" + "productGroup" + "}", localVarApiClient.escapeString(productGroup.toString()))
            .replace("{" + "codelist" + "}", localVarApiClient.escapeString(codelist.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrRootCtProductGroupCodelistsCodelistGetValidateBeforeCall(@javax.annotation.Nonnull String productGroup, @javax.annotation.Nonnull String codelist, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productGroup' is set
        if (productGroup == null) {
            throw new ApiException("Missing the required parameter 'productGroup' when calling mdrRootCtProductGroupCodelistsCodelistGet(Async)");
        }

        // verify the required parameter 'codelist' is set
        if (codelist == null) {
            throw new ApiException("Missing the required parameter 'codelist' when calling mdrRootCtProductGroupCodelistsCodelistGet(Async)");
        }

        return mdrRootCtProductGroupCodelistsCodelistGetCall(productGroup, codelist, _callback);

    }

    /**
     * 
     * Get CDISC Library Root CT Codelist
     * @param productGroup CT Product Group Identifier (required)
     * @param codelist CT Codelist Identifier (required)
     * @return RootCtCodelist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public RootCtCodelist mdrRootCtProductGroupCodelistsCodelistGet(@javax.annotation.Nonnull String productGroup, @javax.annotation.Nonnull String codelist) throws ApiException {
        ApiResponse<RootCtCodelist> localVarResp = mdrRootCtProductGroupCodelistsCodelistGetWithHttpInfo(productGroup, codelist);
        return localVarResp.getData();
    }

    /**
     * 
     * Get CDISC Library Root CT Codelist
     * @param productGroup CT Product Group Identifier (required)
     * @param codelist CT Codelist Identifier (required)
     * @return ApiResponse&lt;RootCtCodelist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RootCtCodelist> mdrRootCtProductGroupCodelistsCodelistGetWithHttpInfo(@javax.annotation.Nonnull String productGroup, @javax.annotation.Nonnull String codelist) throws ApiException {
        okhttp3.Call localVarCall = mdrRootCtProductGroupCodelistsCodelistGetValidateBeforeCall(productGroup, codelist, null);
        Type localVarReturnType = new TypeToken<RootCtCodelist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get CDISC Library Root CT Codelist
     * @param productGroup CT Product Group Identifier (required)
     * @param codelist CT Codelist Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrRootCtProductGroupCodelistsCodelistGetAsync(@javax.annotation.Nonnull String productGroup, @javax.annotation.Nonnull String codelist, final ApiCallback<RootCtCodelist> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrRootCtProductGroupCodelistsCodelistGetValidateBeforeCall(productGroup, codelist, _callback);
        Type localVarReturnType = new TypeToken<RootCtCodelist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrRootCtProductGroupCodelistsCodelistTermsTermGet
     * @param productGroup CT Product Group Identifier (required)
     * @param codelist CT Codelist Identifier (required)
     * @param term CT Codelist Term Identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrRootCtProductGroupCodelistsCodelistTermsTermGetCall(@javax.annotation.Nonnull String productGroup, @javax.annotation.Nonnull String codelist, @javax.annotation.Nonnull String term, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/root/ct/{productGroup}/codelists/{codelist}/terms/{term}"
            .replace("{" + "productGroup" + "}", localVarApiClient.escapeString(productGroup.toString()))
            .replace("{" + "codelist" + "}", localVarApiClient.escapeString(codelist.toString()))
            .replace("{" + "term" + "}", localVarApiClient.escapeString(term.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrRootCtProductGroupCodelistsCodelistTermsTermGetValidateBeforeCall(@javax.annotation.Nonnull String productGroup, @javax.annotation.Nonnull String codelist, @javax.annotation.Nonnull String term, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productGroup' is set
        if (productGroup == null) {
            throw new ApiException("Missing the required parameter 'productGroup' when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet(Async)");
        }

        // verify the required parameter 'codelist' is set
        if (codelist == null) {
            throw new ApiException("Missing the required parameter 'codelist' when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet(Async)");
        }

        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet(Async)");
        }

        return mdrRootCtProductGroupCodelistsCodelistTermsTermGetCall(productGroup, codelist, term, _callback);

    }

    /**
     * 
     * Get CDISC Library Root CT Term
     * @param productGroup CT Product Group Identifier (required)
     * @param codelist CT Codelist Identifier (required)
     * @param term CT Codelist Term Identifier (required)
     * @return RootCtTerm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public RootCtTerm mdrRootCtProductGroupCodelistsCodelistTermsTermGet(@javax.annotation.Nonnull String productGroup, @javax.annotation.Nonnull String codelist, @javax.annotation.Nonnull String term) throws ApiException {
        ApiResponse<RootCtTerm> localVarResp = mdrRootCtProductGroupCodelistsCodelistTermsTermGetWithHttpInfo(productGroup, codelist, term);
        return localVarResp.getData();
    }

    /**
     * 
     * Get CDISC Library Root CT Term
     * @param productGroup CT Product Group Identifier (required)
     * @param codelist CT Codelist Identifier (required)
     * @param term CT Codelist Term Identifier (required)
     * @return ApiResponse&lt;RootCtTerm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RootCtTerm> mdrRootCtProductGroupCodelistsCodelistTermsTermGetWithHttpInfo(@javax.annotation.Nonnull String productGroup, @javax.annotation.Nonnull String codelist, @javax.annotation.Nonnull String term) throws ApiException {
        okhttp3.Call localVarCall = mdrRootCtProductGroupCodelistsCodelistTermsTermGetValidateBeforeCall(productGroup, codelist, term, null);
        Type localVarReturnType = new TypeToken<RootCtTerm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get CDISC Library Root CT Term
     * @param productGroup CT Product Group Identifier (required)
     * @param codelist CT Codelist Identifier (required)
     * @param term CT Codelist Term Identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mdrRootCtProductGroupCodelistsCodelistTermsTermGetAsync(@javax.annotation.Nonnull String productGroup, @javax.annotation.Nonnull String codelist, @javax.annotation.Nonnull String term, final ApiCallback<RootCtTerm> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrRootCtProductGroupCodelistsCodelistTermsTermGetValidateBeforeCall(productGroup, codelist, term, _callback);
        Type localVarReturnType = new TypeToken<RootCtTerm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

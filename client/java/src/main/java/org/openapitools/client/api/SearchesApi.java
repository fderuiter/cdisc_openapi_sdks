/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.DefaultErrorResponse;
import org.openapitools.client.model.DefaultSearchResponse;
import org.openapitools.client.model.DefaultSearchScopes;
import org.openapitools.client.model.MdrSearchScopesGet200Response;
import org.openapitools.client.model.ScopeValues;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for mdrSearchGet
     * @param q Search Term Expression (required)
     * @param highlight Search Highlight Expression (optional)
     * @param start Initial Search Result Index (optional, default to 0)
     * @param pageSize Number of Search Results to Return (optional, default to 100)
     * @param propertyClass Limit Search by Setting Scope to Class (optional)
     * @param codelist Limit Search by Setting Scope to Codelist (optional)
     * @param conceptId Limit Search by Setting Scope to Concept ID (optional)
     * @param core Limit Search by Setting Scope to Core (optional)
     * @param dataStructure Limit Search by Setting Scope to Data Structure (optional)
     * @param datasetStructure Limit Search by Setting Scope to Dataset Structure (optional)
     * @param definition Limit Search by Setting Scope to Definition (optional)
     * @param description Limit Search by Setting Scope to Description (optional)
     * @param domain Limit Search by Setting Scope to Domain (optional)
     * @param effectiveDate Limit Search by Setting Scope to Effective Date (optional)
     * @param extensible Limit Search by Setting Scope to Extensible (optional)
     * @param href Limit Search by Setting Scope to Href (optional)
     * @param label Limit Search by Setting Scope to Label (optional)
     * @param measureType SLimit Search by Setting Scope to Measure Type (optional)
     * @param name Limit Search by Setting Scope to Name (optional)
     * @param preferredTerm Limit Search by Setting Scope to Preferred Term (optional)
     * @param product Limit Search by Setting Scope to Product (optional)
     * @param productGroup Limit Search by Setting Scope to Product Group (optional)
     * @param registrationStatus Limit Search by Setting Scope to Registration Status (optional)
     * @param roleDescription Limit Search by Setting Scope to Role Description (optional)
     * @param sdtmTarget Limit Search by Setting Scope to SDTM Target (optional)
     * @param simpleDatatype Limit Search by Setting Scope to Simple Datatype (optional)
     * @param submissionValue Limit Search by Setting Scope to Submission Value (optional)
     * @param synonyms Limit Search by Setting Scope to Synonyms (optional)
     * @param type Limit Search by Setting Scope to Type (optional)
     * @param uiHref Limit Search by Setting Scope to UI Href (optional)
     * @param valueDomain Limit Search by Setting Scope to Value Domain (optional)
     * @param variableSet Limit Search by Setting Scope to Variable Set (optional)
     * @param version Limit Search by Setting Scope to Version (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     * Release Notes about Searches
     * @see <a href="https://wiki.cdisc.org/display/LIBSUPRT/Search"> Documentation</a>
     */
    public okhttp3.Call mdrSearchGetCall(@javax.annotation.Nonnull String q, @javax.annotation.Nullable String highlight, @javax.annotation.Nullable BigDecimal start, @javax.annotation.Nullable BigDecimal pageSize, @javax.annotation.Nullable String propertyClass, @javax.annotation.Nullable String codelist, @javax.annotation.Nullable String conceptId, @javax.annotation.Nullable String core, @javax.annotation.Nullable String dataStructure, @javax.annotation.Nullable String datasetStructure, @javax.annotation.Nullable String definition, @javax.annotation.Nullable String description, @javax.annotation.Nullable String domain, @javax.annotation.Nullable String effectiveDate, @javax.annotation.Nullable String extensible, @javax.annotation.Nullable String href, @javax.annotation.Nullable String label, @javax.annotation.Nullable String measureType, @javax.annotation.Nullable String name, @javax.annotation.Nullable String preferredTerm, @javax.annotation.Nullable String product, @javax.annotation.Nullable String productGroup, @javax.annotation.Nullable String registrationStatus, @javax.annotation.Nullable String roleDescription, @javax.annotation.Nullable String sdtmTarget, @javax.annotation.Nullable String simpleDatatype, @javax.annotation.Nullable String submissionValue, @javax.annotation.Nullable String synonyms, @javax.annotation.Nullable String type, @javax.annotation.Nullable String uiHref, @javax.annotation.Nullable String valueDomain, @javax.annotation.Nullable String variableSet, @javax.annotation.Nullable String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (highlight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highlight", highlight));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (propertyClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("class", propertyClass));
        }

        if (codelist != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codelist", codelist));
        }

        if (conceptId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("conceptId", conceptId));
        }

        if (core != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("core", core));
        }

        if (dataStructure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataStructure", dataStructure));
        }

        if (datasetStructure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("datasetStructure", datasetStructure));
        }

        if (definition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("definition", definition));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (domain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domain", domain));
        }

        if (effectiveDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveDate", effectiveDate));
        }

        if (extensible != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extensible", extensible));
        }

        if (href != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("href", href));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (measureType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("measureType", measureType));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (preferredTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("preferredTerm", preferredTerm));
        }

        if (product != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product", product));
        }

        if (productGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productGroup", productGroup));
        }

        if (registrationStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("registrationStatus", registrationStatus));
        }

        if (roleDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roleDescription", roleDescription));
        }

        if (sdtmTarget != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sdtmTarget", sdtmTarget));
        }

        if (simpleDatatype != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("simpleDatatype", simpleDatatype));
        }

        if (submissionValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("submissionValue", submissionValue));
        }

        if (synonyms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("synonyms", synonyms));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (uiHref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uiHref", uiHref));
        }

        if (valueDomain != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("valueDomain", valueDomain));
        }

        if (variableSet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("variableSet", variableSet));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrSearchGetValidateBeforeCall(@javax.annotation.Nonnull String q, @javax.annotation.Nullable String highlight, @javax.annotation.Nullable BigDecimal start, @javax.annotation.Nullable BigDecimal pageSize, @javax.annotation.Nullable String propertyClass, @javax.annotation.Nullable String codelist, @javax.annotation.Nullable String conceptId, @javax.annotation.Nullable String core, @javax.annotation.Nullable String dataStructure, @javax.annotation.Nullable String datasetStructure, @javax.annotation.Nullable String definition, @javax.annotation.Nullable String description, @javax.annotation.Nullable String domain, @javax.annotation.Nullable String effectiveDate, @javax.annotation.Nullable String extensible, @javax.annotation.Nullable String href, @javax.annotation.Nullable String label, @javax.annotation.Nullable String measureType, @javax.annotation.Nullable String name, @javax.annotation.Nullable String preferredTerm, @javax.annotation.Nullable String product, @javax.annotation.Nullable String productGroup, @javax.annotation.Nullable String registrationStatus, @javax.annotation.Nullable String roleDescription, @javax.annotation.Nullable String sdtmTarget, @javax.annotation.Nullable String simpleDatatype, @javax.annotation.Nullable String submissionValue, @javax.annotation.Nullable String synonyms, @javax.annotation.Nullable String type, @javax.annotation.Nullable String uiHref, @javax.annotation.Nullable String valueDomain, @javax.annotation.Nullable String variableSet, @javax.annotation.Nullable String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling mdrSearchGet(Async)");
        }

        return mdrSearchGetCall(q, highlight, start, pageSize, propertyClass, codelist, conceptId, core, dataStructure, datasetStructure, definition, description, domain, effectiveDate, extensible, href, label, measureType, name, preferredTerm, product, productGroup, registrationStatus, roleDescription, sdtmTarget, simpleDatatype, submissionValue, synonyms, type, uiHref, valueDomain, variableSet, version, _callback);

    }

    /**
     * 
     * Get Search Results Across CDISC Library
     * @param q Search Term Expression (required)
     * @param highlight Search Highlight Expression (optional)
     * @param start Initial Search Result Index (optional, default to 0)
     * @param pageSize Number of Search Results to Return (optional, default to 100)
     * @param propertyClass Limit Search by Setting Scope to Class (optional)
     * @param codelist Limit Search by Setting Scope to Codelist (optional)
     * @param conceptId Limit Search by Setting Scope to Concept ID (optional)
     * @param core Limit Search by Setting Scope to Core (optional)
     * @param dataStructure Limit Search by Setting Scope to Data Structure (optional)
     * @param datasetStructure Limit Search by Setting Scope to Dataset Structure (optional)
     * @param definition Limit Search by Setting Scope to Definition (optional)
     * @param description Limit Search by Setting Scope to Description (optional)
     * @param domain Limit Search by Setting Scope to Domain (optional)
     * @param effectiveDate Limit Search by Setting Scope to Effective Date (optional)
     * @param extensible Limit Search by Setting Scope to Extensible (optional)
     * @param href Limit Search by Setting Scope to Href (optional)
     * @param label Limit Search by Setting Scope to Label (optional)
     * @param measureType SLimit Search by Setting Scope to Measure Type (optional)
     * @param name Limit Search by Setting Scope to Name (optional)
     * @param preferredTerm Limit Search by Setting Scope to Preferred Term (optional)
     * @param product Limit Search by Setting Scope to Product (optional)
     * @param productGroup Limit Search by Setting Scope to Product Group (optional)
     * @param registrationStatus Limit Search by Setting Scope to Registration Status (optional)
     * @param roleDescription Limit Search by Setting Scope to Role Description (optional)
     * @param sdtmTarget Limit Search by Setting Scope to SDTM Target (optional)
     * @param simpleDatatype Limit Search by Setting Scope to Simple Datatype (optional)
     * @param submissionValue Limit Search by Setting Scope to Submission Value (optional)
     * @param synonyms Limit Search by Setting Scope to Synonyms (optional)
     * @param type Limit Search by Setting Scope to Type (optional)
     * @param uiHref Limit Search by Setting Scope to UI Href (optional)
     * @param valueDomain Limit Search by Setting Scope to Value Domain (optional)
     * @param variableSet Limit Search by Setting Scope to Variable Set (optional)
     * @param version Limit Search by Setting Scope to Version (optional)
     * @return DefaultSearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     * Release Notes about Searches
     * @see <a href="https://wiki.cdisc.org/display/LIBSUPRT/Search"> Documentation</a>
     */
    public DefaultSearchResponse mdrSearchGet(@javax.annotation.Nonnull String q, @javax.annotation.Nullable String highlight, @javax.annotation.Nullable BigDecimal start, @javax.annotation.Nullable BigDecimal pageSize, @javax.annotation.Nullable String propertyClass, @javax.annotation.Nullable String codelist, @javax.annotation.Nullable String conceptId, @javax.annotation.Nullable String core, @javax.annotation.Nullable String dataStructure, @javax.annotation.Nullable String datasetStructure, @javax.annotation.Nullable String definition, @javax.annotation.Nullable String description, @javax.annotation.Nullable String domain, @javax.annotation.Nullable String effectiveDate, @javax.annotation.Nullable String extensible, @javax.annotation.Nullable String href, @javax.annotation.Nullable String label, @javax.annotation.Nullable String measureType, @javax.annotation.Nullable String name, @javax.annotation.Nullable String preferredTerm, @javax.annotation.Nullable String product, @javax.annotation.Nullable String productGroup, @javax.annotation.Nullable String registrationStatus, @javax.annotation.Nullable String roleDescription, @javax.annotation.Nullable String sdtmTarget, @javax.annotation.Nullable String simpleDatatype, @javax.annotation.Nullable String submissionValue, @javax.annotation.Nullable String synonyms, @javax.annotation.Nullable String type, @javax.annotation.Nullable String uiHref, @javax.annotation.Nullable String valueDomain, @javax.annotation.Nullable String variableSet, @javax.annotation.Nullable String version) throws ApiException {
        ApiResponse<DefaultSearchResponse> localVarResp = mdrSearchGetWithHttpInfo(q, highlight, start, pageSize, propertyClass, codelist, conceptId, core, dataStructure, datasetStructure, definition, description, domain, effectiveDate, extensible, href, label, measureType, name, preferredTerm, product, productGroup, registrationStatus, roleDescription, sdtmTarget, simpleDatatype, submissionValue, synonyms, type, uiHref, valueDomain, variableSet, version);
        return localVarResp.getData();
    }

    /**
     * 
     * Get Search Results Across CDISC Library
     * @param q Search Term Expression (required)
     * @param highlight Search Highlight Expression (optional)
     * @param start Initial Search Result Index (optional, default to 0)
     * @param pageSize Number of Search Results to Return (optional, default to 100)
     * @param propertyClass Limit Search by Setting Scope to Class (optional)
     * @param codelist Limit Search by Setting Scope to Codelist (optional)
     * @param conceptId Limit Search by Setting Scope to Concept ID (optional)
     * @param core Limit Search by Setting Scope to Core (optional)
     * @param dataStructure Limit Search by Setting Scope to Data Structure (optional)
     * @param datasetStructure Limit Search by Setting Scope to Dataset Structure (optional)
     * @param definition Limit Search by Setting Scope to Definition (optional)
     * @param description Limit Search by Setting Scope to Description (optional)
     * @param domain Limit Search by Setting Scope to Domain (optional)
     * @param effectiveDate Limit Search by Setting Scope to Effective Date (optional)
     * @param extensible Limit Search by Setting Scope to Extensible (optional)
     * @param href Limit Search by Setting Scope to Href (optional)
     * @param label Limit Search by Setting Scope to Label (optional)
     * @param measureType SLimit Search by Setting Scope to Measure Type (optional)
     * @param name Limit Search by Setting Scope to Name (optional)
     * @param preferredTerm Limit Search by Setting Scope to Preferred Term (optional)
     * @param product Limit Search by Setting Scope to Product (optional)
     * @param productGroup Limit Search by Setting Scope to Product Group (optional)
     * @param registrationStatus Limit Search by Setting Scope to Registration Status (optional)
     * @param roleDescription Limit Search by Setting Scope to Role Description (optional)
     * @param sdtmTarget Limit Search by Setting Scope to SDTM Target (optional)
     * @param simpleDatatype Limit Search by Setting Scope to Simple Datatype (optional)
     * @param submissionValue Limit Search by Setting Scope to Submission Value (optional)
     * @param synonyms Limit Search by Setting Scope to Synonyms (optional)
     * @param type Limit Search by Setting Scope to Type (optional)
     * @param uiHref Limit Search by Setting Scope to UI Href (optional)
     * @param valueDomain Limit Search by Setting Scope to Value Domain (optional)
     * @param variableSet Limit Search by Setting Scope to Variable Set (optional)
     * @param version Limit Search by Setting Scope to Version (optional)
     * @return ApiResponse&lt;DefaultSearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     * Release Notes about Searches
     * @see <a href="https://wiki.cdisc.org/display/LIBSUPRT/Search"> Documentation</a>
     */
    public ApiResponse<DefaultSearchResponse> mdrSearchGetWithHttpInfo(@javax.annotation.Nonnull String q, @javax.annotation.Nullable String highlight, @javax.annotation.Nullable BigDecimal start, @javax.annotation.Nullable BigDecimal pageSize, @javax.annotation.Nullable String propertyClass, @javax.annotation.Nullable String codelist, @javax.annotation.Nullable String conceptId, @javax.annotation.Nullable String core, @javax.annotation.Nullable String dataStructure, @javax.annotation.Nullable String datasetStructure, @javax.annotation.Nullable String definition, @javax.annotation.Nullable String description, @javax.annotation.Nullable String domain, @javax.annotation.Nullable String effectiveDate, @javax.annotation.Nullable String extensible, @javax.annotation.Nullable String href, @javax.annotation.Nullable String label, @javax.annotation.Nullable String measureType, @javax.annotation.Nullable String name, @javax.annotation.Nullable String preferredTerm, @javax.annotation.Nullable String product, @javax.annotation.Nullable String productGroup, @javax.annotation.Nullable String registrationStatus, @javax.annotation.Nullable String roleDescription, @javax.annotation.Nullable String sdtmTarget, @javax.annotation.Nullable String simpleDatatype, @javax.annotation.Nullable String submissionValue, @javax.annotation.Nullable String synonyms, @javax.annotation.Nullable String type, @javax.annotation.Nullable String uiHref, @javax.annotation.Nullable String valueDomain, @javax.annotation.Nullable String variableSet, @javax.annotation.Nullable String version) throws ApiException {
        okhttp3.Call localVarCall = mdrSearchGetValidateBeforeCall(q, highlight, start, pageSize, propertyClass, codelist, conceptId, core, dataStructure, datasetStructure, definition, description, domain, effectiveDate, extensible, href, label, measureType, name, preferredTerm, product, productGroup, registrationStatus, roleDescription, sdtmTarget, simpleDatatype, submissionValue, synonyms, type, uiHref, valueDomain, variableSet, version, null);
        Type localVarReturnType = new TypeToken<DefaultSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Search Results Across CDISC Library
     * @param q Search Term Expression (required)
     * @param highlight Search Highlight Expression (optional)
     * @param start Initial Search Result Index (optional, default to 0)
     * @param pageSize Number of Search Results to Return (optional, default to 100)
     * @param propertyClass Limit Search by Setting Scope to Class (optional)
     * @param codelist Limit Search by Setting Scope to Codelist (optional)
     * @param conceptId Limit Search by Setting Scope to Concept ID (optional)
     * @param core Limit Search by Setting Scope to Core (optional)
     * @param dataStructure Limit Search by Setting Scope to Data Structure (optional)
     * @param datasetStructure Limit Search by Setting Scope to Dataset Structure (optional)
     * @param definition Limit Search by Setting Scope to Definition (optional)
     * @param description Limit Search by Setting Scope to Description (optional)
     * @param domain Limit Search by Setting Scope to Domain (optional)
     * @param effectiveDate Limit Search by Setting Scope to Effective Date (optional)
     * @param extensible Limit Search by Setting Scope to Extensible (optional)
     * @param href Limit Search by Setting Scope to Href (optional)
     * @param label Limit Search by Setting Scope to Label (optional)
     * @param measureType SLimit Search by Setting Scope to Measure Type (optional)
     * @param name Limit Search by Setting Scope to Name (optional)
     * @param preferredTerm Limit Search by Setting Scope to Preferred Term (optional)
     * @param product Limit Search by Setting Scope to Product (optional)
     * @param productGroup Limit Search by Setting Scope to Product Group (optional)
     * @param registrationStatus Limit Search by Setting Scope to Registration Status (optional)
     * @param roleDescription Limit Search by Setting Scope to Role Description (optional)
     * @param sdtmTarget Limit Search by Setting Scope to SDTM Target (optional)
     * @param simpleDatatype Limit Search by Setting Scope to Simple Datatype (optional)
     * @param submissionValue Limit Search by Setting Scope to Submission Value (optional)
     * @param synonyms Limit Search by Setting Scope to Synonyms (optional)
     * @param type Limit Search by Setting Scope to Type (optional)
     * @param uiHref Limit Search by Setting Scope to UI Href (optional)
     * @param valueDomain Limit Search by Setting Scope to Value Domain (optional)
     * @param variableSet Limit Search by Setting Scope to Variable Set (optional)
     * @param version Limit Search by Setting Scope to Version (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Gateway Timeout Error </td><td>  -  </td></tr>
     </table>
     * Release Notes about Searches
     * @see <a href="https://wiki.cdisc.org/display/LIBSUPRT/Search"> Documentation</a>
     */
    public okhttp3.Call mdrSearchGetAsync(@javax.annotation.Nonnull String q, @javax.annotation.Nullable String highlight, @javax.annotation.Nullable BigDecimal start, @javax.annotation.Nullable BigDecimal pageSize, @javax.annotation.Nullable String propertyClass, @javax.annotation.Nullable String codelist, @javax.annotation.Nullable String conceptId, @javax.annotation.Nullable String core, @javax.annotation.Nullable String dataStructure, @javax.annotation.Nullable String datasetStructure, @javax.annotation.Nullable String definition, @javax.annotation.Nullable String description, @javax.annotation.Nullable String domain, @javax.annotation.Nullable String effectiveDate, @javax.annotation.Nullable String extensible, @javax.annotation.Nullable String href, @javax.annotation.Nullable String label, @javax.annotation.Nullable String measureType, @javax.annotation.Nullable String name, @javax.annotation.Nullable String preferredTerm, @javax.annotation.Nullable String product, @javax.annotation.Nullable String productGroup, @javax.annotation.Nullable String registrationStatus, @javax.annotation.Nullable String roleDescription, @javax.annotation.Nullable String sdtmTarget, @javax.annotation.Nullable String simpleDatatype, @javax.annotation.Nullable String submissionValue, @javax.annotation.Nullable String synonyms, @javax.annotation.Nullable String type, @javax.annotation.Nullable String uiHref, @javax.annotation.Nullable String valueDomain, @javax.annotation.Nullable String variableSet, @javax.annotation.Nullable String version, final ApiCallback<DefaultSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrSearchGetValidateBeforeCall(q, highlight, start, pageSize, propertyClass, codelist, conceptId, core, dataStructure, datasetStructure, definition, description, domain, effectiveDate, extensible, href, label, measureType, name, preferredTerm, product, productGroup, registrationStatus, roleDescription, sdtmTarget, simpleDatatype, submissionValue, synonyms, type, uiHref, valueDomain, variableSet, version, _callback);
        Type localVarReturnType = new TypeToken<DefaultSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrSearchScopesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * Release Notes about Searches
     * @see <a href="https://wiki.cdisc.org/display/LIBSUPRT/Search"> Documentation</a>
     */
    public okhttp3.Call mdrSearchScopesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/search/scopes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrSearchScopesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return mdrSearchScopesGetCall(_callback);

    }

    /**
     * 
     * Get Search Results Across CDISC Library
     * @return MdrSearchScopesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * Release Notes about Searches
     * @see <a href="https://wiki.cdisc.org/display/LIBSUPRT/Search"> Documentation</a>
     */
    public MdrSearchScopesGet200Response mdrSearchScopesGet() throws ApiException {
        ApiResponse<MdrSearchScopesGet200Response> localVarResp = mdrSearchScopesGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get Search Results Across CDISC Library
     * @return ApiResponse&lt;MdrSearchScopesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * Release Notes about Searches
     * @see <a href="https://wiki.cdisc.org/display/LIBSUPRT/Search"> Documentation</a>
     */
    public ApiResponse<MdrSearchScopesGet200Response> mdrSearchScopesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = mdrSearchScopesGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MdrSearchScopesGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Search Results Across CDISC Library
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * Release Notes about Searches
     * @see <a href="https://wiki.cdisc.org/display/LIBSUPRT/Search"> Documentation</a>
     */
    public okhttp3.Call mdrSearchScopesGetAsync(final ApiCallback<MdrSearchScopesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrSearchScopesGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MdrSearchScopesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mdrSearchScopesScopeGet
     * @param scope Search Scope (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * Release Notes about Searches
     * @see <a href="https://wiki.cdisc.org/display/LIBSUPRT/Search"> Documentation</a>
     */
    public okhttp3.Call mdrSearchScopesScopeGetCall(@javax.annotation.Nonnull DefaultSearchScopes scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mdr/search/scopes/{scope}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mdrSearchScopesScopeGetValidateBeforeCall(@javax.annotation.Nonnull DefaultSearchScopes scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling mdrSearchScopesScopeGet(Async)");
        }

        return mdrSearchScopesScopeGetCall(scope, _callback);

    }

    /**
     * 
     * Get Search Results Limited to Scope
     * @param scope Search Scope (required)
     * @return ScopeValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * Release Notes about Searches
     * @see <a href="https://wiki.cdisc.org/display/LIBSUPRT/Search"> Documentation</a>
     */
    public ScopeValues mdrSearchScopesScopeGet(@javax.annotation.Nonnull DefaultSearchScopes scope) throws ApiException {
        ApiResponse<ScopeValues> localVarResp = mdrSearchScopesScopeGetWithHttpInfo(scope);
        return localVarResp.getData();
    }

    /**
     * 
     * Get Search Results Limited to Scope
     * @param scope Search Scope (required)
     * @return ApiResponse&lt;ScopeValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * Release Notes about Searches
     * @see <a href="https://wiki.cdisc.org/display/LIBSUPRT/Search"> Documentation</a>
     */
    public ApiResponse<ScopeValues> mdrSearchScopesScopeGetWithHttpInfo(@javax.annotation.Nonnull DefaultSearchScopes scope) throws ApiException {
        okhttp3.Call localVarCall = mdrSearchScopesScopeGetValidateBeforeCall(scope, null);
        Type localVarReturnType = new TypeToken<ScopeValues>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get Search Results Limited to Scope
     * @param scope Search Scope (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * Release Notes about Searches
     * @see <a href="https://wiki.cdisc.org/display/LIBSUPRT/Search"> Documentation</a>
     */
    public okhttp3.Call mdrSearchScopesScopeGetAsync(@javax.annotation.Nonnull DefaultSearchScopes scope, final ApiCallback<ScopeValues> _callback) throws ApiException {

        okhttp3.Call localVarCall = mdrSearchScopesScopeGetValidateBeforeCall(scope, _callback);
        Type localVarReturnType = new TypeToken<ScopeValues>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

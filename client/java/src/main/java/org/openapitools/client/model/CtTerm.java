/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CtTermLinks;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CtTerm
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-22T20:17:16.173989497Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class CtTerm {
  public static final String SERIALIZED_NAME_CONCEPT_ID = "conceptId";
  @SerializedName(SERIALIZED_NAME_CONCEPT_ID)
  @javax.annotation.Nullable
  private String conceptId;

  public static final String SERIALIZED_NAME_SUBMISSION_VALUE = "submissionValue";
  @SerializedName(SERIALIZED_NAME_SUBMISSION_VALUE)
  @javax.annotation.Nullable
  private String submissionValue;

  public static final String SERIALIZED_NAME_DEFINITION = "definition";
  @SerializedName(SERIALIZED_NAME_DEFINITION)
  @javax.annotation.Nullable
  private String definition;

  public static final String SERIALIZED_NAME_PREFERRED_TERM = "preferredTerm";
  @SerializedName(SERIALIZED_NAME_PREFERRED_TERM)
  @javax.annotation.Nullable
  private String preferredTerm;

  public static final String SERIALIZED_NAME_SYNONYMS = "synonyms";
  @SerializedName(SERIALIZED_NAME_SYNONYMS)
  @javax.annotation.Nullable
  private List<String> synonyms = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  @javax.annotation.Nullable
  private CtTermLinks links;

  public CtTerm() {
  }

  public CtTerm conceptId(@javax.annotation.Nullable String conceptId) {
    this.conceptId = conceptId;
    return this;
  }

  /**
   * Get conceptId
   * @return conceptId
   */
  @javax.annotation.Nullable
  public String getConceptId() {
    return conceptId;
  }

  public void setConceptId(@javax.annotation.Nullable String conceptId) {
    this.conceptId = conceptId;
  }


  public CtTerm submissionValue(@javax.annotation.Nullable String submissionValue) {
    this.submissionValue = submissionValue;
    return this;
  }

  /**
   * Get submissionValue
   * @return submissionValue
   */
  @javax.annotation.Nullable
  public String getSubmissionValue() {
    return submissionValue;
  }

  public void setSubmissionValue(@javax.annotation.Nullable String submissionValue) {
    this.submissionValue = submissionValue;
  }


  public CtTerm definition(@javax.annotation.Nullable String definition) {
    this.definition = definition;
    return this;
  }

  /**
   * Get definition
   * @return definition
   */
  @javax.annotation.Nullable
  public String getDefinition() {
    return definition;
  }

  public void setDefinition(@javax.annotation.Nullable String definition) {
    this.definition = definition;
  }


  public CtTerm preferredTerm(@javax.annotation.Nullable String preferredTerm) {
    this.preferredTerm = preferredTerm;
    return this;
  }

  /**
   * Get preferredTerm
   * @return preferredTerm
   */
  @javax.annotation.Nullable
  public String getPreferredTerm() {
    return preferredTerm;
  }

  public void setPreferredTerm(@javax.annotation.Nullable String preferredTerm) {
    this.preferredTerm = preferredTerm;
  }


  public CtTerm synonyms(@javax.annotation.Nullable List<String> synonyms) {
    this.synonyms = synonyms;
    return this;
  }

  public CtTerm addSynonymsItem(String synonymsItem) {
    if (this.synonyms == null) {
      this.synonyms = new ArrayList<>();
    }
    this.synonyms.add(synonymsItem);
    return this;
  }

  /**
   * Get synonyms
   * @return synonyms
   */
  @javax.annotation.Nullable
  public List<String> getSynonyms() {
    return synonyms;
  }

  public void setSynonyms(@javax.annotation.Nullable List<String> synonyms) {
    this.synonyms = synonyms;
  }


  public CtTerm links(@javax.annotation.Nullable CtTermLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public CtTermLinks getLinks() {
    return links;
  }

  public void setLinks(@javax.annotation.Nullable CtTermLinks links) {
    this.links = links;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CtTerm ctTerm = (CtTerm) o;
    return Objects.equals(this.conceptId, ctTerm.conceptId) &&
        Objects.equals(this.submissionValue, ctTerm.submissionValue) &&
        Objects.equals(this.definition, ctTerm.definition) &&
        Objects.equals(this.preferredTerm, ctTerm.preferredTerm) &&
        Objects.equals(this.synonyms, ctTerm.synonyms) &&
        Objects.equals(this.links, ctTerm.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conceptId, submissionValue, definition, preferredTerm, synonyms, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CtTerm {\n");
    sb.append("    conceptId: ").append(toIndentedString(conceptId)).append("\n");
    sb.append("    submissionValue: ").append(toIndentedString(submissionValue)).append("\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("    preferredTerm: ").append(toIndentedString(preferredTerm)).append("\n");
    sb.append("    synonyms: ").append(toIndentedString(synonyms)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("conceptId", "submissionValue", "definition", "preferredTerm", "synonyms", "_links"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CtTerm
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CtTerm.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CtTerm is not found in the empty JSON string", CtTerm.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CtTerm.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CtTerm` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("conceptId") != null && !jsonObj.get("conceptId").isJsonNull()) && !jsonObj.get("conceptId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conceptId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conceptId").toString()));
      }
      if ((jsonObj.get("submissionValue") != null && !jsonObj.get("submissionValue").isJsonNull()) && !jsonObj.get("submissionValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submissionValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submissionValue").toString()));
      }
      if ((jsonObj.get("definition") != null && !jsonObj.get("definition").isJsonNull()) && !jsonObj.get("definition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `definition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("definition").toString()));
      }
      if ((jsonObj.get("preferredTerm") != null && !jsonObj.get("preferredTerm").isJsonNull()) && !jsonObj.get("preferredTerm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredTerm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredTerm").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("synonyms") != null && !jsonObj.get("synonyms").isJsonNull() && !jsonObj.get("synonyms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `synonyms` to be an array in the JSON string but got `%s`", jsonObj.get("synonyms").toString()));
      }
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        CtTermLinks.validateJsonElement(jsonObj.get("_links"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CtTerm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CtTerm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CtTerm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CtTerm.class));

       return (TypeAdapter<T>) new TypeAdapter<CtTerm>() {
           @Override
           public void write(JsonWriter out, CtTerm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CtTerm read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CtTerm given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CtTerm
   * @throws IOException if the JSON string is invalid with respect to CtTerm
   */
  public static CtTerm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CtTerm.class);
  }

  /**
   * Convert an instance of CtTerm to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


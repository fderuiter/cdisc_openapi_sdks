/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SdtmDatasetLinks;
import org.openapitools.client.model.SdtmDatasetVariable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SdtmDataset
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-22T20:17:16.173989497Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class SdtmDataset {
  public static final String SERIALIZED_NAME_ORDINAL = "ordinal";
  @SerializedName(SERIALIZED_NAME_ORDINAL)
  @javax.annotation.Nullable
  private String ordinal;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  @javax.annotation.Nullable
  private String label;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_DATASET_STRUCTURE = "datasetStructure";
  @SerializedName(SERIALIZED_NAME_DATASET_STRUCTURE)
  @javax.annotation.Nullable
  private String datasetStructure;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  @javax.annotation.Nullable
  private SdtmDatasetLinks links;

  public static final String SERIALIZED_NAME_DATASET_VARIABLES = "datasetVariables";
  @SerializedName(SERIALIZED_NAME_DATASET_VARIABLES)
  @javax.annotation.Nullable
  private List<SdtmDatasetVariable> datasetVariables = new ArrayList<>();

  public SdtmDataset() {
  }

  public SdtmDataset ordinal(@javax.annotation.Nullable String ordinal) {
    this.ordinal = ordinal;
    return this;
  }

  /**
   * Get ordinal
   * @return ordinal
   */
  @javax.annotation.Nullable
  public String getOrdinal() {
    return ordinal;
  }

  public void setOrdinal(@javax.annotation.Nullable String ordinal) {
    this.ordinal = ordinal;
  }


  public SdtmDataset name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public SdtmDataset label(@javax.annotation.Nullable String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(@javax.annotation.Nullable String label) {
    this.label = label;
  }


  public SdtmDataset description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public SdtmDataset datasetStructure(@javax.annotation.Nullable String datasetStructure) {
    this.datasetStructure = datasetStructure;
    return this;
  }

  /**
   * Get datasetStructure
   * @return datasetStructure
   */
  @javax.annotation.Nullable
  public String getDatasetStructure() {
    return datasetStructure;
  }

  public void setDatasetStructure(@javax.annotation.Nullable String datasetStructure) {
    this.datasetStructure = datasetStructure;
  }


  public SdtmDataset links(@javax.annotation.Nullable SdtmDatasetLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public SdtmDatasetLinks getLinks() {
    return links;
  }

  public void setLinks(@javax.annotation.Nullable SdtmDatasetLinks links) {
    this.links = links;
  }


  public SdtmDataset datasetVariables(@javax.annotation.Nullable List<SdtmDatasetVariable> datasetVariables) {
    this.datasetVariables = datasetVariables;
    return this;
  }

  public SdtmDataset addDatasetVariablesItem(SdtmDatasetVariable datasetVariablesItem) {
    if (this.datasetVariables == null) {
      this.datasetVariables = new ArrayList<>();
    }
    this.datasetVariables.add(datasetVariablesItem);
    return this;
  }

  /**
   * Get datasetVariables
   * @return datasetVariables
   */
  @javax.annotation.Nullable
  public List<SdtmDatasetVariable> getDatasetVariables() {
    return datasetVariables;
  }

  public void setDatasetVariables(@javax.annotation.Nullable List<SdtmDatasetVariable> datasetVariables) {
    this.datasetVariables = datasetVariables;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SdtmDataset sdtmDataset = (SdtmDataset) o;
    return Objects.equals(this.ordinal, sdtmDataset.ordinal) &&
        Objects.equals(this.name, sdtmDataset.name) &&
        Objects.equals(this.label, sdtmDataset.label) &&
        Objects.equals(this.description, sdtmDataset.description) &&
        Objects.equals(this.datasetStructure, sdtmDataset.datasetStructure) &&
        Objects.equals(this.links, sdtmDataset.links) &&
        Objects.equals(this.datasetVariables, sdtmDataset.datasetVariables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ordinal, name, label, description, datasetStructure, links, datasetVariables);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SdtmDataset {\n");
    sb.append("    ordinal: ").append(toIndentedString(ordinal)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    datasetStructure: ").append(toIndentedString(datasetStructure)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    datasetVariables: ").append(toIndentedString(datasetVariables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("ordinal", "name", "label", "description", "datasetStructure", "_links", "datasetVariables"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SdtmDataset
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SdtmDataset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SdtmDataset is not found in the empty JSON string", SdtmDataset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SdtmDataset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SdtmDataset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ordinal") != null && !jsonObj.get("ordinal").isJsonNull()) && !jsonObj.get("ordinal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ordinal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ordinal").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("datasetStructure") != null && !jsonObj.get("datasetStructure").isJsonNull()) && !jsonObj.get("datasetStructure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasetStructure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasetStructure").toString()));
      }
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        SdtmDatasetLinks.validateJsonElement(jsonObj.get("_links"));
      }
      if (jsonObj.get("datasetVariables") != null && !jsonObj.get("datasetVariables").isJsonNull()) {
        JsonArray jsonArraydatasetVariables = jsonObj.getAsJsonArray("datasetVariables");
        if (jsonArraydatasetVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("datasetVariables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `datasetVariables` to be an array in the JSON string but got `%s`", jsonObj.get("datasetVariables").toString()));
          }

          // validate the optional field `datasetVariables` (array)
          for (int i = 0; i < jsonArraydatasetVariables.size(); i++) {
            SdtmDatasetVariable.validateJsonElement(jsonArraydatasetVariables.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SdtmDataset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SdtmDataset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SdtmDataset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SdtmDataset.class));

       return (TypeAdapter<T>) new TypeAdapter<SdtmDataset>() {
           @Override
           public void write(JsonWriter out, SdtmDataset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SdtmDataset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SdtmDataset given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SdtmDataset
   * @throws IOException if the JSON string is invalid with respect to SdtmDataset
   */
  public static SdtmDataset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SdtmDataset.class);
  }

  /**
   * Convert an instance of SdtmDataset to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExportSdtmigVariablesRow
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-22T20:17:16.173989497Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class ExportSdtmigVariablesRow {
  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nullable
  private String version;

  public static final String SERIALIZED_NAME_VARIABLE_ORDER = "Variable Order";
  @SerializedName(SERIALIZED_NAME_VARIABLE_ORDER)
  @javax.annotation.Nullable
  private String variableOrder;

  public static final String SERIALIZED_NAME_PROPERTY_CLASS = "Class";
  @SerializedName(SERIALIZED_NAME_PROPERTY_CLASS)
  @javax.annotation.Nullable
  private String propertyClass;

  public static final String SERIALIZED_NAME_DATASET_NAME = "Dataset Name";
  @SerializedName(SERIALIZED_NAME_DATASET_NAME)
  @javax.annotation.Nullable
  private String datasetName;

  public static final String SERIALIZED_NAME_VARIABLE_NAME = "Variable Name";
  @SerializedName(SERIALIZED_NAME_VARIABLE_NAME)
  @javax.annotation.Nullable
  private String variableName;

  public static final String SERIALIZED_NAME_VARIABLE_LABEL = "Variable Label";
  @SerializedName(SERIALIZED_NAME_VARIABLE_LABEL)
  @javax.annotation.Nullable
  private String variableLabel;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_CONTROLLED_TERMS_COMMA_CODELIST_OR_FORMAT = "Controlled Terms, Codelist or Format";
  @SerializedName(SERIALIZED_NAME_CONTROLLED_TERMS_COMMA_CODELIST_OR_FORMAT)
  @javax.annotation.Nullable
  private String controlledTermsCommaCodelistOrFormat;

  public static final String SERIALIZED_NAME_ROLE = "Role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  @javax.annotation.Nullable
  private String role;

  public static final String SERIALIZED_NAME_CD_I_S_C_NOTES = "CDISC Notes";
  @SerializedName(SERIALIZED_NAME_CD_I_S_C_NOTES)
  @javax.annotation.Nullable
  private String cdISCNotes;

  public static final String SERIALIZED_NAME_CORE = "Core";
  @SerializedName(SERIALIZED_NAME_CORE)
  @javax.annotation.Nullable
  private String core;

  public ExportSdtmigVariablesRow() {
  }

  public ExportSdtmigVariablesRow version(@javax.annotation.Nullable String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nullable String version) {
    this.version = version;
  }


  public ExportSdtmigVariablesRow variableOrder(@javax.annotation.Nullable String variableOrder) {
    this.variableOrder = variableOrder;
    return this;
  }

  /**
   * Get variableOrder
   * @return variableOrder
   */
  @javax.annotation.Nullable
  public String getVariableOrder() {
    return variableOrder;
  }

  public void setVariableOrder(@javax.annotation.Nullable String variableOrder) {
    this.variableOrder = variableOrder;
  }


  public ExportSdtmigVariablesRow propertyClass(@javax.annotation.Nullable String propertyClass) {
    this.propertyClass = propertyClass;
    return this;
  }

  /**
   * Get propertyClass
   * @return propertyClass
   */
  @javax.annotation.Nullable
  public String getPropertyClass() {
    return propertyClass;
  }

  public void setPropertyClass(@javax.annotation.Nullable String propertyClass) {
    this.propertyClass = propertyClass;
  }


  public ExportSdtmigVariablesRow datasetName(@javax.annotation.Nullable String datasetName) {
    this.datasetName = datasetName;
    return this;
  }

  /**
   * Get datasetName
   * @return datasetName
   */
  @javax.annotation.Nullable
  public String getDatasetName() {
    return datasetName;
  }

  public void setDatasetName(@javax.annotation.Nullable String datasetName) {
    this.datasetName = datasetName;
  }


  public ExportSdtmigVariablesRow variableName(@javax.annotation.Nullable String variableName) {
    this.variableName = variableName;
    return this;
  }

  /**
   * Get variableName
   * @return variableName
   */
  @javax.annotation.Nullable
  public String getVariableName() {
    return variableName;
  }

  public void setVariableName(@javax.annotation.Nullable String variableName) {
    this.variableName = variableName;
  }


  public ExportSdtmigVariablesRow variableLabel(@javax.annotation.Nullable String variableLabel) {
    this.variableLabel = variableLabel;
    return this;
  }

  /**
   * Get variableLabel
   * @return variableLabel
   */
  @javax.annotation.Nullable
  public String getVariableLabel() {
    return variableLabel;
  }

  public void setVariableLabel(@javax.annotation.Nullable String variableLabel) {
    this.variableLabel = variableLabel;
  }


  public ExportSdtmigVariablesRow type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public ExportSdtmigVariablesRow controlledTermsCommaCodelistOrFormat(@javax.annotation.Nullable String controlledTermsCommaCodelistOrFormat) {
    this.controlledTermsCommaCodelistOrFormat = controlledTermsCommaCodelistOrFormat;
    return this;
  }

  /**
   * Get controlledTermsCommaCodelistOrFormat
   * @return controlledTermsCommaCodelistOrFormat
   */
  @javax.annotation.Nullable
  public String getControlledTermsCommaCodelistOrFormat() {
    return controlledTermsCommaCodelistOrFormat;
  }

  public void setControlledTermsCommaCodelistOrFormat(@javax.annotation.Nullable String controlledTermsCommaCodelistOrFormat) {
    this.controlledTermsCommaCodelistOrFormat = controlledTermsCommaCodelistOrFormat;
  }


  public ExportSdtmigVariablesRow role(@javax.annotation.Nullable String role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(@javax.annotation.Nullable String role) {
    this.role = role;
  }


  public ExportSdtmigVariablesRow cdISCNotes(@javax.annotation.Nullable String cdISCNotes) {
    this.cdISCNotes = cdISCNotes;
    return this;
  }

  /**
   * Get cdISCNotes
   * @return cdISCNotes
   */
  @javax.annotation.Nullable
  public String getCdISCNotes() {
    return cdISCNotes;
  }

  public void setCdISCNotes(@javax.annotation.Nullable String cdISCNotes) {
    this.cdISCNotes = cdISCNotes;
  }


  public ExportSdtmigVariablesRow core(@javax.annotation.Nullable String core) {
    this.core = core;
    return this;
  }

  /**
   * Get core
   * @return core
   */
  @javax.annotation.Nullable
  public String getCore() {
    return core;
  }

  public void setCore(@javax.annotation.Nullable String core) {
    this.core = core;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportSdtmigVariablesRow exportSdtmigVariablesRow = (ExportSdtmigVariablesRow) o;
    return Objects.equals(this.version, exportSdtmigVariablesRow.version) &&
        Objects.equals(this.variableOrder, exportSdtmigVariablesRow.variableOrder) &&
        Objects.equals(this.propertyClass, exportSdtmigVariablesRow.propertyClass) &&
        Objects.equals(this.datasetName, exportSdtmigVariablesRow.datasetName) &&
        Objects.equals(this.variableName, exportSdtmigVariablesRow.variableName) &&
        Objects.equals(this.variableLabel, exportSdtmigVariablesRow.variableLabel) &&
        Objects.equals(this.type, exportSdtmigVariablesRow.type) &&
        Objects.equals(this.controlledTermsCommaCodelistOrFormat, exportSdtmigVariablesRow.controlledTermsCommaCodelistOrFormat) &&
        Objects.equals(this.role, exportSdtmigVariablesRow.role) &&
        Objects.equals(this.cdISCNotes, exportSdtmigVariablesRow.cdISCNotes) &&
        Objects.equals(this.core, exportSdtmigVariablesRow.core);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, variableOrder, propertyClass, datasetName, variableName, variableLabel, type, controlledTermsCommaCodelistOrFormat, role, cdISCNotes, core);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportSdtmigVariablesRow {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    variableOrder: ").append(toIndentedString(variableOrder)).append("\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    datasetName: ").append(toIndentedString(datasetName)).append("\n");
    sb.append("    variableName: ").append(toIndentedString(variableName)).append("\n");
    sb.append("    variableLabel: ").append(toIndentedString(variableLabel)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    controlledTermsCommaCodelistOrFormat: ").append(toIndentedString(controlledTermsCommaCodelistOrFormat)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    cdISCNotes: ").append(toIndentedString(cdISCNotes)).append("\n");
    sb.append("    core: ").append(toIndentedString(core)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Version", "Variable Order", "Class", "Dataset Name", "Variable Name", "Variable Label", "Type", "Controlled Terms, Codelist or Format", "Role", "CDISC Notes", "Core"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportSdtmigVariablesRow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportSdtmigVariablesRow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportSdtmigVariablesRow is not found in the empty JSON string", ExportSdtmigVariablesRow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportSdtmigVariablesRow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportSdtmigVariablesRow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) && !jsonObj.get("Version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
      }
      if ((jsonObj.get("Variable Order") != null && !jsonObj.get("Variable Order").isJsonNull()) && !jsonObj.get("Variable Order").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Variable Order` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Variable Order").toString()));
      }
      if ((jsonObj.get("Class") != null && !jsonObj.get("Class").isJsonNull()) && !jsonObj.get("Class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Class").toString()));
      }
      if ((jsonObj.get("Dataset Name") != null && !jsonObj.get("Dataset Name").isJsonNull()) && !jsonObj.get("Dataset Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Dataset Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Dataset Name").toString()));
      }
      if ((jsonObj.get("Variable Name") != null && !jsonObj.get("Variable Name").isJsonNull()) && !jsonObj.get("Variable Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Variable Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Variable Name").toString()));
      }
      if ((jsonObj.get("Variable Label") != null && !jsonObj.get("Variable Label").isJsonNull()) && !jsonObj.get("Variable Label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Variable Label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Variable Label").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      if ((jsonObj.get("Controlled Terms, Codelist or Format") != null && !jsonObj.get("Controlled Terms, Codelist or Format").isJsonNull()) && !jsonObj.get("Controlled Terms, Codelist or Format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Controlled Terms, Codelist or Format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Controlled Terms, Codelist or Format").toString()));
      }
      if ((jsonObj.get("Role") != null && !jsonObj.get("Role").isJsonNull()) && !jsonObj.get("Role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Role").toString()));
      }
      if ((jsonObj.get("CDISC Notes") != null && !jsonObj.get("CDISC Notes").isJsonNull()) && !jsonObj.get("CDISC Notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CDISC Notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CDISC Notes").toString()));
      }
      if ((jsonObj.get("Core") != null && !jsonObj.get("Core").isJsonNull()) && !jsonObj.get("Core").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Core` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Core").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportSdtmigVariablesRow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportSdtmigVariablesRow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportSdtmigVariablesRow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportSdtmigVariablesRow.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportSdtmigVariablesRow>() {
           @Override
           public void write(JsonWriter out, ExportSdtmigVariablesRow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportSdtmigVariablesRow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportSdtmigVariablesRow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportSdtmigVariablesRow
   * @throws IOException if the JSON string is invalid with respect to ExportSdtmigVariablesRow
   */
  public static ExportSdtmigVariablesRow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportSdtmigVariablesRow.class);
  }

  /**
   * Convert an instance of ExportSdtmigVariablesRow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


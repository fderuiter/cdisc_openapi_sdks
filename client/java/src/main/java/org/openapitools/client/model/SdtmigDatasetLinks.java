/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SdtmDatasetRef;
import org.openapitools.client.model.SdtmigClassRef;
import org.openapitools.client.model.SdtmigDatasetRef;
import org.openapitools.client.model.SdtmigProductRef;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SdtmigDatasetLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-22T20:17:16.173989497Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class SdtmigDatasetLinks {
  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  @javax.annotation.Nullable
  private SdtmigDatasetRef self;

  public static final String SERIALIZED_NAME_MODEL_DATASET = "modelDataset";
  @SerializedName(SERIALIZED_NAME_MODEL_DATASET)
  @javax.annotation.Nullable
  private SdtmDatasetRef modelDataset;

  public static final String SERIALIZED_NAME_PARENT_PRODUCT = "parentProduct";
  @SerializedName(SERIALIZED_NAME_PARENT_PRODUCT)
  @javax.annotation.Nullable
  private SdtmigProductRef parentProduct;

  public static final String SERIALIZED_NAME_PARENT_CLASS = "parentClass";
  @SerializedName(SERIALIZED_NAME_PARENT_CLASS)
  @javax.annotation.Nullable
  private SdtmigClassRef parentClass;

  public static final String SERIALIZED_NAME_PRIOR_VERSION = "priorVersion";
  @SerializedName(SERIALIZED_NAME_PRIOR_VERSION)
  @javax.annotation.Nullable
  private SdtmigDatasetRef priorVersion;

  public SdtmigDatasetLinks() {
  }

  public SdtmigDatasetLinks self(@javax.annotation.Nullable SdtmigDatasetRef self) {
    this.self = self;
    return this;
  }

  /**
   * Get self
   * @return self
   */
  @javax.annotation.Nullable
  public SdtmigDatasetRef getSelf() {
    return self;
  }

  public void setSelf(@javax.annotation.Nullable SdtmigDatasetRef self) {
    this.self = self;
  }


  public SdtmigDatasetLinks modelDataset(@javax.annotation.Nullable SdtmDatasetRef modelDataset) {
    this.modelDataset = modelDataset;
    return this;
  }

  /**
   * Get modelDataset
   * @return modelDataset
   */
  @javax.annotation.Nullable
  public SdtmDatasetRef getModelDataset() {
    return modelDataset;
  }

  public void setModelDataset(@javax.annotation.Nullable SdtmDatasetRef modelDataset) {
    this.modelDataset = modelDataset;
  }


  public SdtmigDatasetLinks parentProduct(@javax.annotation.Nullable SdtmigProductRef parentProduct) {
    this.parentProduct = parentProduct;
    return this;
  }

  /**
   * Get parentProduct
   * @return parentProduct
   */
  @javax.annotation.Nullable
  public SdtmigProductRef getParentProduct() {
    return parentProduct;
  }

  public void setParentProduct(@javax.annotation.Nullable SdtmigProductRef parentProduct) {
    this.parentProduct = parentProduct;
  }


  public SdtmigDatasetLinks parentClass(@javax.annotation.Nullable SdtmigClassRef parentClass) {
    this.parentClass = parentClass;
    return this;
  }

  /**
   * Get parentClass
   * @return parentClass
   */
  @javax.annotation.Nullable
  public SdtmigClassRef getParentClass() {
    return parentClass;
  }

  public void setParentClass(@javax.annotation.Nullable SdtmigClassRef parentClass) {
    this.parentClass = parentClass;
  }


  public SdtmigDatasetLinks priorVersion(@javax.annotation.Nullable SdtmigDatasetRef priorVersion) {
    this.priorVersion = priorVersion;
    return this;
  }

  /**
   * Get priorVersion
   * @return priorVersion
   */
  @javax.annotation.Nullable
  public SdtmigDatasetRef getPriorVersion() {
    return priorVersion;
  }

  public void setPriorVersion(@javax.annotation.Nullable SdtmigDatasetRef priorVersion) {
    this.priorVersion = priorVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SdtmigDatasetLinks sdtmigDatasetLinks = (SdtmigDatasetLinks) o;
    return Objects.equals(this.self, sdtmigDatasetLinks.self) &&
        Objects.equals(this.modelDataset, sdtmigDatasetLinks.modelDataset) &&
        Objects.equals(this.parentProduct, sdtmigDatasetLinks.parentProduct) &&
        Objects.equals(this.parentClass, sdtmigDatasetLinks.parentClass) &&
        Objects.equals(this.priorVersion, sdtmigDatasetLinks.priorVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(self, modelDataset, parentProduct, parentClass, priorVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SdtmigDatasetLinks {\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    modelDataset: ").append(toIndentedString(modelDataset)).append("\n");
    sb.append("    parentProduct: ").append(toIndentedString(parentProduct)).append("\n");
    sb.append("    parentClass: ").append(toIndentedString(parentClass)).append("\n");
    sb.append("    priorVersion: ").append(toIndentedString(priorVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("self", "modelDataset", "parentProduct", "parentClass", "priorVersion"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SdtmigDatasetLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SdtmigDatasetLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SdtmigDatasetLinks is not found in the empty JSON string", SdtmigDatasetLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SdtmigDatasetLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SdtmigDatasetLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `self`
      if (jsonObj.get("self") != null && !jsonObj.get("self").isJsonNull()) {
        SdtmigDatasetRef.validateJsonElement(jsonObj.get("self"));
      }
      // validate the optional field `modelDataset`
      if (jsonObj.get("modelDataset") != null && !jsonObj.get("modelDataset").isJsonNull()) {
        SdtmDatasetRef.validateJsonElement(jsonObj.get("modelDataset"));
      }
      // validate the optional field `parentProduct`
      if (jsonObj.get("parentProduct") != null && !jsonObj.get("parentProduct").isJsonNull()) {
        SdtmigProductRef.validateJsonElement(jsonObj.get("parentProduct"));
      }
      // validate the optional field `parentClass`
      if (jsonObj.get("parentClass") != null && !jsonObj.get("parentClass").isJsonNull()) {
        SdtmigClassRef.validateJsonElement(jsonObj.get("parentClass"));
      }
      // validate the optional field `priorVersion`
      if (jsonObj.get("priorVersion") != null && !jsonObj.get("priorVersion").isJsonNull()) {
        SdtmigDatasetRef.validateJsonElement(jsonObj.get("priorVersion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SdtmigDatasetLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SdtmigDatasetLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SdtmigDatasetLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SdtmigDatasetLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<SdtmigDatasetLinks>() {
           @Override
           public void write(JsonWriter out, SdtmigDatasetLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SdtmigDatasetLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SdtmigDatasetLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SdtmigDatasetLinks
   * @throws IOException if the JSON string is invalid with respect to SdtmigDatasetLinks
   */
  public static SdtmigDatasetLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SdtmigDatasetLinks.class);
  }

  /**
   * Convert an instance of SdtmigDatasetLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AboutLinks;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * About
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-22T20:17:16.173989497Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class About {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  @javax.annotation.Nullable
  private AboutLinks links;

  public static final String SERIALIZED_NAME_RELEASE_NOTES = "release-notes";
  @SerializedName(SERIALIZED_NAME_RELEASE_NOTES)
  @javax.annotation.Nullable
  private String releaseNotes;

  public static final String SERIALIZED_NAME_API_DOCUMENTATION = "api-documentation";
  @SerializedName(SERIALIZED_NAME_API_DOCUMENTATION)
  @javax.annotation.Nullable
  private String apiDocumentation;

  public About() {
  }

  public About links(@javax.annotation.Nullable AboutLinks links) {
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  public AboutLinks getLinks() {
    return links;
  }

  public void setLinks(@javax.annotation.Nullable AboutLinks links) {
    this.links = links;
  }


  public About releaseNotes(@javax.annotation.Nullable String releaseNotes) {
    this.releaseNotes = releaseNotes;
    return this;
  }

  /**
   * Get releaseNotes
   * @return releaseNotes
   */
  @javax.annotation.Nullable
  public String getReleaseNotes() {
    return releaseNotes;
  }

  public void setReleaseNotes(@javax.annotation.Nullable String releaseNotes) {
    this.releaseNotes = releaseNotes;
  }


  public About apiDocumentation(@javax.annotation.Nullable String apiDocumentation) {
    this.apiDocumentation = apiDocumentation;
    return this;
  }

  /**
   * Get apiDocumentation
   * @return apiDocumentation
   */
  @javax.annotation.Nullable
  public String getApiDocumentation() {
    return apiDocumentation;
  }

  public void setApiDocumentation(@javax.annotation.Nullable String apiDocumentation) {
    this.apiDocumentation = apiDocumentation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    About about = (About) o;
    return Objects.equals(this.links, about.links) &&
        Objects.equals(this.releaseNotes, about.releaseNotes) &&
        Objects.equals(this.apiDocumentation, about.apiDocumentation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, releaseNotes, apiDocumentation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class About {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    releaseNotes: ").append(toIndentedString(releaseNotes)).append("\n");
    sb.append("    apiDocumentation: ").append(toIndentedString(apiDocumentation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("_links", "release-notes", "api-documentation"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to About
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!About.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in About is not found in the empty JSON string", About.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!About.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `About` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        AboutLinks.validateJsonElement(jsonObj.get("_links"));
      }
      if ((jsonObj.get("release-notes") != null && !jsonObj.get("release-notes").isJsonNull()) && !jsonObj.get("release-notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `release-notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("release-notes").toString()));
      }
      if ((jsonObj.get("api-documentation") != null && !jsonObj.get("api-documentation").isJsonNull()) && !jsonObj.get("api-documentation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api-documentation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api-documentation").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!About.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'About' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<About> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(About.class));

       return (TypeAdapter<T>) new TypeAdapter<About>() {
           @Override
           public void write(JsonWriter out, About value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public About read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of About given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of About
   * @throws IOException if the JSON string is invalid with respect to About
   */
  public static About fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, About.class);
  }

  /**
   * Convert an instance of About to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


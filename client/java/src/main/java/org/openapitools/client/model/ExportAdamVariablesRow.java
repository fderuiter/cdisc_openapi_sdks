/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExportAdamVariablesRow
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-22T20:17:16.173989497Z[Etc/UTC]", comments = "Generator version: 7.16.0-SNAPSHOT")
public class ExportAdamVariablesRow {
  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nullable
  private String version;

  public static final String SERIALIZED_NAME_DATA_STRUCTURE_NAME = "Data Structure Name";
  @SerializedName(SERIALIZED_NAME_DATA_STRUCTURE_NAME)
  @javax.annotation.Nullable
  private String dataStructureName;

  public static final String SERIALIZED_NAME_DATASET_NAME = "Dataset Name";
  @SerializedName(SERIALIZED_NAME_DATASET_NAME)
  @javax.annotation.Nullable
  private String datasetName;

  public static final String SERIALIZED_NAME_VARIABLE_GROUP = "Variable Group";
  @SerializedName(SERIALIZED_NAME_VARIABLE_GROUP)
  @javax.annotation.Nullable
  private String variableGroup;

  public static final String SERIALIZED_NAME_VARIABLE_NAME = "Variable Name";
  @SerializedName(SERIALIZED_NAME_VARIABLE_NAME)
  @javax.annotation.Nullable
  private String variableName;

  public static final String SERIALIZED_NAME_VARIABLE_LABEL = "Variable Label";
  @SerializedName(SERIALIZED_NAME_VARIABLE_LABEL)
  @javax.annotation.Nullable
  private String variableLabel;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_CODELIST_CONTROLLED_TERMS = "Codelist/Controlled Terms";
  @SerializedName(SERIALIZED_NAME_CODELIST_CONTROLLED_TERMS)
  @javax.annotation.Nullable
  private String codelistControlledTerms;

  public static final String SERIALIZED_NAME_CORE = "Core";
  @SerializedName(SERIALIZED_NAME_CORE)
  @javax.annotation.Nullable
  private String core;

  public static final String SERIALIZED_NAME_CD_I_S_C_NOTES = "CDISC Notes";
  @SerializedName(SERIALIZED_NAME_CD_I_S_C_NOTES)
  @javax.annotation.Nullable
  private String cdISCNotes;

  public ExportAdamVariablesRow() {
  }

  public ExportAdamVariablesRow version(@javax.annotation.Nullable String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nullable String version) {
    this.version = version;
  }


  public ExportAdamVariablesRow dataStructureName(@javax.annotation.Nullable String dataStructureName) {
    this.dataStructureName = dataStructureName;
    return this;
  }

  /**
   * Get dataStructureName
   * @return dataStructureName
   */
  @javax.annotation.Nullable
  public String getDataStructureName() {
    return dataStructureName;
  }

  public void setDataStructureName(@javax.annotation.Nullable String dataStructureName) {
    this.dataStructureName = dataStructureName;
  }


  public ExportAdamVariablesRow datasetName(@javax.annotation.Nullable String datasetName) {
    this.datasetName = datasetName;
    return this;
  }

  /**
   * Get datasetName
   * @return datasetName
   */
  @javax.annotation.Nullable
  public String getDatasetName() {
    return datasetName;
  }

  public void setDatasetName(@javax.annotation.Nullable String datasetName) {
    this.datasetName = datasetName;
  }


  public ExportAdamVariablesRow variableGroup(@javax.annotation.Nullable String variableGroup) {
    this.variableGroup = variableGroup;
    return this;
  }

  /**
   * Get variableGroup
   * @return variableGroup
   */
  @javax.annotation.Nullable
  public String getVariableGroup() {
    return variableGroup;
  }

  public void setVariableGroup(@javax.annotation.Nullable String variableGroup) {
    this.variableGroup = variableGroup;
  }


  public ExportAdamVariablesRow variableName(@javax.annotation.Nullable String variableName) {
    this.variableName = variableName;
    return this;
  }

  /**
   * Get variableName
   * @return variableName
   */
  @javax.annotation.Nullable
  public String getVariableName() {
    return variableName;
  }

  public void setVariableName(@javax.annotation.Nullable String variableName) {
    this.variableName = variableName;
  }


  public ExportAdamVariablesRow variableLabel(@javax.annotation.Nullable String variableLabel) {
    this.variableLabel = variableLabel;
    return this;
  }

  /**
   * Get variableLabel
   * @return variableLabel
   */
  @javax.annotation.Nullable
  public String getVariableLabel() {
    return variableLabel;
  }

  public void setVariableLabel(@javax.annotation.Nullable String variableLabel) {
    this.variableLabel = variableLabel;
  }


  public ExportAdamVariablesRow type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public ExportAdamVariablesRow codelistControlledTerms(@javax.annotation.Nullable String codelistControlledTerms) {
    this.codelistControlledTerms = codelistControlledTerms;
    return this;
  }

  /**
   * Get codelistControlledTerms
   * @return codelistControlledTerms
   */
  @javax.annotation.Nullable
  public String getCodelistControlledTerms() {
    return codelistControlledTerms;
  }

  public void setCodelistControlledTerms(@javax.annotation.Nullable String codelistControlledTerms) {
    this.codelistControlledTerms = codelistControlledTerms;
  }


  public ExportAdamVariablesRow core(@javax.annotation.Nullable String core) {
    this.core = core;
    return this;
  }

  /**
   * Get core
   * @return core
   */
  @javax.annotation.Nullable
  public String getCore() {
    return core;
  }

  public void setCore(@javax.annotation.Nullable String core) {
    this.core = core;
  }


  public ExportAdamVariablesRow cdISCNotes(@javax.annotation.Nullable String cdISCNotes) {
    this.cdISCNotes = cdISCNotes;
    return this;
  }

  /**
   * Get cdISCNotes
   * @return cdISCNotes
   */
  @javax.annotation.Nullable
  public String getCdISCNotes() {
    return cdISCNotes;
  }

  public void setCdISCNotes(@javax.annotation.Nullable String cdISCNotes) {
    this.cdISCNotes = cdISCNotes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportAdamVariablesRow exportAdamVariablesRow = (ExportAdamVariablesRow) o;
    return Objects.equals(this.version, exportAdamVariablesRow.version) &&
        Objects.equals(this.dataStructureName, exportAdamVariablesRow.dataStructureName) &&
        Objects.equals(this.datasetName, exportAdamVariablesRow.datasetName) &&
        Objects.equals(this.variableGroup, exportAdamVariablesRow.variableGroup) &&
        Objects.equals(this.variableName, exportAdamVariablesRow.variableName) &&
        Objects.equals(this.variableLabel, exportAdamVariablesRow.variableLabel) &&
        Objects.equals(this.type, exportAdamVariablesRow.type) &&
        Objects.equals(this.codelistControlledTerms, exportAdamVariablesRow.codelistControlledTerms) &&
        Objects.equals(this.core, exportAdamVariablesRow.core) &&
        Objects.equals(this.cdISCNotes, exportAdamVariablesRow.cdISCNotes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, dataStructureName, datasetName, variableGroup, variableName, variableLabel, type, codelistControlledTerms, core, cdISCNotes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportAdamVariablesRow {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    dataStructureName: ").append(toIndentedString(dataStructureName)).append("\n");
    sb.append("    datasetName: ").append(toIndentedString(datasetName)).append("\n");
    sb.append("    variableGroup: ").append(toIndentedString(variableGroup)).append("\n");
    sb.append("    variableName: ").append(toIndentedString(variableName)).append("\n");
    sb.append("    variableLabel: ").append(toIndentedString(variableLabel)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    codelistControlledTerms: ").append(toIndentedString(codelistControlledTerms)).append("\n");
    sb.append("    core: ").append(toIndentedString(core)).append("\n");
    sb.append("    cdISCNotes: ").append(toIndentedString(cdISCNotes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Version", "Data Structure Name", "Dataset Name", "Variable Group", "Variable Name", "Variable Label", "Type", "Codelist/Controlled Terms", "Core", "CDISC Notes"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportAdamVariablesRow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportAdamVariablesRow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportAdamVariablesRow is not found in the empty JSON string", ExportAdamVariablesRow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportAdamVariablesRow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportAdamVariablesRow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) && !jsonObj.get("Version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
      }
      if ((jsonObj.get("Data Structure Name") != null && !jsonObj.get("Data Structure Name").isJsonNull()) && !jsonObj.get("Data Structure Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Data Structure Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Data Structure Name").toString()));
      }
      if ((jsonObj.get("Dataset Name") != null && !jsonObj.get("Dataset Name").isJsonNull()) && !jsonObj.get("Dataset Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Dataset Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Dataset Name").toString()));
      }
      if ((jsonObj.get("Variable Group") != null && !jsonObj.get("Variable Group").isJsonNull()) && !jsonObj.get("Variable Group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Variable Group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Variable Group").toString()));
      }
      if ((jsonObj.get("Variable Name") != null && !jsonObj.get("Variable Name").isJsonNull()) && !jsonObj.get("Variable Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Variable Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Variable Name").toString()));
      }
      if ((jsonObj.get("Variable Label") != null && !jsonObj.get("Variable Label").isJsonNull()) && !jsonObj.get("Variable Label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Variable Label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Variable Label").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      if ((jsonObj.get("Codelist/Controlled Terms") != null && !jsonObj.get("Codelist/Controlled Terms").isJsonNull()) && !jsonObj.get("Codelist/Controlled Terms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Codelist/Controlled Terms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Codelist/Controlled Terms").toString()));
      }
      if ((jsonObj.get("Core") != null && !jsonObj.get("Core").isJsonNull()) && !jsonObj.get("Core").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Core` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Core").toString()));
      }
      if ((jsonObj.get("CDISC Notes") != null && !jsonObj.get("CDISC Notes").isJsonNull()) && !jsonObj.get("CDISC Notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CDISC Notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CDISC Notes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportAdamVariablesRow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportAdamVariablesRow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportAdamVariablesRow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportAdamVariablesRow.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportAdamVariablesRow>() {
           @Override
           public void write(JsonWriter out, ExportAdamVariablesRow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportAdamVariablesRow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportAdamVariablesRow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportAdamVariablesRow
   * @throws IOException if the JSON string is invalid with respect to ExportAdamVariablesRow
   */
  public static ExportAdamVariablesRow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportAdamVariablesRow.class);
  }

  /**
   * Convert an instance of ExportAdamVariablesRow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}


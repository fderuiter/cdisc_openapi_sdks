/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportAdamDatastructuresRow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportAdamDatastructuresRow::OAIExportAdamDatastructuresRow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportAdamDatastructuresRow::OAIExportAdamDatastructuresRow() {
    this->initializeModel();
}

OAIExportAdamDatastructuresRow::~OAIExportAdamDatastructuresRow() {}

void OAIExportAdamDatastructuresRow::initializeModel() {

    m_version_isSet = false;
    m_version_isValid = false;

    m_data_structure_name_isSet = false;
    m_data_structure_name_isValid = false;

    m_dataset_name_isSet = false;
    m_dataset_name_isValid = false;

    m_dataset_label_isSet = false;
    m_dataset_label_isValid = false;

    m_dataset_description_isSet = false;
    m_dataset_description_isValid = false;

    m_r_class_isSet = false;
    m_r_class_isValid = false;
}

void OAIExportAdamDatastructuresRow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportAdamDatastructuresRow::fromJsonObject(QJsonObject json) {

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;

    m_data_structure_name_isValid = ::OpenAPI::fromJsonValue(m_data_structure_name, json[QString("Data Structure Name")]);
    m_data_structure_name_isSet = !json[QString("Data Structure Name")].isNull() && m_data_structure_name_isValid;

    m_dataset_name_isValid = ::OpenAPI::fromJsonValue(m_dataset_name, json[QString("Dataset Name")]);
    m_dataset_name_isSet = !json[QString("Dataset Name")].isNull() && m_dataset_name_isValid;

    m_dataset_label_isValid = ::OpenAPI::fromJsonValue(m_dataset_label, json[QString("Dataset Label")]);
    m_dataset_label_isSet = !json[QString("Dataset Label")].isNull() && m_dataset_label_isValid;

    m_dataset_description_isValid = ::OpenAPI::fromJsonValue(m_dataset_description, json[QString("Dataset Description")]);
    m_dataset_description_isSet = !json[QString("Dataset Description")].isNull() && m_dataset_description_isValid;

    m_r_class_isValid = ::OpenAPI::fromJsonValue(m_r_class, json[QString("Class")]);
    m_r_class_isSet = !json[QString("Class")].isNull() && m_r_class_isValid;
}

QString OAIExportAdamDatastructuresRow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportAdamDatastructuresRow::asJsonObject() const {
    QJsonObject obj;
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_data_structure_name_isSet) {
        obj.insert(QString("Data Structure Name"), ::OpenAPI::toJsonValue(m_data_structure_name));
    }
    if (m_dataset_name_isSet) {
        obj.insert(QString("Dataset Name"), ::OpenAPI::toJsonValue(m_dataset_name));
    }
    if (m_dataset_label_isSet) {
        obj.insert(QString("Dataset Label"), ::OpenAPI::toJsonValue(m_dataset_label));
    }
    if (m_dataset_description_isSet) {
        obj.insert(QString("Dataset Description"), ::OpenAPI::toJsonValue(m_dataset_description));
    }
    if (m_r_class_isSet) {
        obj.insert(QString("Class"), ::OpenAPI::toJsonValue(m_r_class));
    }
    return obj;
}

QString OAIExportAdamDatastructuresRow::getVersion() const {
    return m_version;
}
void OAIExportAdamDatastructuresRow::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIExportAdamDatastructuresRow::is_version_Set() const{
    return m_version_isSet;
}

bool OAIExportAdamDatastructuresRow::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIExportAdamDatastructuresRow::getDataStructureName() const {
    return m_data_structure_name;
}
void OAIExportAdamDatastructuresRow::setDataStructureName(const QString &data_structure_name) {
    m_data_structure_name = data_structure_name;
    m_data_structure_name_isSet = true;
}

bool OAIExportAdamDatastructuresRow::is_data_structure_name_Set() const{
    return m_data_structure_name_isSet;
}

bool OAIExportAdamDatastructuresRow::is_data_structure_name_Valid() const{
    return m_data_structure_name_isValid;
}

QString OAIExportAdamDatastructuresRow::getDatasetName() const {
    return m_dataset_name;
}
void OAIExportAdamDatastructuresRow::setDatasetName(const QString &dataset_name) {
    m_dataset_name = dataset_name;
    m_dataset_name_isSet = true;
}

bool OAIExportAdamDatastructuresRow::is_dataset_name_Set() const{
    return m_dataset_name_isSet;
}

bool OAIExportAdamDatastructuresRow::is_dataset_name_Valid() const{
    return m_dataset_name_isValid;
}

QString OAIExportAdamDatastructuresRow::getDatasetLabel() const {
    return m_dataset_label;
}
void OAIExportAdamDatastructuresRow::setDatasetLabel(const QString &dataset_label) {
    m_dataset_label = dataset_label;
    m_dataset_label_isSet = true;
}

bool OAIExportAdamDatastructuresRow::is_dataset_label_Set() const{
    return m_dataset_label_isSet;
}

bool OAIExportAdamDatastructuresRow::is_dataset_label_Valid() const{
    return m_dataset_label_isValid;
}

QString OAIExportAdamDatastructuresRow::getDatasetDescription() const {
    return m_dataset_description;
}
void OAIExportAdamDatastructuresRow::setDatasetDescription(const QString &dataset_description) {
    m_dataset_description = dataset_description;
    m_dataset_description_isSet = true;
}

bool OAIExportAdamDatastructuresRow::is_dataset_description_Set() const{
    return m_dataset_description_isSet;
}

bool OAIExportAdamDatastructuresRow::is_dataset_description_Valid() const{
    return m_dataset_description_isValid;
}

QString OAIExportAdamDatastructuresRow::getRClass() const {
    return m_r_class;
}
void OAIExportAdamDatastructuresRow::setRClass(const QString &r_class) {
    m_r_class = r_class;
    m_r_class_isSet = true;
}

bool OAIExportAdamDatastructuresRow::is_r_class_Set() const{
    return m_r_class_isSet;
}

bool OAIExportAdamDatastructuresRow::is_r_class_Valid() const{
    return m_r_class_isValid;
}

bool OAIExportAdamDatastructuresRow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_structure_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_class_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportAdamDatastructuresRow::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI

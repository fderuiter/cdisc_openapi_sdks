/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.DefaultErrorResponse;
import org.openapitools.client.model.ExportQrsItemsTable;
import org.openapitools.client.model.ExportQrsWorkbook;
import org.openapitools.client.model.QrsItem;
import org.openapitools.client.model.QrsItems;
import org.openapitools.client.model.QrsProduct;
import org.openapitools.client.model.QrsResponsegroup;
import org.openapitools.client.model.QrsResponsegroups;
import org.openapitools.client.model.XmlQrsItem;
import org.openapitools.client.model.XmlQrsItems;
import org.openapitools.client.model.XmlQrsProduct;
import org.openapitools.client.model.XmlQrsResponsegroup;
import org.openapitools.client.model.XmlQrsResponsegroups;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class MeasuresApi {
  String basePath = "https://library.cdisc.org/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * Get QRS Product
   * @param measure QRS Measure Identifier
   * @param version CDISC Library Product Version
   * @return QrsProduct
  */
  public QrsProduct mdrQrsMeasureVersionGet (String measure, String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'measure' is set
    if (measure == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'measure' when calling mdrQrsMeasureVersionGet",
        new ApiException(400, "Missing the required parameter 'measure' when calling mdrQrsMeasureVersionGet"));
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrQrsMeasureVersionGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrQrsMeasureVersionGet"));
    }

    // create path and map variables
    String path = "/mdr/qrs/{measure}/{version}".replaceAll("\\{" + "measure" + "\\}", apiInvoker.escapeString(measure.toString())).replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (QrsProduct) ApiInvoker.deserialize(localVarResponse, "", QrsProduct.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get QRS Product
   * @param measure QRS Measure Identifier   * @param version CDISC Library Product Version
  */
  public void mdrQrsMeasureVersionGet (String measure, String version, final Response.Listener<QrsProduct> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'measure' is set
    if (measure == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'measure' when calling mdrQrsMeasureVersionGet",
        new ApiException(400, "Missing the required parameter 'measure' when calling mdrQrsMeasureVersionGet"));
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrQrsMeasureVersionGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrQrsMeasureVersionGet"));
    }

    // create path and map variables
    String path = "/mdr/qrs/{measure}/{version}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "measure" + "\\}", apiInvoker.escapeString(measure.toString())).replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((QrsProduct) ApiInvoker.deserialize(localVarResponse,  "", QrsProduct.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get QRS Item List
   * @param measure QRS Measure Identifier
   * @param version CDISC Library Product Version
   * @return QrsItems
  */
  public QrsItems mdrQrsMeasureVersionItemsGet (String measure, String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'measure' is set
    if (measure == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'measure' when calling mdrQrsMeasureVersionItemsGet",
        new ApiException(400, "Missing the required parameter 'measure' when calling mdrQrsMeasureVersionItemsGet"));
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrQrsMeasureVersionItemsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrQrsMeasureVersionItemsGet"));
    }

    // create path and map variables
    String path = "/mdr/qrs/{measure}/{version}/items".replaceAll("\\{" + "measure" + "\\}", apiInvoker.escapeString(measure.toString())).replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (QrsItems) ApiInvoker.deserialize(localVarResponse, "", QrsItems.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get QRS Item List
   * @param measure QRS Measure Identifier   * @param version CDISC Library Product Version
  */
  public void mdrQrsMeasureVersionItemsGet (String measure, String version, final Response.Listener<QrsItems> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'measure' is set
    if (measure == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'measure' when calling mdrQrsMeasureVersionItemsGet",
        new ApiException(400, "Missing the required parameter 'measure' when calling mdrQrsMeasureVersionItemsGet"));
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrQrsMeasureVersionItemsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrQrsMeasureVersionItemsGet"));
    }

    // create path and map variables
    String path = "/mdr/qrs/{measure}/{version}/items".replaceAll("\\{format\\}","json").replaceAll("\\{" + "measure" + "\\}", apiInvoker.escapeString(measure.toString())).replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((QrsItems) ApiInvoker.deserialize(localVarResponse,  "", QrsItems.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get QRS Item
   * @param measure QRS Measure Identifier
   * @param version CDISC Library Product Version
   * @param item QRS Measure Item Identifier
   * @return QrsItem
  */
  public QrsItem mdrQrsMeasureVersionItemsItemGet (String measure, String version, String item) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'measure' is set
    if (measure == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'measure' when calling mdrQrsMeasureVersionItemsItemGet",
        new ApiException(400, "Missing the required parameter 'measure' when calling mdrQrsMeasureVersionItemsItemGet"));
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrQrsMeasureVersionItemsItemGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrQrsMeasureVersionItemsItemGet"));
    }
    // verify the required parameter 'item' is set
    if (item == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'item' when calling mdrQrsMeasureVersionItemsItemGet",
        new ApiException(400, "Missing the required parameter 'item' when calling mdrQrsMeasureVersionItemsItemGet"));
    }

    // create path and map variables
    String path = "/mdr/qrs/{measure}/{version}/items/{item}".replaceAll("\\{" + "measure" + "\\}", apiInvoker.escapeString(measure.toString())).replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "item" + "\\}", apiInvoker.escapeString(item.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (QrsItem) ApiInvoker.deserialize(localVarResponse, "", QrsItem.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get QRS Item
   * @param measure QRS Measure Identifier   * @param version CDISC Library Product Version   * @param item QRS Measure Item Identifier
  */
  public void mdrQrsMeasureVersionItemsItemGet (String measure, String version, String item, final Response.Listener<QrsItem> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'measure' is set
    if (measure == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'measure' when calling mdrQrsMeasureVersionItemsItemGet",
        new ApiException(400, "Missing the required parameter 'measure' when calling mdrQrsMeasureVersionItemsItemGet"));
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrQrsMeasureVersionItemsItemGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrQrsMeasureVersionItemsItemGet"));
    }
    // verify the required parameter 'item' is set
    if (item == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'item' when calling mdrQrsMeasureVersionItemsItemGet",
        new ApiException(400, "Missing the required parameter 'item' when calling mdrQrsMeasureVersionItemsItemGet"));
    }

    // create path and map variables
    String path = "/mdr/qrs/{measure}/{version}/items/{item}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "measure" + "\\}", apiInvoker.escapeString(measure.toString())).replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "item" + "\\}", apiInvoker.escapeString(item.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((QrsItem) ApiInvoker.deserialize(localVarResponse,  "", QrsItem.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get QRS Response Group List
   * @param measure QRS Measure Identifier
   * @param version CDISC Library Product Version
   * @return QrsResponsegroups
  */
  public QrsResponsegroups mdrQrsMeasureVersionResponsegroupsGet (String measure, String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'measure' is set
    if (measure == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'measure' when calling mdrQrsMeasureVersionResponsegroupsGet",
        new ApiException(400, "Missing the required parameter 'measure' when calling mdrQrsMeasureVersionResponsegroupsGet"));
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrQrsMeasureVersionResponsegroupsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrQrsMeasureVersionResponsegroupsGet"));
    }

    // create path and map variables
    String path = "/mdr/qrs/{measure}/{version}/responsegroups".replaceAll("\\{" + "measure" + "\\}", apiInvoker.escapeString(measure.toString())).replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (QrsResponsegroups) ApiInvoker.deserialize(localVarResponse, "", QrsResponsegroups.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get QRS Response Group List
   * @param measure QRS Measure Identifier   * @param version CDISC Library Product Version
  */
  public void mdrQrsMeasureVersionResponsegroupsGet (String measure, String version, final Response.Listener<QrsResponsegroups> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'measure' is set
    if (measure == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'measure' when calling mdrQrsMeasureVersionResponsegroupsGet",
        new ApiException(400, "Missing the required parameter 'measure' when calling mdrQrsMeasureVersionResponsegroupsGet"));
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrQrsMeasureVersionResponsegroupsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrQrsMeasureVersionResponsegroupsGet"));
    }

    // create path and map variables
    String path = "/mdr/qrs/{measure}/{version}/responsegroups".replaceAll("\\{format\\}","json").replaceAll("\\{" + "measure" + "\\}", apiInvoker.escapeString(measure.toString())).replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((QrsResponsegroups) ApiInvoker.deserialize(localVarResponse,  "", QrsResponsegroups.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get QRS Response Group
   * @param measure QRS Measure Identifier
   * @param version CDISC Library Product Version
   * @param responsegroup QRS Measure&#39;s Response Group Identifier
   * @return QrsResponsegroup
  */
  public QrsResponsegroup mdrQrsMeasureVersionResponsegroupsResponsegroupGet (String measure, String version, String responsegroup) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'measure' is set
    if (measure == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'measure' when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet",
        new ApiException(400, "Missing the required parameter 'measure' when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet"));
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet"));
    }
    // verify the required parameter 'responsegroup' is set
    if (responsegroup == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'responsegroup' when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet",
        new ApiException(400, "Missing the required parameter 'responsegroup' when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet"));
    }

    // create path and map variables
    String path = "/mdr/qrs/{measure}/{version}/responsegroups/{responsegroup}".replaceAll("\\{" + "measure" + "\\}", apiInvoker.escapeString(measure.toString())).replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "responsegroup" + "\\}", apiInvoker.escapeString(responsegroup.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (QrsResponsegroup) ApiInvoker.deserialize(localVarResponse, "", QrsResponsegroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get QRS Response Group
   * @param measure QRS Measure Identifier   * @param version CDISC Library Product Version   * @param responsegroup QRS Measure&#39;s Response Group Identifier
  */
  public void mdrQrsMeasureVersionResponsegroupsResponsegroupGet (String measure, String version, String responsegroup, final Response.Listener<QrsResponsegroup> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'measure' is set
    if (measure == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'measure' when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet",
        new ApiException(400, "Missing the required parameter 'measure' when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet"));
    }
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet"));
    }
    // verify the required parameter 'responsegroup' is set
    if (responsegroup == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'responsegroup' when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet",
        new ApiException(400, "Missing the required parameter 'responsegroup' when calling mdrQrsMeasureVersionResponsegroupsResponsegroupGet"));
    }

    // create path and map variables
    String path = "/mdr/qrs/{measure}/{version}/responsegroups/{responsegroup}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "measure" + "\\}", apiInvoker.escapeString(measure.toString())).replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "responsegroup" + "\\}", apiInvoker.escapeString(responsegroup.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((QrsResponsegroup) ApiInvoker.deserialize(localVarResponse,  "", QrsResponsegroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}

/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CtCodelist;
import org.openapitools.client.model.CtCodelistTerms;
import org.openapitools.client.model.CtPackage;
import org.openapitools.client.model.CtPackageCodelists;
import org.openapitools.client.model.CtPackages;
import org.openapitools.client.model.CtTerm;
import org.openapitools.client.model.DefaultErrorResponse;
import org.openapitools.client.model.ExportCtTable;
import org.openapitools.client.model.RootCtCodelist;
import org.openapitools.client.model.RootCtTerm;
import org.openapitools.client.model.XmlCtCodelist;
import org.openapitools.client.model.XmlCtCodelistTerms;
import org.openapitools.client.model.XmlCtPackage;
import org.openapitools.client.model.XmlCtPackageCodelists;
import org.openapitools.client.model.XmlCtPackages;
import org.openapitools.client.model.XmlCtTerm;
import org.openapitools.client.model.XmlRootCtCodelist;
import org.openapitools.client.model.XmlRootCtTerm;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ControlledTerminologyCTApi {
  String basePath = "https://library.cdisc.org/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * Get CDISC Library CT Package List
   * @return CtPackages
  */
  public CtPackages mdrCtPackagesGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/mdr/ct/packages";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CtPackages) ApiInvoker.deserialize(localVarResponse, "", CtPackages.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDISC Library CT Package List

  */
  public void mdrCtPackagesGet (final Response.Listener<CtPackages> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/mdr/ct/packages".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CtPackages) ApiInvoker.deserialize(localVarResponse,  "", CtPackages.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDISC Library CT Package Codelist
   * @param _package CT Package Identifier
   * @param codelist CT Codelist Identifier
   * @return CtCodelist
  */
  public CtCodelist mdrCtPackagesPackageCodelistsCodelistGet (String _package, String codelist) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter '_package' is set
    if (_package == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsCodelistGet",
        new ApiException(400, "Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsCodelistGet"));
    }
    // verify the required parameter 'codelist' is set
    if (codelist == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'codelist' when calling mdrCtPackagesPackageCodelistsCodelistGet",
        new ApiException(400, "Missing the required parameter 'codelist' when calling mdrCtPackagesPackageCodelistsCodelistGet"));
    }

    // create path and map variables
    String path = "/mdr/ct/packages/{package}/codelists/{codelist}".replaceAll("\\{" + "package" + "\\}", apiInvoker.escapeString(_package.toString())).replaceAll("\\{" + "codelist" + "\\}", apiInvoker.escapeString(codelist.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CtCodelist) ApiInvoker.deserialize(localVarResponse, "", CtCodelist.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDISC Library CT Package Codelist
   * @param _package CT Package Identifier   * @param codelist CT Codelist Identifier
  */
  public void mdrCtPackagesPackageCodelistsCodelistGet (String _package, String codelist, final Response.Listener<CtCodelist> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter '_package' is set
    if (_package == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsCodelistGet",
        new ApiException(400, "Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsCodelistGet"));
    }
    // verify the required parameter 'codelist' is set
    if (codelist == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'codelist' when calling mdrCtPackagesPackageCodelistsCodelistGet",
        new ApiException(400, "Missing the required parameter 'codelist' when calling mdrCtPackagesPackageCodelistsCodelistGet"));
    }

    // create path and map variables
    String path = "/mdr/ct/packages/{package}/codelists/{codelist}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "package" + "\\}", apiInvoker.escapeString(_package.toString())).replaceAll("\\{" + "codelist" + "\\}", apiInvoker.escapeString(codelist.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CtCodelist) ApiInvoker.deserialize(localVarResponse,  "", CtCodelist.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDISC Library CT Package Codelist Term List
   * @param _package CT Package Identifier
   * @param codelist CT Codelist Identifier
   * @return CtCodelistTerms
  */
  public CtCodelistTerms mdrCtPackagesPackageCodelistsCodelistTermsGet (String _package, String codelist) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter '_package' is set
    if (_package == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsCodelistTermsGet",
        new ApiException(400, "Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsCodelistTermsGet"));
    }
    // verify the required parameter 'codelist' is set
    if (codelist == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'codelist' when calling mdrCtPackagesPackageCodelistsCodelistTermsGet",
        new ApiException(400, "Missing the required parameter 'codelist' when calling mdrCtPackagesPackageCodelistsCodelistTermsGet"));
    }

    // create path and map variables
    String path = "/mdr/ct/packages/{package}/codelists/{codelist}/terms".replaceAll("\\{" + "package" + "\\}", apiInvoker.escapeString(_package.toString())).replaceAll("\\{" + "codelist" + "\\}", apiInvoker.escapeString(codelist.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CtCodelistTerms) ApiInvoker.deserialize(localVarResponse, "", CtCodelistTerms.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDISC Library CT Package Codelist Term List
   * @param _package CT Package Identifier   * @param codelist CT Codelist Identifier
  */
  public void mdrCtPackagesPackageCodelistsCodelistTermsGet (String _package, String codelist, final Response.Listener<CtCodelistTerms> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter '_package' is set
    if (_package == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsCodelistTermsGet",
        new ApiException(400, "Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsCodelistTermsGet"));
    }
    // verify the required parameter 'codelist' is set
    if (codelist == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'codelist' when calling mdrCtPackagesPackageCodelistsCodelistTermsGet",
        new ApiException(400, "Missing the required parameter 'codelist' when calling mdrCtPackagesPackageCodelistsCodelistTermsGet"));
    }

    // create path and map variables
    String path = "/mdr/ct/packages/{package}/codelists/{codelist}/terms".replaceAll("\\{format\\}","json").replaceAll("\\{" + "package" + "\\}", apiInvoker.escapeString(_package.toString())).replaceAll("\\{" + "codelist" + "\\}", apiInvoker.escapeString(codelist.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CtCodelistTerms) ApiInvoker.deserialize(localVarResponse,  "", CtCodelistTerms.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDISC Library CT Package Codelist Term
   * @param _package CT Package Product Identifier
   * @param codelist CT Codelist Identifier
   * @param term CT Codelist Term Identifier
   * @return CtTerm
  */
  public CtTerm mdrCtPackagesPackageCodelistsCodelistTermsTermGet (String _package, String codelist, String term) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter '_package' is set
    if (_package == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet",
        new ApiException(400, "Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet"));
    }
    // verify the required parameter 'codelist' is set
    if (codelist == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'codelist' when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet",
        new ApiException(400, "Missing the required parameter 'codelist' when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet"));
    }
    // verify the required parameter 'term' is set
    if (term == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'term' when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet",
        new ApiException(400, "Missing the required parameter 'term' when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet"));
    }

    // create path and map variables
    String path = "/mdr/ct/packages/{package}/codelists/{codelist}/terms/{term}".replaceAll("\\{" + "package" + "\\}", apiInvoker.escapeString(_package.toString())).replaceAll("\\{" + "codelist" + "\\}", apiInvoker.escapeString(codelist.toString())).replaceAll("\\{" + "term" + "\\}", apiInvoker.escapeString(term.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CtTerm) ApiInvoker.deserialize(localVarResponse, "", CtTerm.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDISC Library CT Package Codelist Term
   * @param _package CT Package Product Identifier   * @param codelist CT Codelist Identifier   * @param term CT Codelist Term Identifier
  */
  public void mdrCtPackagesPackageCodelistsCodelistTermsTermGet (String _package, String codelist, String term, final Response.Listener<CtTerm> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter '_package' is set
    if (_package == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet",
        new ApiException(400, "Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet"));
    }
    // verify the required parameter 'codelist' is set
    if (codelist == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'codelist' when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet",
        new ApiException(400, "Missing the required parameter 'codelist' when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet"));
    }
    // verify the required parameter 'term' is set
    if (term == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'term' when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet",
        new ApiException(400, "Missing the required parameter 'term' when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet"));
    }

    // create path and map variables
    String path = "/mdr/ct/packages/{package}/codelists/{codelist}/terms/{term}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "package" + "\\}", apiInvoker.escapeString(_package.toString())).replaceAll("\\{" + "codelist" + "\\}", apiInvoker.escapeString(codelist.toString())).replaceAll("\\{" + "term" + "\\}", apiInvoker.escapeString(term.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CtTerm) ApiInvoker.deserialize(localVarResponse,  "", CtTerm.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDISC Library CT Package Codelist List
   * @param _package CT Package Identifier
   * @return CtPackageCodelists
  */
  public CtPackageCodelists mdrCtPackagesPackageCodelistsGet (String _package) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter '_package' is set
    if (_package == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsGet",
        new ApiException(400, "Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsGet"));
    }

    // create path and map variables
    String path = "/mdr/ct/packages/{package}/codelists".replaceAll("\\{" + "package" + "\\}", apiInvoker.escapeString(_package.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CtPackageCodelists) ApiInvoker.deserialize(localVarResponse, "", CtPackageCodelists.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDISC Library CT Package Codelist List
   * @param _package CT Package Identifier
  */
  public void mdrCtPackagesPackageCodelistsGet (String _package, final Response.Listener<CtPackageCodelists> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter '_package' is set
    if (_package == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsGet",
        new ApiException(400, "Missing the required parameter '_package' when calling mdrCtPackagesPackageCodelistsGet"));
    }

    // create path and map variables
    String path = "/mdr/ct/packages/{package}/codelists".replaceAll("\\{format\\}","json").replaceAll("\\{" + "package" + "\\}", apiInvoker.escapeString(_package.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CtPackageCodelists) ApiInvoker.deserialize(localVarResponse,  "", CtPackageCodelists.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDISC Library CT Package
   * @param product CT Package Product Identifier
   * @return CtPackage
  */
  public CtPackage mdrCtPackagesProductGet (String product) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'product' is set
    if (product == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'product' when calling mdrCtPackagesProductGet",
        new ApiException(400, "Missing the required parameter 'product' when calling mdrCtPackagesProductGet"));
    }

    // create path and map variables
    String path = "/mdr/ct/packages/{product}".replaceAll("\\{" + "product" + "\\}", apiInvoker.escapeString(product.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CtPackage) ApiInvoker.deserialize(localVarResponse, "", CtPackage.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDISC Library CT Package
   * @param product CT Package Product Identifier
  */
  public void mdrCtPackagesProductGet (String product, final Response.Listener<CtPackage> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'product' is set
    if (product == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'product' when calling mdrCtPackagesProductGet",
        new ApiException(400, "Missing the required parameter 'product' when calling mdrCtPackagesProductGet"));
    }

    // create path and map variables
    String path = "/mdr/ct/packages/{product}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "product" + "\\}", apiInvoker.escapeString(product.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CtPackage) ApiInvoker.deserialize(localVarResponse,  "", CtPackage.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDISC Library Root CT Codelist
   * @param productGroup CT Product Group Identifier
   * @param codelist CT Codelist Identifier
   * @return RootCtCodelist
  */
  public RootCtCodelist mdrRootCtProductGroupCodelistsCodelistGet (String productGroup, String codelist) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productGroup' is set
    if (productGroup == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productGroup' when calling mdrRootCtProductGroupCodelistsCodelistGet",
        new ApiException(400, "Missing the required parameter 'productGroup' when calling mdrRootCtProductGroupCodelistsCodelistGet"));
    }
    // verify the required parameter 'codelist' is set
    if (codelist == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'codelist' when calling mdrRootCtProductGroupCodelistsCodelistGet",
        new ApiException(400, "Missing the required parameter 'codelist' when calling mdrRootCtProductGroupCodelistsCodelistGet"));
    }

    // create path and map variables
    String path = "/mdr/root/ct/{productGroup}/codelists/{codelist}".replaceAll("\\{" + "productGroup" + "\\}", apiInvoker.escapeString(productGroup.toString())).replaceAll("\\{" + "codelist" + "\\}", apiInvoker.escapeString(codelist.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (RootCtCodelist) ApiInvoker.deserialize(localVarResponse, "", RootCtCodelist.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDISC Library Root CT Codelist
   * @param productGroup CT Product Group Identifier   * @param codelist CT Codelist Identifier
  */
  public void mdrRootCtProductGroupCodelistsCodelistGet (String productGroup, String codelist, final Response.Listener<RootCtCodelist> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productGroup' is set
    if (productGroup == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productGroup' when calling mdrRootCtProductGroupCodelistsCodelistGet",
        new ApiException(400, "Missing the required parameter 'productGroup' when calling mdrRootCtProductGroupCodelistsCodelistGet"));
    }
    // verify the required parameter 'codelist' is set
    if (codelist == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'codelist' when calling mdrRootCtProductGroupCodelistsCodelistGet",
        new ApiException(400, "Missing the required parameter 'codelist' when calling mdrRootCtProductGroupCodelistsCodelistGet"));
    }

    // create path and map variables
    String path = "/mdr/root/ct/{productGroup}/codelists/{codelist}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "productGroup" + "\\}", apiInvoker.escapeString(productGroup.toString())).replaceAll("\\{" + "codelist" + "\\}", apiInvoker.escapeString(codelist.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RootCtCodelist) ApiInvoker.deserialize(localVarResponse,  "", RootCtCodelist.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDISC Library Root CT Term
   * @param productGroup CT Product Group Identifier
   * @param codelist CT Codelist Identifier
   * @param term CT Codelist Term Identifier
   * @return RootCtTerm
  */
  public RootCtTerm mdrRootCtProductGroupCodelistsCodelistTermsTermGet (String productGroup, String codelist, String term) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productGroup' is set
    if (productGroup == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productGroup' when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet",
        new ApiException(400, "Missing the required parameter 'productGroup' when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet"));
    }
    // verify the required parameter 'codelist' is set
    if (codelist == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'codelist' when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet",
        new ApiException(400, "Missing the required parameter 'codelist' when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet"));
    }
    // verify the required parameter 'term' is set
    if (term == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'term' when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet",
        new ApiException(400, "Missing the required parameter 'term' when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet"));
    }

    // create path and map variables
    String path = "/mdr/root/ct/{productGroup}/codelists/{codelist}/terms/{term}".replaceAll("\\{" + "productGroup" + "\\}", apiInvoker.escapeString(productGroup.toString())).replaceAll("\\{" + "codelist" + "\\}", apiInvoker.escapeString(codelist.toString())).replaceAll("\\{" + "term" + "\\}", apiInvoker.escapeString(term.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (RootCtTerm) ApiInvoker.deserialize(localVarResponse, "", RootCtTerm.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDISC Library Root CT Term
   * @param productGroup CT Product Group Identifier   * @param codelist CT Codelist Identifier   * @param term CT Codelist Term Identifier
  */
  public void mdrRootCtProductGroupCodelistsCodelistTermsTermGet (String productGroup, String codelist, String term, final Response.Listener<RootCtTerm> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productGroup' is set
    if (productGroup == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productGroup' when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet",
        new ApiException(400, "Missing the required parameter 'productGroup' when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet"));
    }
    // verify the required parameter 'codelist' is set
    if (codelist == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'codelist' when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet",
        new ApiException(400, "Missing the required parameter 'codelist' when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet"));
    }
    // verify the required parameter 'term' is set
    if (term == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'term' when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet",
        new ApiException(400, "Missing the required parameter 'term' when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet"));
    }

    // create path and map variables
    String path = "/mdr/root/ct/{productGroup}/codelists/{codelist}/terms/{term}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "productGroup" + "\\}", apiInvoker.escapeString(productGroup.toString())).replaceAll("\\{" + "codelist" + "\\}", apiInvoker.escapeString(codelist.toString())).replaceAll("\\{" + "term" + "\\}", apiInvoker.escapeString(term.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RootCtTerm) ApiInvoker.deserialize(localVarResponse,  "", RootCtTerm.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}

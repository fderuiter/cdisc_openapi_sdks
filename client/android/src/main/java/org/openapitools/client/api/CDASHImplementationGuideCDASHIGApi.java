/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CdashigClass;
import org.openapitools.client.model.CdashigClassDomains;
import org.openapitools.client.model.CdashigClassScenarios;
import org.openapitools.client.model.CdashigDomain;
import org.openapitools.client.model.CdashigDomainField;
import org.openapitools.client.model.CdashigDomainFields;
import org.openapitools.client.model.CdashigProduct;
import org.openapitools.client.model.CdashigProductClasses;
import org.openapitools.client.model.CdashigProductDomains;
import org.openapitools.client.model.CdashigProductScenarios;
import org.openapitools.client.model.CdashigScenario;
import org.openapitools.client.model.CdashigScenarioField;
import org.openapitools.client.model.CdashigScenarioFields;
import org.openapitools.client.model.DefaultErrorResponse;
import org.openapitools.client.model.ExportCdashigTable;
import org.openapitools.client.model.RootCdashigDomainField;
import org.openapitools.client.model.RootCdashigScenarioField;
import org.openapitools.client.model.XmlCdashigClass;
import org.openapitools.client.model.XmlCdashigClassDomains;
import org.openapitools.client.model.XmlCdashigClassScenarios;
import org.openapitools.client.model.XmlCdashigDomain;
import org.openapitools.client.model.XmlCdashigDomainField;
import org.openapitools.client.model.XmlCdashigDomainFields;
import org.openapitools.client.model.XmlCdashigProduct;
import org.openapitools.client.model.XmlCdashigProductClasses;
import org.openapitools.client.model.XmlCdashigProductDomains;
import org.openapitools.client.model.XmlCdashigProductScenarios;
import org.openapitools.client.model.XmlCdashigScenario;
import org.openapitools.client.model.XmlCdashigScenarioField;
import org.openapitools.client.model.XmlCdashigScenarioFields;
import org.openapitools.client.model.XmlRootCdashigDomainField;
import org.openapitools.client.model.XmlRootCdashigScenarioField;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class CDASHImplementationGuideCDASHIGApi {
  String basePath = "https://library.cdisc.org/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * Get CDASHIG Class Domain List
   * @param version CDISC Library Product Version
   * @param _class CDASHIG Class Identifier
   * @return CdashigClassDomains
  */
  public CdashigClassDomains mdrCdashigVersionClassesClassDomainsGet (String version, String _class) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionClassesClassDomainsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionClassesClassDomainsGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrCdashigVersionClassesClassDomainsGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrCdashigVersionClassesClassDomainsGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/classes/{class}/domains".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CdashigClassDomains) ApiInvoker.deserialize(localVarResponse, "", CdashigClassDomains.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDASHIG Class Domain List
   * @param version CDISC Library Product Version   * @param _class CDASHIG Class Identifier
  */
  public void mdrCdashigVersionClassesClassDomainsGet (String version, String _class, final Response.Listener<CdashigClassDomains> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionClassesClassDomainsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionClassesClassDomainsGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrCdashigVersionClassesClassDomainsGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrCdashigVersionClassesClassDomainsGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/classes/{class}/domains".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CdashigClassDomains) ApiInvoker.deserialize(localVarResponse,  "", CdashigClassDomains.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDASHIG Class
   * @param version CDISC Library Product Version
   * @param _class CDASHIG Class Identifier
   * @return CdashigClass
  */
  public CdashigClass mdrCdashigVersionClassesClassGet (String version, String _class) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionClassesClassGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionClassesClassGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrCdashigVersionClassesClassGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrCdashigVersionClassesClassGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/classes/{class}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CdashigClass) ApiInvoker.deserialize(localVarResponse, "", CdashigClass.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDASHIG Class
   * @param version CDISC Library Product Version   * @param _class CDASHIG Class Identifier
  */
  public void mdrCdashigVersionClassesClassGet (String version, String _class, final Response.Listener<CdashigClass> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionClassesClassGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionClassesClassGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrCdashigVersionClassesClassGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrCdashigVersionClassesClassGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/classes/{class}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CdashigClass) ApiInvoker.deserialize(localVarResponse,  "", CdashigClass.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDASHIG Class Scenario List
   * @param version CDISC Library Product Version
   * @param _class CDASHIG Class Identifier
   * @return CdashigClassScenarios
  */
  public CdashigClassScenarios mdrCdashigVersionClassesClassScenariosGet (String version, String _class) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionClassesClassScenariosGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionClassesClassScenariosGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrCdashigVersionClassesClassScenariosGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrCdashigVersionClassesClassScenariosGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/classes/{class}/scenarios".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CdashigClassScenarios) ApiInvoker.deserialize(localVarResponse, "", CdashigClassScenarios.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDASHIG Class Scenario List
   * @param version CDISC Library Product Version   * @param _class CDASHIG Class Identifier
  */
  public void mdrCdashigVersionClassesClassScenariosGet (String version, String _class, final Response.Listener<CdashigClassScenarios> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionClassesClassScenariosGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionClassesClassScenariosGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrCdashigVersionClassesClassScenariosGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrCdashigVersionClassesClassScenariosGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/classes/{class}/scenarios".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CdashigClassScenarios) ApiInvoker.deserialize(localVarResponse,  "", CdashigClassScenarios.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDASHIG Class List
   * @param version CDISC Library Product Version
   * @return CdashigProductClasses
  */
  public CdashigProductClasses mdrCdashigVersionClassesGet (String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionClassesGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionClassesGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/classes".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CdashigProductClasses) ApiInvoker.deserialize(localVarResponse, "", CdashigProductClasses.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDASHIG Class List
   * @param version CDISC Library Product Version
  */
  public void mdrCdashigVersionClassesGet (String version, final Response.Listener<CdashigProductClasses> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionClassesGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionClassesGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/classes".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CdashigProductClasses) ApiInvoker.deserialize(localVarResponse,  "", CdashigProductClasses.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDASHIG Domain Field
   * @param version CDISC Library Product Version
   * @param domain CDASHIG Domain Identifier
   * @param field CDASHIG Field Identifier
   * @return CdashigDomainField
  */
  public CdashigDomainField mdrCdashigVersionDomainsDomainFieldsFieldGet (String version, String domain, String field) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionDomainsDomainFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionDomainsDomainFieldsFieldGet"));
    }
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrCdashigVersionDomainsDomainFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrCdashigVersionDomainsDomainFieldsFieldGet"));
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'field' when calling mdrCdashigVersionDomainsDomainFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'field' when calling mdrCdashigVersionDomainsDomainFieldsFieldGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/domains/{domain}/fields/{field}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString())).replaceAll("\\{" + "field" + "\\}", apiInvoker.escapeString(field.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CdashigDomainField) ApiInvoker.deserialize(localVarResponse, "", CdashigDomainField.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDASHIG Domain Field
   * @param version CDISC Library Product Version   * @param domain CDASHIG Domain Identifier   * @param field CDASHIG Field Identifier
  */
  public void mdrCdashigVersionDomainsDomainFieldsFieldGet (String version, String domain, String field, final Response.Listener<CdashigDomainField> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionDomainsDomainFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionDomainsDomainFieldsFieldGet"));
    }
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrCdashigVersionDomainsDomainFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrCdashigVersionDomainsDomainFieldsFieldGet"));
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'field' when calling mdrCdashigVersionDomainsDomainFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'field' when calling mdrCdashigVersionDomainsDomainFieldsFieldGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/domains/{domain}/fields/{field}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString())).replaceAll("\\{" + "field" + "\\}", apiInvoker.escapeString(field.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CdashigDomainField) ApiInvoker.deserialize(localVarResponse,  "", CdashigDomainField.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDASHIG Domain Field List
   * @param version CDISC Library Product Version
   * @param domain CDASHIG Domain Identifier
   * @return CdashigDomainFields
  */
  public CdashigDomainFields mdrCdashigVersionDomainsDomainFieldsGet (String version, String domain) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionDomainsDomainFieldsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionDomainsDomainFieldsGet"));
    }
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrCdashigVersionDomainsDomainFieldsGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrCdashigVersionDomainsDomainFieldsGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/domains/{domain}/fields".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CdashigDomainFields) ApiInvoker.deserialize(localVarResponse, "", CdashigDomainFields.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDASHIG Domain Field List
   * @param version CDISC Library Product Version   * @param domain CDASHIG Domain Identifier
  */
  public void mdrCdashigVersionDomainsDomainFieldsGet (String version, String domain, final Response.Listener<CdashigDomainFields> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionDomainsDomainFieldsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionDomainsDomainFieldsGet"));
    }
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrCdashigVersionDomainsDomainFieldsGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrCdashigVersionDomainsDomainFieldsGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/domains/{domain}/fields".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CdashigDomainFields) ApiInvoker.deserialize(localVarResponse,  "", CdashigDomainFields.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDASHIG Domain
   * @param version CDISC Library Product Version
   * @param domain CDASHIG Domain Identifier
   * @return CdashigDomain
  */
  public CdashigDomain mdrCdashigVersionDomainsDomainGet (String version, String domain) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionDomainsDomainGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionDomainsDomainGet"));
    }
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrCdashigVersionDomainsDomainGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrCdashigVersionDomainsDomainGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/domains/{domain}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CdashigDomain) ApiInvoker.deserialize(localVarResponse, "", CdashigDomain.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDASHIG Domain
   * @param version CDISC Library Product Version   * @param domain CDASHIG Domain Identifier
  */
  public void mdrCdashigVersionDomainsDomainGet (String version, String domain, final Response.Listener<CdashigDomain> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionDomainsDomainGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionDomainsDomainGet"));
    }
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrCdashigVersionDomainsDomainGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrCdashigVersionDomainsDomainGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/domains/{domain}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CdashigDomain) ApiInvoker.deserialize(localVarResponse,  "", CdashigDomain.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDASHIG Domain List
   * @param version CDISC Library Product Version
   * @return CdashigProductDomains
  */
  public CdashigProductDomains mdrCdashigVersionDomainsGet (String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionDomainsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionDomainsGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/domains".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CdashigProductDomains) ApiInvoker.deserialize(localVarResponse, "", CdashigProductDomains.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDASHIG Domain List
   * @param version CDISC Library Product Version
  */
  public void mdrCdashigVersionDomainsGet (String version, final Response.Listener<CdashigProductDomains> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionDomainsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionDomainsGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/domains".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CdashigProductDomains) ApiInvoker.deserialize(localVarResponse,  "", CdashigProductDomains.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDASHIG Product
   * @param version CDISC Library Product Version
   * @return CdashigProduct
  */
  public CdashigProduct mdrCdashigVersionGet (String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CdashigProduct) ApiInvoker.deserialize(localVarResponse, "", CdashigProduct.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDASHIG Product
   * @param version CDISC Library Product Version
  */
  public void mdrCdashigVersionGet (String version, final Response.Listener<CdashigProduct> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CdashigProduct) ApiInvoker.deserialize(localVarResponse,  "", CdashigProduct.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDASHIG Scenario Field
   * @param version CDISC Library Product Version
   * @param domain CDASHIG Domain Identifier
   * @param scenario CDASHIG Scenario Identifier
   * @param field CDASHIG Field Identifier
   * @return CdashigScenarioField
  */
  public CdashigScenarioField mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet (String version, String domain, String scenario, String field) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet"));
    }
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet"));
    }
    // verify the required parameter 'scenario' is set
    if (scenario == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'scenario' when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'scenario' when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet"));
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'field' when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'field' when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields/{field}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString())).replaceAll("\\{" + "scenario" + "\\}", apiInvoker.escapeString(scenario.toString())).replaceAll("\\{" + "field" + "\\}", apiInvoker.escapeString(field.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CdashigScenarioField) ApiInvoker.deserialize(localVarResponse, "", CdashigScenarioField.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDASHIG Scenario Field
   * @param version CDISC Library Product Version   * @param domain CDASHIG Domain Identifier   * @param scenario CDASHIG Scenario Identifier   * @param field CDASHIG Field Identifier
  */
  public void mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet (String version, String domain, String scenario, String field, final Response.Listener<CdashigScenarioField> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet"));
    }
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet"));
    }
    // verify the required parameter 'scenario' is set
    if (scenario == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'scenario' when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'scenario' when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet"));
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'field' when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'field' when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields/{field}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString())).replaceAll("\\{" + "scenario" + "\\}", apiInvoker.escapeString(scenario.toString())).replaceAll("\\{" + "field" + "\\}", apiInvoker.escapeString(field.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CdashigScenarioField) ApiInvoker.deserialize(localVarResponse,  "", CdashigScenarioField.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDASHIG Scenario Field List
   * @param version CDISC Library Product Version
   * @param domain CDASHIG Domain Identifier
   * @param scenario CDASHIG Scenario Identifier
   * @return CdashigScenarioFields
  */
  public CdashigScenarioFields mdrCdashigVersionScenariosDomainScenarioFieldsGet (String version, String domain, String scenario) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet"));
    }
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet"));
    }
    // verify the required parameter 'scenario' is set
    if (scenario == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'scenario' when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet",
        new ApiException(400, "Missing the required parameter 'scenario' when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString())).replaceAll("\\{" + "scenario" + "\\}", apiInvoker.escapeString(scenario.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CdashigScenarioFields) ApiInvoker.deserialize(localVarResponse, "", CdashigScenarioFields.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDASHIG Scenario Field List
   * @param version CDISC Library Product Version   * @param domain CDASHIG Domain Identifier   * @param scenario CDASHIG Scenario Identifier
  */
  public void mdrCdashigVersionScenariosDomainScenarioFieldsGet (String version, String domain, String scenario, final Response.Listener<CdashigScenarioFields> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet"));
    }
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet"));
    }
    // verify the required parameter 'scenario' is set
    if (scenario == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'scenario' when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet",
        new ApiException(400, "Missing the required parameter 'scenario' when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString())).replaceAll("\\{" + "scenario" + "\\}", apiInvoker.escapeString(scenario.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CdashigScenarioFields) ApiInvoker.deserialize(localVarResponse,  "", CdashigScenarioFields.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDASHIG Scenario
   * @param version CDISC Library Product Version
   * @param domain CDASHIG Domain Identifier
   * @param scenario CDASHIG Scenario Identifier
   * @return CdashigScenario
  */
  public CdashigScenario mdrCdashigVersionScenariosDomainScenarioGet (String version, String domain, String scenario) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionScenariosDomainScenarioGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionScenariosDomainScenarioGet"));
    }
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrCdashigVersionScenariosDomainScenarioGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrCdashigVersionScenariosDomainScenarioGet"));
    }
    // verify the required parameter 'scenario' is set
    if (scenario == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'scenario' when calling mdrCdashigVersionScenariosDomainScenarioGet",
        new ApiException(400, "Missing the required parameter 'scenario' when calling mdrCdashigVersionScenariosDomainScenarioGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/scenarios/{domain}.{scenario}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString())).replaceAll("\\{" + "scenario" + "\\}", apiInvoker.escapeString(scenario.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CdashigScenario) ApiInvoker.deserialize(localVarResponse, "", CdashigScenario.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDASHIG Scenario
   * @param version CDISC Library Product Version   * @param domain CDASHIG Domain Identifier   * @param scenario CDASHIG Scenario Identifier
  */
  public void mdrCdashigVersionScenariosDomainScenarioGet (String version, String domain, String scenario, final Response.Listener<CdashigScenario> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionScenariosDomainScenarioGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionScenariosDomainScenarioGet"));
    }
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrCdashigVersionScenariosDomainScenarioGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrCdashigVersionScenariosDomainScenarioGet"));
    }
    // verify the required parameter 'scenario' is set
    if (scenario == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'scenario' when calling mdrCdashigVersionScenariosDomainScenarioGet",
        new ApiException(400, "Missing the required parameter 'scenario' when calling mdrCdashigVersionScenariosDomainScenarioGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/scenarios/{domain}.{scenario}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString())).replaceAll("\\{" + "scenario" + "\\}", apiInvoker.escapeString(scenario.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CdashigScenario) ApiInvoker.deserialize(localVarResponse,  "", CdashigScenario.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDASHIG Scenario List
   * @param version CDISC Library Product Version
   * @return CdashigProductScenarios
  */
  public CdashigProductScenarios mdrCdashigVersionScenariosGet (String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionScenariosGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionScenariosGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/scenarios".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CdashigProductScenarios) ApiInvoker.deserialize(localVarResponse, "", CdashigProductScenarios.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDASHIG Scenario List
   * @param version CDISC Library Product Version
  */
  public void mdrCdashigVersionScenariosGet (String version, final Response.Listener<CdashigProductScenarios> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashigVersionScenariosGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashigVersionScenariosGet"));
    }

    // create path and map variables
    String path = "/mdr/cdashig/{version}/scenarios".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CdashigProductScenarios) ApiInvoker.deserialize(localVarResponse,  "", CdashigProductScenarios.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get Root CDASHIG Domain Field
   * @param domain CDASHIG Domain Identifier
   * @param field CDASHIG Field Identifier
   * @return RootCdashigDomainField
  */
  public RootCdashigDomainField mdrRootCdashigDomainsDomainFieldsFieldGet (String domain, String field) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrRootCdashigDomainsDomainFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrRootCdashigDomainsDomainFieldsFieldGet"));
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'field' when calling mdrRootCdashigDomainsDomainFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'field' when calling mdrRootCdashigDomainsDomainFieldsFieldGet"));
    }

    // create path and map variables
    String path = "/mdr/root/cdashig/domains/{domain}/fields/{field}".replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString())).replaceAll("\\{" + "field" + "\\}", apiInvoker.escapeString(field.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (RootCdashigDomainField) ApiInvoker.deserialize(localVarResponse, "", RootCdashigDomainField.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get Root CDASHIG Domain Field
   * @param domain CDASHIG Domain Identifier   * @param field CDASHIG Field Identifier
  */
  public void mdrRootCdashigDomainsDomainFieldsFieldGet (String domain, String field, final Response.Listener<RootCdashigDomainField> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrRootCdashigDomainsDomainFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrRootCdashigDomainsDomainFieldsFieldGet"));
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'field' when calling mdrRootCdashigDomainsDomainFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'field' when calling mdrRootCdashigDomainsDomainFieldsFieldGet"));
    }

    // create path and map variables
    String path = "/mdr/root/cdashig/domains/{domain}/fields/{field}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString())).replaceAll("\\{" + "field" + "\\}", apiInvoker.escapeString(field.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RootCdashigDomainField) ApiInvoker.deserialize(localVarResponse,  "", RootCdashigDomainField.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get Root CDASHIG Scenario Field
   * @param domain CDASHIG Domain Identifier
   * @param scenario CDASHIG Scenario Identifier
   * @param field CDASHIG Field Identifier
   * @return RootCdashigScenarioField
  */
  public RootCdashigScenarioField mdrRootCdashigScenariosDomainScenarioFieldsFieldGet (String domain, String scenario, String field) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet"));
    }
    // verify the required parameter 'scenario' is set
    if (scenario == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'scenario' when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'scenario' when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet"));
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'field' when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'field' when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet"));
    }

    // create path and map variables
    String path = "/mdr/root/cdashig/scenarios/{domain}.{scenario}/fields/{field}".replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString())).replaceAll("\\{" + "scenario" + "\\}", apiInvoker.escapeString(scenario.toString())).replaceAll("\\{" + "field" + "\\}", apiInvoker.escapeString(field.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (RootCdashigScenarioField) ApiInvoker.deserialize(localVarResponse, "", RootCdashigScenarioField.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get Root CDASHIG Scenario Field
   * @param domain CDASHIG Domain Identifier   * @param scenario CDASHIG Scenario Identifier   * @param field CDASHIG Field Identifier
  */
  public void mdrRootCdashigScenariosDomainScenarioFieldsFieldGet (String domain, String scenario, String field, final Response.Listener<RootCdashigScenarioField> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet"));
    }
    // verify the required parameter 'scenario' is set
    if (scenario == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'scenario' when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'scenario' when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet"));
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'field' when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'field' when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet"));
    }

    // create path and map variables
    String path = "/mdr/root/cdashig/scenarios/{domain}.{scenario}/fields/{field}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString())).replaceAll("\\{" + "scenario" + "\\}", apiInvoker.escapeString(scenario.toString())).replaceAll("\\{" + "field" + "\\}", apiInvoker.escapeString(field.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RootCdashigScenarioField) ApiInvoker.deserialize(localVarResponse,  "", RootCdashigScenarioField.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}

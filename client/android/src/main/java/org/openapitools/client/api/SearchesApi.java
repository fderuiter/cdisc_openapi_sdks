/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import java.math.BigDecimal;
import org.openapitools.client.model.DefaultErrorResponse;
import org.openapitools.client.model.DefaultSearchResponse;
import org.openapitools.client.model.DefaultSearchScopes;
import org.openapitools.client.model.MdrSearchScopesGet200Response;
import org.openapitools.client.model.ScopeValues;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class SearchesApi {
  String basePath = "https://library.cdisc.org/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * Get Search Results Across CDISC Library
   * @param q Search Term Expression
   * @param highlight Search Highlight Expression
   * @param start Initial Search Result Index
   * @param pageSize Number of Search Results to Return
   * @param _class Limit Search by Setting Scope to Class
   * @param codelist Limit Search by Setting Scope to Codelist
   * @param conceptId Limit Search by Setting Scope to Concept ID
   * @param core Limit Search by Setting Scope to Core
   * @param dataStructure Limit Search by Setting Scope to Data Structure
   * @param datasetStructure Limit Search by Setting Scope to Dataset Structure
   * @param definition Limit Search by Setting Scope to Definition
   * @param description Limit Search by Setting Scope to Description
   * @param domain Limit Search by Setting Scope to Domain
   * @param effectiveDate Limit Search by Setting Scope to Effective Date
   * @param extensible Limit Search by Setting Scope to Extensible
   * @param href Limit Search by Setting Scope to Href
   * @param label Limit Search by Setting Scope to Label
   * @param measureType SLimit Search by Setting Scope to Measure Type
   * @param name Limit Search by Setting Scope to Name
   * @param preferredTerm Limit Search by Setting Scope to Preferred Term
   * @param product Limit Search by Setting Scope to Product
   * @param productGroup Limit Search by Setting Scope to Product Group
   * @param registrationStatus Limit Search by Setting Scope to Registration Status
   * @param roleDescription Limit Search by Setting Scope to Role Description
   * @param sdtmTarget Limit Search by Setting Scope to SDTM Target
   * @param simpleDatatype Limit Search by Setting Scope to Simple Datatype
   * @param submissionValue Limit Search by Setting Scope to Submission Value
   * @param synonyms Limit Search by Setting Scope to Synonyms
   * @param type Limit Search by Setting Scope to Type
   * @param uiHref Limit Search by Setting Scope to UI Href
   * @param valueDomain Limit Search by Setting Scope to Value Domain
   * @param variableSet Limit Search by Setting Scope to Variable Set
   * @param version Limit Search by Setting Scope to Version
   * @return DefaultSearchResponse
  */
  public DefaultSearchResponse mdrSearchGet (String q, String highlight, BigDecimal start, BigDecimal pageSize, String _class, String codelist, String conceptId, String core, String dataStructure, String datasetStructure, String definition, String description, String domain, String effectiveDate, String extensible, String href, String label, String measureType, String name, String preferredTerm, String product, String productGroup, String registrationStatus, String roleDescription, String sdtmTarget, String simpleDatatype, String submissionValue, String synonyms, String type, String uiHref, String valueDomain, String variableSet, String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'q' is set
    if (q == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'q' when calling mdrSearchGet",
        new ApiException(400, "Missing the required parameter 'q' when calling mdrSearchGet"));
    }

    // create path and map variables
    String path = "/mdr/search";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "q", q));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "highlight", highlight));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "class", _class));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "codelist", codelist));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "conceptId", conceptId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "core", core));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "dataStructure", dataStructure));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "datasetStructure", datasetStructure));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "definition", definition));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "description", description));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "domain", domain));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "effectiveDate", effectiveDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "extensible", extensible));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "href", href));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "label", label));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "measureType", measureType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "preferredTerm", preferredTerm));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product", product));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productGroup", productGroup));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "registrationStatus", registrationStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "roleDescription", roleDescription));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sdtmTarget", sdtmTarget));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "simpleDatatype", simpleDatatype));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "submissionValue", submissionValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "synonyms", synonyms));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "uiHref", uiHref));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "valueDomain", valueDomain));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "variableSet", variableSet));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "version", version));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DefaultSearchResponse) ApiInvoker.deserialize(localVarResponse, "", DefaultSearchResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get Search Results Across CDISC Library
   * @param q Search Term Expression   * @param highlight Search Highlight Expression   * @param start Initial Search Result Index   * @param pageSize Number of Search Results to Return   * @param _class Limit Search by Setting Scope to Class   * @param codelist Limit Search by Setting Scope to Codelist   * @param conceptId Limit Search by Setting Scope to Concept ID   * @param core Limit Search by Setting Scope to Core   * @param dataStructure Limit Search by Setting Scope to Data Structure   * @param datasetStructure Limit Search by Setting Scope to Dataset Structure   * @param definition Limit Search by Setting Scope to Definition   * @param description Limit Search by Setting Scope to Description   * @param domain Limit Search by Setting Scope to Domain   * @param effectiveDate Limit Search by Setting Scope to Effective Date   * @param extensible Limit Search by Setting Scope to Extensible   * @param href Limit Search by Setting Scope to Href   * @param label Limit Search by Setting Scope to Label   * @param measureType SLimit Search by Setting Scope to Measure Type   * @param name Limit Search by Setting Scope to Name   * @param preferredTerm Limit Search by Setting Scope to Preferred Term   * @param product Limit Search by Setting Scope to Product   * @param productGroup Limit Search by Setting Scope to Product Group   * @param registrationStatus Limit Search by Setting Scope to Registration Status   * @param roleDescription Limit Search by Setting Scope to Role Description   * @param sdtmTarget Limit Search by Setting Scope to SDTM Target   * @param simpleDatatype Limit Search by Setting Scope to Simple Datatype   * @param submissionValue Limit Search by Setting Scope to Submission Value   * @param synonyms Limit Search by Setting Scope to Synonyms   * @param type Limit Search by Setting Scope to Type   * @param uiHref Limit Search by Setting Scope to UI Href   * @param valueDomain Limit Search by Setting Scope to Value Domain   * @param variableSet Limit Search by Setting Scope to Variable Set   * @param version Limit Search by Setting Scope to Version
  */
  public void mdrSearchGet (String q, String highlight, BigDecimal start, BigDecimal pageSize, String _class, String codelist, String conceptId, String core, String dataStructure, String datasetStructure, String definition, String description, String domain, String effectiveDate, String extensible, String href, String label, String measureType, String name, String preferredTerm, String product, String productGroup, String registrationStatus, String roleDescription, String sdtmTarget, String simpleDatatype, String submissionValue, String synonyms, String type, String uiHref, String valueDomain, String variableSet, String version, final Response.Listener<DefaultSearchResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'q' is set
    if (q == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'q' when calling mdrSearchGet",
        new ApiException(400, "Missing the required parameter 'q' when calling mdrSearchGet"));
    }

    // create path and map variables
    String path = "/mdr/search".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "q", q));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "highlight", highlight));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "class", _class));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "codelist", codelist));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "conceptId", conceptId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "core", core));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "dataStructure", dataStructure));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "datasetStructure", datasetStructure));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "definition", definition));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "description", description));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "domain", domain));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "effectiveDate", effectiveDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "extensible", extensible));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "href", href));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "label", label));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "measureType", measureType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "preferredTerm", preferredTerm));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product", product));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "productGroup", productGroup));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "registrationStatus", registrationStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "roleDescription", roleDescription));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sdtmTarget", sdtmTarget));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "simpleDatatype", simpleDatatype));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "submissionValue", submissionValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "synonyms", synonyms));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "uiHref", uiHref));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "valueDomain", valueDomain));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "variableSet", variableSet));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "version", version));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DefaultSearchResponse) ApiInvoker.deserialize(localVarResponse,  "", DefaultSearchResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get Search Results Across CDISC Library
   * @return MdrSearchScopesGet200Response
  */
  public MdrSearchScopesGet200Response mdrSearchScopesGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/mdr/search/scopes";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MdrSearchScopesGet200Response) ApiInvoker.deserialize(localVarResponse, "", MdrSearchScopesGet200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get Search Results Across CDISC Library

  */
  public void mdrSearchScopesGet (final Response.Listener<MdrSearchScopesGet200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/mdr/search/scopes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MdrSearchScopesGet200Response) ApiInvoker.deserialize(localVarResponse,  "", MdrSearchScopesGet200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get Search Results Limited to Scope
   * @param scope Search Scope
   * @return ScopeValues
  */
  public ScopeValues mdrSearchScopesScopeGet (DefaultSearchScopes scope) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'scope' is set
    if (scope == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'scope' when calling mdrSearchScopesScopeGet",
        new ApiException(400, "Missing the required parameter 'scope' when calling mdrSearchScopesScopeGet"));
    }

    // create path and map variables
    String path = "/mdr/search/scopes/{scope}".replaceAll("\\{" + "scope" + "\\}", apiInvoker.escapeString(scope.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ScopeValues) ApiInvoker.deserialize(localVarResponse, "", ScopeValues.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get Search Results Limited to Scope
   * @param scope Search Scope
  */
  public void mdrSearchScopesScopeGet (DefaultSearchScopes scope, final Response.Listener<ScopeValues> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'scope' is set
    if (scope == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'scope' when calling mdrSearchScopesScopeGet",
        new ApiException(400, "Missing the required parameter 'scope' when calling mdrSearchScopesScopeGet"));
    }

    // create path and map variables
    String path = "/mdr/search/scopes/{scope}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "scope" + "\\}", apiInvoker.escapeString(scope.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ScopeValues) ApiInvoker.deserialize(localVarResponse,  "", ScopeValues.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}

/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class ExportAdamVariablesRow {
  
  @SerializedName("Version")
  private String version = null;
  @SerializedName("Data Structure Name")
  private String dataStructureName = null;
  @SerializedName("Dataset Name")
  private String datasetName = null;
  @SerializedName("Variable Group")
  private String variableGroup = null;
  @SerializedName("Variable Name")
  private String variableName = null;
  @SerializedName("Variable Label")
  private String variableLabel = null;
  @SerializedName("Type")
  private String type = null;
  @SerializedName("Codelist/Controlled Terms")
  private String codelistControlledTerms = null;
  @SerializedName("Core")
  private String core = null;
  @SerializedName("CDISC Notes")
  private String cDISCNotes = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public String getVersion() {
    return version;
  }
  public void setVersion(String version) {
    this.version = version;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getDataStructureName() {
    return dataStructureName;
  }
  public void setDataStructureName(String dataStructureName) {
    this.dataStructureName = dataStructureName;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getDatasetName() {
    return datasetName;
  }
  public void setDatasetName(String datasetName) {
    this.datasetName = datasetName;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getVariableGroup() {
    return variableGroup;
  }
  public void setVariableGroup(String variableGroup) {
    this.variableGroup = variableGroup;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getVariableName() {
    return variableName;
  }
  public void setVariableName(String variableName) {
    this.variableName = variableName;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getVariableLabel() {
    return variableLabel;
  }
  public void setVariableLabel(String variableLabel) {
    this.variableLabel = variableLabel;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getType() {
    return type;
  }
  public void setType(String type) {
    this.type = type;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getCodelistControlledTerms() {
    return codelistControlledTerms;
  }
  public void setCodelistControlledTerms(String codelistControlledTerms) {
    this.codelistControlledTerms = codelistControlledTerms;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getCore() {
    return core;
  }
  public void setCore(String core) {
    this.core = core;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public String getCDISCNotes() {
    return cDISCNotes;
  }
  public void setCDISCNotes(String cDISCNotes) {
    this.cDISCNotes = cDISCNotes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportAdamVariablesRow exportAdamVariablesRow = (ExportAdamVariablesRow) o;
    return (this.version == null ? exportAdamVariablesRow.version == null : this.version.equals(exportAdamVariablesRow.version)) &&
        (this.dataStructureName == null ? exportAdamVariablesRow.dataStructureName == null : this.dataStructureName.equals(exportAdamVariablesRow.dataStructureName)) &&
        (this.datasetName == null ? exportAdamVariablesRow.datasetName == null : this.datasetName.equals(exportAdamVariablesRow.datasetName)) &&
        (this.variableGroup == null ? exportAdamVariablesRow.variableGroup == null : this.variableGroup.equals(exportAdamVariablesRow.variableGroup)) &&
        (this.variableName == null ? exportAdamVariablesRow.variableName == null : this.variableName.equals(exportAdamVariablesRow.variableName)) &&
        (this.variableLabel == null ? exportAdamVariablesRow.variableLabel == null : this.variableLabel.equals(exportAdamVariablesRow.variableLabel)) &&
        (this.type == null ? exportAdamVariablesRow.type == null : this.type.equals(exportAdamVariablesRow.type)) &&
        (this.codelistControlledTerms == null ? exportAdamVariablesRow.codelistControlledTerms == null : this.codelistControlledTerms.equals(exportAdamVariablesRow.codelistControlledTerms)) &&
        (this.core == null ? exportAdamVariablesRow.core == null : this.core.equals(exportAdamVariablesRow.core)) &&
        (this.cDISCNotes == null ? exportAdamVariablesRow.cDISCNotes == null : this.cDISCNotes.equals(exportAdamVariablesRow.cDISCNotes));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.version == null ? 0: this.version.hashCode());
    result = 31 * result + (this.dataStructureName == null ? 0: this.dataStructureName.hashCode());
    result = 31 * result + (this.datasetName == null ? 0: this.datasetName.hashCode());
    result = 31 * result + (this.variableGroup == null ? 0: this.variableGroup.hashCode());
    result = 31 * result + (this.variableName == null ? 0: this.variableName.hashCode());
    result = 31 * result + (this.variableLabel == null ? 0: this.variableLabel.hashCode());
    result = 31 * result + (this.type == null ? 0: this.type.hashCode());
    result = 31 * result + (this.codelistControlledTerms == null ? 0: this.codelistControlledTerms.hashCode());
    result = 31 * result + (this.core == null ? 0: this.core.hashCode());
    result = 31 * result + (this.cDISCNotes == null ? 0: this.cDISCNotes.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportAdamVariablesRow {\n");
    
    sb.append("  version: ").append(version).append("\n");
    sb.append("  dataStructureName: ").append(dataStructureName).append("\n");
    sb.append("  datasetName: ").append(datasetName).append("\n");
    sb.append("  variableGroup: ").append(variableGroup).append("\n");
    sb.append("  variableName: ").append(variableName).append("\n");
    sb.append("  variableLabel: ").append(variableLabel).append("\n");
    sb.append("  type: ").append(type).append("\n");
    sb.append("  codelistControlledTerms: ").append(codelistControlledTerms).append("\n");
    sb.append("  core: ").append(core).append("\n");
    sb.append("  cDISCNotes: ").append(cDISCNotes).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}

/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.CdashClass;
import org.openapitools.client.model.CdashClassDomains;
import org.openapitools.client.model.CdashClassField;
import org.openapitools.client.model.CdashDomain;
import org.openapitools.client.model.CdashDomainField;
import org.openapitools.client.model.CdashDomainFields;
import org.openapitools.client.model.CdashProduct;
import org.openapitools.client.model.CdashProductClasses;
import org.openapitools.client.model.CdashProductDomains;
import org.openapitools.client.model.DefaultErrorResponse;
import org.openapitools.client.model.ExportCdashTable;
import org.openapitools.client.model.RootCdashClassField;
import org.openapitools.client.model.RootCdashDomainField;
import org.openapitools.client.model.XmlCdashClass;
import org.openapitools.client.model.XmlCdashClassDomains;
import org.openapitools.client.model.XmlCdashClassField;
import org.openapitools.client.model.XmlCdashDomain;
import org.openapitools.client.model.XmlCdashDomainField;
import org.openapitools.client.model.XmlCdashDomainFields;
import org.openapitools.client.model.XmlCdashProduct;
import org.openapitools.client.model.XmlCdashProductClasses;
import org.openapitools.client.model.XmlCdashProductDomains;
import org.openapitools.client.model.XmlRootCdashClassField;
import org.openapitools.client.model.XmlRootCdashDomainField;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ClinicalDataAcquisitionStandardsHarmonizationCDASHApi {
  String basePath = "https://library.cdisc.org/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * Get CDASH Class Domain List
   * @param version CDISC Library Product Version
   * @param _class CDASH Class Identifier
   * @return CdashClassDomains
  */
  public CdashClassDomains mdrCdashVersionClassesClassDomainsGet (String version, String _class) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashVersionClassesClassDomainsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashVersionClassesClassDomainsGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrCdashVersionClassesClassDomainsGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrCdashVersionClassesClassDomainsGet"));
    }

    // create path and map variables
    String path = "/mdr/cdash/{version}/classes/{class}/domains".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CdashClassDomains) ApiInvoker.deserialize(localVarResponse, "", CdashClassDomains.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDASH Class Domain List
   * @param version CDISC Library Product Version   * @param _class CDASH Class Identifier
  */
  public void mdrCdashVersionClassesClassDomainsGet (String version, String _class, final Response.Listener<CdashClassDomains> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashVersionClassesClassDomainsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashVersionClassesClassDomainsGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrCdashVersionClassesClassDomainsGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrCdashVersionClassesClassDomainsGet"));
    }

    // create path and map variables
    String path = "/mdr/cdash/{version}/classes/{class}/domains".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CdashClassDomains) ApiInvoker.deserialize(localVarResponse,  "", CdashClassDomains.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDASH Class Field
   * @param version CDISC Library Product Version
   * @param _class CDASH Class Identifier
   * @param field CDASH Field Identifier
   * @return CdashClassField
  */
  public CdashClassField mdrCdashVersionClassesClassFieldsFieldGet (String version, String _class, String field) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashVersionClassesClassFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashVersionClassesClassFieldsFieldGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrCdashVersionClassesClassFieldsFieldGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrCdashVersionClassesClassFieldsFieldGet"));
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'field' when calling mdrCdashVersionClassesClassFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'field' when calling mdrCdashVersionClassesClassFieldsFieldGet"));
    }

    // create path and map variables
    String path = "/mdr/cdash/{version}/classes/{class}/fields/{field}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString())).replaceAll("\\{" + "field" + "\\}", apiInvoker.escapeString(field.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CdashClassField) ApiInvoker.deserialize(localVarResponse, "", CdashClassField.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDASH Class Field
   * @param version CDISC Library Product Version   * @param _class CDASH Class Identifier   * @param field CDASH Field Identifier
  */
  public void mdrCdashVersionClassesClassFieldsFieldGet (String version, String _class, String field, final Response.Listener<CdashClassField> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashVersionClassesClassFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashVersionClassesClassFieldsFieldGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrCdashVersionClassesClassFieldsFieldGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrCdashVersionClassesClassFieldsFieldGet"));
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'field' when calling mdrCdashVersionClassesClassFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'field' when calling mdrCdashVersionClassesClassFieldsFieldGet"));
    }

    // create path and map variables
    String path = "/mdr/cdash/{version}/classes/{class}/fields/{field}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString())).replaceAll("\\{" + "field" + "\\}", apiInvoker.escapeString(field.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CdashClassField) ApiInvoker.deserialize(localVarResponse,  "", CdashClassField.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDASH Class
   * @param version CDISC Library Product Version
   * @param _class CDASH Class Identifier
   * @return CdashClass
  */
  public CdashClass mdrCdashVersionClassesClassGet (String version, String _class) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashVersionClassesClassGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashVersionClassesClassGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrCdashVersionClassesClassGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrCdashVersionClassesClassGet"));
    }

    // create path and map variables
    String path = "/mdr/cdash/{version}/classes/{class}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CdashClass) ApiInvoker.deserialize(localVarResponse, "", CdashClass.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDASH Class
   * @param version CDISC Library Product Version   * @param _class CDASH Class Identifier
  */
  public void mdrCdashVersionClassesClassGet (String version, String _class, final Response.Listener<CdashClass> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashVersionClassesClassGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashVersionClassesClassGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrCdashVersionClassesClassGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrCdashVersionClassesClassGet"));
    }

    // create path and map variables
    String path = "/mdr/cdash/{version}/classes/{class}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CdashClass) ApiInvoker.deserialize(localVarResponse,  "", CdashClass.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDASH Class List
   * @param version CDISC Library Product Version
   * @return CdashProductClasses
  */
  public CdashProductClasses mdrCdashVersionClassesGet (String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashVersionClassesGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashVersionClassesGet"));
    }

    // create path and map variables
    String path = "/mdr/cdash/{version}/classes".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CdashProductClasses) ApiInvoker.deserialize(localVarResponse, "", CdashProductClasses.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDASH Class List
   * @param version CDISC Library Product Version
  */
  public void mdrCdashVersionClassesGet (String version, final Response.Listener<CdashProductClasses> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashVersionClassesGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashVersionClassesGet"));
    }

    // create path and map variables
    String path = "/mdr/cdash/{version}/classes".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CdashProductClasses) ApiInvoker.deserialize(localVarResponse,  "", CdashProductClasses.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDASH Domain Field
   * @param version CDISC Library Product Version
   * @param domain CDASH Domain Identifier
   * @param field CDASH Field Identifier
   * @return CdashDomainField
  */
  public CdashDomainField mdrCdashVersionDomainsDomainFieldsFieldGet (String version, String domain, String field) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashVersionDomainsDomainFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashVersionDomainsDomainFieldsFieldGet"));
    }
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrCdashVersionDomainsDomainFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrCdashVersionDomainsDomainFieldsFieldGet"));
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'field' when calling mdrCdashVersionDomainsDomainFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'field' when calling mdrCdashVersionDomainsDomainFieldsFieldGet"));
    }

    // create path and map variables
    String path = "/mdr/cdash/{version}/domains/{domain}/fields/{field}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString())).replaceAll("\\{" + "field" + "\\}", apiInvoker.escapeString(field.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CdashDomainField) ApiInvoker.deserialize(localVarResponse, "", CdashDomainField.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDASH Domain Field
   * @param version CDISC Library Product Version   * @param domain CDASH Domain Identifier   * @param field CDASH Field Identifier
  */
  public void mdrCdashVersionDomainsDomainFieldsFieldGet (String version, String domain, String field, final Response.Listener<CdashDomainField> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashVersionDomainsDomainFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashVersionDomainsDomainFieldsFieldGet"));
    }
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrCdashVersionDomainsDomainFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrCdashVersionDomainsDomainFieldsFieldGet"));
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'field' when calling mdrCdashVersionDomainsDomainFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'field' when calling mdrCdashVersionDomainsDomainFieldsFieldGet"));
    }

    // create path and map variables
    String path = "/mdr/cdash/{version}/domains/{domain}/fields/{field}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString())).replaceAll("\\{" + "field" + "\\}", apiInvoker.escapeString(field.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CdashDomainField) ApiInvoker.deserialize(localVarResponse,  "", CdashDomainField.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDASH Domain Field List
   * @param version CDISC Library Product Version
   * @param domain CDASH Domain Identifier
   * @return CdashDomainFields
  */
  public CdashDomainFields mdrCdashVersionDomainsDomainFieldsGet (String version, String domain) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashVersionDomainsDomainFieldsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashVersionDomainsDomainFieldsGet"));
    }
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrCdashVersionDomainsDomainFieldsGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrCdashVersionDomainsDomainFieldsGet"));
    }

    // create path and map variables
    String path = "/mdr/cdash/{version}/domains/{domain}/fields".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CdashDomainFields) ApiInvoker.deserialize(localVarResponse, "", CdashDomainFields.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDASH Domain Field List
   * @param version CDISC Library Product Version   * @param domain CDASH Domain Identifier
  */
  public void mdrCdashVersionDomainsDomainFieldsGet (String version, String domain, final Response.Listener<CdashDomainFields> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashVersionDomainsDomainFieldsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashVersionDomainsDomainFieldsGet"));
    }
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrCdashVersionDomainsDomainFieldsGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrCdashVersionDomainsDomainFieldsGet"));
    }

    // create path and map variables
    String path = "/mdr/cdash/{version}/domains/{domain}/fields".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CdashDomainFields) ApiInvoker.deserialize(localVarResponse,  "", CdashDomainFields.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDASH Domain
   * @param version CDISC Library Product Version
   * @param domain CDASH Domain Identifier
   * @return CdashDomain
  */
  public CdashDomain mdrCdashVersionDomainsDomainGet (String version, String domain) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashVersionDomainsDomainGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashVersionDomainsDomainGet"));
    }
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrCdashVersionDomainsDomainGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrCdashVersionDomainsDomainGet"));
    }

    // create path and map variables
    String path = "/mdr/cdash/{version}/domains/{domain}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CdashDomain) ApiInvoker.deserialize(localVarResponse, "", CdashDomain.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDASH Domain
   * @param version CDISC Library Product Version   * @param domain CDASH Domain Identifier
  */
  public void mdrCdashVersionDomainsDomainGet (String version, String domain, final Response.Listener<CdashDomain> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashVersionDomainsDomainGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashVersionDomainsDomainGet"));
    }
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrCdashVersionDomainsDomainGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrCdashVersionDomainsDomainGet"));
    }

    // create path and map variables
    String path = "/mdr/cdash/{version}/domains/{domain}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CdashDomain) ApiInvoker.deserialize(localVarResponse,  "", CdashDomain.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDASH Domain List
   * @param version CDISC Library Product Version
   * @return CdashProductDomains
  */
  public CdashProductDomains mdrCdashVersionDomainsGet (String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashVersionDomainsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashVersionDomainsGet"));
    }

    // create path and map variables
    String path = "/mdr/cdash/{version}/domains".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CdashProductDomains) ApiInvoker.deserialize(localVarResponse, "", CdashProductDomains.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDASH Domain List
   * @param version CDISC Library Product Version
  */
  public void mdrCdashVersionDomainsGet (String version, final Response.Listener<CdashProductDomains> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashVersionDomainsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashVersionDomainsGet"));
    }

    // create path and map variables
    String path = "/mdr/cdash/{version}/domains".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CdashProductDomains) ApiInvoker.deserialize(localVarResponse,  "", CdashProductDomains.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get CDASH Product
   * @param version CDISC Library Product Version
   * @return CdashProduct
  */
  public CdashProduct mdrCdashVersionGet (String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashVersionGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashVersionGet"));
    }

    // create path and map variables
    String path = "/mdr/cdash/{version}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CdashProduct) ApiInvoker.deserialize(localVarResponse, "", CdashProduct.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get CDASH Product
   * @param version CDISC Library Product Version
  */
  public void mdrCdashVersionGet (String version, final Response.Listener<CdashProduct> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrCdashVersionGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrCdashVersionGet"));
    }

    // create path and map variables
    String path = "/mdr/cdash/{version}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CdashProduct) ApiInvoker.deserialize(localVarResponse,  "", CdashProduct.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get Root CDASH Class Field
   * @param _class CDASH Class Identifier
   * @param field CDASH Field Identifier
   * @return RootCdashClassField
  */
  public RootCdashClassField mdrRootCdashClassesClassFieldsFieldGet (String _class, String field) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrRootCdashClassesClassFieldsFieldGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrRootCdashClassesClassFieldsFieldGet"));
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'field' when calling mdrRootCdashClassesClassFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'field' when calling mdrRootCdashClassesClassFieldsFieldGet"));
    }

    // create path and map variables
    String path = "/mdr/root/cdash/classes/{class}/fields/{field}".replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString())).replaceAll("\\{" + "field" + "\\}", apiInvoker.escapeString(field.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (RootCdashClassField) ApiInvoker.deserialize(localVarResponse, "", RootCdashClassField.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get Root CDASH Class Field
   * @param _class CDASH Class Identifier   * @param field CDASH Field Identifier
  */
  public void mdrRootCdashClassesClassFieldsFieldGet (String _class, String field, final Response.Listener<RootCdashClassField> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrRootCdashClassesClassFieldsFieldGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrRootCdashClassesClassFieldsFieldGet"));
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'field' when calling mdrRootCdashClassesClassFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'field' when calling mdrRootCdashClassesClassFieldsFieldGet"));
    }

    // create path and map variables
    String path = "/mdr/root/cdash/classes/{class}/fields/{field}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString())).replaceAll("\\{" + "field" + "\\}", apiInvoker.escapeString(field.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RootCdashClassField) ApiInvoker.deserialize(localVarResponse,  "", RootCdashClassField.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get Root CDASH Domain Field
   * @param domain CDASH Domain Identifier
   * @param field CDASH Field Identifier
   * @return RootCdashDomainField
  */
  public RootCdashDomainField mdrRootCdashDomainsDomainFieldsFieldGet (String domain, String field) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrRootCdashDomainsDomainFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrRootCdashDomainsDomainFieldsFieldGet"));
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'field' when calling mdrRootCdashDomainsDomainFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'field' when calling mdrRootCdashDomainsDomainFieldsFieldGet"));
    }

    // create path and map variables
    String path = "/mdr/root/cdash/domains/{domain}/fields/{field}".replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString())).replaceAll("\\{" + "field" + "\\}", apiInvoker.escapeString(field.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (RootCdashDomainField) ApiInvoker.deserialize(localVarResponse, "", RootCdashDomainField.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get Root CDASH Domain Field
   * @param domain CDASH Domain Identifier   * @param field CDASH Field Identifier
  */
  public void mdrRootCdashDomainsDomainFieldsFieldGet (String domain, String field, final Response.Listener<RootCdashDomainField> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'domain' is set
    if (domain == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'domain' when calling mdrRootCdashDomainsDomainFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'domain' when calling mdrRootCdashDomainsDomainFieldsFieldGet"));
    }
    // verify the required parameter 'field' is set
    if (field == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'field' when calling mdrRootCdashDomainsDomainFieldsFieldGet",
        new ApiException(400, "Missing the required parameter 'field' when calling mdrRootCdashDomainsDomainFieldsFieldGet"));
    }

    // create path and map variables
    String path = "/mdr/root/cdash/domains/{domain}/fields/{field}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "domain" + "\\}", apiInvoker.escapeString(domain.toString())).replaceAll("\\{" + "field" + "\\}", apiInvoker.escapeString(field.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RootCdashDomainField) ApiInvoker.deserialize(localVarResponse,  "", RootCdashDomainField.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}

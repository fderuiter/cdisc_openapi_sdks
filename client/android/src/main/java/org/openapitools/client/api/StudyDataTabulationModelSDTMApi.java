/*
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.DefaultErrorResponse;
import org.openapitools.client.model.ExportSdtmDatasetsTable;
import org.openapitools.client.model.ExportSdtmVariablesTable;
import org.openapitools.client.model.ExportSdtmWorkbook;
import org.openapitools.client.model.RootSdtmClassVariable;
import org.openapitools.client.model.RootSdtmDatasetVariable;
import org.openapitools.client.model.SdtmClass;
import org.openapitools.client.model.SdtmClassDatasets;
import org.openapitools.client.model.SdtmClassVariable;
import org.openapitools.client.model.SdtmClassVariables;
import org.openapitools.client.model.SdtmClasses;
import org.openapitools.client.model.SdtmDataset;
import org.openapitools.client.model.SdtmDatasetVariable;
import org.openapitools.client.model.SdtmDatasetVariables;
import org.openapitools.client.model.SdtmDatasets;
import org.openapitools.client.model.SdtmProduct;
import org.openapitools.client.model.XmlRootSdtmClassVariable;
import org.openapitools.client.model.XmlRootSdtmDatasetVariable;
import org.openapitools.client.model.XmlSdtmClass;
import org.openapitools.client.model.XmlSdtmClassDatasets;
import org.openapitools.client.model.XmlSdtmClassVariable;
import org.openapitools.client.model.XmlSdtmClassVariables;
import org.openapitools.client.model.XmlSdtmClasses;
import org.openapitools.client.model.XmlSdtmDataset;
import org.openapitools.client.model.XmlSdtmDatasetVariable;
import org.openapitools.client.model.XmlSdtmDatasetVariables;
import org.openapitools.client.model.XmlSdtmDatasets;
import org.openapitools.client.model.XmlSdtmProduct;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class StudyDataTabulationModelSDTMApi {
  String basePath = "https://library.cdisc.org/api";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * Get Root of SDTM Class Variable
   * @param _class SDTM Class Identifier
   * @param var SDTM Variable Identifier
   * @return RootSdtmClassVariable
  */
  public RootSdtmClassVariable mdrRootSdtmClassesClassVariablesVarGet (String _class, String var) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrRootSdtmClassesClassVariablesVarGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrRootSdtmClassesClassVariablesVarGet"));
    }
    // verify the required parameter 'var' is set
    if (var == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'var' when calling mdrRootSdtmClassesClassVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'var' when calling mdrRootSdtmClassesClassVariablesVarGet"));
    }

    // create path and map variables
    String path = "/mdr/root/sdtm/classes/{class}/variables/{var}".replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString())).replaceAll("\\{" + "var" + "\\}", apiInvoker.escapeString(var.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (RootSdtmClassVariable) ApiInvoker.deserialize(localVarResponse, "", RootSdtmClassVariable.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get Root of SDTM Class Variable
   * @param _class SDTM Class Identifier   * @param var SDTM Variable Identifier
  */
  public void mdrRootSdtmClassesClassVariablesVarGet (String _class, String var, final Response.Listener<RootSdtmClassVariable> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrRootSdtmClassesClassVariablesVarGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrRootSdtmClassesClassVariablesVarGet"));
    }
    // verify the required parameter 'var' is set
    if (var == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'var' when calling mdrRootSdtmClassesClassVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'var' when calling mdrRootSdtmClassesClassVariablesVarGet"));
    }

    // create path and map variables
    String path = "/mdr/root/sdtm/classes/{class}/variables/{var}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString())).replaceAll("\\{" + "var" + "\\}", apiInvoker.escapeString(var.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RootSdtmClassVariable) ApiInvoker.deserialize(localVarResponse,  "", RootSdtmClassVariable.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get Root SDTM Dataset Variable
   * @param dataset SDTM Dataset Identifier
   * @param var SDTM Variable Identifier
   * @return RootSdtmDatasetVariable
  */
  public RootSdtmDatasetVariable mdrRootSdtmDatasetsDatasetVariablesVarGet (String dataset, String var) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrRootSdtmDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrRootSdtmDatasetsDatasetVariablesVarGet"));
    }
    // verify the required parameter 'var' is set
    if (var == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'var' when calling mdrRootSdtmDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'var' when calling mdrRootSdtmDatasetsDatasetVariablesVarGet"));
    }

    // create path and map variables
    String path = "/mdr/root/sdtm/datasets/{dataset}/variables/{var}".replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString())).replaceAll("\\{" + "var" + "\\}", apiInvoker.escapeString(var.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (RootSdtmDatasetVariable) ApiInvoker.deserialize(localVarResponse, "", RootSdtmDatasetVariable.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get Root SDTM Dataset Variable
   * @param dataset SDTM Dataset Identifier   * @param var SDTM Variable Identifier
  */
  public void mdrRootSdtmDatasetsDatasetVariablesVarGet (String dataset, String var, final Response.Listener<RootSdtmDatasetVariable> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrRootSdtmDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrRootSdtmDatasetsDatasetVariablesVarGet"));
    }
    // verify the required parameter 'var' is set
    if (var == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'var' when calling mdrRootSdtmDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'var' when calling mdrRootSdtmDatasetsDatasetVariablesVarGet"));
    }

    // create path and map variables
    String path = "/mdr/root/sdtm/datasets/{dataset}/variables/{var}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString())).replaceAll("\\{" + "var" + "\\}", apiInvoker.escapeString(var.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RootSdtmDatasetVariable) ApiInvoker.deserialize(localVarResponse,  "", RootSdtmDatasetVariable.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SDTM Class Dataset List
   * @param version CDISC Library Product Version
   * @param _class SDTM Class Identifier
   * @return SdtmClassDatasets
  */
  public SdtmClassDatasets mdrSdtmVersionClassesClassDatasetsGet (String version, String _class) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmVersionClassesClassDatasetsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmVersionClassesClassDatasetsGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrSdtmVersionClassesClassDatasetsGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrSdtmVersionClassesClassDatasetsGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtm/{version}/classes/{class}/datasets".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SdtmClassDatasets) ApiInvoker.deserialize(localVarResponse, "", SdtmClassDatasets.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SDTM Class Dataset List
   * @param version CDISC Library Product Version   * @param _class SDTM Class Identifier
  */
  public void mdrSdtmVersionClassesClassDatasetsGet (String version, String _class, final Response.Listener<SdtmClassDatasets> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmVersionClassesClassDatasetsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmVersionClassesClassDatasetsGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrSdtmVersionClassesClassDatasetsGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrSdtmVersionClassesClassDatasetsGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtm/{version}/classes/{class}/datasets".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SdtmClassDatasets) ApiInvoker.deserialize(localVarResponse,  "", SdtmClassDatasets.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SDTM Class
   * @param version CDISC Library Product Version
   * @param _class SDTM Class Identifier
   * @return SdtmClass
  */
  public SdtmClass mdrSdtmVersionClassesClassGet (String version, String _class) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmVersionClassesClassGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmVersionClassesClassGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrSdtmVersionClassesClassGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrSdtmVersionClassesClassGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtm/{version}/classes/{class}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SdtmClass) ApiInvoker.deserialize(localVarResponse, "", SdtmClass.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SDTM Class
   * @param version CDISC Library Product Version   * @param _class SDTM Class Identifier
  */
  public void mdrSdtmVersionClassesClassGet (String version, String _class, final Response.Listener<SdtmClass> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmVersionClassesClassGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmVersionClassesClassGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrSdtmVersionClassesClassGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrSdtmVersionClassesClassGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtm/{version}/classes/{class}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SdtmClass) ApiInvoker.deserialize(localVarResponse,  "", SdtmClass.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SDTM Class Variable List
   * @param version CDISC Library Product Version
   * @param _class SDTM Class Identifier
   * @return SdtmClassVariables
  */
  public SdtmClassVariables mdrSdtmVersionClassesClassVariablesGet (String version, String _class) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmVersionClassesClassVariablesGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmVersionClassesClassVariablesGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrSdtmVersionClassesClassVariablesGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrSdtmVersionClassesClassVariablesGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtm/{version}/classes/{class}/variables".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SdtmClassVariables) ApiInvoker.deserialize(localVarResponse, "", SdtmClassVariables.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SDTM Class Variable List
   * @param version CDISC Library Product Version   * @param _class SDTM Class Identifier
  */
  public void mdrSdtmVersionClassesClassVariablesGet (String version, String _class, final Response.Listener<SdtmClassVariables> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmVersionClassesClassVariablesGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmVersionClassesClassVariablesGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrSdtmVersionClassesClassVariablesGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrSdtmVersionClassesClassVariablesGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtm/{version}/classes/{class}/variables".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SdtmClassVariables) ApiInvoker.deserialize(localVarResponse,  "", SdtmClassVariables.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SDTM Class Variable
   * @param version CDISC Library Product Version
   * @param _class SDTM Class Identifier
   * @param var SDTM Variable Identifier
   * @return SdtmClassVariable
  */
  public SdtmClassVariable mdrSdtmVersionClassesClassVariablesVarGet (String version, String _class, String var) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmVersionClassesClassVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmVersionClassesClassVariablesVarGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrSdtmVersionClassesClassVariablesVarGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrSdtmVersionClassesClassVariablesVarGet"));
    }
    // verify the required parameter 'var' is set
    if (var == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'var' when calling mdrSdtmVersionClassesClassVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'var' when calling mdrSdtmVersionClassesClassVariablesVarGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtm/{version}/classes/{class}/variables/{var}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString())).replaceAll("\\{" + "var" + "\\}", apiInvoker.escapeString(var.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SdtmClassVariable) ApiInvoker.deserialize(localVarResponse, "", SdtmClassVariable.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SDTM Class Variable
   * @param version CDISC Library Product Version   * @param _class SDTM Class Identifier   * @param var SDTM Variable Identifier
  */
  public void mdrSdtmVersionClassesClassVariablesVarGet (String version, String _class, String var, final Response.Listener<SdtmClassVariable> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmVersionClassesClassVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmVersionClassesClassVariablesVarGet"));
    }
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling mdrSdtmVersionClassesClassVariablesVarGet",
        new ApiException(400, "Missing the required parameter '_class' when calling mdrSdtmVersionClassesClassVariablesVarGet"));
    }
    // verify the required parameter 'var' is set
    if (var == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'var' when calling mdrSdtmVersionClassesClassVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'var' when calling mdrSdtmVersionClassesClassVariablesVarGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtm/{version}/classes/{class}/variables/{var}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString())).replaceAll("\\{" + "var" + "\\}", apiInvoker.escapeString(var.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SdtmClassVariable) ApiInvoker.deserialize(localVarResponse,  "", SdtmClassVariable.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SDTM Class List
   * @param version CDISC Library Product Version
   * @return SdtmClasses
  */
  public SdtmClasses mdrSdtmVersionClassesGet (String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmVersionClassesGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmVersionClassesGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtm/{version}/classes".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SdtmClasses) ApiInvoker.deserialize(localVarResponse, "", SdtmClasses.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SDTM Class List
   * @param version CDISC Library Product Version
  */
  public void mdrSdtmVersionClassesGet (String version, final Response.Listener<SdtmClasses> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmVersionClassesGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmVersionClassesGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtm/{version}/classes".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SdtmClasses) ApiInvoker.deserialize(localVarResponse,  "", SdtmClasses.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SDTM Dataset
   * @param version CDISC Library Product Version
   * @param dataset SDTM Dataset Identifier
   * @return SdtmDataset
  */
  public SdtmDataset mdrSdtmVersionDatasetsDatasetGet (String version, String dataset) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmVersionDatasetsDatasetGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmVersionDatasetsDatasetGet"));
    }
    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrSdtmVersionDatasetsDatasetGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrSdtmVersionDatasetsDatasetGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtm/{version}/datasets/{dataset}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SdtmDataset) ApiInvoker.deserialize(localVarResponse, "", SdtmDataset.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SDTM Dataset
   * @param version CDISC Library Product Version   * @param dataset SDTM Dataset Identifier
  */
  public void mdrSdtmVersionDatasetsDatasetGet (String version, String dataset, final Response.Listener<SdtmDataset> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmVersionDatasetsDatasetGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmVersionDatasetsDatasetGet"));
    }
    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrSdtmVersionDatasetsDatasetGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrSdtmVersionDatasetsDatasetGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtm/{version}/datasets/{dataset}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SdtmDataset) ApiInvoker.deserialize(localVarResponse,  "", SdtmDataset.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SDTM Dataset Variable List
   * @param version CDISC Library Product Version
   * @param dataset SDTM Dataset Identifier
   * @return SdtmDatasetVariables
  */
  public SdtmDatasetVariables mdrSdtmVersionDatasetsDatasetVariablesGet (String version, String dataset) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmVersionDatasetsDatasetVariablesGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmVersionDatasetsDatasetVariablesGet"));
    }
    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrSdtmVersionDatasetsDatasetVariablesGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrSdtmVersionDatasetsDatasetVariablesGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtm/{version}/datasets/{dataset}/variables".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SdtmDatasetVariables) ApiInvoker.deserialize(localVarResponse, "", SdtmDatasetVariables.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SDTM Dataset Variable List
   * @param version CDISC Library Product Version   * @param dataset SDTM Dataset Identifier
  */
  public void mdrSdtmVersionDatasetsDatasetVariablesGet (String version, String dataset, final Response.Listener<SdtmDatasetVariables> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmVersionDatasetsDatasetVariablesGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmVersionDatasetsDatasetVariablesGet"));
    }
    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrSdtmVersionDatasetsDatasetVariablesGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrSdtmVersionDatasetsDatasetVariablesGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtm/{version}/datasets/{dataset}/variables".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SdtmDatasetVariables) ApiInvoker.deserialize(localVarResponse,  "", SdtmDatasetVariables.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SDTM Dataset Variable
   * @param version CDISC Library Product Version
   * @param dataset SDTM Dataset Identifier
   * @param var SDTM Variable Identifier
   * @return SdtmDatasetVariable
  */
  public SdtmDatasetVariable mdrSdtmVersionDatasetsDatasetVariablesVarGet (String version, String dataset, String var) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet"));
    }
    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet"));
    }
    // verify the required parameter 'var' is set
    if (var == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'var' when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'var' when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtm/{version}/datasets/{dataset}/variables/{var}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString())).replaceAll("\\{" + "var" + "\\}", apiInvoker.escapeString(var.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SdtmDatasetVariable) ApiInvoker.deserialize(localVarResponse, "", SdtmDatasetVariable.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SDTM Dataset Variable
   * @param version CDISC Library Product Version   * @param dataset SDTM Dataset Identifier   * @param var SDTM Variable Identifier
  */
  public void mdrSdtmVersionDatasetsDatasetVariablesVarGet (String version, String dataset, String var, final Response.Listener<SdtmDatasetVariable> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet"));
    }
    // verify the required parameter 'dataset' is set
    if (dataset == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataset' when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'dataset' when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet"));
    }
    // verify the required parameter 'var' is set
    if (var == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'var' when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet",
        new ApiException(400, "Missing the required parameter 'var' when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtm/{version}/datasets/{dataset}/variables/{var}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString())).replaceAll("\\{" + "dataset" + "\\}", apiInvoker.escapeString(dataset.toString())).replaceAll("\\{" + "var" + "\\}", apiInvoker.escapeString(var.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SdtmDatasetVariable) ApiInvoker.deserialize(localVarResponse,  "", SdtmDatasetVariable.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SDTM Dataset List
   * @param version CDISC Library Product Version
   * @return SdtmDatasets
  */
  public SdtmDatasets mdrSdtmVersionDatasetsGet (String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmVersionDatasetsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmVersionDatasetsGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtm/{version}/datasets".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SdtmDatasets) ApiInvoker.deserialize(localVarResponse, "", SdtmDatasets.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SDTM Dataset List
   * @param version CDISC Library Product Version
  */
  public void mdrSdtmVersionDatasetsGet (String version, final Response.Listener<SdtmDatasets> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmVersionDatasetsGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmVersionDatasetsGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtm/{version}/datasets".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SdtmDatasets) ApiInvoker.deserialize(localVarResponse,  "", SdtmDatasets.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get SDTM product
   * @param version CDISC Library Product Version
   * @return SdtmProduct
  */
  public SdtmProduct mdrSdtmVersionGet (String version) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmVersionGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmVersionGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtm/{version}".replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "basicAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SdtmProduct) ApiInvoker.deserialize(localVarResponse, "", SdtmProduct.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get SDTM product
   * @param version CDISC Library Product Version
  */
  public void mdrSdtmVersionGet (String version, final Response.Listener<SdtmProduct> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'version' is set
    if (version == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'version' when calling mdrSdtmVersionGet",
        new ApiException(400, "Missing the required parameter 'version' when calling mdrSdtmVersionGet"));
    }

    // create path and map variables
    String path = "/mdr/sdtm/{version}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "version" + "\\}", apiInvoker.escapeString(version.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "basicAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SdtmProduct) ApiInvoker.deserialize(localVarResponse,  "", SdtmProduct.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}

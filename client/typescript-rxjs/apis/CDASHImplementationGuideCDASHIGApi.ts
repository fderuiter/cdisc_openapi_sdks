// tslint:disable
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    CdashigClass,
    CdashigClassDomains,
    CdashigClassScenarios,
    CdashigDomain,
    CdashigDomainField,
    CdashigDomainFields,
    CdashigProduct,
    CdashigProductClasses,
    CdashigProductDomains,
    CdashigProductScenarios,
    CdashigScenario,
    CdashigScenarioField,
    CdashigScenarioFields,
    DefaultErrorResponse,
    ExportCdashigTable,
    RootCdashigDomainField,
    RootCdashigScenarioField,
    XmlCdashigClass,
    XmlCdashigClassDomains,
    XmlCdashigClassScenarios,
    XmlCdashigDomain,
    XmlCdashigDomainField,
    XmlCdashigDomainFields,
    XmlCdashigProduct,
    XmlCdashigProductClasses,
    XmlCdashigProductDomains,
    XmlCdashigProductScenarios,
    XmlCdashigScenario,
    XmlCdashigScenarioField,
    XmlCdashigScenarioFields,
    XmlRootCdashigDomainField,
    XmlRootCdashigScenarioField,
} from '../models';

export interface MdrCdashigVersionClassesClassDomainsGetRequest {
    version: string;
    _class: string;
}

export interface MdrCdashigVersionClassesClassGetRequest {
    version: string;
    _class: string;
}

export interface MdrCdashigVersionClassesClassScenariosGetRequest {
    version: string;
    _class: string;
}

export interface MdrCdashigVersionClassesGetRequest {
    version: string;
}

export interface MdrCdashigVersionDomainsDomainFieldsFieldGetRequest {
    version: string;
    domain: string;
    field: string;
}

export interface MdrCdashigVersionDomainsDomainFieldsGetRequest {
    version: string;
    domain: string;
}

export interface MdrCdashigVersionDomainsDomainGetRequest {
    version: string;
    domain: string;
}

export interface MdrCdashigVersionDomainsGetRequest {
    version: string;
}

export interface MdrCdashigVersionGetRequest {
    version: string;
}

export interface MdrCdashigVersionScenariosDomainScenarioFieldsFieldGetRequest {
    version: string;
    domain: string;
    scenario: string;
    field: string;
}

export interface MdrCdashigVersionScenariosDomainScenarioFieldsGetRequest {
    version: string;
    domain: string;
    scenario: string;
}

export interface MdrCdashigVersionScenariosDomainScenarioGetRequest {
    version: string;
    domain: string;
    scenario: string;
}

export interface MdrCdashigVersionScenariosGetRequest {
    version: string;
}

export interface MdrRootCdashigDomainsDomainFieldsFieldGetRequest {
    domain: string;
    field: string;
}

export interface MdrRootCdashigScenariosDomainScenarioFieldsFieldGetRequest {
    domain: string;
    scenario: string;
    field: string;
}

/**
 * no description
 */
export class CDASHImplementationGuideCDASHIGApi extends BaseAPI {

    /**
     * Get CDASHIG Class Domain List
     */
    mdrCdashigVersionClassesClassDomainsGet({ version, _class }: MdrCdashigVersionClassesClassDomainsGetRequest): Observable<CdashigClassDomains>
    mdrCdashigVersionClassesClassDomainsGet({ version, _class }: MdrCdashigVersionClassesClassDomainsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CdashigClassDomains>>
    mdrCdashigVersionClassesClassDomainsGet({ version, _class }: MdrCdashigVersionClassesClassDomainsGetRequest, opts?: OperationOpts): Observable<CdashigClassDomains | AjaxResponse<CdashigClassDomains>> {
        throwIfNullOrUndefined(version, 'version', 'mdrCdashigVersionClassesClassDomainsGet');
        throwIfNullOrUndefined(_class, '_class', 'mdrCdashigVersionClassesClassDomainsGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CdashigClassDomains>({
            url: '/mdr/cdashig/{version}/classes/{class}/domains'.replace('{version}', encodeURI(version)).replace('{class}', encodeURI(_class)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDASHIG Class
     */
    mdrCdashigVersionClassesClassGet({ version, _class }: MdrCdashigVersionClassesClassGetRequest): Observable<CdashigClass>
    mdrCdashigVersionClassesClassGet({ version, _class }: MdrCdashigVersionClassesClassGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CdashigClass>>
    mdrCdashigVersionClassesClassGet({ version, _class }: MdrCdashigVersionClassesClassGetRequest, opts?: OperationOpts): Observable<CdashigClass | AjaxResponse<CdashigClass>> {
        throwIfNullOrUndefined(version, 'version', 'mdrCdashigVersionClassesClassGet');
        throwIfNullOrUndefined(_class, '_class', 'mdrCdashigVersionClassesClassGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CdashigClass>({
            url: '/mdr/cdashig/{version}/classes/{class}'.replace('{version}', encodeURI(version)).replace('{class}', encodeURI(_class)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDASHIG Class Scenario List
     */
    mdrCdashigVersionClassesClassScenariosGet({ version, _class }: MdrCdashigVersionClassesClassScenariosGetRequest): Observable<CdashigClassScenarios>
    mdrCdashigVersionClassesClassScenariosGet({ version, _class }: MdrCdashigVersionClassesClassScenariosGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CdashigClassScenarios>>
    mdrCdashigVersionClassesClassScenariosGet({ version, _class }: MdrCdashigVersionClassesClassScenariosGetRequest, opts?: OperationOpts): Observable<CdashigClassScenarios | AjaxResponse<CdashigClassScenarios>> {
        throwIfNullOrUndefined(version, 'version', 'mdrCdashigVersionClassesClassScenariosGet');
        throwIfNullOrUndefined(_class, '_class', 'mdrCdashigVersionClassesClassScenariosGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CdashigClassScenarios>({
            url: '/mdr/cdashig/{version}/classes/{class}/scenarios'.replace('{version}', encodeURI(version)).replace('{class}', encodeURI(_class)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDASHIG Class List
     */
    mdrCdashigVersionClassesGet({ version }: MdrCdashigVersionClassesGetRequest): Observable<CdashigProductClasses>
    mdrCdashigVersionClassesGet({ version }: MdrCdashigVersionClassesGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CdashigProductClasses>>
    mdrCdashigVersionClassesGet({ version }: MdrCdashigVersionClassesGetRequest, opts?: OperationOpts): Observable<CdashigProductClasses | AjaxResponse<CdashigProductClasses>> {
        throwIfNullOrUndefined(version, 'version', 'mdrCdashigVersionClassesGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CdashigProductClasses>({
            url: '/mdr/cdashig/{version}/classes'.replace('{version}', encodeURI(version)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDASHIG Domain Field
     */
    mdrCdashigVersionDomainsDomainFieldsFieldGet({ version, domain, field }: MdrCdashigVersionDomainsDomainFieldsFieldGetRequest): Observable<CdashigDomainField>
    mdrCdashigVersionDomainsDomainFieldsFieldGet({ version, domain, field }: MdrCdashigVersionDomainsDomainFieldsFieldGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CdashigDomainField>>
    mdrCdashigVersionDomainsDomainFieldsFieldGet({ version, domain, field }: MdrCdashigVersionDomainsDomainFieldsFieldGetRequest, opts?: OperationOpts): Observable<CdashigDomainField | AjaxResponse<CdashigDomainField>> {
        throwIfNullOrUndefined(version, 'version', 'mdrCdashigVersionDomainsDomainFieldsFieldGet');
        throwIfNullOrUndefined(domain, 'domain', 'mdrCdashigVersionDomainsDomainFieldsFieldGet');
        throwIfNullOrUndefined(field, 'field', 'mdrCdashigVersionDomainsDomainFieldsFieldGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CdashigDomainField>({
            url: '/mdr/cdashig/{version}/domains/{domain}/fields/{field}'.replace('{version}', encodeURI(version)).replace('{domain}', encodeURI(domain)).replace('{field}', encodeURI(field)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDASHIG Domain Field List
     */
    mdrCdashigVersionDomainsDomainFieldsGet({ version, domain }: MdrCdashigVersionDomainsDomainFieldsGetRequest): Observable<CdashigDomainFields>
    mdrCdashigVersionDomainsDomainFieldsGet({ version, domain }: MdrCdashigVersionDomainsDomainFieldsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CdashigDomainFields>>
    mdrCdashigVersionDomainsDomainFieldsGet({ version, domain }: MdrCdashigVersionDomainsDomainFieldsGetRequest, opts?: OperationOpts): Observable<CdashigDomainFields | AjaxResponse<CdashigDomainFields>> {
        throwIfNullOrUndefined(version, 'version', 'mdrCdashigVersionDomainsDomainFieldsGet');
        throwIfNullOrUndefined(domain, 'domain', 'mdrCdashigVersionDomainsDomainFieldsGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CdashigDomainFields>({
            url: '/mdr/cdashig/{version}/domains/{domain}/fields'.replace('{version}', encodeURI(version)).replace('{domain}', encodeURI(domain)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDASHIG Domain
     */
    mdrCdashigVersionDomainsDomainGet({ version, domain }: MdrCdashigVersionDomainsDomainGetRequest): Observable<CdashigDomain>
    mdrCdashigVersionDomainsDomainGet({ version, domain }: MdrCdashigVersionDomainsDomainGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CdashigDomain>>
    mdrCdashigVersionDomainsDomainGet({ version, domain }: MdrCdashigVersionDomainsDomainGetRequest, opts?: OperationOpts): Observable<CdashigDomain | AjaxResponse<CdashigDomain>> {
        throwIfNullOrUndefined(version, 'version', 'mdrCdashigVersionDomainsDomainGet');
        throwIfNullOrUndefined(domain, 'domain', 'mdrCdashigVersionDomainsDomainGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CdashigDomain>({
            url: '/mdr/cdashig/{version}/domains/{domain}'.replace('{version}', encodeURI(version)).replace('{domain}', encodeURI(domain)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDASHIG Domain List
     */
    mdrCdashigVersionDomainsGet({ version }: MdrCdashigVersionDomainsGetRequest): Observable<CdashigProductDomains>
    mdrCdashigVersionDomainsGet({ version }: MdrCdashigVersionDomainsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CdashigProductDomains>>
    mdrCdashigVersionDomainsGet({ version }: MdrCdashigVersionDomainsGetRequest, opts?: OperationOpts): Observable<CdashigProductDomains | AjaxResponse<CdashigProductDomains>> {
        throwIfNullOrUndefined(version, 'version', 'mdrCdashigVersionDomainsGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CdashigProductDomains>({
            url: '/mdr/cdashig/{version}/domains'.replace('{version}', encodeURI(version)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDASHIG Product
     */
    mdrCdashigVersionGet({ version }: MdrCdashigVersionGetRequest): Observable<CdashigProduct>
    mdrCdashigVersionGet({ version }: MdrCdashigVersionGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CdashigProduct>>
    mdrCdashigVersionGet({ version }: MdrCdashigVersionGetRequest, opts?: OperationOpts): Observable<CdashigProduct | AjaxResponse<CdashigProduct>> {
        throwIfNullOrUndefined(version, 'version', 'mdrCdashigVersionGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CdashigProduct>({
            url: '/mdr/cdashig/{version}'.replace('{version}', encodeURI(version)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDASHIG Scenario Field
     */
    mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet({ version, domain, scenario, field }: MdrCdashigVersionScenariosDomainScenarioFieldsFieldGetRequest): Observable<CdashigScenarioField>
    mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet({ version, domain, scenario, field }: MdrCdashigVersionScenariosDomainScenarioFieldsFieldGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CdashigScenarioField>>
    mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet({ version, domain, scenario, field }: MdrCdashigVersionScenariosDomainScenarioFieldsFieldGetRequest, opts?: OperationOpts): Observable<CdashigScenarioField | AjaxResponse<CdashigScenarioField>> {
        throwIfNullOrUndefined(version, 'version', 'mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet');
        throwIfNullOrUndefined(domain, 'domain', 'mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet');
        throwIfNullOrUndefined(scenario, 'scenario', 'mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet');
        throwIfNullOrUndefined(field, 'field', 'mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CdashigScenarioField>({
            url: '/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields/{field}'.replace('{version}', encodeURI(version)).replace('{domain}', encodeURI(domain)).replace('{scenario}', encodeURI(scenario)).replace('{field}', encodeURI(field)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDASHIG Scenario Field List
     */
    mdrCdashigVersionScenariosDomainScenarioFieldsGet({ version, domain, scenario }: MdrCdashigVersionScenariosDomainScenarioFieldsGetRequest): Observable<CdashigScenarioFields>
    mdrCdashigVersionScenariosDomainScenarioFieldsGet({ version, domain, scenario }: MdrCdashigVersionScenariosDomainScenarioFieldsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CdashigScenarioFields>>
    mdrCdashigVersionScenariosDomainScenarioFieldsGet({ version, domain, scenario }: MdrCdashigVersionScenariosDomainScenarioFieldsGetRequest, opts?: OperationOpts): Observable<CdashigScenarioFields | AjaxResponse<CdashigScenarioFields>> {
        throwIfNullOrUndefined(version, 'version', 'mdrCdashigVersionScenariosDomainScenarioFieldsGet');
        throwIfNullOrUndefined(domain, 'domain', 'mdrCdashigVersionScenariosDomainScenarioFieldsGet');
        throwIfNullOrUndefined(scenario, 'scenario', 'mdrCdashigVersionScenariosDomainScenarioFieldsGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CdashigScenarioFields>({
            url: '/mdr/cdashig/{version}/scenarios/{domain}.{scenario}/fields'.replace('{version}', encodeURI(version)).replace('{domain}', encodeURI(domain)).replace('{scenario}', encodeURI(scenario)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDASHIG Scenario
     */
    mdrCdashigVersionScenariosDomainScenarioGet({ version, domain, scenario }: MdrCdashigVersionScenariosDomainScenarioGetRequest): Observable<CdashigScenario>
    mdrCdashigVersionScenariosDomainScenarioGet({ version, domain, scenario }: MdrCdashigVersionScenariosDomainScenarioGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CdashigScenario>>
    mdrCdashigVersionScenariosDomainScenarioGet({ version, domain, scenario }: MdrCdashigVersionScenariosDomainScenarioGetRequest, opts?: OperationOpts): Observable<CdashigScenario | AjaxResponse<CdashigScenario>> {
        throwIfNullOrUndefined(version, 'version', 'mdrCdashigVersionScenariosDomainScenarioGet');
        throwIfNullOrUndefined(domain, 'domain', 'mdrCdashigVersionScenariosDomainScenarioGet');
        throwIfNullOrUndefined(scenario, 'scenario', 'mdrCdashigVersionScenariosDomainScenarioGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CdashigScenario>({
            url: '/mdr/cdashig/{version}/scenarios/{domain}.{scenario}'.replace('{version}', encodeURI(version)).replace('{domain}', encodeURI(domain)).replace('{scenario}', encodeURI(scenario)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDASHIG Scenario List
     */
    mdrCdashigVersionScenariosGet({ version }: MdrCdashigVersionScenariosGetRequest): Observable<CdashigProductScenarios>
    mdrCdashigVersionScenariosGet({ version }: MdrCdashigVersionScenariosGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CdashigProductScenarios>>
    mdrCdashigVersionScenariosGet({ version }: MdrCdashigVersionScenariosGetRequest, opts?: OperationOpts): Observable<CdashigProductScenarios | AjaxResponse<CdashigProductScenarios>> {
        throwIfNullOrUndefined(version, 'version', 'mdrCdashigVersionScenariosGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CdashigProductScenarios>({
            url: '/mdr/cdashig/{version}/scenarios'.replace('{version}', encodeURI(version)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get Root CDASHIG Domain Field
     */
    mdrRootCdashigDomainsDomainFieldsFieldGet({ domain, field }: MdrRootCdashigDomainsDomainFieldsFieldGetRequest): Observable<RootCdashigDomainField>
    mdrRootCdashigDomainsDomainFieldsFieldGet({ domain, field }: MdrRootCdashigDomainsDomainFieldsFieldGetRequest, opts?: OperationOpts): Observable<AjaxResponse<RootCdashigDomainField>>
    mdrRootCdashigDomainsDomainFieldsFieldGet({ domain, field }: MdrRootCdashigDomainsDomainFieldsFieldGetRequest, opts?: OperationOpts): Observable<RootCdashigDomainField | AjaxResponse<RootCdashigDomainField>> {
        throwIfNullOrUndefined(domain, 'domain', 'mdrRootCdashigDomainsDomainFieldsFieldGet');
        throwIfNullOrUndefined(field, 'field', 'mdrRootCdashigDomainsDomainFieldsFieldGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<RootCdashigDomainField>({
            url: '/mdr/root/cdashig/domains/{domain}/fields/{field}'.replace('{domain}', encodeURI(domain)).replace('{field}', encodeURI(field)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get Root CDASHIG Scenario Field
     */
    mdrRootCdashigScenariosDomainScenarioFieldsFieldGet({ domain, scenario, field }: MdrRootCdashigScenariosDomainScenarioFieldsFieldGetRequest): Observable<RootCdashigScenarioField>
    mdrRootCdashigScenariosDomainScenarioFieldsFieldGet({ domain, scenario, field }: MdrRootCdashigScenariosDomainScenarioFieldsFieldGetRequest, opts?: OperationOpts): Observable<AjaxResponse<RootCdashigScenarioField>>
    mdrRootCdashigScenariosDomainScenarioFieldsFieldGet({ domain, scenario, field }: MdrRootCdashigScenariosDomainScenarioFieldsFieldGetRequest, opts?: OperationOpts): Observable<RootCdashigScenarioField | AjaxResponse<RootCdashigScenarioField>> {
        throwIfNullOrUndefined(domain, 'domain', 'mdrRootCdashigScenariosDomainScenarioFieldsFieldGet');
        throwIfNullOrUndefined(scenario, 'scenario', 'mdrRootCdashigScenariosDomainScenarioFieldsFieldGet');
        throwIfNullOrUndefined(field, 'field', 'mdrRootCdashigScenariosDomainScenarioFieldsFieldGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<RootCdashigScenarioField>({
            url: '/mdr/root/cdashig/scenarios/{domain}.{scenario}/fields/{field}'.replace('{domain}', encodeURI(domain)).replace('{scenario}', encodeURI(scenario)).replace('{field}', encodeURI(field)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}

// tslint:disable
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    DefaultErrorResponse,
    ExportQrsItemsTable,
    ExportQrsWorkbook,
    QrsItem,
    QrsItems,
    QrsProduct,
    QrsResponsegroup,
    QrsResponsegroups,
    XmlQrsItem,
    XmlQrsItems,
    XmlQrsProduct,
    XmlQrsResponsegroup,
    XmlQrsResponsegroups,
} from '../models';

export interface MdrQrsMeasureVersionGetRequest {
    measure: string;
    version: string;
}

export interface MdrQrsMeasureVersionItemsGetRequest {
    measure: string;
    version: string;
}

export interface MdrQrsMeasureVersionItemsItemGetRequest {
    measure: string;
    version: string;
    item: string;
}

export interface MdrQrsMeasureVersionResponsegroupsGetRequest {
    measure: string;
    version: string;
}

export interface MdrQrsMeasureVersionResponsegroupsResponsegroupGetRequest {
    measure: string;
    version: string;
    responsegroup: string;
}

/**
 * no description
 */
export class MeasuresApi extends BaseAPI {

    /**
     * Get QRS Product
     */
    mdrQrsMeasureVersionGet({ measure, version }: MdrQrsMeasureVersionGetRequest): Observable<QrsProduct>
    mdrQrsMeasureVersionGet({ measure, version }: MdrQrsMeasureVersionGetRequest, opts?: OperationOpts): Observable<AjaxResponse<QrsProduct>>
    mdrQrsMeasureVersionGet({ measure, version }: MdrQrsMeasureVersionGetRequest, opts?: OperationOpts): Observable<QrsProduct | AjaxResponse<QrsProduct>> {
        throwIfNullOrUndefined(measure, 'measure', 'mdrQrsMeasureVersionGet');
        throwIfNullOrUndefined(version, 'version', 'mdrQrsMeasureVersionGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<QrsProduct>({
            url: '/mdr/qrs/{measure}/{version}'.replace('{measure}', encodeURI(measure)).replace('{version}', encodeURI(version)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get QRS Item List
     */
    mdrQrsMeasureVersionItemsGet({ measure, version }: MdrQrsMeasureVersionItemsGetRequest): Observable<QrsItems>
    mdrQrsMeasureVersionItemsGet({ measure, version }: MdrQrsMeasureVersionItemsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<QrsItems>>
    mdrQrsMeasureVersionItemsGet({ measure, version }: MdrQrsMeasureVersionItemsGetRequest, opts?: OperationOpts): Observable<QrsItems | AjaxResponse<QrsItems>> {
        throwIfNullOrUndefined(measure, 'measure', 'mdrQrsMeasureVersionItemsGet');
        throwIfNullOrUndefined(version, 'version', 'mdrQrsMeasureVersionItemsGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<QrsItems>({
            url: '/mdr/qrs/{measure}/{version}/items'.replace('{measure}', encodeURI(measure)).replace('{version}', encodeURI(version)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get QRS Item
     */
    mdrQrsMeasureVersionItemsItemGet({ measure, version, item }: MdrQrsMeasureVersionItemsItemGetRequest): Observable<QrsItem>
    mdrQrsMeasureVersionItemsItemGet({ measure, version, item }: MdrQrsMeasureVersionItemsItemGetRequest, opts?: OperationOpts): Observable<AjaxResponse<QrsItem>>
    mdrQrsMeasureVersionItemsItemGet({ measure, version, item }: MdrQrsMeasureVersionItemsItemGetRequest, opts?: OperationOpts): Observable<QrsItem | AjaxResponse<QrsItem>> {
        throwIfNullOrUndefined(measure, 'measure', 'mdrQrsMeasureVersionItemsItemGet');
        throwIfNullOrUndefined(version, 'version', 'mdrQrsMeasureVersionItemsItemGet');
        throwIfNullOrUndefined(item, 'item', 'mdrQrsMeasureVersionItemsItemGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<QrsItem>({
            url: '/mdr/qrs/{measure}/{version}/items/{item}'.replace('{measure}', encodeURI(measure)).replace('{version}', encodeURI(version)).replace('{item}', encodeURI(item)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get QRS Response Group List
     */
    mdrQrsMeasureVersionResponsegroupsGet({ measure, version }: MdrQrsMeasureVersionResponsegroupsGetRequest): Observable<QrsResponsegroups>
    mdrQrsMeasureVersionResponsegroupsGet({ measure, version }: MdrQrsMeasureVersionResponsegroupsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<QrsResponsegroups>>
    mdrQrsMeasureVersionResponsegroupsGet({ measure, version }: MdrQrsMeasureVersionResponsegroupsGetRequest, opts?: OperationOpts): Observable<QrsResponsegroups | AjaxResponse<QrsResponsegroups>> {
        throwIfNullOrUndefined(measure, 'measure', 'mdrQrsMeasureVersionResponsegroupsGet');
        throwIfNullOrUndefined(version, 'version', 'mdrQrsMeasureVersionResponsegroupsGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<QrsResponsegroups>({
            url: '/mdr/qrs/{measure}/{version}/responsegroups'.replace('{measure}', encodeURI(measure)).replace('{version}', encodeURI(version)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get QRS Response Group
     */
    mdrQrsMeasureVersionResponsegroupsResponsegroupGet({ measure, version, responsegroup }: MdrQrsMeasureVersionResponsegroupsResponsegroupGetRequest): Observable<QrsResponsegroup>
    mdrQrsMeasureVersionResponsegroupsResponsegroupGet({ measure, version, responsegroup }: MdrQrsMeasureVersionResponsegroupsResponsegroupGetRequest, opts?: OperationOpts): Observable<AjaxResponse<QrsResponsegroup>>
    mdrQrsMeasureVersionResponsegroupsResponsegroupGet({ measure, version, responsegroup }: MdrQrsMeasureVersionResponsegroupsResponsegroupGetRequest, opts?: OperationOpts): Observable<QrsResponsegroup | AjaxResponse<QrsResponsegroup>> {
        throwIfNullOrUndefined(measure, 'measure', 'mdrQrsMeasureVersionResponsegroupsResponsegroupGet');
        throwIfNullOrUndefined(version, 'version', 'mdrQrsMeasureVersionResponsegroupsResponsegroupGet');
        throwIfNullOrUndefined(responsegroup, 'responsegroup', 'mdrQrsMeasureVersionResponsegroupsResponsegroupGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<QrsResponsegroup>({
            url: '/mdr/qrs/{measure}/{version}/responsegroups/{responsegroup}'.replace('{measure}', encodeURI(measure)).replace('{version}', encodeURI(version)).replace('{responsegroup}', encodeURI(responsegroup)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}

// tslint:disable
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    CdashClass,
    CdashClassDomains,
    CdashClassField,
    CdashDomain,
    CdashDomainField,
    CdashDomainFields,
    CdashProduct,
    CdashProductClasses,
    CdashProductDomains,
    DefaultErrorResponse,
    ExportCdashTable,
    RootCdashClassField,
    RootCdashDomainField,
    XmlCdashClass,
    XmlCdashClassDomains,
    XmlCdashClassField,
    XmlCdashDomain,
    XmlCdashDomainField,
    XmlCdashDomainFields,
    XmlCdashProduct,
    XmlCdashProductClasses,
    XmlCdashProductDomains,
    XmlRootCdashClassField,
    XmlRootCdashDomainField,
} from '../models';

export interface MdrCdashVersionClassesClassDomainsGetRequest {
    version: string;
    _class: string;
}

export interface MdrCdashVersionClassesClassFieldsFieldGetRequest {
    version: string;
    _class: string;
    field: string;
}

export interface MdrCdashVersionClassesClassGetRequest {
    version: string;
    _class: string;
}

export interface MdrCdashVersionClassesGetRequest {
    version: string;
}

export interface MdrCdashVersionDomainsDomainFieldsFieldGetRequest {
    version: string;
    domain: string;
    field: string;
}

export interface MdrCdashVersionDomainsDomainFieldsGetRequest {
    version: string;
    domain: string;
}

export interface MdrCdashVersionDomainsDomainGetRequest {
    version: string;
    domain: string;
}

export interface MdrCdashVersionDomainsGetRequest {
    version: string;
}

export interface MdrCdashVersionGetRequest {
    version: string;
}

export interface MdrRootCdashClassesClassFieldsFieldGetRequest {
    _class: string;
    field: string;
}

export interface MdrRootCdashDomainsDomainFieldsFieldGetRequest {
    domain: string;
    field: string;
}

/**
 * no description
 */
export class ClinicalDataAcquisitionStandardsHarmonizationCDASHApi extends BaseAPI {

    /**
     * Get CDASH Class Domain List
     */
    mdrCdashVersionClassesClassDomainsGet({ version, _class }: MdrCdashVersionClassesClassDomainsGetRequest): Observable<CdashClassDomains>
    mdrCdashVersionClassesClassDomainsGet({ version, _class }: MdrCdashVersionClassesClassDomainsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CdashClassDomains>>
    mdrCdashVersionClassesClassDomainsGet({ version, _class }: MdrCdashVersionClassesClassDomainsGetRequest, opts?: OperationOpts): Observable<CdashClassDomains | AjaxResponse<CdashClassDomains>> {
        throwIfNullOrUndefined(version, 'version', 'mdrCdashVersionClassesClassDomainsGet');
        throwIfNullOrUndefined(_class, '_class', 'mdrCdashVersionClassesClassDomainsGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CdashClassDomains>({
            url: '/mdr/cdash/{version}/classes/{class}/domains'.replace('{version}', encodeURI(version)).replace('{class}', encodeURI(_class)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDASH Class Field
     */
    mdrCdashVersionClassesClassFieldsFieldGet({ version, _class, field }: MdrCdashVersionClassesClassFieldsFieldGetRequest): Observable<CdashClassField>
    mdrCdashVersionClassesClassFieldsFieldGet({ version, _class, field }: MdrCdashVersionClassesClassFieldsFieldGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CdashClassField>>
    mdrCdashVersionClassesClassFieldsFieldGet({ version, _class, field }: MdrCdashVersionClassesClassFieldsFieldGetRequest, opts?: OperationOpts): Observable<CdashClassField | AjaxResponse<CdashClassField>> {
        throwIfNullOrUndefined(version, 'version', 'mdrCdashVersionClassesClassFieldsFieldGet');
        throwIfNullOrUndefined(_class, '_class', 'mdrCdashVersionClassesClassFieldsFieldGet');
        throwIfNullOrUndefined(field, 'field', 'mdrCdashVersionClassesClassFieldsFieldGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CdashClassField>({
            url: '/mdr/cdash/{version}/classes/{class}/fields/{field}'.replace('{version}', encodeURI(version)).replace('{class}', encodeURI(_class)).replace('{field}', encodeURI(field)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDASH Class
     */
    mdrCdashVersionClassesClassGet({ version, _class }: MdrCdashVersionClassesClassGetRequest): Observable<CdashClass>
    mdrCdashVersionClassesClassGet({ version, _class }: MdrCdashVersionClassesClassGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CdashClass>>
    mdrCdashVersionClassesClassGet({ version, _class }: MdrCdashVersionClassesClassGetRequest, opts?: OperationOpts): Observable<CdashClass | AjaxResponse<CdashClass>> {
        throwIfNullOrUndefined(version, 'version', 'mdrCdashVersionClassesClassGet');
        throwIfNullOrUndefined(_class, '_class', 'mdrCdashVersionClassesClassGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CdashClass>({
            url: '/mdr/cdash/{version}/classes/{class}'.replace('{version}', encodeURI(version)).replace('{class}', encodeURI(_class)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDASH Class List
     */
    mdrCdashVersionClassesGet({ version }: MdrCdashVersionClassesGetRequest): Observable<CdashProductClasses>
    mdrCdashVersionClassesGet({ version }: MdrCdashVersionClassesGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CdashProductClasses>>
    mdrCdashVersionClassesGet({ version }: MdrCdashVersionClassesGetRequest, opts?: OperationOpts): Observable<CdashProductClasses | AjaxResponse<CdashProductClasses>> {
        throwIfNullOrUndefined(version, 'version', 'mdrCdashVersionClassesGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CdashProductClasses>({
            url: '/mdr/cdash/{version}/classes'.replace('{version}', encodeURI(version)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDASH Domain Field
     */
    mdrCdashVersionDomainsDomainFieldsFieldGet({ version, domain, field }: MdrCdashVersionDomainsDomainFieldsFieldGetRequest): Observable<CdashDomainField>
    mdrCdashVersionDomainsDomainFieldsFieldGet({ version, domain, field }: MdrCdashVersionDomainsDomainFieldsFieldGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CdashDomainField>>
    mdrCdashVersionDomainsDomainFieldsFieldGet({ version, domain, field }: MdrCdashVersionDomainsDomainFieldsFieldGetRequest, opts?: OperationOpts): Observable<CdashDomainField | AjaxResponse<CdashDomainField>> {
        throwIfNullOrUndefined(version, 'version', 'mdrCdashVersionDomainsDomainFieldsFieldGet');
        throwIfNullOrUndefined(domain, 'domain', 'mdrCdashVersionDomainsDomainFieldsFieldGet');
        throwIfNullOrUndefined(field, 'field', 'mdrCdashVersionDomainsDomainFieldsFieldGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CdashDomainField>({
            url: '/mdr/cdash/{version}/domains/{domain}/fields/{field}'.replace('{version}', encodeURI(version)).replace('{domain}', encodeURI(domain)).replace('{field}', encodeURI(field)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDASH Domain Field List
     */
    mdrCdashVersionDomainsDomainFieldsGet({ version, domain }: MdrCdashVersionDomainsDomainFieldsGetRequest): Observable<CdashDomainFields>
    mdrCdashVersionDomainsDomainFieldsGet({ version, domain }: MdrCdashVersionDomainsDomainFieldsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CdashDomainFields>>
    mdrCdashVersionDomainsDomainFieldsGet({ version, domain }: MdrCdashVersionDomainsDomainFieldsGetRequest, opts?: OperationOpts): Observable<CdashDomainFields | AjaxResponse<CdashDomainFields>> {
        throwIfNullOrUndefined(version, 'version', 'mdrCdashVersionDomainsDomainFieldsGet');
        throwIfNullOrUndefined(domain, 'domain', 'mdrCdashVersionDomainsDomainFieldsGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CdashDomainFields>({
            url: '/mdr/cdash/{version}/domains/{domain}/fields'.replace('{version}', encodeURI(version)).replace('{domain}', encodeURI(domain)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDASH Domain
     */
    mdrCdashVersionDomainsDomainGet({ version, domain }: MdrCdashVersionDomainsDomainGetRequest): Observable<CdashDomain>
    mdrCdashVersionDomainsDomainGet({ version, domain }: MdrCdashVersionDomainsDomainGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CdashDomain>>
    mdrCdashVersionDomainsDomainGet({ version, domain }: MdrCdashVersionDomainsDomainGetRequest, opts?: OperationOpts): Observable<CdashDomain | AjaxResponse<CdashDomain>> {
        throwIfNullOrUndefined(version, 'version', 'mdrCdashVersionDomainsDomainGet');
        throwIfNullOrUndefined(domain, 'domain', 'mdrCdashVersionDomainsDomainGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CdashDomain>({
            url: '/mdr/cdash/{version}/domains/{domain}'.replace('{version}', encodeURI(version)).replace('{domain}', encodeURI(domain)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDASH Domain List
     */
    mdrCdashVersionDomainsGet({ version }: MdrCdashVersionDomainsGetRequest): Observable<CdashProductDomains>
    mdrCdashVersionDomainsGet({ version }: MdrCdashVersionDomainsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CdashProductDomains>>
    mdrCdashVersionDomainsGet({ version }: MdrCdashVersionDomainsGetRequest, opts?: OperationOpts): Observable<CdashProductDomains | AjaxResponse<CdashProductDomains>> {
        throwIfNullOrUndefined(version, 'version', 'mdrCdashVersionDomainsGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CdashProductDomains>({
            url: '/mdr/cdash/{version}/domains'.replace('{version}', encodeURI(version)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDASH Product
     */
    mdrCdashVersionGet({ version }: MdrCdashVersionGetRequest): Observable<CdashProduct>
    mdrCdashVersionGet({ version }: MdrCdashVersionGetRequest, opts?: OperationOpts): Observable<AjaxResponse<CdashProduct>>
    mdrCdashVersionGet({ version }: MdrCdashVersionGetRequest, opts?: OperationOpts): Observable<CdashProduct | AjaxResponse<CdashProduct>> {
        throwIfNullOrUndefined(version, 'version', 'mdrCdashVersionGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<CdashProduct>({
            url: '/mdr/cdash/{version}'.replace('{version}', encodeURI(version)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get Root CDASH Class Field
     */
    mdrRootCdashClassesClassFieldsFieldGet({ _class, field }: MdrRootCdashClassesClassFieldsFieldGetRequest): Observable<RootCdashClassField>
    mdrRootCdashClassesClassFieldsFieldGet({ _class, field }: MdrRootCdashClassesClassFieldsFieldGetRequest, opts?: OperationOpts): Observable<AjaxResponse<RootCdashClassField>>
    mdrRootCdashClassesClassFieldsFieldGet({ _class, field }: MdrRootCdashClassesClassFieldsFieldGetRequest, opts?: OperationOpts): Observable<RootCdashClassField | AjaxResponse<RootCdashClassField>> {
        throwIfNullOrUndefined(_class, '_class', 'mdrRootCdashClassesClassFieldsFieldGet');
        throwIfNullOrUndefined(field, 'field', 'mdrRootCdashClassesClassFieldsFieldGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<RootCdashClassField>({
            url: '/mdr/root/cdash/classes/{class}/fields/{field}'.replace('{class}', encodeURI(_class)).replace('{field}', encodeURI(field)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get Root CDASH Domain Field
     */
    mdrRootCdashDomainsDomainFieldsFieldGet({ domain, field }: MdrRootCdashDomainsDomainFieldsFieldGetRequest): Observable<RootCdashDomainField>
    mdrRootCdashDomainsDomainFieldsFieldGet({ domain, field }: MdrRootCdashDomainsDomainFieldsFieldGetRequest, opts?: OperationOpts): Observable<AjaxResponse<RootCdashDomainField>>
    mdrRootCdashDomainsDomainFieldsFieldGet({ domain, field }: MdrRootCdashDomainsDomainFieldsFieldGetRequest, opts?: OperationOpts): Observable<RootCdashDomainField | AjaxResponse<RootCdashDomainField>> {
        throwIfNullOrUndefined(domain, 'domain', 'mdrRootCdashDomainsDomainFieldsFieldGet');
        throwIfNullOrUndefined(field, 'field', 'mdrRootCdashDomainsDomainFieldsFieldGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<RootCdashDomainField>({
            url: '/mdr/root/cdash/domains/{domain}/fields/{field}'.replace('{domain}', encodeURI(domain)).replace('{field}', encodeURI(field)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}

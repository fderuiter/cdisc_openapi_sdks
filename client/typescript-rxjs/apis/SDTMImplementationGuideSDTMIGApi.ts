// tslint:disable
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    DefaultErrorResponse,
    ExportSdtmigDatasetsTable,
    ExportSdtmigVariablesTable,
    ExportSdtmigWorkbook,
    RootSdtmigDatasetVariable,
    SdtmigClass,
    SdtmigClassDatasets,
    SdtmigClasses,
    SdtmigDataset,
    SdtmigDatasetVariable,
    SdtmigDatasetVariables,
    SdtmigDatasets,
    SdtmigProduct,
    XmlRootSdtmigDatasetVariable,
    XmlSdtmigClass,
    XmlSdtmigClassDatasets,
    XmlSdtmigClasses,
    XmlSdtmigDataset,
    XmlSdtmigDatasetVariable,
    XmlSdtmigDatasetVariables,
    XmlSdtmigDatasets,
    XmlSdtmigProduct,
} from '../models';

export interface MdrRootSdtmigDatasetsDatasetVariablesVarGetRequest {
    dataset: string;
    _var: string;
}

export interface MdrSdtmigVersionClassesClassDatasetsGetRequest {
    version: string;
    _class: string;
}

export interface MdrSdtmigVersionClassesClassGetRequest {
    version: string;
    _class: string;
}

export interface MdrSdtmigVersionClassesGetRequest {
    version: string;
}

export interface MdrSdtmigVersionDatasetsDatasetGetRequest {
    version: string;
    dataset: string;
}

export interface MdrSdtmigVersionDatasetsDatasetVariablesGetRequest {
    version: string;
    dataset: string;
}

export interface MdrSdtmigVersionDatasetsDatasetVariablesVarGetRequest {
    version: string;
    dataset: string;
    _var: string;
}

export interface MdrSdtmigVersionDatasetsGetRequest {
    version: string;
}

export interface MdrSdtmigVersionGetRequest {
    version: string;
}

/**
 * no description
 */
export class SDTMImplementationGuideSDTMIGApi extends BaseAPI {

    /**
     * Get Root SDTMIG Dataset Variable
     */
    mdrRootSdtmigDatasetsDatasetVariablesVarGet({ dataset, _var }: MdrRootSdtmigDatasetsDatasetVariablesVarGetRequest): Observable<RootSdtmigDatasetVariable>
    mdrRootSdtmigDatasetsDatasetVariablesVarGet({ dataset, _var }: MdrRootSdtmigDatasetsDatasetVariablesVarGetRequest, opts?: OperationOpts): Observable<AjaxResponse<RootSdtmigDatasetVariable>>
    mdrRootSdtmigDatasetsDatasetVariablesVarGet({ dataset, _var }: MdrRootSdtmigDatasetsDatasetVariablesVarGetRequest, opts?: OperationOpts): Observable<RootSdtmigDatasetVariable | AjaxResponse<RootSdtmigDatasetVariable>> {
        throwIfNullOrUndefined(dataset, 'dataset', 'mdrRootSdtmigDatasetsDatasetVariablesVarGet');
        throwIfNullOrUndefined(_var, '_var', 'mdrRootSdtmigDatasetsDatasetVariablesVarGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<RootSdtmigDatasetVariable>({
            url: '/mdr/root/sdtmig/datasets/{dataset}/variables/{var}'.replace('{dataset}', encodeURI(dataset)).replace('{var}', encodeURI(_var)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get SDTMIG Class Dataset List
     */
    mdrSdtmigVersionClassesClassDatasetsGet({ version, _class }: MdrSdtmigVersionClassesClassDatasetsGetRequest): Observable<SdtmigClassDatasets>
    mdrSdtmigVersionClassesClassDatasetsGet({ version, _class }: MdrSdtmigVersionClassesClassDatasetsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<SdtmigClassDatasets>>
    mdrSdtmigVersionClassesClassDatasetsGet({ version, _class }: MdrSdtmigVersionClassesClassDatasetsGetRequest, opts?: OperationOpts): Observable<SdtmigClassDatasets | AjaxResponse<SdtmigClassDatasets>> {
        throwIfNullOrUndefined(version, 'version', 'mdrSdtmigVersionClassesClassDatasetsGet');
        throwIfNullOrUndefined(_class, '_class', 'mdrSdtmigVersionClassesClassDatasetsGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<SdtmigClassDatasets>({
            url: '/mdr/sdtmig/{version}/classes/{class}/datasets'.replace('{version}', encodeURI(version)).replace('{class}', encodeURI(_class)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get SDTMIG Class
     */
    mdrSdtmigVersionClassesClassGet({ version, _class }: MdrSdtmigVersionClassesClassGetRequest): Observable<SdtmigClass>
    mdrSdtmigVersionClassesClassGet({ version, _class }: MdrSdtmigVersionClassesClassGetRequest, opts?: OperationOpts): Observable<AjaxResponse<SdtmigClass>>
    mdrSdtmigVersionClassesClassGet({ version, _class }: MdrSdtmigVersionClassesClassGetRequest, opts?: OperationOpts): Observable<SdtmigClass | AjaxResponse<SdtmigClass>> {
        throwIfNullOrUndefined(version, 'version', 'mdrSdtmigVersionClassesClassGet');
        throwIfNullOrUndefined(_class, '_class', 'mdrSdtmigVersionClassesClassGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<SdtmigClass>({
            url: '/mdr/sdtmig/{version}/classes/{class}'.replace('{version}', encodeURI(version)).replace('{class}', encodeURI(_class)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get SDTMIG Class List
     */
    mdrSdtmigVersionClassesGet({ version }: MdrSdtmigVersionClassesGetRequest): Observable<SdtmigClasses>
    mdrSdtmigVersionClassesGet({ version }: MdrSdtmigVersionClassesGetRequest, opts?: OperationOpts): Observable<AjaxResponse<SdtmigClasses>>
    mdrSdtmigVersionClassesGet({ version }: MdrSdtmigVersionClassesGetRequest, opts?: OperationOpts): Observable<SdtmigClasses | AjaxResponse<SdtmigClasses>> {
        throwIfNullOrUndefined(version, 'version', 'mdrSdtmigVersionClassesGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<SdtmigClasses>({
            url: '/mdr/sdtmig/{version}/classes'.replace('{version}', encodeURI(version)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get SDTMIG Dataset
     */
    mdrSdtmigVersionDatasetsDatasetGet({ version, dataset }: MdrSdtmigVersionDatasetsDatasetGetRequest): Observable<SdtmigDataset>
    mdrSdtmigVersionDatasetsDatasetGet({ version, dataset }: MdrSdtmigVersionDatasetsDatasetGetRequest, opts?: OperationOpts): Observable<AjaxResponse<SdtmigDataset>>
    mdrSdtmigVersionDatasetsDatasetGet({ version, dataset }: MdrSdtmigVersionDatasetsDatasetGetRequest, opts?: OperationOpts): Observable<SdtmigDataset | AjaxResponse<SdtmigDataset>> {
        throwIfNullOrUndefined(version, 'version', 'mdrSdtmigVersionDatasetsDatasetGet');
        throwIfNullOrUndefined(dataset, 'dataset', 'mdrSdtmigVersionDatasetsDatasetGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<SdtmigDataset>({
            url: '/mdr/sdtmig/{version}/datasets/{dataset}'.replace('{version}', encodeURI(version)).replace('{dataset}', encodeURI(dataset)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get SDTMIG Dataset Variable List
     */
    mdrSdtmigVersionDatasetsDatasetVariablesGet({ version, dataset }: MdrSdtmigVersionDatasetsDatasetVariablesGetRequest): Observable<SdtmigDatasetVariables>
    mdrSdtmigVersionDatasetsDatasetVariablesGet({ version, dataset }: MdrSdtmigVersionDatasetsDatasetVariablesGetRequest, opts?: OperationOpts): Observable<AjaxResponse<SdtmigDatasetVariables>>
    mdrSdtmigVersionDatasetsDatasetVariablesGet({ version, dataset }: MdrSdtmigVersionDatasetsDatasetVariablesGetRequest, opts?: OperationOpts): Observable<SdtmigDatasetVariables | AjaxResponse<SdtmigDatasetVariables>> {
        throwIfNullOrUndefined(version, 'version', 'mdrSdtmigVersionDatasetsDatasetVariablesGet');
        throwIfNullOrUndefined(dataset, 'dataset', 'mdrSdtmigVersionDatasetsDatasetVariablesGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<SdtmigDatasetVariables>({
            url: '/mdr/sdtmig/{version}/datasets/{dataset}/variables'.replace('{version}', encodeURI(version)).replace('{dataset}', encodeURI(dataset)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get SDTMIG Dataset Variable
     */
    mdrSdtmigVersionDatasetsDatasetVariablesVarGet({ version, dataset, _var }: MdrSdtmigVersionDatasetsDatasetVariablesVarGetRequest): Observable<SdtmigDatasetVariable>
    mdrSdtmigVersionDatasetsDatasetVariablesVarGet({ version, dataset, _var }: MdrSdtmigVersionDatasetsDatasetVariablesVarGetRequest, opts?: OperationOpts): Observable<AjaxResponse<SdtmigDatasetVariable>>
    mdrSdtmigVersionDatasetsDatasetVariablesVarGet({ version, dataset, _var }: MdrSdtmigVersionDatasetsDatasetVariablesVarGetRequest, opts?: OperationOpts): Observable<SdtmigDatasetVariable | AjaxResponse<SdtmigDatasetVariable>> {
        throwIfNullOrUndefined(version, 'version', 'mdrSdtmigVersionDatasetsDatasetVariablesVarGet');
        throwIfNullOrUndefined(dataset, 'dataset', 'mdrSdtmigVersionDatasetsDatasetVariablesVarGet');
        throwIfNullOrUndefined(_var, '_var', 'mdrSdtmigVersionDatasetsDatasetVariablesVarGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<SdtmigDatasetVariable>({
            url: '/mdr/sdtmig/{version}/datasets/{dataset}/variables/{var}'.replace('{version}', encodeURI(version)).replace('{dataset}', encodeURI(dataset)).replace('{var}', encodeURI(_var)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get SDTMIG Dataset List
     */
    mdrSdtmigVersionDatasetsGet({ version }: MdrSdtmigVersionDatasetsGetRequest): Observable<SdtmigDatasets>
    mdrSdtmigVersionDatasetsGet({ version }: MdrSdtmigVersionDatasetsGetRequest, opts?: OperationOpts): Observable<AjaxResponse<SdtmigDatasets>>
    mdrSdtmigVersionDatasetsGet({ version }: MdrSdtmigVersionDatasetsGetRequest, opts?: OperationOpts): Observable<SdtmigDatasets | AjaxResponse<SdtmigDatasets>> {
        throwIfNullOrUndefined(version, 'version', 'mdrSdtmigVersionDatasetsGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<SdtmigDatasets>({
            url: '/mdr/sdtmig/{version}/datasets'.replace('{version}', encodeURI(version)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get SDTMIG product
     */
    mdrSdtmigVersionGet({ version }: MdrSdtmigVersionGetRequest): Observable<SdtmigProduct>
    mdrSdtmigVersionGet({ version }: MdrSdtmigVersionGetRequest, opts?: OperationOpts): Observable<AjaxResponse<SdtmigProduct>>
    mdrSdtmigVersionGet({ version }: MdrSdtmigVersionGetRequest, opts?: OperationOpts): Observable<SdtmigProduct | AjaxResponse<SdtmigProduct>> {
        throwIfNullOrUndefined(version, 'version', 'mdrSdtmigVersionGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<SdtmigProduct>({
            url: '/mdr/sdtmig/{version}'.replace('{version}', encodeURI(version)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}

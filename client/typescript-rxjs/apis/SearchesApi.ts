// tslint:disable
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    DefaultErrorResponse,
    DefaultSearchResponse,
    DefaultSearchScopes,
    MdrSearchScopesGet200Response,
    ScopeValues,
} from '../models';

export interface MdrSearchGetRequest {
    q: string;
    highlight?: string;
    start?: number;
    pageSize?: number;
    _class?: string;
    codelist?: string;
    conceptId?: string;
    core?: string;
    dataStructure?: string;
    datasetStructure?: string;
    definition?: string;
    description?: string;
    domain?: string;
    effectiveDate?: string;
    extensible?: string;
    href?: string;
    label?: string;
    measureType?: string;
    name?: string;
    preferredTerm?: string;
    product?: string;
    productGroup?: string;
    registrationStatus?: string;
    roleDescription?: string;
    sdtmTarget?: string;
    simpleDatatype?: string;
    submissionValue?: string;
    synonyms?: string;
    type?: string;
    uiHref?: string;
    valueDomain?: string;
    variableSet?: string;
    version?: string;
}

export interface MdrSearchScopesScopeGetRequest {
    scope: DefaultSearchScopes;
}

/**
 * no description
 */
export class SearchesApi extends BaseAPI {

    /**
     * Get Search Results Across CDISC Library
     */
    mdrSearchGet({ q, highlight, start, pageSize, _class, codelist, conceptId, core, dataStructure, datasetStructure, definition, description, domain, effectiveDate, extensible, href, label, measureType, name, preferredTerm, product, productGroup, registrationStatus, roleDescription, sdtmTarget, simpleDatatype, submissionValue, synonyms, type, uiHref, valueDomain, variableSet, version }: MdrSearchGetRequest): Observable<DefaultSearchResponse>
    mdrSearchGet({ q, highlight, start, pageSize, _class, codelist, conceptId, core, dataStructure, datasetStructure, definition, description, domain, effectiveDate, extensible, href, label, measureType, name, preferredTerm, product, productGroup, registrationStatus, roleDescription, sdtmTarget, simpleDatatype, submissionValue, synonyms, type, uiHref, valueDomain, variableSet, version }: MdrSearchGetRequest, opts?: OperationOpts): Observable<AjaxResponse<DefaultSearchResponse>>
    mdrSearchGet({ q, highlight, start, pageSize, _class, codelist, conceptId, core, dataStructure, datasetStructure, definition, description, domain, effectiveDate, extensible, href, label, measureType, name, preferredTerm, product, productGroup, registrationStatus, roleDescription, sdtmTarget, simpleDatatype, submissionValue, synonyms, type, uiHref, valueDomain, variableSet, version }: MdrSearchGetRequest, opts?: OperationOpts): Observable<DefaultSearchResponse | AjaxResponse<DefaultSearchResponse>> {
        throwIfNullOrUndefined(q, 'q', 'mdrSearchGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'q': q,
        };

        if (highlight != null) { query['highlight'] = highlight; }
        if (start != null) { query['start'] = start; }
        if (pageSize != null) { query['pageSize'] = pageSize; }
        if (_class != null) { query['class'] = _class; }
        if (codelist != null) { query['codelist'] = codelist; }
        if (conceptId != null) { query['conceptId'] = conceptId; }
        if (core != null) { query['core'] = core; }
        if (dataStructure != null) { query['dataStructure'] = dataStructure; }
        if (datasetStructure != null) { query['datasetStructure'] = datasetStructure; }
        if (definition != null) { query['definition'] = definition; }
        if (description != null) { query['description'] = description; }
        if (domain != null) { query['domain'] = domain; }
        if (effectiveDate != null) { query['effectiveDate'] = effectiveDate; }
        if (extensible != null) { query['extensible'] = extensible; }
        if (href != null) { query['href'] = href; }
        if (label != null) { query['label'] = label; }
        if (measureType != null) { query['measureType'] = measureType; }
        if (name != null) { query['name'] = name; }
        if (preferredTerm != null) { query['preferredTerm'] = preferredTerm; }
        if (product != null) { query['product'] = product; }
        if (productGroup != null) { query['productGroup'] = productGroup; }
        if (registrationStatus != null) { query['registrationStatus'] = registrationStatus; }
        if (roleDescription != null) { query['roleDescription'] = roleDescription; }
        if (sdtmTarget != null) { query['sdtmTarget'] = sdtmTarget; }
        if (simpleDatatype != null) { query['simpleDatatype'] = simpleDatatype; }
        if (submissionValue != null) { query['submissionValue'] = submissionValue; }
        if (synonyms != null) { query['synonyms'] = synonyms; }
        if (type != null) { query['type'] = type; }
        if (uiHref != null) { query['uiHref'] = uiHref; }
        if (valueDomain != null) { query['valueDomain'] = valueDomain; }
        if (variableSet != null) { query['variableSet'] = variableSet; }
        if (version != null) { query['version'] = version; }

        return this.request<DefaultSearchResponse>({
            url: '/mdr/search',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get Search Results Across CDISC Library
     */
    mdrSearchScopesGet(): Observable<MdrSearchScopesGet200Response>
    mdrSearchScopesGet(opts?: OperationOpts): Observable<AjaxResponse<MdrSearchScopesGet200Response>>
    mdrSearchScopesGet(opts?: OperationOpts): Observable<MdrSearchScopesGet200Response | AjaxResponse<MdrSearchScopesGet200Response>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<MdrSearchScopesGet200Response>({
            url: '/mdr/search/scopes',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get Search Results Limited to Scope
     */
    mdrSearchScopesScopeGet({ scope }: MdrSearchScopesScopeGetRequest): Observable<ScopeValues>
    mdrSearchScopesScopeGet({ scope }: MdrSearchScopesScopeGetRequest, opts?: OperationOpts): Observable<AjaxResponse<ScopeValues>>
    mdrSearchScopesScopeGet({ scope }: MdrSearchScopesScopeGetRequest, opts?: OperationOpts): Observable<ScopeValues | AjaxResponse<ScopeValues>> {
        throwIfNullOrUndefined(scope, 'scope', 'mdrSearchScopesScopeGet');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<ScopeValues>({
            url: '/mdr/search/scopes/{scope}'.replace('{scope}', encodeURI(scope)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}

// tslint:disable
/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    About,
    DefaultErrorResponse,
    Lastupdated,
    ProductgroupDataAnalysis,
    ProductgroupDataCollection,
    ProductgroupDataTabulation,
    ProductgroupQrs,
    ProductgroupTerminology,
    Products,
    XmlAbout,
    XmlLastupdated,
    XmlProductgroupDataAnalysis,
    XmlProductgroupDataCollection,
    XmlProductgroupDataTabulation,
    XmlProductgroupTerminology,
    XmlProducts,
} from '../models';

/**
 * no description
 */
export class DefaultApi extends BaseAPI {

    /**
     * Get Information About CDISC Library
     */
    mdrAboutGet(): Observable<About>
    mdrAboutGet(opts?: OperationOpts): Observable<AjaxResponse<About>>
    mdrAboutGet(opts?: OperationOpts): Observable<About | AjaxResponse<About>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<About>({
            url: '/mdr/about',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDISC Library Last Updated
     */
    mdrLastupdatedGet(): Observable<Lastupdated>
    mdrLastupdatedGet(opts?: OperationOpts): Observable<AjaxResponse<Lastupdated>>
    mdrLastupdatedGet(opts?: OperationOpts): Observable<Lastupdated | AjaxResponse<Lastupdated>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Lastupdated>({
            url: '/mdr/lastupdated',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDISC Library Product Group Data Analysis
     */
    mdrProductsDataAnalysisGet(): Observable<ProductgroupDataAnalysis>
    mdrProductsDataAnalysisGet(opts?: OperationOpts): Observable<AjaxResponse<ProductgroupDataAnalysis>>
    mdrProductsDataAnalysisGet(opts?: OperationOpts): Observable<ProductgroupDataAnalysis | AjaxResponse<ProductgroupDataAnalysis>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<ProductgroupDataAnalysis>({
            url: '/mdr/products/DataAnalysis',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDISC Library Product Group Data Collection
     */
    mdrProductsDataCollectionGet(): Observable<ProductgroupDataCollection>
    mdrProductsDataCollectionGet(opts?: OperationOpts): Observable<AjaxResponse<ProductgroupDataCollection>>
    mdrProductsDataCollectionGet(opts?: OperationOpts): Observable<ProductgroupDataCollection | AjaxResponse<ProductgroupDataCollection>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<ProductgroupDataCollection>({
            url: '/mdr/products/DataCollection',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDISC Library Product Group Data Tabulation
     */
    mdrProductsDataTabulationGet(): Observable<ProductgroupDataTabulation>
    mdrProductsDataTabulationGet(opts?: OperationOpts): Observable<AjaxResponse<ProductgroupDataTabulation>>
    mdrProductsDataTabulationGet(opts?: OperationOpts): Observable<ProductgroupDataTabulation | AjaxResponse<ProductgroupDataTabulation>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<ProductgroupDataTabulation>({
            url: '/mdr/products/DataTabulation',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDISC Library Products
     */
    mdrProductsGet(): Observable<Products>
    mdrProductsGet(opts?: OperationOpts): Observable<AjaxResponse<Products>>
    mdrProductsGet(opts?: OperationOpts): Observable<Products | AjaxResponse<Products>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Products>({
            url: '/mdr/products',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDISC Library Product Group QRS
     */
    mdrProductsMeasuresGet(): Observable<ProductgroupQrs>
    mdrProductsMeasuresGet(opts?: OperationOpts): Observable<AjaxResponse<ProductgroupQrs>>
    mdrProductsMeasuresGet(opts?: OperationOpts): Observable<ProductgroupQrs | AjaxResponse<ProductgroupQrs>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<ProductgroupQrs>({
            url: '/mdr/products/Measures',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get CDISC Library Product Group Terminology
     */
    mdrProductsTerminologyGet(): Observable<ProductgroupTerminology>
    mdrProductsTerminologyGet(opts?: OperationOpts): Observable<AjaxResponse<ProductgroupTerminology>>
    mdrProductsTerminologyGet(opts?: OperationOpts): Observable<ProductgroupTerminology | AjaxResponse<ProductgroupTerminology>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<ProductgroupTerminology>({
            url: '/mdr/products/Terminology',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

}

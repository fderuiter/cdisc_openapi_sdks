/**
 * CDISC Library API
 *
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { CtCodelist } from '../model/ctCodelist';
// @ts-ignore
import { CtCodelistTerms } from '../model/ctCodelistTerms';
// @ts-ignore
import { CtPackage } from '../model/ctPackage';
// @ts-ignore
import { CtPackageCodelists } from '../model/ctPackageCodelists';
// @ts-ignore
import { CtPackages } from '../model/ctPackages';
// @ts-ignore
import { CtTerm } from '../model/ctTerm';
// @ts-ignore
import { DefaultErrorResponse } from '../model/defaultErrorResponse';
// @ts-ignore
import { ExportCtTable } from '../model/exportCtTable';
// @ts-ignore
import { RootCtCodelist } from '../model/rootCtCodelist';
// @ts-ignore
import { RootCtTerm } from '../model/rootCtTerm';
// @ts-ignore
import { XmlCtCodelist } from '../model/xmlCtCodelist';
// @ts-ignore
import { XmlCtCodelistTerms } from '../model/xmlCtCodelistTerms';
// @ts-ignore
import { XmlCtPackage } from '../model/xmlCtPackage';
// @ts-ignore
import { XmlCtPackageCodelists } from '../model/xmlCtPackageCodelists';
// @ts-ignore
import { XmlCtPackages } from '../model/xmlCtPackages';
// @ts-ignore
import { XmlCtTerm } from '../model/xmlCtTerm';
// @ts-ignore
import { XmlRootCtCodelist } from '../model/xmlRootCtCodelist';
// @ts-ignore
import { XmlRootCtTerm } from '../model/xmlRootCtTerm';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class ControlledTerminologyCTService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Get CDISC Library CT Package List
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrCtPackagesGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<CtPackages>;
    public mdrCtPackagesGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CtPackages>>;
    public mdrCtPackagesGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CtPackages>>;
    public mdrCtPackagesGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/ct/packages`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<CtPackages>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get CDISC Library CT Package Codelist
     * @param _package CT Package Identifier
     * @param codelist CT Codelist Identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrCtPackagesPackageCodelistsCodelistGet(_package: string, codelist: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<CtCodelist>;
    public mdrCtPackagesPackageCodelistsCodelistGet(_package: string, codelist: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CtCodelist>>;
    public mdrCtPackagesPackageCodelistsCodelistGet(_package: string, codelist: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CtCodelist>>;
    public mdrCtPackagesPackageCodelistsCodelistGet(_package: string, codelist: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (_package === null || _package === undefined) {
            throw new Error('Required parameter _package was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistGet.');
        }
        if (codelist === null || codelist === undefined) {
            throw new Error('Required parameter codelist was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/ct/packages/${this.configuration.encodeParam({name: "_package", value: _package, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/codelists/${this.configuration.encodeParam({name: "codelist", value: codelist, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<CtCodelist>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get CDISC Library CT Package Codelist Term List
     * @param _package CT Package Identifier
     * @param codelist CT Codelist Identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrCtPackagesPackageCodelistsCodelistTermsGet(_package: string, codelist: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<CtCodelistTerms>;
    public mdrCtPackagesPackageCodelistsCodelistTermsGet(_package: string, codelist: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CtCodelistTerms>>;
    public mdrCtPackagesPackageCodelistsCodelistTermsGet(_package: string, codelist: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CtCodelistTerms>>;
    public mdrCtPackagesPackageCodelistsCodelistTermsGet(_package: string, codelist: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (_package === null || _package === undefined) {
            throw new Error('Required parameter _package was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistTermsGet.');
        }
        if (codelist === null || codelist === undefined) {
            throw new Error('Required parameter codelist was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistTermsGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/ct/packages/${this.configuration.encodeParam({name: "_package", value: _package, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/codelists/${this.configuration.encodeParam({name: "codelist", value: codelist, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/terms`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<CtCodelistTerms>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get CDISC Library CT Package Codelist Term
     * @param _package CT Package Product Identifier
     * @param codelist CT Codelist Identifier
     * @param term CT Codelist Term Identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrCtPackagesPackageCodelistsCodelistTermsTermGet(_package: string, codelist: string, term: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<CtTerm>;
    public mdrCtPackagesPackageCodelistsCodelistTermsTermGet(_package: string, codelist: string, term: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CtTerm>>;
    public mdrCtPackagesPackageCodelistsCodelistTermsTermGet(_package: string, codelist: string, term: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CtTerm>>;
    public mdrCtPackagesPackageCodelistsCodelistTermsTermGet(_package: string, codelist: string, term: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (_package === null || _package === undefined) {
            throw new Error('Required parameter _package was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet.');
        }
        if (codelist === null || codelist === undefined) {
            throw new Error('Required parameter codelist was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet.');
        }
        if (term === null || term === undefined) {
            throw new Error('Required parameter term was null or undefined when calling mdrCtPackagesPackageCodelistsCodelistTermsTermGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/ct/packages/${this.configuration.encodeParam({name: "_package", value: _package, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/codelists/${this.configuration.encodeParam({name: "codelist", value: codelist, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/terms/${this.configuration.encodeParam({name: "term", value: term, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<CtTerm>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get CDISC Library CT Package Codelist List
     * @param _package CT Package Identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrCtPackagesPackageCodelistsGet(_package: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<CtPackageCodelists>;
    public mdrCtPackagesPackageCodelistsGet(_package: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CtPackageCodelists>>;
    public mdrCtPackagesPackageCodelistsGet(_package: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CtPackageCodelists>>;
    public mdrCtPackagesPackageCodelistsGet(_package: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (_package === null || _package === undefined) {
            throw new Error('Required parameter _package was null or undefined when calling mdrCtPackagesPackageCodelistsGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/ct/packages/${this.configuration.encodeParam({name: "_package", value: _package, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/codelists`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<CtPackageCodelists>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get CDISC Library CT Package
     * @param product CT Package Product Identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrCtPackagesProductGet(product: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/csv' | 'application/vnd.ms-excel' | 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<CtPackage>;
    public mdrCtPackagesProductGet(product: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/csv' | 'application/vnd.ms-excel' | 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CtPackage>>;
    public mdrCtPackagesProductGet(product: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/csv' | 'application/vnd.ms-excel' | 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CtPackage>>;
    public mdrCtPackagesProductGet(product: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/csv' | 'application/vnd.ms-excel' | 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (product === null || product === undefined) {
            throw new Error('Required parameter product was null or undefined when calling mdrCtPackagesProductGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml',
            'text/csv',
            'application/vnd.ms-excel',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/ct/packages/${this.configuration.encodeParam({name: "product", value: product, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<CtPackage>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get CDISC Library Root CT Codelist
     * @param productGroup CT Product Group Identifier
     * @param codelist CT Codelist Identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrRootCtProductGroupCodelistsCodelistGet(productGroup: string, codelist: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<RootCtCodelist>;
    public mdrRootCtProductGroupCodelistsCodelistGet(productGroup: string, codelist: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<RootCtCodelist>>;
    public mdrRootCtProductGroupCodelistsCodelistGet(productGroup: string, codelist: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<RootCtCodelist>>;
    public mdrRootCtProductGroupCodelistsCodelistGet(productGroup: string, codelist: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (productGroup === null || productGroup === undefined) {
            throw new Error('Required parameter productGroup was null or undefined when calling mdrRootCtProductGroupCodelistsCodelistGet.');
        }
        if (codelist === null || codelist === undefined) {
            throw new Error('Required parameter codelist was null or undefined when calling mdrRootCtProductGroupCodelistsCodelistGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/root/ct/${this.configuration.encodeParam({name: "productGroup", value: productGroup, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/codelists/${this.configuration.encodeParam({name: "codelist", value: codelist, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<RootCtCodelist>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get CDISC Library Root CT Term
     * @param productGroup CT Product Group Identifier
     * @param codelist CT Codelist Identifier
     * @param term CT Codelist Term Identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrRootCtProductGroupCodelistsCodelistTermsTermGet(productGroup: string, codelist: string, term: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<RootCtTerm>;
    public mdrRootCtProductGroupCodelistsCodelistTermsTermGet(productGroup: string, codelist: string, term: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<RootCtTerm>>;
    public mdrRootCtProductGroupCodelistsCodelistTermsTermGet(productGroup: string, codelist: string, term: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<RootCtTerm>>;
    public mdrRootCtProductGroupCodelistsCodelistTermsTermGet(productGroup: string, codelist: string, term: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (productGroup === null || productGroup === undefined) {
            throw new Error('Required parameter productGroup was null or undefined when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet.');
        }
        if (codelist === null || codelist === undefined) {
            throw new Error('Required parameter codelist was null or undefined when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet.');
        }
        if (term === null || term === undefined) {
            throw new Error('Required parameter term was null or undefined when calling mdrRootCtProductGroupCodelistsCodelistTermsTermGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/root/ct/${this.configuration.encodeParam({name: "productGroup", value: productGroup, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/codelists/${this.configuration.encodeParam({name: "codelist", value: codelist, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/terms/${this.configuration.encodeParam({name: "term", value: term, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<RootCtTerm>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}

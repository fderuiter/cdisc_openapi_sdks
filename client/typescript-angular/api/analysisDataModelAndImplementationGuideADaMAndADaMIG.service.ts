/**
 * CDISC Library API
 *
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { AdamDatastructure } from '../model/adamDatastructure';
// @ts-ignore
import { AdamDatastructureVariables } from '../model/adamDatastructureVariables';
// @ts-ignore
import { AdamDatastructureVarsets } from '../model/adamDatastructureVarsets';
// @ts-ignore
import { AdamProduct } from '../model/adamProduct';
// @ts-ignore
import { AdamProductDatastructures } from '../model/adamProductDatastructures';
// @ts-ignore
import { AdamVariable } from '../model/adamVariable';
// @ts-ignore
import { AdamVarset } from '../model/adamVarset';
// @ts-ignore
import { DefaultErrorResponse } from '../model/defaultErrorResponse';
// @ts-ignore
import { ExportAdamDatastructuresTable } from '../model/exportAdamDatastructuresTable';
// @ts-ignore
import { ExportAdamVariablesTable } from '../model/exportAdamVariablesTable';
// @ts-ignore
import { ExportAdamWorkbook } from '../model/exportAdamWorkbook';
// @ts-ignore
import { XmlAdamDatastructure } from '../model/xmlAdamDatastructure';
// @ts-ignore
import { XmlAdamDatastructureVariables } from '../model/xmlAdamDatastructureVariables';
// @ts-ignore
import { XmlAdamDatastructureVarsets } from '../model/xmlAdamDatastructureVarsets';
// @ts-ignore
import { XmlAdamProduct } from '../model/xmlAdamProduct';
// @ts-ignore
import { XmlAdamProductDatastructures } from '../model/xmlAdamProductDatastructures';
// @ts-ignore
import { XmlAdamVariable } from '../model/xmlAdamVariable';
// @ts-ignore
import { XmlAdamVarset } from '../model/xmlAdamVarset';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class AnalysisDataModelAndImplementationGuideADaMAndADaMIGService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Get ADaM Data Structure List
     * @param product CDISC Library Product
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrAdamProductDatastructuresGet(product: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/csv', context?: HttpContext, transferCache?: boolean}): Observable<AdamProductDatastructures>;
    public mdrAdamProductDatastructuresGet(product: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/csv', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AdamProductDatastructures>>;
    public mdrAdamProductDatastructuresGet(product: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/csv', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AdamProductDatastructures>>;
    public mdrAdamProductDatastructuresGet(product: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/csv', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (product === null || product === undefined) {
            throw new Error('Required parameter product was null or undefined when calling mdrAdamProductDatastructuresGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml',
            'text/csv'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/adam/${this.configuration.encodeParam({name: "product", value: product, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/datastructures`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<AdamProductDatastructures>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get ADaM Data Structure
     * @param product CDISC Library Product
     * @param structure Data structure Identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrAdamProductDatastructuresStructureGet(product: string, structure: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<AdamDatastructure>;
    public mdrAdamProductDatastructuresStructureGet(product: string, structure: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AdamDatastructure>>;
    public mdrAdamProductDatastructuresStructureGet(product: string, structure: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AdamDatastructure>>;
    public mdrAdamProductDatastructuresStructureGet(product: string, structure: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (product === null || product === undefined) {
            throw new Error('Required parameter product was null or undefined when calling mdrAdamProductDatastructuresStructureGet.');
        }
        if (structure === null || structure === undefined) {
            throw new Error('Required parameter structure was null or undefined when calling mdrAdamProductDatastructuresStructureGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/adam/${this.configuration.encodeParam({name: "product", value: product, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/datastructures/${this.configuration.encodeParam({name: "structure", value: structure, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<AdamDatastructure>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get ADaM Variable List
     * @param product CDISC Library Product
     * @param structure ADaM Data Structure Identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrAdamProductDatastructuresStructureVariablesGet(product: string, structure: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<AdamDatastructureVariables>;
    public mdrAdamProductDatastructuresStructureVariablesGet(product: string, structure: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AdamDatastructureVariables>>;
    public mdrAdamProductDatastructuresStructureVariablesGet(product: string, structure: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AdamDatastructureVariables>>;
    public mdrAdamProductDatastructuresStructureVariablesGet(product: string, structure: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (product === null || product === undefined) {
            throw new Error('Required parameter product was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesGet.');
        }
        if (structure === null || structure === undefined) {
            throw new Error('Required parameter structure was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/adam/${this.configuration.encodeParam({name: "product", value: product, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/datastructures/${this.configuration.encodeParam({name: "structure", value: structure, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/variables`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<AdamDatastructureVariables>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get ADaM Variable
     * @param product CDISC Library Product
     * @param structure ADaM Data Structure Identifier
     * @param _var ADaM Variable Identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrAdamProductDatastructuresStructureVariablesVarGet(product: string, structure: string, _var: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<AdamVariable>;
    public mdrAdamProductDatastructuresStructureVariablesVarGet(product: string, structure: string, _var: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AdamVariable>>;
    public mdrAdamProductDatastructuresStructureVariablesVarGet(product: string, structure: string, _var: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AdamVariable>>;
    public mdrAdamProductDatastructuresStructureVariablesVarGet(product: string, structure: string, _var: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (product === null || product === undefined) {
            throw new Error('Required parameter product was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesVarGet.');
        }
        if (structure === null || structure === undefined) {
            throw new Error('Required parameter structure was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesVarGet.');
        }
        if (_var === null || _var === undefined) {
            throw new Error('Required parameter _var was null or undefined when calling mdrAdamProductDatastructuresStructureVariablesVarGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/adam/${this.configuration.encodeParam({name: "product", value: product, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/datastructures/${this.configuration.encodeParam({name: "structure", value: structure, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/variables/${this.configuration.encodeParam({name: "_var", value: _var, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<AdamVariable>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get ADaM Variable Set List
     * @param product CDISC Library Product
     * @param structure ADaM Data Structure Identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrAdamProductDatastructuresStructureVarsetsGet(product: string, structure: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<AdamDatastructureVarsets>;
    public mdrAdamProductDatastructuresStructureVarsetsGet(product: string, structure: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AdamDatastructureVarsets>>;
    public mdrAdamProductDatastructuresStructureVarsetsGet(product: string, structure: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AdamDatastructureVarsets>>;
    public mdrAdamProductDatastructuresStructureVarsetsGet(product: string, structure: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (product === null || product === undefined) {
            throw new Error('Required parameter product was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsGet.');
        }
        if (structure === null || structure === undefined) {
            throw new Error('Required parameter structure was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/adam/${this.configuration.encodeParam({name: "product", value: product, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/datastructures/${this.configuration.encodeParam({name: "structure", value: structure, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/varsets`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<AdamDatastructureVarsets>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get ADaM Variable Set
     * @param product CDISC Library Product
     * @param structure ADaM Data Structure Identifier
     * @param varset ADaM Variable Set Identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrAdamProductDatastructuresStructureVarsetsVarsetGet(product: string, structure: string, varset: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<AdamVarset>;
    public mdrAdamProductDatastructuresStructureVarsetsVarsetGet(product: string, structure: string, varset: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AdamVarset>>;
    public mdrAdamProductDatastructuresStructureVarsetsVarsetGet(product: string, structure: string, varset: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AdamVarset>>;
    public mdrAdamProductDatastructuresStructureVarsetsVarsetGet(product: string, structure: string, varset: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (product === null || product === undefined) {
            throw new Error('Required parameter product was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet.');
        }
        if (structure === null || structure === undefined) {
            throw new Error('Required parameter structure was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet.');
        }
        if (varset === null || varset === undefined) {
            throw new Error('Required parameter varset was null or undefined when calling mdrAdamProductDatastructuresStructureVarsetsVarsetGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/adam/${this.configuration.encodeParam({name: "product", value: product, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/datastructures/${this.configuration.encodeParam({name: "structure", value: structure, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/varsets/${this.configuration.encodeParam({name: "varset", value: varset, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<AdamVarset>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get ADaM Product
     * @param product CDISC Library Product
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrAdamProductGet(product: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/csv' | 'application/vnd.ms-excel' | 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<AdamProduct>;
    public mdrAdamProductGet(product: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/csv' | 'application/vnd.ms-excel' | 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AdamProduct>>;
    public mdrAdamProductGet(product: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/csv' | 'application/vnd.ms-excel' | 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AdamProduct>>;
    public mdrAdamProductGet(product: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/csv' | 'application/vnd.ms-excel' | 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (product === null || product === undefined) {
            throw new Error('Required parameter product was null or undefined when calling mdrAdamProductGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml',
            'text/csv',
            'application/vnd.ms-excel',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/adam/${this.configuration.encodeParam({name: "product", value: product, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<AdamProduct>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}

/**
 * CDISC Library API
 *
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { DefaultErrorResponse } from '../model/defaultErrorResponse';
// @ts-ignore
import { DefaultSearchResponse } from '../model/defaultSearchResponse';
// @ts-ignore
import { DefaultSearchScopes } from '../model/defaultSearchScopes';
// @ts-ignore
import { MdrSearchScopesGet200Response } from '../model/mdrSearchScopesGet200Response';
// @ts-ignore
import { ScopeValues } from '../model/scopeValues';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class SearchesService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Get Search Results Across CDISC Library
     * @param q Search Term Expression
     * @param highlight Search Highlight Expression
     * @param start Initial Search Result Index
     * @param pageSize Number of Search Results to Return
     * @param _class Limit Search by Setting Scope to Class
     * @param codelist Limit Search by Setting Scope to Codelist
     * @param conceptId Limit Search by Setting Scope to Concept ID
     * @param core Limit Search by Setting Scope to Core
     * @param dataStructure Limit Search by Setting Scope to Data Structure
     * @param datasetStructure Limit Search by Setting Scope to Dataset Structure
     * @param definition Limit Search by Setting Scope to Definition
     * @param description Limit Search by Setting Scope to Description
     * @param domain Limit Search by Setting Scope to Domain
     * @param effectiveDate Limit Search by Setting Scope to Effective Date
     * @param extensible Limit Search by Setting Scope to Extensible
     * @param href Limit Search by Setting Scope to Href
     * @param label Limit Search by Setting Scope to Label
     * @param measureType SLimit Search by Setting Scope to Measure Type
     * @param name Limit Search by Setting Scope to Name
     * @param preferredTerm Limit Search by Setting Scope to Preferred Term
     * @param product Limit Search by Setting Scope to Product
     * @param productGroup Limit Search by Setting Scope to Product Group
     * @param registrationStatus Limit Search by Setting Scope to Registration Status
     * @param roleDescription Limit Search by Setting Scope to Role Description
     * @param sdtmTarget Limit Search by Setting Scope to SDTM Target
     * @param simpleDatatype Limit Search by Setting Scope to Simple Datatype
     * @param submissionValue Limit Search by Setting Scope to Submission Value
     * @param synonyms Limit Search by Setting Scope to Synonyms
     * @param type Limit Search by Setting Scope to Type
     * @param uiHref Limit Search by Setting Scope to UI Href
     * @param valueDomain Limit Search by Setting Scope to Value Domain
     * @param variableSet Limit Search by Setting Scope to Variable Set
     * @param version Limit Search by Setting Scope to Version
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrSearchGet(q: string, highlight?: string, start?: number, pageSize?: number, _class?: string, codelist?: string, conceptId?: string, core?: string, dataStructure?: string, datasetStructure?: string, definition?: string, description?: string, domain?: string, effectiveDate?: string, extensible?: string, href?: string, label?: string, measureType?: string, name?: string, preferredTerm?: string, product?: string, productGroup?: string, registrationStatus?: string, roleDescription?: string, sdtmTarget?: string, simpleDatatype?: string, submissionValue?: string, synonyms?: string, type?: string, uiHref?: string, valueDomain?: string, variableSet?: string, version?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<DefaultSearchResponse>;
    public mdrSearchGet(q: string, highlight?: string, start?: number, pageSize?: number, _class?: string, codelist?: string, conceptId?: string, core?: string, dataStructure?: string, datasetStructure?: string, definition?: string, description?: string, domain?: string, effectiveDate?: string, extensible?: string, href?: string, label?: string, measureType?: string, name?: string, preferredTerm?: string, product?: string, productGroup?: string, registrationStatus?: string, roleDescription?: string, sdtmTarget?: string, simpleDatatype?: string, submissionValue?: string, synonyms?: string, type?: string, uiHref?: string, valueDomain?: string, variableSet?: string, version?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<DefaultSearchResponse>>;
    public mdrSearchGet(q: string, highlight?: string, start?: number, pageSize?: number, _class?: string, codelist?: string, conceptId?: string, core?: string, dataStructure?: string, datasetStructure?: string, definition?: string, description?: string, domain?: string, effectiveDate?: string, extensible?: string, href?: string, label?: string, measureType?: string, name?: string, preferredTerm?: string, product?: string, productGroup?: string, registrationStatus?: string, roleDescription?: string, sdtmTarget?: string, simpleDatatype?: string, submissionValue?: string, synonyms?: string, type?: string, uiHref?: string, valueDomain?: string, variableSet?: string, version?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<DefaultSearchResponse>>;
    public mdrSearchGet(q: string, highlight?: string, start?: number, pageSize?: number, _class?: string, codelist?: string, conceptId?: string, core?: string, dataStructure?: string, datasetStructure?: string, definition?: string, description?: string, domain?: string, effectiveDate?: string, extensible?: string, href?: string, label?: string, measureType?: string, name?: string, preferredTerm?: string, product?: string, productGroup?: string, registrationStatus?: string, roleDescription?: string, sdtmTarget?: string, simpleDatatype?: string, submissionValue?: string, synonyms?: string, type?: string, uiHref?: string, valueDomain?: string, variableSet?: string, version?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (q === null || q === undefined) {
            throw new Error('Required parameter q was null or undefined when calling mdrSearchGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>q, 'q');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>highlight, 'highlight');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>start, 'start');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>pageSize, 'pageSize');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>_class, 'class');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>codelist, 'codelist');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>conceptId, 'conceptId');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>core, 'core');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>dataStructure, 'dataStructure');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>datasetStructure, 'datasetStructure');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>definition, 'definition');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>description, 'description');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>domain, 'domain');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>effectiveDate, 'effectiveDate');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>extensible, 'extensible');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>href, 'href');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>label, 'label');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>measureType, 'measureType');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>name, 'name');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>preferredTerm, 'preferredTerm');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>product, 'product');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>productGroup, 'productGroup');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>registrationStatus, 'registrationStatus');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>roleDescription, 'roleDescription');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>sdtmTarget, 'sdtmTarget');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>simpleDatatype, 'simpleDatatype');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>submissionValue, 'submissionValue');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>synonyms, 'synonyms');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>type, 'type');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>uiHref, 'uiHref');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>valueDomain, 'valueDomain');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>variableSet, 'variableSet');
        localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
          <any>version, 'version');

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/search`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<DefaultSearchResponse>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Search Results Across CDISC Library
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrSearchScopesGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<MdrSearchScopesGet200Response>;
    public mdrSearchScopesGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<MdrSearchScopesGet200Response>>;
    public mdrSearchScopesGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<MdrSearchScopesGet200Response>>;
    public mdrSearchScopesGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/search/scopes`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<MdrSearchScopesGet200Response>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Search Results Limited to Scope
     * @param scope Search Scope
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrSearchScopesScopeGet(scope: DefaultSearchScopes, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ScopeValues>;
    public mdrSearchScopesScopeGet(scope: DefaultSearchScopes, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ScopeValues>>;
    public mdrSearchScopesScopeGet(scope: DefaultSearchScopes, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ScopeValues>>;
    public mdrSearchScopesScopeGet(scope: DefaultSearchScopes, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (scope === null || scope === undefined) {
            throw new Error('Required parameter scope was null or undefined when calling mdrSearchScopesScopeGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/search/scopes/${this.configuration.encodeParam({name: "scope", value: scope, in: "path", style: "simple", explode: false, dataType: "DefaultSearchScopes", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<ScopeValues>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}

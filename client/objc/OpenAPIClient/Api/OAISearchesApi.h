#import <Foundation/Foundation.h>
#import "OAIDefaultErrorResponse.h"
#import "OAIDefaultSearchResponse.h"
#import "OAIDefaultSearchScopes.h"
#import "OAIMdrSearchScopesGet200Response.h"
#import "OAIScopeValues.h"
#import "OAIApi.h"

/**
* CDISC Library API
* REST API Documentation for CDISC Library in production server
*
* The version of the OpenAPI document: 1.1.0
* Contact: cdisc_library_support@cdisc.org
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAISearchesApi: NSObject <OAIApi>

extern NSString* kOAISearchesApiErrorDomain;
extern NSInteger kOAISearchesApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// 
/// Get Search Results Across CDISC Library
///
/// @param q Search Term Expression
/// @param highlight Search Highlight Expression (optional)
/// @param start Initial Search Result Index (optional) (default to @0)
/// @param pageSize Number of Search Results to Return (optional) (default to @100)
/// @param _class Limit Search by Setting Scope to Class (optional)
/// @param codelist Limit Search by Setting Scope to Codelist (optional)
/// @param conceptId Limit Search by Setting Scope to Concept ID (optional)
/// @param core Limit Search by Setting Scope to Core (optional)
/// @param dataStructure Limit Search by Setting Scope to Data Structure (optional)
/// @param datasetStructure Limit Search by Setting Scope to Dataset Structure (optional)
/// @param definition Limit Search by Setting Scope to Definition (optional)
/// @param _description Limit Search by Setting Scope to Description (optional)
/// @param domain Limit Search by Setting Scope to Domain (optional)
/// @param effectiveDate Limit Search by Setting Scope to Effective Date (optional)
/// @param extensible Limit Search by Setting Scope to Extensible (optional)
/// @param href Limit Search by Setting Scope to Href (optional)
/// @param label Limit Search by Setting Scope to Label (optional)
/// @param measureType SLimit Search by Setting Scope to Measure Type (optional)
/// @param name Limit Search by Setting Scope to Name (optional)
/// @param preferredTerm Limit Search by Setting Scope to Preferred Term (optional)
/// @param product Limit Search by Setting Scope to Product (optional)
/// @param productGroup Limit Search by Setting Scope to Product Group (optional)
/// @param registrationStatus Limit Search by Setting Scope to Registration Status (optional)
/// @param roleDescription Limit Search by Setting Scope to Role Description (optional)
/// @param sdtmTarget Limit Search by Setting Scope to SDTM Target (optional)
/// @param simpleDatatype Limit Search by Setting Scope to Simple Datatype (optional)
/// @param submissionValue Limit Search by Setting Scope to Submission Value (optional)
/// @param synonyms Limit Search by Setting Scope to Synonyms (optional)
/// @param type Limit Search by Setting Scope to Type (optional)
/// @param uiHref Limit Search by Setting Scope to UI Href (optional)
/// @param valueDomain Limit Search by Setting Scope to Value Domain (optional)
/// @param variableSet Limit Search by Setting Scope to Variable Set (optional)
/// @param version Limit Search by Setting Scope to Version (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:405 message:"Method Not Allowed",
///  code:406 message:"Not Acceptable",
///  code:500 message:"Internal Server Error",
///  code:503 message:"Service Unavailable",
///  code:504 message:"Gateway Timeout Error"
///
/// @return OAIDefaultSearchResponse*
-(NSURLSessionTask*) mdrSearchGetWithQ: (NSString*) q
    highlight: (NSString*) highlight
    start: (NSNumber*) start
    pageSize: (NSNumber*) pageSize
    _class: (NSString*) _class
    codelist: (NSString*) codelist
    conceptId: (NSString*) conceptId
    core: (NSString*) core
    dataStructure: (NSString*) dataStructure
    datasetStructure: (NSString*) datasetStructure
    definition: (NSString*) definition
    _description: (NSString*) _description
    domain: (NSString*) domain
    effectiveDate: (NSString*) effectiveDate
    extensible: (NSString*) extensible
    href: (NSString*) href
    label: (NSString*) label
    measureType: (NSString*) measureType
    name: (NSString*) name
    preferredTerm: (NSString*) preferredTerm
    product: (NSString*) product
    productGroup: (NSString*) productGroup
    registrationStatus: (NSString*) registrationStatus
    roleDescription: (NSString*) roleDescription
    sdtmTarget: (NSString*) sdtmTarget
    simpleDatatype: (NSString*) simpleDatatype
    submissionValue: (NSString*) submissionValue
    synonyms: (NSString*) synonyms
    type: (NSString*) type
    uiHref: (NSString*) uiHref
    valueDomain: (NSString*) valueDomain
    variableSet: (NSString*) variableSet
    version: (NSString*) version
    completionHandler: (void (^)(OAIDefaultSearchResponse* output, NSError* error)) handler;


/// 
/// Get Search Results Across CDISC Library
///
/// 
///  code:200 message:"OK"
///
/// @return OAIMdrSearchScopesGet200Response*
-(NSURLSessionTask*) mdrSearchScopesGetWithCompletionHandler: 
    (void (^)(OAIMdrSearchScopesGet200Response* output, NSError* error)) handler;


/// 
/// Get Search Results Limited to Scope
///
/// @param scope Search Scope
/// 
///  code:200 message:"OK"
///
/// @return OAIScopeValues*
-(NSURLSessionTask*) mdrSearchScopesScopeGetWithScope: (OAIDefaultSearchScopes) scope
    completionHandler: (void (^)(OAIScopeValues* output, NSError* error)) handler;



@end

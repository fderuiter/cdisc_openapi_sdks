#import <Foundation/Foundation.h>
#import "OAIDefaultErrorResponse.h"
#import "OAIExportSdtmigDatasetsTable.h"
#import "OAIExportSdtmigVariablesTable.h"
#import "OAIExportSdtmigWorkbook.h"
#import "OAIRootSdtmigDatasetVariable.h"
#import "OAISdtmigClass.h"
#import "OAISdtmigClassDatasets.h"
#import "OAISdtmigClasses.h"
#import "OAISdtmigDataset.h"
#import "OAISdtmigDatasetVariable.h"
#import "OAISdtmigDatasetVariables.h"
#import "OAISdtmigDatasets.h"
#import "OAISdtmigProduct.h"
#import "OAIXmlRootSdtmigDatasetVariable.h"
#import "OAIXmlSdtmigClass.h"
#import "OAIXmlSdtmigClassDatasets.h"
#import "OAIXmlSdtmigClasses.h"
#import "OAIXmlSdtmigDataset.h"
#import "OAIXmlSdtmigDatasetVariable.h"
#import "OAIXmlSdtmigDatasetVariables.h"
#import "OAIXmlSdtmigDatasets.h"
#import "OAIXmlSdtmigProduct.h"
#import "OAIApi.h"

/**
* CDISC Library API
* REST API Documentation for CDISC Library in production server
*
* The version of the OpenAPI document: 1.1.0
* Contact: cdisc_library_support@cdisc.org
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAISDTMImplementationGuideSDTMIGApi: NSObject <OAIApi>

extern NSString* kOAISDTMImplementationGuideSDTMIGApiErrorDomain;
extern NSInteger kOAISDTMImplementationGuideSDTMIGApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// 
/// Get Root SDTMIG Dataset Variable
///
/// @param dataset SDTMIG Dataset Identifier
/// @param var SDTMIG Variable Identifier
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:405 message:"Method Not Allowed",
///  code:406 message:"Not Acceptable",
///  code:500 message:"Internal Server Error",
///  code:503 message:"Service Unavailable",
///  code:504 message:"Gateway Timeout Error"
///
/// @return OAIRootSdtmigDatasetVariable*
-(NSURLSessionTask*) mdrRootSdtmigDatasetsDatasetVariablesVarGetWithDataset: (NSString*) dataset
    var: (NSString*) var
    completionHandler: (void (^)(OAIRootSdtmigDatasetVariable* output, NSError* error)) handler;


/// 
/// Get SDTMIG Class Dataset List
///
/// @param version CDISC Library Product Version
/// @param _class SDTMIG Class Identifier
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:405 message:"Method Not Allowed",
///  code:406 message:"Not Acceptable",
///  code:500 message:"Internal Server Error",
///  code:503 message:"Service Unavailable",
///  code:504 message:"Gateway Timeout Error"
///
/// @return OAISdtmigClassDatasets*
-(NSURLSessionTask*) mdrSdtmigVersionClassesClassDatasetsGetWithVersion: (NSString*) version
    _class: (NSString*) _class
    completionHandler: (void (^)(OAISdtmigClassDatasets* output, NSError* error)) handler;


/// 
/// Get SDTMIG Class
///
/// @param version CDISC Library Product Version
/// @param _class SDTMIG Class Identifier
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:405 message:"Method Not Allowed",
///  code:406 message:"Not Acceptable",
///  code:500 message:"Internal Server Error",
///  code:503 message:"Service Unavailable",
///  code:504 message:"Gateway Timeout Error"
///
/// @return OAISdtmigClass*
-(NSURLSessionTask*) mdrSdtmigVersionClassesClassGetWithVersion: (NSString*) version
    _class: (NSString*) _class
    completionHandler: (void (^)(OAISdtmigClass* output, NSError* error)) handler;


/// 
/// Get SDTMIG Class List
///
/// @param version CDISC Library Product Version
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:405 message:"Method Not Allowed",
///  code:406 message:"Not Acceptable",
///  code:500 message:"Internal Server Error",
///  code:503 message:"Service Unavailable",
///  code:504 message:"Gateway Timeout Error"
///
/// @return OAISdtmigClasses*
-(NSURLSessionTask*) mdrSdtmigVersionClassesGetWithVersion: (NSString*) version
    completionHandler: (void (^)(OAISdtmigClasses* output, NSError* error)) handler;


/// 
/// Get SDTMIG Dataset
///
/// @param version CDISC Library Product Version
/// @param dataset SDTMIG Dataset Identifier
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:405 message:"Method Not Allowed",
///  code:406 message:"Not Acceptable",
///  code:500 message:"Internal Server Error",
///  code:503 message:"Service Unavailable",
///  code:504 message:"Gateway Timeout Error"
///
/// @return OAISdtmigDataset*
-(NSURLSessionTask*) mdrSdtmigVersionDatasetsDatasetGetWithVersion: (NSString*) version
    dataset: (NSString*) dataset
    completionHandler: (void (^)(OAISdtmigDataset* output, NSError* error)) handler;


/// 
/// Get SDTMIG Dataset Variable List
///
/// @param version CDISC Library Product Version
/// @param dataset SDTMIG Dataset Identifier
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:405 message:"Method Not Allowed",
///  code:406 message:"Not Acceptable",
///  code:500 message:"Internal Server Error",
///  code:503 message:"Service Unavailable",
///  code:504 message:"Gateway Timeout Error"
///
/// @return OAISdtmigDatasetVariables*
-(NSURLSessionTask*) mdrSdtmigVersionDatasetsDatasetVariablesGetWithVersion: (NSString*) version
    dataset: (NSString*) dataset
    completionHandler: (void (^)(OAISdtmigDatasetVariables* output, NSError* error)) handler;


/// 
/// Get SDTMIG Dataset Variable
///
/// @param version CDISC Library Product Version
/// @param dataset SDTMIG Dataset Identifier
/// @param var SDTMIG Variable Identifier
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:405 message:"Method Not Allowed",
///  code:406 message:"Not Acceptable",
///  code:500 message:"Internal Server Error",
///  code:503 message:"Service Unavailable",
///  code:504 message:"Gateway Timeout Error"
///
/// @return OAISdtmigDatasetVariable*
-(NSURLSessionTask*) mdrSdtmigVersionDatasetsDatasetVariablesVarGetWithVersion: (NSString*) version
    dataset: (NSString*) dataset
    var: (NSString*) var
    completionHandler: (void (^)(OAISdtmigDatasetVariable* output, NSError* error)) handler;


/// 
/// Get SDTMIG Dataset List
///
/// @param version CDISC Library Product Version
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:405 message:"Method Not Allowed",
///  code:406 message:"Not Acceptable",
///  code:500 message:"Internal Server Error",
///  code:503 message:"Service Unavailable",
///  code:504 message:"Gateway Timeout Error"
///
/// @return OAISdtmigDatasets*
-(NSURLSessionTask*) mdrSdtmigVersionDatasetsGetWithVersion: (NSString*) version
    completionHandler: (void (^)(OAISdtmigDatasets* output, NSError* error)) handler;


/// 
/// Get SDTMIG product
///
/// @param version CDISC Library Product Version
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:401 message:"Unauthorized",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:405 message:"Method Not Allowed",
///  code:406 message:"Not Acceptable",
///  code:500 message:"Internal Server Error",
///  code:503 message:"Service Unavailable",
///  code:504 message:"Gateway Timeout Error"
///
/// @return OAISdtmigProduct*
-(NSURLSessionTask*) mdrSdtmigVersionGetWithVersion: (NSString*) version
    completionHandler: (void (^)(OAISdtmigProduct* output, NSError* error)) handler;



@end

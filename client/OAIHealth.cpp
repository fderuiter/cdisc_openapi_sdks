/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHealth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHealth::OAIHealth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHealth::OAIHealth() {
    this->initializeModel();
}

OAIHealth::~OAIHealth() {}

void OAIHealth::initializeModel() {

    m_healthy_isSet = false;
    m_healthy_isValid = false;

    m_ldap_authentication_healthy_isSet = false;
    m_ldap_authentication_healthy_isValid = false;

    m_ldap_authorization_healthy_isSet = false;
    m_ldap_authorization_healthy_isValid = false;

    m_database_healthy_isSet = false;
    m_database_healthy_isValid = false;

    m_es_healthy_isSet = false;
    m_es_healthy_isValid = false;
}

void OAIHealth::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHealth::fromJsonObject(QJsonObject json) {

    m_healthy_isValid = ::OpenAPI::fromJsonValue(m_healthy, json[QString("healthy")]);
    m_healthy_isSet = !json[QString("healthy")].isNull() && m_healthy_isValid;

    m_ldap_authentication_healthy_isValid = ::OpenAPI::fromJsonValue(m_ldap_authentication_healthy, json[QString("ldapAuthenticationHealthy")]);
    m_ldap_authentication_healthy_isSet = !json[QString("ldapAuthenticationHealthy")].isNull() && m_ldap_authentication_healthy_isValid;

    m_ldap_authorization_healthy_isValid = ::OpenAPI::fromJsonValue(m_ldap_authorization_healthy, json[QString("ldapAuthorizationHealthy")]);
    m_ldap_authorization_healthy_isSet = !json[QString("ldapAuthorizationHealthy")].isNull() && m_ldap_authorization_healthy_isValid;

    m_database_healthy_isValid = ::OpenAPI::fromJsonValue(m_database_healthy, json[QString("databaseHealthy")]);
    m_database_healthy_isSet = !json[QString("databaseHealthy")].isNull() && m_database_healthy_isValid;

    m_es_healthy_isValid = ::OpenAPI::fromJsonValue(m_es_healthy, json[QString("esHealthy")]);
    m_es_healthy_isSet = !json[QString("esHealthy")].isNull() && m_es_healthy_isValid;
}

QString OAIHealth::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHealth::asJsonObject() const {
    QJsonObject obj;
    if (m_healthy_isSet) {
        obj.insert(QString("healthy"), ::OpenAPI::toJsonValue(m_healthy));
    }
    if (m_ldap_authentication_healthy_isSet) {
        obj.insert(QString("ldapAuthenticationHealthy"), ::OpenAPI::toJsonValue(m_ldap_authentication_healthy));
    }
    if (m_ldap_authorization_healthy_isSet) {
        obj.insert(QString("ldapAuthorizationHealthy"), ::OpenAPI::toJsonValue(m_ldap_authorization_healthy));
    }
    if (m_database_healthy_isSet) {
        obj.insert(QString("databaseHealthy"), ::OpenAPI::toJsonValue(m_database_healthy));
    }
    if (m_es_healthy_isSet) {
        obj.insert(QString("esHealthy"), ::OpenAPI::toJsonValue(m_es_healthy));
    }
    return obj;
}

bool OAIHealth::isHealthy() const {
    return m_healthy;
}
void OAIHealth::setHealthy(const bool &healthy) {
    m_healthy = healthy;
    m_healthy_isSet = true;
}

bool OAIHealth::is_healthy_Set() const{
    return m_healthy_isSet;
}

bool OAIHealth::is_healthy_Valid() const{
    return m_healthy_isValid;
}

bool OAIHealth::isLdapAuthenticationHealthy() const {
    return m_ldap_authentication_healthy;
}
void OAIHealth::setLdapAuthenticationHealthy(const bool &ldap_authentication_healthy) {
    m_ldap_authentication_healthy = ldap_authentication_healthy;
    m_ldap_authentication_healthy_isSet = true;
}

bool OAIHealth::is_ldap_authentication_healthy_Set() const{
    return m_ldap_authentication_healthy_isSet;
}

bool OAIHealth::is_ldap_authentication_healthy_Valid() const{
    return m_ldap_authentication_healthy_isValid;
}

bool OAIHealth::isLdapAuthorizationHealthy() const {
    return m_ldap_authorization_healthy;
}
void OAIHealth::setLdapAuthorizationHealthy(const bool &ldap_authorization_healthy) {
    m_ldap_authorization_healthy = ldap_authorization_healthy;
    m_ldap_authorization_healthy_isSet = true;
}

bool OAIHealth::is_ldap_authorization_healthy_Set() const{
    return m_ldap_authorization_healthy_isSet;
}

bool OAIHealth::is_ldap_authorization_healthy_Valid() const{
    return m_ldap_authorization_healthy_isValid;
}

bool OAIHealth::isDatabaseHealthy() const {
    return m_database_healthy;
}
void OAIHealth::setDatabaseHealthy(const bool &database_healthy) {
    m_database_healthy = database_healthy;
    m_database_healthy_isSet = true;
}

bool OAIHealth::is_database_healthy_Set() const{
    return m_database_healthy_isSet;
}

bool OAIHealth::is_database_healthy_Valid() const{
    return m_database_healthy_isValid;
}

bool OAIHealth::isEsHealthy() const {
    return m_es_healthy;
}
void OAIHealth::setEsHealthy(const bool &es_healthy) {
    m_es_healthy = es_healthy;
    m_es_healthy_isSet = true;
}

bool OAIHealth::is_es_healthy_Set() const{
    return m_es_healthy_isSet;
}

bool OAIHealth::is_es_healthy_Valid() const{
    return m_es_healthy_isValid;
}

bool OAIHealth::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_healthy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_authentication_healthy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_authorization_healthy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_healthy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_es_healthy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHealth::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI

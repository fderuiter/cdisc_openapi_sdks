//
// SDTMImplementationGuideSDTMIGAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class SDTMImplementationGuideSDTMIGAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://library.cdisc.org/api")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    public enum MdrRootSdtmigDatasetsDatasetVariablesVarGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrRootSdtmigDatasetsDatasetVariablesVarGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrRootSdtmigDatasetsDatasetVariablesVarGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrRootSdtmigDatasetsDatasetVariablesVarGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrRootSdtmigDatasetsDatasetVariablesVarGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrRootSdtmigDatasetsDatasetVariablesVarGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrRootSdtmigDatasetsDatasetVariablesVarGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrRootSdtmigDatasetsDatasetVariablesVarGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrRootSdtmigDatasetsDatasetVariablesVarGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrRootSdtmigDatasetsDatasetVariablesVarGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/root/sdtmig/datasets/{dataset}/variables/{var}
    /// - Get Root SDTMIG Dataset Variable
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter dataset: (path) SDTMIG Dataset Identifier 
    /// - parameter _var: (path) SDTMIG Variable Identifier 
    /// - returns: AnyPublisher<RootSdtmigDatasetVariable, Error> 
    open func mdrRootSdtmigDatasetsDatasetVariablesVarGet(dataset: String, _var: String) -> AnyPublisher<RootSdtmigDatasetVariable, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/root/sdtmig/datasets/{dataset}/variables/{var}"
                localVarPath = localVarPath.replacingOccurrences(of: "{dataset}", with: dataset)
                localVarPath = localVarPath.replacingOccurrences(of: "{var}", with: _var)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<RootSdtmigDatasetVariable, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrRootSdtmigDatasetsDatasetVariablesVarGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrRootSdtmigDatasetsDatasetVariablesVarGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrRootSdtmigDatasetsDatasetVariablesVarGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrRootSdtmigDatasetsDatasetVariablesVarGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrRootSdtmigDatasetsDatasetVariablesVarGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrRootSdtmigDatasetsDatasetVariablesVarGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrRootSdtmigDatasetsDatasetVariablesVarGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrRootSdtmigDatasetsDatasetVariablesVarGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrRootSdtmigDatasetsDatasetVariablesVarGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(RootSdtmigDatasetVariable.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum MdrSdtmigVersionClassesClassDatasetsGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrSdtmigVersionClassesClassDatasetsGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrSdtmigVersionClassesClassDatasetsGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrSdtmigVersionClassesClassDatasetsGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrSdtmigVersionClassesClassDatasetsGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrSdtmigVersionClassesClassDatasetsGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrSdtmigVersionClassesClassDatasetsGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrSdtmigVersionClassesClassDatasetsGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrSdtmigVersionClassesClassDatasetsGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrSdtmigVersionClassesClassDatasetsGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/sdtmig/{version}/classes/{class}/datasets
    /// - Get SDTMIG Class Dataset List
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter version: (path) CDISC Library Product Version 
    /// - parameter _class: (path) SDTMIG Class Identifier 
    /// - returns: AnyPublisher<SdtmigClassDatasets, Error> 
    open func mdrSdtmigVersionClassesClassDatasetsGet(version: String, _class: String) -> AnyPublisher<SdtmigClassDatasets, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/sdtmig/{version}/classes/{class}/datasets"
                localVarPath = localVarPath.replacingOccurrences(of: "{version}", with: version)
                localVarPath = localVarPath.replacingOccurrences(of: "{class}", with: _class)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<SdtmigClassDatasets, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesClassDatasetsGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesClassDatasetsGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesClassDatasetsGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesClassDatasetsGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesClassDatasetsGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesClassDatasetsGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesClassDatasetsGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesClassDatasetsGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesClassDatasetsGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(SdtmigClassDatasets.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum MdrSdtmigVersionClassesClassGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrSdtmigVersionClassesClassGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrSdtmigVersionClassesClassGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrSdtmigVersionClassesClassGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrSdtmigVersionClassesClassGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrSdtmigVersionClassesClassGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrSdtmigVersionClassesClassGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrSdtmigVersionClassesClassGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrSdtmigVersionClassesClassGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrSdtmigVersionClassesClassGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/sdtmig/{version}/classes/{class}
    /// - Get SDTMIG Class
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter version: (path) CDISC Library Product Version 
    /// - parameter _class: (path) SDTMIG Class Identifier 
    /// - returns: AnyPublisher<SdtmigClass, Error> 
    open func mdrSdtmigVersionClassesClassGet(version: String, _class: String) -> AnyPublisher<SdtmigClass, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/sdtmig/{version}/classes/{class}"
                localVarPath = localVarPath.replacingOccurrences(of: "{version}", with: version)
                localVarPath = localVarPath.replacingOccurrences(of: "{class}", with: _class)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<SdtmigClass, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesClassGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesClassGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesClassGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesClassGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesClassGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesClassGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesClassGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesClassGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesClassGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(SdtmigClass.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum MdrSdtmigVersionClassesGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrSdtmigVersionClassesGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrSdtmigVersionClassesGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrSdtmigVersionClassesGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrSdtmigVersionClassesGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrSdtmigVersionClassesGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrSdtmigVersionClassesGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrSdtmigVersionClassesGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrSdtmigVersionClassesGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrSdtmigVersionClassesGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/sdtmig/{version}/classes
    /// - Get SDTMIG Class List
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter version: (path) CDISC Library Product Version 
    /// - returns: AnyPublisher<SdtmigClasses, Error> 
    open func mdrSdtmigVersionClassesGet(version: String) -> AnyPublisher<SdtmigClasses, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/sdtmig/{version}/classes"
                localVarPath = localVarPath.replacingOccurrences(of: "{version}", with: version)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<SdtmigClasses, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionClassesGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(SdtmigClasses.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum MdrSdtmigVersionDatasetsDatasetGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/sdtmig/{version}/datasets/{dataset}
    /// - Get SDTMIG Dataset
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter version: (path) CDISC Library Product Version 
    /// - parameter dataset: (path) SDTMIG Dataset Identifier 
    /// - returns: AnyPublisher<SdtmigDataset, Error> 
    open func mdrSdtmigVersionDatasetsDatasetGet(version: String, dataset: String) -> AnyPublisher<SdtmigDataset, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/sdtmig/{version}/datasets/{dataset}"
                localVarPath = localVarPath.replacingOccurrences(of: "{version}", with: version)
                localVarPath = localVarPath.replacingOccurrences(of: "{dataset}", with: dataset)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<SdtmigDataset, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(SdtmigDataset.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum MdrSdtmigVersionDatasetsDatasetVariablesGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetVariablesGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetVariablesGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetVariablesGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetVariablesGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetVariablesGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetVariablesGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetVariablesGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetVariablesGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetVariablesGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/sdtmig/{version}/datasets/{dataset}/variables
    /// - Get SDTMIG Dataset Variable List
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter version: (path) CDISC Library Product Version 
    /// - parameter dataset: (path) SDTMIG Dataset Identifier 
    /// - returns: AnyPublisher<SdtmigDatasetVariables, Error> 
    open func mdrSdtmigVersionDatasetsDatasetVariablesGet(version: String, dataset: String) -> AnyPublisher<SdtmigDatasetVariables, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/sdtmig/{version}/datasets/{dataset}/variables"
                localVarPath = localVarPath.replacingOccurrences(of: "{version}", with: version)
                localVarPath = localVarPath.replacingOccurrences(of: "{dataset}", with: dataset)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<SdtmigDatasetVariables, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetVariablesGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetVariablesGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetVariablesGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetVariablesGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetVariablesGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetVariablesGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetVariablesGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetVariablesGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetVariablesGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(SdtmigDatasetVariables.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum MdrSdtmigVersionDatasetsDatasetVariablesVarGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetVariablesVarGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetVariablesVarGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetVariablesVarGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetVariablesVarGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetVariablesVarGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetVariablesVarGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetVariablesVarGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetVariablesVarGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrSdtmigVersionDatasetsDatasetVariablesVarGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/sdtmig/{version}/datasets/{dataset}/variables/{var}
    /// - Get SDTMIG Dataset Variable
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter version: (path) CDISC Library Product Version 
    /// - parameter dataset: (path) SDTMIG Dataset Identifier 
    /// - parameter _var: (path) SDTMIG Variable Identifier 
    /// - returns: AnyPublisher<SdtmigDatasetVariable, Error> 
    open func mdrSdtmigVersionDatasetsDatasetVariablesVarGet(version: String, dataset: String, _var: String) -> AnyPublisher<SdtmigDatasetVariable, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/sdtmig/{version}/datasets/{dataset}/variables/{var}"
                localVarPath = localVarPath.replacingOccurrences(of: "{version}", with: version)
                localVarPath = localVarPath.replacingOccurrences(of: "{dataset}", with: dataset)
                localVarPath = localVarPath.replacingOccurrences(of: "{var}", with: _var)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<SdtmigDatasetVariable, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetVariablesVarGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetVariablesVarGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetVariablesVarGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetVariablesVarGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetVariablesVarGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetVariablesVarGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetVariablesVarGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetVariablesVarGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsDatasetVariablesVarGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(SdtmigDatasetVariable.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum MdrSdtmigVersionDatasetsGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrSdtmigVersionDatasetsGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrSdtmigVersionDatasetsGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrSdtmigVersionDatasetsGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrSdtmigVersionDatasetsGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrSdtmigVersionDatasetsGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrSdtmigVersionDatasetsGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrSdtmigVersionDatasetsGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrSdtmigVersionDatasetsGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrSdtmigVersionDatasetsGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/sdtmig/{version}/datasets
    /// - Get SDTMIG Dataset List
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter version: (path) CDISC Library Product Version 
    /// - returns: AnyPublisher<SdtmigDatasets, Error> 
    open func mdrSdtmigVersionDatasetsGet(version: String) -> AnyPublisher<SdtmigDatasets, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/sdtmig/{version}/datasets"
                localVarPath = localVarPath.replacingOccurrences(of: "{version}", with: version)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<SdtmigDatasets, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionDatasetsGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(SdtmigDatasets.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum MdrSdtmigVersionGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrSdtmigVersionGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrSdtmigVersionGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrSdtmigVersionGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrSdtmigVersionGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrSdtmigVersionGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrSdtmigVersionGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrSdtmigVersionGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrSdtmigVersionGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrSdtmigVersionGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/sdtmig/{version}
    /// - Get SDTMIG product
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter version: (path) CDISC Library Product Version 
    /// - returns: AnyPublisher<SdtmigProduct, Error> 
    open func mdrSdtmigVersionGet(version: String) -> AnyPublisher<SdtmigProduct, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/sdtmig/{version}"
                localVarPath = localVarPath.replacingOccurrences(of: "{version}", with: version)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<SdtmigProduct, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrSdtmigVersionGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(SdtmigProduct.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}

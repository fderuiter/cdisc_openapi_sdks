//
// AnalysisDataModelAndImplementationGuideADaMAndADaMIGAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class AnalysisDataModelAndImplementationGuideADaMAndADaMIGAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://library.cdisc.org/api")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    public enum MdrAdamProductDatastructuresGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrAdamProductDatastructuresGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrAdamProductDatastructuresGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrAdamProductDatastructuresGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrAdamProductDatastructuresGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrAdamProductDatastructuresGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrAdamProductDatastructuresGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrAdamProductDatastructuresGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrAdamProductDatastructuresGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrAdamProductDatastructuresGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/adam/{product}/datastructures
    /// - Get ADaM Data Structure List
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter product: (path) CDISC Library Product 
    /// - returns: AnyPublisher<AdamProductDatastructures, Error> 
    open func mdrAdamProductDatastructuresGet(product: String) -> AnyPublisher<AdamProductDatastructures, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/adam/{product}/datastructures"
                localVarPath = localVarPath.replacingOccurrences(of: "{product}", with: product)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<AdamProductDatastructures, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(AdamProductDatastructures.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum MdrAdamProductDatastructuresStructureGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrAdamProductDatastructuresStructureGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrAdamProductDatastructuresStructureGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrAdamProductDatastructuresStructureGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrAdamProductDatastructuresStructureGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrAdamProductDatastructuresStructureGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrAdamProductDatastructuresStructureGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrAdamProductDatastructuresStructureGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrAdamProductDatastructuresStructureGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrAdamProductDatastructuresStructureGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/adam/{product}/datastructures/{structure}
    /// - Get ADaM Data Structure
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter product: (path) CDISC Library Product 
    /// - parameter structure: (path) Data structure Identifier 
    /// - returns: AnyPublisher<AdamDatastructure, Error> 
    open func mdrAdamProductDatastructuresStructureGet(product: String, structure: String) -> AnyPublisher<AdamDatastructure, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/adam/{product}/datastructures/{structure}"
                localVarPath = localVarPath.replacingOccurrences(of: "{product}", with: product)
                localVarPath = localVarPath.replacingOccurrences(of: "{structure}", with: structure)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<AdamDatastructure, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(AdamDatastructure.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum MdrAdamProductDatastructuresStructureVariablesGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrAdamProductDatastructuresStructureVariablesGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrAdamProductDatastructuresStructureVariablesGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrAdamProductDatastructuresStructureVariablesGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrAdamProductDatastructuresStructureVariablesGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrAdamProductDatastructuresStructureVariablesGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrAdamProductDatastructuresStructureVariablesGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrAdamProductDatastructuresStructureVariablesGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrAdamProductDatastructuresStructureVariablesGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrAdamProductDatastructuresStructureVariablesGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/adam/{product}/datastructures/{structure}/variables
    /// - Get ADaM Variable List
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter product: (path) CDISC Library Product 
    /// - parameter structure: (path) ADaM Data Structure Identifier 
    /// - returns: AnyPublisher<AdamDatastructureVariables, Error> 
    open func mdrAdamProductDatastructuresStructureVariablesGet(product: String, structure: String) -> AnyPublisher<AdamDatastructureVariables, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/adam/{product}/datastructures/{structure}/variables"
                localVarPath = localVarPath.replacingOccurrences(of: "{product}", with: product)
                localVarPath = localVarPath.replacingOccurrences(of: "{structure}", with: structure)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<AdamDatastructureVariables, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVariablesGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVariablesGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVariablesGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVariablesGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVariablesGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVariablesGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVariablesGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVariablesGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVariablesGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(AdamDatastructureVariables.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum MdrAdamProductDatastructuresStructureVariablesVarGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrAdamProductDatastructuresStructureVariablesVarGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrAdamProductDatastructuresStructureVariablesVarGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrAdamProductDatastructuresStructureVariablesVarGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrAdamProductDatastructuresStructureVariablesVarGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrAdamProductDatastructuresStructureVariablesVarGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrAdamProductDatastructuresStructureVariablesVarGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrAdamProductDatastructuresStructureVariablesVarGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrAdamProductDatastructuresStructureVariablesVarGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrAdamProductDatastructuresStructureVariablesVarGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/adam/{product}/datastructures/{structure}/variables/{var}
    /// - Get ADaM Variable
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter product: (path) CDISC Library Product 
    /// - parameter structure: (path) ADaM Data Structure Identifier 
    /// - parameter _var: (path) ADaM Variable Identifier 
    /// - returns: AnyPublisher<AdamVariable, Error> 
    open func mdrAdamProductDatastructuresStructureVariablesVarGet(product: String, structure: String, _var: String) -> AnyPublisher<AdamVariable, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/adam/{product}/datastructures/{structure}/variables/{var}"
                localVarPath = localVarPath.replacingOccurrences(of: "{product}", with: product)
                localVarPath = localVarPath.replacingOccurrences(of: "{structure}", with: structure)
                localVarPath = localVarPath.replacingOccurrences(of: "{var}", with: _var)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<AdamVariable, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVariablesVarGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVariablesVarGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVariablesVarGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVariablesVarGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVariablesVarGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVariablesVarGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVariablesVarGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVariablesVarGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVariablesVarGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(AdamVariable.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum MdrAdamProductDatastructuresStructureVarsetsGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrAdamProductDatastructuresStructureVarsetsGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrAdamProductDatastructuresStructureVarsetsGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrAdamProductDatastructuresStructureVarsetsGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrAdamProductDatastructuresStructureVarsetsGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrAdamProductDatastructuresStructureVarsetsGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrAdamProductDatastructuresStructureVarsetsGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrAdamProductDatastructuresStructureVarsetsGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrAdamProductDatastructuresStructureVarsetsGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrAdamProductDatastructuresStructureVarsetsGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/adam/{product}/datastructures/{structure}/varsets
    /// - Get ADaM Variable Set List
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter product: (path) CDISC Library Product 
    /// - parameter structure: (path) ADaM Data Structure Identifier 
    /// - returns: AnyPublisher<AdamDatastructureVarsets, Error> 
    open func mdrAdamProductDatastructuresStructureVarsetsGet(product: String, structure: String) -> AnyPublisher<AdamDatastructureVarsets, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/adam/{product}/datastructures/{structure}/varsets"
                localVarPath = localVarPath.replacingOccurrences(of: "{product}", with: product)
                localVarPath = localVarPath.replacingOccurrences(of: "{structure}", with: structure)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<AdamDatastructureVarsets, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVarsetsGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVarsetsGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVarsetsGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVarsetsGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVarsetsGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVarsetsGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVarsetsGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVarsetsGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVarsetsGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(AdamDatastructureVarsets.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum MdrAdamProductDatastructuresStructureVarsetsVarsetGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrAdamProductDatastructuresStructureVarsetsVarsetGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrAdamProductDatastructuresStructureVarsetsVarsetGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrAdamProductDatastructuresStructureVarsetsVarsetGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrAdamProductDatastructuresStructureVarsetsVarsetGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrAdamProductDatastructuresStructureVarsetsVarsetGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrAdamProductDatastructuresStructureVarsetsVarsetGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrAdamProductDatastructuresStructureVarsetsVarsetGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrAdamProductDatastructuresStructureVarsetsVarsetGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrAdamProductDatastructuresStructureVarsetsVarsetGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/adam/{product}/datastructures/{structure}/varsets/{varset}
    /// - Get ADaM Variable Set
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter product: (path) CDISC Library Product 
    /// - parameter structure: (path) ADaM Data Structure Identifier 
    /// - parameter varset: (path) ADaM Variable Set Identifier 
    /// - returns: AnyPublisher<AdamVarset, Error> 
    open func mdrAdamProductDatastructuresStructureVarsetsVarsetGet(product: String, structure: String, varset: String) -> AnyPublisher<AdamVarset, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/adam/{product}/datastructures/{structure}/varsets/{varset}"
                localVarPath = localVarPath.replacingOccurrences(of: "{product}", with: product)
                localVarPath = localVarPath.replacingOccurrences(of: "{structure}", with: structure)
                localVarPath = localVarPath.replacingOccurrences(of: "{varset}", with: varset)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<AdamVarset, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVarsetsVarsetGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVarsetsVarsetGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVarsetsVarsetGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVarsetsVarsetGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVarsetsVarsetGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVarsetsVarsetGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVarsetsVarsetGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVarsetsVarsetGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductDatastructuresStructureVarsetsVarsetGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(AdamVarset.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum MdrAdamProductGetError: Error, CustomStringConvertible {
        // Bad Request
        case code400Error(DefaultErrorResponse)
        // Unauthorized
        case code401Error(DefaultErrorResponse)
        // Forbidden
        case code403Error(DefaultErrorResponse)
        // Not Found
        case code404Error(DefaultErrorResponse)
        // Method Not Allowed
        case code405Error(DefaultErrorResponse)
        // Not Acceptable
        case code406Error(DefaultErrorResponse)
        // Internal Server Error
        case code500Error(DefaultErrorResponse)
        // Service Unavailable
        case code503Error(DefaultErrorResponse)
        // Gateway Timeout Error
        case code504Error(DefaultErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "MdrAdamProductGetError: Bad Request: \(object)"
            case .code401Error(let object):
                return "MdrAdamProductGetError: Unauthorized: \(object)"
            case .code403Error(let object):
                return "MdrAdamProductGetError: Forbidden: \(object)"
            case .code404Error(let object):
                return "MdrAdamProductGetError: Not Found: \(object)"
            case .code405Error(let object):
                return "MdrAdamProductGetError: Method Not Allowed: \(object)"
            case .code406Error(let object):
                return "MdrAdamProductGetError: Not Acceptable: \(object)"
            case .code500Error(let object):
                return "MdrAdamProductGetError: Internal Server Error: \(object)"
            case .code503Error(let object):
                return "MdrAdamProductGetError: Service Unavailable: \(object)"
            case .code504Error(let object):
                return "MdrAdamProductGetError: Gateway Timeout Error: \(object)"
            }
        }
    }

    /// - GET /mdr/adam/{product}
    /// - Get ADaM Product
    /// - BASIC:
    /// - type: http
    /// - name: basicAuth
    /// - parameter product: (path) CDISC Library Product 
    /// - returns: AnyPublisher<AdamProduct, Error> 
    open func mdrAdamProductGet(product: String) -> AnyPublisher<AdamProduct, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/mdr/adam/{product}"
                localVarPath = localVarPath.replacingOccurrences(of: "{product}", with: product)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<AdamProduct, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductGetError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductGetError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductGetError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductGetError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 405 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductGetError.code405Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductGetError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductGetError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 503 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductGetError.code503Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 504 {
                        do {
                            let error = try self.decoder.decode(DefaultErrorResponse.self, from: transportError.data)
                            return MdrAdamProductGetError.code504Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(AdamProduct.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}

//
// SdtmClassVariable.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct SdtmClassVariable: Codable {
    public var ordinal: String?
    public var name: String?
    public var label: String?
    public var description: String?
    public var role: String?
    public var roleDescription: String?
    public var simpleDatatype: String?
    public var describedValueDomain: String?
    public var links: SdtmClassVariableLinks?

    public init(ordinal: String? = nil, name: String? = nil, label: String? = nil, description: String? = nil, role: String? = nil, roleDescription: String? = nil, simpleDatatype: String? = nil, describedValueDomain: String? = nil, links: SdtmClassVariableLinks? = nil) {
        self.ordinal = ordinal
        self.name = name
        self.label = label
        self.description = description
        self.role = role
        self.roleDescription = roleDescription
        self.simpleDatatype = simpleDatatype
        self.describedValueDomain = describedValueDomain
        self.links = links
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case ordinal
        case name
        case label
        case description
        case role
        case roleDescription
        case simpleDatatype
        case describedValueDomain
        case links = "_links"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        ordinal = try container.decodeIfPresent(String.self, forKey: .ordinal)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        label = try container.decodeIfPresent(String.self, forKey: .label)
        description = try container.decodeIfPresent(String.self, forKey: .description)
        role = try container.decodeIfPresent(String.self, forKey: .role)
        roleDescription = try container.decodeIfPresent(String.self, forKey: .roleDescription)
        simpleDatatype = try container.decodeIfPresent(String.self, forKey: .simpleDatatype)
        describedValueDomain = try container.decodeIfPresent(String.self, forKey: .describedValueDomain)
        links = try container.decodeIfPresent(SdtmClassVariableLinks.self, forKey: .links)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(ordinal, forKey: .ordinal)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(role, forKey: .role)
        try container.encodeIfPresent(roleDescription, forKey: .roleDescription)
        try container.encodeIfPresent(simpleDatatype, forKey: .simpleDatatype)
        try container.encodeIfPresent(describedValueDomain, forKey: .describedValueDomain)
        try container.encodeIfPresent(links, forKey: .links)
    }
}

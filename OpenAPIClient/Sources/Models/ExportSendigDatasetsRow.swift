//
// ExportSendigDatasetsRow.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ExportSendigDatasetsRow: Codable {
    public var version: String?
    public var _class: String?
    public var datasetName: String?
    public var datasetLabel: String?
    public var structure: String?

    public init(version: String? = nil, _class: String? = nil, datasetName: String? = nil, datasetLabel: String? = nil, structure: String? = nil) {
        self.version = version
        self._class = _class
        self.datasetName = datasetName
        self.datasetLabel = datasetLabel
        self.structure = structure
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case version = "Version"
        case _class = "Class"
        case datasetName = "Dataset Name"
        case datasetLabel = "Dataset Label"
        case structure = "Structure"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        version = try container.decodeIfPresent(String.self, forKey: .version)
        _class = try container.decodeIfPresent(String.self, forKey: ._class)
        datasetName = try container.decodeIfPresent(String.self, forKey: .datasetName)
        datasetLabel = try container.decodeIfPresent(String.self, forKey: .datasetLabel)
        structure = try container.decodeIfPresent(String.self, forKey: .structure)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(_class, forKey: ._class)
        try container.encodeIfPresent(datasetName, forKey: .datasetName)
        try container.encodeIfPresent(datasetLabel, forKey: .datasetLabel)
        try container.encodeIfPresent(structure, forKey: .structure)
    }
}

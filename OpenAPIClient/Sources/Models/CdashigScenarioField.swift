//
// CdashigScenarioField.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct CdashigScenarioField: Codable {
    public var ordinal: String?
    public var name: String?
    public var label: String?
    public var definition: String?
    public var questionText: String?
    public var prompt: String?
    public var completionInstructions: String?
    public var implementationNotes: String?
    public var simpleDatatype: String?
    public var mappingInstructions: String?
    public var core: String?
    public var links: CdashigScenarioFieldLinks?

    public init(ordinal: String? = nil, name: String? = nil, label: String? = nil, definition: String? = nil, questionText: String? = nil, prompt: String? = nil, completionInstructions: String? = nil, implementationNotes: String? = nil, simpleDatatype: String? = nil, mappingInstructions: String? = nil, core: String? = nil, links: CdashigScenarioFieldLinks? = nil) {
        self.ordinal = ordinal
        self.name = name
        self.label = label
        self.definition = definition
        self.questionText = questionText
        self.prompt = prompt
        self.completionInstructions = completionInstructions
        self.implementationNotes = implementationNotes
        self.simpleDatatype = simpleDatatype
        self.mappingInstructions = mappingInstructions
        self.core = core
        self.links = links
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case ordinal
        case name
        case label
        case definition
        case questionText
        case prompt
        case completionInstructions
        case implementationNotes
        case simpleDatatype
        case mappingInstructions
        case core
        case links = "_links"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        ordinal = try container.decodeIfPresent(String.self, forKey: .ordinal)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        label = try container.decodeIfPresent(String.self, forKey: .label)
        definition = try container.decodeIfPresent(String.self, forKey: .definition)
        questionText = try container.decodeIfPresent(String.self, forKey: .questionText)
        prompt = try container.decodeIfPresent(String.self, forKey: .prompt)
        completionInstructions = try container.decodeIfPresent(String.self, forKey: .completionInstructions)
        implementationNotes = try container.decodeIfPresent(String.self, forKey: .implementationNotes)
        simpleDatatype = try container.decodeIfPresent(String.self, forKey: .simpleDatatype)
        mappingInstructions = try container.decodeIfPresent(String.self, forKey: .mappingInstructions)
        core = try container.decodeIfPresent(String.self, forKey: .core)
        links = try container.decodeIfPresent(CdashigScenarioFieldLinks.self, forKey: .links)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(ordinal, forKey: .ordinal)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(definition, forKey: .definition)
        try container.encodeIfPresent(questionText, forKey: .questionText)
        try container.encodeIfPresent(prompt, forKey: .prompt)
        try container.encodeIfPresent(completionInstructions, forKey: .completionInstructions)
        try container.encodeIfPresent(implementationNotes, forKey: .implementationNotes)
        try container.encodeIfPresent(simpleDatatype, forKey: .simpleDatatype)
        try container.encodeIfPresent(mappingInstructions, forKey: .mappingInstructions)
        try container.encodeIfPresent(core, forKey: .core)
        try container.encodeIfPresent(links, forKey: .links)
    }
}

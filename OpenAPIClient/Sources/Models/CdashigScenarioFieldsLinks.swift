//
// CdashigScenarioFieldsLinks.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct CdashigScenarioFieldsLinks: Codable {
    public var _self: CdashigScenarioFieldsRef?
    public var parentProduct: CdashigProductRef?
    public var parentClass: CdashigClassRef?
    public var parentDomain: CdashigDomainRef?
    public var fields: [CdashigScenarioFieldRefElement]?

    public init(_self: CdashigScenarioFieldsRef? = nil, parentProduct: CdashigProductRef? = nil, parentClass: CdashigClassRef? = nil, parentDomain: CdashigDomainRef? = nil, fields: [CdashigScenarioFieldRefElement]? = nil) {
        self._self = _self
        self.parentProduct = parentProduct
        self.parentClass = parentClass
        self.parentDomain = parentDomain
        self.fields = fields
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _self = "self"
        case parentProduct
        case parentClass
        case parentDomain
        case fields
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        _self = try container.decodeIfPresent(CdashigScenarioFieldsRef.self, forKey: ._self)
        parentProduct = try container.decodeIfPresent(CdashigProductRef.self, forKey: .parentProduct)
        parentClass = try container.decodeIfPresent(CdashigClassRef.self, forKey: .parentClass)
        parentDomain = try container.decodeIfPresent(CdashigDomainRef.self, forKey: .parentDomain)
        fields = try container.decodeIfPresent([CdashigScenarioFieldRefElement].self, forKey: .fields)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_self, forKey: ._self)
        try container.encodeIfPresent(parentProduct, forKey: .parentProduct)
        try container.encodeIfPresent(parentClass, forKey: .parentClass)
        try container.encodeIfPresent(parentDomain, forKey: .parentDomain)
        try container.encodeIfPresent(fields, forKey: .fields)
    }
}

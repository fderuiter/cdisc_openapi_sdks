//
// QrsProductLinks.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct QrsProductLinks: Codable {
    public var _self: QrsProductRef?
    public var priorVersion: QrsProductRef?
    public var qrsTermCAT: RootCtTermRef?
    public var qrsItems: QrsItemsRef?

    public init(_self: QrsProductRef? = nil, priorVersion: QrsProductRef? = nil, qrsTermCAT: RootCtTermRef? = nil, qrsItems: QrsItemsRef? = nil) {
        self._self = _self
        self.priorVersion = priorVersion
        self.qrsTermCAT = qrsTermCAT
        self.qrsItems = qrsItems
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _self = "self"
        case priorVersion
        case qrsTermCAT
        case qrsItems
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        _self = try container.decodeIfPresent(QrsProductRef.self, forKey: ._self)
        priorVersion = try container.decodeIfPresent(QrsProductRef.self, forKey: .priorVersion)
        qrsTermCAT = try container.decodeIfPresent(RootCtTermRef.self, forKey: .qrsTermCAT)
        qrsItems = try container.decodeIfPresent(QrsItemsRef.self, forKey: .qrsItems)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_self, forKey: ._self)
        try container.encodeIfPresent(priorVersion, forKey: .priorVersion)
        try container.encodeIfPresent(qrsTermCAT, forKey: .qrsTermCAT)
        try container.encodeIfPresent(qrsItems, forKey: .qrsItems)
    }
}

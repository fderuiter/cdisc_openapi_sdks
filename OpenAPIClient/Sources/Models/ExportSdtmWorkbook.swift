//
// ExportSdtmWorkbook.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ExportSdtmWorkbook: Codable {
    public var classVariables: [ExportSdtmClassVariablesRow]?
    public var datasetVariables: [ExportSdtmDatasetVariablesRow]?
    public var datasets: [ExportSdtmDatasetsRow]?

    public init(classVariables: [ExportSdtmClassVariablesRow]? = nil, datasetVariables: [ExportSdtmDatasetVariablesRow]? = nil, datasets: [ExportSdtmDatasetsRow]? = nil) {
        self.classVariables = classVariables
        self.datasetVariables = datasetVariables
        self.datasets = datasets
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case classVariables = "class-variables"
        case datasetVariables = "dataset-variables"
        case datasets
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        classVariables = try container.decodeIfPresent([ExportSdtmClassVariablesRow].self, forKey: .classVariables)
        datasetVariables = try container.decodeIfPresent([ExportSdtmDatasetVariablesRow].self, forKey: .datasetVariables)
        datasets = try container.decodeIfPresent([ExportSdtmDatasetsRow].self, forKey: .datasets)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(classVariables, forKey: .classVariables)
        try container.encodeIfPresent(datasetVariables, forKey: .datasetVariables)
        try container.encodeIfPresent(datasets, forKey: .datasets)
    }
}

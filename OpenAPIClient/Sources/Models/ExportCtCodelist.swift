//
// ExportCtCodelist.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ExportCtCodelist: Codable {
    public var code: String?
    public var codelistCode: String?
    public var codelistExtensibleYesNo: String?
    public var codelistName: String?
    public var cDISCSubmissionValue: String?
    public var cDISCSynonymS: [String]?
    public var cDISCDefinition: String?
    public var nCIPreferredTerm: String?
    public var standardAndDate: String?
    public var : [ExportCtTerm]?

    public init(code: String? = nil, codelistCode: String? = nil, codelistExtensibleYesNo: String? = nil, codelistName: String? = nil, cDISCSubmissionValue: String? = nil, cDISCSynonymS: [String]? = nil, cDISCDefinition: String? = nil, nCIPreferredTerm: String? = nil, standardAndDate: String? = nil, : [ExportCtTerm]? = nil) {
        self.code = code
        self.codelistCode = codelistCode
        self.codelistExtensibleYesNo = codelistExtensibleYesNo
        self.codelistName = codelistName
        self.cDISCSubmissionValue = cDISCSubmissionValue
        self.cDISCSynonymS = cDISCSynonymS
        self.cDISCDefinition = cDISCDefinition
        self.nCIPreferredTerm = nCIPreferredTerm
        self.standardAndDate = standardAndDate
        self. = 
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case code = "Code"
        case codelistCode = "Codelist Code"
        case codelistExtensibleYesNo = "Codelist Extensible (Yes/No)"
        case codelistName = "Codelist Name"
        case cDISCSubmissionValue = "CDISC Submission Value"
        case cDISCSynonymS = "CDISC Synonym(s)"
        case cDISCDefinition = "CDISC Definition"
        case nCIPreferredTerm = "NCI Preferred Term"
        case standardAndDate = "Standard and Date"
        case 
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        code = try container.decodeIfPresent(String.self, forKey: .code)
        codelistCode = try container.decodeIfPresent(String.self, forKey: .codelistCode)
        codelistExtensibleYesNo = try container.decodeIfPresent(String.self, forKey: .codelistExtensibleYesNo)
        codelistName = try container.decodeIfPresent(String.self, forKey: .codelistName)
        cDISCSubmissionValue = try container.decodeIfPresent(String.self, forKey: .cDISCSubmissionValue)
        cDISCSynonymS = try container.decodeIfPresent([String].self, forKey: .cDISCSynonymS)
        cDISCDefinition = try container.decodeIfPresent(String.self, forKey: .cDISCDefinition)
        nCIPreferredTerm = try container.decodeIfPresent(String.self, forKey: .nCIPreferredTerm)
        standardAndDate = try container.decodeIfPresent(String.self, forKey: .standardAndDate)
         = try container.decodeIfPresent([ExportCtTerm].self, forKey: .)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(codelistCode, forKey: .codelistCode)
        try container.encodeIfPresent(codelistExtensibleYesNo, forKey: .codelistExtensibleYesNo)
        try container.encodeIfPresent(codelistName, forKey: .codelistName)
        try container.encodeIfPresent(cDISCSubmissionValue, forKey: .cDISCSubmissionValue)
        try container.encodeIfPresent(cDISCSynonymS, forKey: .cDISCSynonymS)
        try container.encodeIfPresent(cDISCDefinition, forKey: .cDISCDefinition)
        try container.encodeIfPresent(nCIPreferredTerm, forKey: .nCIPreferredTerm)
        try container.encodeIfPresent(standardAndDate, forKey: .standardAndDate)
        try container.encodeIfPresent(, forKey: .)
    }
}

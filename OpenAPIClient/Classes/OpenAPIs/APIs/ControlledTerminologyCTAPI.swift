//
// ControlledTerminologyCTAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ControlledTerminologyCTAPI {

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCtPackagesGet(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CtPackages?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCtPackagesGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/ct/packages
     - Get CDISC Library CT Package List
     - BASIC:
       - type: http
       - name: basicAuth
     - returns: RequestBuilder<CtPackages> 
     */
    open class func mdrCtPackagesGetWithRequestBuilder() -> RequestBuilder<CtPackages> {
        let localVariablePath = "/mdr/ct/packages"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CtPackages>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter package: (path) CT Package Identifier 
     - parameter codelist: (path) CT Codelist Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCtPackagesPackageCodelistsCodelistGet(package: String, codelist: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CtCodelist?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCtPackagesPackageCodelistsCodelistGetWithRequestBuilder(package: package, codelist: codelist).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/ct/packages/{package}/codelists/{codelist}
     - Get CDISC Library CT Package Codelist
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter package: (path) CT Package Identifier 
     - parameter codelist: (path) CT Codelist Identifier 
     - returns: RequestBuilder<CtCodelist> 
     */
    open class func mdrCtPackagesPackageCodelistsCodelistGetWithRequestBuilder(package: String, codelist: String) -> RequestBuilder<CtCodelist> {
        var localVariablePath = "/mdr/ct/packages/{package}/codelists/{codelist}"
        let packagePreEscape = "\(APIHelper.mapValueToPathItem(package))"
        let packagePostEscape = packagePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{package}", with: packagePostEscape, options: .literal, range: nil)
        let codelistPreEscape = "\(APIHelper.mapValueToPathItem(codelist))"
        let codelistPostEscape = codelistPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{codelist}", with: codelistPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CtCodelist>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter package: (path) CT Package Identifier 
     - parameter codelist: (path) CT Codelist Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCtPackagesPackageCodelistsCodelistTermsGet(package: String, codelist: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CtCodelistTerms?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCtPackagesPackageCodelistsCodelistTermsGetWithRequestBuilder(package: package, codelist: codelist).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/ct/packages/{package}/codelists/{codelist}/terms
     - Get CDISC Library CT Package Codelist Term List
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter package: (path) CT Package Identifier 
     - parameter codelist: (path) CT Codelist Identifier 
     - returns: RequestBuilder<CtCodelistTerms> 
     */
    open class func mdrCtPackagesPackageCodelistsCodelistTermsGetWithRequestBuilder(package: String, codelist: String) -> RequestBuilder<CtCodelistTerms> {
        var localVariablePath = "/mdr/ct/packages/{package}/codelists/{codelist}/terms"
        let packagePreEscape = "\(APIHelper.mapValueToPathItem(package))"
        let packagePostEscape = packagePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{package}", with: packagePostEscape, options: .literal, range: nil)
        let codelistPreEscape = "\(APIHelper.mapValueToPathItem(codelist))"
        let codelistPostEscape = codelistPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{codelist}", with: codelistPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CtCodelistTerms>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter package: (path) CT Package Product Identifier 
     - parameter codelist: (path) CT Codelist Identifier 
     - parameter term: (path) CT Codelist Term Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCtPackagesPackageCodelistsCodelistTermsTermGet(package: String, codelist: String, term: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CtTerm?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCtPackagesPackageCodelistsCodelistTermsTermGetWithRequestBuilder(package: package, codelist: codelist, term: term).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/ct/packages/{package}/codelists/{codelist}/terms/{term}
     - Get CDISC Library CT Package Codelist Term
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter package: (path) CT Package Product Identifier 
     - parameter codelist: (path) CT Codelist Identifier 
     - parameter term: (path) CT Codelist Term Identifier 
     - returns: RequestBuilder<CtTerm> 
     */
    open class func mdrCtPackagesPackageCodelistsCodelistTermsTermGetWithRequestBuilder(package: String, codelist: String, term: String) -> RequestBuilder<CtTerm> {
        var localVariablePath = "/mdr/ct/packages/{package}/codelists/{codelist}/terms/{term}"
        let packagePreEscape = "\(APIHelper.mapValueToPathItem(package))"
        let packagePostEscape = packagePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{package}", with: packagePostEscape, options: .literal, range: nil)
        let codelistPreEscape = "\(APIHelper.mapValueToPathItem(codelist))"
        let codelistPostEscape = codelistPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{codelist}", with: codelistPostEscape, options: .literal, range: nil)
        let termPreEscape = "\(APIHelper.mapValueToPathItem(term))"
        let termPostEscape = termPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{term}", with: termPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CtTerm>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter package: (path) CT Package Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCtPackagesPackageCodelistsGet(package: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CtPackageCodelists?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCtPackagesPackageCodelistsGetWithRequestBuilder(package: package).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/ct/packages/{package}/codelists
     - Get CDISC Library CT Package Codelist List
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter package: (path) CT Package Identifier 
     - returns: RequestBuilder<CtPackageCodelists> 
     */
    open class func mdrCtPackagesPackageCodelistsGetWithRequestBuilder(package: String) -> RequestBuilder<CtPackageCodelists> {
        var localVariablePath = "/mdr/ct/packages/{package}/codelists"
        let packagePreEscape = "\(APIHelper.mapValueToPathItem(package))"
        let packagePostEscape = packagePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{package}", with: packagePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CtPackageCodelists>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter product: (path) CT Package Product Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrCtPackagesProductGet(product: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CtPackage?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrCtPackagesProductGetWithRequestBuilder(product: product).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/ct/packages/{product}
     - Get CDISC Library CT Package
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter product: (path) CT Package Product Identifier 
     - returns: RequestBuilder<CtPackage> 
     */
    open class func mdrCtPackagesProductGetWithRequestBuilder(product: String) -> RequestBuilder<CtPackage> {
        var localVariablePath = "/mdr/ct/packages/{product}"
        let productPreEscape = "\(APIHelper.mapValueToPathItem(product))"
        let productPostEscape = productPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{product}", with: productPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CtPackage>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter productGroup: (path) CT Product Group Identifier 
     - parameter codelist: (path) CT Codelist Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrRootCtProductGroupCodelistsCodelistGet(productGroup: String, codelist: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RootCtCodelist?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrRootCtProductGroupCodelistsCodelistGetWithRequestBuilder(productGroup: productGroup, codelist: codelist).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/root/ct/{productGroup}/codelists/{codelist}
     - Get CDISC Library Root CT Codelist
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter productGroup: (path) CT Product Group Identifier 
     - parameter codelist: (path) CT Codelist Identifier 
     - returns: RequestBuilder<RootCtCodelist> 
     */
    open class func mdrRootCtProductGroupCodelistsCodelistGetWithRequestBuilder(productGroup: String, codelist: String) -> RequestBuilder<RootCtCodelist> {
        var localVariablePath = "/mdr/root/ct/{productGroup}/codelists/{codelist}"
        let productGroupPreEscape = "\(APIHelper.mapValueToPathItem(productGroup))"
        let productGroupPostEscape = productGroupPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{productGroup}", with: productGroupPostEscape, options: .literal, range: nil)
        let codelistPreEscape = "\(APIHelper.mapValueToPathItem(codelist))"
        let codelistPostEscape = codelistPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{codelist}", with: codelistPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RootCtCodelist>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter productGroup: (path) CT Product Group Identifier 
     - parameter codelist: (path) CT Codelist Identifier 
     - parameter term: (path) CT Codelist Term Identifier 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mdrRootCtProductGroupCodelistsCodelistTermsTermGet(productGroup: String, codelist: String, term: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RootCtTerm?, _ error: Error?) -> Void)) -> RequestTask {
        return mdrRootCtProductGroupCodelistsCodelistTermsTermGetWithRequestBuilder(productGroup: productGroup, codelist: codelist, term: term).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /mdr/root/ct/{productGroup}/codelists/{codelist}/terms/{term}
     - Get CDISC Library Root CT Term
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter productGroup: (path) CT Product Group Identifier 
     - parameter codelist: (path) CT Codelist Identifier 
     - parameter term: (path) CT Codelist Term Identifier 
     - returns: RequestBuilder<RootCtTerm> 
     */
    open class func mdrRootCtProductGroupCodelistsCodelistTermsTermGetWithRequestBuilder(productGroup: String, codelist: String, term: String) -> RequestBuilder<RootCtTerm> {
        var localVariablePath = "/mdr/root/ct/{productGroup}/codelists/{codelist}/terms/{term}"
        let productGroupPreEscape = "\(APIHelper.mapValueToPathItem(productGroup))"
        let productGroupPostEscape = productGroupPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{productGroup}", with: productGroupPostEscape, options: .literal, range: nil)
        let codelistPreEscape = "\(APIHelper.mapValueToPathItem(codelist))"
        let codelistPostEscape = codelistPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{codelist}", with: codelistPostEscape, options: .literal, range: nil)
        let termPreEscape = "\(APIHelper.mapValueToPathItem(term))"
        let termPostEscape = termPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{term}", with: termPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RootCtTerm>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}

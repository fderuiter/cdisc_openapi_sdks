//
// Lastupdated.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Lastupdated: Codable, JSONEncodable, Hashable {

    public var links: LastupdatedLinks?
    public var overall: String?
    public var dataAnalysis: String?
    public var dataCollection: String?
    public var dataTabulation: String?
    public var measure: String?
    public var terminology: String?

    public init(links: LastupdatedLinks? = nil, overall: String? = nil, dataAnalysis: String? = nil, dataCollection: String? = nil, dataTabulation: String? = nil, measure: String? = nil, terminology: String? = nil) {
        self.links = links
        self.overall = overall
        self.dataAnalysis = dataAnalysis
        self.dataCollection = dataCollection
        self.dataTabulation = dataTabulation
        self.measure = measure
        self.terminology = terminology
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case links = "_links"
        case overall
        case dataAnalysis = "data-analysis"
        case dataCollection = "data-collection"
        case dataTabulation = "data-tabulation"
        case measure
        case terminology
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(links, forKey: .links)
        try container.encodeIfPresent(overall, forKey: .overall)
        try container.encodeIfPresent(dataAnalysis, forKey: .dataAnalysis)
        try container.encodeIfPresent(dataCollection, forKey: .dataCollection)
        try container.encodeIfPresent(dataTabulation, forKey: .dataTabulation)
        try container.encodeIfPresent(measure, forKey: .measure)
        try container.encodeIfPresent(terminology, forKey: .terminology)
    }
}


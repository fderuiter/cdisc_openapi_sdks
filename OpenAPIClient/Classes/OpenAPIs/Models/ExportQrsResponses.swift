//
// ExportQrsResponses.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ExportQrsResponses: Codable, JSONEncodable, Hashable {

    public var responseGroup: String?
    public var sequence: String?
    public var responsesOriginalResultCodelistCCode: String?
    public var responsesOriginalResultTermCCode: String?
    public var responsesOriginalResultUnitCodelistCCode: String?
    public var responsesOriginalResultUnitTermCCode: String?
    public var responsesStandardizedResultCodelistCCode: String?
    public var responsesStandardizedResultTermCCode: String?
    public var responsesStandardizedResultUnitCodelistCCode: String?
    public var responsesStandardizedResultUnitTermCCode: String?

    public init(responseGroup: String? = nil, sequence: String? = nil, responsesOriginalResultCodelistCCode: String? = nil, responsesOriginalResultTermCCode: String? = nil, responsesOriginalResultUnitCodelistCCode: String? = nil, responsesOriginalResultUnitTermCCode: String? = nil, responsesStandardizedResultCodelistCCode: String? = nil, responsesStandardizedResultTermCCode: String? = nil, responsesStandardizedResultUnitCodelistCCode: String? = nil, responsesStandardizedResultUnitTermCCode: String? = nil) {
        self.responseGroup = responseGroup
        self.sequence = sequence
        self.responsesOriginalResultCodelistCCode = responsesOriginalResultCodelistCCode
        self.responsesOriginalResultTermCCode = responsesOriginalResultTermCCode
        self.responsesOriginalResultUnitCodelistCCode = responsesOriginalResultUnitCodelistCCode
        self.responsesOriginalResultUnitTermCCode = responsesOriginalResultUnitTermCCode
        self.responsesStandardizedResultCodelistCCode = responsesStandardizedResultCodelistCCode
        self.responsesStandardizedResultTermCCode = responsesStandardizedResultTermCCode
        self.responsesStandardizedResultUnitCodelistCCode = responsesStandardizedResultUnitCodelistCCode
        self.responsesStandardizedResultUnitTermCCode = responsesStandardizedResultUnitTermCCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case responseGroup = "Response Group"
        case sequence = "Sequence"
        case responsesOriginalResultCodelistCCode = "Response's Original Result Codelist C-Code"
        case responsesOriginalResultTermCCode = "Response's Original Result Term C-Code"
        case responsesOriginalResultUnitCodelistCCode = "Response's Original Result Unit Codelist C-Code"
        case responsesOriginalResultUnitTermCCode = "Response's Original Result Unit Term C-Code"
        case responsesStandardizedResultCodelistCCode = "Response's Standardized Result Codelist C-Code"
        case responsesStandardizedResultTermCCode = "Response's Standardized Result Term C-Code"
        case responsesStandardizedResultUnitCodelistCCode = "Response's Standardized Result Unit Codelist C-Code"
        case responsesStandardizedResultUnitTermCCode = "Response's Standardized Result Unit Term C-Code"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(responseGroup, forKey: .responseGroup)
        try container.encodeIfPresent(sequence, forKey: .sequence)
        try container.encodeIfPresent(responsesOriginalResultCodelistCCode, forKey: .responsesOriginalResultCodelistCCode)
        try container.encodeIfPresent(responsesOriginalResultTermCCode, forKey: .responsesOriginalResultTermCCode)
        try container.encodeIfPresent(responsesOriginalResultUnitCodelistCCode, forKey: .responsesOriginalResultUnitCodelistCCode)
        try container.encodeIfPresent(responsesOriginalResultUnitTermCCode, forKey: .responsesOriginalResultUnitTermCCode)
        try container.encodeIfPresent(responsesStandardizedResultCodelistCCode, forKey: .responsesStandardizedResultCodelistCCode)
        try container.encodeIfPresent(responsesStandardizedResultTermCCode, forKey: .responsesStandardizedResultTermCCode)
        try container.encodeIfPresent(responsesStandardizedResultUnitCodelistCCode, forKey: .responsesStandardizedResultUnitCodelistCCode)
        try container.encodeIfPresent(responsesStandardizedResultUnitTermCCode, forKey: .responsesStandardizedResultUnitTermCCode)
    }
}


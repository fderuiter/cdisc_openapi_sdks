//
// ExportAdamVariablesRow.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ExportAdamVariablesRow: Codable, JSONEncodable, Hashable {

    public var version: String?
    public var dataStructureName: String?
    public var datasetName: String?
    public var variableGroup: String?
    public var variableName: String?
    public var variableLabel: String?
    public var type: String?
    public var codelistControlledTerms: String?
    public var core: String?
    public var cDISCNotes: String?

    public init(version: String? = nil, dataStructureName: String? = nil, datasetName: String? = nil, variableGroup: String? = nil, variableName: String? = nil, variableLabel: String? = nil, type: String? = nil, codelistControlledTerms: String? = nil, core: String? = nil, cDISCNotes: String? = nil) {
        self.version = version
        self.dataStructureName = dataStructureName
        self.datasetName = datasetName
        self.variableGroup = variableGroup
        self.variableName = variableName
        self.variableLabel = variableLabel
        self.type = type
        self.codelistControlledTerms = codelistControlledTerms
        self.core = core
        self.cDISCNotes = cDISCNotes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case version = "Version"
        case dataStructureName = "Data Structure Name"
        case datasetName = "Dataset Name"
        case variableGroup = "Variable Group"
        case variableName = "Variable Name"
        case variableLabel = "Variable Label"
        case type = "Type"
        case codelistControlledTerms = "Codelist/Controlled Terms"
        case core = "Core"
        case cDISCNotes = "CDISC Notes"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(dataStructureName, forKey: .dataStructureName)
        try container.encodeIfPresent(datasetName, forKey: .datasetName)
        try container.encodeIfPresent(variableGroup, forKey: .variableGroup)
        try container.encodeIfPresent(variableName, forKey: .variableName)
        try container.encodeIfPresent(variableLabel, forKey: .variableLabel)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(codelistControlledTerms, forKey: .codelistControlledTerms)
        try container.encodeIfPresent(core, forKey: .core)
        try container.encodeIfPresent(cDISCNotes, forKey: .cDISCNotes)
    }
}


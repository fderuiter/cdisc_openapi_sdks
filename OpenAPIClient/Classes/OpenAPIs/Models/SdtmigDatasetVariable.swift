//
// SdtmigDatasetVariable.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SdtmigDatasetVariable: Codable, JSONEncodable, Hashable {

    public var ordinal: String?
    public var name: String?
    public var label: String?
    public var description: String?
    public var role: String?
    public var simpleDatatype: String?
    public var core: String?
    public var describedValueDomain: String?
    public var valueList: [String]?
    public var links: SdtmigDatasetVariableLinks?

    public init(ordinal: String? = nil, name: String? = nil, label: String? = nil, description: String? = nil, role: String? = nil, simpleDatatype: String? = nil, core: String? = nil, describedValueDomain: String? = nil, valueList: [String]? = nil, links: SdtmigDatasetVariableLinks? = nil) {
        self.ordinal = ordinal
        self.name = name
        self.label = label
        self.description = description
        self.role = role
        self.simpleDatatype = simpleDatatype
        self.core = core
        self.describedValueDomain = describedValueDomain
        self.valueList = valueList
        self.links = links
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case ordinal
        case name
        case label
        case description
        case role
        case simpleDatatype
        case core
        case describedValueDomain
        case valueList
        case links = "_links"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(ordinal, forKey: .ordinal)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(role, forKey: .role)
        try container.encodeIfPresent(simpleDatatype, forKey: .simpleDatatype)
        try container.encodeIfPresent(core, forKey: .core)
        try container.encodeIfPresent(describedValueDomain, forKey: .describedValueDomain)
        try container.encodeIfPresent(valueList, forKey: .valueList)
        try container.encodeIfPresent(links, forKey: .links)
    }
}


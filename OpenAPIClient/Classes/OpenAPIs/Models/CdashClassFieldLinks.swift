//
// CdashClassFieldLinks.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CdashClassFieldLinks: Codable, JSONEncodable, Hashable {

    public var _self: CdashClassFieldRef?
    public var codelist: [RootCtCodelistRefElement]?
    public var parentProduct: CdashProductRef?
    public var parentClass: CdashClassRef?
    public var rootItem: RootCdashClassFieldRef?
    public var priorVersion: CdashClassFieldRef?
    public var sdtmClassMappingTargets: [SdtmClassVariableRefTarget]?
    public var sdtmDatasetMappingTargets: [SdtmDatasetVariableRefTarget]?

    public init(_self: CdashClassFieldRef? = nil, codelist: [RootCtCodelistRefElement]? = nil, parentProduct: CdashProductRef? = nil, parentClass: CdashClassRef? = nil, rootItem: RootCdashClassFieldRef? = nil, priorVersion: CdashClassFieldRef? = nil, sdtmClassMappingTargets: [SdtmClassVariableRefTarget]? = nil, sdtmDatasetMappingTargets: [SdtmDatasetVariableRefTarget]? = nil) {
        self._self = _self
        self.codelist = codelist
        self.parentProduct = parentProduct
        self.parentClass = parentClass
        self.rootItem = rootItem
        self.priorVersion = priorVersion
        self.sdtmClassMappingTargets = sdtmClassMappingTargets
        self.sdtmDatasetMappingTargets = sdtmDatasetMappingTargets
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _self = "self"
        case codelist
        case parentProduct
        case parentClass
        case rootItem
        case priorVersion
        case sdtmClassMappingTargets
        case sdtmDatasetMappingTargets
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_self, forKey: ._self)
        try container.encodeIfPresent(codelist, forKey: .codelist)
        try container.encodeIfPresent(parentProduct, forKey: .parentProduct)
        try container.encodeIfPresent(parentClass, forKey: .parentClass)
        try container.encodeIfPresent(rootItem, forKey: .rootItem)
        try container.encodeIfPresent(priorVersion, forKey: .priorVersion)
        try container.encodeIfPresent(sdtmClassMappingTargets, forKey: .sdtmClassMappingTargets)
        try container.encodeIfPresent(sdtmDatasetMappingTargets, forKey: .sdtmDatasetMappingTargets)
    }
}


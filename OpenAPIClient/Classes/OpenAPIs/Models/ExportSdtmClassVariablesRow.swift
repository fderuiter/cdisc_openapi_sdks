//
// ExportSdtmClassVariablesRow.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ExportSdtmClassVariablesRow: Codable, JSONEncodable, Hashable {

    public var version: String?
    public var variableOrder: String?
    public var _class: String?
    public var datasetName: String?
    public var variableName: String?
    public var variableLabel: String?
    public var type: String?
    public var controlledTermsCodelistOrFormat: String?
    public var role: String?
    public var roleDescription: String?
    public var description: String?

    public init(version: String? = nil, variableOrder: String? = nil, _class: String? = nil, datasetName: String? = nil, variableName: String? = nil, variableLabel: String? = nil, type: String? = nil, controlledTermsCodelistOrFormat: String? = nil, role: String? = nil, roleDescription: String? = nil, description: String? = nil) {
        self.version = version
        self.variableOrder = variableOrder
        self._class = _class
        self.datasetName = datasetName
        self.variableName = variableName
        self.variableLabel = variableLabel
        self.type = type
        self.controlledTermsCodelistOrFormat = controlledTermsCodelistOrFormat
        self.role = role
        self.roleDescription = roleDescription
        self.description = description
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case version = "Version"
        case variableOrder = "Variable Order"
        case _class = "Class"
        case datasetName = "Dataset Name"
        case variableName = "Variable Name"
        case variableLabel = "Variable Label"
        case type = "Type"
        case controlledTermsCodelistOrFormat = "Controlled Terms, Codelist or Format"
        case role = "Role"
        case roleDescription = "Role Description"
        case description = "Description"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(variableOrder, forKey: .variableOrder)
        try container.encodeIfPresent(_class, forKey: ._class)
        try container.encodeIfPresent(datasetName, forKey: .datasetName)
        try container.encodeIfPresent(variableName, forKey: .variableName)
        try container.encodeIfPresent(variableLabel, forKey: .variableLabel)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(controlledTermsCodelistOrFormat, forKey: .controlledTermsCodelistOrFormat)
        try container.encodeIfPresent(role, forKey: .role)
        try container.encodeIfPresent(roleDescription, forKey: .roleDescription)
        try container.encodeIfPresent(description, forKey: .description)
    }
}


/*
CDISC Library API

Testing AnalysisDataModelAndImplementationGuideADaMAndADaMIGAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_AnalysisDataModelAndImplementationGuideADaMAndADaMIGAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AnalysisDataModelAndImplementationGuideADaMAndADaMIGAPIService MdrAdamProductDatastructuresGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var product string

		resp, httpRes, err := apiClient.AnalysisDataModelAndImplementationGuideADaMAndADaMIGAPI.MdrAdamProductDatastructuresGet(context.Background(), product).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalysisDataModelAndImplementationGuideADaMAndADaMIGAPIService MdrAdamProductDatastructuresStructureGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var product string
		var structure string

		resp, httpRes, err := apiClient.AnalysisDataModelAndImplementationGuideADaMAndADaMIGAPI.MdrAdamProductDatastructuresStructureGet(context.Background(), product, structure).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalysisDataModelAndImplementationGuideADaMAndADaMIGAPIService MdrAdamProductDatastructuresStructureVariablesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var product string
		var structure string

		resp, httpRes, err := apiClient.AnalysisDataModelAndImplementationGuideADaMAndADaMIGAPI.MdrAdamProductDatastructuresStructureVariablesGet(context.Background(), product, structure).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalysisDataModelAndImplementationGuideADaMAndADaMIGAPIService MdrAdamProductDatastructuresStructureVariablesVarGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var product string
		var structure string
		var var_ string

		resp, httpRes, err := apiClient.AnalysisDataModelAndImplementationGuideADaMAndADaMIGAPI.MdrAdamProductDatastructuresStructureVariablesVarGet(context.Background(), product, structure, var_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalysisDataModelAndImplementationGuideADaMAndADaMIGAPIService MdrAdamProductDatastructuresStructureVarsetsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var product string
		var structure string

		resp, httpRes, err := apiClient.AnalysisDataModelAndImplementationGuideADaMAndADaMIGAPI.MdrAdamProductDatastructuresStructureVarsetsGet(context.Background(), product, structure).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalysisDataModelAndImplementationGuideADaMAndADaMIGAPIService MdrAdamProductDatastructuresStructureVarsetsVarsetGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var product string
		var structure string
		var varset string

		resp, httpRes, err := apiClient.AnalysisDataModelAndImplementationGuideADaMAndADaMIGAPI.MdrAdamProductDatastructuresStructureVarsetsVarsetGet(context.Background(), product, structure, varset).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AnalysisDataModelAndImplementationGuideADaMAndADaMIGAPIService MdrAdamProductGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var product string

		resp, httpRes, err := apiClient.AnalysisDataModelAndImplementationGuideADaMAndADaMIGAPI.MdrAdamProductGet(context.Background(), product).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

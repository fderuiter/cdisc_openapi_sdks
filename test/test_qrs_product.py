# coding: utf-8

"""
    CDISC Library API

    REST API Documentation for CDISC Library in production server

    The version of the OpenAPI document: 1.1.0
    Contact: cdisc_library_support@cdisc.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.qrs_product import QrsProduct  # noqa: E501

class TestQrsProduct(unittest.TestCase):
    """QrsProduct unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> QrsProduct:
        """Test QrsProduct
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `QrsProduct`
        """
        model = QrsProduct()  # noqa: E501
        if include_optional:
            return QrsProduct(
                name = 'AIMS v1.0',
                label = 'Abnormal Involuntary Movement Scale Version 1.0',
                description = 'Abnormal Involuntary Movement Scale (AIMS) (Guy W. Ed. ECDEU Assessment Manual for Psychopharmacology. Rockville MD: US Dept of Health, Education and Welfare. 1976, Publication No. (ADM) 76-338).',
                effective_date = '2013-05-22',
                until_date = '2030-12-31',
                registration_status = 'Final',
                version = '1-0',
                qrs_type = 'Questionnaire',
                links = openapi_client.models.qrs_product_links.QrsProductLinks(
                    self = openapi_client.models.qrs_product_ref.QrsProductRef(
                        href = '/mdr/qrs/AIMS01/1-0', 
                        title = 'Abnormal Involuntary Movement Scale Version 1.0', 
                        type = 'QRS Measure', ), 
                    prior_version = openapi_client.models.qrs_product_ref.QrsProductRef(
                        href = '/mdr/qrs/AIMS01/1-0', 
                        title = 'Abnormal Involuntary Movement Scale Version 1.0', 
                        type = 'QRS Measure', ), 
                    qrs_term_cat = openapi_client.models.root_ct_term_ref.RootCtTermRef(
                        href = '/mdr/root/ct/sdtmct/codelists/C67154/terms/C105585', 
                        title = 'Version-agnostic anchor resource for codelist term C67154.C105585', 
                        type = 'Root Value', ), 
                    qrs_items = openapi_client.models.qrs_items_ref.QrsItemsRef(
                        href = '/mdr/qrs/AIMS01/1-0/items/AIMS01.001', 
                        title = 'AIMS01-Muscles of Facial Expression', 
                        type = 'QRS Item List', ), ),
                items = [
                    openapi_client.models.qrs_item.QrsItem(
                        ordinal = '1', 
                        label = 'AIMS01-Muscles of Facial Expression', 
                        question_text = 'Abnormal Involuntary Movement Scale - Facial and Oral Movements, Muscles of facial expression, e.g., movements of forehead, eyebrows, periorbital area, cheeks. Include frowning, blinking, grimacing of upper face.', 
                        _links = openapi_client.models.qrs_item_links.QrsItemLinks(
                            qrs_item_test = openapi_client.models.root_ct_term_ref.RootCtTermRef(
                                href = '/mdr/root/ct/sdtmct/codelists/C67154/terms/C105585', 
                                title = 'Version-agnostic anchor resource for codelist term C67154.C105585', 
                                type = 'Root Value', ), 
                            qrs_item_testcd = openapi_client.models.root_ct_term_ref.RootCtTermRef(
                                href = '/mdr/root/ct/sdtmct/codelists/C67154/terms/C105585', 
                                title = 'Version-agnostic anchor resource for codelist term C67154.C105585', 
                                type = 'Root Value', ), 
                            qrs_item_eval = , 
                            qrs_item_scat = , 
                            responsegroup = openapi_client.models.qrs_responsegroup.QrsResponsegroup(
                                label = '01 to 08', ), ), )
                    ]
            )
        else:
            return QrsProduct(
        )
        """

    def testQrsProduct(self):
        """Test QrsProduct"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

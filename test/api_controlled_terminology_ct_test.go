/*
CDISC Library API

Testing ControlledTerminologyCTAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ControlledTerminologyCTAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ControlledTerminologyCTAPIService MdrCtPackagesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ControlledTerminologyCTAPI.MdrCtPackagesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ControlledTerminologyCTAPIService MdrCtPackagesPackageCodelistsCodelistGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var package_ string
		var codelist string

		resp, httpRes, err := apiClient.ControlledTerminologyCTAPI.MdrCtPackagesPackageCodelistsCodelistGet(context.Background(), package_, codelist).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ControlledTerminologyCTAPIService MdrCtPackagesPackageCodelistsCodelistTermsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var package_ string
		var codelist string

		resp, httpRes, err := apiClient.ControlledTerminologyCTAPI.MdrCtPackagesPackageCodelistsCodelistTermsGet(context.Background(), package_, codelist).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ControlledTerminologyCTAPIService MdrCtPackagesPackageCodelistsCodelistTermsTermGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var package_ string
		var codelist string
		var term string

		resp, httpRes, err := apiClient.ControlledTerminologyCTAPI.MdrCtPackagesPackageCodelistsCodelistTermsTermGet(context.Background(), package_, codelist, term).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ControlledTerminologyCTAPIService MdrCtPackagesPackageCodelistsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var package_ string

		resp, httpRes, err := apiClient.ControlledTerminologyCTAPI.MdrCtPackagesPackageCodelistsGet(context.Background(), package_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ControlledTerminologyCTAPIService MdrCtPackagesProductGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var product string

		resp, httpRes, err := apiClient.ControlledTerminologyCTAPI.MdrCtPackagesProductGet(context.Background(), product).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ControlledTerminologyCTAPIService MdrRootCtProductGroupCodelistsCodelistGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productGroup string
		var codelist string

		resp, httpRes, err := apiClient.ControlledTerminologyCTAPI.MdrRootCtProductGroupCodelistsCodelistGet(context.Background(), productGroup, codelist).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ControlledTerminologyCTAPIService MdrRootCtProductGroupCodelistsCodelistTermsTermGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var productGroup string
		var codelist string
		var term string

		resp, httpRes, err := apiClient.ControlledTerminologyCTAPI.MdrRootCtProductGroupCodelistsCodelistTermsTermGet(context.Background(), productGroup, codelist, term).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

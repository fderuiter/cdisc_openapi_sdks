/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExportCdashTable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportCdashTable{}

// ExportCdashTable struct for ExportCdashTable
type ExportCdashTable struct {
	ClassVariables []ExportCdashClassVariablesRow `json:"class-variables,omitempty"`
	DomainVariables []ExportCdashDomainVariablesRow `json:"domain-variables,omitempty"`
}

// NewExportCdashTable instantiates a new ExportCdashTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportCdashTable() *ExportCdashTable {
	this := ExportCdashTable{}
	return &this
}

// NewExportCdashTableWithDefaults instantiates a new ExportCdashTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportCdashTableWithDefaults() *ExportCdashTable {
	this := ExportCdashTable{}
	return &this
}

// GetClassVariables returns the ClassVariables field value if set, zero value otherwise.
func (o *ExportCdashTable) GetClassVariables() []ExportCdashClassVariablesRow {
	if o == nil || IsNil(o.ClassVariables) {
		var ret []ExportCdashClassVariablesRow
		return ret
	}
	return o.ClassVariables
}

// GetClassVariablesOk returns a tuple with the ClassVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCdashTable) GetClassVariablesOk() ([]ExportCdashClassVariablesRow, bool) {
	if o == nil || IsNil(o.ClassVariables) {
		return nil, false
	}
	return o.ClassVariables, true
}

// HasClassVariables returns a boolean if a field has been set.
func (o *ExportCdashTable) HasClassVariables() bool {
	if o != nil && !IsNil(o.ClassVariables) {
		return true
	}

	return false
}

// SetClassVariables gets a reference to the given []ExportCdashClassVariablesRow and assigns it to the ClassVariables field.
func (o *ExportCdashTable) SetClassVariables(v []ExportCdashClassVariablesRow) {
	o.ClassVariables = v
}

// GetDomainVariables returns the DomainVariables field value if set, zero value otherwise.
func (o *ExportCdashTable) GetDomainVariables() []ExportCdashDomainVariablesRow {
	if o == nil || IsNil(o.DomainVariables) {
		var ret []ExportCdashDomainVariablesRow
		return ret
	}
	return o.DomainVariables
}

// GetDomainVariablesOk returns a tuple with the DomainVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCdashTable) GetDomainVariablesOk() ([]ExportCdashDomainVariablesRow, bool) {
	if o == nil || IsNil(o.DomainVariables) {
		return nil, false
	}
	return o.DomainVariables, true
}

// HasDomainVariables returns a boolean if a field has been set.
func (o *ExportCdashTable) HasDomainVariables() bool {
	if o != nil && !IsNil(o.DomainVariables) {
		return true
	}

	return false
}

// SetDomainVariables gets a reference to the given []ExportCdashDomainVariablesRow and assigns it to the DomainVariables field.
func (o *ExportCdashTable) SetDomainVariables(v []ExportCdashDomainVariablesRow) {
	o.DomainVariables = v
}

func (o ExportCdashTable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportCdashTable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClassVariables) {
		toSerialize["class-variables"] = o.ClassVariables
	}
	if !IsNil(o.DomainVariables) {
		toSerialize["domain-variables"] = o.DomainVariables
	}
	return toSerialize, nil
}

type NullableExportCdashTable struct {
	value *ExportCdashTable
	isSet bool
}

func (v NullableExportCdashTable) Get() *ExportCdashTable {
	return v.value
}

func (v *NullableExportCdashTable) Set(val *ExportCdashTable) {
	v.value = val
	v.isSet = true
}

func (v NullableExportCdashTable) IsSet() bool {
	return v.isSet
}

func (v *NullableExportCdashTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportCdashTable(val *ExportCdashTable) *NullableExportCdashTable {
	return &NullableExportCdashTable{value: val, isSet: true}
}

func (v NullableExportCdashTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportCdashTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



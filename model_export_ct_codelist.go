/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExportCtCodelist type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportCtCodelist{}

// ExportCtCodelist struct for ExportCtCodelist
type ExportCtCodelist struct {
	Code *string `json:"Code,omitempty"`
	CodelistCode *string `json:"Codelist Code,omitempty"`
	CodelistExtensibleYesNo *string `json:"Codelist Extensible (Yes/No),omitempty"`
	CodelistName *string `json:"Codelist Name,omitempty"`
	CDISCSubmissionValue *string `json:"CDISC Submission Value,omitempty"`
	CDISCSynonymS []string `json:"CDISC Synonym(s),omitempty"`
	CDISCDefinition *string `json:"CDISC Definition,omitempty"`
	NCIPreferredTerm *string `json:"NCI Preferred Term,omitempty"`
	StandardAndDate *string `json:"Standard and Date,omitempty"`
	 []ExportCtTerm `json:",omitempty"`
}

// NewExportCtCodelist instantiates a new ExportCtCodelist object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportCtCodelist() *ExportCtCodelist {
	this := ExportCtCodelist{}
	return &this
}

// NewExportCtCodelistWithDefaults instantiates a new ExportCtCodelist object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportCtCodelistWithDefaults() *ExportCtCodelist {
	this := ExportCtCodelist{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ExportCtCodelist) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCtCodelist) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ExportCtCodelist) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ExportCtCodelist) SetCode(v string) {
	o.Code = &v
}

// GetCodelistCode returns the CodelistCode field value if set, zero value otherwise.
func (o *ExportCtCodelist) GetCodelistCode() string {
	if o == nil || IsNil(o.CodelistCode) {
		var ret string
		return ret
	}
	return *o.CodelistCode
}

// GetCodelistCodeOk returns a tuple with the CodelistCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCtCodelist) GetCodelistCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CodelistCode) {
		return nil, false
	}
	return o.CodelistCode, true
}

// HasCodelistCode returns a boolean if a field has been set.
func (o *ExportCtCodelist) HasCodelistCode() bool {
	if o != nil && !IsNil(o.CodelistCode) {
		return true
	}

	return false
}

// SetCodelistCode gets a reference to the given string and assigns it to the CodelistCode field.
func (o *ExportCtCodelist) SetCodelistCode(v string) {
	o.CodelistCode = &v
}

// GetCodelistExtensibleYesNo returns the CodelistExtensibleYesNo field value if set, zero value otherwise.
func (o *ExportCtCodelist) GetCodelistExtensibleYesNo() string {
	if o == nil || IsNil(o.CodelistExtensibleYesNo) {
		var ret string
		return ret
	}
	return *o.CodelistExtensibleYesNo
}

// GetCodelistExtensibleYesNoOk returns a tuple with the CodelistExtensibleYesNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCtCodelist) GetCodelistExtensibleYesNoOk() (*string, bool) {
	if o == nil || IsNil(o.CodelistExtensibleYesNo) {
		return nil, false
	}
	return o.CodelistExtensibleYesNo, true
}

// HasCodelistExtensibleYesNo returns a boolean if a field has been set.
func (o *ExportCtCodelist) HasCodelistExtensibleYesNo() bool {
	if o != nil && !IsNil(o.CodelistExtensibleYesNo) {
		return true
	}

	return false
}

// SetCodelistExtensibleYesNo gets a reference to the given string and assigns it to the CodelistExtensibleYesNo field.
func (o *ExportCtCodelist) SetCodelistExtensibleYesNo(v string) {
	o.CodelistExtensibleYesNo = &v
}

// GetCodelistName returns the CodelistName field value if set, zero value otherwise.
func (o *ExportCtCodelist) GetCodelistName() string {
	if o == nil || IsNil(o.CodelistName) {
		var ret string
		return ret
	}
	return *o.CodelistName
}

// GetCodelistNameOk returns a tuple with the CodelistName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCtCodelist) GetCodelistNameOk() (*string, bool) {
	if o == nil || IsNil(o.CodelistName) {
		return nil, false
	}
	return o.CodelistName, true
}

// HasCodelistName returns a boolean if a field has been set.
func (o *ExportCtCodelist) HasCodelistName() bool {
	if o != nil && !IsNil(o.CodelistName) {
		return true
	}

	return false
}

// SetCodelistName gets a reference to the given string and assigns it to the CodelistName field.
func (o *ExportCtCodelist) SetCodelistName(v string) {
	o.CodelistName = &v
}

// GetCDISCSubmissionValue returns the CDISCSubmissionValue field value if set, zero value otherwise.
func (o *ExportCtCodelist) GetCDISCSubmissionValue() string {
	if o == nil || IsNil(o.CDISCSubmissionValue) {
		var ret string
		return ret
	}
	return *o.CDISCSubmissionValue
}

// GetCDISCSubmissionValueOk returns a tuple with the CDISCSubmissionValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCtCodelist) GetCDISCSubmissionValueOk() (*string, bool) {
	if o == nil || IsNil(o.CDISCSubmissionValue) {
		return nil, false
	}
	return o.CDISCSubmissionValue, true
}

// HasCDISCSubmissionValue returns a boolean if a field has been set.
func (o *ExportCtCodelist) HasCDISCSubmissionValue() bool {
	if o != nil && !IsNil(o.CDISCSubmissionValue) {
		return true
	}

	return false
}

// SetCDISCSubmissionValue gets a reference to the given string and assigns it to the CDISCSubmissionValue field.
func (o *ExportCtCodelist) SetCDISCSubmissionValue(v string) {
	o.CDISCSubmissionValue = &v
}

// GetCDISCSynonymS returns the CDISCSynonymS field value if set, zero value otherwise.
func (o *ExportCtCodelist) GetCDISCSynonymS() []string {
	if o == nil || IsNil(o.CDISCSynonymS) {
		var ret []string
		return ret
	}
	return o.CDISCSynonymS
}

// GetCDISCSynonymSOk returns a tuple with the CDISCSynonymS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCtCodelist) GetCDISCSynonymSOk() ([]string, bool) {
	if o == nil || IsNil(o.CDISCSynonymS) {
		return nil, false
	}
	return o.CDISCSynonymS, true
}

// HasCDISCSynonymS returns a boolean if a field has been set.
func (o *ExportCtCodelist) HasCDISCSynonymS() bool {
	if o != nil && !IsNil(o.CDISCSynonymS) {
		return true
	}

	return false
}

// SetCDISCSynonymS gets a reference to the given []string and assigns it to the CDISCSynonymS field.
func (o *ExportCtCodelist) SetCDISCSynonymS(v []string) {
	o.CDISCSynonymS = v
}

// GetCDISCDefinition returns the CDISCDefinition field value if set, zero value otherwise.
func (o *ExportCtCodelist) GetCDISCDefinition() string {
	if o == nil || IsNil(o.CDISCDefinition) {
		var ret string
		return ret
	}
	return *o.CDISCDefinition
}

// GetCDISCDefinitionOk returns a tuple with the CDISCDefinition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCtCodelist) GetCDISCDefinitionOk() (*string, bool) {
	if o == nil || IsNil(o.CDISCDefinition) {
		return nil, false
	}
	return o.CDISCDefinition, true
}

// HasCDISCDefinition returns a boolean if a field has been set.
func (o *ExportCtCodelist) HasCDISCDefinition() bool {
	if o != nil && !IsNil(o.CDISCDefinition) {
		return true
	}

	return false
}

// SetCDISCDefinition gets a reference to the given string and assigns it to the CDISCDefinition field.
func (o *ExportCtCodelist) SetCDISCDefinition(v string) {
	o.CDISCDefinition = &v
}

// GetNCIPreferredTerm returns the NCIPreferredTerm field value if set, zero value otherwise.
func (o *ExportCtCodelist) GetNCIPreferredTerm() string {
	if o == nil || IsNil(o.NCIPreferredTerm) {
		var ret string
		return ret
	}
	return *o.NCIPreferredTerm
}

// GetNCIPreferredTermOk returns a tuple with the NCIPreferredTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCtCodelist) GetNCIPreferredTermOk() (*string, bool) {
	if o == nil || IsNil(o.NCIPreferredTerm) {
		return nil, false
	}
	return o.NCIPreferredTerm, true
}

// HasNCIPreferredTerm returns a boolean if a field has been set.
func (o *ExportCtCodelist) HasNCIPreferredTerm() bool {
	if o != nil && !IsNil(o.NCIPreferredTerm) {
		return true
	}

	return false
}

// SetNCIPreferredTerm gets a reference to the given string and assigns it to the NCIPreferredTerm field.
func (o *ExportCtCodelist) SetNCIPreferredTerm(v string) {
	o.NCIPreferredTerm = &v
}

// GetStandardAndDate returns the StandardAndDate field value if set, zero value otherwise.
func (o *ExportCtCodelist) GetStandardAndDate() string {
	if o == nil || IsNil(o.StandardAndDate) {
		var ret string
		return ret
	}
	return *o.StandardAndDate
}

// GetStandardAndDateOk returns a tuple with the StandardAndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCtCodelist) GetStandardAndDateOk() (*string, bool) {
	if o == nil || IsNil(o.StandardAndDate) {
		return nil, false
	}
	return o.StandardAndDate, true
}

// HasStandardAndDate returns a boolean if a field has been set.
func (o *ExportCtCodelist) HasStandardAndDate() bool {
	if o != nil && !IsNil(o.StandardAndDate) {
		return true
	}

	return false
}

// SetStandardAndDate gets a reference to the given string and assigns it to the StandardAndDate field.
func (o *ExportCtCodelist) SetStandardAndDate(v string) {
	o.StandardAndDate = &v
}

// Get returns the  field value if set, zero value otherwise.
func (o *ExportCtCodelist) Get() []ExportCtTerm {
	if o == nil || IsNil(o.) {
		var ret []ExportCtTerm
		return ret
	}
	return o.
}

// GetOk returns a tuple with the  field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCtCodelist) GetOk() ([]ExportCtTerm, bool) {
	if o == nil || IsNil(o.) {
		return nil, false
	}
	return o., true
}

// Has returns a boolean if a field has been set.
func (o *ExportCtCodelist) Has() bool {
	if o != nil && !IsNil(o.) {
		return true
	}

	return false
}

// Set gets a reference to the given []ExportCtTerm and assigns it to the  field.
func (o *ExportCtCodelist) Set(v []ExportCtTerm) {
	o. = v
}

func (o ExportCtCodelist) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportCtCodelist) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["Code"] = o.Code
	}
	if !IsNil(o.CodelistCode) {
		toSerialize["Codelist Code"] = o.CodelistCode
	}
	if !IsNil(o.CodelistExtensibleYesNo) {
		toSerialize["Codelist Extensible (Yes/No)"] = o.CodelistExtensibleYesNo
	}
	if !IsNil(o.CodelistName) {
		toSerialize["Codelist Name"] = o.CodelistName
	}
	if !IsNil(o.CDISCSubmissionValue) {
		toSerialize["CDISC Submission Value"] = o.CDISCSubmissionValue
	}
	if !IsNil(o.CDISCSynonymS) {
		toSerialize["CDISC Synonym(s)"] = o.CDISCSynonymS
	}
	if !IsNil(o.CDISCDefinition) {
		toSerialize["CDISC Definition"] = o.CDISCDefinition
	}
	if !IsNil(o.NCIPreferredTerm) {
		toSerialize["NCI Preferred Term"] = o.NCIPreferredTerm
	}
	if !IsNil(o.StandardAndDate) {
		toSerialize["Standard and Date"] = o.StandardAndDate
	}
	if !IsNil(o.) {
		toSerialize[""] = o.
	}
	return toSerialize, nil
}

type NullableExportCtCodelist struct {
	value *ExportCtCodelist
	isSet bool
}

func (v NullableExportCtCodelist) Get() *ExportCtCodelist {
	return v.value
}

func (v *NullableExportCtCodelist) Set(val *ExportCtCodelist) {
	v.value = val
	v.isSet = true
}

func (v NullableExportCtCodelist) IsSet() bool {
	return v.isSet
}

func (v *NullableExportCtCodelist) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportCtCodelist(val *ExportCtCodelist) *NullableExportCtCodelist {
	return &NullableExportCtCodelist{value: val, isSet: true}
}

func (v NullableExportCtCodelist) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportCtCodelist) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



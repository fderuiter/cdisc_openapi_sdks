/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ExportAdamVariablesRow.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ExportAdamVariablesRow_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ExportAdamVariablesRow_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



class  ExportAdamVariablesRow
    : public ModelBase
{
public:
    ExportAdamVariablesRow();
    virtual ~ExportAdamVariablesRow();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// ExportAdamVariablesRow members


    utility::string_t getVersion() const;
    bool versionIsSet() const;
    void unsetVersion();
    void setVersion(const utility::string_t& value);

    utility::string_t getDataStructureName() const;
    bool dataStructureNameIsSet() const;
    void unsetData_Structure_Name();
    void setDataStructureName(const utility::string_t& value);

    utility::string_t getDatasetName() const;
    bool datasetNameIsSet() const;
    void unsetDataset_Name();
    void setDatasetName(const utility::string_t& value);

    utility::string_t getVariableGroup() const;
    bool variableGroupIsSet() const;
    void unsetVariable_Group();
    void setVariableGroup(const utility::string_t& value);

    utility::string_t getVariableName() const;
    bool variableNameIsSet() const;
    void unsetVariable_Name();
    void setVariableName(const utility::string_t& value);

    utility::string_t getVariableLabel() const;
    bool variableLabelIsSet() const;
    void unsetVariable_Label();
    void setVariableLabel(const utility::string_t& value);

    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();
    void setType(const utility::string_t& value);

    utility::string_t getCodelistControlledTerms() const;
    bool codelistControlledTermsIsSet() const;
    void unsetCodelist_Controlled_Terms();
    void setCodelistControlledTerms(const utility::string_t& value);

    utility::string_t getCore() const;
    bool coreIsSet() const;
    void unsetCore();
    void setCore(const utility::string_t& value);

    utility::string_t getCDISCNotes() const;
    bool cDISCNotesIsSet() const;
    void unsetCDISC_Notes();
    void setCDISCNotes(const utility::string_t& value);


protected:
    utility::string_t m_Version;
    bool m_VersionIsSet;

    utility::string_t m_Data_Structure_Name;
    bool m_Data_Structure_NameIsSet;

    utility::string_t m_Dataset_Name;
    bool m_Dataset_NameIsSet;

    utility::string_t m_Variable_Group;
    bool m_Variable_GroupIsSet;

    utility::string_t m_Variable_Name;
    bool m_Variable_NameIsSet;

    utility::string_t m_Variable_Label;
    bool m_Variable_LabelIsSet;

    utility::string_t m_Type;
    bool m_TypeIsSet;

    utility::string_t m_Codelist_Controlled_Terms;
    bool m_Codelist_Controlled_TermsIsSet;

    utility::string_t m_Core;
    bool m_CoreIsSet;

    utility::string_t m_CDISC_Notes;
    bool m_CDISC_NotesIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ExportAdamVariablesRow_H_ */

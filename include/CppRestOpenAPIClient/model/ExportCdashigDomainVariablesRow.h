/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ExportCdashigDomainVariablesRow.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ExportCdashigDomainVariablesRow_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ExportCdashigDomainVariablesRow_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {



class  ExportCdashigDomainVariablesRow
    : public ModelBase
{
public:
    ExportCdashigDomainVariablesRow();
    virtual ~ExportCdashigDomainVariablesRow();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// ExportCdashigDomainVariablesRow members


    utility::string_t getVersion() const;
    bool versionIsSet() const;
    void unsetVersion();
    void setVersion(const utility::string_t& value);

    utility::string_t getRClass() const;
    bool rClassIsSet() const;
    void unsetr_Class();
    void setRClass(const utility::string_t& value);

    utility::string_t getDomain() const;
    bool domainIsSet() const;
    void unsetDomain();
    void setDomain(const utility::string_t& value);

    utility::string_t getDataCollectionScenario() const;
    bool dataCollectionScenarioIsSet() const;
    void unsetData_Collection_Scenario();
    void setDataCollectionScenario(const utility::string_t& value);

    utility::string_t getVariableOrder() const;
    bool variableOrderIsSet() const;
    void unsetVariable_Order();
    void setVariableOrder(const utility::string_t& value);

    utility::string_t getCDASHIGVariable() const;
    bool cDASHIGVariableIsSet() const;
    void unsetCDASHIG_Variable();
    void setCDASHIGVariable(const utility::string_t& value);

    utility::string_t getCDASHIGVariableLabel() const;
    bool cDASHIGVariableLabelIsSet() const;
    void unsetCDASHIG_Variable_Label();
    void setCDASHIGVariableLabel(const utility::string_t& value);

    utility::string_t getDRAFTCDASHIGDefinition() const;
    bool dRAFTCDASHIGDefinitionIsSet() const;
    void unsetDRAFT_CDASHIG_Definition();
    void setDRAFTCDASHIGDefinition(const utility::string_t& value);

    utility::string_t getQuestionText() const;
    bool questionTextIsSet() const;
    void unsetQuestion_Text();
    void setQuestionText(const utility::string_t& value);

    utility::string_t getPrompt() const;
    bool promptIsSet() const;
    void unsetPrompt();
    void setPrompt(const utility::string_t& value);

    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();
    void setType(const utility::string_t& value);

    utility::string_t getCDASHIGCore() const;
    bool cDASHIGCoreIsSet() const;
    void unsetCDASHIG_Core();
    void setCDASHIGCore(const utility::string_t& value);

    utility::string_t getCaseReportFormCompletionInstructions() const;
    bool caseReportFormCompletionInstructionsIsSet() const;
    void unsetCase_Report_Form_Completion_Instructions();
    void setCaseReportFormCompletionInstructions(const utility::string_t& value);

    std::vector<utility::string_t> getSDTMIGTarget() const;
    bool sDTMIGTargetIsSet() const;
    void unsetSDTMIG_Target();
    void setSDTMIGTarget(const std::vector<utility::string_t>& value);

    utility::string_t getMappingInstructions() const;
    bool mappingInstructionsIsSet() const;
    void unsetMapping_Instructions();
    void setMappingInstructions(const utility::string_t& value);

    utility::string_t getControlledTerminologyCodelistName() const;
    bool controlledTerminologyCodelistNameIsSet() const;
    void unsetControlled_Terminology_Codelist_Name();
    void setControlledTerminologyCodelistName(const utility::string_t& value);

    utility::string_t getImplementationNotes() const;
    bool implementationNotesIsSet() const;
    void unsetImplementation_Notes();
    void setImplementationNotes(const utility::string_t& value);


protected:
    utility::string_t m_Version;
    bool m_VersionIsSet;

    utility::string_t m_r_Class;
    bool m_r_ClassIsSet;

    utility::string_t m_Domain;
    bool m_DomainIsSet;

    utility::string_t m_Data_Collection_Scenario;
    bool m_Data_Collection_ScenarioIsSet;

    utility::string_t m_Variable_Order;
    bool m_Variable_OrderIsSet;

    utility::string_t m_CDASHIG_Variable;
    bool m_CDASHIG_VariableIsSet;

    utility::string_t m_CDASHIG_Variable_Label;
    bool m_CDASHIG_Variable_LabelIsSet;

    utility::string_t m_DRAFT_CDASHIG_Definition;
    bool m_DRAFT_CDASHIG_DefinitionIsSet;

    utility::string_t m_Question_Text;
    bool m_Question_TextIsSet;

    utility::string_t m_Prompt;
    bool m_PromptIsSet;

    utility::string_t m_Type;
    bool m_TypeIsSet;

    utility::string_t m_CDASHIG_Core;
    bool m_CDASHIG_CoreIsSet;

    utility::string_t m_Case_Report_Form_Completion_Instructions;
    bool m_Case_Report_Form_Completion_InstructionsIsSet;

    std::vector<utility::string_t> m_SDTMIG_Target;
    bool m_SDTMIG_TargetIsSet;

    utility::string_t m_Mapping_Instructions;
    bool m_Mapping_InstructionsIsSet;

    utility::string_t m_Controlled_Terminology_Codelist_Name;
    bool m_Controlled_Terminology_Codelist_NameIsSet;

    utility::string_t m_Implementation_Notes;
    bool m_Implementation_NotesIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ExportCdashigDomainVariablesRow_H_ */

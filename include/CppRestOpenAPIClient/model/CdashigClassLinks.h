/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CdashigClassLinks.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CdashigClassLinks_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CdashigClassLinks_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/CdashigProductRef.h"
#include "CppRestOpenAPIClient/model/CdashigClassRefSubclass.h"
#include <vector>
#include "CppRestOpenAPIClient/model/CdashClassRef.h"
#include "CppRestOpenAPIClient/model/CdashigClassRef.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class CdashigClassRef;
class CdashClassRef;
class CdashigProductRef;
class CdashigClassRefSubclass;


class  CdashigClassLinks
    : public ModelBase
{
public:
    CdashigClassLinks();
    virtual ~CdashigClassLinks();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// CdashigClassLinks members


    std::shared_ptr<CdashigClassRef> getSelf() const;
    bool selfIsSet() const;
    void unsetSelf();
    void setSelf(const std::shared_ptr<CdashigClassRef>& value);

    std::shared_ptr<CdashClassRef> getModelClass() const;
    bool modelClassIsSet() const;
    void unsetModelClass();
    void setModelClass(const std::shared_ptr<CdashClassRef>& value);

    std::shared_ptr<CdashigProductRef> getParentProduct() const;
    bool parentProductIsSet() const;
    void unsetParentProduct();
    void setParentProduct(const std::shared_ptr<CdashigProductRef>& value);

    std::shared_ptr<CdashigClassRef> getParentClass() const;
    bool parentClassIsSet() const;
    void unsetParentClass();
    void setParentClass(const std::shared_ptr<CdashigClassRef>& value);

    std::vector<std::shared_ptr<CdashigClassRefSubclass>> getSubclasses() const;
    bool subclassesIsSet() const;
    void unsetSubclasses();
    void setSubclasses(const std::vector<std::shared_ptr<CdashigClassRefSubclass>>& value);

    std::shared_ptr<CdashigClassRef> getPriorVersion() const;
    bool priorVersionIsSet() const;
    void unsetPriorVersion();
    void setPriorVersion(const std::shared_ptr<CdashigClassRef>& value);


protected:
    std::shared_ptr<CdashigClassRef> m_Self;
    bool m_SelfIsSet;

    std::shared_ptr<CdashClassRef> m_ModelClass;
    bool m_ModelClassIsSet;

    std::shared_ptr<CdashigProductRef> m_ParentProduct;
    bool m_ParentProductIsSet;

    std::shared_ptr<CdashigClassRef> m_ParentClass;
    bool m_ParentClassIsSet;

    std::vector<std::shared_ptr<CdashigClassRefSubclass>> m_Subclasses;
    bool m_SubclassesIsSet;

    std::shared_ptr<CdashigClassRef> m_PriorVersion;
    bool m_PriorVersionIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CdashigClassLinks_H_ */

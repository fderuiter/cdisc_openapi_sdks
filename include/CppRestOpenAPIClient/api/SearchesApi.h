/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.16.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SearchesApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_SearchesApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_SearchesApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/DefaultErrorResponse.h"
#include "CppRestOpenAPIClient/model/DefaultSearchResponse.h"
#include "CppRestOpenAPIClient/model/DefaultSearchScopes.h"
#include "CppRestOpenAPIClient/model/ScopeValues.h"
#include "CppRestOpenAPIClient/model/_mdr_search_scopes_get_200_response.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  SearchesApi 
{
public:

    explicit SearchesApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~SearchesApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get Search Results Across CDISC Library
    /// </remarks>
    /// <param name="q">Search Term Expression</param>
    /// <param name="highlight">Search Highlight Expression (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="start">Initial Search Result Index (optional, default to 0.0)</param>
    /// <param name="pageSize">Number of Search Results to Return (optional, default to 0.0)</param>
    /// <param name="r_class">Limit Search by Setting Scope to Class (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="codelist">Limit Search by Setting Scope to Codelist (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="conceptId">Limit Search by Setting Scope to Concept ID (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="core">Limit Search by Setting Scope to Core (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="dataStructure">Limit Search by Setting Scope to Data Structure (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="datasetStructure">Limit Search by Setting Scope to Dataset Structure (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="definition">Limit Search by Setting Scope to Definition (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="description">Limit Search by Setting Scope to Description (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="domain">Limit Search by Setting Scope to Domain (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="effectiveDate">Limit Search by Setting Scope to Effective Date (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="extensible">Limit Search by Setting Scope to Extensible (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="href">Limit Search by Setting Scope to Href (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="label">Limit Search by Setting Scope to Label (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="measureType">SLimit Search by Setting Scope to Measure Type (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="name">Limit Search by Setting Scope to Name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="preferredTerm">Limit Search by Setting Scope to Preferred Term (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="product">Limit Search by Setting Scope to Product (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="productGroup">Limit Search by Setting Scope to Product Group (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="registrationStatus">Limit Search by Setting Scope to Registration Status (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="roleDescription">Limit Search by Setting Scope to Role Description (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="sdtmTarget">Limit Search by Setting Scope to SDTM Target (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="simpleDatatype">Limit Search by Setting Scope to Simple Datatype (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="submissionValue">Limit Search by Setting Scope to Submission Value (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="synonyms">Limit Search by Setting Scope to Synonyms (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="type">Limit Search by Setting Scope to Type (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="uiHref">Limit Search by Setting Scope to UI Href (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="valueDomain">Limit Search by Setting Scope to Value Domain (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="variableSet">Limit Search by Setting Scope to Variable Set (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="version">Limit Search by Setting Scope to Version (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<DefaultSearchResponse>> mdrSearchGet(
        utility::string_t q,
        boost::optional<utility::string_t> highlight,
        boost::optional<double> start,
        boost::optional<double> pageSize,
        boost::optional<utility::string_t> r_class,
        boost::optional<utility::string_t> codelist,
        boost::optional<utility::string_t> conceptId,
        boost::optional<utility::string_t> core,
        boost::optional<utility::string_t> dataStructure,
        boost::optional<utility::string_t> datasetStructure,
        boost::optional<utility::string_t> definition,
        boost::optional<utility::string_t> description,
        boost::optional<utility::string_t> domain,
        boost::optional<utility::string_t> effectiveDate,
        boost::optional<utility::string_t> extensible,
        boost::optional<utility::string_t> href,
        boost::optional<utility::string_t> label,
        boost::optional<utility::string_t> measureType,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> preferredTerm,
        boost::optional<utility::string_t> product,
        boost::optional<utility::string_t> productGroup,
        boost::optional<utility::string_t> registrationStatus,
        boost::optional<utility::string_t> roleDescription,
        boost::optional<utility::string_t> sdtmTarget,
        boost::optional<utility::string_t> simpleDatatype,
        boost::optional<utility::string_t> submissionValue,
        boost::optional<utility::string_t> synonyms,
        boost::optional<utility::string_t> type,
        boost::optional<utility::string_t> uiHref,
        boost::optional<utility::string_t> valueDomain,
        boost::optional<utility::string_t> variableSet,
        boost::optional<utility::string_t> version
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get Search Results Across CDISC Library
    /// </remarks>
    pplx::task<std::shared_ptr<_mdr_search_scopes_get_200_response>> mdrSearchScopesGet(
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get Search Results Limited to Scope
    /// </remarks>
    /// <param name="scope">Search Scope</param>
    pplx::task<std::shared_ptr<ScopeValues>> mdrSearchScopesScopeGet(
        std::shared_ptr<DefaultSearchScopes> scope
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_SearchesApi_H_ */


/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CtPackageTerm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CtPackageTerm{}

// CtPackageTerm struct for CtPackageTerm
type CtPackageTerm struct {
	ConceptId *string `json:"conceptId,omitempty"`
	SubmissionValue *string `json:"submissionValue,omitempty"`
	Definition *string `json:"definition,omitempty"`
	PreferredTerm *string `json:"preferredTerm,omitempty"`
	Synonyms []string `json:"synonyms,omitempty"`
}

// NewCtPackageTerm instantiates a new CtPackageTerm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCtPackageTerm() *CtPackageTerm {
	this := CtPackageTerm{}
	return &this
}

// NewCtPackageTermWithDefaults instantiates a new CtPackageTerm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCtPackageTermWithDefaults() *CtPackageTerm {
	this := CtPackageTerm{}
	return &this
}

// GetConceptId returns the ConceptId field value if set, zero value otherwise.
func (o *CtPackageTerm) GetConceptId() string {
	if o == nil || IsNil(o.ConceptId) {
		var ret string
		return ret
	}
	return *o.ConceptId
}

// GetConceptIdOk returns a tuple with the ConceptId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CtPackageTerm) GetConceptIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConceptId) {
		return nil, false
	}
	return o.ConceptId, true
}

// HasConceptId returns a boolean if a field has been set.
func (o *CtPackageTerm) HasConceptId() bool {
	if o != nil && !IsNil(o.ConceptId) {
		return true
	}

	return false
}

// SetConceptId gets a reference to the given string and assigns it to the ConceptId field.
func (o *CtPackageTerm) SetConceptId(v string) {
	o.ConceptId = &v
}

// GetSubmissionValue returns the SubmissionValue field value if set, zero value otherwise.
func (o *CtPackageTerm) GetSubmissionValue() string {
	if o == nil || IsNil(o.SubmissionValue) {
		var ret string
		return ret
	}
	return *o.SubmissionValue
}

// GetSubmissionValueOk returns a tuple with the SubmissionValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CtPackageTerm) GetSubmissionValueOk() (*string, bool) {
	if o == nil || IsNil(o.SubmissionValue) {
		return nil, false
	}
	return o.SubmissionValue, true
}

// HasSubmissionValue returns a boolean if a field has been set.
func (o *CtPackageTerm) HasSubmissionValue() bool {
	if o != nil && !IsNil(o.SubmissionValue) {
		return true
	}

	return false
}

// SetSubmissionValue gets a reference to the given string and assigns it to the SubmissionValue field.
func (o *CtPackageTerm) SetSubmissionValue(v string) {
	o.SubmissionValue = &v
}

// GetDefinition returns the Definition field value if set, zero value otherwise.
func (o *CtPackageTerm) GetDefinition() string {
	if o == nil || IsNil(o.Definition) {
		var ret string
		return ret
	}
	return *o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CtPackageTerm) GetDefinitionOk() (*string, bool) {
	if o == nil || IsNil(o.Definition) {
		return nil, false
	}
	return o.Definition, true
}

// HasDefinition returns a boolean if a field has been set.
func (o *CtPackageTerm) HasDefinition() bool {
	if o != nil && !IsNil(o.Definition) {
		return true
	}

	return false
}

// SetDefinition gets a reference to the given string and assigns it to the Definition field.
func (o *CtPackageTerm) SetDefinition(v string) {
	o.Definition = &v
}

// GetPreferredTerm returns the PreferredTerm field value if set, zero value otherwise.
func (o *CtPackageTerm) GetPreferredTerm() string {
	if o == nil || IsNil(o.PreferredTerm) {
		var ret string
		return ret
	}
	return *o.PreferredTerm
}

// GetPreferredTermOk returns a tuple with the PreferredTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CtPackageTerm) GetPreferredTermOk() (*string, bool) {
	if o == nil || IsNil(o.PreferredTerm) {
		return nil, false
	}
	return o.PreferredTerm, true
}

// HasPreferredTerm returns a boolean if a field has been set.
func (o *CtPackageTerm) HasPreferredTerm() bool {
	if o != nil && !IsNil(o.PreferredTerm) {
		return true
	}

	return false
}

// SetPreferredTerm gets a reference to the given string and assigns it to the PreferredTerm field.
func (o *CtPackageTerm) SetPreferredTerm(v string) {
	o.PreferredTerm = &v
}

// GetSynonyms returns the Synonyms field value if set, zero value otherwise.
func (o *CtPackageTerm) GetSynonyms() []string {
	if o == nil || IsNil(o.Synonyms) {
		var ret []string
		return ret
	}
	return o.Synonyms
}

// GetSynonymsOk returns a tuple with the Synonyms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CtPackageTerm) GetSynonymsOk() ([]string, bool) {
	if o == nil || IsNil(o.Synonyms) {
		return nil, false
	}
	return o.Synonyms, true
}

// HasSynonyms returns a boolean if a field has been set.
func (o *CtPackageTerm) HasSynonyms() bool {
	if o != nil && !IsNil(o.Synonyms) {
		return true
	}

	return false
}

// SetSynonyms gets a reference to the given []string and assigns it to the Synonyms field.
func (o *CtPackageTerm) SetSynonyms(v []string) {
	o.Synonyms = v
}

func (o CtPackageTerm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CtPackageTerm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConceptId) {
		toSerialize["conceptId"] = o.ConceptId
	}
	if !IsNil(o.SubmissionValue) {
		toSerialize["submissionValue"] = o.SubmissionValue
	}
	if !IsNil(o.Definition) {
		toSerialize["definition"] = o.Definition
	}
	if !IsNil(o.PreferredTerm) {
		toSerialize["preferredTerm"] = o.PreferredTerm
	}
	if !IsNil(o.Synonyms) {
		toSerialize["synonyms"] = o.Synonyms
	}
	return toSerialize, nil
}

type NullableCtPackageTerm struct {
	value *CtPackageTerm
	isSet bool
}

func (v NullableCtPackageTerm) Get() *CtPackageTerm {
	return v.value
}

func (v *NullableCtPackageTerm) Set(val *CtPackageTerm) {
	v.value = val
	v.isSet = true
}

func (v NullableCtPackageTerm) IsSet() bool {
	return v.isSet
}

func (v *NullableCtPackageTerm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCtPackageTerm(val *CtPackageTerm) *NullableCtPackageTerm {
	return &NullableCtPackageTerm{value: val, isSet: true}
}

func (v NullableCtPackageTerm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCtPackageTerm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



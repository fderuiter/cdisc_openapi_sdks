/*
CDISC Library API

REST API Documentation for CDISC Library in production server

API version: 1.1.0
Contact: cdisc_library_support@cdisc.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DefaultSearchScopes the model 'DefaultSearchScopes'
type DefaultSearchScopes string

// List of DefaultSearchScopes
const (
	CLASS DefaultSearchScopes = "class"
	CODELIST DefaultSearchScopes = "codelist"
	CONCEPT_ID DefaultSearchScopes = "conceptId"
	CORE DefaultSearchScopes = "core"
	DATA_STRUCTURE DefaultSearchScopes = "dataStructure"
	DATASET_STRUCTURE DefaultSearchScopes = "datasetStructure"
	DEFINITION DefaultSearchScopes = "definition"
	DESCRIPTION DefaultSearchScopes = "description"
	DOMAIN DefaultSearchScopes = "domain"
	EFFECTIVE_DATE DefaultSearchScopes = "effectiveDate"
	EXTENSIBLE DefaultSearchScopes = "extensible"
	HREF DefaultSearchScopes = "href"
	LABEL DefaultSearchScopes = "label"
	MEASURE_TYPE DefaultSearchScopes = "measureType"
	NAME DefaultSearchScopes = "name"
	PREFERRED_TERM DefaultSearchScopes = "preferredTerm"
	PRODUCT DefaultSearchScopes = "product"
	PRODUCT_GROUP DefaultSearchScopes = "productGroup"
	REGISTRATION_STATUS DefaultSearchScopes = "registrationStatus"
	ROLE_DESCRIPTION DefaultSearchScopes = "roleDescription"
	SDTM_TARGET DefaultSearchScopes = "sdtmTarget"
	SIMPLE_DATATYPE DefaultSearchScopes = "simpleDatatype"
	SUBMISSION_VALUE DefaultSearchScopes = "submissionValue"
	SYNONYMS DefaultSearchScopes = "synonyms"
	TYPE DefaultSearchScopes = "type"
	UI_HREF DefaultSearchScopes = "uiHref"
	VALUE_DOMAIN DefaultSearchScopes = "valueDomain"
	VARIABLE_SET DefaultSearchScopes = "variableSet"
	VERSION DefaultSearchScopes = "version"
)

// All allowed values of DefaultSearchScopes enum
var AllowedDefaultSearchScopesEnumValues = []DefaultSearchScopes{
	"class",
	"codelist",
	"conceptId",
	"core",
	"dataStructure",
	"datasetStructure",
	"definition",
	"description",
	"domain",
	"effectiveDate",
	"extensible",
	"href",
	"label",
	"measureType",
	"name",
	"preferredTerm",
	"product",
	"productGroup",
	"registrationStatus",
	"roleDescription",
	"sdtmTarget",
	"simpleDatatype",
	"submissionValue",
	"synonyms",
	"type",
	"uiHref",
	"valueDomain",
	"variableSet",
	"version",
}

func (v *DefaultSearchScopes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DefaultSearchScopes(value)
	for _, existing := range AllowedDefaultSearchScopesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DefaultSearchScopes", value)
}

// NewDefaultSearchScopesFromValue returns a pointer to a valid DefaultSearchScopes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDefaultSearchScopesFromValue(v string) (*DefaultSearchScopes, error) {
	ev := DefaultSearchScopes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DefaultSearchScopes: valid values are %v", v, AllowedDefaultSearchScopesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DefaultSearchScopes) IsValid() bool {
	for _, existing := range AllowedDefaultSearchScopesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DefaultSearchScopes value
func (v DefaultSearchScopes) Ptr() *DefaultSearchScopes {
	return &v
}

type NullableDefaultSearchScopes struct {
	value *DefaultSearchScopes
	isSet bool
}

func (v NullableDefaultSearchScopes) Get() *DefaultSearchScopes {
	return v.value
}

func (v *NullableDefaultSearchScopes) Set(val *DefaultSearchScopes) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultSearchScopes) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultSearchScopes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultSearchScopes(val *DefaultSearchScopes) *NullableDefaultSearchScopes {
	return &NullableDefaultSearchScopes{value: val, isSet: true}
}

func (v NullableDefaultSearchScopes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultSearchScopes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


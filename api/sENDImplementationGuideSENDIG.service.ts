/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { DefaultErrorResponse } from '../model/defaultErrorResponse';
import { ExportSendigDatasetsTable } from '../model/exportSendigDatasetsTable';
import { ExportSendigVariablesTable } from '../model/exportSendigVariablesTable';
import { ExportSendigWorkbook } from '../model/exportSendigWorkbook';
import { RootSendigDatasetVariable } from '../model/rootSendigDatasetVariable';
import { SendigClass } from '../model/sendigClass';
import { SendigClassDatasets } from '../model/sendigClassDatasets';
import { SendigClasses } from '../model/sendigClasses';
import { SendigDataset } from '../model/sendigDataset';
import { SendigDatasetVariable } from '../model/sendigDatasetVariable';
import { SendigDatasetVariables } from '../model/sendigDatasetVariables';
import { SendigDatasets } from '../model/sendigDatasets';
import { SendigProduct } from '../model/sendigProduct';
import { XmlRootSendigDatasetVariable } from '../model/xmlRootSendigDatasetVariable';
import { XmlSendigClass } from '../model/xmlSendigClass';
import { XmlSendigClassDatasets } from '../model/xmlSendigClassDatasets';
import { XmlSendigClasses } from '../model/xmlSendigClasses';
import { XmlSendigDataset } from '../model/xmlSendigDataset';
import { XmlSendigDatasetVariable } from '../model/xmlSendigDatasetVariable';
import { XmlSendigDatasetVariables } from '../model/xmlSendigDatasetVariables';
import { XmlSendigDatasets } from '../model/xmlSendigDatasets';
import { XmlSendigProduct } from '../model/xmlSendigProduct';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class SENDImplementationGuideSENDIGService {
    private basePath: string = 'https://library.cdisc.org/api';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * 
     * Get Root SENDIG Dataset Variable
     * @param dataset SENDIG Dataset Identifier
     * @param _var SENDIG Variable Identifier
     
     */
    public mdrRootSendigDatasetsDatasetVariablesVarGet(dataset: string, _var: string, observe?: 'body', headers?: Headers): Observable<RootSendigDatasetVariable>;
    public mdrRootSendigDatasetsDatasetVariablesVarGet(dataset: string, _var: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<RootSendigDatasetVariable>>;
    public mdrRootSendigDatasetsDatasetVariablesVarGet(dataset: string, _var: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (dataset === null || dataset === undefined){
            throw new Error('Required parameter dataset was null or undefined when calling mdrRootSendigDatasetsDatasetVariablesVarGet.');
        }

        if (_var === null || _var === undefined){
            throw new Error('Required parameter _var was null or undefined when calling mdrRootSendigDatasetsDatasetVariablesVarGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<RootSendigDatasetVariable>> = this.httpClient.get(`${this.basePath}/mdr/root/sendig/datasets/${encodeURIComponent(String(dataset))}/variables/${encodeURIComponent(String(_var))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <RootSendigDatasetVariable>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SENDIG Class Dataset List
     * @param version CDISC Library Product Version
     * @param _class SENDIG Class Identifier
     
     */
    public mdrSendigVersionClassesClassDatasetsGet(version: string, _class: string, observe?: 'body', headers?: Headers): Observable<SendigClassDatasets>;
    public mdrSendigVersionClassesClassDatasetsGet(version: string, _class: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SendigClassDatasets>>;
    public mdrSendigVersionClassesClassDatasetsGet(version: string, _class: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSendigVersionClassesClassDatasetsGet.');
        }

        if (_class === null || _class === undefined){
            throw new Error('Required parameter _class was null or undefined when calling mdrSendigVersionClassesClassDatasetsGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<SendigClassDatasets>> = this.httpClient.get(`${this.basePath}/mdr/sendig/${encodeURIComponent(String(version))}/classes/${encodeURIComponent(String(_class))}/datasets`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SendigClassDatasets>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SENDIG Class
     * @param version CDISC Library Product Version
     * @param _class SENDIG Class Identifier
     
     */
    public mdrSendigVersionClassesClassGet(version: string, _class: string, observe?: 'body', headers?: Headers): Observable<SendigClass>;
    public mdrSendigVersionClassesClassGet(version: string, _class: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SendigClass>>;
    public mdrSendigVersionClassesClassGet(version: string, _class: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSendigVersionClassesClassGet.');
        }

        if (_class === null || _class === undefined){
            throw new Error('Required parameter _class was null or undefined when calling mdrSendigVersionClassesClassGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<SendigClass>> = this.httpClient.get(`${this.basePath}/mdr/sendig/${encodeURIComponent(String(version))}/classes/${encodeURIComponent(String(_class))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SendigClass>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SENDIG Class List
     * @param version CDISC Library Product Version
     
     */
    public mdrSendigVersionClassesGet(version: string, observe?: 'body', headers?: Headers): Observable<SendigClasses>;
    public mdrSendigVersionClassesGet(version: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SendigClasses>>;
    public mdrSendigVersionClassesGet(version: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSendigVersionClassesGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<SendigClasses>> = this.httpClient.get(`${this.basePath}/mdr/sendig/${encodeURIComponent(String(version))}/classes`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SendigClasses>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SENDIG Dataset
     * @param version CDISC Library Product Version
     * @param dataset SENDIG Class Identifier
     
     */
    public mdrSendigVersionDatasetsDatasetGet(version: string, dataset: string, observe?: 'body', headers?: Headers): Observable<SendigDataset>;
    public mdrSendigVersionDatasetsDatasetGet(version: string, dataset: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SendigDataset>>;
    public mdrSendigVersionDatasetsDatasetGet(version: string, dataset: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSendigVersionDatasetsDatasetGet.');
        }

        if (dataset === null || dataset === undefined){
            throw new Error('Required parameter dataset was null or undefined when calling mdrSendigVersionDatasetsDatasetGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<SendigDataset>> = this.httpClient.get(`${this.basePath}/mdr/sendig/${encodeURIComponent(String(version))}/datasets/${encodeURIComponent(String(dataset))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SendigDataset>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SENDIG Dataset Variable List
     * @param version CDISC Library Product Version
     * @param dataset SENDIG Class Identifier
     
     */
    public mdrSendigVersionDatasetsDatasetVariablesGet(version: string, dataset: string, observe?: 'body', headers?: Headers): Observable<SendigDatasetVariables>;
    public mdrSendigVersionDatasetsDatasetVariablesGet(version: string, dataset: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SendigDatasetVariables>>;
    public mdrSendigVersionDatasetsDatasetVariablesGet(version: string, dataset: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSendigVersionDatasetsDatasetVariablesGet.');
        }

        if (dataset === null || dataset === undefined){
            throw new Error('Required parameter dataset was null or undefined when calling mdrSendigVersionDatasetsDatasetVariablesGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<SendigDatasetVariables>> = this.httpClient.get(`${this.basePath}/mdr/sendig/${encodeURIComponent(String(version))}/datasets/${encodeURIComponent(String(dataset))}/variables`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SendigDatasetVariables>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SENDIG Dataset Variable
     * @param version CDISC Library Product Version
     * @param dataset SENDIG Class Identifier
     * @param _var SENDIG Variable Identifier
     
     */
    public mdrSendigVersionDatasetsDatasetVariablesVarGet(version: string, dataset: string, _var: string, observe?: 'body', headers?: Headers): Observable<SendigDatasetVariable>;
    public mdrSendigVersionDatasetsDatasetVariablesVarGet(version: string, dataset: string, _var: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SendigDatasetVariable>>;
    public mdrSendigVersionDatasetsDatasetVariablesVarGet(version: string, dataset: string, _var: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSendigVersionDatasetsDatasetVariablesVarGet.');
        }

        if (dataset === null || dataset === undefined){
            throw new Error('Required parameter dataset was null or undefined when calling mdrSendigVersionDatasetsDatasetVariablesVarGet.');
        }

        if (_var === null || _var === undefined){
            throw new Error('Required parameter _var was null or undefined when calling mdrSendigVersionDatasetsDatasetVariablesVarGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<SendigDatasetVariable>> = this.httpClient.get(`${this.basePath}/mdr/sendig/${encodeURIComponent(String(version))}/datasets/${encodeURIComponent(String(dataset))}/variables/${encodeURIComponent(String(_var))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SendigDatasetVariable>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SENDIG Dataset List
     * @param version CDISC Library Product Version
     
     */
    public mdrSendigVersionDatasetsGet(version: string, observe?: 'body', headers?: Headers): Observable<SendigDatasets>;
    public mdrSendigVersionDatasetsGet(version: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SendigDatasets>>;
    public mdrSendigVersionDatasetsGet(version: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSendigVersionDatasetsGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml, text/csv';

        const response: Observable<HttpResponse<SendigDatasets>> = this.httpClient.get(`${this.basePath}/mdr/sendig/${encodeURIComponent(String(version))}/datasets`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SendigDatasets>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SENDIG product
     * @param version CDISC Library Product Version
     
     */
    public mdrSendigVersionGet(version: string, observe?: 'body', headers?: Headers): Observable<SendigProduct>;
    public mdrSendigVersionGet(version: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SendigProduct>>;
    public mdrSendigVersionGet(version: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSendigVersionGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml, text/csv, application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';

        const response: Observable<HttpResponse<SendigProduct>> = this.httpClient.get(`${this.basePath}/mdr/sendig/${encodeURIComponent(String(version))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SendigProduct>(httpResponse.response))
               );
        }
        return response;
    }

}

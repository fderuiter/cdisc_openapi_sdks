/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { DefaultErrorResponse } from '../model/defaultErrorResponse';
import { ExportSdtmDatasetsTable } from '../model/exportSdtmDatasetsTable';
import { ExportSdtmVariablesTable } from '../model/exportSdtmVariablesTable';
import { ExportSdtmWorkbook } from '../model/exportSdtmWorkbook';
import { RootSdtmClassVariable } from '../model/rootSdtmClassVariable';
import { RootSdtmDatasetVariable } from '../model/rootSdtmDatasetVariable';
import { SdtmClass } from '../model/sdtmClass';
import { SdtmClassDatasets } from '../model/sdtmClassDatasets';
import { SdtmClassVariable } from '../model/sdtmClassVariable';
import { SdtmClassVariables } from '../model/sdtmClassVariables';
import { SdtmClasses } from '../model/sdtmClasses';
import { SdtmDataset } from '../model/sdtmDataset';
import { SdtmDatasetVariable } from '../model/sdtmDatasetVariable';
import { SdtmDatasetVariables } from '../model/sdtmDatasetVariables';
import { SdtmDatasets } from '../model/sdtmDatasets';
import { SdtmProduct } from '../model/sdtmProduct';
import { XmlRootSdtmClassVariable } from '../model/xmlRootSdtmClassVariable';
import { XmlRootSdtmDatasetVariable } from '../model/xmlRootSdtmDatasetVariable';
import { XmlSdtmClass } from '../model/xmlSdtmClass';
import { XmlSdtmClassDatasets } from '../model/xmlSdtmClassDatasets';
import { XmlSdtmClassVariable } from '../model/xmlSdtmClassVariable';
import { XmlSdtmClassVariables } from '../model/xmlSdtmClassVariables';
import { XmlSdtmClasses } from '../model/xmlSdtmClasses';
import { XmlSdtmDataset } from '../model/xmlSdtmDataset';
import { XmlSdtmDatasetVariable } from '../model/xmlSdtmDatasetVariable';
import { XmlSdtmDatasetVariables } from '../model/xmlSdtmDatasetVariables';
import { XmlSdtmDatasets } from '../model/xmlSdtmDatasets';
import { XmlSdtmProduct } from '../model/xmlSdtmProduct';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class StudyDataTabulationModelSDTMService {
    private basePath: string = 'https://library.cdisc.org/api';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * 
     * Get Root of SDTM Class Variable
     * @param _class SDTM Class Identifier
     * @param _var SDTM Variable Identifier
     
     */
    public mdrRootSdtmClassesClassVariablesVarGet(_class: string, _var: string, observe?: 'body', headers?: Headers): Observable<RootSdtmClassVariable>;
    public mdrRootSdtmClassesClassVariablesVarGet(_class: string, _var: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<RootSdtmClassVariable>>;
    public mdrRootSdtmClassesClassVariablesVarGet(_class: string, _var: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (_class === null || _class === undefined){
            throw new Error('Required parameter _class was null or undefined when calling mdrRootSdtmClassesClassVariablesVarGet.');
        }

        if (_var === null || _var === undefined){
            throw new Error('Required parameter _var was null or undefined when calling mdrRootSdtmClassesClassVariablesVarGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<RootSdtmClassVariable>> = this.httpClient.get(`${this.basePath}/mdr/root/sdtm/classes/${encodeURIComponent(String(_class))}/variables/${encodeURIComponent(String(_var))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <RootSdtmClassVariable>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get Root SDTM Dataset Variable
     * @param dataset SDTM Dataset Identifier
     * @param _var SDTM Variable Identifier
     
     */
    public mdrRootSdtmDatasetsDatasetVariablesVarGet(dataset: string, _var: string, observe?: 'body', headers?: Headers): Observable<RootSdtmDatasetVariable>;
    public mdrRootSdtmDatasetsDatasetVariablesVarGet(dataset: string, _var: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<RootSdtmDatasetVariable>>;
    public mdrRootSdtmDatasetsDatasetVariablesVarGet(dataset: string, _var: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (dataset === null || dataset === undefined){
            throw new Error('Required parameter dataset was null or undefined when calling mdrRootSdtmDatasetsDatasetVariablesVarGet.');
        }

        if (_var === null || _var === undefined){
            throw new Error('Required parameter _var was null or undefined when calling mdrRootSdtmDatasetsDatasetVariablesVarGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<RootSdtmDatasetVariable>> = this.httpClient.get(`${this.basePath}/mdr/root/sdtm/datasets/${encodeURIComponent(String(dataset))}/variables/${encodeURIComponent(String(_var))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <RootSdtmDatasetVariable>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SDTM Class Dataset List
     * @param version CDISC Library Product Version
     * @param _class SDTM Class Identifier
     
     */
    public mdrSdtmVersionClassesClassDatasetsGet(version: string, _class: string, observe?: 'body', headers?: Headers): Observable<SdtmClassDatasets>;
    public mdrSdtmVersionClassesClassDatasetsGet(version: string, _class: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SdtmClassDatasets>>;
    public mdrSdtmVersionClassesClassDatasetsGet(version: string, _class: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmVersionClassesClassDatasetsGet.');
        }

        if (_class === null || _class === undefined){
            throw new Error('Required parameter _class was null or undefined when calling mdrSdtmVersionClassesClassDatasetsGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<SdtmClassDatasets>> = this.httpClient.get(`${this.basePath}/mdr/sdtm/${encodeURIComponent(String(version))}/classes/${encodeURIComponent(String(_class))}/datasets`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SdtmClassDatasets>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SDTM Class
     * @param version CDISC Library Product Version
     * @param _class SDTM Class Identifier
     
     */
    public mdrSdtmVersionClassesClassGet(version: string, _class: string, observe?: 'body', headers?: Headers): Observable<SdtmClass>;
    public mdrSdtmVersionClassesClassGet(version: string, _class: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SdtmClass>>;
    public mdrSdtmVersionClassesClassGet(version: string, _class: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmVersionClassesClassGet.');
        }

        if (_class === null || _class === undefined){
            throw new Error('Required parameter _class was null or undefined when calling mdrSdtmVersionClassesClassGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<SdtmClass>> = this.httpClient.get(`${this.basePath}/mdr/sdtm/${encodeURIComponent(String(version))}/classes/${encodeURIComponent(String(_class))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SdtmClass>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SDTM Class Variable List
     * @param version CDISC Library Product Version
     * @param _class SDTM Class Identifier
     
     */
    public mdrSdtmVersionClassesClassVariablesGet(version: string, _class: string, observe?: 'body', headers?: Headers): Observable<SdtmClassVariables>;
    public mdrSdtmVersionClassesClassVariablesGet(version: string, _class: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SdtmClassVariables>>;
    public mdrSdtmVersionClassesClassVariablesGet(version: string, _class: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmVersionClassesClassVariablesGet.');
        }

        if (_class === null || _class === undefined){
            throw new Error('Required parameter _class was null or undefined when calling mdrSdtmVersionClassesClassVariablesGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<SdtmClassVariables>> = this.httpClient.get(`${this.basePath}/mdr/sdtm/${encodeURIComponent(String(version))}/classes/${encodeURIComponent(String(_class))}/variables`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SdtmClassVariables>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SDTM Class Variable
     * @param version CDISC Library Product Version
     * @param _class SDTM Class Identifier
     * @param _var SDTM Variable Identifier
     
     */
    public mdrSdtmVersionClassesClassVariablesVarGet(version: string, _class: string, _var: string, observe?: 'body', headers?: Headers): Observable<SdtmClassVariable>;
    public mdrSdtmVersionClassesClassVariablesVarGet(version: string, _class: string, _var: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SdtmClassVariable>>;
    public mdrSdtmVersionClassesClassVariablesVarGet(version: string, _class: string, _var: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmVersionClassesClassVariablesVarGet.');
        }

        if (_class === null || _class === undefined){
            throw new Error('Required parameter _class was null or undefined when calling mdrSdtmVersionClassesClassVariablesVarGet.');
        }

        if (_var === null || _var === undefined){
            throw new Error('Required parameter _var was null or undefined when calling mdrSdtmVersionClassesClassVariablesVarGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<SdtmClassVariable>> = this.httpClient.get(`${this.basePath}/mdr/sdtm/${encodeURIComponent(String(version))}/classes/${encodeURIComponent(String(_class))}/variables/${encodeURIComponent(String(_var))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SdtmClassVariable>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SDTM Class List
     * @param version CDISC Library Product Version
     
     */
    public mdrSdtmVersionClassesGet(version: string, observe?: 'body', headers?: Headers): Observable<SdtmClasses>;
    public mdrSdtmVersionClassesGet(version: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SdtmClasses>>;
    public mdrSdtmVersionClassesGet(version: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmVersionClassesGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<SdtmClasses>> = this.httpClient.get(`${this.basePath}/mdr/sdtm/${encodeURIComponent(String(version))}/classes`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SdtmClasses>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SDTM Dataset
     * @param version CDISC Library Product Version
     * @param dataset SDTM Dataset Identifier
     
     */
    public mdrSdtmVersionDatasetsDatasetGet(version: string, dataset: string, observe?: 'body', headers?: Headers): Observable<SdtmDataset>;
    public mdrSdtmVersionDatasetsDatasetGet(version: string, dataset: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SdtmDataset>>;
    public mdrSdtmVersionDatasetsDatasetGet(version: string, dataset: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmVersionDatasetsDatasetGet.');
        }

        if (dataset === null || dataset === undefined){
            throw new Error('Required parameter dataset was null or undefined when calling mdrSdtmVersionDatasetsDatasetGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<SdtmDataset>> = this.httpClient.get(`${this.basePath}/mdr/sdtm/${encodeURIComponent(String(version))}/datasets/${encodeURIComponent(String(dataset))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SdtmDataset>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SDTM Dataset Variable List
     * @param version CDISC Library Product Version
     * @param dataset SDTM Dataset Identifier
     
     */
    public mdrSdtmVersionDatasetsDatasetVariablesGet(version: string, dataset: string, observe?: 'body', headers?: Headers): Observable<SdtmDatasetVariables>;
    public mdrSdtmVersionDatasetsDatasetVariablesGet(version: string, dataset: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SdtmDatasetVariables>>;
    public mdrSdtmVersionDatasetsDatasetVariablesGet(version: string, dataset: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesGet.');
        }

        if (dataset === null || dataset === undefined){
            throw new Error('Required parameter dataset was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<SdtmDatasetVariables>> = this.httpClient.get(`${this.basePath}/mdr/sdtm/${encodeURIComponent(String(version))}/datasets/${encodeURIComponent(String(dataset))}/variables`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SdtmDatasetVariables>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SDTM Dataset Variable
     * @param version CDISC Library Product Version
     * @param dataset SDTM Dataset Identifier
     * @param _var SDTM Variable Identifier
     
     */
    public mdrSdtmVersionDatasetsDatasetVariablesVarGet(version: string, dataset: string, _var: string, observe?: 'body', headers?: Headers): Observable<SdtmDatasetVariable>;
    public mdrSdtmVersionDatasetsDatasetVariablesVarGet(version: string, dataset: string, _var: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SdtmDatasetVariable>>;
    public mdrSdtmVersionDatasetsDatasetVariablesVarGet(version: string, dataset: string, _var: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet.');
        }

        if (dataset === null || dataset === undefined){
            throw new Error('Required parameter dataset was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet.');
        }

        if (_var === null || _var === undefined){
            throw new Error('Required parameter _var was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<SdtmDatasetVariable>> = this.httpClient.get(`${this.basePath}/mdr/sdtm/${encodeURIComponent(String(version))}/datasets/${encodeURIComponent(String(dataset))}/variables/${encodeURIComponent(String(_var))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SdtmDatasetVariable>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SDTM Dataset List
     * @param version CDISC Library Product Version
     
     */
    public mdrSdtmVersionDatasetsGet(version: string, observe?: 'body', headers?: Headers): Observable<SdtmDatasets>;
    public mdrSdtmVersionDatasetsGet(version: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SdtmDatasets>>;
    public mdrSdtmVersionDatasetsGet(version: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmVersionDatasetsGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml, text/csv';

        const response: Observable<HttpResponse<SdtmDatasets>> = this.httpClient.get(`${this.basePath}/mdr/sdtm/${encodeURIComponent(String(version))}/datasets`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SdtmDatasets>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SDTM product
     * @param version CDISC Library Product Version
     
     */
    public mdrSdtmVersionGet(version: string, observe?: 'body', headers?: Headers): Observable<SdtmProduct>;
    public mdrSdtmVersionGet(version: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SdtmProduct>>;
    public mdrSdtmVersionGet(version: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmVersionGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml, text/csv, application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';

        const response: Observable<HttpResponse<SdtmProduct>> = this.httpClient.get(`${this.basePath}/mdr/sdtm/${encodeURIComponent(String(version))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SdtmProduct>(httpResponse.response))
               );
        }
        return response;
    }

}

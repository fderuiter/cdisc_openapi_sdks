/**
 * CDISC Library API
 *
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { DefaultErrorResponse } from '../model/defaultErrorResponse';
// @ts-ignore
import { ExportSdtmDatasetsTable } from '../model/exportSdtmDatasetsTable';
// @ts-ignore
import { ExportSdtmVariablesTable } from '../model/exportSdtmVariablesTable';
// @ts-ignore
import { ExportSdtmWorkbook } from '../model/exportSdtmWorkbook';
// @ts-ignore
import { RootSdtmClassVariable } from '../model/rootSdtmClassVariable';
// @ts-ignore
import { RootSdtmDatasetVariable } from '../model/rootSdtmDatasetVariable';
// @ts-ignore
import { SdtmClass } from '../model/sdtmClass';
// @ts-ignore
import { SdtmClassDatasets } from '../model/sdtmClassDatasets';
// @ts-ignore
import { SdtmClassVariable } from '../model/sdtmClassVariable';
// @ts-ignore
import { SdtmClassVariables } from '../model/sdtmClassVariables';
// @ts-ignore
import { SdtmClasses } from '../model/sdtmClasses';
// @ts-ignore
import { SdtmDataset } from '../model/sdtmDataset';
// @ts-ignore
import { SdtmDatasetVariable } from '../model/sdtmDatasetVariable';
// @ts-ignore
import { SdtmDatasetVariables } from '../model/sdtmDatasetVariables';
// @ts-ignore
import { SdtmDatasets } from '../model/sdtmDatasets';
// @ts-ignore
import { SdtmProduct } from '../model/sdtmProduct';
// @ts-ignore
import { XmlRootSdtmClassVariable } from '../model/xmlRootSdtmClassVariable';
// @ts-ignore
import { XmlRootSdtmDatasetVariable } from '../model/xmlRootSdtmDatasetVariable';
// @ts-ignore
import { XmlSdtmClass } from '../model/xmlSdtmClass';
// @ts-ignore
import { XmlSdtmClassDatasets } from '../model/xmlSdtmClassDatasets';
// @ts-ignore
import { XmlSdtmClassVariable } from '../model/xmlSdtmClassVariable';
// @ts-ignore
import { XmlSdtmClassVariables } from '../model/xmlSdtmClassVariables';
// @ts-ignore
import { XmlSdtmClasses } from '../model/xmlSdtmClasses';
// @ts-ignore
import { XmlSdtmDataset } from '../model/xmlSdtmDataset';
// @ts-ignore
import { XmlSdtmDatasetVariable } from '../model/xmlSdtmDatasetVariable';
// @ts-ignore
import { XmlSdtmDatasetVariables } from '../model/xmlSdtmDatasetVariables';
// @ts-ignore
import { XmlSdtmDatasets } from '../model/xmlSdtmDatasets';
// @ts-ignore
import { XmlSdtmProduct } from '../model/xmlSdtmProduct';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { BaseService } from '../api.base.service';



@Injectable({
  providedIn: 'root'
})
export class StudyDataTabulationModelSDTMService extends BaseService {

    constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string|string[], @Optional() configuration?: Configuration) {
        super(basePath, configuration);
    }

    /**
     * Get Root of SDTM Class Variable
     * @param _class SDTM Class Identifier
     * @param _var SDTM Variable Identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrRootSdtmClassesClassVariablesVarGet(_class: string, _var: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<RootSdtmClassVariable>;
    public mdrRootSdtmClassesClassVariablesVarGet(_class: string, _var: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<RootSdtmClassVariable>>;
    public mdrRootSdtmClassesClassVariablesVarGet(_class: string, _var: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<RootSdtmClassVariable>>;
    public mdrRootSdtmClassesClassVariablesVarGet(_class: string, _var: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (_class === null || _class === undefined) {
            throw new Error('Required parameter _class was null or undefined when calling mdrRootSdtmClassesClassVariablesVarGet.');
        }
        if (_var === null || _var === undefined) {
            throw new Error('Required parameter _var was null or undefined when calling mdrRootSdtmClassesClassVariablesVarGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/root/sdtm/classes/${this.configuration.encodeParam({name: "_class", value: _class, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/variables/${this.configuration.encodeParam({name: "_var", value: _var, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<RootSdtmClassVariable>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Root SDTM Dataset Variable
     * @param dataset SDTM Dataset Identifier
     * @param _var SDTM Variable Identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrRootSdtmDatasetsDatasetVariablesVarGet(dataset: string, _var: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<RootSdtmDatasetVariable>;
    public mdrRootSdtmDatasetsDatasetVariablesVarGet(dataset: string, _var: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<RootSdtmDatasetVariable>>;
    public mdrRootSdtmDatasetsDatasetVariablesVarGet(dataset: string, _var: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<RootSdtmDatasetVariable>>;
    public mdrRootSdtmDatasetsDatasetVariablesVarGet(dataset: string, _var: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (dataset === null || dataset === undefined) {
            throw new Error('Required parameter dataset was null or undefined when calling mdrRootSdtmDatasetsDatasetVariablesVarGet.');
        }
        if (_var === null || _var === undefined) {
            throw new Error('Required parameter _var was null or undefined when calling mdrRootSdtmDatasetsDatasetVariablesVarGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/root/sdtm/datasets/${this.configuration.encodeParam({name: "dataset", value: dataset, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/variables/${this.configuration.encodeParam({name: "_var", value: _var, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<RootSdtmDatasetVariable>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get SDTM Class Dataset List
     * @param version CDISC Library Product Version
     * @param _class SDTM Class Identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrSdtmVersionClassesClassDatasetsGet(version: string, _class: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<SdtmClassDatasets>;
    public mdrSdtmVersionClassesClassDatasetsGet(version: string, _class: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<SdtmClassDatasets>>;
    public mdrSdtmVersionClassesClassDatasetsGet(version: string, _class: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<SdtmClassDatasets>>;
    public mdrSdtmVersionClassesClassDatasetsGet(version: string, _class: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmVersionClassesClassDatasetsGet.');
        }
        if (_class === null || _class === undefined) {
            throw new Error('Required parameter _class was null or undefined when calling mdrSdtmVersionClassesClassDatasetsGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/sdtm/${this.configuration.encodeParam({name: "version", value: version, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/classes/${this.configuration.encodeParam({name: "_class", value: _class, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/datasets`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<SdtmClassDatasets>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get SDTM Class
     * @param version CDISC Library Product Version
     * @param _class SDTM Class Identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrSdtmVersionClassesClassGet(version: string, _class: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<SdtmClass>;
    public mdrSdtmVersionClassesClassGet(version: string, _class: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<SdtmClass>>;
    public mdrSdtmVersionClassesClassGet(version: string, _class: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<SdtmClass>>;
    public mdrSdtmVersionClassesClassGet(version: string, _class: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmVersionClassesClassGet.');
        }
        if (_class === null || _class === undefined) {
            throw new Error('Required parameter _class was null or undefined when calling mdrSdtmVersionClassesClassGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/sdtm/${this.configuration.encodeParam({name: "version", value: version, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/classes/${this.configuration.encodeParam({name: "_class", value: _class, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<SdtmClass>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get SDTM Class Variable List
     * @param version CDISC Library Product Version
     * @param _class SDTM Class Identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrSdtmVersionClassesClassVariablesGet(version: string, _class: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<SdtmClassVariables>;
    public mdrSdtmVersionClassesClassVariablesGet(version: string, _class: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<SdtmClassVariables>>;
    public mdrSdtmVersionClassesClassVariablesGet(version: string, _class: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<SdtmClassVariables>>;
    public mdrSdtmVersionClassesClassVariablesGet(version: string, _class: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmVersionClassesClassVariablesGet.');
        }
        if (_class === null || _class === undefined) {
            throw new Error('Required parameter _class was null or undefined when calling mdrSdtmVersionClassesClassVariablesGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/sdtm/${this.configuration.encodeParam({name: "version", value: version, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/classes/${this.configuration.encodeParam({name: "_class", value: _class, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/variables`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<SdtmClassVariables>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get SDTM Class Variable
     * @param version CDISC Library Product Version
     * @param _class SDTM Class Identifier
     * @param _var SDTM Variable Identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrSdtmVersionClassesClassVariablesVarGet(version: string, _class: string, _var: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<SdtmClassVariable>;
    public mdrSdtmVersionClassesClassVariablesVarGet(version: string, _class: string, _var: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<SdtmClassVariable>>;
    public mdrSdtmVersionClassesClassVariablesVarGet(version: string, _class: string, _var: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<SdtmClassVariable>>;
    public mdrSdtmVersionClassesClassVariablesVarGet(version: string, _class: string, _var: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmVersionClassesClassVariablesVarGet.');
        }
        if (_class === null || _class === undefined) {
            throw new Error('Required parameter _class was null or undefined when calling mdrSdtmVersionClassesClassVariablesVarGet.');
        }
        if (_var === null || _var === undefined) {
            throw new Error('Required parameter _var was null or undefined when calling mdrSdtmVersionClassesClassVariablesVarGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/sdtm/${this.configuration.encodeParam({name: "version", value: version, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/classes/${this.configuration.encodeParam({name: "_class", value: _class, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/variables/${this.configuration.encodeParam({name: "_var", value: _var, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<SdtmClassVariable>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get SDTM Class List
     * @param version CDISC Library Product Version
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrSdtmVersionClassesGet(version: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<SdtmClasses>;
    public mdrSdtmVersionClassesGet(version: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<SdtmClasses>>;
    public mdrSdtmVersionClassesGet(version: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<SdtmClasses>>;
    public mdrSdtmVersionClassesGet(version: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmVersionClassesGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/sdtm/${this.configuration.encodeParam({name: "version", value: version, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/classes`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<SdtmClasses>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get SDTM Dataset
     * @param version CDISC Library Product Version
     * @param dataset SDTM Dataset Identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrSdtmVersionDatasetsDatasetGet(version: string, dataset: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<SdtmDataset>;
    public mdrSdtmVersionDatasetsDatasetGet(version: string, dataset: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<SdtmDataset>>;
    public mdrSdtmVersionDatasetsDatasetGet(version: string, dataset: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<SdtmDataset>>;
    public mdrSdtmVersionDatasetsDatasetGet(version: string, dataset: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmVersionDatasetsDatasetGet.');
        }
        if (dataset === null || dataset === undefined) {
            throw new Error('Required parameter dataset was null or undefined when calling mdrSdtmVersionDatasetsDatasetGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/sdtm/${this.configuration.encodeParam({name: "version", value: version, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/datasets/${this.configuration.encodeParam({name: "dataset", value: dataset, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<SdtmDataset>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get SDTM Dataset Variable List
     * @param version CDISC Library Product Version
     * @param dataset SDTM Dataset Identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrSdtmVersionDatasetsDatasetVariablesGet(version: string, dataset: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<SdtmDatasetVariables>;
    public mdrSdtmVersionDatasetsDatasetVariablesGet(version: string, dataset: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<SdtmDatasetVariables>>;
    public mdrSdtmVersionDatasetsDatasetVariablesGet(version: string, dataset: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<SdtmDatasetVariables>>;
    public mdrSdtmVersionDatasetsDatasetVariablesGet(version: string, dataset: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesGet.');
        }
        if (dataset === null || dataset === undefined) {
            throw new Error('Required parameter dataset was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/sdtm/${this.configuration.encodeParam({name: "version", value: version, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/datasets/${this.configuration.encodeParam({name: "dataset", value: dataset, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/variables`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<SdtmDatasetVariables>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get SDTM Dataset Variable
     * @param version CDISC Library Product Version
     * @param dataset SDTM Dataset Identifier
     * @param _var SDTM Variable Identifier
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrSdtmVersionDatasetsDatasetVariablesVarGet(version: string, dataset: string, _var: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<SdtmDatasetVariable>;
    public mdrSdtmVersionDatasetsDatasetVariablesVarGet(version: string, dataset: string, _var: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<SdtmDatasetVariable>>;
    public mdrSdtmVersionDatasetsDatasetVariablesVarGet(version: string, dataset: string, _var: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<SdtmDatasetVariable>>;
    public mdrSdtmVersionDatasetsDatasetVariablesVarGet(version: string, dataset: string, _var: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet.');
        }
        if (dataset === null || dataset === undefined) {
            throw new Error('Required parameter dataset was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet.');
        }
        if (_var === null || _var === undefined) {
            throw new Error('Required parameter _var was null or undefined when calling mdrSdtmVersionDatasetsDatasetVariablesVarGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/sdtm/${this.configuration.encodeParam({name: "version", value: version, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/datasets/${this.configuration.encodeParam({name: "dataset", value: dataset, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/variables/${this.configuration.encodeParam({name: "_var", value: _var, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<SdtmDatasetVariable>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get SDTM Dataset List
     * @param version CDISC Library Product Version
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrSdtmVersionDatasetsGet(version: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/csv', context?: HttpContext, transferCache?: boolean}): Observable<SdtmDatasets>;
    public mdrSdtmVersionDatasetsGet(version: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/csv', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<SdtmDatasets>>;
    public mdrSdtmVersionDatasetsGet(version: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/csv', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<SdtmDatasets>>;
    public mdrSdtmVersionDatasetsGet(version: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/csv', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmVersionDatasetsGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml',
            'text/csv'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/sdtm/${this.configuration.encodeParam({name: "version", value: version, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}/datasets`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<SdtmDatasets>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get SDTM product
     * @param version CDISC Library Product Version
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public mdrSdtmVersionGet(version: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/csv' | 'application/vnd.ms-excel' | 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<SdtmProduct>;
    public mdrSdtmVersionGet(version: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/csv' | 'application/vnd.ms-excel' | 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<SdtmProduct>>;
    public mdrSdtmVersionGet(version: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/csv' | 'application/vnd.ms-excel' | 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<SdtmProduct>>;
    public mdrSdtmVersionGet(version: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json' | 'application/xml' | 'text/csv' | 'application/vnd.ms-excel' | 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmVersionGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        // authentication (basicAuth) required
        localVarHeaders = this.configuration.addCredentialToHeaders('basicAuth', 'Authorization', localVarHeaders, 'Basic ');

        const localVarHttpHeaderAcceptSelected: string | undefined = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([
            'application/json',
            'application/xml',
            'text/csv',
            'application/vnd.ms-excel',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ]);
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        const localVarHttpContext: HttpContext = options?.context ?? new HttpContext();

        const localVarTransferCache: boolean = options?.transferCache ?? true;


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/mdr/sdtm/${this.configuration.encodeParam({name: "version", value: version, in: "path", style: "simple", explode: false, dataType: "string", dataFormat: undefined})}`;
        const { basePath, withCredentials } = this.configuration;
        return this.httpClient.request<SdtmProduct>('get', `${basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                ...(withCredentials ? { withCredentials } : {}),
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}

/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { DefaultErrorResponse } from '../model/defaultErrorResponse';
import { ExportSdtmigDatasetsTable } from '../model/exportSdtmigDatasetsTable';
import { ExportSdtmigVariablesTable } from '../model/exportSdtmigVariablesTable';
import { ExportSdtmigWorkbook } from '../model/exportSdtmigWorkbook';
import { RootSdtmigDatasetVariable } from '../model/rootSdtmigDatasetVariable';
import { SdtmigClass } from '../model/sdtmigClass';
import { SdtmigClassDatasets } from '../model/sdtmigClassDatasets';
import { SdtmigClasses } from '../model/sdtmigClasses';
import { SdtmigDataset } from '../model/sdtmigDataset';
import { SdtmigDatasetVariable } from '../model/sdtmigDatasetVariable';
import { SdtmigDatasetVariables } from '../model/sdtmigDatasetVariables';
import { SdtmigDatasets } from '../model/sdtmigDatasets';
import { SdtmigProduct } from '../model/sdtmigProduct';
import { XmlRootSdtmigDatasetVariable } from '../model/xmlRootSdtmigDatasetVariable';
import { XmlSdtmigClass } from '../model/xmlSdtmigClass';
import { XmlSdtmigClassDatasets } from '../model/xmlSdtmigClassDatasets';
import { XmlSdtmigClasses } from '../model/xmlSdtmigClasses';
import { XmlSdtmigDataset } from '../model/xmlSdtmigDataset';
import { XmlSdtmigDatasetVariable } from '../model/xmlSdtmigDatasetVariable';
import { XmlSdtmigDatasetVariables } from '../model/xmlSdtmigDatasetVariables';
import { XmlSdtmigDatasets } from '../model/xmlSdtmigDatasets';
import { XmlSdtmigProduct } from '../model/xmlSdtmigProduct';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class SDTMImplementationGuideSDTMIGService {
    private basePath: string = 'https://library.cdisc.org/api';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * 
     * Get Root SDTMIG Dataset Variable
     * @param dataset SDTMIG Dataset Identifier
     * @param _var SDTMIG Variable Identifier
     
     */
    public mdrRootSdtmigDatasetsDatasetVariablesVarGet(dataset: string, _var: string, observe?: 'body', headers?: Headers): Observable<RootSdtmigDatasetVariable>;
    public mdrRootSdtmigDatasetsDatasetVariablesVarGet(dataset: string, _var: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<RootSdtmigDatasetVariable>>;
    public mdrRootSdtmigDatasetsDatasetVariablesVarGet(dataset: string, _var: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (dataset === null || dataset === undefined){
            throw new Error('Required parameter dataset was null or undefined when calling mdrRootSdtmigDatasetsDatasetVariablesVarGet.');
        }

        if (_var === null || _var === undefined){
            throw new Error('Required parameter _var was null or undefined when calling mdrRootSdtmigDatasetsDatasetVariablesVarGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<RootSdtmigDatasetVariable>> = this.httpClient.get(`${this.basePath}/mdr/root/sdtmig/datasets/${encodeURIComponent(String(dataset))}/variables/${encodeURIComponent(String(_var))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <RootSdtmigDatasetVariable>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SDTMIG Class Dataset List
     * @param version CDISC Library Product Version
     * @param _class SDTMIG Class Identifier
     
     */
    public mdrSdtmigVersionClassesClassDatasetsGet(version: string, _class: string, observe?: 'body', headers?: Headers): Observable<SdtmigClassDatasets>;
    public mdrSdtmigVersionClassesClassDatasetsGet(version: string, _class: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SdtmigClassDatasets>>;
    public mdrSdtmigVersionClassesClassDatasetsGet(version: string, _class: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmigVersionClassesClassDatasetsGet.');
        }

        if (_class === null || _class === undefined){
            throw new Error('Required parameter _class was null or undefined when calling mdrSdtmigVersionClassesClassDatasetsGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<SdtmigClassDatasets>> = this.httpClient.get(`${this.basePath}/mdr/sdtmig/${encodeURIComponent(String(version))}/classes/${encodeURIComponent(String(_class))}/datasets`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SdtmigClassDatasets>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SDTMIG Class
     * @param version CDISC Library Product Version
     * @param _class SDTMIG Class Identifier
     
     */
    public mdrSdtmigVersionClassesClassGet(version: string, _class: string, observe?: 'body', headers?: Headers): Observable<SdtmigClass>;
    public mdrSdtmigVersionClassesClassGet(version: string, _class: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SdtmigClass>>;
    public mdrSdtmigVersionClassesClassGet(version: string, _class: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmigVersionClassesClassGet.');
        }

        if (_class === null || _class === undefined){
            throw new Error('Required parameter _class was null or undefined when calling mdrSdtmigVersionClassesClassGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<SdtmigClass>> = this.httpClient.get(`${this.basePath}/mdr/sdtmig/${encodeURIComponent(String(version))}/classes/${encodeURIComponent(String(_class))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SdtmigClass>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SDTMIG Class List
     * @param version CDISC Library Product Version
     
     */
    public mdrSdtmigVersionClassesGet(version: string, observe?: 'body', headers?: Headers): Observable<SdtmigClasses>;
    public mdrSdtmigVersionClassesGet(version: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SdtmigClasses>>;
    public mdrSdtmigVersionClassesGet(version: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmigVersionClassesGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<SdtmigClasses>> = this.httpClient.get(`${this.basePath}/mdr/sdtmig/${encodeURIComponent(String(version))}/classes`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SdtmigClasses>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SDTMIG Dataset
     * @param version CDISC Library Product Version
     * @param dataset SDTMIG Dataset Identifier
     
     */
    public mdrSdtmigVersionDatasetsDatasetGet(version: string, dataset: string, observe?: 'body', headers?: Headers): Observable<SdtmigDataset>;
    public mdrSdtmigVersionDatasetsDatasetGet(version: string, dataset: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SdtmigDataset>>;
    public mdrSdtmigVersionDatasetsDatasetGet(version: string, dataset: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmigVersionDatasetsDatasetGet.');
        }

        if (dataset === null || dataset === undefined){
            throw new Error('Required parameter dataset was null or undefined when calling mdrSdtmigVersionDatasetsDatasetGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<SdtmigDataset>> = this.httpClient.get(`${this.basePath}/mdr/sdtmig/${encodeURIComponent(String(version))}/datasets/${encodeURIComponent(String(dataset))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SdtmigDataset>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SDTMIG Dataset Variable List
     * @param version CDISC Library Product Version
     * @param dataset SDTMIG Dataset Identifier
     
     */
    public mdrSdtmigVersionDatasetsDatasetVariablesGet(version: string, dataset: string, observe?: 'body', headers?: Headers): Observable<SdtmigDatasetVariables>;
    public mdrSdtmigVersionDatasetsDatasetVariablesGet(version: string, dataset: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SdtmigDatasetVariables>>;
    public mdrSdtmigVersionDatasetsDatasetVariablesGet(version: string, dataset: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmigVersionDatasetsDatasetVariablesGet.');
        }

        if (dataset === null || dataset === undefined){
            throw new Error('Required parameter dataset was null or undefined when calling mdrSdtmigVersionDatasetsDatasetVariablesGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<SdtmigDatasetVariables>> = this.httpClient.get(`${this.basePath}/mdr/sdtmig/${encodeURIComponent(String(version))}/datasets/${encodeURIComponent(String(dataset))}/variables`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SdtmigDatasetVariables>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SDTMIG Dataset Variable
     * @param version CDISC Library Product Version
     * @param dataset SDTMIG Dataset Identifier
     * @param _var SDTMIG Variable Identifier
     
     */
    public mdrSdtmigVersionDatasetsDatasetVariablesVarGet(version: string, dataset: string, _var: string, observe?: 'body', headers?: Headers): Observable<SdtmigDatasetVariable>;
    public mdrSdtmigVersionDatasetsDatasetVariablesVarGet(version: string, dataset: string, _var: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SdtmigDatasetVariable>>;
    public mdrSdtmigVersionDatasetsDatasetVariablesVarGet(version: string, dataset: string, _var: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet.');
        }

        if (dataset === null || dataset === undefined){
            throw new Error('Required parameter dataset was null or undefined when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet.');
        }

        if (_var === null || _var === undefined){
            throw new Error('Required parameter _var was null or undefined when calling mdrSdtmigVersionDatasetsDatasetVariablesVarGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<SdtmigDatasetVariable>> = this.httpClient.get(`${this.basePath}/mdr/sdtmig/${encodeURIComponent(String(version))}/datasets/${encodeURIComponent(String(dataset))}/variables/${encodeURIComponent(String(_var))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SdtmigDatasetVariable>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SDTMIG Dataset List
     * @param version CDISC Library Product Version
     
     */
    public mdrSdtmigVersionDatasetsGet(version: string, observe?: 'body', headers?: Headers): Observable<SdtmigDatasets>;
    public mdrSdtmigVersionDatasetsGet(version: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SdtmigDatasets>>;
    public mdrSdtmigVersionDatasetsGet(version: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmigVersionDatasetsGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml, text/csv';

        const response: Observable<HttpResponse<SdtmigDatasets>> = this.httpClient.get(`${this.basePath}/mdr/sdtmig/${encodeURIComponent(String(version))}/datasets`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SdtmigDatasets>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get SDTMIG product
     * @param version CDISC Library Product Version
     
     */
    public mdrSdtmigVersionGet(version: string, observe?: 'body', headers?: Headers): Observable<SdtmigProduct>;
    public mdrSdtmigVersionGet(version: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<SdtmigProduct>>;
    public mdrSdtmigVersionGet(version: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrSdtmigVersionGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml, text/csv, application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';

        const response: Observable<HttpResponse<SdtmigProduct>> = this.httpClient.get(`${this.basePath}/mdr/sdtmig/${encodeURIComponent(String(version))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <SdtmigProduct>(httpResponse.response))
               );
        }
        return response;
    }

}

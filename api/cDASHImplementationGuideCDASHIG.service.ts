/**
 * CDISC Library API
 * REST API Documentation for CDISC Library in production server
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: cdisc_library_support@cdisc.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { CdashigClass } from '../model/cdashigClass';
import { CdashigClassDomains } from '../model/cdashigClassDomains';
import { CdashigClassScenarios } from '../model/cdashigClassScenarios';
import { CdashigDomain } from '../model/cdashigDomain';
import { CdashigDomainField } from '../model/cdashigDomainField';
import { CdashigDomainFields } from '../model/cdashigDomainFields';
import { CdashigProduct } from '../model/cdashigProduct';
import { CdashigProductClasses } from '../model/cdashigProductClasses';
import { CdashigProductDomains } from '../model/cdashigProductDomains';
import { CdashigProductScenarios } from '../model/cdashigProductScenarios';
import { CdashigScenario } from '../model/cdashigScenario';
import { CdashigScenarioField } from '../model/cdashigScenarioField';
import { CdashigScenarioFields } from '../model/cdashigScenarioFields';
import { DefaultErrorResponse } from '../model/defaultErrorResponse';
import { ExportCdashigTable } from '../model/exportCdashigTable';
import { RootCdashigDomainField } from '../model/rootCdashigDomainField';
import { RootCdashigScenarioField } from '../model/rootCdashigScenarioField';
import { XmlCdashigClass } from '../model/xmlCdashigClass';
import { XmlCdashigClassDomains } from '../model/xmlCdashigClassDomains';
import { XmlCdashigClassScenarios } from '../model/xmlCdashigClassScenarios';
import { XmlCdashigDomain } from '../model/xmlCdashigDomain';
import { XmlCdashigDomainField } from '../model/xmlCdashigDomainField';
import { XmlCdashigDomainFields } from '../model/xmlCdashigDomainFields';
import { XmlCdashigProduct } from '../model/xmlCdashigProduct';
import { XmlCdashigProductClasses } from '../model/xmlCdashigProductClasses';
import { XmlCdashigProductDomains } from '../model/xmlCdashigProductDomains';
import { XmlCdashigProductScenarios } from '../model/xmlCdashigProductScenarios';
import { XmlCdashigScenario } from '../model/xmlCdashigScenario';
import { XmlCdashigScenarioField } from '../model/xmlCdashigScenarioField';
import { XmlCdashigScenarioFields } from '../model/xmlCdashigScenarioFields';
import { XmlRootCdashigDomainField } from '../model/xmlRootCdashigDomainField';
import { XmlRootCdashigScenarioField } from '../model/xmlRootCdashigScenarioField';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class CDASHImplementationGuideCDASHIGService {
    private basePath: string = 'https://library.cdisc.org/api';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * 
     * Get CDASHIG Class Domain List
     * @param version CDISC Library Product Version
     * @param _class CDASHIG Class Identifier
     
     */
    public mdrCdashigVersionClassesClassDomainsGet(version: string, _class: string, observe?: 'body', headers?: Headers): Observable<CdashigClassDomains>;
    public mdrCdashigVersionClassesClassDomainsGet(version: string, _class: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CdashigClassDomains>>;
    public mdrCdashigVersionClassesClassDomainsGet(version: string, _class: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrCdashigVersionClassesClassDomainsGet.');
        }

        if (_class === null || _class === undefined){
            throw new Error('Required parameter _class was null or undefined when calling mdrCdashigVersionClassesClassDomainsGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CdashigClassDomains>> = this.httpClient.get(`${this.basePath}/mdr/cdashig/${encodeURIComponent(String(version))}/classes/${encodeURIComponent(String(_class))}/domains`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CdashigClassDomains>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDASHIG Class
     * @param version CDISC Library Product Version
     * @param _class CDASHIG Class Identifier
     
     */
    public mdrCdashigVersionClassesClassGet(version: string, _class: string, observe?: 'body', headers?: Headers): Observable<CdashigClass>;
    public mdrCdashigVersionClassesClassGet(version: string, _class: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CdashigClass>>;
    public mdrCdashigVersionClassesClassGet(version: string, _class: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrCdashigVersionClassesClassGet.');
        }

        if (_class === null || _class === undefined){
            throw new Error('Required parameter _class was null or undefined when calling mdrCdashigVersionClassesClassGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CdashigClass>> = this.httpClient.get(`${this.basePath}/mdr/cdashig/${encodeURIComponent(String(version))}/classes/${encodeURIComponent(String(_class))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CdashigClass>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDASHIG Class Scenario List
     * @param version CDISC Library Product Version
     * @param _class CDASHIG Class Identifier
     
     */
    public mdrCdashigVersionClassesClassScenariosGet(version: string, _class: string, observe?: 'body', headers?: Headers): Observable<CdashigClassScenarios>;
    public mdrCdashigVersionClassesClassScenariosGet(version: string, _class: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CdashigClassScenarios>>;
    public mdrCdashigVersionClassesClassScenariosGet(version: string, _class: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrCdashigVersionClassesClassScenariosGet.');
        }

        if (_class === null || _class === undefined){
            throw new Error('Required parameter _class was null or undefined when calling mdrCdashigVersionClassesClassScenariosGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CdashigClassScenarios>> = this.httpClient.get(`${this.basePath}/mdr/cdashig/${encodeURIComponent(String(version))}/classes/${encodeURIComponent(String(_class))}/scenarios`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CdashigClassScenarios>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDASHIG Class List
     * @param version CDISC Library Product Version
     
     */
    public mdrCdashigVersionClassesGet(version: string, observe?: 'body', headers?: Headers): Observable<CdashigProductClasses>;
    public mdrCdashigVersionClassesGet(version: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CdashigProductClasses>>;
    public mdrCdashigVersionClassesGet(version: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrCdashigVersionClassesGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CdashigProductClasses>> = this.httpClient.get(`${this.basePath}/mdr/cdashig/${encodeURIComponent(String(version))}/classes`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CdashigProductClasses>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDASHIG Domain Field
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     * @param field CDASHIG Field Identifier
     
     */
    public mdrCdashigVersionDomainsDomainFieldsFieldGet(version: string, domain: string, field: string, observe?: 'body', headers?: Headers): Observable<CdashigDomainField>;
    public mdrCdashigVersionDomainsDomainFieldsFieldGet(version: string, domain: string, field: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CdashigDomainField>>;
    public mdrCdashigVersionDomainsDomainFieldsFieldGet(version: string, domain: string, field: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrCdashigVersionDomainsDomainFieldsFieldGet.');
        }

        if (domain === null || domain === undefined){
            throw new Error('Required parameter domain was null or undefined when calling mdrCdashigVersionDomainsDomainFieldsFieldGet.');
        }

        if (field === null || field === undefined){
            throw new Error('Required parameter field was null or undefined when calling mdrCdashigVersionDomainsDomainFieldsFieldGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CdashigDomainField>> = this.httpClient.get(`${this.basePath}/mdr/cdashig/${encodeURIComponent(String(version))}/domains/${encodeURIComponent(String(domain))}/fields/${encodeURIComponent(String(field))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CdashigDomainField>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDASHIG Domain Field List
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     
     */
    public mdrCdashigVersionDomainsDomainFieldsGet(version: string, domain: string, observe?: 'body', headers?: Headers): Observable<CdashigDomainFields>;
    public mdrCdashigVersionDomainsDomainFieldsGet(version: string, domain: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CdashigDomainFields>>;
    public mdrCdashigVersionDomainsDomainFieldsGet(version: string, domain: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrCdashigVersionDomainsDomainFieldsGet.');
        }

        if (domain === null || domain === undefined){
            throw new Error('Required parameter domain was null or undefined when calling mdrCdashigVersionDomainsDomainFieldsGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CdashigDomainFields>> = this.httpClient.get(`${this.basePath}/mdr/cdashig/${encodeURIComponent(String(version))}/domains/${encodeURIComponent(String(domain))}/fields`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CdashigDomainFields>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDASHIG Domain
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     
     */
    public mdrCdashigVersionDomainsDomainGet(version: string, domain: string, observe?: 'body', headers?: Headers): Observable<CdashigDomain>;
    public mdrCdashigVersionDomainsDomainGet(version: string, domain: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CdashigDomain>>;
    public mdrCdashigVersionDomainsDomainGet(version: string, domain: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrCdashigVersionDomainsDomainGet.');
        }

        if (domain === null || domain === undefined){
            throw new Error('Required parameter domain was null or undefined when calling mdrCdashigVersionDomainsDomainGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CdashigDomain>> = this.httpClient.get(`${this.basePath}/mdr/cdashig/${encodeURIComponent(String(version))}/domains/${encodeURIComponent(String(domain))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CdashigDomain>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDASHIG Domain List
     * @param version CDISC Library Product Version
     
     */
    public mdrCdashigVersionDomainsGet(version: string, observe?: 'body', headers?: Headers): Observable<CdashigProductDomains>;
    public mdrCdashigVersionDomainsGet(version: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CdashigProductDomains>>;
    public mdrCdashigVersionDomainsGet(version: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrCdashigVersionDomainsGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CdashigProductDomains>> = this.httpClient.get(`${this.basePath}/mdr/cdashig/${encodeURIComponent(String(version))}/domains`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CdashigProductDomains>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDASHIG Product
     * @param version CDISC Library Product Version
     
     */
    public mdrCdashigVersionGet(version: string, observe?: 'body', headers?: Headers): Observable<CdashigProduct>;
    public mdrCdashigVersionGet(version: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CdashigProduct>>;
    public mdrCdashigVersionGet(version: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrCdashigVersionGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml, text/csv, application/vnd.ms-excel, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';

        const response: Observable<HttpResponse<CdashigProduct>> = this.httpClient.get(`${this.basePath}/mdr/cdashig/${encodeURIComponent(String(version))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CdashigProduct>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDASHIG Scenario Field
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     * @param scenario CDASHIG Scenario Identifier
     * @param field CDASHIG Field Identifier
     
     */
    public mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet(version: string, domain: string, scenario: string, field: string, observe?: 'body', headers?: Headers): Observable<CdashigScenarioField>;
    public mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet(version: string, domain: string, scenario: string, field: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CdashigScenarioField>>;
    public mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet(version: string, domain: string, scenario: string, field: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet.');
        }

        if (domain === null || domain === undefined){
            throw new Error('Required parameter domain was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet.');
        }

        if (scenario === null || scenario === undefined){
            throw new Error('Required parameter scenario was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet.');
        }

        if (field === null || field === undefined){
            throw new Error('Required parameter field was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsFieldGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CdashigScenarioField>> = this.httpClient.get(`${this.basePath}/mdr/cdashig/${encodeURIComponent(String(version))}/scenarios/${encodeURIComponent(String(domain))}.${encodeURIComponent(String(scenario))}/fields/${encodeURIComponent(String(field))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CdashigScenarioField>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDASHIG Scenario Field List
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     * @param scenario CDASHIG Scenario Identifier
     
     */
    public mdrCdashigVersionScenariosDomainScenarioFieldsGet(version: string, domain: string, scenario: string, observe?: 'body', headers?: Headers): Observable<CdashigScenarioFields>;
    public mdrCdashigVersionScenariosDomainScenarioFieldsGet(version: string, domain: string, scenario: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CdashigScenarioFields>>;
    public mdrCdashigVersionScenariosDomainScenarioFieldsGet(version: string, domain: string, scenario: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet.');
        }

        if (domain === null || domain === undefined){
            throw new Error('Required parameter domain was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet.');
        }

        if (scenario === null || scenario === undefined){
            throw new Error('Required parameter scenario was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioFieldsGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CdashigScenarioFields>> = this.httpClient.get(`${this.basePath}/mdr/cdashig/${encodeURIComponent(String(version))}/scenarios/${encodeURIComponent(String(domain))}.${encodeURIComponent(String(scenario))}/fields`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CdashigScenarioFields>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDASHIG Scenario
     * @param version CDISC Library Product Version
     * @param domain CDASHIG Domain Identifier
     * @param scenario CDASHIG Scenario Identifier
     
     */
    public mdrCdashigVersionScenariosDomainScenarioGet(version: string, domain: string, scenario: string, observe?: 'body', headers?: Headers): Observable<CdashigScenario>;
    public mdrCdashigVersionScenariosDomainScenarioGet(version: string, domain: string, scenario: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CdashigScenario>>;
    public mdrCdashigVersionScenariosDomainScenarioGet(version: string, domain: string, scenario: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioGet.');
        }

        if (domain === null || domain === undefined){
            throw new Error('Required parameter domain was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioGet.');
        }

        if (scenario === null || scenario === undefined){
            throw new Error('Required parameter scenario was null or undefined when calling mdrCdashigVersionScenariosDomainScenarioGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CdashigScenario>> = this.httpClient.get(`${this.basePath}/mdr/cdashig/${encodeURIComponent(String(version))}/scenarios/${encodeURIComponent(String(domain))}.${encodeURIComponent(String(scenario))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CdashigScenario>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get CDASHIG Scenario List
     * @param version CDISC Library Product Version
     
     */
    public mdrCdashigVersionScenariosGet(version: string, observe?: 'body', headers?: Headers): Observable<CdashigProductScenarios>;
    public mdrCdashigVersionScenariosGet(version: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<CdashigProductScenarios>>;
    public mdrCdashigVersionScenariosGet(version: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (version === null || version === undefined){
            throw new Error('Required parameter version was null or undefined when calling mdrCdashigVersionScenariosGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<CdashigProductScenarios>> = this.httpClient.get(`${this.basePath}/mdr/cdashig/${encodeURIComponent(String(version))}/scenarios`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <CdashigProductScenarios>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get Root CDASHIG Domain Field
     * @param domain CDASHIG Domain Identifier
     * @param field CDASHIG Field Identifier
     
     */
    public mdrRootCdashigDomainsDomainFieldsFieldGet(domain: string, field: string, observe?: 'body', headers?: Headers): Observable<RootCdashigDomainField>;
    public mdrRootCdashigDomainsDomainFieldsFieldGet(domain: string, field: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<RootCdashigDomainField>>;
    public mdrRootCdashigDomainsDomainFieldsFieldGet(domain: string, field: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (domain === null || domain === undefined){
            throw new Error('Required parameter domain was null or undefined when calling mdrRootCdashigDomainsDomainFieldsFieldGet.');
        }

        if (field === null || field === undefined){
            throw new Error('Required parameter field was null or undefined when calling mdrRootCdashigDomainsDomainFieldsFieldGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<RootCdashigDomainField>> = this.httpClient.get(`${this.basePath}/mdr/root/cdashig/domains/${encodeURIComponent(String(domain))}/fields/${encodeURIComponent(String(field))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <RootCdashigDomainField>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get Root CDASHIG Scenario Field
     * @param domain CDASHIG Domain Identifier
     * @param scenario CDASHIG Scenario Identifier
     * @param field CDASHIG Field Identifier
     
     */
    public mdrRootCdashigScenariosDomainScenarioFieldsFieldGet(domain: string, scenario: string, field: string, observe?: 'body', headers?: Headers): Observable<RootCdashigScenarioField>;
    public mdrRootCdashigScenariosDomainScenarioFieldsFieldGet(domain: string, scenario: string, field: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<RootCdashigScenarioField>>;
    public mdrRootCdashigScenariosDomainScenarioFieldsFieldGet(domain: string, scenario: string, field: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (domain === null || domain === undefined){
            throw new Error('Required parameter domain was null or undefined when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet.');
        }

        if (scenario === null || scenario === undefined){
            throw new Error('Required parameter scenario was null or undefined when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet.');
        }

        if (field === null || field === undefined){
            throw new Error('Required parameter field was null or undefined when calling mdrRootCdashigScenariosDomainScenarioFieldsFieldGet.');
        }

        // authentication (basicAuth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json, application/xml';

        const response: Observable<HttpResponse<RootCdashigScenarioField>> = this.httpClient.get(`${this.basePath}/mdr/root/cdashig/scenarios/${encodeURIComponent(String(domain))}.${encodeURIComponent(String(scenario))}/fields/${encodeURIComponent(String(field))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <RootCdashigScenarioField>(httpResponse.response))
               );
        }
        return response;
    }

}
